openapi: 3.0.2
info:
  title: fincode API
  description: "fincodeのAPIリファレンスです。\\\nfincodeは決済情報のほか様々なリソースを管理できるため、リソース指向なREST APIをベースとしたインターフェイス設計のもとでAPIを提供しています。\\\nAPIの呼び出しにはAPIキーによる認証が必要であり、リクエストの際に`Authorization`ヘッダーに有効なAPIキーをセットすることで認証できます。\n"
  version: 1.1.0-beta
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
- url: https://api.fincode.jp
  description: 本番環境
- url: https://api.test.fincode.jp
  description: テスト環境
tags:
- name: Customer
  description: "顧客を管理するAPIです。fincodeにおける顧客は多くのアプリケーションにおいて購入者となるユーザーアカウントに1:1で紐づけられます。\\\n顧客には名前やメールアドレス、請求先住所を登録し管理でき、決済やカード情報・決済手段などのリソースが関連付けられます。\n"
- name: Card
  description: "顧客が持つカードを管理するAPIです。\\\nカードにはクレジットカード/デビッドカード/プリペイドカードの有効期限や名義などの情報が含まれており、決済の実行時にカードのIDを指定することでそのカードに対して請求（決済）を行います。\\\n\\\n※ カード登録時に3Dセキュア認証を行う場合は、[決済手段 登録API](#tag/PaymentMethod/operation/createCustomerPaymentMethod)を使用します。\n"
- name: PaymentMethod
  description: "顧客が持つ決済手段（*Payment Method*）を管理するAPIです。\\\n決済実行の際に決済手段のIDを指定することで、その決済手段に対し請求（決済）をします。\\\n\\\n決済手段オブジェクトは`pay_type`パラメータの値によって下記の情報を表現します。\n\n- `Card`: この決済手段はカードを表します。`card`パラメータ内にカードに関する詳細な情報が含まれます。\n- `Directdebit`: この決済手段は口座振替における振替用口座を表します。`directdebit`パラメータ内に口座に関する詳細な情報が含まれます。\n\n※決済手段APIによるカード情報操作は「登録」のみ可能です。「取得・更新・削除」は引き続きカードAPIを使用してください。\\\n\\\n[更に詳しく解説したドキュメントをこちらから参照できます。](https://docs.fincode.jp/payment/payment_method)\n"
- name: Payment
  description: "決済を行うAPIです。\\\n決済 登録APIで決済情報をfincodeに登録し、決済 実行APIで実際に購入者（顧客）に対して請求を行います。\n"
- name: Secure2
  description: "3Dセキュア認証を行うAPIです。\\\n3Dセキュア認証はカード決済において不正利用を防止するために使用される本人認証の仕組みです。\\\n\\\n決済実行後、購入者が`acs_url`にアクセスすると、ブラウザ情報がfincodeへ送信され認証プロセスが開始します。認証のプロセスと実装のフローに関しては[Docs > 3Dセキュア2.0認証を使用する](https://docs.fincode.jp/payment/fraud_protection/3d_secure_2)から参照できます。\n"
- name: PaymentSession
  description: |
    リダイレクト型決済URLを作成するAPIです。
- name: CardRegistrationSession
  description: "リダイレクト型カード登録URLを作成するAPIです。\\\n顧客ID（`customer_id`）を指定して作成した場合、その顧客に対してカードを登録するためのカード登録URLを発行します。指定しなかった場合、顧客を新たに作成し、その顧客に対してカードを登録するためのカード登録URLを発行します。\n"
- name: Plan
  description: "サブスクリプションのプランを管理するAPIです。\\\nサブスクリプション請求の金額・間隔・頻度などのプラン情報を登録・更新・削除できます。\n"
- name: Subscription
  description: "サブスクリプションを管理するAPIです。\\\n指定した顧客に対して指定したプランで定期・定額で請求を行うサブスクリプションを登録・更新・削除できるほか、結果照会APIを用いてあるサブスクリプションによって発生した毎回の課金の結果を一覧で取得することもできます。\\\n\\\nサブスクリプション課金の処理は非同期で行われ、Webhookイベント`recurring.card.batch`（サブスクリプション課金（カード決済） 実行）や`recurring.directdebit.batch`（サブスクリプション課金（口座振替） 実行）で処理結果を受け取ることができます。\n"
- name: PaymentBulk
  description: "一括決済を行うAPIです。\\\n数千・数万件単位の決済を1回のリクエストで登録・予約することができ、従量課金のビジネスモデルの構築などに利用できます。\\\n\\\n一括決済の処理は非同期で行われ、Webhookイベント`payment.bulk.card.batch`（一括決済課金（カード決済） 実行）で処理結果を受け取ることができます。\n"
- name: Account
  description: "売上入金を取得できます。\\\nまた、ある売上入金の詳細情報を取得し、取引1件ごとの入金額への影響を確認することもできます。\n"
- name: PlatformAccount
  description: "プラットフォーム利用料による売上入金を取得できます。\\\nまた、ある売上入金のIDを指定して、テナントショップごとの入金のサマリー情報を一覧取得することもできます。\n"
- name: PlatformShop
  description: "プラットフォームショップ（メインショップ・サブショップ）の設定を管理するAPIです。\\\nテナントに対し適用するプラットフォーム利用料金の設定や、プラットフォームショップの一覧取得などができます。\n"
- name: TenantShop
  description: "テナントショップの設定を管理するAPIです。\\\nテナントに対し適用するプラットフォーム利用料金の設定や、テナントショップの一覧取得などができます。\n"
- name: LimitedTenantManagement
  description: "テナントショップの新規作成や審査情報の提出、販売免許等のアップロードなどを行えるAPIです。\\\n\\\n<span class=\"attension\">このAPIの利用について</span>\\\nこのAPIを本番環境で利用するためにはfincodeへの申請が必要です。利用を希望する場合は[問い合わせフォーム](https://dashboard.fincode.jp/contact/) からテナント申請管理APIを利用するサービスの概要をお知らせの上、機能開放をリクエストしてください。（テスト環境では常時利用できます。）\n"
- name: WebhookSetting
  description: "Webhook設定を管理するAPIです。\\\nfincode上で指定したイベントが発生した場合、指定したエンドポイントでリアルタイムで通知を受け取れます。\\\n\\\n※テナントのイベントを受けとるためにはテナントごとにWebhook設定を登録する必要があります。\n"
- name: Webhook
  description: "イベントが発生したときに、fincode側から加盟店様が設定したエンドポイントURLへWebhookのリクエストを送信するときの仕様です。\\\n[イベント一覧はこちら]()\\\n※通知対象のパラメータは、機能追加等に伴い追加される可能性があります。\\\n※予告なくパラメータ名の変更、削除が行われることはありません。\\\n\\\nWebhookを利用する場合は、正常受信または受信失敗のレスポンスをWebhookのリクエストに対して返却する必要があります。\\\nWebhookのリクエストがエラーで失敗した場合は、リトライ仕様に従って再送します。\n"
externalDocs:
  description: fincodeJSの仕様はこちらの JSリファレンス から確認できます。
  url: /js
paths:
  /v1/customers:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createCustomer
      tags:
      - Customer
      summary: 顧客 登録
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップに紐づく形で顧客情報を登録します。\n"
      description: |
        顧客情報を登録します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n}' \\\n'https://api.test.fincode.jp/v1/customers'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const customer = await fincode.customers.create({\n            name: \"John Doe\",\n            email: \"john@example.com\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingCustomerRequest{\n\\t\\tEmail:   stringPointer(\"john@example.com\"),\n\\t\\tName:    stringPointer(\"John Doe\"),\n\\t\\tPhoneCC: stringPointer(\"81\"),\n\\t\\tPhoneNo: stringPointer(\"1234567890\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/customers\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingCustomerRequest struct {\n\\tID           *string `json:\"id,omitempty\"`\n\\tName         *string `json:\"name,omitempty\"`\n\\tEmail        *string `json:\"email,omitempty\"`\n\\tPhoneCC      *string `json:\"phone_cc,omitempty\"`\n\\tPhoneNo      *string `json:\"phone_no,omitempty\"`\n\\tAddrCity     *string `json:\"addr_city,omitempty\"`\n\\tAddrCountry  *string `json:\"addr_country,omitempty\"`\n\\tAddrLine1    *string `json:\"addr_line_1,omitempty\"`\n\\tAddrLine2    *string `json:\"addr_line_2,omitempty\"`\n\\tAddrLine3    *string `json:\"addr_line_3,omitempty\"`\n\\tAddrPostCode *string `json:\"addr_post_code,omitempty\"`\n\\tAddrState    *string `json:\"addr_state,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"name\" => \"John Doe\",\n    \"email\" => \"john@example.com\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/customers'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/customers\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        name: \"John Doe\",\n        email: \"john@example.com\",\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveCustomerList
      tags:
      - Customer
      summary: 顧客 一覧取得
      description: |
        顧客情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。
      parameters:
      - in: query
        name: Query
        description: |
          顧客情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/Customer.ListRetrieving.QueryParams"
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客から一覧で取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const customers = await fincode.customers.retrieveList({\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", \"https://api.test.fincode.jp/v1/customers\", nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers\";\n$queryParams = [\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/customers'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\nquery_params = { 'limit': 10 }\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/customers\"\n    query_params =  { limit: 10 }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/customers/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveCustomer
      tags:
      - Customer
      summary: 顧客 取得
      description: |
        IDで指定した顧客情報を取得します。
      parameters:
      - name: id
        in: path
        description: 顧客ID
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客情報を取得します。\n"
        required: false
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n\n    try {\n        // リクエストの送信\n        const customer = await fincode.customers.retrieve(customerId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s\", customerID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    endpoint = \"/v1/customers/#{customer_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updateCustomer
      tags:
      - Customer
      summary: 顧客 更新
      description: |
        IDで指定した顧客情報を更新します。
      parameters:
      - name: id
        in: path
        description: 顧客ID
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客情報を更新します。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Customer.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"name\": \"Jane Doe\",\n    \"email\": \"jane@example.com\"\n}' \\\n'https://api.test.fincode.jp/v1/customers/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n\n    try {\n        // リクエストの送信\n        const customer = await fincode.customers.update(customerId, {\n            name: \"Jane Doe\",\n            email: \"jane@example.com\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\\tbody := UpdatingCustomerRequest{\n\\t\\tName:  stringPointer(\"Jane Doe\"),\n\\t\\tEmail: stringPointer(\"jane@example.com\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s\", customerID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingCustomerRequest struct {\n\\tName         *string `json:\"name,omitempty\"`\n\\tEmail        *string `json:\"email,omitempty\"`\n\\tPhoneCC      *string `json:\"phone_cc,omitempty\"`\n\\tPhoneNo      *string `json:\"phone_no,omitempty\"`\n\\tAddrCity     *string `json:\"addr_city,omitempty\"`\n\\tAddrCountry  *string `json:\"addr_country,omitempty\"`\n\\tAddrLine1    *string `json:\"addr_line_1,omitempty\"`\n\\tAddrLine2    *string `json:\"addr_line_2,omitempty\"`\n\\tAddrLine3    *string `json:\"addr_line_3,omitempty\"`\n\\tAddrPostCode *string `json:\"addr_post_code,omitempty\"`\n\\tAddrState    *string `json:\"addr_state,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n\n$customerId = '<Customer ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"name\" => \"Jane Doe\",\n    \"email\" => \"jane@example.com\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"name\": \"Jane Doe\",\n    \"email\": \"jane@example.com\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    endpoint = \"/v1/customers/#{customer_id}\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        name: 'Jane Doe',\n        email: 'jane@example.com',\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    delete:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: deleteCustomer
      tags:
      - Customer
      summary: 顧客 削除
      description: |
        IDで指定した顧客情報を削除します。
      parameters:
      - name: id
        in: path
        description: 顧客ID
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客情報を削除します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer.Deleting.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X DELETE \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.customers.delete(customerId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"DELETE\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s\", customerID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.delete(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n\n    endpoint = \"/v1/customers/#{customer_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Delete.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/customers/{customer_id}/cards:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Card
      operationId: createCustomerCard
      summary: カード 登録
      description: |
        `customer_id`で指定した顧客に対しカードを登録します。
      parameters:
      - name: customer_id
        in: path
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        description: このカードが紐づく顧客のID
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に対してカードを登録します。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCard.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCard.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"default_flag\": \"1\",\n    \"token\": \"<Token from fincodeJS>\"\n}' \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/cards'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n\n    try {\n        // リクエストの送信\n        const card = await fincode.cards.create(customerId, {\n            token: \"<Token from fincodeJS>\",\n            default_flag: \"1\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\n\\tbody := CreatingCustomerCardRequest{\n\\t\\tToken:       \"<Token from fincodeJS>\",\n\\t\\tDefaultFlag: \"0\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/cards\", customerID), bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingCustomerCardRequest struct {\n\\tDefaultFlag string `json:\"default_flag\"`\n\\tToken       string `json:\"token\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/cards\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"token\" => \"613531623566356561366261346366623132306663393139\",\n    \"default_flag\" => \"1\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/cards'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"token\": \"<Token from fincodeJS>\",\n    \"default_flag\": \"1\",\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    endpoint = \"/v1/customers/#{customer_id}/cards\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        token: '<Token from fincodeJS>',\n        default_flag: '1'\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Card
      operationId: retrieveCustomerCardList
      summary: カード 一覧取得
      description: |
        `customer_id`で指定した顧客に対し紐づくカードを一覧で取得します。
      parameters:
      - name: customer_id
        in: path
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        description: "顧客ID。 \\\nこの顧客に紐づくカードを一覧で取得します。\n"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードの一覧を取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCard.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/cards'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n\n    try {\n        // リクエストの送信\n        const cards = await fincode.cards.retrieveList(customerId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/cards\", customerID), nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/cards\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "from calendar import c\nimport requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/cards'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    endpoint = \"/v1/customers/#{customer_id}/cards\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/customers/{customer_id}/cards/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Card
      operationId: retrieveCustomerCard
      summary: カード 取得
      description: |
        `customer_id`で指定した顧客に対し紐づくカードのうち`id`で指定したものを取得します。
      parameters:
      - name: customer_id
        in: path
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        description: このカードが紐づく顧客のID
        required: true
      - name: id
        in: path
        schema:
          $ref: "#/components/schemas/CardId_schema"
        description: 取得するカードのID
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードから取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCard.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/cards/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n    const cardId = \"<Card ID>\";\n\n    try {\n        // リクエストの送信\n        const card = await fincode.cards.retrieve(customerId, cardId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\\tcardID := \"<Card ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/cards/%s\", customerId, cardID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n$cardId = '<Card ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/cards/{$cardId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\ncard_id = '<Card ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/cards/{card_id}/'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    card_id = '<Card ID>'\n    \n    endpoint = \"/v1/customers/#{customer_id}/cards/#{card_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Card
      operationId: updateCustomerCard
      summary: カード 更新
      description: |
        `customer_id`で指定した顧客に対し紐づくカードのうち`id`で指定したものを更新します。
      parameters:
      - name: customer_id
        in: path
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        description: このカードが紐づく顧客のID
        required: true
      - name: id
        in: path
        schema:
          $ref: "#/components/schemas/CardId_schema"
        description: 更新するカードのID
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードの情報を更新します。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerCard.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCard.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"default_flag\": \"1\",\n}' \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/cards/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n    const cardId = \"<Card ID>\";\n\n    try {\n        // リクエストの送信\n        const card = await fincode.cards.update(customerId, cardId, {\n            default_flag: \"0\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := UpdatingCustomerCardRequest{\n\\t\\tDefaultFlag: stringPointer(\"1\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"PUT\", \"https://api.test.fincode.jp/v1/customers/{customer_id}/cards/{id}\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingCustomerCardRequest struct {\n\\tDefaultFlag *string `json:\"default_flag,omitempty\"`\n\\tToken       *string `json:\"token,omitempty\"`\n\\tHolderName  *string `json:\"holder_name,omitempty\"`\n\\tExpire      *string `json:\"expire,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n$cardId = '<Card ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/cards/{$cardId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$data = json_encode([\n    \"default_flag\" => \"0\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\ncard_id = '<Card ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/cards/{card_id}/'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"default_flag\": \"0\",\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    card_id = '<Card ID>'\n\n    endpoint = \"/v1/customers/#{customer_id}/cards/#{card_id}\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        default_flag: '0'\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    delete:
      tags:
      - Card
      operationId: deleteCustomerCard
      summary: カード 削除
      description: |
        `customer_id`で指定した顧客に対し紐づくカードのうち`id`で指定したものを削除します。
      parameters:
      - name: customer_id
        in: path
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        description: このカードが紐づく顧客のID
        required: true
      - name: id
        in: path
        schema:
          $ref: "#/components/schemas/CardId_schema"
        description: 削除するカードのID
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に対して登録されたカードを削除します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerCard.Deleting.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X DELETE \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/cards/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const customerId = \"<Customer ID>\";\n    const cardId = \"<Card ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.cards.delete(customerId, cardId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\\tcardID := \"<Card ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"DELETE\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/cards/%s\", customerId, cardID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n$cardId = '<Card ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/cards/{$cardId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\ncard_id = '<Card ID>' \n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/cards/{card_id}/'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.delete(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    card_id = '<Card ID>'\n\n    endpoint = \"/v1/customers/#{customer_id}/cards/#{card_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Delete.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/customers/{customer_id}/payment_methods:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createCustomerPaymentMethod
      tags:
      - PaymentMethod
      summary: 決済手段 登録
      description: |
        `customer_id`で指定した顧客に対し、決済手段を登録します。
      parameters:
      - name: customer_id
        in: path
        description: 顧客ID
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に対して決済手段を登録します。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerPaymentMethod.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPaymentMethod.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Directdebit\",\n    \"default_flag\": \"1\",\n    \"return_url\": \"https://your-service.example.com/return\",\n    \"directdebit\":  {\n        \"application_type\": \"ONLINE\",\n        \"bank_code\": \"0310\",\n        \"branch_code\": \"000\",\n        \"account_type\": \"1\",\n        \"account_number\": \"0999999\",\n        \"account_name_kana\": \"ナマエカナ\"\n    }\n}' \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods'\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\n\\tbody := CreatingPaymentMethodRequest{\n\\t\\tPayType:     \"Directdebit\",\n\\t\\tDefaultFlag: \"1\",\n\\t\\tReturnURL:   \"https://your-service.example.com/return\",\n\\t\\tDirectdebit: Directdebit{\n\\t\\t\\tApplicationType: \"ONLINE\",\n\\t\\t\\tBankCode:        \"0310\",\n\\t\\t\\tBranchCode:      stringPointer(\"000\"),\n\\t\\t\\tAccountType:     stringPointer(\"1\"),\n\\t\\t\\tAccountNumber:   stringPointer(\"0999999\"),\n\\t\\t\\tAccountNameKana: \"ナマエカナ\",\n\\t\\t},\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\turl := fmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/payment_methods\", customerID)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"POST\",\n\\t\\turl,\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingPaymentMethodRequest struct {\n\\tPayType     string      `json:\"pay_type\"`\n\\tDefaultFlag string      `json:\"default_flag\"`\n\\tDirectdebit Directdebit `json:\"directdebit\"`\n\\tReturnURL   string      `json:\"return_url\"`\n}\n\ntype Directdebit struct {\n\\tApplicationType  string            `json:\"application_type\"`\n\\tBankCode         string            `json:\"bank_code\"`\n\\tBranchCode       *string           `json:\"branch_code,omitempty\"`\n\\tAccountType      *string           `json:\"account_type,omitempty\"`\n\\tAccountNumber    *string           `json:\"account_number,omitempty\"`\n\\tAccountName      *string           `json:\"account_name,omitempty\"`\n\\tAccountNameKana  string            `json:\"account_name_kana\"`\n\\tPaperApplication *PaperApplication `json:\"paper_application,omitempty\"`\n}\n\ntype PaperApplication struct {\n\\tPostalAccountNumber1 *string `json:\"postal_account_number_1,omitempty\"`\n\\tPostalAccountNumber2 *string `json:\"postal_account_number_2,omitempty\"`\n\\tRequestFormId        string  `json:\"request_form_id\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: node
        label: Node.js
        source: "import fetch from \"node-fetch\";\n\nconst BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const customerId = \"<Customer ID>\";\n\n    const endpoint = `${BASE_URL}/v1/customers/${customerId}/payment_methods`;\n\n    const response = await fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n            pay_type: \"Directdebit\",\n            default_flag: \"1\",\n            return_url: \"https://your-service.example.com/return\",\n            directdebit: {\n                application_type: \"ONLINE\",\n                bank_code: \"0310\",\n                branch_code: \"000\",\n                account_type: \"1\",\n                account_number: \"0999999\",\n                account_name_kana: \"ナマエカナ\",\n            },\n        }),\n    });\n    const paymentMethods = await response.json();\n})();\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/payment_methods\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"Directdebit\",\n    \"default_flag\" => \"1\",\n    \"return_url\" => \"https://your-service.example.com/return\",\n    \"directdebit\" => [\n        \"application_type\" => \"ONLINE\",\n        \"bank_code\" => \"0310\",\n        \"branch_code\" => \"000\",\n        \"account_type\" => \"1\",\n        \"account_number\" => \"0999999\",\n        \"account_name_kana\" => \"ナマエカナ\"\n    ]\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Directdebit\",\n    \"default_flag\": \"1\",\n    \"return_url\": \"https://your-service.example.com/return\",\n    \"directdebit\": {\n        \"application_type\": \"ONLINE\",\n        \"bank_code\": \"0310\",\n        \"branch_code\": \"000\",\n        \"account_type\": \"1\",\n        \"account_number\": \"0999999\",\n        \"account_name_kana\": \"ナマエカナ\"\n    }\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    endpoint = \"/v1/customers/#{customer_id}/payment_methods\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Directdebit\",\n        default_flag: \"1\",\n        return_url: \"https://your-service.example.com/return\",\n        directdebit: {\n            application_type: \"ONLINE\",\n            bank_code: \"9999\",\n            branch_code: \"000\",\n            account_type: \"1\",\n            account_number: \"0999999\",\n            account_name_kana: \"ナマエカナ\"\n        }   \n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveCustomerPaymentMethodList
      tags:
      - PaymentMethod
      summary: 決済手段 一覧取得
      description: |
        `customer_id`で指定した顧客に対し紐づく決済手段を一覧で取得します。
      parameters:
      - name: customer_id
        in: path
        description: 顧客ID
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        required: true
      - name: Query
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CustomerPaymentMethod.ListRetrieving.QueryParams"
        description: |
          決済手段の一覧取得において検索条件となるクエリパラメータ
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段から一覧で取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPaymentMethod.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods?pay_type=Directdebit'\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/payment_methods\", customerID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"pay_type\", \"Directdebit\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: node
        label: Node.js
        source: "import fetch from \"node-fetch\";\n\nconst BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const customerId = \"<Customer ID>\";\n\n    const endpoint = `${BASE_URL}/v1/customers/${customerId}/payment_methods`;\n\n    const response = await fetch(endpoint, {\n        method: \"GET\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n        },\n    });\n    const paymentMethods = await response.json();\n})();\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/payment_methods\";\n$queryParams = [\n    \"pay_type\" => \"Directdebit\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . \"?\" . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods'\nquery_params = {\n    'pay_type': 'Directdebit',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n\n    endpoint = \"/v1/customers/#{customer_id}/payment_methods\"\n    query_params =  { \n        limit: 10,\n        pay_type: 'Directdebit',\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/customers/{customer_id}/payment_methods/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveCustomerPaymentMethod
      tags:
      - PaymentMethod
      summary: 決済手段 取得
      description: |
        `customer_id`で指定した顧客に対し紐づく決済手段のうち、`id`で指定したものを取得します。
      parameters:
      - name: customer_id
        in: path
        description: 顧客ID
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        required: true
      - name: id
        in: path
        description: 決済手段ID
        schema:
          $ref: "#/components/schemas/PaymentMethodId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段からIDで指定した決済手段を取得します。\n"
      - name: Query
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/CustomerPaymentMethod.Retrieving.QueryParams"
        description: |
          決済手段の取得において検索条件となるクエリパラメータ
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPaymentMethod.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods/{id}?pay_type=Directdebit'\n"
      - lang: node
        label: Node.js
        source: "import fetch from \"node-fetch\";\n\nconst BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const customerId = \"<Customer ID>\";\n    const paymentMethodId = \"<Payment Method ID>\";\n\n    const endpoint = `${BASE_URL}/v1/customers/${customerId}/payment_methods/${paymentMethodId}`;\n\n    const response = await fetch(endpoint, {\n        method: \"GET\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n        },\n    });\n    const paymentMethod = await response.json();\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\\tpaymentMethodID := \"<Payment Method ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/payment_methods/%s\", customerID, paymentMethodID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"pay_type\", \"Directdebit\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n$paymentMethodId = '<Payment Method ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/payment_methods/{$paymentMethodId}\";\n$queryParams = [\n    \"pay_type\" => \"Directdebit\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\npayment_method_id = '<Payment Method ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods/{payment_method_id}/'\nquery_params = {\n    'pay_type': 'Directdebit',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    payment_method_id = '<Payment Method ID>'\n\n    endpoint = \"/v1/customers/#{customer_id}/payment_methods/#{payment_method_id}\"\n    query_params =  {\n        limit: 10,\n        pay_type: 'Directdebit',\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    delete:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: deleteCustomerPaymentMethod
      tags:
      - PaymentMethod
      summary: 決済手段 削除
      description: |
        `customer_id`で指定した顧客に対し紐づく決済手段のうち、`id`で指定したものを削除します。
      parameters:
      - name: customer_id
        in: path
        description: 顧客ID
        schema:
          $ref: "#/components/schemas/CustomerId_schema"
        required: true
      - name: id
        in: path
        description: 決済手段ID
        schema:
          $ref: "#/components/schemas/PaymentMethodId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく顧客のうち、指定したIDの顧客に紐づく決済手段からIDで指定した決済手段を削除します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerPaymentMethod.Deleting.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X DELETE \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods/{id}?pay_type=Directdebit'\n"
      - lang: node
        label: Node.js
        source: "import fetch from \"node-fetch\";\n\nconst BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const customerId = \"<Customer ID>\";\n    const paymentMethodId = \"<Payment Method ID>\";\n\n    const endpoint = `${BASE_URL}/v1/customers/${customerId}/payment_methods/${paymentMethodId}`;\n\n    const response = await fetch(endpoint, {\n        method: \"DELETE\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n        },\n    });\n    const result = await response.json();\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tcustomerID := \"<Customer ID>\"\n\\tpaymentMethodID := \"<Payment Method ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"DELETE\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/customers/%s/payment_methods/%s\", customerID, paymentMethodID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"pay_type\", \"Directdebit\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$customerId = '<Customer ID>';\n$paymentMethodId = '<Payment Method ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/customers/{$customerId}/payment_methods/{$paymentMethodId}\";\n$queryParams = [\n    \"pay_type\" => \"Directdebit\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . \"?\" . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ncustomer_id = '<Customer ID>'\npayment_method_id = '<Payment Method ID>'\n\nurl = f'https://api.test.fincode.jp/v1/customers/{customer_id}/payment_methods/{payment_method_id}/'\nquery_params = {\n    'pay_type': 'Directdebit',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.delete(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    customer_id = '<Customer ID>'\n    payment_method_id = '<Payment Method ID>'\n    \n    endpoint = \"/v1/customers/#{customer_id}/payment_methods/#{payment_method_id}\"\n    query_params =  {\n        limit: 10,\n        pay_type: 'Directdebit',\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Delete.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePaymentList
      tags:
      - Payment
      summary: 決済 一覧取得
      description: |
        決済情報の一覧を取得します。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づく決済から一覧で取得します。\n"
      - name: Query
        in: query
        required: true
        schema:
          oneOf:
          - allOf:
            - $ref: "#/components/schemas/Payment.ListRetrieving.QueryParams"
            - $ref: "#/components/schemas/Payment.ListRetrieving.Card.QueryParams"
            - $ref: "#/components/schemas/Pagination.QueryParams"
            title: カード決済
          - allOf:
            - $ref: "#/components/schemas/Payment.ListRetrieving.QueryParams"
            - $ref: "#/components/schemas/Payment.ListRetrieving.ApplePay.QueryParams"
            - $ref: "#/components/schemas/Pagination.QueryParams"
            title: Apple Pay
          - allOf:
            - $ref: "#/components/schemas/Payment.ListRetrieving.QueryParams"
            - $ref: "#/components/schemas/Payment.ListRetrieving.Konbini.QueryParams"
            - $ref: "#/components/schemas/Pagination.QueryParams"
            title: コンビニ決済
          - allOf:
            - $ref: "#/components/schemas/Payment.ListRetrieving.QueryParams"
            - $ref: "#/components/schemas/Payment.ListRetrieving.PayPay.QueryParams"
            - $ref: "#/components/schemas/Pagination.QueryParams"
            title: PayPay
          - allOf:
            - $ref: "#/components/schemas/Payment.ListRetrieving.QueryParams"
            - $ref: "#/components/schemas/Payment.ListRetrieving.DirectDebit.QueryParams"
            - $ref: "#/components/schemas/Pagination.QueryParams"
            title: 口座振替
        description: |
          決済の一覧取得において検索条件となるクエリパラメータ
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Payment.Card.ListRetrieving.Response"
                - $ref: "#/components/schemas/Payment.ApplePay.ListRetrieving.Response"
                - $ref: "#/components/schemas/Payment.Konbini.ListRetrieving.Response"
                - $ref: "#/components/schemas/Payment.PayPay.ListRetrieving.Response"
                - $ref: "#/components/schemas/Payment.DirectDebit.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/payments?pay_type=Card'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const payments = await fincode.payments.retrieveList({\n            pay_type: \"Card\",\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", \"https://api.test.fincode.jp/v1/payments\", nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/payments'\nquery_params = {\n    'pay_type': 'Card',\n    'limit': 10,\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/payments\"\n    query_params =  {\n        limit: 10,\n        pay_type: 'Card',\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createPayment
      tags:
      - Payment
      summary: 決済 登録
      description: |
        決済情報をfincodeに登録します。決済登録に成功した時点ではまだ顧客に対して請求はされていません。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主として決済を登録します。テナントが`pay_type`で指定する決済手段契約の審査を完了させている必要があります。\n"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/Payment.Card.Creating.Request"
              - $ref: "#/components/schemas/Payment.ApplePay.Creating.Request"
              - $ref: "#/components/schemas/Payment.Konbini.Creating.Request"
              - $ref: "#/components/schemas/Payment.PayPay.Creating.Request"
              - $ref: "#/components/schemas/Payment.DirectDebit.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Payment.Card.Creating.Response"
                - $ref: "#/components/schemas/Payment.ApplePay.Creating.Response"
                - $ref: "#/components/schemas/Payment.Konbini.Creating.Response"
                - $ref: "#/components/schemas/Payment.PayPay.Creating.Response"
                - $ref: "#/components/schemas/Payment.DirectDebit.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"amount\": \"1000\",\n    \"job_code\": \"CAPTURE\",\n    \"tds_type\": \"2\"\n}' \\\n'https://api.test.fincode.jp/v1/payments'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.create({\n            pay_type: \"Card\",\n            job_code: \"CAPTURE\",\n            amount: \"1000\",\n            tds_type: \"2\",\n            td_tenant_name: \"My Store\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingPaymentRequest{\n\\t\\tPayType: \"Card\",\n\\t\\tJobCode: \"CAPTURE\",\n\\t\\tAmount:  stringPointer(\"1000\"),\n\\t\\tTdsType: stringPointer(\"2\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"POST\",\n\\t\\t\"https://api.test.fincode.jp/v1/payments\",\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingPaymentRequest struct {\n\\tPayType      string  `json:\"pay_type\"`\n\\tID           *string `json:\"id,omitempty\"`\n\\tJobCode      string  `json:\"job_code\"`\n\\tAmount       *string `json:\"amount,omitempty\"`\n\\tTax          *string `json:\"tax,omitempty\"`\n\\tClientField1 *string `json:\"client_field_1,omitempty\"`\n\\tClientField2 *string `json:\"client_field_2,omitempty\"`\n\\tClientField3 *string `json:\"client_field_3,omitempty\"`\n\\tTdsType      *string `json:\"tds_type,omitempty\"`\n\\tTdTenantName *string `json:\"td_tenant_name,omitempty\"`\n\\tTds2Type     *string `json:\"tds2_type,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"Card\",\n    \"job_code\" => \"CAPTURE\",\n    \"amount\" => \"1000\",\n\n    \"tds_type\" => \"2\",\n    \"td_tenant_name\" => \"My Store\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/payments'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"amount\": \"1000\",\n    \"job_code\": \"CAPTURE\",\n    \"tds_type\": \"2\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/payments\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        amount: \"1000\",\n        job_code: \"CAPTURE\",\n        tds_type: \"2\",\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/{id}:
    put:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: executePayment
      tags:
      - Payment
      summary: 決済 実行
      description: |
        fincodeに登録された決済情報を指定し、請求を実行します。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済のうち、`id`で指定した決済処理を実行します。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/Payment.Card.Executing.Request"
              - $ref: "#/components/schemas/Payment.ApplePay.Executing.Request"
              - $ref: "#/components/schemas/Payment.Konbini.Executing.Request"
              - $ref: "#/components/schemas/Payment.PayPay.Executing.Request"
              - $ref: "#/components/schemas/Payment.DirectDebit.Executing.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Payment.Card.Executing.Response"
                - $ref: "#/components/schemas/Payment.ApplePay.Executing.Response"
                - $ref: "#/components/schemas/Payment.Konbini.Executing.Response"
                - $ref: "#/components/schemas/Payment.PayPay.Executing.Response"
                - $ref: "#/components/schemas/Payment.DirectDebit.Executing.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\",\n    \"token\": \"<Token from fincodeJS>\",\n}' \\\n'https://api.test.fincode.jp/v1/payments/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n    const accessId = \"<Access ID>\";\n\n    const customerId = \"<Customer ID>\";\n    const cardId = \"<Card ID>\";\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.execute(orderId, {\n            pay_type: \"Card\",\n            access_id: accessId,\n            customer_id: customerId,\n            card_id: cardId,\n            tds2_ret_url: \"https://your-service.example.com/tds2_return\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := ExecutingPaymentRequest{\n\\t\\tPayType:    \"Card\",\n\\t\\tAccessID:   \"<Access ID>\",\n\\t\\tCustomerID: stringPointer(\"<Customer ID>\"),\n\\t\\tCardID:     stringPointer(\"<Card ID>\"),\n\\t\\tMethod:     stringPointer(\"1\"),\n\\t\\tTds2RetURL: stringPointer(\"https://your-service.example.com/tds2_returns\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"PUT\", \"https://api.test.fincode.jp/v1/payments/{id}\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype ExecutingPaymentRequest struct {\n\\tPayType    string  `json:\"pay_type\"`\n\\tAccessID   string  `json:\"access_id\"`\n\\tToken      *string `json:\"token,omitempty\"`\n\\tCustomerID *string `json:\"customer_id,omitempty\"`\n\\tCardID     *string `json:\"card_id,omitempty\"`\n\\tMethod     *string `json:\"method,omitempty\"`\n\\tPayTimes   *string `json:\"pay_times,omitempty\"`\n\\tTds2RetURL *string `json:\"tds2_ret_url,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}\";\n\n$data = json_encode([\n    \"pay_type\" => \"Card\",\n    \"access_id\" => \"<Access ID>\",\n    \"customer_id\" => \"<Customer ID>\",\n    \"card_id\" => \"<Card ID>\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\",\n    \"token\": \"<Token from fincodeJS>\",\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}\"\n    query_params =  {\n        pay_type: 'Card',\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        access_id: \"<Access ID>\",\n        token: \"<Token from fincodeJS>\",\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePayment
      tags:
      - Payment
      summary: 決済 取得
      description: |
        指定した決済情報を取得します。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済のうち、`id`で指定した決済情報を取得します。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      - name: Query
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Payment.Retrieving.QueryParams"
        description: |
          決済の取得において検索条件となるクエリパラメータ
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Payment.Card.Retrieving.Response"
                - $ref: "#/components/schemas/Payment.ApplePay.Retrieving.Response"
                - $ref: "#/components/schemas/Payment.Konbini.Retrieving.Response"
                - $ref: "#/components/schemas/Payment.PayPay.Retrieving.Response"
                - $ref: "#/components/schemas/Payment.DirectDebit.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/payments/{id}?pay_type=Card'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.retrieve(orderId, {\n            pay_type: \"Card\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\torderID := \"<Order ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/%s\", orderID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/'\nquery_params = {\n    'pay_type': 'Card',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}\"\n    query_params =  {\n        pay_type: 'Card',\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/{id}/capture:
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: capturePayment
      tags:
      - Payment
      summary: 決済 売上確定
      description: "`status`が仮売上（`AUTHORIZED`）またはキャンセル（`CANCELED`）である決済に対して売上確定を行います。\\\n成功すると、ステータスが`CAPTURED`に遷移し、その時点を集計対象とした売上入金に反映されます。\n"
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済のうち、`id`で指定した決済の売上確定を実行します。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/Payment.Card.Capturing.Request"
              - $ref: "#/components/schemas/Payment.ApplePay.Capturing.Request"
              - $ref: "#/components/schemas/Payment.PayPay.Capturing.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Payment.Card.Capturing.Response"
                - $ref: "#/components/schemas/Payment.ApplePay.Capturing.Response"
                - $ref: "#/components/schemas/Payment.PayPay.Capturing.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\"\n}' \\\n'https://api.test.fincode.jp/v1/payments/{id}/capture'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n    const accessId = \"<Access ID>\";\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.capture(orderId, {\n            pay_type: \"Card\",\n            access_id: accessId,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\torderID := \"<Order ID>\"\n\n\\tbody := CapturingPaymentRequest{\n\\t\\tPayType:  \"Card\",\n\\t\\tAccessID: \"<Access ID>\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/%s/capture\", orderID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CapturingPaymentRequest struct {\n\\tPayType  string  `json:\"pay_type\"`\n\\tAccessID string  `json:\"access_id\"`\n\\tMethod   *string `json:\"method,omitempty\"`\n\\tPayTimes *string `json:\"pay_times,omitempty\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}/capture\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"<Pay Type>\",\n    \"access_id\" => \"<Access ID>\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/capture'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}/capture\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        access_id: \"<Access ID>\",\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/{id}/cancel:
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: cancelPayment
      tags:
      - Payment
      summary: 決済 キャンセル
      description: "決済をキャンセルします。キャンセルに成功すると`status`はキャンセル済み（`CANCELED`）に遷移します。\\\n\\\nユーザーへの返金の行われ方などは決済手段によって異なります。\\\n詳細は[Docs > 決済](https://docs.fincode.jp/payment)から参照できます。\n"
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済のうち、`id`で指定した決済をキャンセルします。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/Payment.Card.Canceling.Request"
              - $ref: "#/components/schemas/Payment.ApplePay.Canceling.Request"
              - $ref: "#/components/schemas/Payment.Konbini.Canceling.Request"
              - $ref: "#/components/schemas/Payment.PayPay.Canceling.Request"
              - $ref: "#/components/schemas/Payment.DirectDebit.Canceling.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Payment.Card.Canceling.Response"
                - $ref: "#/components/schemas/Payment.ApplePay.Canceling.Response"
                - $ref: "#/components/schemas/Payment.Konbini.Canceling.Response"
                - $ref: "#/components/schemas/Payment.PayPay.Canceling.Response"
                - $ref: "#/components/schemas/Payment.DirectDebit.Canceling.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\"\n}' \\\n'https://api.test.fincode.jp/v1/payments/{id}/cancel'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n    const accessId = \"<Access ID>\";\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.cancel(orderId, {\n            pay_type: \"Card\",\n            access_id: accessId,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\torderID := \"<Order ID>\"\n\n\\tbody := CancelingPaymentRequest{\n\\t\\tPayType:  \"Card\",\n\\t\\tAccessID: \"<Access ID>\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/%s/cancel\", orderID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CancelingPaymentRequest struct {\n\\tPayType  string `json:\"pay_type\"`\n\\tAccessID string `json:\"access_id\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}/cancel\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"<Pay Type>\",\n    \"access_id\" => \"<Access ID>\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/cancel'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}/cancel\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        access_id: \"<Access ID>\",\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/{id}/auth:
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: authorizePayment
      tags:
      - Payment
      summary: 決済 再オーソリ
      description: "決済のオーソリを再度実行します。\\\n\\\n`pay_type`が`Card`かつ`status`が`CANCELED`の決済（キャンセル済みのカード決済）に対して実行ができ、初回決済時の情報を引き継いで再オーソリを行います。\n"
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済のうち、`id`で指定した決済のオーソリを再度実行します。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment.Card.Reauthorizing.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment.Card.Reauthorizing.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\",\n    \"method\": \"1\"\n}' \\\n'https://api.test.fincode.jp/v1/payments/{id}/auth'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n    const accessId = \"<Access ID>\";\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.reauthorize(orderId, {\n            pay_type: \"Card\",\n            access_id: accessId,\n            method: \"1\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := ReauthorizingPaymentRequest{\n\\t\\tPayType:  \"Card\",\n\\t\\tAccessID: \"<Access ID>\",\n\\t\\tMethod:   \"1\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"PUT\", \"https://api.test.fincode.jp/v1/payments/{id}/auth\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype ReauthorizingPaymentRequest struct {\n\\tPayType  string `json:\"pay_type\"`\n\\tAccessID string `json:\"access_id\"`\n\\tMethod   string `json:\"method\"`\n\\tPayTimes string `json:\"pay_times\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}/auth\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"Card\",\n    \"access_id\" => \"<Access ID>\",\n    \"method\" => \"1\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/auth'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\",\n    \"method\": \"1\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}/auth\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        access_id: \"<Access ID>\",\n        method: \"1\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/{id}/change:
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: changeAmountOfPayment
      tags:
      - Payment
      summary: 決済 金額変更
      description: "決済の利用金額を変更します。\\\n既に売上確定となっている決済は請求金額が変更され、仮売上となっている決済は確保している与信枠の金額が変更されます。\n"
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済のうち、`id`で指定した決済の利用金額を変更します。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/Payment.Card.ChangingAmount.Request"
              - $ref: "#/components/schemas/Payment.PayPay.ChangingAmount.Request"
              - $ref: "#/components/schemas/Payment.DirectDebit.ChangingAmount.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Payment.Card.ChangingAmount.Response"
                - $ref: "#/components/schemas/Payment.PayPay.ChangingAmount.Response"
                - $ref: "#/components/schemas/Payment.DirectDebit.ChangingAmount.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\",\n    \"job_code\": \"CAPTURE\",\n    \"amount\": \"1500\"\n}' \\\n'https://api.test.fincode.jp/v1/payments/{id}/change'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n    const accessID = \"<Access ID>\";\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.changeAmount(orderId, {\n            pay_type: \"Card\",\n            access_id: accessID,\n            job_code: \"CAPTURE\",\n            amount: \"1200\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\torderID := \"<Order ID>\"\n\n\\tbody := ChangingAmountRequest{\n\\t\\tPayType:  \"Card\",\n\\t\\tAccessID: \"<Access ID>\",\n\\t\\tJobCode:  \"1\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/%s/change\", orderID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype ChangingAmountRequest struct {\n\\tPayType  string `json:\"pay_type\"`\n\\tAccessID string `json:\"access_id\"`\n\\tJobCode  string `json:\"job_code\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}/change\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"<Pay Type>\",\n    \"access_id\" => \"<Access ID>\",\n    \"job_code\" => \"CAPTURE\",\n    \"amount\" => \"1000\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/change'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\",\n    \"job_code\": \"CAPTURE\",\n    \"amount\": \"1500\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}/change\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        access_id: \"<Access ID>\",\n        job_code: \"CAPTURE\",\n        amount: \"1500\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/{id}/secure:
    put:
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: executePaymentAfter3DSecure
      tags:
      - Payment
      summary: 認証後決済 実行
      description: "3Dセキュア認証後の決済を実行します。\\\n\\\n3Dセキュア認証APIもしくは認証結果確定APIのレスポンスの3Dセキュア認証結果（`tds2_trans_result`）が`Y`または`A`のとき、このAPIを実行して3Dセキュア認証後の決済を実行します。\n"
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済のうち、`id`で指定した決済の3Dセキュア認証後決済を実行します。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment.Card.ExecutingAfter3DS.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment.Card.ExecutingAfter3DS.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\"\n}' \\\n'https://api.test.fincode.jp/v1/payments/{id}/secure'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n    const accessId = \"<Access ID>\";\n\n    try {\n        // リクエストの送信\n        const payment = await fincode.payments.executeAfter3DSecureAuth(\n            orderId,\n            {\n                pay_type: \"Card\",\n                access_id: accessId,\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\torderID := \"<Order ID>\"\n\n\\tbody := ExecutingPaymentAfter3DSecureRequest{\n\\t\\tPayType:  \"Card\",\n\\t\\tAccessID: \"<Access ID>\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/%s/secure\", orderID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype ExecutingPaymentAfter3DSecureRequest struct {\n\\tPayType  string `json:\"pay_type\"`\n\\tAccessID string `json:\"access_id\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}/secure\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"Card\",\n    \"access_id\" => \"<Access ID>\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/secure'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"access_id\": \"<Access ID>\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}/secure\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        access_id: \"<Access ID>\",\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/{id}/barcode:
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: generateBarcodeOfPayment
      tags:
      - Payment
      summary: バーコード発行
      description: |
        リクエストしたデバイスの情報に合わせてコンビニ決済のバーコードを再度発行します。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主としたコンビニ決済のうち、`id`で指定した決済のバーコードを再度発行します。\n"
      - name: id
        in: path
        description: オーダーID（決済情報のID）
        schema:
          $ref: "#/components/schemas/OrderId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payment.Konbini.GeneratingBarcode.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment.Konbini.GeneratingBarcode.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Konbini\",\n    \"access_id\": \"<Access ID>\",\n    \"device_name\": \"iPhone\",\n    \"win_width\": \"390\",\n    \"win_height\": \"844\",\n    \"pixel_ratio\": \"3.00\",\n    \"win_size_type\": \"2\"\n}' \\\n'https://api.test.fincode.jp/v1/payments/{id}/barcode'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const orderId = \"<Order ID>\";\n    const accessId = \"<Access ID>\";\n\n    const payment = await fincode.payments.generateKonbiniPaymentBarcode(\n        orderId,\n        {\n            access_id: accessId,\n            pay_type: \"Konbini\",\n            device_name: \"iPhone\",\n            win_width: \"390\",\n            win_height: \"844\",\n            pixel_ratio: \"3.00\",\n            win_size_type: \"2\",\n        }\n    );\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\torderID := \"<Order ID>\"\n\n\\tbody := GeneratingBarcodeRequest{\n\\t\\tPayType:     \"Konbini\",\n\\t\\tAccessID:    \"<Access ID>\",\n\\t\\tDeviceName:  \"iPhone\",\n\\t\\tWinWidth:    \"390\",\n\\t\\tWinHeight:   \"844\",\n\\t\\tPixelRatio:  \"3.00\",\n\\t\\tWinSizeType: \"2\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/%s/barcode\", orderID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype GeneratingBarcodeRequest struct {\n\\tPayType     string `json:\"pay_type\"`\n\\tAccessID    string `json:\"access_id\"`\n\\tDeviceName  string `json:\"device_name\"`\n\\tWinWidth    string `json:\"win_width\"`\n\\tWinHeight   string `json:\"win_height\"`\n\\tPixelRatio  string `json:\"pixel_ratio\"`\n\\tWinSizeType string `json:\"win_size_type\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$orderId = '<Order ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/{$orderId}/barcode\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"Konbini\",\n    \"access_id\" => \"<Access ID>\",\n    \"device_name\" => \"iPhone\",\n    \"win_width\" => \"390\",\n    \"win_height\" => \"844\",\n    \"pixel_ratio\" => \"3.00\",\n    \"win_size_type\" => \"2\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\norder_id = '<Order ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/{order_id}/barcode'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Konbini\",\n    \"access_id\": \"<Access ID>\",\n    \"device_name\": \"iPhone\",\n    \"win_width\": \"390\",\n    \"win_height\": \"844\",\n    \"pixel_ratio\": \"3.00\",\n    \"win_size_type\": \"2\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    order_id = '<Order ID>'\n    endpoint = \"/v1/payments/#{order_id}/barcode\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Konbini\",\n        access_id: \"<Access ID>\",\n        device_name: \"iPhone\",\n        win_width: \"390\",\n        win_height: \"844\",\n        pixel_ratio: \"3.00\",\n        win_size_type: \"2\" \n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/secure2/{access_id}:
    put:
      operationId: execute3DSecureAuthentication
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Secure2
      summary: 3Dセキュア 認証API
      description: "`access_id`で指定したカード決済取引の3Dセキュア認証を開始します。\\\n\\\n用意した`tds2_ret_url`に対し`event`パラメータで`3DSMethodFinished`もしくは`3DSMethodSkipped`イベントが通知されたとき、このAPIを呼び出します。\n"
      parameters:
      - name: access_id
        in: path
        description: 取引ID
        schema:
          $ref: "#/components/schemas/AccessId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップの決済情報のうち、指定した`access_id`のカード決済を3Dセキュア認証します。\n"
        required: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/3DS.Authorizing.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DS.Authorizing.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"param\": \"valuereturnedfrom3dsprocess\"\n}' \\\n'https://api.test.fincode.jp/v1/secure2/{access_id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const accessId = \"<Access ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.payments.execute3DSecureAuth(accessId, {\n            param: \"<Value you received in tds2_ret_url>\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\taccessID := \"<Access ID>\"\n\n\\tbody := Executing3DSecureAuthRequest{\n\\t\\tParam: \"<Value you received in tds2_ret_url>\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/secure2/%s\", accessID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype Executing3DSecureAuthRequest struct {\n\\tParam string `json:\"param\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$accessId = '<Access ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/secure2/{$accessId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"param\" => \"<Value you received in tds2_ret_url>\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\naccess_id = '<Access ID>'\n\nurl = f'https://api.test.fincode.jp/v1/secure2/{access_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"param\": \"<Value you received in tds2_ret_url>\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    access_id = '<Access ID>'\n    endpoint = \"/v1/secure2/#{access_id}\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        param: '<Value you received in tds2_ret_url>'\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      operationId: confirm3DSecureAuthentication
      security:
      - Secret-Bearer-Auth: []
      - Public-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Secure2
      summary: 3Dセキュア 認証結果確定API
      description: "`access_id`で指定したカード決済取引の3Dセキュア認証の結果を確定します。\\\n\\\n`challenge_url`上で購入者がチャレンジ認証実施後、`tds2_ret_url`に対し`event`パラメータで`AuthResultReady`イベントが通知されたとき、このAPIを呼び出します。\n"
      parameters:
      - name: access_id
        in: path
        description: 取引ID
        schema:
          $ref: "#/components/schemas/AccessId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップの決済情報のうち、指定した`access_id`のカード決済の3Dセキュア認証の結果を確定します。\n"
        required: false
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/3DS.Confirming.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/secure2/{access_id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const accessId = \"<Access ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.payments.retrieve3DSecureAuthResult(\n            accessId\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\taccessID := \"<Access ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/secure2/%s\", accessID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$accessId = '<Access ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/secure2/{$accessId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\naccess_id = '<Access ID>'\n\nurl = f'https://api.test.fincode.jp/v1/secure2/{access_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    access_id = '<Access ID>'\n    endpoint = \"/v1/secure2/#{access_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/sessions:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createPaymentSession
      tags:
      - PaymentSession
      summary: 決済URL 作成
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップで決済を行います。\n"
      description: |
        fincodeが提供するリダイレクト型決済ページを発行し、その決済ページへのURLをレスポンスします。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentSession.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentSession.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization: Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"success_url\": \"https://your-service.example.com/success\",\n    \"cancel_url\": \"https://your-service.example.com/cancel\",\n    \"transaction\": {\n        \"pay_type\": [\"Card\", \"Konbini\", \"Paypay\"],\n        \"amount\": \"1000\"\n    },\n    \"card\": {\n        \"job_code\": \"CAPTURE\",\n        \"tds_type\": \"2\",\n        \"tds2_type\": \"2\"\n    },\n    \"konbini\": {\n        \"payment_term_day\": 2,\n        \"konbini_reception_mail_send_flag\": \"0\"\n    },\n    \"paypay\": {\n        \"job_code\": \"CAPTURE\"\n    }\n}' \\\n\"https://api.test.fincode.jp/v1/sessions\"\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const paymentSession = await fincode.paymentSessions.create({\n            success_url: \"https://your-service.example.com/success\",\n            cancel_url: \"https://your-service.example.com/cancel\",\n            shop_service_name: \"My Store\",\n            transaction: {\n                pay_type: [\"Card\"],\n                amount: \"1000\",\n            },\n            card: {\n                job_code: \"CAPTURE\",\n                tds_type: \"2\",\n                tds2_type: \"2\",\n                td_tenant_name: \"My Store\",\n            },\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingPaymentSessionRequest{\n\\t\\tSuccessURL: stringPointer(\"https://your-service.example.com/success\"),\n\\t\\tCancelURL:  stringPointer(\"https://your-service.example.com/cancel\"),\n\\t\\tTransaction: Transaction{\n\\t\\t\\tPayType: []string{\"Card\", \"Konbini\", \"Paypay\"},\n\\t\\t\\tAmount:  \"1234\",\n\\t\\t},\n\\t\\tCard: &CardPaymentSession{\n\\t\\t\\tJobCode:  \"CAPTURE\",\n\\t\\t\\tTdsType:  stringPointer(\"2\"),\n\\t\\t\\tTds2Type: stringPointer(\"2\"),\n\\t\\t},\n\\t\\tKonbini: &KonbiniPaymentSession{\n\\t\\t\\tPaymentTermDay:               2,\n\\t\\t\\tKonbiniReceptionMailSendFlag: \"0\",\n\\t\\t},\n\\t\\tPayPay: &PayPayPaymentSession{\n\\t\\t\\tJobCode: \"CAPTURE\",\n\\t\\t},\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"POST\",\n\\t\\t\"https://api.test.fincode.jp/v1/sessions\",\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingPaymentSessionRequest struct {\n\\tSuccessURL         *string                `json:\"success_url,omitempty\"`\n\\tCancelURL          *string                `json:\"cancel_url,omitempty\"`\n\\tExpire             *string                `json:\"expire,omitempty\"`\n\\tShopServiceName    *string                `json:\"shop_service_name,omitempty\"`\n\\tReceiverMail       *string                `json:\"receiver_mail,omitempty\"`\n\\tMailCustomerName   *string                `json:\"mail_customer_name,omitempty\"`\n\\tGuildeMailSendFlag *string                `json:\"guilde_mail_send_flag,omitempty\"`\n\\tThanksMailSendFlag *string                `json:\"thanks_mail_send_flag,omitempty\"`\n\\tShopMailTemplateID *string                `json:\"shop_mail_template_id,omitempty\"`\n\\tTransaction        Transaction            `json:\"transaction\"`\n\\tCard               *CardPaymentSession    `json:\"card,omitempty\"`\n\\tKonbini            *KonbiniPaymentSession `json:\"konbini,omitempty\"`\n\\tPayPay             *PayPayPaymentSession  `json:\"paypay,omitempty\"`\n}\ntype Transaction struct {\n\\tPayType      []string `json:\"pay_type\"`\n\\tOrderID      *string  `json:\"order_id,omitempty\"`\n\\tAmount       string   `json:\"amount\"`\n\\tTax          *string  `json:\"tax,omitempty\"`\n\\tClientField1 *string  `json:\"client_field_1,omitempty\"`\n\\tClientField2 *string  `json:\"client_field_2,omitempty\"`\n\\tClientField3 *string  `json:\"client_field_3,omitempty\"`\n}\n\ntype CardPaymentSession struct {\n\\tJobCode      string  `json:\"job_code,omitempty\"`\n\\tTdsType      *string `json:\"tds_type,omitempty\"`\n\\tTds2Type     *string `json:\"tds2_type,omitempty\"`\n\\tTdTenantName *string `json:\"td_tenant_name,omitempty\"`\n}\n\ntype KonbiniPaymentSession struct {\n\\tPaymentTermDay               int    `json:\"payment_term_day,omitempty\"`\n\\tKonbiniReceptionMailSendFlag string `json:\"konbini_reception_mail_send_flag,omitempty\"`\n}\n\ntype PayPayPaymentSession struct {\n\\tJobCode          string  `json:\"job_code,omitempty\"`\n\\tOrderDescrpition *string `json:\"order_description,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/sessions\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"success_url\" => \"https://your-service.example.com/success\",\n    \"cancel_url\" => \"https://your-service.example.com/cancel\",\n    \"transaction\" => [\n        \"pay_type\" => [\"Card\", \"Konbini\", \"Paypay\"],\n        \"amount\" => \"1000\",\n    ],\n    \"card\" => [\n        \"job_code\" => \"CAPTURE\",\n        \"tds_type\" => \"2\",\n        \"tds2_type\" => \"2\",\n    ],\n    \"konbini\" => [\n        \"payment_term_day\" => 2,\n        \"konbini_reception_mail_send_flag\" => \"0\"\n    ],\n    \"paypay\" => [\n        \"job_code\" => \"CAPTURE\",\n    ]\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/sessions'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"success_url\": \"https://your-service.example.com/success\",\n    \"cancel_url\": \"https://your-service.example.com/cancel\",\n    \"transaction\": {\n        \"pay_type\": [\"Card\", \"Konbini\", \"Paypay\"],\n        \"amount\": \"1000\"\n    },\n    \"card\": {\n        \"job_code\": \"CAPTURE\",\n        \"tds_type\": \"2\",\n        \"tds2_type\": \"2\"\n    },\n    \"konbini\": {\n        \"payment_term_day\": 3,\n        \"konbini_reception_mail_send_flag\": \"0\"\n    },\n    \"paypay\": {\n        \"job_code\": \"CAPTURE\"\n    }\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/sessions\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        success_url: \"https://your-service.example.com/success\",\n        cancel_url: \"https://your-service.example.com/cancel\",\n        transaction: {\n            pay_type: [\"Card\", \"Konbini\", \"Paypay\"],\n            amount: \"1000\"\n        },\n        card: {\n            job_code: \"CAPTURE\",\n            tds_type: \"2\",\n            tds2_type: \"2\"\n        },\n        konbini: {\n            payment_term_day: 2,\n            konbini_reception_mail_send_flag: \"0\"\n        },\n        paypay: {\n            job_code: \"CAPTURE\"\n        }\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/card_sessions:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createCardRegistrationSession
      tags:
      - CardRegistrationSession
      summary: カード登録URL 作成
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ 顧客情報を共有しないプラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップ上の顧客に対してカードを登録するためのカード登録URLを発行します。\n"
      description: |
        fincodeが提供するリダイレクト型カード登録ページを発行し、そのカード登録ページへのURLをレスポンスします。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardRegistrationSession.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardRegistrationSession.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"success_url\": \"http://your-service.example.com/success\",\n    \"cancel_url\": \"http://your-service.example.com/cancel\",\n}' \\\n'https://api.test.fincode.jp/v1/card_sessions'\n\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const cardRegistrationSession =\n            await fincode.cardRegistrationSessions.create({\n                success_url: \"https://your-service.example.com/success\",\n                cancel_url: \"https://your-service.example.com/cancel\",\n            });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := PaymentSessionCreatingRequest{\n\\t\\tSuccessURL: \"https://your-service.example.com/success\",\n\\t\\tCancelURL:  \"https://your-service.example.com/cancel\",\n\\t\\tTransaction: Transaction{\n\\t\\t\\tPayType: []string{\"Card\"},\n\\t\\t\\tAmount:  \"1234\",\n\\t\\t},\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/card_sessions\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype PaymentSessionCreatingRequest struct {\n\\tSuccessURL  string      `json:\"success_url\"`\n\\tCancelURL   string      `json:\"cancel_url\"`\n\\tTransaction Transaction `json:\"transaction\"`\n}\n\ntype Transaction struct {\n\\tPayType []string `json:\"pay_type\"`\n\\tAmount  string   `json:\"amount\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/card_sessions\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"success_url\" => \"http://your-service.example.com/success\",\n    \"cancel_url\" => \"http://your-service.example.com/cancel\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/card_sessions'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"success_url\": \"http://your-service.example.com/success\",\n    \"cancel_url\": \"http://your-service.example.com/cancel\",\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/card_sessions\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n\n    data = {\n        success_url: \"http://your-service.example.com/success\",\n        cancel_url: \"http://your-service.example.com/cancel\",\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/plans:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createPlan
      tags:
      - Plan
      summary: プラン 登録
      description: |
        プラン情報を登録します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Plan.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"plan_name\": \"Gold Plan\",\n    \"amount\": \"1000\",\n    \"interval_pattern\": \"month\",\n    \"interval_count\": \"1\"\n}' \\\n'https://api.test.fincode.jp/v1/plans'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const plan = await fincode.plans.create({\n            plan_name: \"Gold Plan\",\n            amount: \"1000\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingPlanRequest{\n\\t\\tPlanName:        \"Gold Plan\",\n\\t\\tAmount:          \"1000\",\n\\t\\tIntervalPattern: stringPointer(\"month\"),\n\\t\\tIntervalCount:   stringPointer(\"1\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/plans\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingPlanRequest struct {\n\\tID              *string `json:\"id,omitempty\"`\n\\tPlanName        string  `json:\"plan_name\"`\n\\tDescription     *string `json:\"description,omitempty\"`\n\\tAmount          string  `json:\"amount\"`\n\\tTax             *string `json:\"tax,omitempty\"`\n\\tIntervalPattern *string `json:\"interval_pattern,omitempty\"`\n\\tIntervalCount   *string `json:\"interval_count,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/plans\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"plan_name\" => \"Gold Plan\",\n    \"amount\" => \"1000\",\n    \"interval_pattern\" => \"month\",\n    \"interval_count\" => \"1\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/plans'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"plan_name\": \"Gold Plan\",\n    \"amount\": \"1000\",\n    \"interval_pattern\": \"month\",\n    \"interval_count\": \"1\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: \", response.json())\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/plans\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        plan_name: \"Gold Plan\",\n        amount: \"1000\",\n        interval_pattern: \"month\",\n        interval_count: \"1\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePlanList
      tags:
      - Plan
      summary: プラン 一覧取得
      description: |
        プラン情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。
      parameters:
      - in: query
        name: Query
        description: |
          プラン情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/Plan.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/plans'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const plans = await fincode.plans.retrieveList({\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\t\"https://api.test.fincode.jp/v1/plans\",\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/plans\";\n$queryParams = [\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/plans'\nquery_params = { 'limit': 10 }\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/plans\"\n    query_params =  { limit: 10 }\n    \n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/plans/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePlan
      tags:
      - Plan
      summary: プラン 取得
      description: |
        IDで指定したプラン情報を取得します。
      parameters:
      - name: id
        in: path
        description: プランID
        schema:
          $ref: "#/components/schemas/PlanId_schema"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/plans/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const planId = \"<Plan ID>\";\n\n    try {\n        // リクエストの送信\n        const plan = await fincode.plans.retrieve(planId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tplanID := \"<Plan ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/plans/%s\", planID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$planId = '<Plan ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/plans/{$planId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nplan_id = '<Plan ID>'\n\nurl = f'https://api.test.fincode.jp/v1/plans/{plan_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    plan_id = '<Plan ID>'\n\n    endpoint = \"/v1/plans/#{plan_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updatePlan
      tags:
      - Plan
      summary: プラン 更新
      description: "IDで指定したプラン情報を更新します。\\\nプランが1つ以上のサブスクリプションで使用されているとき（`used_flag = 1`のとき）、プランは更新できません。\n"
      parameters:
      - name: id
        in: path
        description: プランID
        schema:
          $ref: "#/components/schemas/PlanId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Plan.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"plan_name\": \"Pro Plan\",\n    \"description\": \"Pro Plan (previous: Gold Plan)\"\n}' \\\n'https://api.test.fincode.jp/v1/plans/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const planId = \"<Plan ID>\";\n\n    try {\n        // リクエストの送信\n        const plan = await fincode.plans.update(planId, {\n            plan_name: \"Pro Plan\",\n            description: \"This is a Pro plan. (previously Gold Plan)\",\n            amount: \"2000\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tplanID := \"<Plan ID>\"\n\\tbody := UpdatingPlanRequest{\n\\t\\tPlanName:    stringPointer(\"Pro Name\"),\n\\t\\tDescription: stringPointer(\"This is a plan for professionals (previously Gold Plan)\"),\n\\t\\tAmount:      stringPointer(\"2000\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/plans/%s\", planID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingPlanRequest struct {\n\\tPlanName        *string `json:\"plan_name\"`\n\\tDescription     *string `json:\"description\"`\n\\tAmount          *string `json:\"amount\"`\n\\tTax             *string `json:\"tax\"`\n\\tIntervalPattern *string `json:\"interval_pattern\"`\n\\tIntervalCount   *string `json:\"interval_count\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$planId = '<Plan ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/plans/{$planId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"plan_name\" => \"Pro Plan\",\n    \"description\" => \"This is a Pro Plan (previously Gold Plan)\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nplan_id = '<Plan ID>'\n\nurl = f'https://api.test.fincode.jp/v1/plans/{plan_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"plan_name\": \"Pro Plan\",\n    \"description\": \"Pro Plan (previous: Gold Plan)\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    plan_id = '<Plan ID>'\n    endpoint = \"/v1/plans/#{plan_id}\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n    \n    data = {\n        plan_name: \"Pro Plan\",\n        description: \"Pro Plan (previous: Gold Plan)\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    delete:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: deletePlan
      tags:
      - Plan
      summary: プラン 削除
      description: |
        IDで指定したプラン情報を削除します。
      parameters:
      - name: id
        in: path
        description: プランID
        schema:
          $ref: "#/components/schemas/PlanId_schema"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan.Deleting.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X DELETE \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/plans/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const planId = \"<Plan ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.plans.delete(planId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tplanID := \"<Plan ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"DELETE\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/plans/%s\", planID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$planId = '<Plan ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/plans/{$planId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nplan_id = '<Plan ID>'\n\nurl = f'https://api.test.fincode.jp/v1/plans/{plan_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.delete(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    plan_id = '<Plan ID>'\n\n    endpoint = \"/v1/plans/#{plan_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Delete.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/subscriptions:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createSubscription
      tags:
      - Subscription
      summary: サブスクリプション 登録
      description: |
        `customer_id`で指定した顧客に対して`plan_id`で指定したプランを適用したサブスクリプション情報を登録します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subscription.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"plan_id\": \"<Plan ID>\",\n    \"customer_id\": \"<Customer ID>\",\n    \"card_id\": \"<Card ID>\",\n    \"start_date\": \"2025/05/05\",\n    \"stop_date\": \"2025/06/05\"\n}' \\\n'https://api.test.fincode.jp/v1/subscriptions'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const planId = \"<Plan ID>\";\n\n    const customerId = \"<Customer ID>\";\n    const cardId = \"<Card ID>\";\n\n    try {\n        // リクエストの送信\n        const subscription = await fincode.subscriptions.create({\n            pay_type: \"Card\",\n            plan_id: planId,\n            customer_id: customerId,\n            card_id: cardId,\n            start_date: \"2022/05/16\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingSubscriptionRequest{\n\\t\\tPayType:       \"Card\",\n\\t\\tPlanID:        \"<Plan ID>\",\n\\t\\tCustomerID:    \"<Customer ID>\",\n\\t\\tCardID:        stringPointer(\"<Card ID>\"),\n\\t\\tStartDate:     stringPointer(\"2024/11/01\"),\n\\t\\tInitialAmount: stringPointer(\"5000\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/subscriptions\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingSubscriptionRequest struct {\n\\tID            *string `json:\"id,omitempty\"`\n\\tPayType       string  `json:\"pay_type\"`\n\\tPlanID        string  `json:\"plan_id\"`\n\\tCustomerID    string  `json:\"customer_id\"`\n\\tCardID        *string `json:\"card_id,omitempty\"`\n\\tStartDate     *string `json:\"start_date,omitempty\"`\n\\tStopDate      *string `json:\"stop_date,omitempty\"`\n\\tEndMonthFlag  *string `json:\"end_month_flag,omitempty\"`\n\\tSendURL       *string `json:\"send_url,omitempty\"`\n\\tClientField1  *string `json:\"client_field_1,omitempty\"`\n\\tClientField2  *string `json:\"client_field_2,omitempty\"`\n\\tClientField3  *string `json:\"client_field_3,omitempty\"`\n\\tInitialAmount *string `json:\"initial_amount,omitempty\"`\n\\tInitialTax    *string `json:\"initial_tax,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/subscriptions\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"pay_type\" => \"Card\",\n    \"plan_id\" => \"<Plan ID>\",\n    \"customer_id\" => \"<Customer ID>\",\n    \"card_id\" => \"<Card ID>\",\n    \"start_date\" => \"2022/05/16\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/subscriptions'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"pay_type\": \"Card\",\n    \"plan_id\": \"<Plan ID>\",\n    \"customer_id\": \"<Customer ID>\",\n    \"card_id\": \"<Card ID>\",\n    \"start_date\": \"2022/05/16\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/subscriptions\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        plan_id: \"<Plan ID>\",\n        customer_id: \"<Customer ID>\",\n        card_id: \"<Card ID>\",\n        start_date: \"2025/05/05\",\n        stop_date: \"2025/06/05\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveSubscriptionList
      tags:
      - Subscription
      summary: サブスクリプション 一覧取得
      description: |
        サブスクリプション情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。
      parameters:
      - in: query
        name: Query
        description: |
          サブスクリプション情報の一覧取得において検索条件となるクエリパラメータ
        required: true
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/Subscription.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/subscriptions?pay_type=Card'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const subscriptions = await fincode.subscriptions.retrieveList({\n            pay_type: \"Card\",\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\t\"https://api.test.fincode.jp/v1/subscriptions\",\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/subscriptions\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/subscriptions'\nquery_params = {\n    'pay_type': \"Card\",\n    'limit': \"10\",\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/subscriptions\"\n    query_params =  { \n        limit: 10,\n        pay_type: 'Card'\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/subscriptions/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveSubscription
      tags:
      - Subscription
      summary: サブスクリプション 取得
      description: |
        IDで指定したサブスクリプション情報を取得します。
      parameters:
      - name: id
        in: path
        description: サブスクリプションID
        schema:
          $ref: "#/components/schemas/SubscriptionId_schema"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/subscriptions/{id}?pay_type=Card'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const subscriptionId = \"<Subscription ID>\";\n\n    try {\n        // リクエストの送信\n        const subscription = await fincode.subscriptions.retrieve(\n            subscriptionId,\n            {\n                pay_type: \"Card\",\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tsubscriptionID := \"<Subscription ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/subscriptions/%s\", subscriptionID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$subscriptionId = '<Subscription ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/subscriptions/{$subscriptionId}\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nsubscription_id = '<Subscription ID>'\n\nurl = f'https://api.test.fincode.jp/v1/subscriptions/{subscription_id}'\nquery_params = {\n    'pay_type': 'Card',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    subscription_id = '<Subscription ID>'\n    endpoint = \"/v1/subscriptions/#{subscription_id}\"\n    query_params =  { pay_type: 'Card' }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updateSubscription
      tags:
      - Subscription
      summary: サブスクリプション 更新
      description: "IDで指定したサブスクリプション情報を更新します。\\\nサブスクリプションの初回課金がすでに行われているとき（`start_date ≤ {{現在時刻}}`のとき）、サブスクリプションは更新できません。\n"
      parameters:
      - name: id
        in: path
        description: サブスクリプションID
        schema:
          $ref: "#/components/schemas/SubscriptionId_schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subscription.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"pay_type\": \"Card\",\n    \"stop_date\": \"2025/07/05\"\n}' \\\n'https://api.test.fincode.jp/v1/subscriptions/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const subscriptionId = \"<Subscription ID>\";\n\n    try {\n        // リクエストの送信\n        const subscription = await fincode.subscriptions.update(\n            subscriptionId,\n            {\n                stop_date: \"2023/12/31\",\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := UpdatingSubscriptionRequest{\n\\t\\tPayType:   \"Card\",\n\\t\\tStartDate: stringPointer(\"2021/01/01\"),\n\\t\\tStopDate:  stringPointer(\"2021/12/31\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"PUT\", \"https://api.test.fincode.jp/v1/subscriptions/{id}\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingSubscriptionRequest struct {\n\\tPayType       string  `json:\"pay_type\"`\n\\tPlanID        *string `json:\"plan_id,omitempty\"`\n\\tStartDate     *string `json:\"start_date,omitempty\"`\n\\tStopDate      *string `json:\"stop_date,omitempty\"`\n\\tEndMonthFlag  *string `json:\"end_month_flag,omitempty\"`\n\\tClientField1  *string `json:\"client_field_1,omitempty\"`\n\\tClientField2  *string `json:\"client_field_2,omitempty\"`\n\\tClientField3  *string `json:\"client_field_3,omitempty\"`\n\\tInitialAmount *string `json:\"initial_amount,omitempty\"`\n\\tInitialTax    *string `json:\"initial_tax,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$subscriptionId = '<Subscription ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/subscriptions/{$subscriptionId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n\n$data = json_encode([\n    \"stop_date\" => \"2024/05/16\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nsubscription_id = '<Subscription ID>'\n\nurl = f'https://api.test.fincode.jp/v1/subscriptions/{subscription_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"stop_date\": \"2024/05/16\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    subscription_id = '<Subscription ID>'\n    endpoint = \"/v1/subscriptions/#{subscription_id}\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        pay_type: \"Card\",\n        stop_date: \"2025/07/05\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    delete:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: deleteSubscription
      tags:
      - Subscription
      summary: サブスクリプション 解約
      description: |
        IDで指定したサブスクリプションを解約し、請求を停止します。
      parameters:
      - name: id
        in: path
        description: サブスクリプションID
        schema:
          $ref: "#/components/schemas/SubscriptionId_schema"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription.Unsubscribing.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X DELETE \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/subscriptions/{id}?pay_type=Card'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const subscriptionId = \"<Subscription ID>\";\n\n    try {\n        // リクエストの送信\n        const subscription = await fincode.subscriptions.cancel(\n            subscriptionId,\n            {\n                pay_type: \"Card\",\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tsubscriptionID := \"<Subscription ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"DELETE\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/subscriptions/%s\", subscriptionID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$subscriptionId = '<Subscription ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/subscriptions/{$subscriptionId}\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nsubscription_id = '<Subscription ID>'\n\nurl = f'https://api.test.fincode.jp/v1/subscriptions/{subscription_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.delete(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    subscription_id = '<Subscription ID>'\n    endpoint = \"/v1/subscriptions/#{subscription_id}\"\n    query_params =  { pay_type: 'Card' }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Delete.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/subscriptions/{id}/result:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveSubscriptionResultList
      tags:
      - Subscription
      summary: サブスクリプション結果 一覧取得
      description: |
        サブスクリプションにより発生した課金の結果を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。
      parameters:
      - in: query
        name: Query
        description: |
          サブスクリプション結果の一覧取得において検索条件となるクエリパラメータ
        required: true
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/SubscriptionResult.ListRetrieving.QueryParams"
      - name: id
        in: path
        description: サブスクリプションID
        schema:
          $ref: "#/components/schemas/SubscriptionId_schema"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionResult.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/subscriptions/{id}/result?pay_type=Card'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const subscriptionId = \"<Subscription ID>\";\n\n    try {\n        // リクエストの送信\n        const results = await fincode.subscriptions.retrieveResultList(\n            subscriptionId,\n            {\n                pay_type: \"Card\",\n                limit: 10,\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tsubscriptionID := \"<Subscription ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/subscriptions/%s/result\", subscriptionID),\n\\t\\tnil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$subscriptionId = '<Subscription ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/subscriptions/{$subscriptionId}/result\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nsubscription_id = '<Subscription ID>'\n\nurl = f'https://api.test.fincode.jp/v1/subscriptions/{subscription_id}/result'\nquery_params = {\n    'pay_type': 'Card',\n    'limit': \"10\",\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    subscription_id = '<Subscription ID>'\n    endpoint = \"/v1/subscriptions/#{subscription_id}/result\"\n    query_params =  {\n        pay_type: 'Card',\n        limit: 10\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/payments/bulk:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePaymentBulkList
      tags:
      - PaymentBulk
      summary: 一括決済 一覧取得
      description: |
        fincodeに登録した一括決済の情報を一覧で取得します。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした一括決済情報を一覧で取得します。\n"
      - in: query
        name: Query
        description: |
          一括決済情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/PaymentBulk.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentBulk.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/payments/bulk?pay_type=Card'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const paymentBulks = await fincode.paymentBulks.retrieveList({\n            pay_type: \"Card\",\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", \"https://api.test.fincode.jp/v1/payments/bulk\", nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/bulk\";\n$queryParams = [\n    \"limit\" => 10,\n    \"pay_type\" => \"Card\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/bulk'\nquery_params = {\n    'pay_type': 'Card',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n\n    endpoint = \"/v1/payments/bulk\"\n    query_params =  {\n        pay_type: 'Card',\n        limit: 10,\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createPaymentBulk
      tags:
      - PaymentBulk
      summary: 一括決済 登録
      description: |
        fincodeにJSON形式のファイルで一括決済情報を登録し、`process_plan_date`で指定した日時に一括決済処理を予約します。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした決済情報を一括登録します。\n"
      - in: query
        name: pay_type
        required: true
        schema:
          $ref: "#/components/schemas/PaymentBulkPayType"
      - in: query
        name: process_plan_date
        required: true
        schema:
          $ref: "#/components/schemas/process_plan_date"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PaymentBulk.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentBulk.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: multipart/form-data\" \\\n    -F 'pay_type=Card' \\\n    -F 'process_plan_date=2024/03/15' \\\n    -F 'file=@<File Name>;type=application/json' \\\n'https://api.test.fincode.jp/v1/payments/bulk'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\nimport fs from \"fs\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        const filePath = \"<Path to File>\";\n        const fileName = \"<File Name>\";\n        const file = fs.createReadStream(filePath);\n\n        // リクエストの送信\n        const paymentBulk = await fincode.paymentBulks.create(\n            {\n                pay_type: \"Card\",\n                process_plan_date: \"2022/05/16\",\n            },\n            {\n                file: file,\n                fileName: fileName,\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"fmt\"\n\\t\"io\"\n\\t\"log\"\n\\t\"mime/multipart\"\n\\t\"net/http\"\n\\t\"os\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tpayType := \"<Pay Type>\"\n\\tprocessPlanDate := \"<Process Plan Date>\"\n\n\\t// ファイルの読み込み\n\\tfilePath := \"<Path To File>\"\n\\tfileName := \"<File Name>\"\n\\tfile, err := os.Open(filePath)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer file.Close()\n\n\\t// バッファの作成\n\\tbody := &bytes.Buffer{}\n\\twriter := multipart.NewWriter(body)\n\n\\t// ファイルの書き込み\n\\tpart, err := writer.CreateFormFile(\"file\", fileName)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\t_, err = io.Copy(part, file)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"POST\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/bulk\"),\n\\t\\tbody,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"process_plan_date\", processPlanDate)\n\\tparams.Add(\"pay_type\", payType)\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/bulk\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n    \"process_plan_date\" => \"2022/05/16\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$filePath = '<Path to json file>';\n$fileName = '<File Name>';\n\n$fields = [\n    \"file\" => new CURLFile($filePath, null, $fileName),\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $fields);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\ndef main():\n    api_key = '<Secret API Key>'\n\n    file_path = '<Path to file>'\n    file_name = '<File Name>'\n    \n    with open(file_path, 'rb') as file:\n        files = {'file': (file_name, file)}\n\n        url = f'https://api.test.fincode.jp/v1/payments/bulk'\n        query_params = {\n            'pay_type': 'Card',\n            'process_plan_date': \"2022/05/22\"\n        }\n\n        # ヘッダーを設定\n        headers = {\n            'Authorization': f'Bearer {api_key}',\n        }\n\n        # HTTP POSTリクエストの送信\n        try:\n            response = requests.post(url, headers=headers, files=files, params=query_params)\n\n            # レスポンスの処理\n            if response.status_code == 200:\n                # 成功した場合の処理\n                print(f\"Success: {response.json()}\")\n            else:\n                # エラーの処理\n                print(f\"Error: {response.json()}\")\n        except requests.RequestException as e:\n            # 通信エラーの処理\n            print(f\"Request error: {e}\")\n\nif __name__ == '__main__':\n    main()\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\nrequire 'mime/types'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/payments/bulk\"\n    query_params =  {\n        pay_type: 'Card',\n        process_plan_date: '2025/12/31',\n    }\n    \n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    file_path = '<Path to file>'\n    file_name = '<File Name>'\n    \n    file = File.open(file_path, 'rb')\n    file_data = file.read\n    file.close\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # ファイルと追加情報をマルチパートフォームデータに追加\n    boundary = '----FincodeMultipartRequest'\n    body = []\n    insert_file_to_body(body, boundary, 'file', file_name, file_data)\n    body << \"--#{boundary}--\\r\\n\"\n\n    request['Content-Type'] = \"multipart/form-data; boundary=#{boundary}\"\n    request.body = body.join('')\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\ndef insert_file_to_body(body, boundary, key, file_name, file_data)\n    body << \"--#{boundary}\\r\\n\"\n    body << \"Content-Disposition: form-data; name=\\\"#{key}\\\"; filename=\\\"#{file_name}\\\"\\r\\n\"\n    body << \"Content-Type: #{MIME::Types.type_for(file_name).first.content_type}\\r\\n\"\n    body << \"\\r\\n\"\n    body << file_data\n    body << \"\\r\\n\"\nend\n\nmain\n"
  /v1/payments/bulk/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePaymentBulkDetailList
      tags:
      - PaymentBulk
      summary: 一括決済詳細 一覧取得
      description: |
        IDで指定した一括決済情報の詳細（決済1件ごとの情報）と各決済で発生したエラーの情報を一覧で取得します。
      parameters:
      - in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/PaymentBulkId_schema"
        description: "一括決済ID。\\\n詳細を取得する一括決済情報のIDを指定します。\n"
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした一括決済の詳細を一覧で取得します。\n"
      - in: query
        name: Query
        description: |
          一括決済情報の一覧取得において検索条件となるクエリパラメータ
        required: true
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/PaymentBulkDetail.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentBulkDetail.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/payments/bulk/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const paymentBulkId = \"<Payment Bulk ID>\";\n\n    try {\n        // リクエストの送信\n        const details = await fincode.paymentBulks.retrieveDetailList(\n            paymentBulkId,\n            {\n                limit: 10,\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbulkPaymentID := \"<Bulk Payment ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/bulk/%s\", bulkPaymentID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\tparams.Add(\"pay_type\", \"Card\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$paymentBulkId = '<Payment Bulk ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/bulk/{$paymentBulkId}\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n    \"limit\" => 10,\n];\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\npayments_bulk_id = '<Payments Bulk ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/bulk/{payments_bulk_id}'\nquery_params = {\n    'pay_type': 'Card',\n    'limit': '10',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    payments_bulk_id = '<Payments Bulk ID>'\n    endpoint = \"/v1/payments/bulk/#{payments_bulk_id}\"\n    query_params =  {\n        limit: 10,\n        pay_type: 'Card',\n    }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    delete:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: deletePaymentBulk
      tags:
      - PaymentBulk
      summary: 一括決済 削除
      description: "IDで指定した一括決済情報を削除します。\\\n一括決済処理がチェック済み（`status`が`CHECKED`）のものに限り削除できます。\n"
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップを販売主とした一括決済情報を削除します。\n"
      - in: path
        name: id
        required: true
        schema:
          $ref: "#/components/schemas/PaymentBulkId_schema"
        description: "一括決済ID。\\\n削除対象の一括決済情報のIDを指定します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentBulk.Deleting.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X DELETE \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/payments/bulk/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const paymentBulkId = \"<Payment Bulk ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.paymentBulks.delete(paymentBulkId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbulkPaymentID := \"<Bulk Payment ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"DELETE\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/payments/bulk/%s\", bulkPaymentID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$paymentBulkId = '<Payment Bulk ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/payments/bulk/{$paymentBulkId}\";\n$queryParams = [\n    \"pay_type\" => \"Card\",\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\npayments_bulk_id = '<Payments Bulk ID>'\n\nurl = f'https://api.test.fincode.jp/v1/payments/bulk/{payments_bulk_id}'\nquery_params = {\n    'pay_type': 'Card',\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.delete(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    payments_bulk_id = '<Payments Bulk ID>'\n    endpoint = \"/v1/payments/bulk/#{payments_bulk_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Delete.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/accounts:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveAccountList
      tags:
      - Account
      summary: 売上入金 一覧取得
      description: |
        売上入金情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。
      parameters:
      - name: Tenant-Shop-Id
        in: header
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップの売上入金情報から一覧で取得します。\n"
      - name: Query
        in: query
        description: |
          売上入金情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/Account.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/accounts'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const accounts = await fincode.accounts.retrieveList({\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", \"https://api.test.fincode.jp/v1/accounts\", nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/accounts\";\n$queryParams = [\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/accounts'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\nquery_params = { 'limit': 10 }\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/accounts\"\n    query_params =  { limit: 10 }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params) \n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/accounts/{id}:
    get:
      operationId: retrieveAccount
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Account
      summary: 売上入金 取得
      description: "IDで指定した売上入金を取得します。\\\n`aggregate_term_start`から`aggregate_term_end`までの期間における売上の集計結果が含まれます。\\\n\\\n集計された個々のレコードについては 売上入金明細 一覧取得API を利用することで取得できます。\n"
      parameters:
      - name: id
        in: path
        description: 売上入金情報のID
        schema:
          $ref: "#/components/schemas/AccountId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップの売上入金情報のうち、指定したIDの売上入金情報を取得します。\n"
        required: false
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/accounts/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const accountId = \"<Account ID>\";\n\n    try {\n        // リクエストの送信\n        const account = await fincode.accounts.retrieve(accountId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\taccountID := \"<Account ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/accounts/%s\", accountID), nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$accountId = '<Account ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/accounts/{$accountId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\naccount_id = '<Account ID>'\n\nurl = f'https://api.test.fincode.jp/v1/accounts/{account_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    account_id = '<Account ID>'\n    endpoint = \"/v1/accounts/#{account_id}\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/accounts/{id}/detail:
    get:
      operationId: retrieveAccountDetailList
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      tags:
      - Account
      summary: 売上入金詳細 一覧取得
      description: "IDで指定した売上入金に紐づく売上入金詳細を一覧で取得します。\\\n1つの売上入金明細は、1件の決済／キャンセル／チャージバック／チャージバック取消調整のいずれかに対応します。\n"
      parameters:
      - name: id
        in: path
        description: 売上入金情報のID
        schema:
          $ref: "#/components/schemas/AccountId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップの売上入金情報のうち、指定したIDの売上入金情報の売上入金詳細を取得します。\n"
        required: false
      - in: query
        name: Query
        description: |
          売上入金詳細の一覧取得において検索条件となるクエリパラメータ
        schema:
          $ref: "#/components/schemas/Pagination.QueryParams"
        required: false
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDetail.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/accounts/{id}/detail'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const accountId = \"<Account ID>\";\n\n    try {\n        // リクエストの送信\n        const accountDetails = await fincode.accounts.retrieveDetailList(\n            accountId,\n            { limit: 10 }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\taccountID := \"<Account ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/accounts/%s/detail\", accountID), nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$accountId = '<Account ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/accounts/{$accountId}/detail\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\naccount_id = '<Account ID>'\n\nurl = f'https://api.test.fincode.jp/v1/accounts/{account_id}/detail'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\nquery_params = { 'limit': 10 }\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    account_id = '<Account ID>'\n    endpoint = \"/v1/accounts/#{account_id}/detail\"\n\n    query_params =  { limit: 10 }\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/platform_accounts:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePlatformAccountList
      tags:
      - PlatformAccount
      summary: プラットフォーム利用料収入 一覧取得
      description: |
        プラットフォーム利用料による売上入金情報を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。
      parameters:
      - name: Query
        in: query
        description: |
          プラットフォーム利用料による売上入金情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/PlatformAccount.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformAccount.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/platform_accounts'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const platformAccounts = await fincode.platformAccounts.retrieveList({\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\t\"https://api.test.fincode.jp/v1/platform_accounts\",\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/platform_accounts\";\n$queryParams = [\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/platform_accounts'\nquery_params = {\n    'limit': \"10\",\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/platform_accounts\"\n    query_params =  { limit: 10 }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/platform_accounts/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePlatformAccount
      tags:
      - PlatformAccount
      summary: プラットフォーム利用料収入 取得
      description: "IDで指定したプラットフォーム利用料による売上入金情報を取得します。\\\n`aggregate_term_start`から`aggregate_term_end`までの期間におけるプラットフォーム利用料による売上の集計結果が含まれます。\\\n\\\nテナントショップごとの利用料収入については プラットフォーム利用料収入サマリー 一覧取得API を利用することで取得できます。\n"
      parameters:
      - name: id
        in: path
        description: プラットフォーム利用料収入ID
        schema:
          $ref: "#/components/schemas/PlatformAccountId_schema"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformAccount.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/platform_accounts/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const platformAccountId = \"<Platform Account ID>\";\n\n    try {\n        // リクエストの送信\n        const customer = await fincode.platformAccounts.retrieve(\n            platformAccountId\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tplatformAccountID := \"<Platform Account ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/platform_accounts/%s\", platformAccountID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$platformAccountId = '<Platform Account ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/platform_accounts/{$platformAccountId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nplatform_account_id = '<Platform Account ID>'\n\nurl = f'https://api.test.fincode.jp/v1/platform_accounts/{platform_account_id}'\n\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    platform_account_id = '<Platform Account ID>'\n\n    endpoint = \"/v1/platform_accounts/#{platform_account_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/platform_accounts/{id}/summary:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePlatformAccountSummaryList
      tags:
      - PlatformAccount
      summary: プラットフォーム利用料収入サマリー 一覧取得
      description: "IDで指定したプラットフォーム利用料収入のサマリーを一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。\\\nサマリー情報の中にはテナントショップごとの利用料収入についての情報が含まれます。\n"
      parameters:
      - name: id
        in: path
        description: プラットフォーム利用料収入ID
        schema:
          $ref: "#/components/schemas/PlatformAccountId_schema"
        required: true
      - name: Query
        in: query
        description: |
          プラットフォーム利用料による売上入金情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/PlatformAccountSummary.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformAccountSummary.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/platform_accounts/{id}/summary'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const platformAccountId = \"<Platform Account ID>\";\n\n    try {\n        // リクエストの送信\n        const platformSummaries =\n            await fincode.platformAccounts.retrieveSummaryList(\n                platformAccountId\n            );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tplatformAccountID := \"<Platform Account ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/platform_accounts/%s/summary\", platformAccountID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$platformAccountId = '<Platform Account ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/platform_accounts/{$platformAccountId}/summary\";\n$queryParams = [\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nplatform_account_id = '<Platform Account ID>'\n\nurl = f'https://api.test.fincode.jp/v1/platform_accounts/{platform_account_id}/summary'\nquery_params = {\n    'limit': \"10\",\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    platform_account_id = '<Platform Account ID>'\n\n    endpoint = \"/v1/platform_accounts/#{platform_account_id}/summary\"\n    query_params =  { limit: 10 }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/platforms:
    get:
      tags:
      - PlatformShop
      operationId: retrievePlatformShopList
      summary: プラットフォームショップ 一覧取得
      description: "プラットフォームショップ（メインショップ・サブショップ）を一覧で取得します。\\\nクエリパラメータを指定して取得する条件を絞り込めます。\n"
      parameters:
      - name: Query
        in: query
        description: |
          プラットフォーム情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/PlatformShop.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformShop.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/platforms'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const platformShops = await fincode.platforms.retrieveList({\n            limit: 1,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\t\"https://api.test.fincode.jp/v1/platforms\",\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/platforms\";\n$queryParams = [\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/platforms'\nquery_params = {\n    'limit': \"10\",\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/platforms\"\n    query_params =  { limit: 10 }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/platforms/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrievePlatformShop
      tags:
      - PlatformShop
      summary: プラットフォームショップ 取得
      description: |
        `id`で指定したプラットフォームショップ（メインショップ・サブショップ）を取得します。
      parameters:
      - name: id
        in: path
        description: ショップID
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformShop.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/platforms/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const platformShopId = \"<Platform Shop ID>\";\n\n    try {\n        // リクエストの送信\n        const platformShop = await fincode.platforms.retrieve(platformShopId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tplatformShopID := \"<Platform Shop ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/platforms/%s\", platformShopID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$platformShopId = '<Platform Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/platforms/{$platformShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nplatform_shop_id = '<Platform Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/platforms/{platform_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    platform_shop_id = '<Platform Shop ID>'\n    endpoint = \"/v1/platforms/#{platform_shop_id}\"\n    query_params =  { limit: 10 }\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updatePlatformShop
      tags:
      - PlatformShop
      summary: プラットフォームショップ 更新
      description: |
        `examination_master_id`で指定した決済手段に関してプラットフォーム利用料を更新します。
      parameters:
      - name: id
        in: path
        description: ショップID
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlatformShop.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlatformShop.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"examination_master_id\": \"vm\",\n    \"platform_rate\": \"5.00\"\n}' \\\n'https://api.test.fincode.jp/v1/platforms/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const platformShopId = \"<Platform Shop ID>\";\n\n    try {\n        // リクエストの送信\n        const platformShop = await fincode.platforms.update(platformShopId, {\n            examination_master_id: \"vm\",\n            platform_rate: \"5.0\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tplatformShopID := \"<Platform Shop ID>\"\n\n\\tbody := UpdatingPlatformShopRequest{\n\\t\\tExaminationMasterID: stringPointer(\"vm\"),\n\\t\\tPlatformRate:        stringPointer(\"5.00\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/platforms/%s\", platformShopID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingPlatformShopRequest struct {\n\\tExaminationMasterID *string `json:\"examination_master_id,omitempty\"`\n\\tPlatformRate        *string `json:\"platform_rate,omitempty\"`\n\\tFixedFee            *string `json:\"fixed_fee,omitempty\"`\n\\tWebRegistrationFee  *string `json:\"web_registration_fee,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$platformShopId = '<Platform Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/platforms/{$platformShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"examination_master_id\" => \"vm\",\n    \"platform_rate\" => \"5.0\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nplatform_shop_id = '<Platform Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/platforms/{platform_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"examination_master_id\": \"jad\",\n    \"platform_rate\": \"5.00\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    platform_shop_id = 's_22080402900'\n    endpoint = \"/v1/platforms/#{platform_shop_id}\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        examination_master_id: 'vm',\n        platform_rate: '5.6'\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/tenants:
    get:
      tags:
      - TenantShop
      operationId: retrieveTenantShopList
      summary: テナントショップ 一覧取得
      description: "テナントショップを一覧で取得します。\\\nクエリパラメータを指定して取得する条件を絞り込めます。\n"
      parameters:
      - name: Query
        in: query
        description: |
          テナント情報の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          allOf:
          - $ref: "#/components/schemas/Pagination.QueryParams"
          - $ref: "#/components/schemas/TenantShop.ListRetrieving.QueryParams"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantShop.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/tenants'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const tenants = await fincode.tenants.retrieveList({\n            limit: 10,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", \"https://api.test.fincode.jp/v1/tenants\", nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/tenants\";\n$queryParams = [\n    \"limit\" => 10,\n];\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint . '?' . http_build_query($queryParams));\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\n\nurl = f'https://api.test.fincode.jp/v1/tenants'\nquery_params = {\n    'limit': \"10\",\n}\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers, params=query_params)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/tenants\"\n    query_params =  { limit: 10 }\n\n    uri = URI.parse(BASE_URL + endpoint)\n    uri.query = URI.encode_www_form(query_params)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/tenants/{id}:
    get:
      tags:
      - TenantShop
      operationId: retrieveTenantShop
      summary: テナントショップ 取得
      description: |
        `id`で指定したテナント情報を取得します。
      parameters:
      - name: id
        in: path
        description: |
          ショップID
        required: true
        schema:
          $ref: "#/components/schemas/schema"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantShop.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/tenants/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const tenantShopId = \"<Tenant Shop ID>\";\n\n    try {\n        // リクエストの送信\n        const tenantShop = await fincode.tenants.retrieve(tenantShopId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/tenants/%s\", tenantShopID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/tenants/{$tenantShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/tenants/{tenant_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/tenants/#{tenant_shop_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updateTenantShop
      tags:
      - TenantShop
      summary: テナントショップ 更新
      description: |
        `examination_master_id`で指定した決済手段におけるプラットフォーム利用料などの設定の変更を`id`で指定したテナントに対して実行します。
      parameters:
      - name: id
        in: path
        description: |
          ショップID
        required: true
        schema:
          $ref: "#/components/schemas/schema"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TenantShop.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TenantShop.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"examination_master_id\": \"<Examination Master ID>\",\n    \"platform_rate\": \"4.8\"\n}' \\\n'https://api.test.fincode.jp/v1/tenants/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\"\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n\\t[TODO] path params\n\n    try {\n        // リクエストの送信\n        const customer = await fincode.tenants.update({\n            [TODO] body or query\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\tbody := UpdatingTenantShopRequest{\n\\t\\tExaminationMasterID:       stringPointer(\"paypay\"),\n\\t\\tPayPayContentCategoryType: stringPointer(\"1\"),\n\\t\\tPlatformRate:              stringPointer(\"8.0\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/tenants/%s\", tenantShopID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingTenantShopRequest struct {\n\\tExaminationMasterID       *string `json:\"examination_master_id,omitempty\"`\n\\tPlatformRate              *string `json:\"platform_rate,omitempty\"`\n\\tFixedFee                  *string `json:\"fixed_fee,omitempty\"`\n\\tWebRegistrationFee        *string `json:\"web_registration_fee,omitempty\"`\n\\tPayPayContentCategoryType *string `json:\"paypay_content_category_type,omitempty\"`\n\\tAPIKeyDisplayFlag         *string `json:\"api_key_display_flag,omitempty\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/tenants/{$tenantShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$data = json_encode([\n    \"examination_master_id\" => \"vm\",\n    \"platform_rate\" => \"5.0\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/tenants/{tenant_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"examination_master_id\": \"jad\",\n    \"platform_rate\": \"5.00\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/tenants/#{tenant_shop_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        examination_master_id: 'jad',\n        platform_rate: '6.0',\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/tenant_entries:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createTenantWithNewUser
      tags:
      - LimitedTenantManagement
      summary: テナントショップ 作成（新規ユーザー登録）
      description: "新規ユーザーを作成し、作成されたユーザーをオーナーとして新規テナントショップを作成するAPIです。\\\nこのAPIでのテナント作成に成功すると、登録されたメールアドレス宛にメールアドレス認証メールが送信されます。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/POST.TenantEntries.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POST.TenantEntries.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\": \"<New User Email Address>\",\n    \"password\": \"<New User Password>\",\n    \"name\": \"<New User Name>\",\n    \"tenant_url_id\": \"<Tenant Invitation URL ID>\"\n}' \\\n'https://api.test.fincode.jp/v1/tenant_entries'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const tenantShop = await fincode.tenants.createWithNewUser({\n            name: \"New User\",\n            email: \"new-user@example.com\",\n            password: \"new-user-password\",\n            tenant_url_id: \"<Tenant Invitaion URL ID>\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingTenantWithNewUserRequest{\n\\t\\tEmail:       \"new-user@example.com\",\n\\t\\tPassword:    \"new-user-password\",\n\\t\\tName:        \"New User\",\n\\t\\tTenantURLID: \"<Tenant URL ID>\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/tenant_entries\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingTenantWithNewUserRequest struct {\n\\tEmail       string `json:\"email\"`\n\\tPassword    string `json:\"password\"`\n\\tName        string `json:\"name\"`\n\\tTenantURLID string `json:\"tenant_url_id\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/tenant_entries\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"email\" => \"new-user@example.com\",\n    \"password\" => \"new-user-password\",\n    \"name\" => \"New User\",\n    \"tenant_url_id\" => \"<Tenant Invitaion URL ID>\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/tenant_entries'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"email\": \"<New User Email Address>\",\n    \"password\": \"<New User Password>\",\n    \"name\": \"<New User Name>\",\n    \"tenant_url_id\": \"<Tenant Invitation URL ID>\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/tenant_entries\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n    \n    data = {\n        email: \"<New User Email Address>\",\n        password: \"<New User Password>\",\n        name: \"<New User Name>\",\n        tenant_url_id: \"<Tenant Invitation URL ID>\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/join_tenants:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createTenantWithExistingUser
      tags:
      - LimitedTenantManagement
      summary: テナントショップ 作成（既存ユーザー参加）
      description: "指定したプラットフォームショップのユーザーをオーナーとして新規テナントショップを作成するAPIです。\\\n\\\n`password`パラメータに関して、ユーザーのパスワードがfincode管理画面アプリケーション上で更新されることを想定して実装・運用することが推奨されます。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/POST.JoinTenants.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POST.JoinTenants.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"email\": \"platform-user@example.com\",\n    \"password\": \"platform-user-password\",\n    \"tenant_url_id\": \"<Tenant Invitation URL ID>\"\n}' \\\n'https://api.test.fincode.jp/v1/join_tenants'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const tenantShop = await fincode.tenants.createWithExistingUser({\n            email: \"existing-user@example.com\",\n            password: \"existing-user-password\",\n            tenant_url_id: \"<Tenant Invitation URL ID>\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingTenantWithNewUserRequest{\n\\t\\tEmail:    \"new-user@example.com\",\n\\t\\tPassword: \"new-user-password\",\n\\t\\tName:     \"New User\",\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/join_tenants\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n\ntype CreatingTenantWithNewUserRequest struct {\n\\tEmail       string `json:\"email\"`\n\\tPassword    string `json:\"password\"`\n\\tName        string `json:\"name\"`\n\\tTenantUrlId string `json:\"tenant_url_id\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/join_tenants\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"email\" => \"platform-user@example.com\",\n    \"password\" => \"platform-user-password\",\n    \"tenant_url_id\" => \"<Tenant Invitation URL ID>\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/join_tenants'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"email\": \"platform-user@example.com\",\n    \"password\": \"platform-user-password\",\n    \"tenant_url_id\": \"<Tenant Invitation URL ID>\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/join_tenants\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        email: \"platform-user@example.com\",\n        password: \"platform-user-password\",\n        tenant_url_id: \"<Tenant Invitation URL ID>\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/contracts/examinations_v2/tenants/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveTenantExaminationInfoV2
      tags:
      - LimitedTenantManagement
      summary: テナントショップ本番環境申請情報 取得
      description: |
        `id`で指定したテナントショップの本番環境申請情報を取得します。
      parameters:
      - name: id
        in: path
        description: |
          指定したテナントショップの本番環境申請情報を取得します。`Tenant-Shop-Id`ヘッダーも併せて指定してください。
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップの本番環境申請情報を取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExaminationInfo.V2.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n'https://api.test.fincode.jp/v1/contracts/examinations_v2/tenants/{Tenant Shop ID}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const tenantShoptId = \"<Tenant Shop ID>\";\n\n    try {\n        // リクエストの送信\n        const examinationInfo = await fincode.tenants.retrieveExaminationInfoV2(\n            tenantShoptId,\n            {\n                tenantShoptId: tenantShoptId,\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/contracts/examinations_v2/tenants/%s\", tenantShopID), nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/examinations_v2/tenants/{$tenantShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Tenant-Shop-Id: \" . $tenantShopId,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/contracts/examinations_v2/tenants/{tenant_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Tenant-Shop-Id': tenant_shop_id,\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/contracts/examinations_v2/tenants/#{tenant_shop_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updateTenantExaminationInfoV2
      tags:
      - LimitedTenantManagement
      summary: テナントショップ本番環境申請情報 更新
      description: |
        `id`で指定したテナントショップの本番環境申請情報を更新します。
      parameters:
      - name: id
        in: path
        description: |
          指定したテナントショップの本番環境申請情報を更新します。`Tenant-Shop-Id`ヘッダーも併せて指定してください。
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップの本番環境申請情報を更新します。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExaminationInfo.V2.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExaminationInfo.V2.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n    -d '{\n    \"contract_info\": {\n        \"representative_last_name\": \"山田\",\n        \"representative_last_name_kana\": \"ヤマダ\",\n        \"representative_first_name\": \"太郎\",\n        \"representative_first_name_kana\": \"タロウ\",\n        \"representative_postal_code\": \"123-4567\",\n        \"representative_prefecture\": \"東京都\",\n        \"representative_prefecture_kana\": \"トウキョウト\",\n        \"representative_address_municipality\": \"渋谷区\",\n        \"representative_address_municipality_kana\": \"シブヤク\",\n        \"representative_address_section\": \"道玄坂\",\n        \"representative_address_section_kana\": \"ドウゲンザカ\",\n        \"representative_address_chrome\": \"1-2-3\",\n        \"representative_address_chrome_kana\": \"イチニサン\",\n        \"representative_tel\": \"0312345678\",\n        \"representative_birthday\": \"1998/11/01\",\n        \"representative_gender\": 0,\n        \"staff1_last_name\": \"鈴木\",\n        \"staff1_last_name_kana\": \"スズキ\",\n        \"staff1_first_name\": \"次郎\",\n        \"staff1_first_name_kana\": \"ジロウ\",\n        \"staff1_company_name\": \"株式会社テスト\",\n        \"staff1_belongs\": \"EC運営部\",\n        \"staff1_tel\": \"08012345678\",\n        \"staff1_mail\": \"staff-1@exampple.com\",\n        \"corporate\": true,\n        \"corporate_info\": {\n            \"corporate_number\": \"1234567890123\",\n            \"corporate_name\": \"株式会社テスト\",\n            \"corporate_name_kana\": \"カブシキガイシャテスト\",\n            \"company_postal_code\": \"123-4567\",\n            \"company_prefecture\": \"東京都\",\n            \"company_prefecture_kana\": \"トウキョウト\",\n            \"company_address_municipality\": \"渋谷区\",\n            \"company_address_municipality_kana\": \"シブヤク\",\n            \"company_address_section\": \"道玄坂\",\n            \"company_address_section_kana\": \"ドウゲンザカ\",\n            \"company_address_chrome\": \"1-2-3\",\n            \"company_address_chrome_kana\": \"イチニサン\",\n            \"company_tel\": \"0312345678\",\n            \"capital\": 1000000,\n            \"established_at\": \"2018/11/01\",\n            \"yearly_sales\": 100000000,\n            \"business_details\": \"○○の販売\"\n        }\n    }\n}' \\\n'https://api.test.fincode.jp/v1/contracts/examinations_v2/tenants/{Tenant Shop ID}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const tenantShoptId = \"<Tenant Shop ID>\";\n\n    try {\n        // リクエストの送信\n        const examinationInfo = await fincode.tenants.updateExaminationInfoV2(\n            tenantShoptId,\n            {\n                contract_info: {\n                    corporate: true,\n                    corporate_info: {\n                        corporate_number: \"1234567890123\",\n                        corporate_name: \"株式会社テスト\",\n                        corporate_name_kana: \"カブシキガイシャテスト\",\n                        // hp: \"\",\n                        company_prefecture: \"東京都\",\n                        company_prefecture_kana: \"トウキョウト\",\n                        company_address_municipality: \"渋谷区\",\n                        company_address_municipality_kana: \"シブヤク\",\n                        company_address_section: \"道玄坂\",\n                        company_address_section_kana: \"ドウゲンザカ\",\n                        company_address_chrome: \"1-2-3\",\n                        company_address_chrome_kana: \"イチニサン\",\n                        company_tel: \"0312345678\",\n                        company_postal_code: \"123-4567\",\n\n                        capital: 1000000,\n                        established_at: \"2018/11/01\",\n                        yearly_sales: 100000000,\n                        business_details: \"○○の販売\",\n                    },\n                    representative_first_name: \"山田\",\n                    representative_first_name_kana: \"ヤマダ\",\n                    representative_last_name: \"太郎\",\n                    representative_last_name_kana: \"タロウ\",\n                    representative_postal_code: \"123-4567\",\n                    representative_prefecture: \"東京都\",\n                    representative_prefecture_kana: \"トウキョウト\",\n                    representative_address_municipality: \"渋谷区\",\n                    representative_address_municipality_kana: \"シブヤク\",\n                    representative_address_section: \"道玄坂\",\n                    representative_address_section_kana: \"ドウゲンザカ\",\n                    representative_address_chrome: \"1-2-3\",\n                    representative_address_chrome_kana: \"イチニサン\",\n                    representative_tel: \"0312345678\",\n                    representative_birthday: \"1998/11/01\",\n                    representative_gender: 0,\n\n                    staff1_first_name: \"鈴木\",\n                    staff1_first_name_kana: \"スズキ\",\n                    staff1_last_name: \"次郎\",\n                    staff1_last_name_kana: \"ジロウ\",\n                    staff1_company_name: \"株式会社テスト\",\n                    staff1_belongs: \"EC運営部\",\n                    staff1_tel: \"08012345678\",\n                    staff1_mail: \"staff-1@example.com\",\n                },\n            },\n            { tenantShoptId: tenantShoptId }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\tbody := UpdatingExaminationInfoRequest_v2{\n\\t\\tContractInfo: ContractInfo{\n\\t\\t\\tRepresentativeLastName:                \"山田\",\n\\t\\t\\tRepresentativeLastNameKana:            \"ヤマダ\",\n\\t\\t\\tRepresentativeFirstName:               \"太郎\",\n\\t\\t\\tRepresentativeFirstNameKana:           \"タロウ\",\n\\t\\t\\tRepresentativePostalCode:              \"123-4567\",\n\\t\\t\\tRepresentativePrefecture:              \"東京都\",\n\\t\\t\\tRepresentativePrefectureKana:          \"トウキョウト\",\n\\t\\t\\tRepresentativeAddressMunicipality:     \"渋谷区\",\n\\t\\t\\tRepresentativeAddressMunicipalityKana: \"シブヤク\",\n\\t\\t\\tRepresentativeAddressSection:          \"道玄坂\",\n\\t\\t\\tRepresentativeAddressSectionKana:      \"ドウゲンザカ\",\n\\t\\t\\tRepresentativeAddressChrome:           \"1-2-3\",\n\\t\\t\\tRepresentativeAddressChromeKana:       \"イチニサン\",\n\\t\\t\\tRepresentativeTel:                     \"0312345678\",\n\\t\\t\\tRepresentativeBirthday:                \"1998/11/01\",\n\\t\\t\\tRepresentativeGender:                  0,\n\\t\\t\\tStaff1LastName:                        \"鈴木\",\n\\t\\t\\tStaff1LastNameKana:                    \"スズキ\",\n\\t\\t\\tStaff1FirstName:                       \"次郎\",\n\\t\\t\\tStaff1FirstNameKana:                   \"ジロウ\",\n\\t\\t\\tStaff1CompanyName:                     \"株式会社テスト\",\n\\t\\t\\tStaff1Belongs:                         \"EC運営部\",\n\\t\\t\\tStaff1Tel:                             \"08012345678\",\n\\t\\t\\tStaff1Mail:                            \"staff-1@example.com\",\n\\t\\t\\tCorporate:                             true,\n\\t\\t\\tCorporateInfo: CorporateInfo{\n\\t\\t\\t\\tCorporateNumber:                \"1234567890123\",\n\\t\\t\\t\\tCorporateName:                  \"株式会社テスト\",\n\\t\\t\\t\\tCorporateNameKana:              \"カブシキガイシャテスト\",\n\\t\\t\\t\\tCompanyPostalCode:              \"123-4567\",\n\\t\\t\\t\\tCompanyPrefecture:              \"東京都\",\n\\t\\t\\t\\tCompanyPrefectureKana:          \"トウキョウト\",\n\\t\\t\\t\\tCompanyAddressMunicipality:     \"渋谷区\",\n\\t\\t\\t\\tCompanyAddressMunicipalityKana: \"シブヤク\",\n\\t\\t\\t\\tCompanyAddressSection:          \"道玄坂\",\n\\t\\t\\t\\tCompanyAddressSectionKana:      \"ドウゲンザカ\",\n\\t\\t\\t\\tCompanyAddressChrome:           \"1-2-3\",\n\\t\\t\\t\\tCompanyAddressChromeKana:       \"イチニサン\",\n\\t\\t\\t\\tCompanyTel:                     \"0312345678\",\n\\t\\t\\t\\tCapital:                        1000000,\n\\t\\t\\t\\tEstablishedAt:                  \"2018/11/01\",\n\\t\\t\\t\\tYearlySales:                    100000000,\n\\t\\t\\t\\tBusinessDetails:                \"○○の販売\",\n\\t\\t\\t},\n\\t\\t},\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"PUT\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/contracts/examinations_v2/tenants/%s\", tenantShopID), bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingExaminationInfoRequest_v2 struct {\n\\tContractInfo ContractInfo `json:\"contract_info\"`\n}\ntype ContractInfo struct {\n\\tRepresentativeLastName                string        `json:\"representative_last_name\"`\n\\tRepresentativeLastNameKana            string        `json:\"representative_last_name_kana\"`\n\\tRepresentativeFirstName               string        `json:\"representative_first_name\"`\n\\tRepresentativeFirstNameKana           string        `json:\"representative_first_name_kana\"`\n\\tRepresentativePostalCode              string        `json:\"representative_postal_code\"`\n\\tRepresentativePrefecture              string        `json:\"representative_prefecture\"`\n\\tRepresentativePrefectureKana          string        `json:\"representative_prefecture_kana\"`\n\\tRepresentativeAddressMunicipality     string        `json:\"representative_address_municipality\"`\n\\tRepresentativeAddressMunicipalityKana string        `json:\"representative_address_municipality_kana\"`\n\\tRepresentativeAddressSection          string        `json:\"representative_address_section\"`\n\\tRepresentativeAddressSectionKana      string        `json:\"representative_address_section_kana\"`\n\\tRepresentativeAddressChrome           string        `json:\"representative_address_chrome\"`\n\\tRepresentativeAddressChromeKana       string        `json:\"representative_address_chrome_kana\"`\n\\tRepresentativeAddressBuildingName     *string       `json:\"representative_address_building_name,omitempty\"`\n\\tRepresentativeAddressBuildingNameKana *string       `json:\"representative_address_building_name_kana,omitempty\"`\n\\tRepresentativeTel                     string        `json:\"representative_tel\"`\n\\tRepresentativeBirthday                string        `json:\"representative_birthday\"`\n\\tRepresentativeGender                  int           `json:\"representative_gender\"`\n\\tStaff1LastName                        string        `json:\"staff1_last_name\"`\n\\tStaff1LastNameKana                    string        `json:\"staff1_last_name_kana\"`\n\\tStaff1FirstName                       string        `json:\"staff1_first_name\"`\n\\tStaff1FirstNameKana                   string        `json:\"staff1_first_name_kana\"`\n\\tStaff1CompanyName                     string        `json:\"staff1_company_name\"`\n\\tStaff1Belongs                         string        `json:\"staff1_belongs\"`\n\\tStaff1Tel                             string        `json:\"staff1_tel\"`\n\\tStaff1Mail                            string        `json:\"staff1_mail\"`\n\\tStaff2LastName                        *string       `json:\"staff2_last_name,omitempty\"`\n\\tStaff2LastNameKana                    *string       `json:\"staff2_last_name_kana,omitempty\"`\n\\tStaff2FirstName                       *string       `json:\"staff2_first_name,omitempty\"`\n\\tStaff2FirstNameKana                   *string       `json:\"staff2_first_name_kana,omitempty\"`\n\\tStaff2CompanyName                     *string       `json:\"staff2_company_name,omitempty\"`\n\\tStaff2Belongs                         *string       `json:\"staff2_belongs,omitempty\"`\n\\tStaff2Tel                             *string       `json:\"staff2_tel,omitempty\"`\n\\tStaff2Mail                            *string       `json:\"staff2_mail,omitempty\"`\n\\tCorporate                             bool          `json:\"corporate\"`\n\\tCorporateInfo                         CorporateInfo `json:\"corporate_info\"`\n}\ntype CorporateInfo struct {\n\\tCorporateNumber                string  `json:\"corporate_number\"`\n\\tCorporateName                  string  `json:\"corporate_name\"`\n\\tCorporateNameKana              string  `json:\"corporate_name_kana\"`\n\\tCompanyPostalCode              string  `json:\"company_postal_code\"`\n\\tCompanyPrefecture              string  `json:\"company_prefecture\"`\n\\tCompanyPrefectureKana          string  `json:\"company_prefecture_kana\"`\n\\tCompanyAddressMunicipality     string  `json:\"company_address_municipality\"`\n\\tCompanyAddressMunicipalityKana string  `json:\"company_address_municipality_kana\"`\n\\tCompanyAddressSection          string  `json:\"company_address_section\"`\n\\tCompanyAddressSectionKana      string  `json:\"company_address_section_kana\"`\n\\tCompanyAddressChrome           string  `json:\"company_address_chrome\"`\n\\tCompanyAddressChromeKana       string  `json:\"company_address_chrome_kana\"`\n\\tCompanyAddressBuildingName     *string `json:\"company_address_building_name,omitempty\"`\n\\tCompanyAddressBuildingNameKana *string `json:\"company_address_building_name_kana,omitempty\"`\n\\tCompanyTel                     string  `json:\"company_tel\"`\n\\tCapital                        int     `json:\"capital\"`\n\\tEstablishedAt                  string  `json:\"established_at\"`\n\\tYearlySales                    int     `json:\"yearly_sales\"`\n\\tBusinessDetails                string  `json:\"business_details\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/examinations_v2/tenants/{$tenantShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\",\n    \"Tenant-Shop-Id: \" . $tenantShopId,\n];\n\n$data = json_encode([\n    \"contract_info\" => [\n        \"representative_last_name\" => \"山田\",\n        \"representative_last_name_kana\" => \"ヤマダ\",\n        \"representative_first_name\" => \"太郎\",\n        \"representative_first_name_kana\" => \"タロウ\",\n        \"representative_postal_code\" => \"123-4567\",\n        \"representative_prefecture\" => \"東京都\",\n        \"representative_prefecture_kana\" => \"トウキョウト\",\n        \"representative_address_municipality\" => \"渋谷区\",\n        \"representative_address_municipality_kana\" => \"シブヤク\",\n        \"representative_address_section\" => \"道玄坂\",\n        \"representative_address_section_kana\" => \"ドウゲンザカ\",\n        \"representative_address_chrome\" => \"1-2-3\",\n        \"representative_address_chrome_kana\" => \"イチニサン\",\n        \"representative_tel\" => \"0312345678\",\n        \"representative_birthday\" => \"1998/11/01\",\n        \"representative_gender\" => 0,\n        \"staff1_last_name\" => \"鈴木\",\n        \"staff1_last_name_kana\" => \"スズキ\",\n        \"staff1_first_name\" => \"次郎\",\n        \"staff1_first_name_kana\" => \"ジロウ\",\n        \"staff1_company_name\" => \"株式会社テスト\",\n        \"staff1_belongs\" => \"EC運営部\",\n        \"staff1_tel\" => \"08012345678\",\n        \"staff1_mail\" => \"staff-1@example.com\",\n        \"corporate\" => true,\n        \"corporate_info\" => [\n            \"corporate_number\" => \"1234567890123\",\n            \"corporate_name\" => \"株式会社テスト\",\n            \"corporate_name_kana\" => \"カブシキガイシャテスト\",\n            \"company_postal_code\" => \"123-4567\",\n            \"company_prefecture\" => \"東京都\",\n            \"company_prefecture_kana\" => \"トウキョウト\",\n            \"company_address_municipality\" => \"渋谷区\",\n            \"company_address_municipality_kana\" => \"シブヤク\",\n            \"company_address_section\" => \"道玄坂\",\n            \"company_address_section_kana\" => \"ドウゲンザカ\",\n            \"company_address_chrome\" => \"1-2-3\",\n            \"company_address_chrome_kana\" => \"イチニサン\",\n            \"company_tel\" => \"0312345678\",\n            \"capital\" => 1000000,\n            \"established_at\" => \"2018/11/01\",\n            \"yearly_sales\" => 100000000,\n            \"business_details\" => \"○○の販売\"\n        ]\n    ]\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/contracts/examinations_v2/tenants/{tenant_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json',\n    'Tenant-Shop-Id': tenant_shop_id,\n}\n\ndata = {\n    \"contract_info\": {\n        \"representative_last_name\": \"山田\",\n        \"representative_last_name_kana\": \"ヤマダ\",\n        \"representative_first_name\": \"太郎\",\n        \"representative_first_name_kana\": \"タロウ\",\n        \"representative_postal_code\": \"123-4567\",\n        \"representative_prefecture\": \"東京都\",\n        \"representative_prefecture_kana\": \"トウキョウト\",\n        \"representative_address_municipality\": \"渋谷区\",\n        \"representative_address_municipality_kana\": \"シブヤク\",\n        \"representative_address_section\": \"道玄坂\",\n        \"representative_address_section_kana\": \"ドウゲンザカ\",\n        \"representative_address_chrome\": \"1-2-3\",\n        \"representative_address_chrome_kana\": \"イチニサン\",\n        \"representative_tel\": \"0312345678\",\n        \"representative_birthday\": \"1998/11/01\",\n        \"representative_gender\": 0,\n        \"staff1_last_name\": \"鈴木\",\n        \"staff1_last_name_kana\": \"スズキ\",\n        \"staff1_first_name\": \"次郎\",\n        \"staff1_first_name_kana\": \"ジロウ\",\n        \"staff1_company_name\": \"株式会社テスト\",\n        \"staff1_belongs\": \"EC運営部\",\n        \"staff1_tel\": \"08012345678\",\n        \"staff1_mail\": \"staff-1@example.com\",\n        \"corporate\": True,\n        \"corporate_info\": {\n            \"corporate_number\": \"1234567890123\",\n            \"corporate_name\": \"株式会社テスト\",\n            \"corporate_name_kana\": \"カブシキガイシャテスト\",\n            \"company_postal_code\": \"123-4567\",\n            \"company_prefecture\": \"東京都\",\n            \"company_prefecture_kana\": \"トウキョウト\",\n            \"company_address_municipality\": \"渋谷区\",\n            \"company_address_municipality_kana\": \"シブヤク\",\n            \"company_address_section\": \"道玄坂\",\n            \"company_address_section_kana\": \"ドウゲンザカ\",\n            \"company_address_chrome\": \"1-2-3\",\n            \"company_address_chrome_kana\": \"イチニサン\",\n            \"company_tel\": \"0312345678\",\n            \"capital\": 1000000,\n            \"established_at\": \"2018/11/01\",\n            \"yearly_sales\": 100000000,\n            \"business_details\": \"○○の販売\"\n        }\n    }\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/contracts/examinations_v2/tenants/#{tenant_shop_id}\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        contract_info: {\n            representative_last_name: '山田',\n            representative_last_name_kana: 'ヤマダ',\n            representative_first_name: '太郎',\n            representative_first_name_kana: 'タロウ',\n            representative_postal_code: '123-4567',\n            representative_prefecture: '東京都',\n            representative_prefecture_kana: 'トウキョウト',\n            representative_address_municipality: '渋谷区',\n            representative_address_municipality_kana: 'シブヤク',\n            representative_address_section: '道玄坂',\n            representative_address_section_kana: 'ドウゲンザカ',\n            representative_address_chrome: '1-2-3',\n            representative_address_chrome_kana: 'イチニサン',\n            representative_tel: '0312345678',\n            representative_birthday: '1998/11/01',\n            representative_gender: 0,\n            staff1_last_name: '鈴木',\n            staff1_last_name_kana: 'スズキ',\n            staff1_first_name: '次郎',\n            staff1_first_name_kana: 'ジロウ',\n            staff1_company_name: '株式会社テスト',\n            staff1_belongs: 'EC運営部',\n            staff1_tel: '08012345678',\n            staff1_mail: 'staff-1@example.com',\n            corporate: true,\n            corporate_info: {\n                corporate_number: '1234567890123',\n                corporate_name: '株式会社テスト',\n                corporate_name_kana: 'カブシキガイシャテスト',\n                company_postal_code: '123-4567',\n                company_prefecture: '東京都',\n                company_prefecture_kana: 'トウキョウト',\n                company_address_municipality: '渋谷区',\n                company_address_municipality_kana: 'シブヤク',\n                company_address_section: '道玄坂',\n                company_address_section_kana: 'ドウゲンザカ',\n                company_address_chrome: '1-2-3',\n                company_address_chrome_kana: 'イチニサン',\n                company_tel: '0312345678',\n                capital: 1000000,\n                established_at: '2018/11/01',\n                yearly_sales: 100000000,\n                business_details: '○○の販売'\n            }\n        }\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/contracts/examinations/tenants/{id}/files:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: uploadExaminationFile
      tags:
      - LimitedTenantManagement
      summary: テナントショップ 審査ファイルアップロード
      description: |
        `id`で指定したテナントショップの審査に必要なファイルのアップロードを行います。
      parameters:
      - name: id
        in: path
        description: |
          指定したテナントショップのものとしてファイルをアップロードします。`Tenant-Shop-Id`ヘッダーも併せて指定してください。
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップのものとしてファイルをアップロードします。\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ExaminationFile.Uploading.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExaminationFile.Uploading.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: multipart/form-data\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n    -F \"data=@<Path To File>;type=application/json;filename=\\\"<File Name>\\\"\" \\\n    -F \"type=DRIVER_LICENSE_FRONT\"\n'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{Tenant Shop ID}/files'\n"
      - lang: node
        label: Node.js
        source: "import fetch from \"node-fetch\";\nimport FormData from \"form-data\";\nimport * as fs from \"fs\";\n\nconst BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const tenantShopId = \"<Tenant Shop ID>\";\n\n    const endpoint = `${BASE_URL}/v1/contracts/examinations/tenants/${tenantShopId}/files`;\n\n    const form = new FormData();\n\n    // ファイル種別を指定（例として SALES_LICENSE_1: 販売免許証1）\n    form.append(\"type\", \"SALES_LICENSE_1\");\n\n    // ファイルを指定\n    const filePath = \"<Path to File>\";\n    const fileName = \"<File Name>\";\n    const file = fs.createReadStream(filePath);\n    form.append(\"data\", file, fileName);\n\n    const response = await fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            \"Content-Type\": `multipart/form-data; boundary=${form._boundary}`,\n            \"Tenant-Shop-Id\": tenantShopId,\n        },\n        body: form,\n    });\n    const result = await response.json();\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"fmt\"\n\\t\"io\"\n\\t\"log\"\n\\t\"mime/multipart\"\n\\t\"net/http\"\n\\t\"os\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\t// ファイルの読み込み\n\\tfilePath := \"<Path To File>\"\n\\tfileName := \"<File Name>\"\n\\tfile, err := os.Open(filePath)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer file.Close()\n\n\\t// バッファの作成\n\\tbody := &bytes.Buffer{}\n\\twriter := multipart.NewWriter(body)\n\n\\t// ファイルの書き込み\n\\tpart, err := writer.CreateFormFile(\"data\", fileName)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\t_, err = io.Copy(part, file)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\n\\t// 追加情報（ファイル種別）の書き込み\n\\t_ = writer.WriteField(\"type\", \"DRIVER_LICENSE_FRONT\")\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/contracts/examinations/tenants/%s/files\", tenantShopID), body)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/examinations/tenants/{$tenantShopId}/files\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$filePath = '<Path to file>';\n$fileName = '<File Name>';\n\n// 販売免許等1 をアップロードする場合\n$fields = [\n    \"data\" => new CURLFile($filePath, null, $fileName),\n    \"type\" => 'SALES_LICENSE_1',\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $fields);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\ndef main():\n    api_key = '<Secret API Key>'\n\n    tenant_shop_id = '<Tenant Shop ID>'\n\n    file_path = '<Path to file>'\n    file_name = '<File Name>'\n\n    with open(file_path, 'rb') as file:\n        files = {'data': (file_name, file)}\n\n        # 追加情報（ファイル種別）の指定\n        payload = {'type': 'DRIVER_LICENSE_FRONT'}\n\n        url = f'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{tenant_shop_id}/files'\n\n        # ヘッダーを設定\n        headers = {\n            'Authorization': f'Bearer {api_key}',\n            'Tenant-Shop-Id': tenant_shop_id,\n        }\n\n        # HTTP POSTリクエストの送信\n        try:\n            response = requests.post(url, headers=headers, files=files, data=payload)\n\n            # レスポンスの処理\n            if response.status_code == 200:\n                # 成功した場合の処理\n                print(f\"Success: {response.json()}\")\n            else:\n                # エラーの処理\n                print(f\"Error: {response.json()} {response.text}\")\n        except requests.RequestException as e:\n            # 通信エラーの処理\n            print(f\"Request error: {e}\")\n\nif __name__ == '__main__':\n    main()\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'mime/types'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/contracts/examinations/tenants/#{tenant_shop_id}/files\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    file_path = '<Path to file>'\n    file_name = '<File Name>'\n    \n    file = File.open(file_path, 'rb')\n    file_data = file.read\n    file.close\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    # ファイルと追加情報をマルチパートフォームデータに追加\n    boundary = '----FincodeMultipartRequest'\n    body = []\n    insert_file_to_body(body, boundary, 'data', file_name, file_data)\n    insert_data_to_body(body, boundary, 'type', \"DRIVER_LICENSE_FRONT\")\n    body << \"--#{boundary}--\\r\\n\"\n\n    request['Content-Type'] = \"multipart/form-data; boundary=#{boundary}\"\n    request.body = body.join('')\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\ndef insert_file_to_body(body, boundary, key, file_name, file_data)\n    body << \"--#{boundary}\\r\\n\"\n    body << \"Content-Disposition: form-data; name=\\\"#{key}\\\"; filename=\\\"#{file_name}\\\"\\r\\n\"\n    body << \"Content-Type: #{MIME::Types.type_for(file_name).first.content_type}\\r\\n\"\n    body << \"\\r\\n\"\n    body << file_data\n    body << \"\\r\\n\"\nend\n\ndef insert_data_to_body(body, boundary, key, value)\n    body << \"--#{boundary}\\r\\n\"\n    body << \"Content-Disposition: form-data; name=\\\"#{key}\\\"\\r\\n\"\n    body << \"\\r\\n\"\n    body << value\n    body << \"\\r\\n\"\nend\n\nmain\n"
  /v1/contracts/examinations:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: requestProductionEnvironment
      tags:
      - LimitedTenantManagement
      summary: テナントショップ 本番環境申請
      description: |
        `id`で指定したテナントショップの本番環境の利用申請を行います。このAPIを呼び出すまでにテナント本番環境申請情報 更新APIで申請情報を用意しておく必要があります。
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップのものとしてファイルをアップロードします。\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/POST.ContractsExaminations.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POST.ContractsExaminations.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n    -d '{\n    \"shop_id\": \"<Tenant Shop ID>\",\n    \"enable_immediate_use\": true,\n}' \\\n'https://api.test.fincode.jp/v1/contracts/examinations'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const tenantShopId = \"<Tenant Shop ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.tenants.requestExamination(\n            {\n                shop_id: tenantShopId,\n                enable_immediate_use: false,\n            },\n            { tenantShopId: tenantShopId }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\tbody := RequestExaminationRequestBody{\n\\t\\tShopID:             \"<Shop ID>\",\n\\t\\tEnableImmediateUse: false,\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/contracts/examinations\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype RequestExaminationRequestBody struct {\n\\tShopID             string `json:\"shop_id\"`\n\\tEnableImmediateUse bool   `json:\"enable_immediate_use\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/examinations\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\",\n    \"Tenant-Shop-Id: \" . $tenantShopId,\n];\n\n$data = json_encode([\n    \"shop_id\" => \"s_***********\",\n    \"enable_immediate_use\" => true,\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/contracts/examinations'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"shop_id\": \"<Tenant Shop ID>\",\n    \"enable_immediate_use\": True,\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n\n    endpoint = \"/v1/contracts/examinations\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        shop_id: tenant_shop_id,\n        enable_immediate_use: true,\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/contracts-examinations-tenants-{id}-providers-reserve.yml:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: reserveProvider
      tags:
      - LimitedTenantManagement
      summary: テナントショップ 決済手段追加申請
      description: |
        `id`で指定したテナントショップの決済手段の追加申請を行います。
      parameters:
      - name: id
        in: path
        description: |
          指定したテナントショップに対して決済手段を追加申請します。。`Tenant-Shop-Id`ヘッダーも併せて指定してください。
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップに対して決済手段を追加申請します。\n"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/POST.ProviderReserve.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/POST.ProviderReserve.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n    -d '{\n    \"provider\": [\"PAYPAY\"]\n}' \\\n'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{Tenant Shop ID}/providers/reserve'\n"
      - lang: node
        label: Node.js
        source: "import fetch from \"node-fetch\";\n\nconst BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const tenantShopId = \"<Tenant Shop ID>\";\n\n    const endpoint = `${BASE_URL}/v1/contracts/examinations/tenants/${tenantShopId}/providers/reserve`;\n\n    const response = await fetch(endpoint, {\n        method: \"POST\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            \"Content-Type\": \"application/json\",\n            \"Tenant-Shop-Id\": tenantShopId,\n        },\n        body: JSON.stringify({\n            provider: [\"PAYSLE\", \"PAYPAY\"],\n        }),\n    });\n    const reservingResult = await response.json();\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\tbody := ReservingTenantProviderRequest{\n\\t\\tProvider: []Provider{\n\\t\\t\\tPAYPAY,\n\\t\\t},\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/contracts/examinations/tenants/%s/providers/reserve\", tenantShopID), bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype ReservingTenantProviderRequest struct {\n\\tProvider []Provider `json:\"provider\"`\n}\n\ntype Provider string\n\nconst (\n\\tPAYSLE        Provider = \"PAYSLE\"\n\\tPAYPAY        Provider = \"PAYPAY\"\n\\tAPPLE_PAY_UC  Provider = \"APPLE_PAY_UC\"\n\\tAPPLE_PAY_JCB Provider = \"APPLE_PAY_JCB\"\n\\tDIRECT_DEBIT  Provider = \"DIRECT_DEBIT\"\n)\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/examinations/tenants/{$tenantShopId}/providers/reserve\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\",\n    \"Tenant-Shop-Id: \" . $tenantShopId,\n];\n\n$data = json_encode([\n    \"provider\" => [\n        \"PAYSLE\",\n        \"PAYPAY\"\n    ]\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{tenant_shop_id}/providers/reserve'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json',\n    'Tenant-Shop-Id': tenant_shop_id,\n}\n\ndata = {\n    'provider': [ \"PAYSLE\", \"PAYPAY\" ]\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/contracts/examinations/tenants/#{tenant_shop_id}/providers/reserve\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        provider: [\"PAYSLE\", \"PAYPAY\"],\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/contracts/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveTenantContract
      tags:
      - LimitedTenantManagement
      summary: テナントショップ契約情報 取得
      description: |
        `id`で指定したテナントショップの契約情報を取得します。
      parameters:
      - name: id
        in: path
        description: |
          指定したテナントショップの契約情報を取得します。`Tenant-Shop-Id`ヘッダーも併せて指定してください。
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップの契約情報を取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contracts.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n'https://api.test.fincode.jp/v1/contracts/{Tenant Shop ID}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const tenantShopId = \"<Tenant Shop ID>\";\n\n    try {\n        // リクエストの送信\n        const contracts = await fincode.tenants.retrieveContract(tenantShopId, {\n            tenantShopId: tenantShopId,\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/contracts/%s\", tenantShopID), nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/{$tenantShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/contracts/{tenant_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Tenant-Shop-Id': tenant_shop_id,\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/contracts/#{tenant_shop_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/contracts/examinations/tenants/{id}:
    get:
      deprecated: true
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveTenantExaminationInfo
      tags:
      - LimitedTenantManagement
      summary: （旧）テナントショップ本番環境申請情報 取得
      description: "※ このAPIの使用は現在非推奨です。新しいテナントショップ本番環境申請情報 取得APIをご利用ください。\\\n`id`で指定したテナントショップの本番環境申請情報を取得します。\n"
      parameters:
      - name: id
        in: path
        description: |
          指定したテナントショップの本番環境申請情報を取得します。`Tenant-Shop-Id`ヘッダーも併せて指定してください。
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップの本番環境申請情報を取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExaminationInfo.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{Tenant Shop ID}'\n"
      - lang: node
        label: Node.js
        source: "import fetch from \"node-fetch\";\n\nconst BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const tenantShopId = \"<Tenant Shop ID>\";\n\n    const endpoint = `${BASE_URL}/v1/contracts/examinations/tenants/${tenantShopId}`;\n\n    const response = await fetch(endpoint, {\n        method: \"GET\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            \"Tenant-Shop-Id\": tenantShopId,\n        },\n    });\n    const examinationInfo = await response.json();\n\n    console.log(examinationInfo);\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/contracts/examinations/tenants/%s\", tenantShopID), nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/examinations/tenants/{$tenantShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Tenant-Shop-Id: \" . $tenantShopId,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{tenant_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Tenant-Shop-Id': tenant_shop_id,\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/contracts/examinations/tenants/#{tenant_shop_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      deprecated: true
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updateTenantExaminationInfo
      tags:
      - LimitedTenantManagement
      summary: （旧）テナントショップ本番環境申請情報 更新
      description: "※ このAPIの使用は現在非推奨です。新しいテナントショップ本番環境申請情報 更新APIをご利用ください。\\\n`id`で指定したテナントショップの本番環境申請情報を更新します。\n"
      parameters:
      - name: id
        in: path
        description: |
          指定したテナントショップの本番環境申請情報を更新します。`Tenant-Shop-Id`ヘッダーも併せて指定してください。
        schema:
          $ref: "#/components/schemas/schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: true
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップの本番環境申請情報を更新します。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExaminationInfo.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExaminationInfo.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Tenant-Shop-Id: <Tenant Shop ID>\" \\\n    -d '{\n    \"update_contract_detail\": true,\n    \"contract_detail\": {\n        \"corporate\": true,\n        \"corporate_number\": \"1234567890123\",\n        \"corporate_name\": \"株式会社テスト\",\n        \"corporate_name_kana\": \"カブシキガイシャテスト\",\n        \"company_postal_code\": \"123-4567\",\n        \"company_prefecture\": \"東京都\",\n        \"company_prefecture_kana\": \"トウキョウト\",\n        \"company_address_municipality\": \"渋谷区\",\n        \"company_address_municipality_kana\": \"シブヤク\",\n        \"company_address_section\": \"道玄坂\",\n        \"company_address_section_kana\": \"ドウゲンザカ\",\n        \"company_address_chrome\": \"1-2-3\",\n        \"company_address_chrome_kana\": \"イチニサン\",\n        \"company_tel\": \"0312345678\",\n        \"capital\": 1000000,\n        \"established_at\": \"2018/11/01\",\n        \"yearly_sales\": 100000000,\n        \"business_details\": \"○○の販売\",\n        \"representative_last_name\": \"山田\",\n        \"representative_last_name_kana\": \"ヤマダ\",\n        \"representative_first_name\": \"太郎\",\n        \"representative_first_name_kana\": \"タロウ\",\n        \"representative_postal_code\": \"123-4567\",\n        \"representative_prefecture\": \"東京都\",\n        \"representative_prefecture_kana\": \"トウキョウト\",\n        \"representative_address_municipality\": \"渋谷区\",\n        \"representative_address_municipality_kana\": \"シブヤク\",\n        \"representative_address_section\": \"道玄坂\",\n        \"representative_address_section_kana\": \"ドウゲンザカ\",\n        \"representative_address_chrome\": \"1-2-3\",\n        \"representative_address_chrome_kana\": \"イチニサン\",\n        \"representative_tel\": \"0312345678\",\n        \"representative_birthday\": \"1998/11/01\",\n        \"representative_gender\": 0,\n        \"staff1_last_name\": \"鈴木\",\n        \"staff1_last_name_kana\": \"スズキ\",\n        \"staff1_first_name\": \"次郎\",\n        \"staff1_first_name_kana\": \"ジロウ\",\n        \"staff1_company_name\": \"株式会社テスト\",\n        \"staff1_belongs\": \"EC運営部\",\n        \"staff1_tel\": \"08012345678\",\n        \"staff1_mail\": \"staff-1@exampple.com\"\n    }\n}' \\\n'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{Tenant Shop ID}'\n"
      - lang: node
        label: Node.js
        source: "const BASE_URL = \"https://api.test.fincode.jp\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const tenantShopId = \"<Tenant Shop ID>\";\n\n    const endpoint = `${BASE_URL}/v1/contracts/examinations/tenants/${tenantShopId}`;\n\n    const response = await fetch(endpoint, {\n        method: \"PUT\",\n        headers: {\n            Authorization: `Bearer ${API_KEY}`,\n            \"Content-Type\": \"application/json\",\n            \"Tenant-Shop-Id\": tenantShopId,\n        },\n        body: JSON.stringify({\n            update_contract_detail: true,\n            contract_detail: {\n                corporate: true,\n                corporate_number: \"1234567890123\",\n                corporate_name: \"株式会社テスト\",\n                corporate_name_kana: \"カブシキガイシャテスト\",\n                company_postal_code: \"123-4567\",\n                company_prefecture: \"東京都\",\n                company_prefecture_kana: \"トウキョウト\",\n                company_address_municipality: \"渋谷区\",\n                company_address_municipality_kana: \"シブヤク\",\n                company_address_section: \"道玄坂\",\n                company_address_section_kana: \"ドウゲンザカ\",\n                company_address_chrome: \"1-2-3\",\n                company_address_chrome_kana: \"イチニサン\",\n                company_tel: \"0312345678\",\n                capital: 1000000,\n                established_at: \"2018/11/01\",\n                yearly_sales: 100000000,\n                business_details: \"○○の販売\",\n                representative_last_name: \"山田\",\n                representative_last_name_kana: \"ヤマダ\",\n                representative_first_name: \"太郎\",\n                representative_first_name_kana: \"タロウ\",\n                representative_postal_code: \"123-4567\",\n                representative_prefecture: \"東京都\",\n                representative_prefecture_kana: \"トウキョウト\",\n                representative_address_municipality: \"渋谷区\",\n                representative_address_municipality_kana: \"シブヤク\",\n                representative_address_section: \"道玄坂\",\n                representative_address_section_kana: \"ドウゲンザカ\",\n                representative_address_chrome: \"1-2-3\",\n                representative_address_chrome_kana: \"イチニサン\",\n                representative_tel: \"0312345678\",\n                representative_birthday: \"1998/11/01\",\n                representative_gender: 0,\n                staff1_last_name: \"鈴木\",\n                staff1_last_name_kana: \"スズキ\",\n                staff1_first_name: \"次郎\",\n                staff1_first_name_kana: \"ジロウ\",\n                staff1_company_name: \"株式会社テスト\",\n                staff1_belongs: \"EC運営部\",\n                staff1_tel: \"08012345678\",\n                staff1_mail: \"staff-1@exampple.com\",\n            },\n        }),\n    });\n    const examinationInfo = await response.json();\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\ttenantShopID := \"<Tenant Shop ID>\"\n\n\\tbody := UpdatingExaminationInfoRequest{\n\\t\\tUpdateContractDetail: true,\n\\t\\tContractDetail: ContractDetail{\n\\t\\t\\tCorporate:                             true,\n\\t\\t\\tCorporateNumber:                       \"1234567890123\",\n\\t\\t\\tCorporateName:                         \"株式会社テスト\",\n\\t\\t\\tCorporateNameKana:                     \"カブシキガイシャテスト\",\n\\t\\t\\tCompanyPostalCode:                     \"123-4567\",\n\\t\\t\\tCompanyPrefecture:                     \"東京都\",\n\\t\\t\\tCompanyPrefectureKana:                 \"トウキョウト\",\n\\t\\t\\tCompanyAddressMunicipality:            \"渋谷区\",\n\\t\\t\\tCompanyAddressMunicipalityKana:        \"シブヤク\",\n\\t\\t\\tCompanyAddressSection:                 \"道玄坂\",\n\\t\\t\\tCompanyAddressSectionKana:             \"ドウゲンザカ\",\n\\t\\t\\tCompanyAddressChrome:                  \"1-2-3\",\n\\t\\t\\tCompanyAddressChromeKana:              \"イチニサン\",\n\\t\\t\\tCompanyTel:                            \"0312345678\",\n\\t\\t\\tCapital:                               1000000,\n\\t\\t\\tEstablishedAt:                         \"2018/11/01\",\n\\t\\t\\tYearlySales:                           100000000,\n\\t\\t\\tBusinessDetails:                       \"○○の販売\",\n\\t\\t\\tRepresentativeLastName:                \"山田\",\n\\t\\t\\tRepresentativeLastNameKana:            \"ヤマダ\",\n\\t\\t\\tRepresentativeFirstName:               \"太郎\",\n\\t\\t\\tRepresentativeFirstNameKana:           \"タロウ\",\n\\t\\t\\tRepresentativePostalCode:              \"123-4567\",\n\\t\\t\\tRepresentativePrefecture:              \"東京都\",\n\\t\\t\\tRepresentativePrefectureKana:          \"トウキョウト\",\n\\t\\t\\tRepresentativeAddressMunicipality:     \"渋谷区\",\n\\t\\t\\tRepresentativeAddressMunicipalityKana: \"シブヤク\",\n\\t\\t\\tRepresentativeAddressSection:          \"道玄坂\",\n\\t\\t\\tRepresentativeAddressSectionKana:      \"ドウゲンザカ\",\n\\t\\t\\tRepresentativeAddressChrome:           \"1-2-3\",\n\\t\\t\\tRepresentativeAddressChromeKana:       \"イチニサン\",\n\\t\\t\\tRepresentativeTel:                     \"0312345678\",\n\\t\\t\\tRepresentativeBirthday:                \"1998/11/01\",\n\\t\\t\\tRepresentativeGender:                  0,\n\\t\\t\\tStaff1LastName:                        \"鈴木\",\n\\t\\t\\tStaff1LastNameKana:                    \"スズキ\",\n\\t\\t\\tStaff1FirstName:                       \"次郎\",\n\\t\\t\\tStaff1FirstNameKana:                   \"ジロウ\",\n\\t\\t\\tStaff1CompanyName:                     \"株式会社テスト\",\n\\t\\t\\tStaff1Belongs:                         \"EC運営部\",\n\\t\\t\\tStaff1Tel:                             \"08012345678\",\n\\t\\t\\tStaff1Mail:                            \"staff-1@example.com\",\n\\t\\t},\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"PUT\", fmt.Sprintf(\"https://api.test.fincode.jp/v1/contracts/examinations/tenants/%s\", tenantShopID), bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\\treq.Header.Set(\"Tenant-Shop-Id\", tenantShopID)\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingExaminationInfoRequest struct {\n\\tUpdateContractDetail bool           `json:\"update_contract_detail\"`\n\\tContractDetail       ContractDetail `json:\"contract_detail\"`\n}\n\ntype ContractDetail struct {\n\\tCorporate                             bool    `json:\"corporate\"`\n\\tCorporateNumber                       string  `json:\"corporate_number\"`\n\\tCorporateName                         string  `json:\"corporate_name\"`\n\\tCorporateNameKana                     string  `json:\"corporate_name_kana\"`\n\\tHP                                    *string `json:\"hp,omitempty\"`\n\\tCompanyPostalCode                     string  `json:\"company_postal_code\"`\n\\tCompanyPrefecture                     string  `json:\"company_prefecture\"`\n\\tCompanyPrefectureKana                 string  `json:\"company_prefecture_kana\"`\n\\tCompanyAddressMunicipality            string  `json:\"company_address_municipality\"`\n\\tCompanyAddressMunicipalityKana        string  `json:\"company_address_municipality_kana\"`\n\\tCompanyAddressSection                 string  `json:\"company_address_section\"`\n\\tCompanyAddressSectionKana             string  `json:\"company_address_section_kana\"`\n\\tCompanyAddressChrome                  string  `json:\"company_address_chrome\"`\n\\tCompanyAddressChromeKana              string  `json:\"company_address_chrome_kana\"`\n\\tCompanyAddressBuildingName            *string `json:\"company_address_building_name,omitempty\"`\n\\tCompanyAddressBuildingNameKana        *string `json:\"company_address_building_name_kana,omitempty\"`\n\\tCompanyTel                            string  `json:\"company_tel\"`\n\\tCapital                               int     `json:\"capital\"`\n\\tEstablishedAt                         string  `json:\"established_at\"`\n\\tYearlySales                           int     `json:\"yearly_sales\"`\n\\tBusinessDetails                       string  `json:\"business_details\"`\n\\tRepresentativeLastName                string  `json:\"representative_last_name\"`\n\\tRepresentativeLastNameKana            string  `json:\"representative_last_name_kana\"`\n\\tRepresentativeFirstName               string  `json:\"representative_first_name\"`\n\\tRepresentativeFirstNameKana           string  `json:\"representative_first_name_kana\"`\n\\tRepresentativePostalCode              string  `json:\"representative_postal_code\"`\n\\tRepresentativePrefecture              string  `json:\"representative_prefecture\"`\n\\tRepresentativePrefectureKana          string  `json:\"representative_prefecture_kana\"`\n\\tRepresentativeAddressMunicipality     string  `json:\"representative_address_municipality\"`\n\\tRepresentativeAddressMunicipalityKana string  `json:\"representative_address_municipality_kana\"`\n\\tRepresentativeAddressSection          string  `json:\"representative_address_section\"`\n\\tRepresentativeAddressSectionKana      string  `json:\"representative_address_section_kana\"`\n\\tRepresentativeAddressChrome           string  `json:\"representative_address_chrome\"`\n\\tRepresentativeAddressChromeKana       string  `json:\"representative_address_chrome_kana\"`\n\\tRepresentativeAddressBuildingName     *string `json:\"representative_address_building_name,omitempty\"`\n\\tRepresentativeAddressBuildingNameKana *string `json:\"representative_address_building_name_kana,omitempty\"`\n\\tRepresentativeTel                     string  `json:\"representative_tel\"`\n\\tRepresentativeBirthday                string  `json:\"representative_birthday\"`\n\\tRepresentativeGender                  int     `json:\"representative_gender\"`\n\\tStaff1LastName                        string  `json:\"staff1_last_name\"`\n\\tStaff1LastNameKana                    string  `json:\"staff1_last_name_kana\"`\n\\tStaff1FirstName                       string  `json:\"staff1_first_name\"`\n\\tStaff1FirstNameKana                   string  `json:\"staff1_first_name_kana\"`\n\\tStaff1CompanyName                     string  `json:\"staff1_company_name\"`\n\\tStaff1Belongs                         string  `json:\"staff1_belongs\"`\n\\tStaff1Tel                             string  `json:\"staff1_tel\"`\n\\tStaff1Mail                            string  `json:\"staff1_mail\"`\n\\tStaff2LastName                        *string `json:\"staff2_last_name,omitempty\"`\n\\tStaff2LastNameKana                    *string `json:\"staff2_last_name_kana,omitempty\"`\n\\tStaff2FirstName                       *string `json:\"staff2_first_name,omitempty\"`\n\\tStaff2FirstNameKana                   *string `json:\"staff2_first_name_kana,omitempty\"`\n\\tStaff2CompanyName                     *string `json:\"staff2_company_name,omitempty\"`\n\\tStaff2Belongs                         *string `json:\"staff2_belongs,omitempty\"`\n\\tStaff2Tel                             *string `json:\"staff2_tel,omitempty\"`\n\\tStaff2Mail                            *string `json:\"staff2_mail,omitempty\"`\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$tenantShopId = '<Tenant Shop ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/contracts/examinations/tenants/{$tenantShopId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\",\n    \"Tenant-Shop-Id: \" . $tenantShopId,\n];\n\n$data = json_encode([\n    \"update_contract_detail\" => true,\n    \"contract_detail\" => [\n        \"corporate\" => true,\n        \"corporate_number\" => \"1234567890123\",\n        \"corporate_name\" => \"株式会社テスト\",\n        \"corporate_name_kana\" => \"カブシキガイシャテスト\",\n        \"company_postal_code\" => \"123-4567\",\n        \"company_prefecture\" => \"東京都\",\n        \"company_prefecture_kana\" => \"トウキョウト\",\n        \"company_address_municipality\" => \"渋谷区\",\n        \"company_address_municipality_kana\" => \"シブヤク\",\n        \"company_address_section\" => \"道玄坂\",\n        \"company_address_section_kana\" => \"ドウゲンザカ\",\n        \"company_address_chrome\" => \"1-2-3\",\n        \"company_address_chrome_kana\" => \"イチニサン\",\n        \"company_tel\" => \"0312345678\",\n        \"capital\" => 1000000,\n        \"established_at\" => \"2018/11/01\",\n        \"yearly_sales\" => 100000000,\n        \"business_details\" => \"○○の販売\",\n        \"representative_last_name\" => \"山田\",\n        \"representative_last_name_kana\" => \"ヤマダ\",\n        \"representative_first_name\" => \"太郎\",\n        \"representative_first_name_kana\" => \"タロウ\",\n        \"representative_postal_code\" => \"123-4567\",\n        \"representative_prefecture\" => \"東京都\",\n        \"representative_prefecture_kana\" => \"トウキョウト\",\n        \"representative_address_municipality\" => \"渋谷区\",\n        \"representative_address_municipality_kana\" => \"シブヤク\",\n        \"representative_address_section\" => \"道玄坂\",\n        \"representative_address_section_kana\" => \"ドウゲンザカ\",\n        \"representative_address_chrome\" => \"1-2-3\",\n        \"representative_address_chrome_kana\" => \"イチニサン\",\n        \"representative_tel\" => \"0312345678\",\n        \"representative_birthday\" => \"1998/11/01\",\n        \"representative_gender\" => 0,\n        \"staff1_last_name\" => \"鈴木\",\n        \"staff1_last_name_kana\" => \"スズキ\",\n        \"staff1_first_name\" => \"次郎\",\n        \"staff1_first_name_kana\" => \"ジロウ\",\n        \"staff1_company_name\" => \"株式会社テスト\",\n        \"staff1_belongs\" => \"EC運営部\",\n        \"staff1_tel\" => \"08012345678\",\n        \"staff1_mail\" => \"staff-1@exampple.com\"\n    ]\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\ntenant_shop_id = '<Tenant Shop ID>'\n\nurl = f'https://api.test.fincode.jp/v1/contracts/examinations/tenants/{tenant_shop_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json',\n    'Tenant-Shop-Id': tenant_shop_id,\n}\n\ndata = {\n    \"update_contract_detail\": True,\n    \"contract_detail\": {\n        \"corporate\": True,\n        \"corporate_number\": \"1234567890123\",\n        \"corporate_name\": \"株式会社テスト\",\n        \"corporate_name_kana\": \"カブシキガイシャテスト\",\n        \"company_postal_code\": \"123-4567\",\n        \"company_prefecture\": \"東京都\",\n        \"company_prefecture_kana\": \"トウキョウト\",\n        \"company_address_municipality\": \"渋谷区\",\n        \"company_address_municipality_kana\": \"シブヤク\",\n        \"company_address_section\": \"道玄坂\",\n        \"company_address_section_kana\": \"ドウゲンザカ\",\n        \"company_address_chrome\": \"1-2-3\",\n        \"company_address_chrome_kana\": \"イチニサン\",\n        \"company_tel\": \"0312345678\",\n        \"capital\": 1000000,\n        \"established_at\": \"2018/11/01\",\n        \"yearly_sales\": 100000000,\n        \"business_details\": \"○○の販売\",\n        \"representative_last_name\": \"山田\",\n        \"representative_last_name_kana\": \"ヤマダ\",\n        \"representative_first_name\": \"太郎\",\n        \"representative_first_name_kana\": \"タロウ\",\n        \"representative_postal_code\": \"123-4567\",\n        \"representative_prefecture\": \"東京都\",\n        \"representative_prefecture_kana\": \"トウキョウト\",\n        \"representative_address_municipality\": \"渋谷区\",\n        \"representative_address_municipality_kana\": \"シブヤク\",\n        \"representative_address_section\": \"道玄坂\",\n        \"representative_address_section_kana\": \"ドウゲンザカ\",\n        \"representative_address_chrome\": \"1-2-3\",\n        \"representative_address_chrome_kana\": \"イチニサン\",\n        \"representative_tel\": \"0312345678\",\n        \"representative_birthday\": \"1998/11/01\",\n        \"representative_gender\": 0,\n        \"staff1_last_name\": \"鈴木\",\n        \"staff1_last_name_kana\": \"スズキ\",\n        \"staff1_first_name\": \"次郎\",\n        \"staff1_first_name_kana\": \"ジロウ\",\n        \"staff1_company_name\": \"株式会社テスト\",\n        \"staff1_belongs\": \"EC運営部\",\n        \"staff1_tel\": \"08012345678\",\n        \"staff1_mail\": \"staff-1@example.com\",\n    }\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    tenant_shop_id = '<Tenant Shop ID>'\n    endpoint = \"/v1/contracts/examinations/tenants/#{tenant_shop_id}\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        update_contract_detail: true,\n        contract_detail: {\n            corporate: true,\n            corporate_number: \"1234567890123\",\n            corporate_name: \"株式会社テスト\",\n            corporate_name_kana: \"カブシキガイシャテスト\",\n            company_postal_code: \"123-4567\",\n            company_prefecture: \"東京都\",\n            company_prefecture_kana: \"トウキョウト\",\n            company_address_municipality: \"渋谷区\",\n            company_address_municipality_kana: \"シブヤク\",\n            company_address_section: \"道玄坂\",\n            company_address_section_kana: \"ドウゲンザカ\",\n            company_address_chrome: \"1-2-3\",\n            company_address_chrome_kana: \"イチニサン\",\n            company_tel: \"0312345678\",\n            capital: 1000000,\n            established_at: \"2018/11/01\",\n            yearly_sales: 100000000,\n            business_details: \"○○の販売\",\n            representative_last_name: \"山田\",\n            representative_last_name_kana: \"ヤマダ\",\n            representative_first_name: \"太郎\",\n            representative_first_name_kana: \"タロウ\",\n            representative_postal_code: \"123-4567\",\n            representative_prefecture: \"東京都\",\n            representative_prefecture_kana: \"トウキョウト\",\n            representative_address_municipality: \"渋谷区\",\n            representative_address_municipality_kana: \"シブヤク\",\n            representative_address_section: \"道玄坂\",\n            representative_address_section_kana: \"ドウゲンザカ\",\n            representative_address_chrome: \"1-2-3\",\n            representative_address_chrome_kana: \"イチニサン\",\n            representative_tel: \"0312345678\",\n            representative_birthday: \"1998/11/01\",\n            representative_gender: 0,\n            staff1_last_name: \"鈴木\",\n            staff1_last_name_kana: \"スズキ\",\n            staff1_first_name: \"次郎\",\n            staff1_first_name_kana: \"ジロウ\",\n            staff1_company_name: \"株式会社テスト\",\n            staff1_belongs: \"EC運営部\",\n            staff1_tel: \"08012345678\",\n            staff1_mail: \"staff-1@example.com\",\n        }\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n    request['Tenant-Shop-Id'] = tenant_shop_id\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/webhook_settings:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: createWebhookSetting
      tags:
      - WebhookSetting
      summary: Webhook設定 登録
      parameters:
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\n指定したテナントショップ上で発生したイベントを購読するWebhook設定を登録します。\n"
      description: |
        Webhook設定を登録します。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookSetting.Creating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSetting.Creating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X POST \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"event\": \"payments.card.secure\",\n    \"url\": \"https://your-service.example.com/webhook-receiver\",\n}' \\\n'https://api.test.fincode.jp/v1/webhook_settings'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const webhookSetting = await fincode.webhookSettings.create({\n            url: \"https://your-service.example.com/webhook-receiver\",\n            event: \"payments.card.secure\",\n            signature: \"WEBHOOK_FROM_FINCODE\",\n        });\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\tbody := CreatingWebhookSettingRequest{\n\\t\\tURL:       stringPointer(\"https://your-service.example.com/webhook-receiver\"),\n\\t\\tEvent:     stringPointer(\"payments.card.secure\"),\n\\t\\tSignature: stringPointer(\"WEBHOOK_FROM_FINCODE\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"POST\", \"https://api.test.fincode.jp/v1/webhook_settings\", bytes.NewBuffer(marshalledBody))\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype CreatingWebhookSettingRequest struct {\n\\tID        *string `json:\"id\"`\n\\tURL       *string `json:\"url\"`\n\\tEvent     *string `json:\"event\"`\n\\tSignature *string `json:\"signature\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/webhook_settings\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n    \"Content-Type: application/json\"\n];\n\n$data = json_encode([\n    \"url\" => \"https://your-service.example.com/webhook-receiver\",\n    \"event\" => \"payments.card.secure\",\n    \"signature\" => \"WEBHOOK_FROM_FINCODE\"\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_POST, true);\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/webhook_settings'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"event\": \"payments.card.secure\",\n    \"url\": \"https://your-service.example.com/webhook-receiver\",\n    \"signature\": \"WEBHOOK_FROM_FINCODE\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.post(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/webhook_settings\"\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        event: \"payments.card.secure\",\n        url: \"https://your-service.example.com/webhook-receiver\",\n        signature: \"WEBHOOK_FROM_FINCODE\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Post.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveWebhookSettingList
      tags:
      - WebhookSetting
      summary: Webhook設定 一覧取得
      description: |
        Webhook設定を一覧で取得します。クエリパラメータを指定して取得する条件を絞り込めます。
      parameters:
      - in: query
        name: Query
        description: |
          Webhook設定の一覧取得において検索条件となるクエリパラメータ
        required: false
        schema:
          $ref: "#/components/schemas/Pagination.QueryParams"
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づくWebhook設定から一覧で取得します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSetting.ListRetrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/webhook_settings'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    try {\n        // リクエストの送信\n        const webhookSettings = await fincode.webhookSettings.retrieveList();\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\"GET\", \"https://api.test.fincode.jp/v1/webhook_settings\", nil)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\tparams := req.URL.Query()\n\\tparams.Add(\"limit\", \"10\")\n\\treq.URL.RawQuery = params.Encode()\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/webhook_settings\";\n\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nurl = f'https://api.test.fincode.jp/v1/webhook_settings'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    endpoint = \"/v1/webhook_settings\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /v1/webhook_settings/{id}:
    get:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: retrieveWebhookSetting
      tags:
      - WebhookSetting
      summary: Webhook設定 取得
      description: |
        IDで指定したWebhook設定を取得します。
      parameters:
      - name: id
        in: path
        description: Webhook設定のID
        schema:
          $ref: "#/components/schemas/WebhookSettingId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を取得します。\n"
        required: false
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSetting.Retrieving.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X GET \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/webhook_settings/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const webhookSettingId = \"<Webhook Setting ID>\";\n\n    try {\n        // リクエストの送信\n        const webhookSetting = await fincode.webhookSettings.retrieve(\n            webhookSettingId\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\twebhookSettingID := \"<Webhook Setting ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"GET\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/webhook_settings/%s\", webhookSettingID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$webhookSettingId = '<Webhook Setting ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/webhook_settings/{$webhookSettingId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_HTTPGET, true);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nwebhook_setting_id = '<Webhook Setting ID>'\n\nurl = f'https://api.test.fincode.jp/v1/webhook_settings/{webhook_setting_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.get(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    webhook_setting_id = '<Webhook Setting ID>'\n    endpoint = \"/v1/webhook_settings/#{webhook_setting_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Get.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    put:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: updateWebhookSetting
      tags:
      - WebhookSetting
      summary: Webhook設定 更新
      description: |
        IDで指定したWebhook設定を更新します。
      parameters:
      - name: id
        in: path
        description: Webhook設定のID
        schema:
          $ref: "#/components/schemas/WebhookSettingId_schema"
        required: true
      - in: header
        name: Tenant-Shop-Id
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を更新します。\n"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookSetting.Updating.Request"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSetting.Updating.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X PUT \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n    \"signature\": \"WEBHOOK_FROM_FINCODE\"\n}' \\\n'https://api.test.fincode.jp/v1/webhook_settings/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const webhookSettingId = \"<Webhook Setting ID>\";\n\n    try {\n        // リクエストの送信\n        const webhookSetting = await fincode.webhookSettings.update(\n            webhookSettingId,\n            {\n                url: \"https://your-service.example.com/v2/webhook-receiver\",\n            }\n        );\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"bytes\"\n\\t\"encoding/json\"\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\twebhookSettingID := \"<Webhook Setting ID>\"\n\n\\tbody := UpdatingWebhookSettingRequest{\n\\t\\tURL: stringPointer(\"https://your-service.example.com/v2/webhook-receiver\"),\n\\t}\n\n\\tmarshalledBody, _ := json.Marshal(body)\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"PUT\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/webhook_settings/%s\", webhookSettingID),\n\\t\\tbytes.NewBuffer(marshalledBody),\n\\t)\n\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\\treq.Header.Set(\"Content-Type\", \"application/json\")\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n\n}\n\ntype UpdatingWebhookSettingRequest struct {\n\\tURL       *string `json:\"url\"`\n\\tEvent     *string `json:\"event\"`\n\\tSignature *string `json:\"signature\"`\n}\n\nfunc stringPointer(s string) *string {\n\\treturn &s\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$webhookSettingId = '<Webhook Setting ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/webhook_settings/{$webhookSettingId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$data = json_encode([\n    \"url\" => \"https://your-service.example.com/v2/webhook-receiver\",\n]);\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($session, CURLOPT_POSTFIELDS, $data);\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nwebhook_setting_id = '<Webhook Setting ID>'\n\nurl = f'https://api.test.fincode.jp/v1/webhook_settings/{webhook_setting_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n    'Content-Type': 'application/json'\n}\n\ndata = {\n    \"signature\": \"WEBHOOK_FROM_FINCODE\"\n}\n\n# HTTP POSTリクエストの送信\ntry:\n    response = requests.put(url, headers=headers, json=data)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # 成功した場合の処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\nrequire 'json'\n\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    webhook_setting_id = '<Webhook Setting ID>'\n    endpoint = \"/v1/webhook_settings/#{webhook_setting_id}\"\n    \n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    data = {\n        signature: \"WEBHOOK_FROM_FINCODE\"\n    }\n\n    # リクエストの作成\n    request = Net::HTTP::Put.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n    request['Content-Type'] = 'application/json'\n\n    request.body = data.to_json\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
    delete:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: deleteWebhookSetting
      tags:
      - WebhookSetting
      summary: Webhook設定 削除
      description: |
        IDで指定したWebhook設定を削除します。
      parameters:
      - name: id
        in: path
        description: Webhook設定のID
        schema:
          $ref: "#/components/schemas/WebhookSettingId_schema"
        required: true
      - name: Tenant-Shop-Id
        in: header
        required: false
        schema:
          $ref: "#/components/schemas/schema"
        description: "<span class=\"smallText color--red-400\">※ プラットフォームのメインショップのみ指定可</span>\\\nテナントショップID。\\\nこのテナントショップに紐づくWebhook設定のうち、指定したIDのWebhook設定を削除します。\n"
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSetting.Deleting.Response"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FincodeAPIError.Response"
      x-code-samples:
      - lang: curl
        label: cURL
        source: "curl \\\n    -X DELETE \\\n    -H \"Authorization:Bearer <Secret API Key>\" \\\n'https://api.test.fincode.jp/v1/webhook_settings/{id}'\n"
      - lang: node
        label: Node.js
        source: "import { createFincode } from \"@fincode/node\";\n\nconst API_KEY = \"<Secret API Key>\";\n\n(async () => {\n    const fincode = createFincode({ apiKey: API_KEY, isLiveMode: false });\n\n    const webhookSettingId = \"<Webhook Setting ID>\";\n\n    try {\n        // リクエストの送信\n        const result = await fincode.webhookSettings.delete(webhookSettingId);\n    } catch (e) {\n        // エラーの処理\n    }\n})();\n"
      - lang: go
        label: Go
        source: "package main\n\nimport (\n\\t\"fmt\"\n\\t\"log\"\n\\t\"net/http\"\n)\n\nfunc main() {\n\n\\tapiKey := \"<Secret API Key>\"\n\n\\twebhookSettingID := \"<Webhook Setting ID>\"\n\n\\t// リクエストの作成\n\\treq, _ := http.NewRequest(\n\\t\\t\"DELETE\",\n\\t\\tfmt.Sprintf(\"https://api.test.fincode.jp/v1/webhook_settings/%s\", webhookSettingID),\n\\t\\tnil,\n\\t)\n\\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\n\\t// リクエストの送信\n\\tclient := &http.Client{}\n\\tres, err := client.Do(req)\n\\tif err != nil {\n\\t\\tlog.Fatal(err)\n\\t}\n\\tdefer res.Body.Close()\n}\n"
      - lang: php
        label: PHP
        source: "<?php\n\n$apiKey = '<Secret API Key>';\n\n$webhookSettingId = '<Webhook Setting ID>';\n\n$baseUrl = \"https://api.test.fincode.jp\";\n$endpoint = \"/v1/webhook_settings/{$webhookSettingId}\";\n$headers = [\n    \"Authorization: Bearer \" . $apiKey,\n];\n\n$session = curl_init();\ncurl_setopt($session, CURLOPT_URL, $baseUrl . $endpoint);\ncurl_setopt($session, CURLOPT_HTTPHEADER, $headers);\ncurl_setopt($session, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($session, CURLOPT_RETURNTRANSFER, true);\n// curl_setopt($session, CURLOPT_SSL_VERIFYPEER, );\n// curl_setopt($session, CURLOPT_SSL_VERIFYHOST, );\n\n$response = curl_exec($session);\n\nif ($response === false) {\n    # エラー処理\n    echo \"cURL Error: \" . curl_error($session);\n} else {\n    # APIからのデータを処理\n    var_dump($response);\n}\n\ncurl_close($session);\n"
      - lang: python
        label: Python 3
        source: "import requests\n\napi_key = '<Secret API Key>'\n\nwebhook_setting_id = '<Webhook Setting ID>'\n\nurl = f'https://api.test.fincode.jp/v1/webhook_settings/{webhook_setting_id}'\n\n# ヘッダーを設定\nheaders = {\n    'Authorization': f'Bearer {api_key}',\n}\n\ntry:\n    response = requests.delete(url, headers=headers)\n\n    # レスポンスの処理\n    if response.status_code == 200:\n        # APIからのデータを処理\n        print(f\"Success: {response.json()}\")\n    else:\n        # エラーの処理\n        print(f\"Error: {response.json()}\")\nexcept requests.RequestException as e:\n    # 通信エラーの処理\n    print(f\"Request error: {e}\")\n"
      - lang: ruby
        label: Ruby
        source: "require 'net/http'\nrequire 'uri'\n\nAPI_KEY = '<Secret API Key>'\nBASE_URL = 'https://api.test.fincode.jp'\n\ndef main\n    webhook_setting_id = '<Webhook Setting ID>'\n    endpoint = \"/v1/webhook_settings/#{webhook_setting_id}\"\n\n    uri = URI.parse(BASE_URL + endpoint)\n\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.use_ssl = true\n\n    # リクエストの作成\n    request = Net::HTTP::Delete.new(uri.request_uri)\n    request['Authorization'] = \"Bearer #{API_KEY}\"\n\n    # リクエストの送信\n    response = http.request(request)\n\n    case response\n    when Net::HTTPSuccess\n        puts 'SUCCESS'\n    else\n        puts 'ERROR'\n    end\n\n    # レスポンスの表示\n    puts response.body\nend\n\nmain\n"
  /your-endpoint-on-card-payment:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfCardPayment
      tags:
      - Webhook
      summary: カード決済
      description: |
        カード決済に関するイベント（`payments.card.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Payment.Card"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-applepay-payment:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfApplePayPayment
      tags:
      - Webhook
      summary: Apple Pay
      description: |
        Apple Payによる決済に関するイベント（`payments.applepay.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Payment.ApplePay"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-konbini-payment:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfKonbiniPayment
      tags:
      - Webhook
      summary: コンビニ決済
      description: |
        コンビニ決済に関するイベント（`payments.konbini.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Payment.Konbini"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-paypay-payment:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfPayPayPayment
      tags:
      - Webhook
      summary: PayPay
      description: |
        PayPayによる決済に関するイベント（`payments.paypay.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Payment.PayPay"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-directdebit-payment:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfDirectDebitPayment
      tags:
      - Webhook
      summary: 口座振替
      description: |
        口座振替に関するイベント（`payments.directdebit.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Payment.DirectDebit"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-customer-payment_method:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfCustomerPaymentMethod
      tags:
      - Webhook
      summary: 決済手段
      description: |
        顧客の決済手段に関するイベント（`customers.payment_methods.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.CustomerPaymentMethod"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-card:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfCard
      tags:
      - Webhook
      summary: カード
      description: |
        カードに関するイベント（`card.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Card"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-card-subscription:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfCardSubscription
      tags:
      - Webhook
      summary: サブスクリプション（カード決済）
      description: |
        カード決済によるサブスクリプションに関するイベント（`subscription.card.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Subscription.Card"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-directdebit-subscription:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfDirectDebitSubscription
      tags:
      - Webhook
      summary: サブスクリプション（口座振替）
      description: |
        口座振替によるサブスクリプションに関するイベント（`subscription.directdebit.*`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Subscription.DirectDebit"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-card-recurring-batch:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfCardRecurringBatch
      tags:
      - Webhook
      summary: サブスクリプション課金（カード決済）
      description: |
        カード決済によるサブスクリプション課金のイベント（`recurring.card.batch`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.RecurringBatch.Card"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-directdebit-recurring-batch:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfDirectDebitRecurringBatch
      tags:
      - Webhook
      summary: サブスクリプション課金（口座振替）
      description: |
        口座振替によるサブスクリプション課金に関するイベント（`recurring.directdebit.batch`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.RecurringBatch.DirectDebit"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-card-payment-bulk-regist:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfRegisteringCardPaymentBulk
      tags:
      - Webhook
      summary: 一括決済（カード決済）
      description: |
        カード決済による一括決済 登録イベント（`payments.bulk.card.regist`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.PaymentBulk.Regist.Card"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-card-payment-bulk-batch:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfCardPaymentBulkBatch
      tags:
      - Webhook
      summary: 一括決済課金（カード決済）
      description: |
        カード決済による一括決済 課金イベント（`payments.bulk.card.batch`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.PaymentBulk.Batch.Card"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
  /your-endpoint-on-contract:
    post:
      security:
      - Secret-Bearer-Auth: []
      - Secret-Basic-Auth: []
      operationId: receiveWebhookOfContract
      tags:
      - Webhook
      summary: 決済手段 契約状況
      description: |
        決済手段 契約状況 更新イベント（`contracts.status_code.updated`）で通知されるリクエストのリクエストボディの仕様です。
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookEvent.Contract"
        required: true
      responses:
        "200":
          description: リクエストに成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        "400":
          description: |
            4xx系、5xx系または上記以外のレスポンスを返却した場合、fincodeはエラーと判断しWebhook通知のリトライを行います。
components:
  securitySchemes:
    Secret-Bearer-Auth:
      type: http
      scheme: bearer
      description: "このAPIはシークレットキーによる認証を必要とします。\\\nBearer認証を用いる場合、リクエストヘッダー `Authorization`に下記の形式でシークレットキーを指定します。\n```\n  Authorization: Bearer␣{APIキー}\n```\nシークレットキーはfincodeの管理画面から取得できます。\n"
    Secret-Basic-Auth:
      type: http
      scheme: basic
      description: "このAPIはシークレットキーによる認証を必要とします。\\\nBasic認証を用いる場合、リクエストヘッダー `Authorization`に下記の形式でシークレットキーを指定します。\n``` JavaScript\n  Authorization: Basic␣{Base64でエンコードしたAPIキー}\n```\nシークレットキーはfincodeの管理画面から取得できます。\n"
    Public-Bearer-Auth:
      type: http
      scheme: bearer
      description: "このAPIはパブリックキーによる認証で利用できます。\\\nBearer認証を用いる場合、リクエストヘッダー `Authorization`に下記の形式でパブリックキーを指定します。\n```\n  Authorization: Bearer␣{APIキー}\n```\nパブリックキーはfincodeの管理画面から取得できます。\n"
    Public-Basic-Auth:
      type: http
      scheme: basic
      description: "このAPIはパブリックキーによる認証を必要とします。\\\nBasic認証を用いる場合、リクエストヘッダー `Authorization`に下記の形式でパブリックキーを指定します。\n``` JavaScript\n  Authorization: Basic␣{Base64でエンコードしたAPIキー}\n```\nパブリックキーはfincodeの管理画面から取得できます。\n"
    Both-Bearer-Auth:
      type: http
      scheme: bearer
      description: "このAPIはシークレットキーまたはパブリックキーによる認証を必要とします。\\\nBearer認証を用いる場合、リクエストヘッダー `Authorization`に下記の形式でシークレットキーまたはパブリックキーを指定します。\n```\n  Authorization: Bearer␣{APIキー}\n```\nシークレットキーまたはパブリックキーはfincodeの管理画面から取得できます。\n"
    Both-Basic-Auth:
      type: http
      scheme: basic
      description: "このAPIはシークレットキーまたはパブリックキーによる認証を必要とします。\\\nBasic認証を用いる場合、リクエストヘッダー `Authorization`に下記の形式でシークレットキーまたはパブリックキーを指定します。\n``` JavaScript\n  Authorization: Basic␣{Base64でエンコードしたAPIキー}\n```\nシークレットキーまたはパブリックキーはfincodeの管理画面から取得できます。\n"
  schemas:
    Pagination.QueryParams:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          nullable: true
          description: ページ番号
        limit:
          type: integer
          nullable: true
          minimum: 10
          maximum: 100
          description: 1回で取得するデータの最大件数
        count_only:
          type: boolean
          nullable: true
          description: "総件数のみ取得するか。\\\n`true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。\n"
      x-common-properties:
        sort:
          type: string
          example: updated␣desc,created␣asc
    sort:
      type: string
      example: updated␣desc,created␣asc
    Customer.ListRetrieving.QueryParams:
      type: object
      properties:
        id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 60
          example: c_**********************
          description: |
            顧客ID
        name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 384
          example: Jane Doe
          description: |
            顧客名
        email:
          type: string
          nullable: true
          minLength: 1
          maxLength: 254
          example: jane@example.com
          description: |
            顧客のメールアドレス
        created_from:
          type: string
          nullable: true
          example: 2022/05/16
          description: "作成日の範囲指定 開始日\\\nこの日付以降に作成された顧客情報を検索できます。\\\n形式：`yyyy/MM/dd`\n"
        created_to:
          type: string
          nullable: true
          example: 2022/05/16
          description: "作成日の範囲指定 終了日\\\nこの日付以前に作成された顧客情報を検索できます。\\\n形式：`yyyy/MM/dd`\n"
        sort:
          $ref: "#/components/schemas/sort"
    schema:
      type: string
      example: s_***********
    _ListResponse:
      type: object
      properties:
        total_count:
          type: integer
          example: 100
          description: 総件数
        last_page:
          type: integer
          example: 20
          description: 最後のページのページ数
        current_page:
          type: integer
          example: 3
          description: 現在のページのページ数
        limit:
          type: integer
          example: 5
          description: 1ページの最大件数
        link_next:
          type: string
          example: /v1/{resource}?limit=5&page=4
          nullable: true
          description: 次のページのコンテンツを取得するためのURL
        link_previous:
          type: string
          example: /v1/{resource}?limit=5&page=2
          nullable: true
          description: 前のページのコンテンツを取得するためのURL
    created:
      type: string
      example: 2022/05/16 23:59:59.999
      description: "作成日\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    updated:
      type: string
      nullable: true
      example: 2022/05/16 23:59:59.999
      description: "更新日\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    Customer:
      type: object
      properties:
        id:
          type: string
          example: c_**********************
          minLength: 1
          maxLength: 60
          description: |
            顧客ID
        name:
          type: string
          minLength: 1
          maxLength: 384
          nullable: true
          example: John Doe
          description: |
            顧客の名前
        email:
          type: string
          minLength: 1
          maxLength: 254
          nullable: true
          example: john@example.com
          description: "顧客のメールアドレス\\\n形式： RFC5322\n"
        phone_cc:
          type: string
          minLength: 1
          maxLength: 3
          nullable: true
          example: "81"
          description: "顧客の電話番号の国コード\\\n形式： ITU-T E.164\n"
        phone_no:
          type: string
          minLength: 1
          maxLength: 15
          nullable: true
          example: "09012345678"
          description: |
            顧客の電話番号
        addr_country:
          type: string
          minLength: 1
          maxLength: 3
          nullable: true
          example: "392"
          description: "顧客の住所の国コード\\\n形式： ISO 3166-1 numeric\n"
        addr_state:
          type: string
          minLength: 1
          maxLength: 3
          nullable: true
          example: "13"
          description: "顧客の住所の州コードまたは都道府県コード\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
        addr_city:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: 渋谷区
          description: |
            顧客の住所の都市名
        addr_line_1:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: 道玄坂1-14-6
          description: |
            顧客の住所の番地・区画
        addr_line_2:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: ヒューマックス渋谷ビル 7F
          description: |
            顧客の住所の建物名・部屋番号
        addr_line_3:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: GMOイプシロン株式会社
          description: |
            顧客の住所 その他
        addr_post_code:
          type: string
          minLength: 1
          maxLength: 16
          nullable: true
          example: 150-0043
          description: |
            顧客の住所の郵便番号
        card_registration:
          type: string
          minLength: 1
          maxLength: 1
          nullable: true
          enum:
          - "0"
          - "1"
          example: "1"
          description: "決済手段（カード）登録状況\n\n- `0`: 未登録\n- `1`: 1件以上のカードが登録済み\n"
        directdebit_registration:
          type: string
          minLength: 1
          maxLength: 1
          nullable: true
          enum:
          - "0"
          - "1"
          example: "1"
          description: "決済手段（口座振替）登録状況\n\n- `0`: 未登録\n- `1`: 1件以上の振替用口座が登録済み\n"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    Customer.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Customer"
    Customer.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/Customer.list"
    FincodeAPIError:
      type: object
      description: |
        1つのエラーを表現するオブジェクト。
      properties:
        error_code:
          type: string
          minLength: 11
          maxLength: 11
          example: E**********
          description: "エラー内容を判定する場合はこの`error_code`の使用が推奨されます。\\\n[各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。\n"
        error_message:
          type: string
          description: "エラーの内容を表現するメッセージです。\\\nこのエラーメッセージは予告なく変更されるため、エラー内容を判定する場合はこの値ではなく`error_code`の使用が推奨されます。\n"
    FincodeAPIError.Response:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FincodeAPIError"
    id:
      type: string
      example: c_**********************
      minLength: 1
      maxLength: 60
      description: |
        顧客ID
    name:
      type: string
      minLength: 1
      maxLength: 384
      nullable: true
      example: John Doe
      description: |
        顧客の名前
    email:
      type: string
      minLength: 1
      maxLength: 254
      nullable: true
      example: john@example.com
      description: "顧客のメールアドレス\\\n形式： RFC5322\n"
    phone_cc:
      type: string
      minLength: 1
      maxLength: 3
      nullable: true
      example: "81"
      description: "顧客の電話番号の国コード\\\n形式： ITU-T E.164\n"
    phone_no:
      type: string
      minLength: 1
      maxLength: 15
      nullable: true
      example: "09012345678"
      description: |
        顧客の電話番号
    addr_country:
      type: string
      minLength: 1
      maxLength: 3
      nullable: true
      example: "392"
      description: "顧客の住所の国コード\\\n形式： ISO 3166-1 numeric\n"
    addr_state:
      type: string
      minLength: 1
      maxLength: 3
      nullable: true
      example: "13"
      description: "顧客の住所の州コードまたは都道府県コード\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
    addr_city:
      type: string
      minLength: 1
      maxLength: 50
      nullable: true
      example: 渋谷区
      description: |
        顧客の住所の都市名
    addr_line_1:
      type: string
      minLength: 1
      maxLength: 50
      nullable: true
      example: 道玄坂1-14-6
      description: |
        顧客の住所の番地・区画
    addr_line_2:
      type: string
      minLength: 1
      maxLength: 50
      nullable: true
      example: ヒューマックス渋谷ビル 7F
      description: |
        顧客の住所の建物名・部屋番号
    addr_line_3:
      type: string
      minLength: 1
      maxLength: 50
      nullable: true
      example: GMOイプシロン株式会社
      description: |
        顧客の住所 その他
    addr_post_code:
      type: string
      minLength: 1
      maxLength: 16
      nullable: true
      example: 150-0043
      description: |
        顧客の住所の郵便番号
    Customer.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/id"
        name:
          $ref: "#/components/schemas/name"
        email:
          $ref: "#/components/schemas/email"
        phone_cc:
          $ref: "#/components/schemas/phone_cc"
        phone_no:
          $ref: "#/components/schemas/phone_no"
        addr_country:
          $ref: "#/components/schemas/addr_country"
        addr_state:
          $ref: "#/components/schemas/addr_state"
        addr_city:
          $ref: "#/components/schemas/addr_city"
        addr_line_1:
          $ref: "#/components/schemas/addr_line_1"
        addr_line_2:
          $ref: "#/components/schemas/addr_line_2"
        addr_line_3:
          $ref: "#/components/schemas/addr_line_3"
        addr_post_code:
          $ref: "#/components/schemas/addr_post_code"
    Customer.Creating.Response:
      $ref: "#/components/schemas/Customer"
    CustomerId_schema:
      type: string
      example: c_**********************
    Customer.Retrieving.Response:
      $ref: "#/components/schemas/Customer"
    Customer.Updating.Request:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/name"
        email:
          $ref: "#/components/schemas/email"
        phone_cc:
          $ref: "#/components/schemas/phone_cc"
        phone_no:
          $ref: "#/components/schemas/phone_no"
        addr_country:
          $ref: "#/components/schemas/addr_country"
        addr_state:
          $ref: "#/components/schemas/addr_state"
        addr_city:
          $ref: "#/components/schemas/addr_city"
        addr_line_1:
          $ref: "#/components/schemas/addr_line_1"
        addr_line_2:
          $ref: "#/components/schemas/addr_line_2"
        addr_line_3:
          $ref: "#/components/schemas/addr_line_3"
        addr_post_code:
          $ref: "#/components/schemas/addr_post_code"
    Customer.Updating.Response:
      $ref: "#/components/schemas/Customer"
    delete_flag:
      type: string
      enum:
      - "1"
      - "0"
      example: "1"
      description: 削除フラグ
    Customer.Deleting.Response:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/id"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
    card_no:
      type: string
      example: "************1234"
      maxLength: 16
      description: "マスク済みカード番号。\\\n<span class=\"smallText\">\n下4桁以外をマスクしたカード番号です。\\\nカード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\\\n</span>\n形式：`************1234`\n"
    expire:
      type: string
      pattern: "^\\d{2}\\d{2}$"
      minLength: 4
      maxLength: 4
      example: "4012"
      nullable: true
      description: "カード有効期限。\\\n形式：`YYMM`\n"
    holder_name:
      type: string
      example: TARO EPSILON
      minLength: 1
      maxLength: 50
      nullable: true
      description: |
        カード名義人名。
    CardType:
      type: string
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      minLength: 1
      maxLength: 1
      example: "1"
      description: "クレジットカード種別。\n\n- `0`: 不明（[テストカード](https://docs.fincode.jp/develop_support/test_resources)を含む）\n- `1`: デビットカード\n- `2`: プリペイドカード\n- `3`: クレジットカード\n"
    CardBrand:
      type: string
      maxLength: 50
      enum:
      - VISA
      - MASTER
      - JCB
      - AMEX
      - DINERS
      - DISCOVER
      - ""
      description: "カードブランドを表します。\n\n- `VISA`: VISA\n- `MASTER`: Mastercard\n- `JCB`: JCB\n- `AMEX`: American Express\n- `DINERS`: Diners Club\n- `DISCOVER`: Discover\n- `\"\"`（空文字列） : 判定不能\n"
    card_no_hash:
      type: string
      example: abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01
      minLength: 1
      maxLength: 64
      description: "カード番号をもとに生成されたハッシュ値。\\\n<span class=\"smallText\">\nおなじカード番号に対しては常に同じ値が返されます。\\\nカード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\n</span>\n"
    Card:
      type: object
      properties:
        id:
          type: string
          example: cs_**********************
          minLength: 25
          maxLength: 25
          description: |
            カードID
        customer_id:
          type: string
          example: c_**********************
          minLength: 1
          maxLength: 60
          description: "顧客ID\\\nこのカードが紐づく顧客のID\n"
        default_flag:
          type: string
          enum:
          - "0"
          - "1"
          example: "0"
          description: "デフォルトフラグ。\\\nこのカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\\\n顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）\n\n- `0`: デフォルトカードではない\n- `1`: デフォルトカード\n"
        card_no:
          $ref: "#/components/schemas/card_no"
        expire:
          $ref: "#/components/schemas/expire"
        holder_name:
          $ref: "#/components/schemas/holder_name"
        type:
          $ref: "#/components/schemas/CardType"
          nullable: true
        brand:
          $ref: "#/components/schemas/CardBrand"
          nullable: true
        card_no_hash:
          $ref: "#/components/schemas/card_no_hash"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
      x-req-properties:
        token:
          type: string
          minLength: 1
          maxLength: 512
          example: "34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
          nullable: true
          description: "カードトークン\\\n\\\nfincode JSの`tokens`メソッドで取得したトークンを指定します。\\\nJavaScriptの利用については、[JavaScriptリファレンス](https://docs.fincode.jp/js)をご参照ください。\n"
    Card.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Card"
    CustomerCard.ListRetrieving.Response:
      $ref: "#/components/schemas/Card.list"
    token:
      type: string
      minLength: 1
      maxLength: 512
      example: "34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
      description: "カードトークン\\\n\\\nfincode JSの`tokens`メソッドで取得したトークンを指定します。\\\nJavaScriptの利用については、[JavaScriptリファレンス](https://docs.fincode.jp/js)をご参照ください。\n"
    default_flag:
      type: string
      enum:
      - "0"
      - "1"
      example: "0"
      description: "デフォルトフラグ。\\\nこのカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\\\n顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）\n\n- `0`: デフォルトカードではない\n- `1`: デフォルトカード\n"
    CustomerCard.Creating.Request:
      type: object
      properties:
        token:
          $ref: "#/components/schemas/token"
        default_flag:
          $ref: "#/components/schemas/default_flag"
      required:
      - token
      - default_flag
    CustomerCard.Creating.Response:
      $ref: "#/components/schemas/Card"
    CardId_schema:
      type: string
      example: cs_**********************
    CustomerCard.Retrieving.Response:
      $ref: "#/components/schemas/Card"
    x-req-properties-token:
      type: string
      minLength: 1
      maxLength: 512
      example: "34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
      nullable: true
      description: "カードトークン\\\n\\\nfincode JSの`tokens`メソッドで取得したトークンを指定します。\\\nJavaScriptの利用については、[JavaScriptリファレンス](https://docs.fincode.jp/js)をご参照ください。\n"
    CustomerCard.Updating.Request:
      type: object
      properties:
        token:
          $ref: "#/components/schemas/x-req-properties-token"
        default_flag:
          $ref: "#/components/schemas/default_flag"
        holder_name:
          $ref: "#/components/schemas/holder_name"
        expire:
          $ref: "#/components/schemas/expire"
    CustomerCard.Updating.Response:
      $ref: "#/components/schemas/Card"
    properties-id:
      type: string
      example: cs_**********************
      minLength: 25
      maxLength: 25
      description: |
        カードID
    CustomerCard.Deleting.Response:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/properties-id"
        customer_id:
          $ref: "#/components/schemas/id"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
    PaymentMethodPayType:
      type: string
      enum:
      - Card
      - Directdebit
      example: Card
      description: "決済種別（決済手段APIに対応しているもの）\n\n- `Card`: クレジットカード/デビットカード/プリペイドカード\n- `Directdebit`: 口座振替\n"
    CustomerPaymentMethod.ListRetrieving.QueryParams:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PaymentMethodPayType"
      required:
      - pay_type
    PaymentMethodStatus:
      type: string
      enum:
      - INACTIVATED
      - AWAITING_CUSTOMER_ACTION
      - ACTIVATED
      - FAILED
      example: ACTIVATED
      description: "決済手段のステータス\n\n- `INACTIVATED`: 有効化前<br /><span class=\"smallText\">まだこの決済手段は決済に使用できません。</span>\n- `AWAITING_CUSTOMER_ACTION`: 顧客のアクション待ち<br /><span class=\"smallText\">この決済手段は登録のための購入者の承認がされていない状態です。まだこの決済手段は決済に使用できません。</span>\n- `ACTIVATED`: 有効化済み<br /><span class=\"smallText\">この決済手段は決済に使用できます。</span>\n- `FAILED`: 失敗<br /><span class=\"smallText\">この決済手段は決済に使用できません。</span>\n"
    client_field_n:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore
      description: |
        加盟店自由項目
    process_date:
      type: string
      nullable: true
      example: 2022/05/16 23:59:59.999
      description: "処理日\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    tds_type:
      type: string
      enum:
      - "0"
      - "2"
      example: "2"
      minLength: 1
      maxLength: 1
      nullable: true
      description: "3Dセキュア認証を利用するか。\n\n- `0`: 3Dセキュア認証を利用しない（デフォルト）\n- `2`: 3Dセキュア2.0認証を利用する\n"
    tds2_type:
      type: string
      enum:
      - "2"
      - "3"
      example: "2"
      minLength: 1
      maxLength: 1
      nullable: true
      description: "3Dセキュア2.0非対応時の挙動設定\\\n購入者がこの決済に利用したカードが3Dセキュア2.0に非対応である場合の後続処理を設定します。\n\n- `2`: エラーをレスポンスし、処理を終了する。（デフォルト）\n- `3`: 3Dセキュア認証なしで処理を継続する。\n"
    Tds2Status:
      type: string
      maxLength: 15
      enum:
      - AUTHENTICATING
      - CHALLENGE
      - ACTIVATED
      - AUTHENTICATED
      description: "3Dセキュア2.0認証ステータス\n\n- `AUTHENTICATING`: 3Dセキュア認証処理中\n- `CHALLENGE`: 3Dセキュア認証が必要\n- `ACTIVATED`: 有効化済み\n- `AUTHENTICATED`: 3Dセキュア認証済み\n"
    td_tenant_name:
      type: string
      example: s_***********-ab123
      maxLength: 25
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n加盟店名。\\\n3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\\n未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\\n\\\n形式：`{{ショップID}}-{{英数字からなる固定値}}`\n"
    access_id:
      type: string
      nullable: false
      minLength: 30
      maxLength: 30
      example: a_**********************
      description: |
        取引ID
    DirectDebitApplicationType:
      type: string
      enum:
      - PAPER
      - ONLINE
      example: PAPER
      maxLength: 6
      nullable: true
      description: "この振替用口座を登録した際の申込方法\n\n- `PAPER`: 依頼書登録\n- `ONLINE`: Web登録\n"
    DirectDebitLastResultCode:
      type: string
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "8"
      - "9"
      - E
      - "N"
      example: "0"
      minLength: 1
      maxLength: 1
      nullable: true
      description: "最新の振替結果コード。\\\nこの決済手段で最後に行われた振替の結果コードです。\n\n- `0`: 振替成功\n- `1`: 残高不足による失敗\n- `2`: 預金取引なしによる失敗<br /><span class=\"smallText\">存在しない口座に対して請求した場合などに発生します。</span>\n- `3`: 購入者事由による失敗\n- `4`: 依頼書未着・不備による失敗<br /><span class=\"smallText\">口座振替依頼書が金融機関側で登録されていない場合に発生します。</span>\n- `8`: ショップ事由による失敗<br /><span class=\"smallText\">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>\n- `9`: その他の失敗<br /><span class=\"smallText\">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>\n- `E`: データエラーに起因する失敗<br /><span class=\"smallText\">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>\n- `N`: 振替結果未着<br /><span class=\"smallText\">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>\n\n[お問い合わせはこちらへ](https://dashboard.fincode.jp/contact?_gl=1*vssgo5*_ga*MTU2NDM2NzY1MS4xNjk5MzI0Nzk4*_ga_8Y6Q0J470G*MTcwNzg4MzY4MS4zMTkuMS4xNzA3ODg5NTYwLjYwLjAuMA..&_ga=2.240544707.1302727582.1707783144-1564367651.1699324798)\n"
    PaymentMethod:
      type: object
      properties:
        id:
          type: string
          example: pm_**********************
          minLength: 25
          maxLength: 25
          description: 決済手段ID
        pay_type:
          $ref: "#/components/schemas/PaymentMethodPayType"
        customer_id:
          type: string
          example: c_********************
          maxLength: 60
          description: |
            この決済手段が紐づく顧客のID
        status:
          $ref: "#/components/schemas/PaymentMethodStatus"
        redirect_url:
          type: string
          example: https://url.to/redirect/payer
          maxLength: 256
          nullable: true
          description: "リダイレクトURL。\\\n購入者にこのURLを提供することで、ステータスが`AWAITING_CUSTOMER_ACTION` の決済手段を有効化するためのアクションを購入者にとらせることができます。\n- 振替口座登録の場合： このURLにアクセスして振替口座登録の承認を行います。このURLには1度だけアクセスできます。\n- カード登録の場合： このURLにアクセスして3Dセキュア認証を行います。\n"
        redirect_url_accessed_flag:
          type: string
          enum:
          - "0"
          - "1"
          example: "1"
          nullable: true
          description: "リダイレクトURLアクセス済みフラグ\\\n購入者が`redirect_url`にアクセスしたことがあるかどうかを示すフラグです。\n\n- `0`: 未アクセス\n- `1`: 1回以上アクセス済み\n"
        return_url:
          type: string
          example: https://url.to/return/payer/success
          maxLength: 256
          nullable: true
          description: "加盟店戻りURL。（成功時）\\\n購入者がアクションを完了し、決済手段の登録に成功した際にリダイレクトされるURLです。\\\nPOSTメソッドでリダイレクトがされます。\n"
        return_url_on_failure:
          type: string
          example: https://url.to/return/payer/failure
          maxLength: 256
          nullable: true
          description: "加盟店戻りURL。（失敗時）\\\n購入者がアクションを完了し、決済手段の登録に失敗した際にリダイレクトされるURLです。\\\nPOSTメソッドでリダイレクトがされます。\n"
        default_flag:
          type: string
          enum:
          - "0"
          - "1"
          minLength: 1
          maxLength: 1
          example: "1"
          description: "デフォルトフラグ。\\\nこの決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\\\n顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）\n\n- `0`: デフォルト決済手段ではない\n- `1`: デフォルト決済手段\n"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
        process_date:
          $ref: "#/components/schemas/process_date"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
        card:
          type: object
          nullable: true
          description: |
            <span class="smallText">この決済手段がカードを表す（`pay_type = Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span>
          properties:
            card_no:
              type: string
              example: "************1234"
              maxLength: 16
              description: "マスク済みカード番号。\\\n<span class=\"smallText\">\n下4桁以外をマスクしたカード番号です。\\\nカード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\\\n</span>\n形式：`************1234`\n"
            expire:
              type: string
              pattern: "^\\d{2}\\d{2}$"
              minLength: 4
              maxLength: 4
              example: "4012"
              nullable: true
              description: "カード有効期限。\\\n形式：`YYMM`\n"
            holder_name:
              type: string
              example: TARO EPSILON
              minLength: 1
              maxLength: 50
              nullable: true
              description: |
                カード名義人名。
            type:
              $ref: "#/components/schemas/CardType"
              nullable: true
            brand:
              $ref: "#/components/schemas/CardBrand"
              nullable: true
            card_no_hash:
              type: string
              example: abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01
              minLength: 1
              maxLength: 64
              description: "カード番号をもとに生成されたハッシュ値。\\\n<span class=\"smallText\">\nおなじカード番号に対しては常に同じ値が返されます。\\\nカード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\n</span>\n"
            tds_type:
              $ref: "#/components/schemas/tds_type"
            tds2_type:
              $ref: "#/components/schemas/tds2_type"
            tds2_status:
              $ref: "#/components/schemas/Tds2Status"
            merchant_name:
              $ref: "#/components/schemas/td_tenant_name"
            access_id:
              $ref: "#/components/schemas/access_id"
            acs:
              type: string
              example: "1"
              nullable: true
              minLength: 1
              maxLength: 1
              description: |
                ACS呼出判定。
        directdebit:
          type: object
          nullable: true
          description: |
            <span class="smallText">この決済手段が振替用口座を表す（`pay_type = Directdebit`）とき、口座情報の詳細がこの`directdebit`オブジェクトに格納されます。</span>
          properties:
            application_type:
              $ref: "#/components/schemas/DirectDebitApplicationType"
            expected_billable_date:
              type: string
              example: 2022/05/16 23:59:59.999
              nullable: true
              description: "請求可能予定日。\\\n口座登録後、実際に請求依頼が可能となると予定される日時です。\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
            last_withdrawal_date:
              type: string
              example: 2022/05/16 23:59:59.999
              nullable: true
              description: "最終引落日。\\\n金融機関によってこの口座から実際に引き落とされた実績日のうち、最も新しい日時です。\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
            last_result_code:
              $ref: "#/components/schemas/DirectDebitLastResultCode"
            bank_type:
              type: string
              enum:
              - "0"
              - "1"
              minLength: 1
              maxLength: 1
              nullable: true
              example: "0"
              description: "金融機関種別。\n\n- `0`: ゆうちょ銀行以外の金融機関\n- `1`: ゆうちょ銀行\n"
            bank_code:
              type: string
              example: "0310"
              minLength: 4
              maxLength: 4
              nullable: true
              description: "金融機関コード。\\\n金融機関のコードです。\\\n例：`0310`\n"
            bank_name:
              type: string
              example: GMOあおぞらネット銀行
              minLength: 1
              maxLength: 45
              nullable: true
              description: |
                金融機関名
            branch_code:
              type: string
              example: "301"
              minLength: 3
              maxLength: 3
              nullable: true
              description: "支店コード。\\\n金融機関の支店コードです。\\\n例：`001`\n"
            branch_name:
              type: string
              example: うみ支店
              minLength: 1
              maxLength: 45
              description: |
                支店名
            account_type:
              type: string
              enum:
              - "0"
              - "1"
              minLength: 1
              maxLength: 1
              example: "1"
              nullable: true
              description: "口座種別。\n\n- `0`: 普通預金\n- `1`: 当座預金\n"
            account_number:
              type: string
              example: "1234567"
              nullable: true
              minLength: 1
              maxLength: 7
              description: |
                口座番号
            postal_account_number_1:
              type: string
              example: "12345"
              nullable: true
              minLength: 1
              maxLength: 5
              description: |
                ゆうちょ 預金記号
            postal_account_number_2:
              type: string
              example: "06789012"
              nullable: true
              minLength: 1
              maxLength: 8
              description: |
                ゆうちょ 預金番号
            account_name:
              type: string
              example: イプシロン　太郎
              nullable: true
              minLength: 1
              maxLength: 45
              description: |
                口座名義
            account_name_kana:
              type: string
              example: イプシロン　タロウ
              nullable: true
              minLength: 1
              maxLength: 45
              description: |
                口座名義（カナ）
            paper_application:
              type: object
              nullable: true
              description: |
                依頼書登録のパラメータ<br />
                <span class="smallText">
                ※ 依頼書登録により登録された口座の場合、この`paper_application`オブジェクトに依頼書からfincodeに転記した内容が含められます。
                </span>
              properties:
                preregistered_date:
                  type: string
                  example: 2022/05/16 23:59:59.999
                  nullable: true
                  description: "依頼書 仮登録日時。\\\n依頼書を仮登録した日時です。\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
                request_form_id:
                  type: string
                  example: "12345678901234567890"
                  minLength: 1
                  maxLength: 20
                  nullable: true
                  description: "依頼書ID。\\\n依頼書を管理画面から登録した際に登録者が指定した、依頼書を一意に識別するIDです。\n"
                paper_failure_description:
                  type: string
                  example: 依頼書の登録が○○○という理由で失敗しました。
                  nullable: true
                  minLength: 1
                  maxLength: 200
                  description: |
                    依頼書登録に失敗した理由。
      x-req-properties:
        card:
          type: object
          properties:
            token:
              type: string
              minLength: 1
              maxLength: 512
              example: "34567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
              description: "カードトークン\\\n\\\nfincode JSの`tokens`メソッドで取得したトークンを指定します。\\\nJavaScriptの利用については、[JavaScriptリファレンス](https://docs.fincode.jp/js)をご参照ください。\n"
        directdebit:
          type: object
          properties:
            paper_application:
              type: object
              description: |
                依頼書登録のパラメータ
              properties:
                postal_account_number_1:
                  type: string
                  example: "12345"
                  nullable: true
                  minLength: 1
                  maxLength: 5
                  description: |
                    ゆうちょ 預金記号
                postal_account_number_2:
                  type: string
                  example: "06789012"
                  nullable: true
                  minLength: 1
                  maxLength: 8
                  description: |
                    ゆうちょ 預金番号
                request_form_id:
                  type: string
                  example: "12345678901234567890"
                  minLength: 1
                  maxLength: 20
                  nullable: false
                  description: "依頼書ID。\\\n依頼書を管理画面から登録した際に登録者が指定した、依頼書を一意に識別するIDです。\\\n※プラットフォームショップの場合、プラットフォーム全体で一意である必要があります。\n"
    PaymentMethod.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethod"
    CustomerPaymentMethod.ListRetrieving.Response:
      $ref: "#/components/schemas/PaymentMethod.list"
    properties-default_flag:
      type: string
      enum:
      - "0"
      - "1"
      minLength: 1
      maxLength: 1
      example: "1"
      description: "デフォルトフラグ。\\\nこの決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\\\n顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）\n\n- `0`: デフォルト決済手段ではない\n- `1`: デフォルト決済手段\n"
    return_url:
      type: string
      example: https://url.to/return/payer/success
      maxLength: 256
      nullable: true
      description: "加盟店戻りURL。（成功時）\\\n購入者がアクションを完了し、決済手段の登録に成功した際にリダイレクトされるURLです。\\\nPOSTメソッドでリダイレクトがされます。\n"
    return_url_on_failure:
      type: string
      example: https://url.to/return/payer/failure
      maxLength: 256
      nullable: true
      description: "加盟店戻りURL。（失敗時）\\\n購入者がアクションを完了し、決済手段の登録に失敗した際にリダイレクトされるURLです。\\\nPOSTメソッドでリダイレクトがされます。\n"
    client_field_1:
      $ref: "#/components/schemas/client_field_n"
    client_field_2:
      $ref: "#/components/schemas/client_field_n"
    client_field_3:
      $ref: "#/components/schemas/client_field_n"
    tds2_ch_acc_change:
      type: string
      example: "20240101"
      minLength: 8
      maxLength: 8
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント 最終更新日\\\n形式：`YYYYMMDD`\n"
    tds2_ch_acc_date:
      type: string
      example: "20220101"
      minLength: 8
      maxLength: 8
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント 開設日\\\n形式：`YYYYMMDD`\n"
    tds2_ch_acc_pw_change:
      type: string
      example: "20230101"
      minLength: 8
      maxLength: 8
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント パスワード最終更新日\\\n形式：`YYYYMMDD`\n"
    tds2_nb_purchase_account:
      type: string
      example: "9999"
      minLength: 1
      maxLength: 4
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去6カ月間の購入回数\n"
    tds2_payment_acc_age:
      type: string
      example: "20231231"
      minLength: 8
      maxLength: 8
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード登録日。\\\n形式：`YYYYMMDD`\n"
    tds2_provision_attempts_day:
      type: string
      example: "999"
      minLength: 3
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去24時間のカード追加の試行回数\n"
    tds2_ship_address_usage:
      type: string
      example: "20230930"
      minLength: 8
      maxLength: 8
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n出荷先住所の最初の使用日。\\\n形式：`YYYYMMDD`\n"
    tds2_ship_name_ind:
      type: string
      enum:
      - "01"
      - "02"
      minLength: 2
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客名と出荷先名が一致しているか否か\\\nカード顧客の顧客名と登録に使用される配送先名の一致/不一致を設定\n\n- `01`: カード顧客名と出荷先名が一致\n- `02`: カード顧客名と出荷先名が不一致\n"
    tds2_suspicious_acc_activity:
      type: string
      enum:
      - "01"
      - "02"
      minLength: 2
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nアカウントの不審行為情報\\\nカード顧客で、不審な行動（過去の不正行為を含む）を加盟店様が発見したかどうかを設定\n\n- `01`: 不審な行動なし\n- `02`: 不審な行動あり\n"
    tds2_txn_activity_day:
      type: string
      example: "999"
      minLength: 3
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去24時間の取引回数\n"
    tds2_txn_activity_year:
      type: string
      example: "999"
      minLength: 3
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n前年の取引回数\n"
    tds2_three_ds_req_auth_data:
      type: string
      minLength: 1
      maxLength: 2048
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nログイン証跡\\\nログイン証跡を設定する場合、ログイン方法とログイン日時の設定が必要です。\n"
    tds2_three_ds_req_auth_method:
      type: string
      enum:
      - "01"
      - "02"
      - "03"
      - "04"
      - "05"
      - "06"
      minLength: 2
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nログイン方法\\\nログイン方法を設定する場合、ログイン証跡とログイン日時の設定が必要です。\n\n- `01`: 認証なし（ゲストとしてログイン）\n- `02`: 加盟店様自身の認証情報\n- `03`: SSO(シングルサインオン)\n- `04`: イシュアーの認証情報\n- `05`: サードパーティ認証\n- `06`: FIDO認証\n"
    tds2_addr_match:
      type: string
      enum:
      - "Y"
      - "N"
      example: "Y"
      minLength: 1
      maxLength: 1
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n請求先住所と配送先住所が一致しているか否か\n\n- `Y`: 住所は一致している\n- `N`: 住所は一致していない\n"
    tds2_bill_addr_country:
      type: string
      example: "392"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 国コード。\\\n形式：ISO 3166-1 numeric\n"
    tds2_bill_addr_state:
      type: string
      example: "13"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 州または都道府県コード。\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
    tds2_bill_addr_city:
      type: string
      example: 渋谷区
      minLength: 1
      maxLength: 50
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 都市名\n"
    tds2_bill_addr_line_1:
      type: string
      example: 道玄坂1-14-6
      minLength: 1
      maxLength: 100
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部1行目\\\n\\\n顧客の住所の番地・区画を指定してください。未指定の場合、顧客に登録された`addr_line_1`を設定します。\n\n- 都道府県や市区を含めることができます。\n- 保持している住所をパラメータの形式に分割できない場合は、桁数が収まるように`tds2_bill_addr_line_1` ~ `tds2_bill_addr_line_3`に住所を設定してください。\n- `tds2_bill_addr_line_2`と`tds2_bill_addr_line_3`を空にして、`tds2_bill_addr_line_1`に全ての住所を設定できます。\n"
    tds2_bill_addr_line_2:
      type: string
      example: ヒューマックス渋谷ビル
      minLength: 1
      maxLength: 100
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部2行目\\\n\\\n顧客の住所の建物名・部屋番号を指定してください。未指定の場合、顧客に登録された`addr_line_2`を設定します。\n"
    tds2_bill_addr_line_3:
      type: string
      example: 7F
      minLength: 1
      maxLength: 100
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部3行目\\\n\\\n顧客の住所のその他を指定してください。未指定の場合、顧客に登録された`addr_line_3`を設定します。\n"
    tds2_bill_addr_post_code:
      type: string
      example: 150-0043
      minLength: 1
      maxLength: 16
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 郵便番号\n"
    tds2_ship_addr_country:
      type: string
      example: "392"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 国コード。\\\n形式：ISO 3166-1 numeric\n"
    tds2_ship_addr_state:
      type: string
      example: "13"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 州または都道府県コード。\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
    tds2_ship_addr_city:
      type: string
      example: 渋谷区
      minLength: 1
      maxLength: 50
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 都市名\n"
    tds2_ship_addr_line_1:
      type: string
      example: 道玄坂1-14-6
      minLength: 1
      maxLength: 100
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部1行目\n"
    tds2_ship_addr_line_2:
      type: string
      example: ヒューマックス渋谷ビル
      minLength: 1
      maxLength: 100
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部2行目\n"
    tds2_ship_addr_line_3:
      type: string
      example: 7F
      minLength: 1
      maxLength: 100
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部3行目\n"
    tds2_ship_addr_post_code:
      type: string
      example: 150-0043
      minLength: 1
      maxLength: 16
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 郵便番号\n"
    tds2_ship_ind:
      type: string
      enum:
      - "01"
      - "02"
      - "03"
      - "04"
      - "05"
      - "06"
      - "07"
      example: "01"
      minLength: 2
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n取引商品の配送方法\n\n- `01`: カード顧客の請求先住所に配送\n- `02`: 加盟店が保持している確認済み住所（請求先住所でない）に配送\n- `03`: カード顧客の請求先住所と異なる住所に配送\n- `04`: 店舗への配送（店舗の住所は配送先住所で指定）\n- `05`: デジタル商品（オンラインサービス、電子ギフトカードおよび償還コードを含む）\n- `06`: 配送なし（旅行およびイベントのチケット）\n- `07`: その他（ゲーム、配送されないデジタルサービス、電子メディアの購読料など）\n"
    tds2_delivery_email_address:
      type: string
      example: email@example.com
      minLength: 1
      maxLength: 254
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客 メールアドレス\n"
    tds2_home_phone_cc:
      type: string
      example: "81"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の自宅電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_home_phone_no`の設定も必要です。\n"
    tds2_home_phone_no:
      type: string
      example: "312345678"
      minLength: 1
      maxLength: 15
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の自宅電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_home_phone_cc`の設定も必要です。\n"
    tds2_mobile_phone_cc:
      type: string
      example: "81"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の携帯電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_mobile_phone_no`の設定も必要です。\n"
    tds2_mobile_phone_no:
      type: string
      example: "9012345678"
      minLength: 1
      maxLength: 15
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の携帯電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_mobile_phone_cc`の設定も必要です。\n"
    tds2_work_phone_cc:
      type: string
      example: "81"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の勤務先電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_work_phone_no`の設定も必要です。\n"
    tds2_work_phone_no:
      type: string
      example: "312345678"
      minLength: 1
      maxLength: 15
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の勤務先電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_work_phone_cc`の設定も必要です。\n"
    tds2_delivery_timeframe:
      type: string
      enum:
      - "01"
      - "02"
      - "03"
      - "04"
      example: "01"
      minLength: 2
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品納品時間枠\n\n- `01`: 電子デリバリー\n- `02`: 当日出荷\n- `03`: 翌日出荷\n- `04`: 2日目以降の出荷\n"
    tds2_pre_order_date:
      type: string
      example: "20231231"
      minLength: 8
      maxLength: 8
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の発売予定日\\\n形式：`YYYYMMDD`\n"
    tds2_pre_order_purchase_ind:
      type: string
      enum:
      - "01"
      - "02"
      example: "01"
      minLength: 2
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の販売時期情報\n\n- `01`: 発売済み商品\n- `02`: 先行予約商品\n"
    tds2_reorder_items_ind:
      type: string
      enum:
      - "01"
      - "02"
      example: "01"
      minLength: 2
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の注文が初回か再注文か\n\n- `01`: 初回注文\n- `02`: 再注文\n"
    tds2_recurring_expiry:
      type: string
      example: "20231231"
      minLength: 8
      maxLength: 8
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ サブスクリプションなど継続課金型のビジネスモデルのみ\\\n継続課金の終了日\\\n形式：`YYYYMMDD`\n"
    tds2_recurring_frequency:
      type: string
      example: "99"
      minLength: 1
      maxLength: 4
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ サブスクリプションなど継続課金型のビジネスモデルのみ\\\n継続課金の課金間隔の日数（最小）\n"
    tds2_gift_card_amount:
      type: string
      example: "999999"
      minLength: 1
      maxLength: 15
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\nプリペイドカードまたはギフトカードの総購入金額\n"
    tds2_gift_card_count:
      type: string
      example: "99"
      minLength: 1
      maxLength: 2
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\n購入したプリペイドカードまたはギフトカードの総数\n"
    tds2_gift_card_curr:
      type: string
      example: "392"
      minLength: 1
      maxLength: 3
      nullable: true
      description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\nプリペイドカードまたはギフトカードの通貨コード。\\\n形式：ISO 4217 numeric\\\n\\\n以下の通貨コードは利用できません。（債券市場単位等）\\\n`955`, `956`, `957`, `958`, `959`, `960`, `961`, `962`, `963`, `964`, `999`\n"
    bank_code:
      type: string
      example: "0310"
      minLength: 4
      maxLength: 4
      nullable: true
      description: "金融機関コード。\\\n金融機関のコードです。\\\n例：`0310`\n"
    branch_code:
      type: string
      example: "301"
      minLength: 3
      maxLength: 3
      nullable: true
      description: "支店コード。\\\n金融機関の支店コードです。\\\n例：`001`\n"
    account_type:
      type: string
      enum:
      - "0"
      - "1"
      minLength: 1
      maxLength: 1
      example: "1"
      nullable: true
      description: "口座種別。\n\n- `0`: 普通預金\n- `1`: 当座預金\n"
    account_number:
      type: string
      example: "1234567"
      nullable: true
      minLength: 1
      maxLength: 7
      description: |
        口座番号
    account_name:
      type: string
      example: イプシロン　太郎
      nullable: true
      minLength: 1
      maxLength: 45
      description: |
        口座名義
    account_name_kana:
      type: string
      example: イプシロン　タロウ
      nullable: true
      minLength: 1
      maxLength: 45
      description: |
        口座名義（カナ）
    paper_application:
      type: object
      description: |
        依頼書登録のパラメータ
      properties:
        postal_account_number_1:
          type: string
          example: "12345"
          nullable: true
          minLength: 1
          maxLength: 5
          description: |
            ゆうちょ 預金記号
        postal_account_number_2:
          type: string
          example: "06789012"
          nullable: true
          minLength: 1
          maxLength: 8
          description: |
            ゆうちょ 預金番号
        request_form_id:
          type: string
          example: "12345678901234567890"
          minLength: 1
          maxLength: 20
          nullable: false
          description: "依頼書ID。\\\n依頼書を管理画面から登録した際に登録者が指定した、依頼書を一意に識別するIDです。\\\n※プラットフォームショップの場合、プラットフォーム全体で一意である必要があります。\n"
    CustomerPaymentMethod.Creating.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PaymentMethodPayType"
        default_flag:
          $ref: "#/components/schemas/properties-default_flag"
        return_url:
          $ref: "#/components/schemas/return_url"
        return_url_on_failure:
          $ref: "#/components/schemas/return_url_on_failure"
        client_field_1:
          $ref: "#/components/schemas/client_field_1"
        client_field_2:
          $ref: "#/components/schemas/client_field_2"
        client_field_3:
          $ref: "#/components/schemas/client_field_3"
        card:
          type: object
          nullable: true
          description: |
            <span class="smallText">※ `pay_type = "Card"`（この決済手段登録がカード情報登録である）のとき必須</span>
          properties:
            token:
              $ref: "#/components/schemas/token"
            tds_type:
              $ref: "#/components/schemas/tds_type"
            tds2_type:
              $ref: "#/components/schemas/tds2_type"
            td_tenant_name:
              $ref: "#/components/schemas/td_tenant_name"
            tds2_ch_acc_change:
              $ref: "#/components/schemas/tds2_ch_acc_change"
            tds2_ch_acc_date:
              $ref: "#/components/schemas/tds2_ch_acc_date"
            tds2_ch_acc_pw_change:
              $ref: "#/components/schemas/tds2_ch_acc_pw_change"
            tds2_nb_purchase_account:
              $ref: "#/components/schemas/tds2_nb_purchase_account"
            tds2_payment_acc_age:
              $ref: "#/components/schemas/tds2_payment_acc_age"
            tds2_provision_attempts_day:
              $ref: "#/components/schemas/tds2_provision_attempts_day"
            tds2_ship_address_usage:
              $ref: "#/components/schemas/tds2_ship_address_usage"
            tds2_ship_name_ind:
              $ref: "#/components/schemas/tds2_ship_name_ind"
            tds2_suspicious_acc_activity:
              $ref: "#/components/schemas/tds2_suspicious_acc_activity"
            tds2_txn_activity_day:
              $ref: "#/components/schemas/tds2_txn_activity_day"
            tds2_txn_activity_year:
              $ref: "#/components/schemas/tds2_txn_activity_year"
            tds2_three_ds_req_auth_data:
              $ref: "#/components/schemas/tds2_three_ds_req_auth_data"
            tds2_three_ds_req_auth_method:
              $ref: "#/components/schemas/tds2_three_ds_req_auth_method"
            tds2_addr_match:
              $ref: "#/components/schemas/tds2_addr_match"
            tds2_bill_addr_country:
              $ref: "#/components/schemas/tds2_bill_addr_country"
            tds2_bill_addr_state:
              $ref: "#/components/schemas/tds2_bill_addr_state"
            tds2_bill_addr_city:
              $ref: "#/components/schemas/tds2_bill_addr_city"
            tds2_bill_addr_line_1:
              $ref: "#/components/schemas/tds2_bill_addr_line_1"
            tds2_bill_addr_line_2:
              $ref: "#/components/schemas/tds2_bill_addr_line_2"
            tds2_bill_addr_line_3:
              $ref: "#/components/schemas/tds2_bill_addr_line_3"
            tds2_bill_addr_post_code:
              $ref: "#/components/schemas/tds2_bill_addr_post_code"
            tds2_ship_addr_country:
              $ref: "#/components/schemas/tds2_ship_addr_country"
            tds2_ship_addr_state:
              $ref: "#/components/schemas/tds2_ship_addr_state"
            tds2_ship_addr_city:
              $ref: "#/components/schemas/tds2_ship_addr_city"
            tds2_ship_addr_line_1:
              $ref: "#/components/schemas/tds2_ship_addr_line_1"
            tds2_ship_addr_line_2:
              $ref: "#/components/schemas/tds2_ship_addr_line_2"
            tds2_ship_addr_line_3:
              $ref: "#/components/schemas/tds2_ship_addr_line_3"
            tds2_ship_addr_post_code:
              $ref: "#/components/schemas/tds2_ship_addr_post_code"
            tds2_ship_ind:
              $ref: "#/components/schemas/tds2_ship_ind"
            tds2_delivery_email_address:
              $ref: "#/components/schemas/tds2_delivery_email_address"
            tds2_home_phone_cc:
              $ref: "#/components/schemas/tds2_home_phone_cc"
            tds2_home_phone_no:
              $ref: "#/components/schemas/tds2_home_phone_no"
            tds2_mobile_phone_cc:
              $ref: "#/components/schemas/tds2_mobile_phone_cc"
            tds2_mobile_phone_no:
              $ref: "#/components/schemas/tds2_mobile_phone_no"
            tds2_work_phone_cc:
              $ref: "#/components/schemas/tds2_work_phone_cc"
            tds2_work_phone_no:
              $ref: "#/components/schemas/tds2_work_phone_no"
            tds2_delivery_timeframe:
              $ref: "#/components/schemas/tds2_delivery_timeframe"
            tds2_pre_order_date:
              $ref: "#/components/schemas/tds2_pre_order_date"
            tds2_pre_order_purchase_ind:
              $ref: "#/components/schemas/tds2_pre_order_purchase_ind"
            tds2_reorder_items_ind:
              $ref: "#/components/schemas/tds2_reorder_items_ind"
            tds2_recurring_expiry:
              $ref: "#/components/schemas/tds2_recurring_expiry"
            tds2_recurring_frequency:
              $ref: "#/components/schemas/tds2_recurring_frequency"
            tds2_gift_card_amount:
              $ref: "#/components/schemas/tds2_gift_card_amount"
            tds2_gift_card_count:
              $ref: "#/components/schemas/tds2_gift_card_count"
            tds2_gift_card_curr:
              $ref: "#/components/schemas/tds2_gift_card_curr"
          required:
          - token
        directdebit:
          type: object
          nullable: true
          description: <span class="smallText">※ `pay_type = "Directdebit"`（この決済手段登録が口座振替用の口座情報登録である）のとき必須</span>
          properties:
            application_type:
              $ref: "#/components/schemas/DirectDebitApplicationType"
            bank_code:
              $ref: "#/components/schemas/bank_code"
            branch_code:
              $ref: "#/components/schemas/branch_code"
            account_type:
              $ref: "#/components/schemas/account_type"
            account_number:
              $ref: "#/components/schemas/account_number"
            account_name:
              $ref: "#/components/schemas/account_name"
            account_name_kana:
              $ref: "#/components/schemas/account_name_kana"
            paper_application:
              $ref: "#/components/schemas/paper_application"
          required:
          - application_type
          - bank_code
          - account_name_kana
      required:
      - pay_type
      - default_flag
    CustomerPaymentMethod.Creating.Response:
      $ref: "#/components/schemas/PaymentMethod"
    PaymentMethodId_schema:
      type: string
      example: pm_**********************
    CustomerPaymentMethod.Retrieving.QueryParams:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PaymentMethodPayType"
      required:
      - pay_type
    CustomerPaymentMethod.Retrieving.Response:
      $ref: "#/components/schemas/PaymentMethod"
    PaymentMethod_properties-id:
      type: string
      example: pm_**********************
      minLength: 25
      maxLength: 25
      description: 決済手段ID
    CustomerPaymentMethod.Deleting.Response:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
    PayType:
      type: string
      enum:
      - Card
      - Konbini
      - Paypay
      - Applepay
      - Directdebit
      - Virtualaccount
      example: Card
      description: "決済種別\\\nこの決済で利用する決済手段です。\n\n- `Card`: クレジットカード/デビットカード/プリペイドカード\n- `Konbini`: コンビニ決済\n- `Paypay`: PayPay\n- `Applepay`: Apple Pay\n- `Directdebit`: 口座振替\n- `Virtualaccount`: 銀行振込\n"
      x-description-card: "決済種別\\\nこの決済で利用する決済手段です。\n\n- `Card`: クレジットカード/デビットカード/プリペイドカード\n"
      x-description-konbini: "決済種別\\\nこの決済で利用する決済手段です。\n\n- `Konbini`: コンビニ決済\n"
      x-description-paypay: "決済種別\\\nこの決済で利用する決済手段です。\n\n- `Paypay`: PayPay\n"
      x-description-applepay: "決済種別\\\nこの決済で利用する決済手段です。\n\n- `Applepay`: Apple Pay\n"
      x-description-directdebit: "決済種別\\\nこの決済で利用する決済手段です。\n\n- `Directdebit`: 口座振替\n"
      x-description-virtualaccount: "決済種別\\\nこの決済で利用する決済手段です。\n\n- `Virtualaccount`: 銀行振込\n"
    Payment.ListRetrieving.QueryParams:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        keyword:
          $ref: "#/components/schemas/client_field_n"
        total_amount_min:
          type: integer
          format: int64
          minimum: 1
          maximum: 9999999
          description: "合計金額（始値）\\\n利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以上の合計金額を持つ決済情報を取得します。\n"
        total_amount_max:
          type: integer
          format: int64
          minimum: 1
          maximum: 9999999
          description: "合計金額（終値）\\\n利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以下の合計金額を持つ決済情報を取得します。\n"
        customer_id:
          $ref: "#/components/schemas/id"
        process_date_from:
          type: string
          description: "処理日時（始値）\\\n処理日時（`process_date`）を対象に範囲検索を行います。この日付以降に処理された決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        process_date_to:
          type: string
          description: "処理日時（終値）\\\n処理日時（`process_date`）を対象に範囲検索を行います。この日付以前に処理された決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        update_date_from:
          type: string
          description: "更新日時（始値）\\\n更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新された決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        update_date_to:
          type: string
          description: "更新日時（終値）\\\n更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新された決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
      required:
      - pay_type
    PaymentStatus:
      type: string
      enum:
      - UNPROCESSED
      - CHECKED
      - AUTHORIZED
      - AWAITING_CUSTOMER_PAYMENT
      - AWAITING_PAYMENT_APPROVAL
      - CAPTURED
      - CANCELED
      - EXPIRED
      - AUTHENTICATED
      - FAILED
      example: CAPTURED
      description: "決済ステータス\n\n- `UNPROCESSED`: 未決済\n- `CHECKED`: 有効性チェック済み\n- `AUTHORIZED`: 仮売上\n- `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち\n- `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち\n- `CAPTURED`: 売上確定\n- `CANCELED`: キャンセル\n- `EXPIRED`: 決済の期限切れ\n- `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）\n- `FAILED`: 決済失敗\n"
      x-description-card: "決済ステータス\n\n- `UNPROCESSED`: 未決済<br /><span class=\"smallText\">請求はまだ実行されていません。</span>\n- `CHECKED`: 有効性チェック済み<br /><span class=\"smallText\">カードの有効性チェックが完了しています。</span>\n- `AUTHORIZED`: 仮売上<br /><span class=\"smallText\">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>\n- `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span>\n- `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span>\n- `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span class=\"smallText\">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>\n"
      x-description-konbini: "決済ステータス\n\n- `UNPROCESSED`: 未決済<br /><span class=\"smallText\">請求はまだ実行されていません。</span>\n- `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span class=\"smallText\">購入者によるコンビニ店頭レジでの払い込みを待っている状態。</span>\n- `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span>\n- `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span>\n- `EXPIRED`: 決済の期限切れ<br /><span class=\"smallText\">この決済は期限が切れています。</span>\n"
      x-description-paypay: "決済ステータス\n\n- `UNPROCESSED`: 未決済<br /><span class=\"smallText\">請求はまだ実行されていません。</span>\n- `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span class=\"smallText\">購入者によるPayPay上での取引承認を待っている状態。</span>\n- `AUTHORIZED`: 仮売上<br /><span class=\"smallText\">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span>\n- `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span>\n- `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span>\n- `EXPIRED`: 決済の期限切れ<br /><span class=\"smallText\">この決済は期限が切れています。</span>\n"
      x-description-applepay: "決済ステータス\n\n- `UNPROCESSED`: 未決済<br /><span class=\"smallText\">請求はまだ実行されていません。</span>\n- `AUTHORIZED`: 仮売上<br /><span class=\"smallText\">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>\n- `CAPTURED`: 売上確定<br /><span class=\"smallText\">請求が完了し、売上が確定しています。</span>\n- `CANCELED`: キャンセル<br /><span class=\"smallText\">この決済はキャンセルされました。</span>\n"
      x-description-directdebit: "決済ステータス\n\n- `UNPROCESSED`: 未決済<br /><span class=\"smallText\">振替はまだ実行されていません。</span>\n- `AWAITING_PAYMENT_APPROVAL`: 決済処理待ち<br /><span class=\"smallText\">fincodeおよび金融機関による振替処理を待っています。</span>\n- `CAPTURED`: 売上確定<br /><span class=\"smallText\">振替が完了し、売上が確定しています。</span>\n- `CANCELED`: キャンセル<br /><span class=\"smallText\">この振替はキャンセルされました。</span>\n- `FAILED`: 請求失敗<br /><span class=\"smallText\">何らかの理由により振替に失敗しました。</span>\n"
      x-description-virtualaccount: null
    Payment.ListRetrieving.Card.QueryParams:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/PaymentStatus"
        auth_max_date_from:
          type: string
          description: "仮売上有効期限（始値）\\\n仮売上有効期限（`auth_max_date`）を対象に範囲検索を行います。この日付以降に仮売上が有効期限切れとなる決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        auth_max_date_to:
          type: string
          description: "仮売上有効期限（終値）\\\n仮売上有効期限（`auth_max_date`）を対象に範囲検索を行います。この日付以前に仮売上が有効期限切れとなる決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        subscription_id:
          type: string
          description: "サブスクリプションID\\\nサブスクリプションIDを指定して、指定したサブスクリプションによって作成された決済情報を取得します。\n"
        pay_pattern:
          type: string
          enum:
          - onetime
          - subscription
          description: "課金種別\\\n指定した課金種別の決済情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。\n\n- `onetime`: サブスクリプションでない都度払い\n- `subscription`: サブスクリプション\n"
        sort:
          $ref: "#/components/schemas/sort"
    Payment.ListRetrieving.ApplePay.QueryParams:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/PaymentStatus"
        auth_max_date_from:
          type: string
          description: "仮売上有効期限（始値）\\\n仮売上有効期限（`auth_max_date`）を対象に範囲検索を行います。この日付以降に仮売上が有効期限切れとなる決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        auth_max_date_to:
          type: string
          description: "仮売上有効期限（終値）\\\n仮売上有効期限（`auth_max_date`）を対象に範囲検索を行います。この日付以前に仮売上が有効期限切れとなる決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        sort:
          $ref: "#/components/schemas/sort"
    Payment.ListRetrieving.Konbini.QueryParams:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/PaymentStatus"
        payment_term_from:
          type: string
          description: "支払い期限（始値）\\\n支払い期限（`payment_term`）を対象に範囲検索を行います。この日付以降に支払い期限が到来する決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        payment_term_to:
          type: string
          description: "支払い期限（終値）\\\n支払い期限（`payment_term`）を対象に範囲検索を行います。この日付以前に支払い期限が到来する決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        payment_date_from:
          type: string
          description: "支払い日時（始値）\\\n支払い日時（`payment_date`）を対象に範囲検索を行います。この日付以降に支払いが行われた決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        payment_date_to:
          type: string
          description: "支払い日時（終値）\\\n支払い日時（`payment_date`）を対象に範囲検索を行います。この日付以前に支払いが行われた決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        overpayment_flag:
          type: string
          enum:
          - "0"
          - "1"
          description: "多重支払フラグ\\\n同一のバーコードで複数回支払いが行われた決済を検索する場合`1`を指定します。\n"
        cancel_overpayment_flag:
          type: string
          enum:
          - "0"
          - "1"
          description: "キャンセル後支払フラグ\\\nキャンセルされた決済に対して支払いが行われた決済を検索する場合`1`を指定します。\n"
        sort:
          $ref: "#/components/schemas/sort"
    Payment.ListRetrieving.PayPay.QueryParams:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/PaymentStatus"
        auth_max_date_from:
          type: string
          description: "仮売上有効期限（始値）\\\n仮売上有効期限（`auth_max_date`）を対象に範囲検索を行います。この日付以降に仮売上が有効期限切れとなる決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        auth_max_date_to:
          type: string
          description: "仮売上有効期限（終値）\\\n仮売上有効期限（`auth_max_date`）を対象に範囲検索を行います。この日付以前に仮売上が有効期限切れとなる決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        payment_date_from:
          type: string
          description: "支払い日時（始値）\\\n支払い日時（`payment_date`）を対象に範囲検索を行います。この日付以降に支払いが行われた決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        payment_date_to:
          type: string
          description: "支払い日時（終値）\\\n支払い日時（`payment_date`）を対象に範囲検索を行います。この日付以前に支払いが行われた決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        sort:
          $ref: "#/components/schemas/sort"
    DirectDebitResultCode:
      type: string
      enum:
      - "0"
      - "1"
      - "2"
      - "3"
      - "4"
      - "8"
      - "9"
      - E
      - "N"
      example: "0"
      minLength: 1
      maxLength: 1
      description: "振替結果コード\n\n- `0`: 振替成功<br><span class=\"smallText\">振替が成功しました。</span>\n- `1`: 残高不足（失敗）<br><span class=\"smallText\">口座残高の不足により振替に失敗しました。</span>\n- `2`: 預金取引無し（失敗）<br><span class=\"smallText\">指定した口座が存在しないなどの理由により振替に失敗しました。</span>\n- `3`: 購入者事由（失敗）<br><span class=\"smallText\">購入者による振替取引の停止等により振替に失敗しました。</span>\n- `4`: 依頼書未着・不備（失敗）<br><span class=\"smallText\">（依頼書登録）この決済に所定の期日までの口座振替依頼書の提出が確認出来なかったため振替に失敗しました。</span>\n- `8`: ショップ事由（失敗）<br><span class=\"smallText\">ショップに起因する事由により振替に失敗しました。詳細はfincodeにお問い合わせください。</span>\n- `9 | E | N`: その他（失敗）<br><span class=\"smallText\">その他の理由により振替に失敗しました（通常は発生しません）。詳細はfincodeにお問い合わせください。</span>\n\n[お問い合わせはこちらのフォームから](https://dashboard.fincode.jp/contact)いただけます。\n"
    Payment.ListRetrieving.DirectDebit.QueryParams:
      type: object
      properties:
        target_date_from:
          type: string
          nullable: true
          description: "振替指定日（始値）\\\n振替指定日（`target_date`）を対象に範囲検索を行います。この日付以降に振替指定日が設定されている決済情報を取得します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        target_date_to:
          type: string
          nullable: true
          description: "振替指定日（終値）\\\n振替指定日（`target_date`）を対象に範囲検索を行います。この日付以前に振替指定日が設定されている決済情報を取得します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        withdrawal_date_from:
          type: string
          nullable: true
          description: "引き落とし日（始値）\\\n引き落とし日（`withdrawal_date`）を対象に範囲検索を行います。この日付以降に引き落としが行われた決済情報を取得します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        withdrawal_date_to:
          type: string
          nullable: true
          description: "引き落とし日（終値）\\\n引き落とし日（`withdrawal_date`）を対象に範囲検索を行います。この日付以前に引き落としが行われた決済情報を取得します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        result_code:
          $ref: "#/components/schemas/DirectDebitResultCode"
        pay_pattern:
          type: string
          enum:
          - onetime
          - subscription
          description: "課金種別\\\n指定した課金種別の決済情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。\n\n- `onetime`: サブスクリプションでない都度払い\n- `subscription`: サブスクリプション\n"
        subscription_id:
          type: string
          description: "サブスクリプションID\\\nサブスクリプションIDを指定して、指定したサブスクリプションによって作成された決済情報を取得します。\n"
        sort:
          $ref: "#/components/schemas/sort"
    Shop_properties-id:
      type: string
      minLength: 13
      maxLength: 13
      example: s_***********
      description: |
        ショップID
    error_code:
      type: string
      minLength: 11
      maxLength: 11
      example: E**********
      description: "エラー内容を判定する場合はこの`error_code`の使用が推奨されます。\\\n[各エラーコードの定義はこちらを参照](https://docs.fincode.jp/develop_support/error)して確認できます。\n"
    Payment:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        id:
          type: string
          nullable: false
          minLength: 1
          maxLength: 30
          example: o_**********************
          description: "オーダーID\\\n決済情報のIDです。\n"
        access_id:
          type: string
          nullable: false
          minLength: 30
          maxLength: 30
          example: a_**********************
          description: |
            取引ID
        amount:
          type: integer
          nullable: false
          example: 1000
          description: |
            利用金額
        tax:
          type: integer
          nullable: false
          example: 100
          description: |
            税送料
        total_amount:
          type: integer
          format: int64
          nullable: false
          example: 1100
          description: "合計金額\\\n`amount`と`tax`の合計値です。\n"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        process_date:
          type: string
          example: 2022/01/01 12:34:56.789
          description: "決済 処理日時\\\n決済の各種処理（決済実行、キャンセルなど）が行われた日時です。\n"
        customer_id:
          $ref: "#/components/schemas/id"
        customer_group_id:
          type: string
          nullable: true
          minLength: 13
          maxLength: 13
          description: "顧客情報共有グループID\\\nプラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。\n"
        error_code:
          $ref: "#/components/schemas/error_code"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
      x-req-properties:
        amount:
          type: string
          nullable: false
          minLength: 1
          maxLength: 7
          example: "1000"
          description: "利用金額\\\n`tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\\n参照例： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/restriction)\n"
        tax:
          type: string
          nullable: false
          minLength: 1
          maxLength: 7
          example: "100"
          description: "税送料\\\n`amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\\n参照例： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/restriction)\n"
        paypay:
          order_description:
            type: string
            nullable: true
            maxLength: 100
            example: ○○の購入
            description: "注文内容の説明文\\\n購入者のPayPayアプリ上で注文内容として決済時に表示される説明文です。\n"
        directdebit:
          remarks:
            type: string
            nullable: true
            maxLength: 9
            description: "利用明細表示内容\\\n半角英数カナ記号、全角英数カナ記号、一部の記号、半角全角スペースが指定可能。\\\n使用可能な記号：`.`, `(`, `)`, `–`, `．`,`（`, `）`, `ー`\\\nデフォルト：ショップ名カナの先頭9文字\\\n"
    CardPaymentJobCode:
      type: string
      enum:
      - CHECK
      - AUTH
      - CAPTURE
      example: CAPTURE
      description: "取引種別\\\nこの決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。\n\n- `CHECK`：有効性チェックのみ行う\n- `AUTH`：仮売上にする\n- `CAPTURE`：即時売上\n"
    CardPayMethod:
      type: string
      enum:
      - "1"
      - "2"
      - "5"
      example: "1"
      description: "支払方法\n\n- `1`: 一括払い\n- `2`: 分割払い\n- `5`: リボ払い\n"
    CardPayTimes:
      type: string
      enum:
      - "3"
      - "5"
      - "6"
      - "10"
      - "12"
      - "15"
      - "18"
      - "20"
      - "24"
      example: null
      description: "（分割払いの場合）支払回数\\\n\\\n指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`\n"
    Subscription_properties-id:
      type: string
      example: su_*********************
      minLength: 1
      maxLength: 25
      description: |
        サブスクリプションID
    tds2_ret_url:
      type: string
      example: https://your-server.example.com/3ds2-return
      maxLength: 256
      nullable: true
      description: "3Dセキュア認証における戻りURL\\\nfincodeは3Dセキュア認証処理の過程において、このURLにPOSTメソッド、`Content-Type:application/x-www-form-urlencoded`で値を返します。\n\n- `MD`: クエリパラメータとして返されます。 `access_id`と等しい値です。\n- `event`: フォームデータとして返されます。この値を判定し後続の処理を分岐します。\n- `param`: フォームデータとして返されます。[3Dセキュア認証API](https://docs.fincode.jp/api#tag/3DSecure/execute3DSecureAuth)で使用します。\n- `requestorTransId`: フォームデータとして返されます。（後続処理では使用しません。）\n\n返却されるそれぞれの値についての[詳細はDocsで確認](https://docs.fincode.jp/payment/fraud_protection/3d_secure_2)できます。\n"
    3DS2Status:
      type: string
      enum:
      - AUTHENTICATING
      - CHALLENGE
      - AUTHENTICATED
      example: Card
      description: "3Dセキュア2.0認証処理 ステータス\n\n- `AUTHENTICATING`: 3Dセキュア認証処理中\n- `CHALLENGE`: チャレンジ認証の実施が必要\n- `AUTHENTICATED`: 3Dセキュア認証処理が完了\n"
    Payment.Card:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        job_code:
          $ref: "#/components/schemas/CardPaymentJobCode"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        card_id:
          $ref: "#/components/schemas/properties-id"
        brand:
          $ref: "#/components/schemas/CardBrand"
        card_no:
          $ref: "#/components/schemas/card_no"
        expire:
          $ref: "#/components/schemas/expire"
        holder_name:
          $ref: "#/components/schemas/holder_name"
        card_no_hash:
          $ref: "#/components/schemas/card_no_hash"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        pay_times:
          $ref: "#/components/schemas/CardPayTimes"
        subscription_id:
          $ref: "#/components/schemas/Subscription_properties-id"
        tds_type:
          $ref: "#/components/schemas/tds_type"
        tds2_type:
          $ref: "#/components/schemas/tds2_type"
        tds2_ret_url:
          $ref: "#/components/schemas/tds2_ret_url"
        tds2_status:
          $ref: "#/components/schemas/3DS2Status"
        merchant_name:
          $ref: "#/components/schemas/td_tenant_name"
        forward:
          type: string
          nullable: true
          minLength: 1
          maxLength: 7
          example: "12345"
          description: |
            仕向け先
        issuer:
          type: string
          nullable: true
          minLength: 1
          maxLength: 7
          example: 1a34567
          description: |
            イシュア
        transaction_id:
          type: string
          nullable: true
          minLength: 28
          maxLength: 28
          example: null
          description: |
            トランザクションID
        approve:
          type: string
          nullable: true
          minLength: 1
          maxLength: 7
          example: null
          description: |
            承認番号
        auth_max_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59:59.999
          description: "仮売上有効期限\\\n`job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。\n"
        item_code:
          type: string
          nullable: true
          minLength: 7
          maxLength: 7
          description: |
            商品コード
    Payment.Card.list:
      type: object
      properties:
        list:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/Payment"
            - $ref: "#/components/schemas/Payment.Card"
    Payment.Card.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/Payment.Card.list"
    ApplePayPaymentJobCode:
      type: string
      enum:
      - AUTH
      - CAPTURE
      example: CAPTURE
      description: "取引種別\\\nこの決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。\n\n- `AUTH`：仮売上にする\n- `CAPTURE`：即時売上\n"
    Payment.ApplePay:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        job_code:
          $ref: "#/components/schemas/ApplePayPaymentJobCode"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        brand:
          $ref: "#/components/schemas/CardBrand"
        card_no:
          $ref: "#/components/schemas/card_no"
        expire:
          $ref: "#/components/schemas/expire"
        holder_name:
          $ref: "#/components/schemas/holder_name"
        card_no_hash:
          $ref: "#/components/schemas/card_no_hash"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        pay_times:
          $ref: "#/components/schemas/CardPayTimes"
        forward:
          type: string
          nullable: true
          minLength: 1
          maxLength: 7
          example: "12345"
          description: |
            仕向け先
        issuer:
          type: string
          nullable: true
          minLength: 1
          maxLength: 7
          example: 1a34567
          description: |
            イシュア
        transaction_id:
          type: string
          nullable: true
          minLength: 28
          maxLength: 28
          example: null
          description: |
            トランザクションID
        approve:
          type: string
          nullable: true
          minLength: 1
          maxLength: 7
          example: null
          description: |
            承認番号
        auth_max_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59:59.999
          description: "仮売上有効期限\\\n`job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。\n"
        item_code:
          type: string
          minLength: 7
          maxLength: 7
          nullable: true
          example: "0000990"
          description: |
            商品コード
        send_url:
          type: string
          nullable: true
          example: null
          description: |
            ※ 閉塞機能
      x-req-properties:
        token:
          type: string
          example: eyJoZWFkZXIiOnsiZXBoZW1lcmFsUHVibGljS2V5IjoidGVzdFB1YmxpY0tleSIsInB1YmxpY0tleUhhc2giOiJ0ZXN0S2V5SGFzaCIsInRyYW5zYWN0aW9uSWQiOiJ0ZXN0VHJhbnNhY3Rpb24ifSwiZGF0YSI6ImV5SmhjSEJzYVdOaGRHbHZibEJ5YVcxaGNubEJZMk52ZFc1MFRuVnRZbVZ5SWpvaU5ERXhNVEV4TVRFeE1URXhNVEV4TVNJc0ltRndjR3hwWTJGMGFXOXVSWGh3YVhKaGRHbHZia1JoZEdVaU9pSXlOakV5TXpFaUxDSmpkWEp5Wlc1amVVTnZaR1VpT2lJek9USWlMQ0owY21GdWMyRmpkR2x2YmtGdGIzVnVkQ0k2SWpFeE1URWlMQ0pqWVhKa2FHOXNaR1Z5VG1GdFpTSTZJaUlzSW1SbGRtbGpaVTFoYm5WbVlXTjBkWEpsY2tsa1pXNTBhV1pwWlhJaU9pSWlMQ0p3WVhsdFpXNTBSR0YwWVZSNWNHVWlPaUl6UkZObFkzVnlaU0lzSW5CaGVXMWxiblJFWVhSaElqcDdJbTl1YkdsdVpWQmhlVzFsYm5SRGNubHdkRzluY21GdElqb2lSSFZ0YlhsRFFWWldRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRU0lzSW1WamFVbHVaR2xqWVhSdmNpSTZJalVpZlgwPSIsInNpZ25hdHVyZSI6InRlc3RTaWduYXR1cmUiLCJ2ZXJzaW9uIjoiTW9jayJ9
          description: "Apple Pay カードトークン\\\nApple Payが利用可能なデバイスから取得したトークンをBase64エンコードした値を設定します。\\\n\\\nトークンの取得方法\n- Swift： `PKPayment.token.paymentData`の値をBase64エンコード\n- JavaScript： `ApplePayPaymentAuthorizedEvent.payment.token`の値をBase64エンコード\n\n詳細は[Docs > 決済処理を実行する（Apple Pay）](https://docs.fincode.jp/payment/applepay/execution)または[Offering Apple Pay in Your App](https://developer.apple.com/documentation/passkit_apple_pay_and_wallet/apple_pay/offering_apple_pay_in_your_app)（Apple公式）を参照できます。\n"
    Payment.ApplePay.list:
      type: object
      properties:
        list:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/Payment"
            - $ref: "#/components/schemas/Payment.ApplePay"
    Payment.ApplePay.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/Payment.ApplePay.list"
    KonbiniCode:
      type: string
      enum:
      - "00010"
      - "00020"
      - "00030"
      - "00080"
      - "00760"
      minLength: 5
      maxLength: 5
      description: "コンビニ事業者コード\\\n購入者が払い込みを行ったコンビニ事業者をあらわすコード。\n\n- `00010`: セブン-イレブン\n- `00020`: ローソン\n- `00030`: ファミリーマート\n- `00080`: ミニストップ\n- `00760`: セイコーマート\n"
    device_name:
      type: string
      minLength: 1
      maxLength: 20
      example: iPhone
      description: "デバイス名\\\nバーコード表示を行うデバイスの名前を指定します。\n\n- Androidの場合： [ユーザーエージェントクライアントヒントAPI](https://developer.mozilla.org/ja/docs/Web/API/User-Agent_Client_Hints_API)またはNavigator: userAgentプロパティ（非推奨）で取得できる文字列から取得したデバイス名を指定します。\n- iPhoneの場合： 固定文字列`iPhone`を指定します。\n"
    win_width:
      type: string
      minLength: 1
      maxLength: 5
      example: "375"
      description: "デバイス画面幅\\\nバーコード表示を行うデバイスの画面幅を指定します。\n\n- Androidの場合： `window.screen.width`で取得した値に `pixel_ratio`（ピクセル比）の値を掛けたものを指定します。\n- iPhoneの場合： `window.screen.width`で取得した値を指定します。\n"
    win_height:
      type: string
      minLength: 1
      maxLength: 5
      example: "812"
      description: "デバイス画面の高さ\\\nバーコード表示を行うデバイス画面の高さを指定します。\n\n- Androidの場合： `window.screen.height`で取得した値に `pixel_ratio`（ピクセル比）の値を掛けたものを指定します。\n- iPhoneの場合： `window.screen.height`で取得した値を指定します。\n"
    KonbiniPaymentProcessResult:
      type: string
      enum:
      - "000"
      - "001"
      - "002"
      - "003"
      - "004"
      - "005"
      - "006"
      - "007"
      - "008"
      - "009"
      - "010"
      - "011"
      - "012"
      - "013"
      - "900"
      minLength: 3
      maxLength: 3
      description: "コンビニ事業者の決済処理結果コード\n\n- `000`: 正常終了\n- `001`: 認証失敗\n- `002`: 注文登録には成功したものの端末情報が確認できなかったためバーコード画像の発行なし\n- `003`: 必須項目の不備によるエラー\n- `004`: バーコードデータ内の識別子が不正\n- `005`: バーコードデータ内のメーカーコードが不正\n- `006`: バーコードデータ内の企業識別コードが不正\n- `007`: 支払い期限日時を超過している、または形式が不正\n- `008`: 支払い金額が上限もしくは下限を超えている\n- `009`: 全体チェックデジットが不正\n- `010`: その他の理由によりバーコード画像の発行に失敗\n- `011`: 印紙フラグ（内部データ）不正\n- `012`: 端末情報の指定値の桁数不正\n- `013`: 既に同一のバーコードが登録済み\n- `900`: 予期せぬエラー\n"
    Payment.Konbini:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        payment_term_day:
          type: string
          default: "2"
          nullable: true
          description: "支払い期限日数\\\nこの決済の支払い期限日数です。`\"0\"`日から`\"14\"`日まで指定できます。\n\n- `\"0\"`を指定すると決済を作成した当日に限り支払いが可能な決済が作成されます。\n- デフォルト：`\"2\"`\n"
        payment_term:
          type: string
          nullable: true
          description: "支払い期限日時\\\nコンビニ決済の支払い期限日時です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        payment_date:
          type: string
          nullable: true
          description: "支払日時\\\nコンビニ店頭で購入者が支払いを行った日時です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        barcode:
          type: string
          nullable: true
          description: "バーコード画像 Base64エンコード済み画像データ\\\nコンビニ店頭での支払いに使用するバーコード画像のBase64エンコード済みデータです。このデータをデコードして表示します。\\\nバーコード画像はレギュレーションに従って表示する必要があります。詳細は[Docs > レギュレーションと注意事項](https://docs.fincode.jp/payment/konbini/note)から参照できます。\n"
        barcode_format:
          type: string
          nullable: true
          enum:
          - jpg
          - png
          - bmp
          description: "バーコード画像 フォーマット\\\n発行されたバーコード画像（`barcode`）のフォーマットです。\n"
        barcode_width:
          type: string
          nullable: true
          minLength: 1
          maxLength: 9
          description: "バーコード画像 横幅（px）\\\n発行されたバーコード画像（`barcode`）の横幅です。\n"
        barcode_height:
          type: string
          nullable: true
          minLength: 1
          maxLength: 9
          description: "バーコード画像 縦幅（px）\\\n発行されたバーコード画像（`barcode`）の縦幅です。\n"
        overpayment_flag:
          type: string
          enum:
          - "0"
          - "1"
          description: "多重支払フラグ\\\nこの決済に対して複数回支払いが行われた場合`1`になります。\n\n- `0`: 0回、または1回の支払いが行われた\n- `1`: 2回以上、同一のバーコードを用いて支払いが行われた\n"
        cancel_overpayment_flag:
          type: string
          enum:
          - "0"
          - "1"
          description: "キャンセル後支払フラグ\\\nこの決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。\n\n- `0`: キャンセル後支払は行われていない\n- `1`: キャンセル後、購入者による支払いが行われた\n"
        konbini_code:
          $ref: "#/components/schemas/KonbiniCode"
        konbini_store_code:
          nullable: true
          minLength: 1
          maxLength: 8
          description: "コンビニ店舗コード\\\nコンビニ事業者ごとに独自体系の店舗コードです。\n"
        device_name:
          $ref: "#/components/schemas/device_name"
        os_version:
          nullable: true
          minLength: 1
          maxLength: 10
          description: |
            OSバージョン
        win_width:
          $ref: "#/components/schemas/win_width"
        win_height:
          $ref: "#/components/schemas/win_height"
        xdpi:
          nullable: true
          minLength: 1
          maxLength: 6
          description: |
            画面横幅のDPI
        ydpi:
          nullable: true
          minLength: 1
          maxLength: 6
          description: |
            画面縦幅のDPI
        result:
          $ref: "#/components/schemas/KonbiniPaymentProcessResult"
        order_serial:
          type: string
          nullable: true
          minLength: 1
          maxLength: 18
          description: |
            注文管理ID
        invoice_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 20
          description: |
            請求ID
    Payment.Konbini.list:
      type: object
      properties:
        list:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/Payment"
            - $ref: "#/components/schemas/Payment.Konbini"
    Payment.Konbini.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/Payment.Konbini.list"
    PayPayPaymentJobCode:
      type: string
      enum:
      - AUTH
      - CAPTURE
      example: CAPTURE
      description: "取引種別\\\nこの決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。\n\n- `AUTH`：仮売上にする\n- `CAPTURE`：即時売上\n"
    Payment.PayPay:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        job_code:
          $ref: "#/components/schemas/PayPayPaymentJobCode"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        code_url:
          type: string
          nullable: true
          minLength: 1
          maxLength: 256
          example: https://www.paypay.example.com/app/cashier?code=https%3A%2F%2Fqr.paypay.example.com%2F0123456789abcdefghijklm
          description: "PayPay支払いURL\\\n購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します。\n"
        code_expiry_date:
          type: string
          nullable: true
          example: 2022/05/16 12:34:56.999
          description: "支払期限\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
        redirect_url:
          type: string
          nullable: true
          minLength: 1
          maxLength: 256
          example: https://your-service.example.com/on-payment-complete
          description: "リダイレクトURL\\\n決済が完了した際にPayPayからリダイレクト先URL。\n"
        redirect_type:
          type: string
          nullable: true
          enum:
          - "1"
          - "2"
          example: "1"
          description: "リダイレクト先種別\\\n`redirect_url`の種別\n\n- `1`： Webページ／Webアプリケーション\n- `2`： ネイティブアプリ\n"
        auth_max_date:
          type: string
          nullable: true
          example: 2022/05/16
          description: "仮売上期限\\\n形式： `yyyy/MM/dd`\n"
        order_description:
          type: string
          nullable: true
          maxLength: 100
          example: ○○の購入
          description: "注文内容の説明\\\n購入者のPayPayアプリ上で表示される注文内容の説明。\n"
        capture_description:
          type: string
          nullable: true
          maxLength: 100
          example: ○○の発送完了
          description: "売上確定の説明\\\n購入者のPayPayアプリ上で表示される売上確定の説明。\n"
        update_description:
          type: string
          nullable: true
          maxLength: 100
          example: ○○の変更の適用
          description: "金額変更の説明\\\n購入者のPayPayアプリ上で表示される金額変更の説明。\n"
        cancel_description:
          type: string
          nullable: true
          maxLength: 100
          example: ○○の購入キャンセル
          description: "キャンセルの説明\\\n購入者のPayPayアプリ上で表示されるキャンセルの説明。\n"
        store_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 18
          example: "123456"
          description: "店舗ID\\\nPayPayによって発行された店舗ID。\n"
        code_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 64
          example: "123456"
          description: |
            PayPayの支払いコードID
        payment_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 64
          description: |
            PayPay 決済ID
        paypay_result_code:
          type: string
          nullable: true
          minLength: 1
          maxLength: 256
          description: |
            PayPay処理結果コード
        merchant_payment_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 64
          description: |
            PayPay トランザクションID
        merchant_capture_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 64
          description: |
            PayPay 売上確定ID
        merchant_update_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 64
          description: |
            PayPay 金額変更ID
        merchant_revert_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 64
          description: |
            PayPay キャンセルID
        merchant_refund_id:
          type: string
          nullable: true
          minLength: 1
          maxLength: 64
          description: |
            PayPay 返金ID
        payment_date:
          type: string
          nullable: true
          example: 2022/05/16 12:34:56.999
          description: "支払日時\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
      x-req-properties:
        user_agent:
          type: string
          minLength: 1
          maxLength: 256
          example: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
          description: "ユーザーエージェント\\\nリクエストを送信したユーザーエージェントの情報。`redirect_type`が`1`（Webページ／Webアプリケーション）の場合指定できます。\n"
    Payment.PayPay.list:
      type: object
      properties:
        list:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/Payment"
            - $ref: "#/components/schemas/Payment.PayPay"
    Payment.PayPay.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/Payment.PayPay.list"
    Payment.DirectDebit:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        result_code:
          $ref: "#/components/schemas/DirectDebitResultCode"
        target_date:
          type: string
          nullable: true
          example: 2022/05/06
          description: "振替指定日\\\n振替を行う日を指定します。下記の日付を指定できます。\n\n- `yyyy/MM/05`: 5日\n- `yyyy/MM/06`: 6日\n- `yyyy/MM/23`: 23日\n- `yyyy/MM/27`: 27日\n\n形式： `yyyy/MM/dd`\\\n実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\\\n詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替日」の列で確認できます。\n"
        withdrawal_date:
          type: string
          nullable: true
          example: 2022/05/06
          description: "引き落とし日\\\n実際に購入者の口座から引き落としが行われた実績日です。\\\n\\\n形式： `yyyy/MM/dd`\n"
        request_accept_end_date:
          type: string
          nullable: true
          example: 2022/04/25
          description: "請求依頼受付期間 終了日\\\n振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\\\n\\\n形式： `yyyy/MM/dd`\\\n詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。\n"
        transfer_return_date:
          type: string
          nullable: true
          example: 2022/05/11
          description: "請求結果反映 予定日\\\n\\\n形式： `yyyy/MM/dd`\\\n詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。\n"
        payment_method_id:
          type: string
          nullable: true
          minLength: 25
          maxLength: 25
          description: "決済手段ID\\\nこの決済に使用された決済手段のIDです。\n"
        bank_code:
          type: string
          nullable: true
          minLength: 4
          maxLength: 4
          example: "0310"
          description: "金融機関コード\\\nfincodeの口座振替に対応している金融機関のコードのリストは[Docs > 利用可能な金融機関（口座振替）](https://docs.fincode.jp/payment/directdebit/restriction)で参照できます。\n"
        bank_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 45
          example: ""
          description: |
            金融機関名
        branch_code:
          type: string
          nullable: true
          minLength: 3
          maxLength: 3
          example: "101"
          description: |
            支店コード
        branch_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 45
          description: |
            支店名
        remarks:
          type: string
          nullable: true
          minLength: 1
          maxLength: 9
          example: フィンコードショッ
          description: |
            ご利用明細表示内容
            
            - フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
            - デフォルト： `ショップ名カナの先頭9文字`
            
            ※ 利用可能な記号
            
            - 半角：`.`、`(`、`)`、`–`
            - 全角：`．`、`（`、`）`、`ー`
        subscription_id:
          $ref: "#/components/schemas/Subscription_properties-id"
    Payment.DirectDebit.list:
      type: object
      properties:
        list:
          type: array
          items:
            allOf:
            - $ref: "#/components/schemas/Payment"
            - $ref: "#/components/schemas/Payment.DirectDebit"
    Payment.DirectDebit.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/Payment.DirectDebit.list"
    Payment_properties-id:
      type: string
      nullable: false
      minLength: 1
      maxLength: 30
      example: o_**********************
      description: "オーダーID\\\n決済情報のIDです。\n"
    amount:
      type: string
      nullable: false
      minLength: 1
      maxLength: 7
      example: "1000"
      description: "利用金額\\\n`tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\\n参照例： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/restriction)\n"
    tax:
      type: string
      nullable: false
      minLength: 1
      maxLength: 7
      example: "100"
      description: "税送料\\\n`amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\\\n参照例： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.jp/payment/restriction)\n"
    Payment.Card.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Payment_properties-id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        job_code:
          $ref: "#/components/schemas/CardPaymentJobCode"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        tds_type:
          $ref: "#/components/schemas/tds_type"
        tds2_type:
          $ref: "#/components/schemas/tds2_type"
        td_tenant_name:
          $ref: "#/components/schemas/td_tenant_name"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
      required:
      - pay_type
      - job_code
    Payment.ApplePay.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Payment_properties-id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        job_code:
          $ref: "#/components/schemas/ApplePayPaymentJobCode"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        item_code:
          nullable: true
          type: string
          minLength: 7
          maxLength: 7
          description: |
            商品コード
      required:
      - pay_type
      - job_code
      - amount
    Payment.Konbini.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Payment_properties-id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
      required:
      - pay_type
      - amount
    order_description:
      type: string
      nullable: true
      maxLength: 100
      example: ○○の購入
      description: "注文内容の説明\\\n購入者のPayPayアプリ上で表示される注文内容の説明。\n"
    Payment.PayPay.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Payment_properties-id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        job_code:
          $ref: "#/components/schemas/PayPayPaymentJobCode"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        order_description:
          $ref: "#/components/schemas/order_description"
      required:
      - pay_type
      - job_code
      - amount
    remarks:
      type: string
      nullable: true
      minLength: 1
      maxLength: 9
      example: フィンコードショッ
      description: |
        ご利用明細表示内容
        
        - フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
        - デフォルト： `ショップ名カナの先頭9文字`
        
        ※ 利用可能な記号
        
        - 半角：`.`、`(`、`)`、`–`
        - 全角：`．`、`（`、`）`、`ー`
    Payment.DirectDebit.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Payment_properties-id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        remarks:
          $ref: "#/components/schemas/remarks"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
      required:
      - pay_type
      - amount
    Payment.Card.Creating.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.ApplePay.Creating.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.ApplePay"
    Payment.Konbini.Creating.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Konbini"
    Payment.PayPay.Creating.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.PayPay"
    Payment.DirectDebit.Creating.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.DirectDebit"
    OrderId_schema:
      type: string
      example: o_**********************
    Payment.Retrieving.QueryParams:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
      required:
      - pay_type
    Payment.Card.Retrieving.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.ApplePay.Retrieving.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.ApplePay"
    Payment.Konbini.Retrieving.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Konbini"
    Payment.PayPay.Retrieving.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.PayPay"
    Payment.DirectDebit.Retrieving.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.DirectDebit"
    Payment.Card.Executing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        token:
          $ref: "#/components/schemas/token"
        customer_id:
          $ref: "#/components/schemas/id"
        card_id:
          $ref: "#/components/schemas/properties-id"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        pay_times:
          $ref: "#/components/schemas/CardPayTimes"
        tds2_ret_url:
          $ref: "#/components/schemas/tds2_ret_url"
        tds2_ch_acc_change:
          $ref: "#/components/schemas/tds2_ch_acc_change"
        tds2_ch_acc_date:
          $ref: "#/components/schemas/tds2_ch_acc_date"
        tds2_ch_acc_pw_change:
          $ref: "#/components/schemas/tds2_ch_acc_pw_change"
        tds2_nb_purchase_account:
          $ref: "#/components/schemas/tds2_nb_purchase_account"
        tds2_payment_acc_age:
          $ref: "#/components/schemas/tds2_payment_acc_age"
        tds2_provision_attempts_day:
          $ref: "#/components/schemas/tds2_provision_attempts_day"
        tds2_ship_address_usage:
          $ref: "#/components/schemas/tds2_ship_address_usage"
        tds2_ship_name_ind:
          $ref: "#/components/schemas/tds2_ship_name_ind"
        tds2_suspicious_acc_activity:
          $ref: "#/components/schemas/tds2_suspicious_acc_activity"
        tds2_txn_activity_day:
          $ref: "#/components/schemas/tds2_txn_activity_day"
        tds2_txn_activity_year:
          $ref: "#/components/schemas/tds2_txn_activity_year"
        tds2_three_ds_req_auth_data:
          $ref: "#/components/schemas/tds2_three_ds_req_auth_data"
        tds2_three_ds_req_auth_method:
          $ref: "#/components/schemas/tds2_three_ds_req_auth_method"
        tds2_addr_match:
          $ref: "#/components/schemas/tds2_addr_match"
        tds2_bill_addr_country:
          $ref: "#/components/schemas/tds2_bill_addr_country"
        tds2_bill_addr_state:
          $ref: "#/components/schemas/tds2_bill_addr_state"
        tds2_bill_addr_city:
          $ref: "#/components/schemas/tds2_bill_addr_city"
        tds2_bill_addr_line_1:
          $ref: "#/components/schemas/tds2_bill_addr_line_1"
        tds2_bill_addr_line_2:
          $ref: "#/components/schemas/tds2_bill_addr_line_2"
        tds2_bill_addr_line_3:
          $ref: "#/components/schemas/tds2_bill_addr_line_3"
        tds2_bill_addr_post_code:
          $ref: "#/components/schemas/tds2_bill_addr_post_code"
        tds2_ship_addr_country:
          $ref: "#/components/schemas/tds2_ship_addr_country"
        tds2_ship_addr_state:
          $ref: "#/components/schemas/tds2_ship_addr_state"
        tds2_ship_addr_city:
          $ref: "#/components/schemas/tds2_ship_addr_city"
        tds2_ship_addr_line_1:
          $ref: "#/components/schemas/tds2_ship_addr_line_1"
        tds2_ship_addr_line_2:
          $ref: "#/components/schemas/tds2_ship_addr_line_2"
        tds2_ship_addr_line_3:
          $ref: "#/components/schemas/tds2_ship_addr_line_3"
        tds2_ship_addr_post_code:
          $ref: "#/components/schemas/tds2_ship_addr_post_code"
        tds2_ship_ind:
          $ref: "#/components/schemas/tds2_ship_ind"
        tds2_delivery_email_address:
          $ref: "#/components/schemas/tds2_delivery_email_address"
        tds2_home_phone_cc:
          $ref: "#/components/schemas/tds2_home_phone_cc"
        tds2_home_phone_no:
          $ref: "#/components/schemas/tds2_home_phone_no"
        tds2_mobile_phone_cc:
          $ref: "#/components/schemas/tds2_mobile_phone_cc"
        tds2_mobile_phone_no:
          $ref: "#/components/schemas/tds2_mobile_phone_no"
        tds2_work_phone_cc:
          $ref: "#/components/schemas/tds2_work_phone_cc"
        tds2_work_phone_no:
          $ref: "#/components/schemas/tds2_work_phone_no"
        tds2_delivery_timeframe:
          $ref: "#/components/schemas/tds2_delivery_timeframe"
        tds2_pre_order_date:
          $ref: "#/components/schemas/tds2_pre_order_date"
        tds2_pre_order_purchase_ind:
          $ref: "#/components/schemas/tds2_pre_order_purchase_ind"
        tds2_reorder_items_ind:
          $ref: "#/components/schemas/tds2_reorder_items_ind"
        tds2_recurring_expiry:
          $ref: "#/components/schemas/tds2_recurring_expiry"
        tds2_recurring_frequency:
          $ref: "#/components/schemas/tds2_recurring_frequency"
        tds2_gift_card_amount:
          $ref: "#/components/schemas/tds2_gift_card_amount"
        tds2_gift_card_count:
          $ref: "#/components/schemas/tds2_gift_card_count"
        tds2_gift_card_curr:
          $ref: "#/components/schemas/tds2_gift_card_curr"
      required:
      - pay_type
      - access_id
    Payment.ApplePay_x-req-properties-token:
      type: string
      example: eyJoZWFkZXIiOnsiZXBoZW1lcmFsUHVibGljS2V5IjoidGVzdFB1YmxpY0tleSIsInB1YmxpY0tleUhhc2giOiJ0ZXN0S2V5SGFzaCIsInRyYW5zYWN0aW9uSWQiOiJ0ZXN0VHJhbnNhY3Rpb24ifSwiZGF0YSI6ImV5SmhjSEJzYVdOaGRHbHZibEJ5YVcxaGNubEJZMk52ZFc1MFRuVnRZbVZ5SWpvaU5ERXhNVEV4TVRFeE1URXhNVEV4TVNJc0ltRndjR3hwWTJGMGFXOXVSWGh3YVhKaGRHbHZia1JoZEdVaU9pSXlOakV5TXpFaUxDSmpkWEp5Wlc1amVVTnZaR1VpT2lJek9USWlMQ0owY21GdWMyRmpkR2x2YmtGdGIzVnVkQ0k2SWpFeE1URWlMQ0pqWVhKa2FHOXNaR1Z5VG1GdFpTSTZJaUlzSW1SbGRtbGpaVTFoYm5WbVlXTjBkWEpsY2tsa1pXNTBhV1pwWlhJaU9pSWlMQ0p3WVhsdFpXNTBSR0YwWVZSNWNHVWlPaUl6UkZObFkzVnlaU0lzSW5CaGVXMWxiblJFWVhSaElqcDdJbTl1YkdsdVpWQmhlVzFsYm5SRGNubHdkRzluY21GdElqb2lSSFZ0YlhsRFFWWldRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRU0lzSW1WamFVbHVaR2xqWVhSdmNpSTZJalVpZlgwPSIsInNpZ25hdHVyZSI6InRlc3RTaWduYXR1cmUiLCJ2ZXJzaW9uIjoiTW9jayJ9
      description: "Apple Pay カードトークン\\\nApple Payが利用可能なデバイスから取得したトークンをBase64エンコードした値を設定します。\\\n\\\nトークンの取得方法\n- Swift： `PKPayment.token.paymentData`の値をBase64エンコード\n- JavaScript： `ApplePayPaymentAuthorizedEvent.payment.token`の値をBase64エンコード\n\n詳細は[Docs > 決済処理を実行する（Apple Pay）](https://docs.fincode.jp/payment/applepay/execution)または[Offering Apple Pay in Your App](https://developer.apple.com/documentation/passkit_apple_pay_and_wallet/apple_pay/offering_apple_pay_in_your_app)（Apple公式）を参照できます。\n"
    Payment.ApplePay.Executing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        token:
          $ref: "#/components/schemas/Payment.ApplePay_x-req-properties-token"
        customer_id:
          $ref: "#/components/schemas/id"
      required:
      - pay_type
      - access_id
      - token
    payment_term_day:
      type: string
      default: "2"
      nullable: true
      description: "支払い期限日数\\\nこの決済の支払い期限日数です。`\"0\"`日から`\"14\"`日まで指定できます。\n\n- `\"0\"`を指定すると決済を作成した当日に限り支払いが可能な決済が作成されます。\n- デフォルト：`\"2\"`\n"
    pixel_ratio:
      type: string
      minLength: 1
      maxLength: 5
      example: "2.00"
      description: "デバイスピクセル比\\\n`window.devicePixelRatio`から取得した値を小数点以下2桁まで指定します。\n"
    win_size_type:
      type: string
      enum:
      - "1"
      - "2"
      minLength: 1
      maxLength: 1
      example: "1"
      description: "画面サイズ種別\\\nバーコード表示を行うデバイスのピクセルの種類を指定します。\n\n- `1`: 物理ピクセル（Androidのときはこちらを指定）\n- `2`: CSSピクセル（iPhoneのときはこちらを指定）\n"
    Payment.Konbini.Executing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        customer_id:
          $ref: "#/components/schemas/id"
        payment_term_day:
          $ref: "#/components/schemas/payment_term_day"
        device_name:
          $ref: "#/components/schemas/device_name"
        win_width:
          $ref: "#/components/schemas/win_width"
        win_height:
          $ref: "#/components/schemas/win_height"
        pixel_ratio:
          $ref: "#/components/schemas/pixel_ratio"
        win_size_type:
          $ref: "#/components/schemas/win_size_type"
      required:
      - pay_type
      - access_id
      - device_name
      - win_width
      - win_height
      - pixel_ratio
      - win_size_type
    redirect_url:
      type: string
      nullable: true
      minLength: 1
      maxLength: 256
      example: https://your-service.example.com/on-payment-complete
      description: "リダイレクトURL\\\n決済が完了した際にPayPayからリダイレクト先URL。\n"
    redirect_type:
      type: string
      nullable: true
      enum:
      - "1"
      - "2"
      example: "1"
      description: "リダイレクト先種別\\\n`redirect_url`の種別\n\n- `1`： Webページ／Webアプリケーション\n- `2`： ネイティブアプリ\n"
    user_agent:
      type: string
      minLength: 1
      maxLength: 256
      example: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3
      description: "ユーザーエージェント\\\nリクエストを送信したユーザーエージェントの情報。`redirect_type`が`1`（Webページ／Webアプリケーション）の場合指定できます。\n"
    Payment.PayPay.Executing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        customer_id:
          $ref: "#/components/schemas/id"
        redirect_url:
          $ref: "#/components/schemas/redirect_url"
        redirect_type:
          $ref: "#/components/schemas/redirect_type"
        user_agent:
          $ref: "#/components/schemas/user_agent"
    target_date:
      type: string
      nullable: true
      example: 2022/05/06
      description: "振替指定日\\\n振替を行う日を指定します。下記の日付を指定できます。\n\n- `yyyy/MM/05`: 5日\n- `yyyy/MM/06`: 6日\n- `yyyy/MM/23`: 23日\n- `yyyy/MM/27`: 27日\n\n形式： `yyyy/MM/dd`\\\n実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\\\n詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替日」の列で確認できます。\n"
    Payment.DirectDebit.Executing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        customer_id:
          $ref: "#/components/schemas/id"
        payment_method_id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        target_date:
          $ref: "#/components/schemas/target_date"
      required:
      - pay_type
      - access_id
      - customer_id
      - target_date
    Payment.Card.Executing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.ApplePay.Executing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.ApplePay"
    Payment.Konbini.Executing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Konbini"
    Payment.PayPay.Executing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.PayPay"
    Payment.DirectDebit.Executing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.DirectDebit"
    Payment.Card.Capturing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        pay_times:
          $ref: "#/components/schemas/CardPayTimes"
      required:
      - pay_type
      - access_id
    Payment.ApplePay.Capturing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
      required:
      - pay_type
      - access_id
    capture_description:
      type: string
      nullable: true
      maxLength: 100
      example: ○○の発送完了
      description: "売上確定の説明\\\n購入者のPayPayアプリ上で表示される売上確定の説明。\n"
    Payment.PayPay.Capturing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        capture_description:
          $ref: "#/components/schemas/capture_description"
      required:
      - pay_type
      - access_id
    Payment.Card.Capturing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.ApplePay.Capturing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.ApplePay"
    Payment.PayPay.Capturing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.PayPay"
    Payment.Card.Canceling.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
      required:
      - pay_type
      - access_id
    Payment.ApplePay.Canceling.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
      required:
      - pay_type
      - access_id
    Payment.Konbini.Canceling.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
      required:
      - pay_type
      - access_id
    cancel_description:
      type: string
      nullable: true
      maxLength: 100
      example: ○○の購入キャンセル
      description: "キャンセルの説明\\\n購入者のPayPayアプリ上で表示されるキャンセルの説明。\n"
    Payment.PayPay.Canceling.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        cancel_description:
          $ref: "#/components/schemas/cancel_description"
      required:
      - pay_type
      - access_id
    Payment.DirectDebit.Canceling.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
      required:
      - pay_type
      - access_id
    Payment.Card.Canceling.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.ApplePay.Canceling.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.ApplePay"
    Payment.Konbini.Canceling.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Konbini"
    Payment.PayPay.Canceling.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.PayPay"
    Payment.DirectDebit.Canceling.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.DirectDebit"
    Payment.Card.Reauthorizing.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        pay_times:
          $ref: "#/components/schemas/CardPayTimes"
      required:
      - pay_type
      - access_id
      - method
    Payment.Card.Reauthorizing.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.Card.ChangingAmount.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        job_code:
          $ref: "#/components/schemas/CardPaymentJobCode"
      required:
      - pay_type
      - access_id
      - job_code
      - amount
    update_description:
      type: string
      nullable: true
      maxLength: 100
      example: ○○の変更の適用
      description: "金額変更の説明\\\n購入者のPayPayアプリ上で表示される金額変更の説明。\n"
    Payment.PayPay.ChangingAmount.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        update_description:
          $ref: "#/components/schemas/update_description"
      required:
      - pay_type
      - access_id
      - amount
    Payment.DirectDebit.ChangingAmount.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
      required:
      - pay_type
      - access_id
      - amount
    Payment.Card.ChangingAmount.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.PayPay.ChangingAmount.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.PayPay"
    Payment.DirectDebit.ChangingAmount.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.DirectDebit"
    Payment.Card.ExecutingAfter3DS.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        pa_res:
          type: string
          deprecated: true
          description: "※ 閉塞機能\\\n3Dセキュアサービス結果電文\\\n\\\n3Dセキュア1.0利用時のみ必須。\n"
      required:
      - pay_type
      - access_id
    Payment.Card.ExecutingAfter3DS.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Card"
    Payment.Konbini.GeneratingBarcode.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PayType"
        access_id:
          $ref: "#/components/schemas/access_id"
        device_name:
          $ref: "#/components/schemas/device_name"
        win_width:
          $ref: "#/components/schemas/win_width"
        win_height:
          $ref: "#/components/schemas/win_height"
        pixel_ratio:
          $ref: "#/components/schemas/pixel_ratio"
        win_size_type:
          $ref: "#/components/schemas/win_size_type"
      required:
      - pay_type
      - access_id
      - device_name
      - win_width
      - win_height
      - pixel_ratio
      - win_size_type
    Payment.Konbini.GeneratingBarcode.Response:
      allOf:
      - $ref: "#/components/schemas/Payment"
      - $ref: "#/components/schemas/Payment.Konbini"
    AccessId_schema:
      type: string
      example: a_**********************
    3DS2TransactionResult:
      type: string
      enum:
      - "Y"
      - A
      - C
      - "N"
      - U
      - R
      minLength: 1
      maxLength: 1
      description: "3Dセキュア2.0認証処理 結果\n\n- `Y`: 認証に成功\n- `A`: 認証の試行が認められた<br><span class=\"smallText\">認証 / 確認は行われなかったが、認証 / 確認を試行したことの証拠は提供されている</span>\n- `C`: 追加のチャレンジ認証が必要<br><span class=\"smallText\">購入者による`challenge_url`上での追加認証が必要</span>\n- `N`: 取引拒否もしくは未認証・口座未確認\n- `R`: 認証・口座確認拒否<br><span class=\"smallText\">カード発行会社が認証を拒否し、承認を試行しないよう要求している</span>\n- `U`: 認証・口座確認の実行失敗または技術的な問題\n"
    3DS2TransactionResultReason:
      type: string
      enum:
      - "01"
      - "02"
      - "03"
      - "04"
      - "05"
      - "06"
      - "07"
      - "08"
      - "09"
      - "11"
      - "12"
      - "13"
      - "14"
      - "15"
      - "16"
      - "17"
      - "18"
      - "19"
      - "20"
      - "21"
      - "22"
      - "23"
      - "24"
      - "25"
      - "26"
      - 80...99
      example: "01"
      minLength: 1
      maxLength: 2
      description: "3Dセキュア認証結果の理由コード\\\n\\\n3Dセキュア認証2.0の結果（`tds2_trans_result`）の理由を示すコードです。\n\n- `01`: カード認証に失敗\n- `02`: 不明なデバイス\n- `03`: サポートされていないデバイス\n- `04`: 認証頻度の上限を超えた\n- `05`: 有効期限切れのカード\n- `06`: 無効なカード番号\n- `07`: 無効な取引\n- `08`: カードのレコードが存在しない\n- `09`: セキュリティ障害\n- `10`: 盗難カード\n- `11`: 不正の疑い\n- `12`: カード会員に取引が許可されていない\n- `13`: カード会員がサービスに登録されていない\n- `14`: 取引が3Dセキュア処理サービスでタイムアウトした\n- `15`: 信頼度が低い\n- `16`: 信頼度が中程度\n- `17`: 信頼度が高い\n- `18`: 信頼度が非常に高い\n- `19`: 3Dセキュア処理サービスの最大チャレンジを超える\n- `20`: 非決済取引はサポートされていません\n- `21`: 3RIトランザクションはサポートされていません\n- `22`: 3Dセキュア処理サービスの技術的な問題\n- `23`: 3Dセキュア処理サービスによってデカップルド認証が必要と判断されたが、3DSリクエスターからは要求されていない\n- `24`: 3DS Requestor Decoupled Max Timeを超過\n- `25`: デカップルド認証のためのカード会員を認証するのに十分な時間が与えられなかった\n- `26`: 認証は試行されたが、カード会員によって実行されなかった\n"
    3DS:
      type: object
      properties:
        tds2_trans_result:
          $ref: "#/components/schemas/3DS2TransactionResult"
        tds2_trans_result_reason:
          $ref: "#/components/schemas/3DS2TransactionResultReason"
      x-req-properties:
        param:
          type: string
          minLength: 1
          maxLength: 2000
          example: ew0KICAgICJicm93c2VyQWNjZXB0SGVhZGVyIjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuNyIsDQogICAgImJyb3dzZXJJUCI6ICIxOTIuMTY4LngueCIsDQogICAgImJyb3dzZXJKYXZhRW5hYmxlZCI6IGZhbHNlLA0KICAgICJicm93c2VyTGFuZ3VhZ2UiOiAiamEtSlAiLA0KICAgICJicm93c2VySmF2YXNjcmlwdEVuYWJsZWQiOiB0cnVlLA0KICAgICJicm93c2VyQ29sb3JEZXB0aCI6ICJ7e0NvbG9yIGRlcHRofX0iLA0KICAgICJicm93c2VyU2NyZWVuSGVpZ2h0IjogInt7U2NyZWVuIGhlaWdodH19IiwNCiAgICAiYnJvd3NlclNjcmVlbldpZHRoIjogInt7U2NyZWVuIHdpZHRofX0iLA0KICAgICJicm93c2VyVFoiOiAiLTU0MCIsDQogICAgImJyb3dzZXJVc2VyQWdlbnQiOiAiTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMi4wLjAuMCBTYWZhcmkvNTM3LjM2Ig0KfQ0K
          description: "ブラウザ情報\\\n\\\n購入者が`acs_url`にアクセスしたことをトリガーにfincodeが`tds2_ret_url`宛てに送信するデータのうち、`param`の値を設定します。\n"
        td_tenant_name:
          type: string
          example: s_***********-ab123
          maxLength: 25
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n加盟店名。\\\n3Dセキュア認証の際に表示されるショップ名や加盟店名を指定できます。\\\n未指定の場合、 カード決済の契約時にfincodeが下記の形式に従って設定した値が自動的に使用されます。\\\n\\\n形式：`{{ショップID}}-{{英数字からなる固定値}}`\n"
        tds_type:
          type: string
          enum:
          - "0"
          - "2"
          example: "2"
          minLength: 1
          maxLength: 1
          nullable: true
          description: "3Dセキュア認証を利用するか。\n\n- `0`: 3Dセキュア認証を利用しない（デフォルト）\n- `2`: 3Dセキュア2.0認証を利用する\n"
        tds2_type:
          type: string
          enum:
          - "2"
          - "3"
          example: "2"
          minLength: 1
          maxLength: 1
          nullable: true
          description: "3Dセキュア2.0非対応時の挙動設定\\\n購入者がこの決済に利用したカードが3Dセキュア2.0に非対応である場合の後続処理を設定します。\n\n- `2`: エラーをレスポンスし、処理を終了する。（デフォルト）\n- `3`: 3Dセキュア認証なしで処理を継続する。\n"
        tds2_ret_url:
          type: string
          example: https://your-server.example.com/3ds2-return
          maxLength: 256
          nullable: true
          description: "3Dセキュア認証における戻りURL\\\nfincodeは3Dセキュア認証処理の過程において、このURLにPOSTメソッド、`Content-Type:application/x-www-form-urlencoded`で値を返します。\n\n- `MD`: クエリパラメータとして返されます。 `access_id`と等しい値です。\n- `event`: フォームデータとして返されます。この値を判定し後続の処理を分岐します。\n- `param`: フォームデータとして返されます。[3Dセキュア認証API](https://docs.fincode.jp/api#tag/3DSecure/execute3DSecureAuth)で使用します。\n- `requestorTransId`: フォームデータとして返されます。（後続処理では使用しません。）\n\n返却されるそれぞれの値についての[詳細はDocsで確認](https://docs.fincode.jp/payment/fraud_protection/3d_secure_2)できます。\n"
        tds2_ch_acc_change:
          type: string
          example: "20240101"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント 最終更新日\\\n形式：`YYYYMMDD`\n"
        tds2_ch_acc_date:
          type: string
          example: "20220101"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント 開設日\\\n形式：`YYYYMMDD`\n"
        tds2_ch_acc_pw_change:
          type: string
          example: "20230101"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント パスワード最終更新日\\\n形式：`YYYYMMDD`\n"
        tds2_nb_purchase_account:
          type: string
          example: "9999"
          minLength: 1
          maxLength: 4
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去6カ月間の購入回数\n"
        tds2_payment_acc_age:
          type: string
          example: "20231231"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード登録日。\\\n形式：`YYYYMMDD`\n"
        tds2_provision_attempts_day:
          type: string
          example: "999"
          minLength: 3
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去24時間のカード追加の試行回数\n"
        tds2_ship_address_usage:
          type: string
          example: "20230930"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n出荷先住所の最初の使用日。\\\n形式：`YYYYMMDD`\n"
        tds2_ship_name_ind:
          type: string
          enum:
          - "01"
          - "02"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客名と出荷先名が一致しているか否か\\\nカード顧客の顧客名と登録に使用される配送先名の一致/不一致を設定\n\n- `01`: カード顧客名と出荷先名が一致\n- `02`: カード顧客名と出荷先名が不一致\n"
        tds2_suspicious_acc_activity:
          type: string
          enum:
          - "01"
          - "02"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nアカウントの不審行為情報\\\nカード顧客で、不審な行動（過去の不正行為を含む）を加盟店様が発見したかどうかを設定\n\n- `01`: 不審な行動なし\n- `02`: 不審な行動あり\n"
        tds2_txn_activity_day:
          type: string
          example: "999"
          minLength: 3
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去24時間の取引回数\n"
        tds2_txn_activity_year:
          type: string
          example: "999"
          minLength: 3
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n前年の取引回数\n"
        tds2_three_ds_req_auth_data:
          type: string
          minLength: 1
          maxLength: 2048
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nログイン証跡\\\nログイン証跡を設定する場合、ログイン方法とログイン日時の設定が必要です。\n"
        tds2_three_ds_req_auth_method:
          type: string
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          - "05"
          - "06"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nログイン方法\\\nログイン方法を設定する場合、ログイン証跡とログイン日時の設定が必要です。\n\n- `01`: 認証なし（ゲストとしてログイン）\n- `02`: 加盟店様自身の認証情報\n- `03`: SSO(シングルサインオン)\n- `04`: イシュアーの認証情報\n- `05`: サードパーティ認証\n- `06`: FIDO認証\n"
        tds2_addr_match:
          type: string
          enum:
          - "Y"
          - "N"
          example: "Y"
          minLength: 1
          maxLength: 1
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n請求先住所と配送先住所が一致しているか否か\n\n- `Y`: 住所は一致している\n- `N`: 住所は一致していない\n"
        tds2_bill_addr_country:
          type: string
          example: "392"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 国コード。\\\n形式：ISO 3166-1 numeric\n"
        tds2_bill_addr_state:
          type: string
          example: "13"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 州または都道府県コード。\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
        tds2_bill_addr_city:
          type: string
          example: 渋谷区
          minLength: 1
          maxLength: 50
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 都市名\n"
        tds2_bill_addr_line_1:
          type: string
          example: 道玄坂1-14-6
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部1行目\\\n\\\n顧客の住所の番地・区画を指定してください。未指定の場合、顧客に登録された`addr_line_1`を設定します。\n\n- 都道府県や市区を含めることができます。\n- 保持している住所をパラメータの形式に分割できない場合は、桁数が収まるように`tds2_bill_addr_line_1` ~ `tds2_bill_addr_line_3`に住所を設定してください。\n- `tds2_bill_addr_line_2`と`tds2_bill_addr_line_3`を空にして、`tds2_bill_addr_line_1`に全ての住所を設定できます。\n"
        tds2_bill_addr_line_2:
          type: string
          example: ヒューマックス渋谷ビル
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部2行目\\\n\\\n顧客の住所の建物名・部屋番号を指定してください。未指定の場合、顧客に登録された`addr_line_2`を設定します。\n"
        tds2_bill_addr_line_3:
          type: string
          example: 7F
          minLength: 1
          maxLength: 100
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部3行目\\\n\\\n顧客の住所のその他を指定してください。未指定の場合、顧客に登録された`addr_line_3`を設定します。\n"
        tds2_bill_addr_post_code:
          type: string
          example: 150-0043
          minLength: 1
          maxLength: 16
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 郵便番号\n"
        tds2_ship_addr_country:
          type: string
          example: "392"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 国コード。\\\n形式：ISO 3166-1 numeric\n"
        tds2_ship_addr_state:
          type: string
          example: "13"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 州または都道府県コード。\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
        tds2_ship_addr_city:
          type: string
          example: 渋谷区
          minLength: 1
          maxLength: 50
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 都市名\n"
        tds2_ship_addr_line_1:
          type: string
          example: 道玄坂1-14-6
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部1行目\n"
        tds2_ship_addr_line_2:
          type: string
          example: ヒューマックス渋谷ビル
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部2行目\n"
        tds2_ship_addr_line_3:
          type: string
          example: 7F
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部3行目\n"
        tds2_ship_addr_post_code:
          type: string
          example: 150-0043
          minLength: 1
          maxLength: 16
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 郵便番号\n"
        tds2_ship_ind:
          type: string
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          - "05"
          - "06"
          - "07"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n取引商品の配送方法\n\n- `01`: カード顧客の請求先住所に配送\n- `02`: 加盟店が保持している確認済み住所（請求先住所でない）に配送\n- `03`: カード顧客の請求先住所と異なる住所に配送\n- `04`: 店舗への配送（店舗の住所は配送先住所で指定）\n- `05`: デジタル商品（オンラインサービス、電子ギフトカードおよび償還コードを含む）\n- `06`: 配送なし（旅行およびイベントのチケット）\n- `07`: その他（ゲーム、配送されないデジタルサービス、電子メディアの購読料など）\n"
        tds2_delivery_email_address:
          type: string
          example: email@example.com
          minLength: 1
          maxLength: 254
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客 メールアドレス\n"
        tds2_home_phone_cc:
          type: string
          example: "81"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の自宅電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_home_phone_no`の設定も必要です。\n"
        tds2_home_phone_no:
          type: string
          example: "312345678"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の自宅電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_home_phone_cc`の設定も必要です。\n"
        tds2_mobile_phone_cc:
          type: string
          example: "81"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の携帯電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_mobile_phone_no`の設定も必要です。\n"
        tds2_mobile_phone_no:
          type: string
          example: "9012345678"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の携帯電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_mobile_phone_cc`の設定も必要です。\n"
        tds2_work_phone_cc:
          type: string
          example: "81"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の勤務先電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_work_phone_no`の設定も必要です。\n"
        tds2_work_phone_no:
          type: string
          example: "312345678"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の勤務先電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_work_phone_cc`の設定も必要です。\n"
        tds2_delivery_timeframe:
          type: string
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品納品時間枠\n\n- `01`: 電子デリバリー\n- `02`: 当日出荷\n- `03`: 翌日出荷\n- `04`: 2日目以降の出荷\n"
        tds2_pre_order_date:
          type: string
          example: "20231231"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の発売予定日\\\n形式：`YYYYMMDD`\n"
        tds2_pre_order_purchase_ind:
          type: string
          enum:
          - "01"
          - "02"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の販売時期情報\n\n- `01`: 発売済み商品\n- `02`: 先行予約商品\n"
        tds2_reorder_items_ind:
          type: string
          enum:
          - "01"
          - "02"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の注文が初回か再注文か\n\n- `01`: 初回注文\n- `02`: 再注文\n"
        tds2_recurring_expiry:
          type: string
          example: "20231231"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ サブスクリプションなど継続課金型のビジネスモデルのみ\\\n継続課金の終了日\\\n形式：`YYYYMMDD`\n"
        tds2_recurring_frequency:
          type: string
          example: "99"
          minLength: 1
          maxLength: 4
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ サブスクリプションなど継続課金型のビジネスモデルのみ\\\n継続課金の課金間隔の日数（最小）\n"
        tds2_gift_card_amount:
          type: string
          example: "999999"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\nプリペイドカードまたはギフトカードの総購入金額\n"
        tds2_gift_card_count:
          type: string
          example: "99"
          minLength: 1
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\n購入したプリペイドカードまたはギフトカードの総数\n"
        tds2_gift_card_curr:
          type: string
          example: "392"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\nプリペイドカードまたはギフトカードの通貨コード。\\\n形式：ISO 4217 numeric\\\n\\\n以下の通貨コードは利用できません。（債券市場単位等）\\\n`955`, `956`, `957`, `958`, `959`, `960`, `961`, `962`, `963`, `964`, `999`\n"
    3DS.Confirming.Response:
      $ref: "#/components/schemas/3DS"
    param:
      type: string
      minLength: 1
      maxLength: 2000
      example: ew0KICAgICJicm93c2VyQWNjZXB0SGVhZGVyIjogInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuNyIsDQogICAgImJyb3dzZXJJUCI6ICIxOTIuMTY4LngueCIsDQogICAgImJyb3dzZXJKYXZhRW5hYmxlZCI6IGZhbHNlLA0KICAgICJicm93c2VyTGFuZ3VhZ2UiOiAiamEtSlAiLA0KICAgICJicm93c2VySmF2YXNjcmlwdEVuYWJsZWQiOiB0cnVlLA0KICAgICJicm93c2VyQ29sb3JEZXB0aCI6ICJ7e0NvbG9yIGRlcHRofX0iLA0KICAgICJicm93c2VyU2NyZWVuSGVpZ2h0IjogInt7U2NyZWVuIGhlaWdodH19IiwNCiAgICAiYnJvd3NlclNjcmVlbldpZHRoIjogInt7U2NyZWVuIHdpZHRofX0iLA0KICAgICJicm93c2VyVFoiOiAiLTU0MCIsDQogICAgImJyb3dzZXJVc2VyQWdlbnQiOiAiTW96aWxsYS81LjAgKE1hY2ludG9zaDsgSW50ZWwgTWFjIE9TIFggMTBfMTVfNykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyMi4wLjAuMCBTYWZhcmkvNTM3LjM2Ig0KfQ0K
      description: "ブラウザ情報\\\n\\\n購入者が`acs_url`にアクセスしたことをトリガーにfincodeが`tds2_ret_url`宛てに送信するデータのうち、`param`の値を設定します。\n"
    3DS.Authorizing.Request:
      type: object
      properties:
        param:
          $ref: "#/components/schemas/param"
    3DS.Authorizing.Response:
      allOf:
      - type: object
        properties:
          challenge_url:
            type: string
            nullable: true
            minLength: 1
            maxLength: 256
            description: "3Dセキュア2.0認証チャレンジURL\\\n\\\n購入者による`acs_url`へのアクセス後、カード発行会社によって追加のチャレンジ認証が必要と判定された場合、このパラメータにURLが設定されて返却されます。\n"
      - $ref: "#/components/schemas/3DS"
    PaymentSessionPayType:
      type: string
      enum:
      - Card
      - Konbini
      - Paypay
      description: "決済方法\\\nこのリダイレクト型決済で利用できる決済方法です。\\\n\\\n- `Card`：カード決済\\\n- `Konbini`：コンビニ決済\\\n- `Paypay`：PayPay\n"
    pay_type:
      type: array
      nullable: false
      items:
        $ref: "#/components/schemas/PaymentSessionPayType"
      description: "決済手段\\\nこの決済URL上で使用できる決済手段を複数指定します。\n\n- `Card`：カード決済\n- `Konbini`：コンビニ決済\n- `Paypay`：PayPay\n"
    CardPaymentSessionJobCode:
      type: string
      enum:
      - AUTH
      - CAPTURE
      example: CAPTURE
      default: AUTH
      description: "取引種別\\\nこの決済URL上でカード決済を行った際、仮売上にするか即座に売上確定するか指定します。\n\n- `AUTH`：仮売上にする（デフォルト）\n- `CAPTURE`：即時売上\n"
    properties-payment_term_day:
      type: number
      format: int32
      nullable: true
      minimum: 1
      maximum: 3
      example: 7
      description: "コンビニ決済 支払期限日数\\\n店頭レジでの支払い期限日数です。\n"
    konbini_reception_mail_send_flag:
      type: string
      nullable: false
      enum:
      - "0"
      - "1"
      example: "1"
      description: "コンビニ決済 支払い画面案内メール送信フラグ\\\nコンビニ決済の支払い画面案内メールを送信するかどうかを設定します。\n\n- `0`：送信しない\n- `1`：送信する\n"
    properties-order_description:
      nullable: true
      type: string
      maxLength: 100
      example: Your Shop上での購入
      description: "注文内容の説明\\\nPayPayアプリ上で注文内容として表示されます。\n"
    success_url:
      type: string
      nullable: true
      maxLength: 256
      example: https://your-service.example.com/success
      description: "成功時リダイレクトURL\\\n`link_url`上で決済に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
    cancel_url:
      type: string
      nullable: true
      maxLength: 256
      example: https://your-service.example.com/cancel
      description: "キャンセル時リダイレクトURL\\\n`link_url`上で決済がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
    properties-expire:
      type: string
      nullable: false
      example: 2022/02/31 23:59:59.999
      description: "リダイレクト型決済URL 有効期限\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
    shop_service_name:
      type: string
      nullable: true
      maxLength: 100
      example: Your Service
      description: "ショップ／サービス名\\\n決済URL上で表示されるショップおよびサービスの名称です。\\\n\\\nデフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。\n"
    guide_mail_send_flag:
      type: string
      enum:
      - "0"
      - "1"
      nullable: false
      example: "1"
      description: "購入メール 送信フラグ\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信したかどうかを示します。\n\n- `0`：送信しなかった（デフォルト）\n- `1`：送信した\n"
    receiver_mail:
      type: string
      nullable: true
      maxLength: 254
      example: receiver-email@example.com
      description: "購入メール 送信先メールアドレス\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。\n"
    mail_customer_name:
      type: string
      nullable: true
      maxLength: 384
      example: 買物 太郎
      description: "購入メール 購入者の名前\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられる購入者の名前です。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。\n"
    thanks_mail_send_flag:
      type: string
      enum:
      - "0"
      - "1"
      nullable: false
      description: "完了メール 送信フラグ\\\n決済が完了した際に購入者に完了メールを送信するかどうかを示します。\n\n- `0`：送信しない（デフォルト）\n- `1`：送信する\n"
    shop_mail_template_id:
      type: string
      nullable: true
      maxLength: 25
      example: null
      description: "メールテンプレートID\\\nメールテンプレートIDが設定されている場合、リダイレクト型決済URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。\n"
    PaymentSession.Creating.Request:
      type: object
      properties:
        transaction:
          type: object
          description: "決済共通項目\\\n決済手段を問わず共通して使用される決済に関するパラメータです。\n"
          properties:
            pay_type:
              $ref: "#/components/schemas/PayType"
            amount:
              type: string
              minLength: 1
              maxLength: 9
              example: "1000"
              description: "決済金額\\\n決済金額を指定します。\\\n\\\n指定可能な金額の範囲は各決済手段ごとの制限事項に準じます。\n"
            order_id:
              $ref: "#/components/schemas/Payment_properties-id"
            tax:
              nullable: true
              default: null
              type: string
              minLength: 1
              maxLength: 9
              example: "100"
              description: "税送料\\\n税送料を指定します。\\\n\\\n指定可能な金額の範囲は各決済手段ごとの制限事項に準じます。\n"
            client_field_1:
              $ref: "#/components/schemas/client_field_n"
            client_field_2:
              $ref: "#/components/schemas/client_field_n"
            client_field_3:
              $ref: "#/components/schemas/client_field_n"
          required:
          - amount
        card:
          type: object
          nullable: true
          description: "カード決済パラメータ\\\n`pay_type`に`Card`を含めた場合に用いられる、カード決済に関するパラメータです。\n"
          properties:
            job_code:
              $ref: "#/components/schemas/CardPaymentSessionJobCode"
            tds_type:
              $ref: "#/components/schemas/tds_type"
            tds2_type:
              $ref: "#/components/schemas/tds2_type"
            td_tenant_name:
              $ref: "#/components/schemas/td_tenant_name"
            tds2_ch_acc_change:
              $ref: "#/components/schemas/tds2_ch_acc_change"
            tds2_ch_acc_date:
              $ref: "#/components/schemas/tds2_ch_acc_date"
            tds2_ch_acc_pw_change:
              $ref: "#/components/schemas/tds2_ch_acc_pw_change"
            tds2_nb_purchase_account:
              $ref: "#/components/schemas/tds2_nb_purchase_account"
            tds2_payment_acc_age:
              $ref: "#/components/schemas/tds2_payment_acc_age"
            tds2_provision_attempts_day:
              $ref: "#/components/schemas/tds2_provision_attempts_day"
            tds2_ship_address_usage:
              $ref: "#/components/schemas/tds2_ship_address_usage"
            tds2_ship_name_ind:
              $ref: "#/components/schemas/tds2_ship_name_ind"
            tds2_suspicious_acc_activity:
              $ref: "#/components/schemas/tds2_suspicious_acc_activity"
            tds2_txn_activity_day:
              $ref: "#/components/schemas/tds2_txn_activity_day"
            tds2_txn_activity_year:
              $ref: "#/components/schemas/tds2_txn_activity_year"
            tds2_three_ds_req_auth_data:
              $ref: "#/components/schemas/tds2_three_ds_req_auth_data"
            tds2_three_ds_req_auth_method:
              $ref: "#/components/schemas/tds2_three_ds_req_auth_method"
            tds2_addr_match:
              $ref: "#/components/schemas/tds2_addr_match"
            tds2_bill_addr_country:
              $ref: "#/components/schemas/tds2_bill_addr_country"
            tds2_bill_addr_state:
              $ref: "#/components/schemas/tds2_bill_addr_state"
            tds2_bill_addr_city:
              $ref: "#/components/schemas/tds2_bill_addr_city"
            tds2_bill_addr_line_1:
              $ref: "#/components/schemas/tds2_bill_addr_line_1"
            tds2_bill_addr_line_2:
              $ref: "#/components/schemas/tds2_bill_addr_line_2"
            tds2_bill_addr_line_3:
              $ref: "#/components/schemas/tds2_bill_addr_line_3"
            tds2_bill_addr_post_code:
              $ref: "#/components/schemas/tds2_bill_addr_post_code"
            tds2_ship_addr_country:
              $ref: "#/components/schemas/tds2_ship_addr_country"
            tds2_ship_addr_state:
              $ref: "#/components/schemas/tds2_ship_addr_state"
            tds2_ship_addr_city:
              $ref: "#/components/schemas/tds2_ship_addr_city"
            tds2_ship_addr_line_1:
              $ref: "#/components/schemas/tds2_ship_addr_line_1"
            tds2_ship_addr_line_2:
              $ref: "#/components/schemas/tds2_ship_addr_line_2"
            tds2_ship_addr_line_3:
              $ref: "#/components/schemas/tds2_ship_addr_line_3"
            tds2_ship_addr_post_code:
              $ref: "#/components/schemas/tds2_ship_addr_post_code"
            tds2_ship_ind:
              $ref: "#/components/schemas/tds2_ship_ind"
            tds2_delivery_email_address:
              $ref: "#/components/schemas/tds2_delivery_email_address"
            tds2_home_phone_cc:
              $ref: "#/components/schemas/tds2_home_phone_cc"
            tds2_home_phone_no:
              $ref: "#/components/schemas/tds2_home_phone_no"
            tds2_mobile_phone_cc:
              $ref: "#/components/schemas/tds2_mobile_phone_cc"
            tds2_mobile_phone_no:
              $ref: "#/components/schemas/tds2_mobile_phone_no"
            tds2_work_phone_cc:
              $ref: "#/components/schemas/tds2_work_phone_cc"
            tds2_work_phone_no:
              $ref: "#/components/schemas/tds2_work_phone_no"
            tds2_delivery_timeframe:
              $ref: "#/components/schemas/tds2_delivery_timeframe"
            tds2_pre_order_date:
              $ref: "#/components/schemas/tds2_pre_order_date"
            tds2_pre_order_purchase_ind:
              $ref: "#/components/schemas/tds2_pre_order_purchase_ind"
            tds2_reorder_items_ind:
              $ref: "#/components/schemas/tds2_reorder_items_ind"
            tds2_recurring_expiry:
              $ref: "#/components/schemas/tds2_recurring_expiry"
            tds2_recurring_frequency:
              $ref: "#/components/schemas/tds2_recurring_frequency"
            tds2_gift_card_amount:
              $ref: "#/components/schemas/tds2_gift_card_amount"
            tds2_gift_card_count:
              $ref: "#/components/schemas/tds2_gift_card_count"
            tds2_gift_card_curr:
              $ref: "#/components/schemas/tds2_gift_card_curr"
          required:
          - job_code
        konbini:
          type: object
          nullable: true
          description: "コンビニ決済パラメータ\\\n`pay_type`に`Konbini`を含めた場合に用いられる、コンビニ決済に関するパラメータです。\n"
          properties:
            payment_term_day:
              $ref: "#/components/schemas/properties-payment_term_day"
            konbini_reception_mail_send_flag:
              $ref: "#/components/schemas/konbini_reception_mail_send_flag"
          required:
          - konbini_reception_mail_send_flag
        paypay:
          type: object
          nullable: true
          description: "PayPayパラメータ\\\n`pay_type`に`Paypay`を含めた場合に用いられる、PayPayによる決済に関するパラメータです。\n"
          properties:
            job_code:
              $ref: "#/components/schemas/PayPayPaymentJobCode"
            order_description:
              $ref: "#/components/schemas/properties-order_description"
          required:
          - job_code
        success_url:
          $ref: "#/components/schemas/success_url"
        cancel_url:
          $ref: "#/components/schemas/cancel_url"
        expire:
          $ref: "#/components/schemas/properties-expire"
        shop_service_name:
          $ref: "#/components/schemas/shop_service_name"
        guide_mail_send_flag:
          $ref: "#/components/schemas/guide_mail_send_flag"
        receiver_mail:
          $ref: "#/components/schemas/receiver_mail"
        mail_customer_name:
          $ref: "#/components/schemas/mail_customer_name"
        thanks_mail_send_flag:
          $ref: "#/components/schemas/thanks_mail_send_flag"
        shop_mail_template_id:
          $ref: "#/components/schemas/shop_mail_template_id"
      required:
      - transaction
    PaymentSessionStatus:
      type: string
      enum:
      - CREATE
      maxLength: 10
      nullable: false
      example: CREATE
      description: "ステータス\\\nリダイレクト型決済URLのステータスを表します。\n\n- `CREATE`：決済URLが作成された状態\n"
    properties-amount:
      type: integer
      nullable: false
      example: 1000
      description: |
        利用金額
    properties-tax:
      type: integer
      nullable: false
      example: 100
      description: |
        税送料
    PaymentSession.Card:
      type: object
      properties:
        job_code:
          $ref: "#/components/schemas/CardPaymentSessionJobCode"
        tds_type:
          nullable: true
          $ref: "#/components/schemas/tds_type"
        td_tenant_name:
          nullable: true
          $ref: "#/components/schemas/td_tenant_name"
        tds2_type:
          nullable: true
          $ref: "#/components/schemas/tds2_type"
        item_code:
          type: string
          nullable: true
          maxLength: 100
          example: null
          description: "商品コード\\\n※ 通常は`null`\n"
      x-req-properties:
        tds2_ch_acc_change:
          type: string
          example: "20240101"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント 最終更新日\\\n形式：`YYYYMMDD`\n"
        tds2_ch_acc_date:
          type: string
          example: "20220101"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント 開設日\\\n形式：`YYYYMMDD`\n"
        tds2_ch_acc_pw_change:
          type: string
          example: "20230101"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n3Dセキュアリクエスターアカウント パスワード最終更新日\\\n形式：`YYYYMMDD`\n"
        tds2_nb_purchase_account:
          type: string
          example: "9999"
          minLength: 1
          maxLength: 4
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去6カ月間の購入回数\n"
        tds2_payment_acc_age:
          type: string
          example: "20231231"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード登録日。\\\n形式：`YYYYMMDD`\n"
        tds2_provision_attempts_day:
          type: string
          example: "999"
          minLength: 3
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去24時間のカード追加の試行回数\n"
        tds2_ship_address_usage:
          type: string
          example: "20230930"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n出荷先住所の最初の使用日。\\\n形式：`YYYYMMDD`\n"
        tds2_ship_name_ind:
          type: string
          enum:
          - "01"
          - "02"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客名と出荷先名が一致しているか否か\\\nカード顧客の顧客名と登録に使用される配送先名の一致/不一致を設定\n\n- `01`: カード顧客名と出荷先名が一致\n- `02`: カード顧客名と出荷先名が不一致\n"
        tds2_suspicious_acc_activity:
          type: string
          enum:
          - "01"
          - "02"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nアカウントの不審行為情報\\\nカード顧客で、不審な行動（過去の不正行為を含む）を加盟店様が発見したかどうかを設定\n\n- `01`: 不審な行動なし\n- `02`: 不審な行動あり\n"
        tds2_txn_activity_day:
          type: string
          example: "999"
          minLength: 3
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n過去24時間の取引回数\n"
        tds2_txn_activity_year:
          type: string
          example: "999"
          minLength: 3
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n前年の取引回数\n"
        tds2_three_ds_req_auth_data:
          type: string
          minLength: 1
          maxLength: 2048
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nログイン証跡\\\nログイン証跡を設定する場合、ログイン方法とログイン日時の設定が必要です。\n"
        tds2_three_ds_req_auth_method:
          type: string
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          - "05"
          - "06"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nログイン方法\\\nログイン方法を設定する場合、ログイン証跡とログイン日時の設定が必要です。\n\n- `01`: 認証なし（ゲストとしてログイン）\n- `02`: 加盟店様自身の認証情報\n- `03`: SSO(シングルサインオン)\n- `04`: イシュアーの認証情報\n- `05`: サードパーティ認証\n- `06`: FIDO認証\n"
        tds2_addr_match:
          type: string
          enum:
          - "Y"
          - "N"
          example: "Y"
          minLength: 1
          maxLength: 1
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n請求先住所と配送先住所が一致しているか否か\n\n- `Y`: 住所は一致している\n- `N`: 住所は一致していない\n"
        tds2_bill_addr_country:
          type: string
          example: "392"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 国コード。\\\n形式：ISO 3166-1 numeric\n"
        tds2_bill_addr_state:
          type: string
          example: "13"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 州または都道府県コード。\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
        tds2_bill_addr_city:
          type: string
          example: 渋谷区
          minLength: 1
          maxLength: 50
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 都市名\n"
        tds2_bill_addr_line_1:
          type: string
          example: 道玄坂1-14-6
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部1行目\\\n\\\n顧客の住所の番地・区画を指定してください。未指定の場合、顧客に登録された`addr_line_1`を設定します。\n\n- 都道府県や市区を含めることができます。\n- 保持している住所をパラメータの形式に分割できない場合は、桁数が収まるように`tds2_bill_addr_line_1` ~ `tds2_bill_addr_line_3`に住所を設定してください。\n- `tds2_bill_addr_line_2`と`tds2_bill_addr_line_3`を空にして、`tds2_bill_addr_line_1`に全ての住所を設定できます。\n"
        tds2_bill_addr_line_2:
          type: string
          example: ヒューマックス渋谷ビル
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部2行目\\\n\\\n顧客の住所の建物名・部屋番号を指定してください。未指定の場合、顧客に登録された`addr_line_2`を設定します。\n"
        tds2_bill_addr_line_3:
          type: string
          example: 7F
          minLength: 1
          maxLength: 100
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 区域部3行目\\\n\\\n顧客の住所のその他を指定してください。未指定の場合、顧客に登録された`addr_line_3`を設定します。\n"
        tds2_bill_addr_post_code:
          type: string
          example: 150-0043
          minLength: 1
          maxLength: 16
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の請求先住所 郵便番号\n"
        tds2_ship_addr_country:
          type: string
          example: "392"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 国コード。\\\n形式：ISO 3166-1 numeric\n"
        tds2_ship_addr_state:
          type: string
          example: "13"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 州または都道府県コード。\\\n参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html)\n"
        tds2_ship_addr_city:
          type: string
          example: 渋谷区
          minLength: 1
          maxLength: 50
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 都市名\n"
        tds2_ship_addr_line_1:
          type: string
          example: 道玄坂1-14-6
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部1行目\n"
        tds2_ship_addr_line_2:
          type: string
          example: ヒューマックス渋谷ビル
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部2行目\n"
        tds2_ship_addr_line_3:
          type: string
          example: 7F
          minLength: 1
          maxLength: 100
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 区域部3行目\n"
        tds2_ship_addr_post_code:
          type: string
          example: 150-0043
          minLength: 1
          maxLength: 16
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の配送先住所 郵便番号\n"
        tds2_ship_ind:
          type: string
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          - "05"
          - "06"
          - "07"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n取引商品の配送方法\n\n- `01`: カード顧客の請求先住所に配送\n- `02`: 加盟店が保持している確認済み住所（請求先住所でない）に配送\n- `03`: カード顧客の請求先住所と異なる住所に配送\n- `04`: 店舗への配送（店舗の住所は配送先住所で指定）\n- `05`: デジタル商品（オンラインサービス、電子ギフトカードおよび償還コードを含む）\n- `06`: 配送なし（旅行およびイベントのチケット）\n- `07`: その他（ゲーム、配送されないデジタルサービス、電子メディアの購読料など）\n"
        tds2_delivery_email_address:
          type: string
          example: email@example.com
          minLength: 1
          maxLength: 254
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客 メールアドレス\n"
        tds2_home_phone_cc:
          type: string
          example: "81"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の自宅電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_home_phone_no`の設定も必要です。\n"
        tds2_home_phone_no:
          type: string
          example: "312345678"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の自宅電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_home_phone_cc`の設定も必要です。\n"
        tds2_mobile_phone_cc:
          type: string
          example: "81"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の携帯電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_mobile_phone_no`の設定も必要です。\n"
        tds2_mobile_phone_no:
          type: string
          example: "9012345678"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の携帯電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_mobile_phone_cc`の設定も必要です。\n"
        tds2_work_phone_cc:
          type: string
          example: "81"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の勤務先電話番号の国コード\\\n形式： ITU-T E.164\\\n※ この値を設定する場合、`tds2_work_phone_no`の設定も必要です。\n"
        tds2_work_phone_no:
          type: string
          example: "312345678"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\nカード顧客の勤務先電話番号（ハイフンなし半角数字のみ）\\\n※ この値を設定する場合、`tds2_work_phone_cc`の設定も必要です。\n"
        tds2_delivery_timeframe:
          type: string
          enum:
          - "01"
          - "02"
          - "03"
          - "04"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品納品時間枠\n\n- `01`: 電子デリバリー\n- `02`: 当日出荷\n- `03`: 翌日出荷\n- `04`: 2日目以降の出荷\n"
        tds2_pre_order_date:
          type: string
          example: "20231231"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の発売予定日\\\n形式：`YYYYMMDD`\n"
        tds2_pre_order_purchase_ind:
          type: string
          enum:
          - "01"
          - "02"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の販売時期情報\n\n- `01`: 発売済み商品\n- `02`: 先行予約商品\n"
        tds2_reorder_items_ind:
          type: string
          enum:
          - "01"
          - "02"
          example: "01"
          minLength: 2
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n商品の注文が初回か再注文か\n\n- `01`: 初回注文\n- `02`: 再注文\n"
        tds2_recurring_expiry:
          type: string
          example: "20231231"
          minLength: 8
          maxLength: 8
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ サブスクリプションなど継続課金型のビジネスモデルのみ\\\n継続課金の終了日\\\n形式：`YYYYMMDD`\n"
        tds2_recurring_frequency:
          type: string
          example: "99"
          minLength: 1
          maxLength: 4
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ サブスクリプションなど継続課金型のビジネスモデルのみ\\\n継続課金の課金間隔の日数（最小）\n"
        tds2_gift_card_amount:
          type: string
          example: "999999"
          minLength: 1
          maxLength: 15
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\nプリペイドカードまたはギフトカードの総購入金額\n"
        tds2_gift_card_count:
          type: string
          example: "99"
          minLength: 1
          maxLength: 2
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\n購入したプリペイドカードまたはギフトカードの総数\n"
        tds2_gift_card_curr:
          type: string
          example: "392"
          minLength: 1
          maxLength: 3
          nullable: true
          description: "<span class=\"smallText color--blue-400\">[3Dセキュア認証パラメータ]</span>\\\n※ プリペイドカードまたはギフトカードを購入する場合のみ\\\nプリペイドカードまたはギフトカードの通貨コード。\\\n形式：ISO 4217 numeric\\\n\\\n以下の通貨コードは利用できません。（債券市場単位等）\\\n`955`, `956`, `957`, `958`, `959`, `960`, `961`, `962`, `963`, `964`, `999`\n"
    PaymentSession.Konbini:
      type: object
      properties:
        konbini_reception_url:
          type: string
          nullable: true
          maxLength: 256
          example: https://secure.test.fincode.jp/v1/links/lk_**********************/konbini
          description: |
            コンビニ決済 支払い画面URL
        payment_term_day:
          type: number
          format: int32
          nullable: true
          minimum: 1
          maximum: 3
          example: 7
          description: "コンビニ決済 支払期限日数\\\n店頭レジでの支払い期限日数です。\n"
        konbini_reception_mail_send_flag:
          type: string
          nullable: false
          enum:
          - "0"
          - "1"
          example: "1"
          description: "コンビニ決済 支払い画面案内メール送信フラグ\\\nコンビニ決済の支払い画面案内メールを送信するかどうかを設定します。\n\n- `0`：送信しない\n- `1`：送信する\n"
    PaymentSession.PayPay:
      type: object
      properties:
        job_code:
          $ref: "#/components/schemas/PayPayPaymentJobCode"
        order_description:
          nullable: true
          type: string
          maxLength: 100
          example: Your Shop上での購入
          description: "注文内容の説明\\\nPayPayアプリ上で注文内容として表示されます。\n"
    PaymentSession:
      type: object
      properties:
        id:
          type: string
          nullable: false
          example: lk_**********************
          minLength: 25
          maxLength: 25
          description: |
            リダイレクト型決済URL ID
        link_url:
          type: string
          nullable: false
          maxLength: 100
          example: https://secure.test.fincode.jp/v1/links/lk_**********************
          description: |
            リダイレクト型決済URL
        success_url:
          type: string
          nullable: true
          maxLength: 256
          example: https://your-service.example.com/success
          description: "成功時リダイレクトURL\\\n`link_url`上で決済に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
        cancel_url:
          type: string
          nullable: true
          maxLength: 256
          example: https://your-service.example.com/cancel
          description: "キャンセル時リダイレクトURL\\\n`link_url`上で決済がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
        status:
          $ref: "#/components/schemas/PaymentSessionStatus"
        expire:
          type: string
          nullable: false
          example: 2022/02/31 23:59:59.999
          description: "リダイレクト型決済URL 有効期限\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
        shop_service_name:
          type: string
          nullable: true
          maxLength: 100
          example: Your Service
          description: "ショップ／サービス名\\\n決済URL上で表示されるショップおよびサービスの名称です。\\\n\\\nデフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。\n"
        guide_mail_send_flag:
          type: string
          enum:
          - "0"
          - "1"
          nullable: false
          example: "1"
          description: "購入メール 送信フラグ\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信したかどうかを示します。\n\n- `0`：送信しなかった（デフォルト）\n- `1`：送信した\n"
        receiver_mail:
          type: string
          nullable: true
          maxLength: 254
          example: receiver-email@example.com
          description: "購入メール 送信先メールアドレス\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。\n"
        mail_customer_name:
          type: string
          nullable: true
          maxLength: 384
          example: 買物 太郎
          description: "購入メール 購入者の名前\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられる購入者の名前です。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。\n"
        thanks_mail_send_flag:
          type: string
          enum:
          - "0"
          - "1"
          nullable: false
          description: "完了メール 送信フラグ\\\n決済が完了した際に購入者に完了メールを送信するかどうかを示します。\n\n- `0`：送信しない（デフォルト）\n- `1`：送信する\n"
        shop_mail_template_id:
          type: string
          nullable: true
          maxLength: 25
          example: null
          description: "メールテンプレートID\\\nメールテンプレートIDが設定されている場合、リダイレクト型決済URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。\n"
        transaction:
          type: object
          nullable: false
          description: "決済共通項目\\\n決済手段を問わず共通して使用される、決済に関するデータです。\n"
          properties:
            pay_type:
              type: array
              nullable: false
              items:
                $ref: "#/components/schemas/PaymentSessionPayType"
              description: "決済手段\\\nこの決済URL上で使用できる決済手段を複数指定します。\n\n- `Card`：カード決済\n- `Konbini`：コンビニ決済\n- `Paypay`：PayPay\n"
            order_id:
              $ref: "#/components/schemas/Payment_properties-id"
            amount:
              $ref: "#/components/schemas/properties-amount"
            tax:
              $ref: "#/components/schemas/properties-tax"
            client_field_1:
              $ref: "#/components/schemas/client_field_n"
            client_field_2:
              $ref: "#/components/schemas/client_field_n"
            client_field_3:
              $ref: "#/components/schemas/client_field_n"
        card:
          $ref: "#/components/schemas/PaymentSession.Card"
        konbini:
          $ref: "#/components/schemas/PaymentSession.Konbini"
        paypay:
          $ref: "#/components/schemas/PaymentSession.PayPay"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    PaymentSession.Creating.Response:
      $ref: "#/components/schemas/PaymentSession"
    properties-success_url:
      type: string
      nullable: true
      maxLength: 256
      example: https://your-service.example.com/success
      description: "成功時リダイレクトURL\\\n`link_url`上でカード登録に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
    properties-cancel_url:
      type: string
      nullable: true
      maxLength: 256
      example: https://your-service.example.com/cancel
      description: "キャンセル時リダイレクトURL\\\n`link_url`上でカード登録がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
    CardRegistrationSession_properties-expire:
      type: string
      nullable: false
      example: 2022/02/31 23:59:59.999
      description: "リダイレクト型カード登録URL 有効期限\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
    properties-shop_service_name:
      type: string
      nullable: true
      maxLength: 100
      example: Your Service
      description: "ショップ／サービス名\\\nカード登録URL上で表示されるショップおよびサービスの名称です。\\\n\\\nデフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。\n"
    properties-receiver_mail:
      type: string
      nullable: true
      maxLength: 254
      example: receiver-email@example.com
      description: "カード登録メール 送信先メールアドレス\\\nリダイレクト型カード登録URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。\n"
    properties-mail_customer_name:
      type: string
      nullable: true
      maxLength: 384
      example: 買物 太郎
      description: "カード登録メール カード登録をするユーザーの名前\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられるユーザーの名前です。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。\n"
    properties-guide_mail_send_flag:
      type: string
      enum:
      - "0"
      - "1"
      nullable: false
      example: "1"
      description: "カード登録メール 送信フラグ\\\nリダイレクト型カード登録URLをfincodeからのメール送信機能で送信したかどうかを示します。\n\n- `0`：送信しなかった（デフォルト）\n- `1`：送信した\n"
    completion_mail_send_flag:
      type: string
      enum:
      - "0"
      - "1"
      nullable: false
      description: "完了メール 送信フラグ\\\n決済が完了した際にカード登録をしたユーザーに完了メールを送信するかどうかを示します。\n\n- `0`：送信しない（デフォルト）\n- `1`：送信する\n"
    properties-shop_mail_template_id:
      type: string
      nullable: true
      maxLength: 25
      example: null
      description: "メールテンプレートID\\\nメールテンプレートIDが設定されている場合、リダイレクト型カード登録URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。\n"
    customer_id:
      $ref: "#/components/schemas/id"
    customer_name:
      type: string
      nullable: true
      minLength: 1
      maxLength: 384
      example: 買物 太郎
      description: |
        顧客名
    CardRegistrationSession.Creating.Request:
      type: object
      properties:
        success_url:
          $ref: "#/components/schemas/properties-success_url"
        cancel_url:
          $ref: "#/components/schemas/properties-cancel_url"
        expire:
          $ref: "#/components/schemas/CardRegistrationSession_properties-expire"
        shop_service_name:
          $ref: "#/components/schemas/properties-shop_service_name"
        receiver_mail:
          $ref: "#/components/schemas/properties-receiver_mail"
        mail_customer_name:
          $ref: "#/components/schemas/properties-mail_customer_name"
        guide_mail_send_flag:
          $ref: "#/components/schemas/properties-guide_mail_send_flag"
        completion_mail_send_flag:
          $ref: "#/components/schemas/completion_mail_send_flag"
        shop_mail_template_id:
          $ref: "#/components/schemas/properties-shop_mail_template_id"
        customer_id:
          $ref: "#/components/schemas/customer_id"
        customer_name:
          $ref: "#/components/schemas/customer_name"
        td_tenant_name:
          $ref: "#/components/schemas/td_tenant_name"
        tds_type:
          $ref: "#/components/schemas/tds_type"
        tds2_type:
          $ref: "#/components/schemas/tds2_type"
        tds2_ch_acc_change:
          $ref: "#/components/schemas/tds2_ch_acc_change"
        tds2_ch_acc_date:
          $ref: "#/components/schemas/tds2_ch_acc_date"
        tds2_ch_acc_pw_change:
          $ref: "#/components/schemas/tds2_ch_acc_pw_change"
        tds2_nb_purchase_account:
          $ref: "#/components/schemas/tds2_nb_purchase_account"
        tds2_payment_acc_age:
          $ref: "#/components/schemas/tds2_payment_acc_age"
        tds2_provision_attempts_day:
          $ref: "#/components/schemas/tds2_provision_attempts_day"
        tds2_ship_address_usage:
          $ref: "#/components/schemas/tds2_ship_address_usage"
        tds2_ship_name_ind:
          $ref: "#/components/schemas/tds2_ship_name_ind"
        tds2_suspicious_acc_activity:
          $ref: "#/components/schemas/tds2_suspicious_acc_activity"
        tds2_txn_activity_day:
          $ref: "#/components/schemas/tds2_txn_activity_day"
        tds2_txn_activity_year:
          $ref: "#/components/schemas/tds2_txn_activity_year"
        tds2_three_ds_req_auth_data:
          $ref: "#/components/schemas/tds2_three_ds_req_auth_data"
        tds2_three_ds_req_auth_method:
          $ref: "#/components/schemas/tds2_three_ds_req_auth_method"
        tds2_addr_match:
          $ref: "#/components/schemas/tds2_addr_match"
        tds2_bill_addr_country:
          $ref: "#/components/schemas/tds2_bill_addr_country"
        tds2_bill_addr_state:
          $ref: "#/components/schemas/tds2_bill_addr_state"
        tds2_bill_addr_city:
          $ref: "#/components/schemas/tds2_bill_addr_city"
        tds2_bill_addr_line_1:
          $ref: "#/components/schemas/tds2_bill_addr_line_1"
        tds2_bill_addr_line_2:
          $ref: "#/components/schemas/tds2_bill_addr_line_2"
        tds2_bill_addr_line_3:
          $ref: "#/components/schemas/tds2_bill_addr_line_3"
        tds2_bill_addr_post_code:
          $ref: "#/components/schemas/tds2_bill_addr_post_code"
        tds2_ship_addr_country:
          $ref: "#/components/schemas/tds2_ship_addr_country"
        tds2_ship_addr_state:
          $ref: "#/components/schemas/tds2_ship_addr_state"
        tds2_ship_addr_city:
          $ref: "#/components/schemas/tds2_ship_addr_city"
        tds2_ship_addr_line_1:
          $ref: "#/components/schemas/tds2_ship_addr_line_1"
        tds2_ship_addr_line_2:
          $ref: "#/components/schemas/tds2_ship_addr_line_2"
        tds2_ship_addr_line_3:
          $ref: "#/components/schemas/tds2_ship_addr_line_3"
        tds2_ship_addr_post_code:
          $ref: "#/components/schemas/tds2_ship_addr_post_code"
        tds2_ship_ind:
          $ref: "#/components/schemas/tds2_ship_ind"
        tds2_delivery_email_address:
          $ref: "#/components/schemas/tds2_delivery_email_address"
        tds2_home_phone_cc:
          $ref: "#/components/schemas/tds2_home_phone_cc"
        tds2_home_phone_no:
          $ref: "#/components/schemas/tds2_home_phone_no"
        tds2_mobile_phone_cc:
          $ref: "#/components/schemas/tds2_mobile_phone_cc"
        tds2_mobile_phone_no:
          $ref: "#/components/schemas/tds2_mobile_phone_no"
        tds2_work_phone_cc:
          $ref: "#/components/schemas/tds2_work_phone_cc"
        tds2_work_phone_no:
          $ref: "#/components/schemas/tds2_work_phone_no"
        tds2_delivery_timeframe:
          $ref: "#/components/schemas/tds2_delivery_timeframe"
        tds2_pre_order_date:
          $ref: "#/components/schemas/tds2_pre_order_date"
        tds2_pre_order_purchase_ind:
          $ref: "#/components/schemas/tds2_pre_order_purchase_ind"
        tds2_reorder_items_ind:
          $ref: "#/components/schemas/tds2_reorder_items_ind"
        tds2_recurring_expiry:
          $ref: "#/components/schemas/tds2_recurring_expiry"
        tds2_recurring_frequency:
          $ref: "#/components/schemas/tds2_recurring_frequency"
        tds2_gift_card_amount:
          $ref: "#/components/schemas/tds2_gift_card_amount"
        tds2_gift_card_count:
          $ref: "#/components/schemas/tds2_gift_card_count"
        tds2_gift_card_curr:
          $ref: "#/components/schemas/tds2_gift_card_curr"
    CardRegistrationSessionStatus:
      type: string
      enum:
      - CREATE
      maxLength: 10
      nullable: false
      example: CREATE
      description: "ステータス\\\nリダイレクト型カード登録URLのステータスを表します。\n\n- `CREATE`：カード登録URLが作成された状態\n"
    CardRegistrationSession:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 25
          nullable: false
          example: lk_**********************
          description: |
            リダイレクト型カード登録URL ID
        link_url:
          type: string
          minLength: 1
          maxLength: 100
          nullable: false
          example: https://secure.test.fincode.jp/v1/links_customers_and_cards/lk_**********************
          description: "リダイレクト型カード登録URL\\\nカード登録を行うユーザーがこのURLにアクセスし、カード情報を登録することで登録手続きが完了します。\n"
        success_url:
          type: string
          nullable: true
          maxLength: 256
          example: https://your-service.example.com/success
          description: "成功時リダイレクトURL\\\n`link_url`上でカード登録に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
        cancel_url:
          type: string
          nullable: true
          maxLength: 256
          example: https://your-service.example.com/cancel
          description: "キャンセル時リダイレクトURL\\\n`link_url`上でカード登録がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。\n"
        status:
          $ref: "#/components/schemas/CardRegistrationSessionStatus"
        expire:
          type: string
          nullable: false
          example: 2022/02/31 23:59:59.999
          description: "リダイレクト型カード登録URL 有効期限\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
        shop_service_name:
          type: string
          nullable: true
          maxLength: 100
          example: Your Service
          description: "ショップ／サービス名\\\nカード登録URL上で表示されるショップおよびサービスの名称です。\\\n\\\nデフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。\n"
        guide_mail_send_flag:
          type: string
          enum:
          - "0"
          - "1"
          nullable: false
          example: "1"
          description: "カード登録メール 送信フラグ\\\nリダイレクト型カード登録URLをfincodeからのメール送信機能で送信したかどうかを示します。\n\n- `0`：送信しなかった（デフォルト）\n- `1`：送信した\n"
        receiver_mail:
          type: string
          nullable: true
          maxLength: 254
          example: receiver-email@example.com
          description: "カード登録メール 送信先メールアドレス\\\nリダイレクト型カード登録URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。\n"
        mail_customer_name:
          type: string
          nullable: true
          maxLength: 384
          example: 買物 太郎
          description: "カード登録メール カード登録をするユーザーの名前\\\nリダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられるユーザーの名前です。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。\n"
        completion_mail_send_flag:
          type: string
          enum:
          - "0"
          - "1"
          nullable: false
          description: "完了メール 送信フラグ\\\n決済が完了した際にカード登録をしたユーザーに完了メールを送信するかどうかを示します。\n\n- `0`：送信しない（デフォルト）\n- `1`：送信する\n"
        shop_mail_template_id:
          type: string
          nullable: true
          maxLength: 25
          example: null
          description: "メールテンプレートID\\\nメールテンプレートIDが設定されている場合、リダイレクト型カード登録URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\\\n\\\nfincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。\n"
        customer_id:
          $ref: "#/components/schemas/id"
        customer_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 384
          example: 買物 太郎
          description: |
            顧客名
        tds_type:
          nullable: true
          $ref: "#/components/schemas/tds_type"
        td_tenant_name:
          nullable: true
          $ref: "#/components/schemas/td_tenant_name"
        tds2_type:
          nullable: true
          $ref: "#/components/schemas/tds2_type"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    CardRegistrationSession.Creating.Response:
      $ref: "#/components/schemas/CardRegistrationSession"
    Plan.ListRetrieving.QueryParams:
      type: object
      properties:
        total_amount_min:
          type: integer
          format: int64
          description: "合計金額（始値）\\\n利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以上の合計金額を持つプラン情報を取得します。\n"
        total_amount_max:
          type: integer
          format: int64
          description: "合計金額（終値）\\\n利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以下の合計金額を持つプラン情報を取得します。\n"
        interval_pattern:
          type: string
          enum:
          - month
          - year
          description: "課金間隔\n\n- `month`: 月\n- `year`: 年\n"
        update_date_from:
          type: string
          description: "更新日時（始値）\\\n更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新された決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        update_date_to:
          type: string
          description: "更新日時（終値）\\\n更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新された決済情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        plan_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 25
          example: Gold Plan
          description: "プラン名\\\n`plan_name`に対する部分一致検索を行います。\n"
        delete_flag:
          type: string
          nullable: true
          minLength: 1
          maxLength: 1
          enum:
          - "0"
          - "1"
          description: |
            削除済みフラグ
        sort:
          $ref: "#/components/schemas/sort"
    Plan:
      type: object
      properties:
        id:
          type: string
          nullable: false
          example: pl_*********************
          minLength: 1
          maxLength: 25
          description: |
            プランID
        plan_name:
          type: string
          nullable: false
          maxLength: 200
          example: Basic Plan
          description: |
            プラン名
        description:
          type: string
          nullable: true
          maxLength: 400
          example: Basic Plan Description
          description: |
            プランの説明
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        amount:
          type: integer
          format: int64
          nullable: false
          example: 1000
          description: |
            利用金額
        tax:
          type: integer
          format: int64
          nullable: false
          example: 100
          description: |
            税送料
        total_amount:
          type: integer
          format: int64
          nullable: false
          example: 1100
          description: "合計金額\\\n利用金額と税送料の合計金額です。\n"
        interval_pattern:
          type: string
          enum:
          - month
          - year
          nullable: false
          example: month
          description: |
            課金間隔
            
            - `month`：月
            - `year`：年
        interval_count:
          type: number
          format: integer
          nullable: false
          enum:
          - 1
          - 2
          - 3
          - 6
          description: |
            課金間隔数
            
            - `1`：月次／年次の課金
            - `2`：2ヶ月に1回の課金
            - `3`：3ヶ月に1回の課金
            - `6`：6ヶ月に1回の課金
        used_flag:
          type: string
          nullable: false
          enum:
          - "0"
          - "1"
          example: "1"
          description: "利用済みフラグ\\\nこのプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。\n\n- `0`：このプランを用いたサブスクリプションはまだ存在しない\n- `1`：このプランを用いたサブスクリプションが存在する\n"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
      x-req-properties:
        amount:
          type: string
          nullable: false
          minLength: 1
          maxLength: 7
          example: "1000"
          description: "利用金額\\\n`tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\n"
        tax:
          type: string
          nullable: false
          minLength: 1
          maxLength: 7
          example: "100"
          description: "税送料\\\n`amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\n"
        interval_pattern:
          type: string
          enum:
          - month
          - year
          nullable: false
          example: month
          description: "課金間隔\\\n課金間隔数（`interval_count`）を指定した場合必須です。\n省略した場合、`month`が設定されます。\n\n- `month`：月\n- `year`：年\n"
        interval_count:
          type: string
          nullable: false
          enum:
          - "1"
          - "2"
          - "3"
          - "6"
          default: "1"
          description: "課金間隔数\\\n課金間隔（`interval_pattern`）を指定した場合必須です。\n省略した場合、`1`が設定されます。\n\n- `1`：月次／年次の課金\n- `2`：2ヶ月に1回の課金\n- `3`：3ヶ月に1回の課金\n- `6`：6ヶ月に1回の課金\n"
    Plan.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Plan"
    Plan.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/Plan.list"
    Plan_properties-id:
      type: string
      nullable: false
      example: pl_*********************
      minLength: 1
      maxLength: 25
      description: |
        プランID
    plan_name:
      type: string
      nullable: false
      maxLength: 200
      example: Basic Plan
      description: |
        プラン名
    description:
      type: string
      nullable: true
      maxLength: 400
      example: Basic Plan Description
      description: |
        プランの説明
    x-req-properties-amount:
      type: string
      nullable: false
      minLength: 1
      maxLength: 7
      example: "1000"
      description: "利用金額\\\n`tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\n"
    x-req-properties-tax:
      type: string
      nullable: false
      minLength: 1
      maxLength: 7
      example: "100"
      description: "税送料\\\n`amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\n"
    interval_pattern:
      type: string
      enum:
      - month
      - year
      nullable: false
      example: month
      description: "課金間隔\\\n課金間隔数（`interval_count`）を指定した場合必須です。\n省略した場合、`month`が設定されます。\n\n- `month`：月\n- `year`：年\n"
    interval_count:
      type: string
      nullable: false
      enum:
      - "1"
      - "2"
      - "3"
      - "6"
      default: "1"
      description: "課金間隔数\\\n課金間隔（`interval_pattern`）を指定した場合必須です。\n省略した場合、`1`が設定されます。\n\n- `1`：月次／年次の課金\n- `2`：2ヶ月に1回の課金\n- `3`：3ヶ月に1回の課金\n- `6`：6ヶ月に1回の課金\n"
    Plan.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Plan_properties-id"
        plan_name:
          $ref: "#/components/schemas/plan_name"
        description:
          $ref: "#/components/schemas/description"
        amount:
          $ref: "#/components/schemas/x-req-properties-amount"
        tax:
          $ref: "#/components/schemas/x-req-properties-tax"
        interval_pattern:
          $ref: "#/components/schemas/interval_pattern"
        interval_count:
          $ref: "#/components/schemas/interval_count"
      required:
      - plan_name
      - amount
    Plan.Creating.Response:
      $ref: "#/components/schemas/Plan"
    PlanId_schema:
      type: string
      example: pl_*********************
    Plan.Retrieving.Response:
      $ref: "#/components/schemas/Plan"
    Plan.Updating.Request:
      type: object
      properties:
        plan_name:
          $ref: "#/components/schemas/plan_name"
        description:
          $ref: "#/components/schemas/description"
        amount:
          $ref: "#/components/schemas/x-req-properties-amount"
        tax:
          $ref: "#/components/schemas/x-req-properties-tax"
        interval_pattern:
          $ref: "#/components/schemas/interval_pattern"
        interval_count:
          $ref: "#/components/schemas/interval_count"
    Plan.Updating.Response:
      $ref: "#/components/schemas/Plan"
    Plan.Deleting.Response:
      $ref: "#/components/schemas/Plan"
    SubscriptionPayType:
      type: string
      enum:
      - Card
      - Directdebit
      example: Card
      description: "決済種別（サブスクリプションに対応しているもの）\n\n- `Card`: クレジットカード/デビットカード/プリペイドカード\n- `Directdebit`: 口座振替\n"
    SubscriptionStatus:
      type: string
      enum:
      - ACTIVE
      - RUNNING
      - CANCELED
      - INCOMPLETE
      minLength: 6
      maxLength: 10
      description: "ステータス\n\n- `ACTIVE`: サブスクリプションが有効<br /><span class=\"smallText\">設定した課金日に顧客に対して課金が行われます。</span>\n- `RUNNING`: 課金処理中\n- `CANCELED`: 解約済み<br /><span class=\"smallText\">顧客に対して課金は行われません。</span>\n- `INCOMPLETE`: 登録失敗<br /><span class=\"smallText\">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>\n"
    total_amount:
      type: integer
      format: int64
      nullable: false
      example: 1100
      description: "合計金額\\\n利用金額と税送料の合計金額です。\n"
    properties-interval_pattern:
      type: string
      enum:
      - month
      - year
      nullable: false
      example: month
      description: |
        課金間隔
        
        - `month`：月
        - `year`：年
    Subscription.ListRetrieving.QueryParams:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        id:
          $ref: "#/components/schemas/Subscription_properties-id"
        customer_id:
          $ref: "#/components/schemas/id"
        plan_id:
          $ref: "#/components/schemas/Plan_properties-id"
        status:
          $ref: "#/components/schemas/SubscriptionStatus"
        total_amount_min:
          $ref: "#/components/schemas/total_amount"
        total_amount_max:
          $ref: "#/components/schemas/total_amount"
        interval_pattern:
          $ref: "#/components/schemas/properties-interval_pattern"
        start_date_from:
          type: string
          description: "課金開始日（始値）\\\n課金開始日（`start_date`）を対象に範囲検索を行います。この日付以降に課金開始されたサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        start_date_to:
          type: string
          description: "課金開始日（終値）\\\n課金開始日（`start_date`）を対象に範囲検索を行います。この日付以前に課金開始されたサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        stop_date_from:
          type: string
          description: "課金停止日（始値）\\\n課金停止日（`stop_date`）を対象に範囲検索を行います。この日付以降に課金停止されたサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        stop_date_to:
          type: string
          description: "課金停止日（終値）\\\n課金停止日（`stop_date`）を対象に範囲検索を行います。この日付以前に課金停止されたサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        next_charge_date_from:
          type: string
          description: "次回課金日（始値）\\\n次回課金日（`next_charge_date`）を対象に範囲検索を行います。この日付以降に次回課金されるサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        next_charge_date_to:
          type: string
          description: "次回課金日（終値）\\\n次回課金日（`next_charge_date`）を対象に範囲検索を行います。この日付以前に次回課金されるサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        update_date_from:
          type: string
          description: "更新日時（始値）\\\n更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新されたサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        update_date_to:
          type: string
          description: "更新日時（終値）\\\n更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新されたサブスクリプション情報を取得します。\\\n\\\n形式：`yyyy/MM/dd`\n"
        sort:
          $ref: "#/components/schemas/sort"
      required:
      - pay_type
    Plan_properties-amount:
      type: integer
      format: int64
      nullable: false
      example: 1000
      description: |
        利用金額
    Plan_properties-tax:
      type: integer
      format: int64
      nullable: false
      example: 100
      description: |
        税送料
    Subscription:
      type: object
      properties:
        id:
          type: string
          example: su_*********************
          minLength: 1
          maxLength: 25
          description: |
            サブスクリプションID
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        plan_id:
          $ref: "#/components/schemas/Plan_properties-id"
        plan_name:
          $ref: "#/components/schemas/plan_name"
        customer_id:
          $ref: "#/components/schemas/id"
        card_id:
          $ref: "#/components/schemas/properties-id"
        payment_method_id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        amount:
          $ref: "#/components/schemas/Plan_properties-amount"
        tax:
          $ref: "#/components/schemas/Plan_properties-tax"
        total_amount:
          $ref: "#/components/schemas/total_amount"
        initial_amount:
          type: integer
          minimum: 1
          maximum: 9999999
          description: "初回利用金額\\\n\\\nこの値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`amount`の金額で課金します。\n"
        initial_tax:
          type: integer
          minimum: 1
          maximum: 9999999
          description: "初回税送料\\\n\\\nこの値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`tax`の金額で課金します。\n"
        initial_total_amount:
          type: integer
          minimum: 1
          maximum: 9999999
          description: "初回合計金額\\\n\\\n`initial_amount`と`initial_tax`の合計金額です。\n"
        status:
          $ref: "#/components/schemas/SubscriptionStatus"
        start_date:
          type: string
          example: 2022/05/16 00:00:00.000
          description: "課金開始日\\\nサブスクリプションの開始日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        next_charge_date:
          type: string
          example: 2022/06/16 00:00:00.000
          description: "次回課金日\\\nサブスクリプションの次回課金日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        stop_date:
          type: string
          example: 2022/06/16 00:00:00.000
          nullable: true
          description: "課金停止日\\\nサブスクリプションの停止日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        end_month_flag:
          type: string
          enum:
          - "0"
          - "1"
          description: |
            月末課金フラグ
            
            - `0`：月末課金を行わない
            - `1`：月末課金を行う
        send_url:
          type: string
          nullable: true
          example: null
          description: |
            ※ 閉塞機能
        error_code:
          $ref: "#/components/schemas/error_code"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        remarks:
          $ref: "#/components/schemas/remarks"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
      x-req-properties:
        initial_amount:
          type: string
          minLength: 1
          maxLength: 7
          description: "初回利用金額\\\n\\\nこの値を設定すると、このサブスクリプションは初回の課金のみこの金額で課金し2回目以降はプラン情報がもつ`amount`の金額で課金します。\n"
        initial_tax:
          type: string
          minLength: 1
          maxLength: 7
          description: "初回税送料\\\n\\\nこの値を設定すると、このサブスクリプションは初回の課金のみこの金額で課金し2回目以降はプラン情報がもつ`tax`の金額で課金します。\n"
    Subscription.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
    Subscription.ListRetrieving.Response:
      $ref: "#/components/schemas/Subscription.list"
    start_date:
      type: string
      example: 2022/05/16 00:00:00.000
      description: "課金開始日\\\nサブスクリプションの開始日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    stop_date:
      type: string
      example: 2022/06/16 00:00:00.000
      nullable: true
      description: "課金停止日\\\nサブスクリプションの停止日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    end_month_flag:
      type: string
      enum:
      - "0"
      - "1"
      description: |
        月末課金フラグ
        
        - `0`：月末課金を行わない
        - `1`：月末課金を行う
    initial_amount:
      type: string
      minLength: 1
      maxLength: 7
      description: "初回利用金額\\\n\\\nこの値を設定すると、このサブスクリプションは初回の課金のみこの金額で課金し2回目以降はプラン情報がもつ`amount`の金額で課金します。\n"
    initial_tax:
      type: string
      minLength: 1
      maxLength: 7
      description: "初回税送料\\\n\\\nこの値を設定すると、このサブスクリプションは初回の課金のみこの金額で課金し2回目以降はプラン情報がもつ`tax`の金額で課金します。\n"
    send_url:
      type: string
      nullable: true
      example: null
      deprecated: true
      description: |
        ※ 閉塞機能
    Subscription.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Subscription_properties-id"
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        plan_id:
          $ref: "#/components/schemas/Plan_properties-id"
        customer_id:
          $ref: "#/components/schemas/id"
        card_id:
          $ref: "#/components/schemas/properties-id"
        payment_method_id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        start_date:
          $ref: "#/components/schemas/start_date"
        stop_date:
          $ref: "#/components/schemas/stop_date"
        end_month_flag:
          $ref: "#/components/schemas/end_month_flag"
        initial_amount:
          $ref: "#/components/schemas/initial_amount"
        initial_tax:
          $ref: "#/components/schemas/initial_tax"
        remarks:
          $ref: "#/components/schemas/remarks"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        send_url:
          $ref: "#/components/schemas/send_url"
      required:
      - pay_type
      - plan_id
      - customer_id
      - start_date
    Subscription.Creating.Response:
      $ref: "#/components/schemas/Subscription"
    SubscriptionId_schema:
      type: string
      example: su_*********************
    Subscription.Retrieving.Response:
      $ref: "#/components/schemas/Subscription"
    Subscription.Updating.Request:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        plan_id:
          $ref: "#/components/schemas/Plan_properties-id"
        start_date:
          $ref: "#/components/schemas/start_date"
        stop_date:
          $ref: "#/components/schemas/stop_date"
        end_month_flag:
          $ref: "#/components/schemas/end_month_flag"
        initial_amount:
          $ref: "#/components/schemas/initial_amount"
        initial_tax:
          $ref: "#/components/schemas/initial_tax"
        remarks:
          $ref: "#/components/schemas/remarks"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
      required:
      - pay_type
    Subscription.Updating.Response:
      $ref: "#/components/schemas/Subscription"
    Subscription.Unsubscribing.Response:
      $ref: "#/components/schemas/Subscription"
    properties-pay_type:
      $ref: "#/components/schemas/SubscriptionPayType"
    SubscriptionResult.ListRetrieving.QueryParams:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/properties-pay_type"
        sort:
          $ref: "#/components/schemas/sort"
      required:
      - pay_type
    SubscriptionResultStatus:
      type: string
      enum:
      - CHECKED
      - SUCCEEDED
      - FAILED
      minLength: 1
      maxLength: 15
      example: SUCCEEDED
      description: "ステータス\\\nサブスクリプション課金のステータス（結果）です。\n\n- `CHECKED`：有効性チェックに成功\n- `SUCCEEDED`：課金成功\n- `FAILED`：課金失敗\n"
    properties-card_no:
      $ref: "#/components/schemas/card_no"
    properties-interval_count:
      type: number
      format: integer
      nullable: false
      enum:
      - 1
      - 2
      - 3
      - 6
      description: |
        課金間隔数
        
        - `1`：月次／年次の課金
        - `2`：2ヶ月に1回の課金
        - `3`：3ヶ月に1回の課金
        - `6`：6ヶ月に1回の課金
    SubscriptionResult:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Subscription_properties-id"
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        status:
          $ref: "#/components/schemas/SubscriptionResultStatus"
        process_date:
          $ref: "#/components/schemas/process_date"
        plan_id:
          $ref: "#/components/schemas/Plan_properties-id"
        amount:
          $ref: "#/components/schemas/Plan_properties-amount"
        tax:
          $ref: "#/components/schemas/Plan_properties-tax"
        total_amount:
          $ref: "#/components/schemas/total_amount"
        customer_id:
          $ref: "#/components/schemas/id"
        payment_method_id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        card_id:
          $ref: "#/components/schemas/properties-id"
        card_no:
          $ref: "#/components/schemas/properties-card_no"
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        access_id:
          $ref: "#/components/schemas/access_id"
        send_url:
          type: string
          nullable: true
          example: null
          deprecated: true
          description: |
            ※ 閉塞機能
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        interval_pattern:
          $ref: "#/components/schemas/properties-interval_pattern"
        interval_count:
          $ref: "#/components/schemas/properties-interval_count"
        remarks:
          type: string
          nullable: true
          minLength: 1
          maxLength: 9
          example: カ）ジーエムオーイ
          description: "ご利用明細表示内容\\\nデフォルト：ショップ名カナの先頭9文字\n"
        error_code:
          $ref: "#/components/schemas/error_code"
        created:
          $ref: "#/components/schemas/created"
    SubscriptionResult.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - type: object
        properties:
          list:
            type: array
            items:
              $ref: "#/components/schemas/SubscriptionResult"
    PaymentBulkStatus:
      type: string
      enum:
      - CHECKING
      - CHECKED
      - RUNNING
      - COMPLETED
      - ERROR
      description: "一括決済 ステータス\n\n- `CHECKING`: チェック中<br /><span class=\"smallText\">アップロードした一括決済リクエストデータの形式などをチェック中</span>\n- `CHECKED`: チェック済み<br /><span class=\"smallText\">データのチェックが完了し、決済処理の実行を待っています。</span>\n- `RUNNING`: 決済処理中<br /><span class=\"smallText\">一括決済処理が実行中</span>\n- `COMPLETED`: 完了\n- `ERROR`: エラー<br /><span class=\"smallText\">決済処理中に1件以上のエラーが発生</span>\n"
    PaymentBulkPayType:
      type: string
      enum:
      - Card
      example: Card
      description: "決済種別（一括決済に対応しているもの）\n\n- `Card`: クレジットカード/デビットカード/プリペイドカード\n"
    file_name:
      type: string
      minLength: 1
      maxLength: 100
      description: |
        一括決済データファイル名
    PaymentBulk.ListRetrieving.QueryParams:
      type: object
      properties:
        process_plan_date_from:
          type: string
          nullable: true
          example: 2022/05/01
          description: "処理予定日の範囲指定（開始日）を指定します。\\\n処理予定日（`process_plan_date`）を対象に範囲検索を行います。この日付以降に処理予定日が設定された一括決済情報を検索します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        process_plan_date_to:
          type: string
          nullable: true
          example: 2022/05/31
          description: "処理予定日の範囲指定（終了日）を指定します。\\\n処理予定日（`process_plan_date`）を対象に範囲検索を行います。この日付以前に処理予定日が設定された一括決済情報を検索します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        status:
          $ref: "#/components/schemas/PaymentBulkStatus"
        pay_type:
          $ref: "#/components/schemas/PaymentBulkPayType"
        file_name:
          $ref: "#/components/schemas/file_name"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
        created_from:
          type: string
          nullable: true
          example: 2022/05/01
          description: "作成日時の範囲指定（開始日）を指定します。\\\n作成日時（`created`）を対象に範囲検索を行います。この日付以降に登録された一括決済情報を検索します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        created_to:
          type: string
          nullable: true
          example: 2022/05/31
          description: "作成日時の範囲指定（終了日）を指定します。\\\n作成日時（`created`）を対象に範囲検索を行います。この日付以前に登録された一括決済情報を検索します。\\\n\\\n形式： `yyyy/MM/dd`\n"
        sort:
          $ref: "#/components/schemas/sort"
    PaymentBulkDetailStatus:
      type: string
      enum:
      - CHECKED
      - SUCCEEDED
      - FAILED
      description: "ステータス\n\n- `CHECKED`: チェック済み<br /><span class=\"smallText\">データのチェックが完了し、決済処理の実行を待っています。</span>\n- `SUCCEEDED`: 決済成功<br /><span class=\"smallText\">この決済の処理においてエラーが発生せず請求が完了しました。</span>\n- `FAILED`: 決済失敗<br /><span class=\"smallText\">この決済の処理において1件以上のエラーが発生しました。</span>\n"
    PaymentBulk:
      type: object
      properties:
        id:
          type: string
          minLength: 25
          maxLength: 25
          description: |
            一括決済ID
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        pay_type:
          $ref: "#/components/schemas/PaymentBulkPayType"
        status:
          $ref: "#/components/schemas/PaymentBulkDetailStatus"
        process_plan_date:
          type: string
          description: "一括決済 処理予定日\\\nこの一括決済の処理予定日です。\\\n\\\n形式：`yyyy/MM/dd`\n"
        file_name:
          type: string
          minLength: 1
          maxLength: 100
          description: |
            一括決済データファイル名
        process_start_date:
          type: string
          nullable: true
          description: "一括決済 処理開始日時\\\nこの一括決済の処理開始日時です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        process_end_date:
          type: string
          nullable: true
          description: "一括決済 処理終了日時\\\nこの一括決済の処理終了日時です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        total_count:
          type: integer
          format: int32
          description: "一括決済 総件数\\\nこの一括決済に含まれる決済の件数です。\n"
        process_success_count:
          type: integer
          format: int32
          description: "一括決済 成功件数\\\nこの一括決済の処理に成功した決済の件数です。\n"
        process_failure_count:
          type: integer
          format: int32
          description: "一括決済 失敗件数\\\nこの一括決済の処理に失敗した決済の件数です。\n"
        error_code:
          $ref: "#/components/schemas/error_code"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
      x-req-properties:
        file:
          type: string
          description: "一括決済情報を記載したJSONファイル。\\\n\\\n以下のようなファイルをアップロードします。\n```json\n{\n    \"data\": [\n        {\n            \"id\": \"order_001\",\n            \"amount\": \"1000\",\n            \"tax\": \"100\",\n            \"customer_id\": \"c_**********************\",\n            \"card_id\": \"cs_**********************\",\n            \"client_field_1\": \"自由項目1\",\n            \"client_field_2\": \"自由項目2\",\n            \"client_field_3\": \"自由項目3\"\n        },\n        {\n            \"id\": \"order_002\",\n            \"amount\": \"1000\",\n            \"customer_id\": \"c_**********************\",\n            \"card_id\": \"cs_**********************\"\n        },\n        ...\n    ]\n}\n```\nパラメータ仕様は以下の通りで、各パラメータの形式は決済登録・決済実行APIに準拠します。（*は必須項目）\n\n- `data`: 決済情報のリストを格納する配列\n- `data[].id`: オーダーID*\n- `data[].amount`: 利用金額*\n- `data[].tax`: 税送料\n- `data[].customer_id`: 顧客ID*\n- `data[].card_id`: カードID\n- `data[].client_field_1`: 自由項目1\n- `data[].client_field_2`: 自由項目2\n- `data[].client_field_3`: 自由項目3\n"
    PaymentBulk.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/PaymentBulk"
    PaymentBulk.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/PaymentBulk.list"
    process_plan_date:
      type: string
      description: "一括決済 処理予定日\\\nこの一括決済の処理予定日です。\\\n\\\n形式：`yyyy/MM/dd`\n"
    file:
      type: string
      description: "一括決済情報を記載したJSONファイル。\\\n\\\n以下のようなファイルをアップロードします。\n```json\n{\n    \"data\": [\n        {\n            \"id\": \"order_001\",\n            \"amount\": \"1000\",\n            \"tax\": \"100\",\n            \"customer_id\": \"c_**********************\",\n            \"card_id\": \"cs_**********************\",\n            \"client_field_1\": \"自由項目1\",\n            \"client_field_2\": \"自由項目2\",\n            \"client_field_3\": \"自由項目3\"\n        },\n        {\n            \"id\": \"order_002\",\n            \"amount\": \"1000\",\n            \"customer_id\": \"c_**********************\",\n            \"card_id\": \"cs_**********************\"\n        },\n        ...\n    ]\n}\n```\nパラメータ仕様は以下の通りで、各パラメータの形式は決済登録・決済実行APIに準拠します。（*は必須項目）\n\n- `data`: 決済情報のリストを格納する配列\n- `data[].id`: オーダーID*\n- `data[].amount`: 利用金額*\n- `data[].tax`: 税送料\n- `data[].customer_id`: 顧客ID*\n- `data[].card_id`: カードID\n- `data[].client_field_1`: 自由項目1\n- `data[].client_field_2`: 自由項目2\n- `data[].client_field_3`: 自由項目3\n"
    PaymentBulk.Creating.Request:
      type: object
      properties:
        file:
          $ref: "#/components/schemas/file"
    PaymentBulk.Creating.Response:
      $ref: "#/components/schemas/PaymentBulk"
    PaymentBulkId_schema:
      type: string
      example: bp_**********************
    PaymentBulkDetail.ListRetrieving.QueryParams:
      type: object
      properties:
        pay_type:
          $ref: "#/components/schemas/PaymentBulkPayType"
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        status:
          $ref: "#/components/schemas/PaymentBulkDetailStatus"
      required:
      - pay_type
    PaymentBulk_properties-id:
      type: string
      minLength: 25
      maxLength: 25
      description: |
        一括決済ID
    properties-total_amount:
      type: integer
      format: int64
      nullable: false
      example: 1100
      description: "合計金額\\\n`amount`と`tax`の合計値です。\n"
    item_code:
      type: string
      nullable: true
      minLength: 7
      maxLength: 7
      description: |
        商品コード
    transaction_id:
      type: string
      nullable: true
      minLength: 28
      maxLength: 28
      example: null
      description: |
        トランザクションID
    approve:
      type: string
      nullable: true
      minLength: 1
      maxLength: 7
      example: null
      description: |
        承認番号
    forward:
      type: string
      nullable: true
      minLength: 1
      maxLength: 7
      example: "12345"
      description: |
        仕向け先
    PaymentBulkDetail:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PaymentBulk_properties-id"
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        access_id:
          $ref: "#/components/schemas/access_id"
        job_code:
          $ref: "#/components/schemas/CardPaymentJobCode"
        amount:
          $ref: "#/components/schemas/properties-amount"
        tax:
          $ref: "#/components/schemas/properties-tax"
        total_amount:
          $ref: "#/components/schemas/properties-total_amount"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        pay_times:
          $ref: "#/components/schemas/CardPayTimes"
        customer_id:
          $ref: "#/components/schemas/id"
        card_id:
          $ref: "#/components/schemas/properties-id"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        error_code:
          $ref: "#/components/schemas/error_code"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
        item_code:
          $ref: "#/components/schemas/item_code"
        transaction_id:
          $ref: "#/components/schemas/transaction_id"
        approve:
          $ref: "#/components/schemas/approve"
        forward:
          $ref: "#/components/schemas/forward"
    PaymentBulkDetail.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/PaymentBulkDetail"
          description: "一括決済詳細リスト\\\n\\\n決済1件につき1オブジェクトが格納され、オブジェクト内には決済情報が格納されます。\n"
    PaymentBulkErrorDetail:
      type: object
      properties:
        number:
          type: string
          description: |
            行数
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/FincodeAPIError"
    PaymentBulkErrorDetail.list:
      type: object
      properties:
        error_detail:
          type: array
          items:
            $ref: "#/components/schemas/PaymentBulkErrorDetail"
          description: "一括決済エラー詳細リスト\\\n\\\nエラー1件につき1オブジェクトが格納され、オブジェクト内にはエラーが発生した決済のIDとその決済で発生したエラーのリストが格納されます。\n"
    PaymentBulkDetail.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - properties:
          error_code:
            $ref: "#/components/schemas/error_code"
      - $ref: "#/components/schemas/PaymentBulkDetail.list"
      - $ref: "#/components/schemas/PaymentBulkErrorDetail.list"
    PaymentBulk.Deleting.Response:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PaymentBulk_properties-id"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
    DepositStatusCode:
      type: integer
      enum:
      - 3001
      - 3002
      - 3003
      - 3004
      - 3005
      - 3006
      - 3007
      - 3008
      - 3009
      - 3010
      - 3011
      - 3012
      - 3013
      description: "入金ステータス\n\n- `3001`: 金額確定前<br /><span class=\"smallText\">この集計期間中の売上入金に関してまだ集計中であり金額が確定していない状態。入金はされていません。</span>\n- `3002`: 金額確定済み<br /><span class=\"smallText\">この集計期間中の売上入金の金額が確定した状態。入金はされていません。</span>\n- `3003`: 入金済み<br /><span class=\"smallText\">この集計期間中のfincodeからの売上の入金が完了した状態。</span>\n- `3004`: 入金停止中<br /><span class=\"smallText\">この集計期間中のfincodeからの売上の入金に際し何らかの懸念事項があり差し止めている状態。解消後fincodeはできるだけ早く入金を再試行します。</span>\n- `3005`: 入金エラー<br /><span class=\"smallText\">この集計期間中のfincodeからの売上の入金に何らかの理由で失敗した状態。解消後fincodeはできるだけ早く入金を再試行します。</span>\n- `3006`: 請求中<br /><span class=\"smallText\">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求している状態。</span>\n- `3007`: 請求エラー<br /><span class=\"smallText\">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求が必要になったものの何らかのエラーにより失敗した状態。</span>\n- `3008`: 請求停止中<br /><span class=\"smallText\">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求が必要になったものの何らかの理由により差し止めている状態。</span>\n- `3009`: 支払済み<br /><span class=\"smallText\">集計期間中のキャンセル金額が売上金額を上回り発生したfincodeからショップへの請求に対する入金が確認できた状担。</span>\n- `3010`: 本人確認書類未確認<br /><span class=\"smallText\">この集計期間中のfincodeからの売上の入金に際し本人確認書類の提出が確認できないため差し止めている状態。解消後fincodeはできるだけ早く入金を再試行します。</span>\n- `3011`: 精算済み<br /><span class=\"smallText\">売上が0円のまま入金額が確定した状態。</span>\n- `3012`: 入金開始前<br /><span class=\"smallText\">初回入金がまだ実施されていない状態。</span>\n- `3013`: 契約不成立<br /><span class=\"smallText\">fincodeとの契約が不成立となった状態。</span>\n"
    Account.ListRetrieving.QueryParams:
      type: object
      properties:
        processed:
          type: string
          nullable: true
          example: 2022/05
          description: "確定日（入金サイクルの締め日）を月単位で絞り込みます。\\\n形式： `yyyy/MM`\n"
        status:
          $ref: "#/components/schemas/DepositStatusCode"
          nullable: true
          description: "入金ステータス\\\nカンマ区切りにすることで複数指定（OR検索）できます。\n\n- `3001`: 金額確定前\n- `3002`: 金額確定済み\n- `3003`: 入金済み\n- `3004`: 入金停止中\n- `3005`: 入金エラー\n- `3006`: 請求中\n- `3007`: 請求エラー\n- `3008`: 請求停止中\n- `3009`: 支払済み\n- `3010`: 本人確認書類未確認\n- `3011`: 精算済み\n- `3012`: 入金開始前\n- `3013`: 契約不成立\n"
        scheduled_from:
          type: string
          format: date
          nullable: true
          example: 2022/05/01
          description: "入金予定日の範囲指定（開始日）を指定します。\\\nこの日付以降に入金が行われた売上入金情報を検索できます。\\\n形式： `yyyy/MM/dd`\n"
        scheduled_to:
          type: string
          format: date
          nullable: true
          example: 2022/05/31
          description: "入金予定日の範囲指定（終了日）を指定します。\\\nこの日付以前に入金が行われた売上入金情報を検索できます。\\\n形式： `yyyy/MM/dd`\n"
    Account_properties-id:
      type: string
      minLength: 32
      maxLength: 32
      example: sales_s_***********_******_*****
      description: |
        売上入金ID
    account_id:
      type: integer
      minimum: 7
      maximum: 7
      example: 1234567
      description: |
        精算ID
    shop_id:
      type: string
      minLength: 13
      maxLength: 13
      example: s_***********
      description: |
        ショップID
    scheduled_deposit_date:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "売上入金 入金予定日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    aggregate_term_start:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "売上入金 集計期間の開始日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    aggregate_term_end:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "売上入金 集計期間の終了日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    deposit_date:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "売上入金 入金実績日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    payment_deadline:
      type: string
      nullable: true
      example: null
      description: "（請求が発生した場合）支払期限日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    payment_completion_date:
      type: string
      nullable: true
      example: null
      description: "（請求が発生した場合）請求日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    count:
      type: integer
      nullable: true
      example: 3
      description: |
        この売上入金に含まれる売上入金詳細の件数
    bank_transfer_fee:
      type: integer
      nullable: true
      example: 0
      description: |
        振込手数料
    Account_properties-total_amount:
      type: integer
      nullable: true
      example: 1000
      description: |
        この売上入金において精算の対象となった取引の総額。
    fee_amount:
      type: integer
      nullable: true
      example: 30
      description: |
        この売上入金において精算の対象となった取引にかかるfincodeへの手数料
    web_registration_fee_amount:
      type: integer
      nullable: true
      example: 400
      description: "この売上入金の精算期間中に発生した振替口座のWeb登録手数料\\\n※ 口座振替のみ\n"
    deposit_amount:
      type: integer
      nullable: true
      example: 568
      description: "売上入金 入金額\n\nショップに入金される（入金が予定されている）売上金額です。\\\n精算金額（`settlement_amount`）から振込手数料（`bank_transfer_fee`）を引いた金額に一致します。\n"
    platform_fee_amount:
      type: integer
      nullable: true
      example: 0
      description: "この売上入金において精算の対象となった取引にかかるプラットフォーム利用料\\\n※ テナントのみ\n"
    platform_fee_tax_amount:
      type: integer
      nullable: true
      example: 0
      description: "この売上入金において精算の対象となった取引にかかるプラットフォーム利用料の消費税\\\n※ テナントのみ\n"
    AccountListItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Account_properties-id"
        account_id:
          $ref: "#/components/schemas/account_id"
        shop_id:
          $ref: "#/components/schemas/shop_id"
        scheduled_deposit_date:
          $ref: "#/components/schemas/scheduled_deposit_date"
        aggregate_term_start:
          $ref: "#/components/schemas/aggregate_term_start"
        aggregate_term_end:
          $ref: "#/components/schemas/aggregate_term_end"
        deposit_date:
          $ref: "#/components/schemas/deposit_date"
        payment_deadline:
          $ref: "#/components/schemas/payment_deadline"
        payment_completion_date:
          $ref: "#/components/schemas/payment_completion_date"
        status_code:
          $ref: "#/components/schemas/DepositStatusCode"
        count:
          $ref: "#/components/schemas/count"
        bank_transfer_fee:
          $ref: "#/components/schemas/bank_transfer_fee"
        total_amount:
          $ref: "#/components/schemas/Account_properties-total_amount"
        fee_amount:
          $ref: "#/components/schemas/fee_amount"
        web_registration_fee_amount:
          $ref: "#/components/schemas/web_registration_fee_amount"
        deposit_amount:
          $ref: "#/components/schemas/deposit_amount"
        platform_fee_amount:
          $ref: "#/components/schemas/platform_fee_amount"
        platform_fee_tax_amount:
          $ref: "#/components/schemas/platform_fee_tax_amount"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    AccountListItem.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/AccountListItem"
    Account.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/AccountListItem.list"
    AccountId_schema:
      type: string
      example: sales_s_***********_******_*****
    DepositTargetBankAccountInfo:
      type: object
      properties:
        corporate:
          type: boolean
          example: true
          description: "法人口座か\n\n- `true`: 法人口座\n- `false`: 個人口座\n"
        recipient_corporate_name:
          type: string
          minLength: 1
          maxLength: 150
          description: |
            入金先法人名
        recipient_represntative_last_name:
          type: string
          minLength: 1
          maxLength: 208
          description: |
            入金先代表者氏名 姓
        recipient_represntative_first_name:
          type: string
          minLength: 1
          maxLength: 208
          description: |
            入金先代表者氏名 名
        bank_code:
          type: string
          minLength: 1
          maxLength: 32
          description: |
            入金先 金融機関コード
        bank_name:
          type: string
          minLength: 1
          maxLength: 96
          description: |
            入金先 金融機関名
        bank_name_kana:
          type: string
          minLength: 1
          maxLength: 208
          description: |
            入金先 金融機関名 カナ
        branch_code:
          type: string
          minLength: 1
          maxLength: 32
          description: |
            入金先 支店コード
        branch_name:
          type: string
          minLength: 1
          maxLength: 208
          description: |
            入金先 支店名
        branch_name_kana:
          type: string
          minLength: 1
          maxLength: 208
          description: |
            入金先 支店名 カナ
        account_kind:
          type: string
          enum:
          - "0"
          - "1"
          description: "入金先 口座種別\n\n- `0`: 普通\n- `1`: 当座\n"
        account_number:
          type: string
          minLength: 1
          maxLength: 208
          description: |
            入金先 口座番号
        account_name:
          type: string
          minLength: 1
          maxLength: 208
          description: |
            入金先 口座名義
    Account:
      type: object
      properties:
        id:
          type: string
          minLength: 32
          maxLength: 32
          example: sales_s_***********_******_*****
          description: |
            売上入金ID
        account_id:
          type: integer
          minimum: 7
          maximum: 7
          example: 1234567
          description: |
            精算ID
        shop_id:
          type: string
          minLength: 13
          maxLength: 13
          example: s_***********
          description: |
            ショップID
        deposit_amount:
          type: integer
          nullable: true
          example: 568
          description: "売上入金 入金額\n\nショップに入金される（入金が予定されている）売上金額です。\\\n精算金額（`settlement_amount`）から振込手数料（`bank_transfer_fee`）を引いた金額に一致します。\n"
        deposit_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "売上入金 入金実績日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        scheduled_deposit_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "売上入金 入金予定日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        aggregate_term_start:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "売上入金 集計期間の開始日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        aggregate_term_end:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "売上入金 集計期間の終了日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        payment_deadline:
          type: string
          nullable: true
          example: null
          description: "（請求が発生した場合）支払期限日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        payment_completion_date:
          type: string
          nullable: true
          example: null
          description: "（請求が発生した場合）請求日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        status_code:
          $ref: "#/components/schemas/DepositStatusCode"
        count:
          type: integer
          nullable: true
          example: 3
          description: |
            この売上入金に含まれる売上入金詳細の件数
        settlement_amount:
          type: integer
          nullable: true
          example: 538
          description: |
            この売上入金において精算の対象となった取引の総額。
        bank_transfer_fee:
          type: integer
          nullable: true
          example: 0
          description: |
            振込手数料
        total_amount:
          type: integer
          nullable: true
          example: 1000
          description: |
            この売上入金において精算の対象となった取引の総額。
        fee_amount:
          type: integer
          nullable: true
          example: 30
          description: |
            この売上入金において精算の対象となった取引にかかるfincodeへの手数料
        web_registration_fee_amount:
          type: integer
          nullable: true
          example: 400
          description: "この売上入金の精算期間中に発生した振替口座のWeb登録手数料\\\n※ 口座振替のみ\n"
        tax_amount:
          type: integer
          nullable: true
          example: 2
          description: |
            この売上入金において精算の対象となった取引にかかるfincodeへの手数料にかかる消費税
        platform_fee_amount:
          type: integer
          nullable: true
          example: 0
          description: "この売上入金において精算の対象となった取引にかかるプラットフォーム利用料\\\n※ テナントのみ\n"
        platform_fee_tax_amount:
          type: integer
          nullable: true
          example: 0
          description: "この売上入金において精算の対象となった取引にかかるプラットフォーム利用料の消費税\\\n※ テナントのみ\n"
        platform_web_registration_fee_amount:
          type: integer
          nullable: true
          example: 0
          description: "売上入金 精算期間中に発生した、プラットフォームが設定した振替口座のWeb登録手数料\\\n※ テナントのみ\n"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
        deposit_destination:
          $ref: "#/components/schemas/DepositTargetBankAccountInfo"
    Account.Retrieving.Response:
      $ref: "#/components/schemas/Account"
    AccountDetailTradeType:
      type: integer
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      example: 1
      description: "取引種別\\\n値によって、集計の際にこの売上入金明細の利用金額が加算されるか減算されるかが異なります。\n\n- `1`: 決済（加算）<br /><span class=\"smallText\">この売上入金明細はある決済1件に対し発生したものであることを示します。</span>\n- `2`: 返金（減算）<br /><span class=\"smallText\">この売上入金明細はある決済に対し発生したキャンセル1件に対し発生したものであることを示します。</span>\n- `3`: チャージバック（減算）<br /><span class=\"smallText\">この売上入金明細はある決済に対し発生したチャージバック1件に対し発生したものであることを示します。</span>\n- `4`: 調整（加算）<br /><span class=\"smallText\">この売上入金明細は何らかの理由で売上入金情報を調整するために発生したものであることを示します。減算のためマイナス値が返されることもあります。</span>\n- `5`: チャージバックの取消（加算）<br /><span class=\"smallText\">この売上入金明細はある決済に対し発生したチャージバック1件が取り消されたとき発生したものであることを示します。</span>\n"
    AccountPaymentMethod:
      type: string
      enum:
      - VM
      - JA
      - KONBINI
      - PayPay
      - ApplepayVM
      - ApplepayJA
      - Directdebit
      example: VM
      description: "この売上入金明細に対応する決済で利用された決済手段\n\n- `VM`: カード決済（VISA / Mastercard）\n- `JA`: カード決済（JCB / American Express / Diners Club / Discover）\n- `KONBINI`: コンビニ決済\n- `Paypay`: PayPay決済\n- `ApplepayVM`: Apple Pay決済（VISA / Mastercard）\n- `ApplepayJA`: Apple Pay決済（JCB / American Express / Discover）\n- `Directdebit`: 口座振替\n"
    AccountDetail:
      type: object
      properties:
        detail_id:
          type: integer
          example: 12345
          description: |
            売上入金詳細 ID
        shop_id:
          type: string
          example: s_***********
          description: |
            ショップID
        trade_type:
          $ref: "#/components/schemas/AccountDetailTradeType"
        payment_method:
          $ref: "#/components/schemas/AccountPaymentMethod"
        account_id:
          type: integer
          example: 1234567
          description: |
            精算ID
        order_id:
          type: string
          nullable: true
          example: o_**********************
          description: |
            オーダー（決済）ID
        access_id:
          type: string
          nullable: true
          example: a_**********************
          description: |
            取引ID
        deposit_amount:
          type: integer
          example: 963
          nullable: true
          description: "この取引による入金額（参考値）\\\n※実際の入金額は全ての売上入金詳細の入金額の合算した後に計算される消費税金額によるため、この値は参考値となります。\n"
        amount:
          type: integer
          example: 1000
          nullable: true
          description: |
            利用金額
        tax:
          type: integer
          example: 0
          nullable: true
          description: |
            税送料
        fee_total:
          type: integer
          example: 36
          nullable: true
          description: |
            fincode 決済手数料（税抜）
        fee_total_taxin:
          type: integer
          example: 37
          nullable: true
          description: |
            fincode 決済手数料（税込）
        fee_profit_tax:
          type: integer
          example: 1
          nullable: true
          description: |
            fincode 決済手数料にかかる消費税
        fee_profit:
          type: integer
          example: 11
          nullable: true
          description: |
            fincode 決済手数料のうち、課税対象金額
        fee_cost:
          type: integer
          example: 25
          nullable: true
          description: |
            fincode 決済手数料のうち、非課税対象金額
        fee_rate_total:
          type: number
          example: 3.6
          nullable: true
          description: |
            fincode 決済手数料率
        fixed_fee:
          type: integer
          example: null
          nullable: true
          description: |
            fincode 決済手数料 最低手数料
        apply_type:
          type: integer
          enum:
          - 0
          - 1
          example: 0
          nullable: true
          description: "fincode手数料率 適用区分\n\n- `0`: 料率。<br /><span class=\"smallText\">この決済による売上に対し、fincode 決済手数料率が適用されたことを示します。</span>\n- `1`: 最低手数料。<br /><span class=\"smallText\">この決済による売上に対し、fincode 決済最低手数料が適用されたことを示します。</span>\n"
        web_registration_fee:
          type: integer
          example: 0
          nullable: true
          description: "fincode 振替口座 Web登録手数料（税抜）\\\n※ 口座振替のみ\n"
        web_registration_fee_taxin:
          type: integer
          example: 0
          nullable: true
          description: "fincode 振替口座 Web登録手数料（税込）\\\n※ 口座振替のみ\n"
        web_registration_fee_tax:
          type: integer
          example: 0
          nullable: true
          description: "fincode手数料 Web登録手数料消費税\\\n※ 口座振替のみ\n"
        platform_fee:
          type: integer
          example: 0
          nullable: true
          description: "プラットフォーム利用料（税抜）\\\n※ テナントのみ\n"
        platform_fee_taxin:
          type: integer
          example: 0
          nullable: true
          description: "プラットフォーム利用料（税込）\\\n※ テナントのみ\n"
        platform_fee_rate:
          type: number
          example: 0
          nullable: true
          description: "プラットフォーム利用料率\\\n※ テナントのみ\n"
        fixed_fee_for_platform_fee:
          type: integer
          example: 0
          nullable: true
          description: "プラットフォーム利用料率 最低手数料\\\n※ テナントのみ\n"
        apply_type_for_platform_fee:
          type: integer
          enum:
          - 0
          - 1
          example: 0
          nullable: true
          description: "プラットフォーム利用料率 適用区分\n\n- `0`: 料率。<br /><span class=\"smallText\">この決済による売上に対し、プラットフォーム利用料率が適用されたことを示します。</span>\n- `1`: 最低手数料。<br /><span class=\"smallText\">この決済による売上に対し、プラットフォームが設定した最低利用料が適用されたことを示します。</span>\n\n※ テナントのみ\n"
        platform_web_registration_fee:
          type: integer
          example: 0
          nullable: true
          description: "プラットフォームWeb登録利用料（税抜）\\\n※ 口座振替のみ\\\n※ テナントのみ\n"
        platform_web_registration_fee_taxin:
          type: integer
          example: 0
          nullable: true
          description: "プラットフォームWeb登録利用料（税込）\\\n※ 口座振替のみ\\\n※ テナントのみ\n"
        platform_web_registration_fee_tax:
          type: integer
          example: 0
          nullable: true
          description: "プラットフォームWeb登録利用料消費税\\\n※ 口座振替のみ\\\n※ テナントのみ\n"
        processed_date:
          type: string
          example: 2022/05/16 23:59
          nullable: true
          description: "取引の確定処理を行った日時 \\\n形式： `yyyy/MM/dd HH:MM`\n"
        aggregate_term_start:
          type: string
          example: 2022/05/16 23:59
          nullable: true
          description: "集計期間の開始日\\  \n形式： `yyyy/MM/dd HH:MM`\n"
        aggregate_term_end:
          type: string
          example: 2022/05/16 23:59
          nullable: true
          description: "集計期間の終了日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    AccountDetail.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/AccountDetail"
    AccountDetail.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/AccountDetail.list"
    PlatformAccount.ListRetrieving.QueryParams:
      type: object
      properties:
        processed:
          type: string
          nullable: true
          example: 2022/05
          description: "確定日（入金サイクルの締め日）を月単位で絞り込みます。\\\n形式： `yyyy/MM`\n"
        status:
          $ref: "#/components/schemas/DepositStatusCode"
          nullable: true
          description: "入金ステータス\\\nカンマ区切りにすることで複数指定（OR検索）できます。\n\n- `3001`: 金額確定前\n- `3002`: 金額確定済み\n- `3003`: 入金済み\n- `3004`: 入金停止中\n- `3005`: 入金エラー\n- `3006`: 請求中\n- `3007`: 請求エラー\n- `3008`: 請求停止中\n- `3009`: 支払済み\n- `3010`: 本人確認書類未確認\n- `3011`: 精算済み\n- `3012`: 入金開始前\n- `3013`: 契約不成立\n"
        scheduled_from:
          type: string
          format: date
          nullable: true
          example: 2022/05/01
          description: "入金予定日の範囲指定（開始日）を指定します。\\\nこの日付以降に入金が行われた売上入金情報を検索できます。\\\n形式： `yyyy/MM/dd`\n"
        scheduled_to:
          type: string
          format: date
          nullable: true
          example: 2022/05/31
          description: "入金予定日の範囲指定（終了日）を指定します。\\\nこの日付以前に入金が行われた売上入金情報を検索できます。\\\n形式： `yyyy/MM/dd`\n"
    PlatformAccount_properties-id:
      type: string
      minLength: 1
      maxLength: 20
      example: sales_s_***********_******_*****
      description: |
        プラットフォーム利用料収入ID
    properties-account_id:
      type: integer
      minimum: 6
      maximum: 6
      example: 123456
      description: |
        精算ID
    properties-deposit_amount:
      type: integer
      nullable: true
      example: 568
      description: "プラットフォーム利用料収入 入金額\\\n\\\nプラットフォームショップに入金される（入金が予定されている）プラットフォーム利用料による売上金の額です。\\\n精算金額（`settlement_amount`）から振込手数料（`bank_transfer_fee`）を引いた金額に一致します。\n"
    properties-deposit_date:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "プラットフォーム利用料収入 入金実績日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    properties-scheduled_deposit_date:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "プラットフォーム利用料収入 入金予定日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    properties-aggregate_term_start:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "プラットフォーム利用料収入 集計期間 開始日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    properties-aggregate_term_end:
      type: string
      nullable: true
      example: 2022/05/16 23:59
      description: "プラットフォーム利用料収入 集計期間 終了日\\\n形式： `yyyy/MM/dd HH:MM`\n"
    properties-count:
      type: integer
      nullable: true
      example: 3
      description: |
        このプラットフォーム利用料収入に含まれる決済の件数
    settlement_amount:
      type: integer
      nullable: true
      example: 568
      description: |
        精算金額
    PlatformAccount_properties-total_amount:
      type: integer
      nullable: true
      example: 1000
      description: |
        このプラットフォーム利用料入金において精算の対象となった取引の総額。
    properties-fee_amount:
      type: integer
      nullable: true
      example: 30
      description: |
        このプラットフォーム利用料入金において精算の対象となった取引にかかるfincodeへの手数料
    properties-platform_fee_amount:
      type: integer
      nullable: true
      example: 0
      description: |
        このプラットフォーム利用料入金において精算の対象となった取引にかかるプラットフォーム利用料
    tax_amount:
      type: integer
      nullable: true
      example: 2
      description: |
        決済手数料 消費税額
    verified:
      type: boolean
      example: true
      deprecated: true
      description: |
        検証確認フラグ
    PlatformAccountListItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/PlatformAccount_properties-id"
        account_id:
          $ref: "#/components/schemas/properties-account_id"
        shop_id:
          $ref: "#/components/schemas/shop_id"
        deposit_amount:
          $ref: "#/components/schemas/properties-deposit_amount"
        deposit_date:
          $ref: "#/components/schemas/properties-deposit_date"
        scheduled_deposit_date:
          $ref: "#/components/schemas/properties-scheduled_deposit_date"
        aggregate_term_start:
          $ref: "#/components/schemas/properties-aggregate_term_start"
        aggregate_term_end:
          $ref: "#/components/schemas/properties-aggregate_term_end"
        payment_deadline:
          $ref: "#/components/schemas/payment_deadline"
        payment_completion_date:
          $ref: "#/components/schemas/payment_completion_date"
        status_code:
          $ref: "#/components/schemas/DepositStatusCode"
        count:
          $ref: "#/components/schemas/properties-count"
        settlement_amount:
          $ref: "#/components/schemas/settlement_amount"
        bank_transfer_fee:
          $ref: "#/components/schemas/bank_transfer_fee"
        total_amount:
          $ref: "#/components/schemas/PlatformAccount_properties-total_amount"
        fee_amount:
          $ref: "#/components/schemas/properties-fee_amount"
        platform_fee_amount:
          $ref: "#/components/schemas/properties-platform_fee_amount"
        platform_fee_tax_amount:
          $ref: "#/components/schemas/properties-platform_fee_amount"
        tax_amount:
          $ref: "#/components/schemas/tax_amount"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
        verified:
          $ref: "#/components/schemas/verified"
    PlatformAccountListItem.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/PlatformAccountListItem"
          description: |
            プラットフォーム利用料による売上入金情報のリスト
    PlatformAccount.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/PlatformAccountListItem.list"
    PlatformAccountId_schema:
      type: string
      example: sales_s_***********_******_*****
    PlatformAccount:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 20
          example: sales_s_***********_******_*****
          description: |
            プラットフォーム利用料収入ID
        account_id:
          type: integer
          minimum: 6
          maximum: 6
          example: 123456
          description: |
            精算ID
        shop_id:
          type: string
          minLength: 13
          maxLength: 13
          example: s_***********
          description: |
            ショップID
        deposit_amount:
          type: integer
          nullable: true
          example: 568
          description: "プラットフォーム利用料収入 入金額\\\n\\\nプラットフォームショップに入金される（入金が予定されている）プラットフォーム利用料による売上金の額です。\\\n精算金額（`settlement_amount`）から振込手数料（`bank_transfer_fee`）を引いた金額に一致します。\n"
        deposit_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "プラットフォーム利用料収入 入金実績日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        scheduled_deposit_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "プラットフォーム利用料収入 入金予定日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        aggregate_term_start:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "プラットフォーム利用料収入 集計期間 開始日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        aggregate_term_end:
          type: string
          nullable: true
          example: 2022/05/16 23:59
          description: "プラットフォーム利用料収入 集計期間 終了日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        payment_deadline:
          type: string
          nullable: true
          example: null
          description: "（請求が発生した場合）支払期限日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        payment_completion_date:
          type: string
          nullable: true
          example: null
          description: "（請求が発生した場合）請求日\\\n形式： `yyyy/MM/dd HH:MM`\n"
        status_code:
          $ref: "#/components/schemas/DepositStatusCode"
        count:
          type: integer
          nullable: true
          example: 3
          description: |
            このプラットフォーム利用料収入に含まれる決済の件数
        settlement_amount:
          type: integer
          nullable: true
          example: 568
          description: |
            精算金額
        bank_transfer_fee:
          type: integer
          nullable: true
          example: 0
          description: |
            振込手数料
        total_amount:
          type: integer
          nullable: true
          example: 1000
          description: |
            このプラットフォーム利用料入金において精算の対象となった取引の総額。
        fee_amount:
          type: integer
          nullable: true
          example: 30
          description: |
            このプラットフォーム利用料入金において精算の対象となった取引にかかるfincodeへの手数料
        taxable_fee_amount:
          type: integer
          nullable: true
          example: 0
          description: |
            決済手数料 課税対象額
        nontaxable_fee_amount:
          type: integer
          nullable: true
          example: 0
          description: |
            決済手数料 非課税対象額
        tax_amount:
          type: integer
          nullable: true
          example: 2
          description: |
            決済手数料 消費税額
        web_registration_fee_amount:
          type: integer
          nullable: true
          example: 400
          description: "このプラットフォーム利用料入金の精算期間中に発生した振替口座のWeb登録手数料\\\n※ 口座振替のみ\n"
        platform_fee_amount:
          type: integer
          nullable: true
          example: 0
          description: |
            このプラットフォーム利用料入金において精算の対象となった取引にかかるプラットフォーム利用料
        platform_fee_tax_amount:
          type: integer
          nullable: true
          example: 0
          description: |
            このプラットフォーム利用料入金において精算の対象となった取引にかかるプラットフォーム利用料の消費税
        platform_web_registration_fee_amount:
          type: integer
          nullable: true
          example: 0
          description: |
            このプラットフォーム利用料入金の精算期間中に発生した、プラットフォームが設定した振替口座のWeb登録手数料
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
        deposit_destination:
          $ref: "#/components/schemas/DepositTargetBankAccountInfo"
        verified:
          type: boolean
          example: true
          deprecated: true
          description: |
            検証確認フラグ
    PlatformAccount.Retrieving.Response:
      $ref: "#/components/schemas/PlatformAccount"
    PlatformAccountSummary.ListRetrieving.QueryParams:
      type: object
      properties:
        scheduled_from:
          type: string
          format: date
          nullable: true
          example: 2022/05/01
          description: "入金予定日の範囲指定（開始日）を指定します。\\\nこの日付以降に入金が行われた売上入金情報を検索できます。\\\n形式： `yyyy/MM/dd`\n"
        scheduled_to:
          type: string
          format: date
          nullable: true
          example: 2022/05/31
          description: "入金予定日の範囲指定（終了日）を指定します。\\\nこの日付以前に入金が行われた売上入金情報を検索できます。\\\n形式： `yyyy/MM/dd`\n"
    shop_name:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: My Shop
      description: |
        ショップ名
    taxable_fee_amount:
      type: integer
      nullable: true
      example: 0
      description: |
        決済手数料 課税対象額
    nontaxable_fee_amount:
      type: integer
      nullable: true
      example: 0
      description: |
        決済手数料 非課税対象額
    properties-web_registration_fee_amount:
      type: integer
      nullable: true
      example: 400
      description: "このプラットフォーム利用料入金の精算期間中に発生した振替口座のWeb登録手数料\\\n※ 口座振替のみ\n"
    platform_web_registration_fee_amount:
      type: integer
      nullable: true
      example: 0
      description: |
        このプラットフォーム利用料入金の精算期間中に発生した、プラットフォームが設定した振替口座のWeb登録手数料
    properties-platform_fee_tax_amount:
      type: integer
      nullable: true
      example: 0
      description: |
        このプラットフォーム利用料入金において精算の対象となった取引にかかるプラットフォーム利用料の消費税
    PlatformAccountSummary:
      type: object
      properties:
        summary_id:
          type: integer
          minimum: 8
          maximum: 8
          example: 12345678
          description: |
            プラットフォーム利用料収入サマリーID
        account_id:
          $ref: "#/components/schemas/properties-account_id"
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        tenant_shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        tenant_shop_name:
          $ref: "#/components/schemas/shop_name"
        deposit_amount:
          $ref: "#/components/schemas/properties-deposit_amount"
        aggregate_term_start:
          $ref: "#/components/schemas/properties-aggregate_term_start"
        aggregate_term_end:
          $ref: "#/components/schemas/properties-aggregate_term_end"
        count:
          $ref: "#/components/schemas/properties-count"
        total_amount:
          $ref: "#/components/schemas/PlatformAccount_properties-total_amount"
        fee_amount:
          $ref: "#/components/schemas/properties-fee_amount"
        taxable_fee_amount:
          $ref: "#/components/schemas/taxable_fee_amount"
        nontaxable_fee_amount:
          $ref: "#/components/schemas/nontaxable_fee_amount"
        tax_amount:
          $ref: "#/components/schemas/tax_amount"
        web_registration_fee_amount:
          $ref: "#/components/schemas/properties-web_registration_fee_amount"
        platform_web_registration_fee_amount:
          $ref: "#/components/schemas/platform_web_registration_fee_amount"
        platform_fee_amount:
          $ref: "#/components/schemas/properties-platform_fee_amount"
        platform_fee_tax_amount:
          $ref: "#/components/schemas/properties-platform_fee_tax_amount"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
        tenant_account_process_id_list:
          type: array
          items:
            $ref: "#/components/schemas/Account_properties-id"
          description: |
            テナントショップにおける、このサマリーの集計対象となった売上入金IDのリスト
    PlatformAccountSummary.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/PlatformAccountSummary"
          description: |
            プラットフォーム利用料収入のサマリー情報のリスト
    PlatformAccountSummary.ListRetrieving.Response:
      allOf:
      - $ref: "#/components/schemas/_ListResponse"
      - $ref: "#/components/schemas/PlatformAccountSummary.list"
    PlatformShop.ListRetrieving.QueryParams:
      type: object
      properties:
        id:
          type: string
          nullable: true
          minLength: 13
          maxLength: 13
          example: s_***********
          default: null
          description: |
            ショップID
        shop_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 20
          example: My Shop
          default: null
          description: |
            ショップ名
        shop_mail_address:
          type: string
          nullable: true
          minLength: 1
          maxLength: 255
          example: platform-shop@example.com
          default: null
          description: |
            ショップメールアドレス
        created_from:
          type: string
          nullable: true
          example: 2022/05/16
          default: null
          description: "作成日の範囲指定 開始日\\\nこの日付以降に作成されたショップを検索できます。\\\n形式：`yyyy/MM/dd`\n"
        created_to:
          type: string
          nullable: true
          example: 2022/05/16
          default: null
          description: "作成日の範囲指定 終了日\\\nこの日付以前に作成されたショップを検索できます。\\\n形式：`yyyy/MM/dd`\n"
        sort:
          $ref: "#/components/schemas/sort"
    ShopType:
      type: string
      enum:
      - null
      - platform
      - tenant
      example: platform
      description: "ショップタイプ。\n\n- `(null)`: スタンダードショップ\n- `platform`: プラットフォームショップ\n- `tenant`: テナントショップ\n"
    ExaminationMasterId:
      type: string
      enum:
      - vm
      - jad
      - applepay_vm
      - applepay_jad
      - konbini
      - paypay
      - directdebit
      example: vm
      description: "審査種別マスタID。\\\nプラットフォーム料率の適用対象とする決済手段の種別を表します。\n\n- `vm`: カード決済（VISA / Mastercard）\n- `jad`: カード決済（JCB / American Express / Diners Club / Discover）\n- `applepay_vm`: Apple Pay（VISA / Mastercard）\n- `applepay_jad`: Apple Pay（JCB / American Express / Diners Club / Discover）\n- `konbini`: コンビニ決済\n- `paypay`: PayPay\n- `directdebit`: 口座振替\n"
    PlatformRateConfig:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ExaminationMasterId"
        platform_rate:
          type: number
          format: double
          nullable: true
          example: 5
          description: "（標準）プラットフォーム利用料率。\\\n個別のプラットフォーム利用料率が設定されていないテナントが`id`で指定した決済手段で決済を行うと、このプラットフォーム利用料率が適用されます。\\\n\\\n特定のテナントに個別のプラットフォーム利用料を適用するには テナントショップ 更新API を使用します。\n"
        fixed_fee:
          type: integer
          format: int32
          nullable: true
          example: 120
          description: "（標準）プラットフォーム利用料 最低料金。\\\nテナントが`id`で指定した決済手段で決済を行った際、`platform_rate`による利用料がこの最低料金を下回ると、この最低料金が適用されます。\n"
        web_registration_fee:
          type: number
          format: double
          nullable: true
          example: 480
          description: "（標準）プラットフォーム利用料 Web登録手数料。\\\nテナントにおいて、口座振替における振替用口座登録（Web登録）に成功した際に適用されるWeb登録手数料です。\\\n※ 口座振替のみ\n"
        paypay_content_category_type:
          type: integer
          enum:
          - 1
          - 2
          nullable: true
          example: 1
          description: "PayPay審査により決定されるPayPay商材カテゴリー。\n\n- `1`: 物販／サービスショップ\n- `2`: デジタルコンテンツショップ\n\n※ PayPayのみ\n"
      x-req-properties:
        platform_rate:
          type: string
          nullable: true
          example: "5.0"
          description: "（標準）プラットフォーム利用料率。\\\n個別のプラットフォーム利用料率が設定されていないテナントが`id`で指定した決済手段で決済を行うと、このプラットフォーム利用料率が適用されます。\\\n\\\n特定のテナントに個別のプラットフォーム利用料を適用するには テナントショップ 更新API を使用します。\n"
        fixed_fee:
          type: string
          example: "120"
          nullable: true
          description: "（標準）プラットフォーム利用料 最低料金。\\\nテナントが`id`で指定した決済手段で決済を行った際、`platform_rate`による利用料がこの最低料金を下回ると、この最低料金が適用されます。\n"
        web_registration_fee:
          type: string
          nullable: true
          example: "480"
          description: "（標準）プラットフォーム利用料 Web登録手数料。\\\nテナントにおいて、口座振替における振替用口座登録（Web登録）に成功した際に適用されるWeb登録手数料です。\\\n※ 口座振替のみ\n"
        paypay_content_category_type:
          type: string
          enum:
          - "1"
          - "2"
          nullable: true
          description: "PayPay審査により決定されるPayPay商材カテゴリー。\n\n- `1`: 物販／サービスショップ\n- `2`: デジタルコンテンツショップ\n\n※ PayPayのみ\n"
    Shop:
      type: object
      properties:
        id:
          type: string
          minLength: 13
          maxLength: 13
          example: s_***********
          description: |
            ショップID
        shop_name:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: My Shop
          description: |
            ショップ名
        shop_name_kana:
          type: string
          minLength: 1
          maxLength: 40
          nullable: true
          example: マイショップ
          description: |
            ショップ名（カナ）
        shop_type:
          $ref: "#/components/schemas/ShopType"
        platform_id:
          type: string
          minLength: 13
          maxLength: 13
          example: p_***********
          description: |
            プラットフォームID
        platform_name:
          type: string
          minLength: 1
          maxLength: 50
          example: My Platform
          nullable: true
          description: |
            プラットフォーム名
        shared_customer_flag:
          type: string
          minLength: 1
          maxLength: 1
          enum:
          - "0"
          - "1"
          example: "0"
          nullable: true
          description: "顧客情報共有フラグ\n\n- `0`: 顧客情報を共有しない<br /><span class=\"smallText\">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>\n- `1`: 顧客情報を共有する<br /><span class=\"smallText\">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>\n"
        customer_group_id:
          type: string
          minLength: 13
          maxLength: 13
          example: cg_***********
          nullable: true
          description: "顧客情報共有グループID\\\nfincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。\n"
        platform_rate_list:
          type: array
          items:
            $ref: "#/components/schemas/PlatformRateConfig"
          description: |
            決済手段ごとに存在するプラットフォーム手数料設定のリスト
        send_mail_address:
          type: string
          minLength: 1
          maxLength: 255
          nullable: true
          example: send@example.com
          description: |
            通知先メールアドレス
        shop_mail_address:
          type: string
          minLength: 1
          maxLength: 255
          nullable: true
          example: shop@example.com
          description: |
            ショップメールアドレス
        log_keep_days:
          type: string
          minLength: 1
          maxLength: 4
          nullable: true
          example: null
          description: |
            ログ保存日数
        api_version:
          type: string
          minLength: 1
          maxLength: 8
          nullable: true
          example: "20211001"
          description: |
            APIバージョン
        api_key_display_flag:
          type: string
          minLength: 1
          maxLength: 1
          nullable: true
          enum:
          - "0"
          - "1"
          example: "0"
          description: "管理画面におけるAPIキー表示フラグ。\n\n- `0`: 表示しない\n- `1`: 表示する\n"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    Shop.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Shop"
    PlatformShop.ListRetrieving.Response:
      $ref: "#/components/schemas/Shop.list"
    PlatformShop.Retrieving.Response:
      $ref: "#/components/schemas/Shop"
    platform_rate:
      type: string
      nullable: true
      example: "5.0"
      description: "（標準）プラットフォーム利用料率。\\\n個別のプラットフォーム利用料率が設定されていないテナントが`id`で指定した決済手段で決済を行うと、このプラットフォーム利用料率が適用されます。\\\n\\\n特定のテナントに個別のプラットフォーム利用料を適用するには テナントショップ 更新API を使用します。\n"
    fixed_fee:
      type: string
      example: "120"
      nullable: true
      description: "（標準）プラットフォーム利用料 最低料金。\\\nテナントが`id`で指定した決済手段で決済を行った際、`platform_rate`による利用料がこの最低料金を下回ると、この最低料金が適用されます。\n"
    web_registration_fee:
      type: string
      nullable: true
      example: "480"
      description: "（標準）プラットフォーム利用料 Web登録手数料。\\\nテナントにおいて、口座振替における振替用口座登録（Web登録）に成功した際に適用されるWeb登録手数料です。\\\n※ 口座振替のみ\n"
    PlatformShop.Updating.Request:
      type: object
      properties:
        examination_master_id:
          $ref: "#/components/schemas/ExaminationMasterId"
        platform_rate:
          $ref: "#/components/schemas/platform_rate"
        fixed_fee:
          $ref: "#/components/schemas/fixed_fee"
        web_registration_fee:
          $ref: "#/components/schemas/web_registration_fee"
      required:
      - examination_master_id
    PlatformShop.Updating.Response:
      $ref: "#/components/schemas/Shop"
    TenantShop.ListRetrieving.QueryParams:
      type: object
      properties:
        id:
          type: string
          nullable: true
          minLength: 13
          maxLength: 13
          example: s_***********
          default: null
          description: |
            ショップID
        shop_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 20
          example: My Shop
          default: null
          description: |
            ショップ名
        shop_mail_address:
          type: string
          nullable: true
          minLength: 1
          maxLength: 255
          example: platform-shop@example.com
          default: null
          description: |
            ショップメールアドレス
        created_from:
          type: string
          nullable: true
          example: 2022/05/16
          default: null
          description: "作成日の範囲指定 開始日\\\nこの日付以降に作成されたショップを検索できます。\\\n形式：`yyyy/MM/dd`\n"
        created_to:
          type: string
          nullable: true
          example: 2022/05/16
          default: null
          description: "作成日の範囲指定 終了日\\\nこの日付以前に作成されたショップを検索できます。\\\n形式：`yyyy/MM/dd`\n"
        sort:
          $ref: "#/components/schemas/sort"
    TenantShop.ListRetrieving.Response:
      $ref: "#/components/schemas/Shop.list"
    TenantShop.Retrieving.Response:
      $ref: "#/components/schemas/Shop"
    paypay_content_category_type:
      type: string
      enum:
      - "1"
      - "2"
      nullable: true
      description: "PayPay審査により決定されるPayPay商材カテゴリー。\n\n- `1`: 物販／サービスショップ\n- `2`: デジタルコンテンツショップ\n\n※ PayPayのみ\n"
    api_key_display_flag:
      type: string
      minLength: 1
      maxLength: 1
      nullable: true
      enum:
      - "0"
      - "1"
      example: "0"
      description: "管理画面におけるAPIキー表示フラグ。\n\n- `0`: 表示しない\n- `1`: 表示する\n"
    TenantShop.Updating.Request:
      type: object
      properties:
        examination_master_id:
          $ref: "#/components/schemas/ExaminationMasterId"
        platform_rate:
          $ref: "#/components/schemas/platform_rate"
        fixed_fee:
          $ref: "#/components/schemas/fixed_fee"
        web_registration_fee:
          $ref: "#/components/schemas/web_registration_fee"
        paypay_content_category_type:
          $ref: "#/components/schemas/paypay_content_category_type"
        api_key_display_flag:
          $ref: "#/components/schemas/api_key_display_flag"
    TenantShop.Updating.Response:
      $ref: "#/components/schemas/Shop"
    x-req-properties-email:
      type: string
      minLength: 1
      maxLength: 254
      example: new-fincode-user@example.com
      description: "メールアドレス\\\n\\\nfincodeに新規作成するユーザーのメールアドレス。\\\nすでに登録されているメールアドレスを指定するとエラーとなります。（エラーコード：`E0087012014`）\\\n\\\n形式： RFC 5322\n"
    password:
      type: string
      minLength: 12
      maxLength: 254
      example: password1234
      description: "パスワード\\\n\\\nfincodeに新規作成するユーザーのパスワード。\\\nパスワードは以下の条件を満たす必要があります。\n\n- 半角英数のみ\n- 12文字以上\n- 英数ともに使用\n- 大文字小文字ともに使用\n"
    x-req-properties-name:
      type: string
      minLength: 1
      maxLength: 384
      example: Epsilon Taro
      description: "ユーザー名\\\n\\\nfincodeに新規作成するユーザーの名前\n"
    tenant_url_id:
      type: string
      minLength: 25
      maxLength: 25
      example: tu_**********************
      description: "テナント登録URL ID\\\n\\\nテナント登録URLのID。\\\n[管理画面 > プラットフォームの運用と管理 > 構成](https://dashboard.test.fincode.jp/platform/setting)の『テナント登録用のURL』の`tenant_url_id`の値をこのパラメータに指定します。\n"
    POST.TenantEntries.Request:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/x-req-properties-email"
        password:
          $ref: "#/components/schemas/password"
        name:
          $ref: "#/components/schemas/x-req-properties-name"
        tenant_url_id:
          $ref: "#/components/schemas/tenant_url_id"
      required:
      - email
      - password
      - name
      - tenant_url_id
    Role_properties-id:
      type: integer
      minimum: 1
      maximum: 11
      example: 9
      description: "ロールID\\\n\\\nユーザーの管理画面における権限を示すIDです。\n"
    User:
      type: object
      properties:
        id:
          type: string
          minLength: 24
          maxLength: 24
          example: u_**********************
          description: |
            ユーザーID
        default_shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        role_id:
          $ref: "#/components/schemas/Role_properties-id"
        name:
          type: string
          minLength: 1
          maxLength: 384
          example: Epsilon Taro
          description: |
            ユーザー名
        email:
          type: string
          minLength: 1
          maxLength: 384
          example: new-fincode-user@example.com
          description: |
            メールアドレス
        type:
          type: string
          enum:
          - "01"
          example: "01"
          description: "ユーザー種別\n\n- `01`: ショップユーザー\n"
        two_factor_auth_status:
          type: string
          enum:
          - "00"
          - "01"
          example: "00"
          description: "二要素認証ステータス\n\n- `00`: 未設定\\\n- `01`: 設定済み\n"
        mail_auth_status:
          type: string
          enum:
          - "00"
          - "01"
          example: "00"
          description: "メールアドレス認証ステータス\n\n- `00`: 未設定\\\n- `01`: 設定済み\n"
        password_lock_status:
          type: string
          enum:
          - "00"
          - "01"
          example: "00"
          description: "パスワードロックステータス\n\n- `00`: ロックされていない\\\n- `01`: ロック中\n"
        last_login_date:
          type: string
          nullable: true
          example: null
          description: "最終ログイン日時\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        login_failure_date:
          type: string
          nullable: true
          example: null
          description: "ログイン失敗日時\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        login_failure_times:
          type: integer
          example: 0
          description: |
            ログイン失敗回数
        password_expire:
          type: string
          nullable: true
          example: 2022/05/16 12.34.56.789
          description: "パスワード有効期限\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        account_status:
          type: string
          enum:
          - "00"
          - "01"
          example: "00"
          description: "アカウントステータス\n\n- `00`: 有効\n- `01`: 無効\n"
        invite_status:
          type: string
          enum:
          - "01"
          - "02"
          example: "02"
          description: "招待ステータス\n\n- `01`: 招待中\n- `02`: 参加済み\n"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    POST.TenantEntries:
      type: object
      properties:
        user_data:
          $ref: "#/components/schemas/User"
        access_token:
          type: string
          minLength: 112
          maxLength: 112
          example: a_****_**************
          description: |
            アクセストークン
        authorities:
          type: array
          items:
            type: object
            properties:
              auth_id:
                type: integer
                example: 18
                description: 権限ID
              endpoint:
                type: string
                example: /v1/payments
                description: エンドポイント
              method:
                type: string
                example: GET
                description: HTTPメソッド
          description: "ユーザーの権限情報\\\n\\\nこのユーザーが実行可能なエンドポイントとHTTPメソッドの情報\n"
      x-req-properties:
        email:
          type: string
          minLength: 1
          maxLength: 254
          example: new-fincode-user@example.com
          description: "メールアドレス\\\n\\\nfincodeに新規作成するユーザーのメールアドレス。\\\nすでに登録されているメールアドレスを指定するとエラーとなります。（エラーコード：`E0087012014`）\\\n\\\n形式： RFC 5322\n"
        password:
          type: string
          minLength: 12
          maxLength: 254
          example: password1234
          description: "パスワード\\\n\\\nfincodeに新規作成するユーザーのパスワード。\\\nパスワードは以下の条件を満たす必要があります。\n\n- 半角英数のみ\n- 12文字以上\n- 英数ともに使用\n- 大文字小文字ともに使用\n"
        name:
          type: string
          minLength: 1
          maxLength: 384
          example: Epsilon Taro
          description: "ユーザー名\\\n\\\nfincodeに新規作成するユーザーの名前\n"
        tenant_url_id:
          type: string
          minLength: 25
          maxLength: 25
          example: tu_**********************
          description: "テナント登録URL ID\\\n\\\nテナント登録URLのID。\\\n[管理画面 > プラットフォームの運用と管理 > 構成](https://dashboard.test.fincode.jp/platform/setting)の『テナント登録用のURL』の`tenant_url_id`の値をこのパラメータに指定します。\n"
    POST.TenantEntries.Response:
      $ref: "#/components/schemas/POST.TenantEntries"
    POST.JoinTenants_x-req-properties-email:
      type: string
      minLength: 1
      maxLength: 254
      example: new-fincode-user@example.com
      description: "メールアドレス\\\n\\\nプラットフォームショップのユーザーのメールアドレス。\n"
    x-req-properties-password:
      type: string
      minLength: 12
      maxLength: 254
      example: password1234
      description: "パスワード\\\n\\\nプラットフォームショップのユーザーのパスワード。\n"
    POST.JoinTenants.Request:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/POST.JoinTenants_x-req-properties-email"
        password:
          $ref: "#/components/schemas/x-req-properties-password"
        tenant_url_id:
          $ref: "#/components/schemas/tenant_url_id"
      required:
      - email
      - password
      - tenant_url_id
    shop_name_kana:
      type: string
      minLength: 1
      maxLength: 40
      nullable: true
      example: マイショップ
      description: |
        ショップ名（カナ）
    platform_id:
      type: string
      minLength: 13
      maxLength: 13
      example: p_***********
      description: |
        プラットフォームID
    platform_name:
      type: string
      minLength: 1
      maxLength: 50
      example: My Platform
      nullable: true
      description: |
        プラットフォーム名
    shared_customer_flag:
      type: string
      minLength: 1
      maxLength: 1
      enum:
      - "0"
      - "1"
      example: "0"
      nullable: true
      description: "顧客情報共有フラグ\n\n- `0`: 顧客情報を共有しない<br /><span class=\"smallText\">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>\n- `1`: 顧客情報を共有する<br /><span class=\"smallText\">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>\n"
    customer_group_id:
      type: string
      minLength: 13
      maxLength: 13
      example: cg_***********
      nullable: true
      description: "顧客情報共有グループID\\\nfincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。\n"
    send_mail_address:
      type: string
      minLength: 1
      maxLength: 255
      nullable: true
      example: send@example.com
      description: |
        通知先メールアドレス
    shop_mail_address:
      type: string
      minLength: 1
      maxLength: 255
      nullable: true
      example: shop@example.com
      description: |
        ショップメールアドレス
    log_keep_days:
      type: string
      minLength: 1
      maxLength: 4
      nullable: true
      example: null
      description: |
        ログ保存日数
    api_version:
      type: string
      minLength: 1
      maxLength: 8
      nullable: true
      example: "20211001"
      description: |
        APIバージョン
    POST.JoinTenants:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Shop_properties-id"
        shop_name:
          $ref: "#/components/schemas/shop_name"
        shop_name_kana:
          $ref: "#/components/schemas/shop_name_kana"
        shop_type:
          $ref: "#/components/schemas/ShopType"
        platform_id:
          $ref: "#/components/schemas/platform_id"
        platform_name:
          $ref: "#/components/schemas/platform_name"
        shared_customer_flag:
          $ref: "#/components/schemas/shared_customer_flag"
        customer_group_id:
          $ref: "#/components/schemas/customer_group_id"
        send_mail_address:
          $ref: "#/components/schemas/send_mail_address"
        shop_mail_address:
          $ref: "#/components/schemas/shop_mail_address"
        log_keep_days:
          $ref: "#/components/schemas/log_keep_days"
        api_version:
          $ref: "#/components/schemas/api_version"
        api_key_display_flag:
          $ref: "#/components/schemas/api_key_display_flag"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
      x-req-properties:
        email:
          type: string
          minLength: 1
          maxLength: 254
          example: new-fincode-user@example.com
          description: "メールアドレス\\\n\\\nプラットフォームショップのユーザーのメールアドレス。\n"
        password:
          type: string
          minLength: 12
          maxLength: 254
          example: password1234
          description: "パスワード\\\n\\\nプラットフォームショップのユーザーのパスワード。\n"
        tenant_url_id:
          type: string
          minLength: 25
          maxLength: 25
          example: tu_**********************
          description: "テナント登録URL ID\\\n\\\nテナント登録URLのID。\\\n[管理画面 > プラットフォームの運用と管理 > 構成](https://dashboard.test.fincode.jp/platform/setting)の『テナント登録用のURL』の`tenant_url_id`の値をこのパラメータに指定します。\n"
    POST.JoinTenants.Response:
      $ref: "#/components/schemas/POST.JoinTenants"
    ContractStatus:
      type: string
      enum:
      - "101"
      - "102"
      - "103"
      - "105"
      - "106"
      - "107"
      description: "契約ステータス\\\n\\\nfincodeとそのショップの運営事業者の契約のステータスを表します。\n\n- `101`: 未契約<br /><span class=\"smallText\">まだfincodeの本番環境申請の提出が完了していない状態です。</span>\n- `102`: 利用審査中<br /><span class=\"smallText\">fincodeの本番環境申請の提出が完了し、利用審査中の状態です。</span>\n- `103`: 利用審査中（VISA/Mastercard利用可）<br /><span class=\"smallText\">即時利用によりVISA/Mastercardブランドの決済受付が可能な状態です。審査は継続して行われます。</span>\n- `105`: 解約済\n- `106`: 契約不成立<br /><span class=\"smallText\">審査の結果、fincodeの利用が不可となった状態です。</span>\n- `107`: 稼働中<br /><span class=\"smallText\">fincodeの本番環境申請が完了し、クレジットカード決済の受付が可能な状態です。</span>\n"
    CorporateInfo.V2:
      type: object
      properties:
        corporate_number:
          type: string
          minLength: 13
          maxLength: 13
          nullable: true
          example: "1234567890123"
          description: |
            法人番号
        corporate_name:
          type: string
          minLength: 1
          maxLength: 150
          example: サンプル株式会社
          description: |
            法人名
        corporate_name_kana:
          type: string
          minLength: 1
          maxLength: 150
          example: サンプルカブシキガイシャ
          description: |
            法人名（カナ）
        hp:
          type: string
          minLength: 1
          maxLength: 300
          nullable: true
          example: https://www.sample-corp.example.com
          description: |
            企業サイトURL
        capital:
          type: number
          nullable: true
          minimum: 1
          maximum: 19
          example: 1000000
          description: |
            資本金
        established_at:
          type: string
          nullable: true
          minLength: 10
          maxLength: 10
          example: 2020/01/01
          description: |
            設立日
        yearly_sales:
          type: number
          nullable: true
          minimum: 1
          maximum: 19
          example: 1000000
          description: |
            年商
        business_details:
          type: string
          nullable: true
          minLength: 1
          maxLength: 5000
          example: ○○の製造・販売を行っており、fincodeによるオンラインでの販売を予定。
          description: |
            事業内容
        company_postal_code:
          type: string
          nullable: true
          minLength: 8
          maxLength: 8
          example: 123-4567
          description: "会社住所 郵便番号\\\n形式： 半角数字（ハイフンあり）\n"
        company_prefecture:
          type: string
          nullable: true
          minLength: 3
          maxLength: 4
          example: 東京都
          description: "会社住所 都道府県\\\n形式： 漢字\n"
        company_prefecture_kana:
          type: string
          nullable: true
          minLength: 1
          maxLength: 6
          example: トウキョウト
          description: "会社住所 都道府県（カナ）\\\n形式： 全角カタカナ\n"
        company_address_municipality:
          type: string
          nullable: true
          minLength: 1
          maxLength: 50
          example: 渋谷区
          description: "会社住所 市区町村\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        company_address_municipality_kana:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
          example: シブヤク
          description: "会社住所 市区町村（カナ）\\\n形式： 全角カタカナ\n"
        company_address_section:
          type: string
          nullable: true
          minLength: 1
          maxLength: 50
          example: 道玄坂
          description: "会社住所 町域\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        company_address_section_kana:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
          example: ドウゲンザカ
          description: "会社住所 町域（カナ）\\\n形式： 全角カタカナ\n"
        company_address_chrome:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
          example: 1-2-3
          description: "会社住所 番地\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        company_address_chrome_kana:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
          example: イチニサン
          description: "会社住所 番地（カナ）\\\n形式： 全角カタカナ\n"
        company_address_building_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
          example: サンプルビル
          description: "会社住所 ビル名\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        company_address_building_name_kana:
          type: string
          nullable: true
          minLength: 1
          maxLength: 100
          example: サンプルビル
          description: "会社住所 ビル名（カナ）\\\n形式： 全角カタカナ\n"
        company_tel:
          type: string
          nullable: true
          minLength: 1
          maxLength: 15
          example: "0312345678"
          description: "会社情報 電話番号\\\n形式： 半角数字（ハイフンなし）\n"
      required:
      - corporate_number
      - corporate_name
      - corporate_name_kana
      - company_postal_code
      - company_prefecture
      - company_prefecture_kana
      - company_address_municipality
      - company_address_municipality_kana
      - company_address_section
      - company_address_section_kana
      - company_address_chrome
      - company_address_chrome_kana
      - company_tel
      - capital
      - established_at
      - yearly_sales
      - business_details
    ContractInfo.V2:
      type: object
      properties:
        representative_last_name:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: 山田
          description: |
            代表者 姓
            形式： 漢字/ひらがな/カタカナ/半角英字
        representative_last_name_kana:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: ヤマダ
          description: "代表者 姓（カナ）\\\n形式： 全角カナ\n"
        representative_first_name:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: 太郎
          description: "代表者 名\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
        representative_first_name_kana:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: タロウ
          description: "代表者 名（カナ）\\\n形式： 全角カナ\n"
        representative_postal_code:
          type: string
          pattern: "^\\d{3}-\\d{4}$"
          nullable: true
          minLength: 8
          maxLength: 8
          example: 150-0043
          description: "代表者 住所 郵便番号\\\n形式：`xxx-xxxx`\n"
        representative_prefecture:
          type: string
          minLength: 1
          maxLength: 4
          nullable: true
          example: 東京都
          description: "代表者 住所 都道府県\\\n形式： 漢字\n"
        representative_prefecture_kana:
          type: string
          minLength: 1
          maxLength: 6
          nullable: true
          example: トウキョウト
          description: "代表者 住所 都道府県（カナ）\\\n形式： 全角カナ\n"
        representative_address_municipality:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: 渋谷区
          description: "代表者 住所 市区町村\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        representative_address_municipality_kana:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
          example: シブヤク
          description: "代表者 住所 市区町村（カナ）\\\n形式： 全角カナ\n"
        representative_address_section:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: 道玄坂
          description: "代表者 住所 町域\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        representative_address_section_kana:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
          example: ドウゲンザカ
          description: "代表者 住所 町域（カナ）\\\n形式： 全角カナ\n"
        representative_address_chrome:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: 1-14-6
          description: "代表者 住所 番地\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        representative_address_chrome_kana:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
          example: 1-14-6
          description: |
            代表者 住所 番地（カナ）
        representative_address_building_name:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
          example: ヒューマックス渋谷ビル 7F
          description: "代表者 住所 建物名\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        representative_address_building_name_kana:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
          example: ヒューマックスシブヤビル ナナカイ
          description: "代表者 住所 建物名（カナ）\\\n形式： 全角カナ\n"
        representative_tel:
          type: string
          minLength: 11
          maxLength: 12
          pattern: "^\\d{11,12}$"
          nullable: true
          example: "0364330000"
          description: "代表者 電話番号\\\n形式： 半角数字（ハイフンなし、PHS番号不可）\n"
        representative_birthday:
          type: string
          pattern: "^\\d{4}/\\d{2}/\\d{2}$"
          nullable: true
          example: 1980/01/01
          description: "代表者 生年月日\\\n\\\n形式：`yyyy/MM/dd`\n"
        representative_gender:
          type: integer
          enum:
          - 0
          - 1
          nullable: true
          example: 0
          description: "代表者 性別\n\n- `0`: 男性\n- `1`: 女性\n"
        staff1_last_name:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: 鈴木
          description: "担当者1 姓\\\n形式： 漢字/ひらがな/カタカナ/半角英字\\\n\\\nfincodeは担当者1,2宛てに審査結果の通知や審査保留対応の連絡などを行います。\n"
        staff1_last_name_kana:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: スズキ
          description: "担当者1 姓（カナ）\\\n形式： 全角カナ\n"
        staff1_first_name:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: 次郎
          description: "担当者1 名\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
        staff1_first_name_kana:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: ジロウ
          description: "担当者1 名（カナ）\\\n形式： 全角カナ\n"
        staff1_company_name:
          type: string
          minLength: 1
          maxLength: 150
          nullable: true
          example: サンプル株式会社
          description: "担当者1 会社名\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        staff1_belongs:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: EC事業部
          description: "担当者1 部署名\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        staff1_tel:
          type: string
          minLength: 11
          maxLength: 12
          pattern: "^\\d{11,12}$"
          nullable: true
          example: "09000000000"
          description: "担当者1 電話番号\\\n形式： 半角数字（ハイフンなし、PHS番号不可）\n"
        staff1_mail:
          type: string
          minLength: 1
          maxLength: 254
          format: email
          nullable: true
          example: staff-1@example.com
          description: "担当者1 メールアドレス\\\n形式： RFC 5322\n"
        staff2_last_name:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: 佐藤
          description: "担当者2 姓\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
        staff2_last_name_kana:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: サトウ
          description: "担当者2 姓（カナ）\\\n形式： 全角カナ\n"
        staff2_first_name:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: 三郎
          description: "担当者2 名\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
        staff2_first_name_kana:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          example: サブロウ
          description: "担当者2 名（カナ）\\\n形式： 全角カナ\n"
        staff2_company_name:
          type: string
          minLength: 1
          maxLength: 150
          nullable: true
          example: サンプル株式会社
          description: "担当者2 会社名\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        staff2_belongs:
          type: string
          minLength: 1
          maxLength: 50
          nullable: true
          example: 営業統括部
          description: "担当者2 部署名\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
        staff2_tel:
          type: string
          minLength: 11
          maxLength: 12
          pattern: "^\\d{11,12}$"
          nullable: true
          example: "09000000000"
          description: "担当者2 電話番号\\\n形式： 半角数字（ハイフンなし、PHS番号不可）\n"
        staff2_mail:
          type: string
          minLength: 1
          maxLength: 254
          format: email
          nullable: true
          example: staff-2@example.com
          description: "担当者2 メールアドレス\\\n形式： RFC 5322\n"
        corporate:
          type: boolean
          nullable: true
          example: true
          description: "事業形態\\\n\\\n- `true`: 法人\\\n- `false`: 個人事業主\n"
        corporate_info:
          $ref: "#/components/schemas/CorporateInfo.V2"
      required:
      - representative_last_name
      - representative_last_name_kana
      - representative_first_name
      - representative_first_name_kana
      - representative_postal_code
      - representative_prefecture
      - representative_prefecture_kana
      - representative_address_municipality
      - representative_address_municipality_kana
      - representative_address_section
      - representative_address_section_kana
      - representative_address_chrome
      - representative_address_chrome_kana
      - representative_tel
      - representative_birthday
      - representative_gender
      - staff1_last_name
      - staff1_last_name_kana
      - staff1_first_name
      - staff1_first_name_kana
      - staff1_company_name
      - staff1_belongs
      - staff1_tel
      - staff1_mail
      - corporate
    ContentInfo.V2:
      type: object
      properties:
        content1_name:
          type: string
          minLength: 1
          maxLength: 200
          example: サンプル商材1
          description: |
            商材1 名称
        content1_description:
          type: string
          minLength: 1
          maxLength: 200
          example: サンプル商材1の説明
          description: |
            商材1 説明
        content1_unit_price:
          type: integer
          minimum: 1
          maximum: 19
          example: 1000
          description: |
            商材1 単価
        content2_name:
          type: string
          minLength: 1
          maxLength: 200
          example: サンプル商材2
          description: |
            商材2 名称
        content2_description:
          type: string
          minLength: 1
          maxLength: 200
          example: サンプル商材2の説明
          description: |
            商材2 説明
        content2_unit_price:
          type: integer
          minimum: 1
          maximum: 19
          example: 2000
          description: |
            商材2 単価
        content3_name:
          type: string
          minLength: 1
          maxLength: 200
          example: サンプル商材3
          description: |
            商材3 名称
        content3_description:
          type: string
          minLength: 1
          maxLength: 200
          example: サンプル商材3の説明
          description: |
            商材3 説明
        content3_unit_price:
          type: integer
          minimum: 1
          maximum: 19
          example: 3000
          description: |
            商材3 単価
    ShopInfo.V2:
      type: object
      properties:
        shop_name:
          type: string
          minLength: 1
          maxLength: 100
          example: サンプルショップ東京
          description: |
            fincodeにおけるショップ名
        shop_name_kana:
          type: string
          minLength: 1
          maxLength: 100
          example: サンプルショップトウキョウ
          description: |
            fincodeにおけるショップ名（カナ）
        shop_name_en:
          type: string
          minLength: 1
          maxLength: 100
          example: Sample Shop Tokyo
          description: |
            fincodeにおけるショップ名（英語）
        support_mail:
          type: string
          nullable: true
          minLength: 1
          maxLength: 254
          example: support@example.com
          description: "購入者向けサポート窓口 メールアドレス\\\n形式： RFC 5322\n"
        support_tel:
          type: string
          nullable: true
          minLength: 1
          maxLength: 15
          example: 312345678
          description: "購入者向けサポート窓口 電話番号\\\n形式： 電話番号（ハイフンなし）\n"
        unit_price:
          type: number
          nullable: true
          minimum: 1
          maximum: 23
          example: 1000
          description: "1回の決済における金額（単価）\\\n\\\n例： `1000`（1000円）\n"
        deals_long_apply_content:
          type: boolean
          nullable: true
          example: true
          description: "fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明\n\n- `true`: fincode審査に時間がかかるコンテンツを取り扱う\n- `false`: fincode審査に時間がかかるコンテンツを取り扱わない\n\n以下の商材を取り扱う場合は`true`を指定する必要があります。\n\n- 呉服\n- コンサルディングサービス\n- エステ、美容サロン、美容医療\n- スポーツ施設・フィットネスクラブ\n- カルチャースクール・通信講座\n- データ販売\n- 情報詳細（情報の内容自体が商品となるもの）\n- 占い\n- サプリメント・健康食品\n- 美容品・化粧品\n- カツラ\n- 旅行業に該当するサービス\n- タバコ・CBD\n- 寄付金\n"
        deals_insecure_content:
          type: boolean
          nullable: true
          example: true
          description: "fincodeで取扱不可の商材を取り扱わないことの表明\n\n- `true`: 取扱不可の商材を取り扱う予定はない\n- `false`: 取扱不可の商材を取り扱う予定がある\n\nfincodeの禁止商材は以下の通りです。\n\n- 金融行為（クレジットカードショッピング枠の現金化等）\n- 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券\n- 賭博、ギャンブル\n- RMT（リアルマネートレーディング）\n- ペット等の生き物全般（※標本・剥製も含む）\n- お布施\n- 危険ドラッグ、デザイナーズドラッグ\n- 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等）\n- 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの\n- 公序良俗に反するもの（アダルト、出会い系サイトを含む）\n- 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法）\n"
        lost_trial:
          type: boolean
          nullable: true
          example: true
          description: "改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明\n\n- `true`: 改正割賦販売法に基づく訴訟敗訴歴がある\n- `false`: 改正割賦販売法に基づく訴訟敗訴歴はない\n"
        use_of_fincode:
          type: object
          properties:
            used_on_web:
              type: boolean
              nullable: true
              example: true
              description: "Webサイト利用有無\\\n\\\nWebサイト/Webアプリでfincodeを使用するかどうか\n\n- `true`: Webサイト/Webアプリでfincodeを使用する\n"
            used_on_app:
              type: boolean
              nullable: true
              example: true
              description: "ネイティブアプリ利用有無\\\n\\\nネイティブアプリでfincodeを使用するかどうか\n\n- `true`: ネイティブアプリでfincodeを使用する\n"
        site_published:
          type: boolean
          nullable: true
          example: true
          description: "Webサイトの公開状況\\\n\\\nfincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。\\\n`usage_of_fincode.used_on_web`が`true`の場合、指定必須です。\n\n- `true`: fincode審査チームがサイトを閲覧可能\n- `false`: fincode審査チームがサイトを閲覧不可能\n"
        site_info:
          type: object
          properties:
            url:
              type: string
              nullable: true
              minLength: 1
              maxLength: 300
              example: https://example.com
              description: "WebサイトURL\\\n\\\nfincode審査チームがサイトを閲覧するためのURL\n"
            credential:
              type: string
              nullable: true
              minLength: 1
              maxLength: 100
              example: "ID: example_user,Password: password"
              description: "ログイン情報\\\n\\\nfincode審査チームがサイトを閲覧するためのログイン情報\n"
          required:
          - url
          description: "Webサイト情報\\\n\\\nfincode審査チームが審査上確認をする、fincodeによる決済を行うWebサイトの情報\n"
        prepaid_point:
          type: boolean
          nullable: true
          example: true
          description: "プリペイドポイントの有無\\\n\\\nショップがプリペイドポイントを導入しているかどうか\n"
        prepaid_point_info:
          type: object
          properties:
            how_to_use:
              type: string
              nullable: true
              minLength: 1
              maxLength: 300
              example: ポイントは購入時に利用可能で、合計金額からポイントを差し引いて決済を行う。
              description: "ポイント利用方法\\\n\\\nプリペイドポイントの利用方法\n"
            about_expiration:
              type: string
              nullable: true
              minLength: 1
              maxLength: 300
              example: ポイントは1年間有効。
              description: "ポイント有効期限について\\\n\\\nプリペイドポイントの有効期限について\n"
        provides:
          type: object
          description: |
            商材情報
          properties:
            product:
              type: boolean
              nullable: true
              example: false
              description: "物販商材 提供有無\\\n\\\nショップが物品販売を行うかどうか\n"
            service:
              type: boolean
              nullable: true
              example: false
              description: "サービス商材 提供有無\\\n\\\nショップがサービス提供を行うかどうか\n"
            digital_content:
              type: boolean
              nullable: true
              example: true
              description: "デジタルコンテンツ 提供有無\\\n\\\nショップがデジタルコンテンツ販売を行うかどうか\n"
        content_description:
          type: string
          nullable: true
          minLength: 1
          maxLength: 5000
          example: |
            本サービスは、ユーザーが自由にWeb記事を投稿・販売できるコンテンツを提供しています。
          description: "取扱商材の説明\\\n\\\nショップの提供する商材についての説明\n"
        product_content_info:
          $ref: "#/components/schemas/ContentInfo.V2"
          description: |
            物販商材 商材説明
        service_content_info:
          $ref: "#/components/schemas/ContentInfo.V2"
          description: |
            サービス商材 商材説明
        digital_content_info:
          $ref: "#/components/schemas/ContentInfo.V2"
          description: |
            デジタルコンテンツ 商材説明
        additional_info:
          type: object
          nullable: true
          description: "追加提出情報\\\n\\\n審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\\\n特定商取引法に基づく表示情報を基に値を設定してください。\n"
          properties:
            shop_sales_manager_name:
              type: string
              nullable: true
              minLength: 1
              maxLength: 300
              example: イプシロン太郎
              description: "販売責任者氏名\\\n\\\nショップの販売責任者の氏名\n"
            shop_servoce_name:
              type: string
              nullable: true
              minLength: 1
              maxLength: 300
              example: サンプルショップ
              description: "屋号・サービス名\\\n\\\nショップのサービスの名称\n"
            shop_how_to_pay:
              type: string
              nullable: true
              minLength: 1
              maxLength: 300
              example: クレジットカード、コンビニ決済
              description: "支払い方法\\\n\\\nショップで利用可能な支払い方法\n"
            shop_charge_description:
              type: string
              nullable: true
              minLength: 1
              maxLength: 5000
              example: |
                インターネット接続費用およびその他インターネット利用に必要な費用。モバイルデバイスをご利用の場合にはデータ通信料が発生する場合があります。
              description: "商品代金以外の料金の説明\\\n\\\n送料、手数料、消費税などの商品代金以外の料金についての説明\n"
            shop_product_delivery_time:
              type: string
              nullable: true
              minLength: 1
              maxLength: 1000
              example: |
                サンプルショップのサービス提供開始日はユーザーアカウントで初めて認証手続を行った日となります。
              description: "商品の引き渡し時期\\\n\\\n商品の引き渡し時期についての説明\n"
            shop_return_goods_handing_conditions:
              type: string
              nullable: true
              minLength: 1
              maxLength: 5000
              example: |
                1. サービス開始月中に解約した場合、サービスの月額利用料が全額発生します。
                2. デジタルコンテンツサービスの特性上、購入後の返品・キャンセルはお受付いたしかねます。
              description: "返品・交換に関する条件\\\n\\\n返品・交換に関する条件についての説明\n"
          required:
          - shop_servoce_name
          - shop_how_to_pay
          - shop_product_delivery_time
          - shop_return_goods_handing_conditions
      required:
      - shop_name
      - shop_name_kana
      - shop_name_en
      - support_mail
      - support_tel
      - deals_long_apply_content
      - deals_insecure_content
      - lost_trial
      - use_of_fincode
      - provides
      - content_description
    BankAccountInfo.V2:
      type: object
      properties:
        bank_code:
          type: string
          minLength: 4
          maxLength: 4
          example: "0001"
          description: |
            金融機関コード
        branch_code:
          type: string
          minLength: 3
          maxLength: 3
          example: "001"
          description: |
            支店コード
        account_kind:
          type: number
          enum:
          - 0
          - 1
          example: 0
          description: "口座種別\n\n- `0`: 普通\n- `1`: 当座\n"
        account_number:
          type: string
          minLength: 1
          maxLength: 7
          example: "1234567"
          description: |
            口座番号
        account_name:
          type: string
          minLength: 1
          maxLength: 50
          example: サンプル株式会社
          description: |
            口座名義
      required:
      - banl_code
      - branch_code
      - account_kind
      - account_number
      - account_name
    DepositCycleMasterId:
      type: integer
      example: 1
      enum:
      - 1
      - 2
      description: "入金サイクルマスタID\\\n入金サイクルについては[Docs > 精算管理 > クレジットカード決済の入金サイクル](https://docs.fincode.jp/business_management/deposit)を参照できます。\n\n- `1`: スタンダード（月1回, 月末締め翌月末入金）\n- `2`: スタンダード（月2回, 15日&月末締め15日後入金）\n"
    DepositCycleInfo.V2:
      type: object
      properties:
        deposit_cycle_master_id:
          $ref: "#/components/schemas/DepositCycleMasterId"
      required:
      - deposit_cycle_master_id
    ExaminationInfo.V2:
      type: object
      properties:
        status_code:
          $ref: "#/components/schemas/ContractStatus"
        contract_info:
          $ref: "#/components/schemas/ContractInfo.V2"
        shop_info:
          $ref: "#/components/schemas/ShopInfo.V2"
        bank_account_info:
          $ref: "#/components/schemas/BankAccountInfo.V2"
        deposit_cycle_info:
          $ref: "#/components/schemas/DepositCycleInfo.V2"
    ExaminationInfo.V2.Retrieving.Response:
      $ref: "#/components/schemas/ExaminationInfo.V2"
    ExaminationInfo.V2.Updating.Request:
      type: object
      properties:
        contract_info:
          $ref: "#/components/schemas/ContractInfo.V2"
        shop_info:
          $ref: "#/components/schemas/ShopInfo.V2"
        bank_account_info:
          $ref: "#/components/schemas/BankAccountInfo.V2"
        deposit_cycle_info:
          $ref: "#/components/schemas/DepositCycleInfo.V2"
        merchant_category_code:
          type: string
          minLength: 4
          maxLength: 4
          example: null
          nullable: true
          description: "業種コード\\\n\\\nfincodeから指定するよう要求されている場合にのみ指定します。\n"
    ExaminationInfo.V2.Updating.Response:
      $ref: "#/components/schemas/ExaminationInfo.V2"
    ExaminationFileType:
      type: string
      enum:
      - DRIVER_LICENSE_FRONT
      - DRIVER_LICENSE_BACK
      - SEAL_REGISTRATION_FRONT
      - RESIDENT_CARD_FRONT
      - RESIDENT_CARD_BACK
      - SPECIAL_PERMANENT_RESIDENT_FRONT
      - SPECIAL_PERMANENT_RESIDENT_BACK
      - CERTIFICATE_OF_RESIDENCE_FRONT
      - MY_NUMBER_CARD_FRONT
      - PRODUCT_IMAGE_1
      - PRODUCT_IMAGE_2
      - PRODUCT_IMAGE_3
      - APP_IMAGE_TOP
      - APP_IMAGE_ICON
      - SALES_LICENSE_1
      - SALES_LICENSE_2
      - SALES_LICENSE_3
      - COPY_OF_CORPORATE_REGISTRATION
      example: DRIVER_LICENSE_FRONT
      description: "審査ファイルタイプ\\\n\\\nfincode審査チームに提出する画像ファイル等の種別を指定します。\n\n- `DRIVER_LICENSE_FRONT`: 本人確認書類; 運転免許証（表）<br /><span class=\"smallText\">本人確認書類として運転免許証を提出する場合に指定します。裏面も提出する必要があります。</span>\n- `DRIVER_LICENSE_BACK`: 本人確認書類; 運転免許証（裏）<br /><span class=\"smallText\">本人確認書類として運転免許証を提出する場合に指定します。表面も提出する必要があります。</span>\n- `SEAL_REGISTRATION_FRONT`: 本人確認書類; 印鑑証明書（表）<br /><span class=\"smallText\">本人確認書類として印鑑証明書を提出する場合に指定します。</span>\n- `RESIDENT_CARD_FRONT`: 本人確認書類; 在留カード（表）<br /><span class=\"smallText\">本人確認書類として在留カードを提出する場合に指定します。裏面も提出する必要があります。</span>\n- `RESIDENT_CARD_BACK`: 本人確認書類; 在留カード（裏）<br /><span class=\"smallText\">本人確認書類として在留カードを提出する場合に指定します。表面も提出する必要があります。</span>\n- `SPECIAL_PERMANENT_RESIDENT_FRONT`: 本人確認書類; 特別永住者証明書（表）<br /><span class=\"smallText\">本人確認書類として特別永住者証明書を提出する場合に指定します。裏面も提出する必要があります。</span>\n- `SPECIAL_PERMANENT_RESIDENT_BACK`: 本人確認書類; 特別永住者証明書（裏）<br /><span class=\"smallText\">本人確認書類として特別永住者証明書を提出する場合に指定します。表面も提出する必要があります。</span>\n- `CERTIFICATE_OF_RESIDENCE_FRONT`: 本人確認書類; 住民票（表）<br /><span class=\"smallText\">本人確認書類として住民票を提出する場合に指定します。</span>\n- `MY_NUMBER_CARD_FRONT`: 本人確認書類; マイナンバーカード（表）<br /><span class=\"smallText\">本人確認書類としてマイナンバーカードを提出する場合に指定します。</span>\n- `PRODUCT_IMAGE_1`: 商材審査; 物販商材1 画像<br /><span class=\"smallText\">物販商材の情報を提出する場合に指定します。`product_content_info.content1_*`に対応する画像を添付してください。</span>\n- `PRODUCT_IMAGE_2`: 商材審査; 物販商材2 画像<br /><span class=\"smallText\">物販商材の情報を提出する場合に指定します。`product_content_info.content2_*`に対応する画像を添付してください。</span>\n- `PRODUCT_IMAGE_3`: 商材審査; 物販商材3 画像<br /><span class=\"smallText\">物販商材の情報を提出する場合に指定します。`product_content_info.content3_*`に対応する画像を添付してください。</span>\n- `APP_IMAGE_TOP`: アプリ審査; アプリトップ画像<br /><span class=\"smallText\">fincodeをスマートフォン上のネイティブアプリで使用し、かつfincodeによる審査時点でWebサイトが存在しない場合に指定します。アプリのトップ画面のスクリーンショットの画像を添付してください。</span>\n- `APP_IMAGE_ICON`: アプリ審査; アプリアイコン<br /><span class=\"smallText\">fincodeをスマートフォン上のネイティブアプリで使用し、かつfincodeによる審査時点でWebサイトが存在しない場合に指定します。アプリのアイコン画像を添付してください。</span>\n- `SALES_LICENSE_1`: 販売免許等; 販売免許等1<br />\n    <span class=\"smallText\">\n    ショップで取り扱う商品・サービスによっては、下記の許可証の提出が必要となります。免許・許可証の名義は契約名義と一致している必要があります。\n        <ul>\n            <li>酒類: 酒類小売業販売許可証</li>\n            <li>古物: 古物商許可証</li>\n            <li>コンタクトレンズ: 高度管理医療機器販売業許可証</li>\n            <li>象牙: 経済産業省の許可証</li>\n            <li>決済業者から免許証および許可証を求められた場合は提出を依頼することがあります。</li>\n        </ul>\n    </span>\n- `SALES_LICENSE_2`: 販売免許等; 販売免許等2<br /><span class=\"smallText\">許可証が複数ファイルに渡る場合、2ファイル目を提出する場合に指定します。</span>\n- `SALES_LICENSE_3`: 販売免許等; 販売免許等3<br /><span class=\"smallText\">許可証が複数ファイルに渡る場合、3ファイル目を提出する場合に指定します。</span>\n- `COPY_OF_CORPORATE_REGISTRATION`: 決済手段追加申請; 登記簿謄本<br /><span class=\"smallText\">事業形態が「法人」のショップで「口座振替」の決済手段の追加申請をした際に提出が必要になります。</span>\n"
    data:
      description: "審査ファイルデータ\\\n\\\n画像ファイルをマルチパートアップロードするときはこの`data`フィールドに画像データを設定します。\n"
    ExaminationFile.Uploading.Request:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ExaminationFileType"
        data:
          $ref: "#/components/schemas/data"
    ExaminationFileUpload:
      type: object
      properties:
        examination_files:
          type: array
          items:
            type: object
            properties:
              shop_id:
                $ref: "#/components/schemas/Shop_properties-id"
              type:
                $ref: "#/components/schemas/ExaminationFileType"
              filename:
                type: string
                description: "審査ファイル名\\\n\\\n拡張子を含むアップロードされたファイルの名称\n"
              filesize:
                type: number
                description: "審査ファイルサイズ\\\n\\\nアップロードされたファイルのサイズ（バイト）\n"
      x-req-properties:
        data:
          description: "審査ファイルデータ\\\n\\\n画像ファイルをマルチパートアップロードするときはこの`data`フィールドに画像データを設定します。\n"
    ExaminationFile.Uploading.Response:
      $ref: "#/components/schemas/ExaminationFileUpload"
    enable_immediate_use:
      type: number
      enum:
      - 1
      - 2
      - 3
      example: 1
      description: "VISA/Mastercard即時利用 結果\n\n- `1`: OK<br /><span class=\"smallText\">即時利用が認められました。VISA/Mastercardブランドの決済受付が可能な状態です。</span>\n- `2`: NG<br /><span class=\"smallText\">ネガティブチェックにより、fincodeの利用が認められませんでした。</span>\n- `3`: 保留<br /><span class=\"smallText\">即時利用が認められませんでした。審査は継続して行われます。</span>\n"
    POST.ContractsExaminations.Request:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        enable_immediate_use:
          $ref: "#/components/schemas/enable_immediate_use"
    POST.ContractsExaminations:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        enable_immediate_use:
          type: number
          enum:
          - 1
          - 2
          - 3
          example: 1
          description: "VISA/Mastercard即時利用 結果\n\n- `1`: OK<br /><span class=\"smallText\">即時利用が認められました。VISA/Mastercardブランドの決済受付が可能な状態です。</span>\n- `2`: NG<br /><span class=\"smallText\">ネガティブチェックにより、fincodeの利用が認められませんでした。</span>\n- `3`: 保留<br /><span class=\"smallText\">即時利用が認められませんでした。審査は継続して行われます。</span>\n"
      x-req-properties:
        enable_immediate_use:
          description: "VISA/Mastercard即時利用をリクエストするかどうか\\\n\\\n即時利用は以下の条件すべてに合致しないとき利用をリクエストできます。\n\n- `本番環境申請情報.contract_info.site_published`が`true`でない（審査時点でWebサイトが用意されていない）\n- `本番環境申請情報.shop_info.deals_long_apply_content`が`true`である（審査に時間がかかる商材を取り扱うと表明している）\n"
    POST.ContractsExaminations.Response:
      $ref: "#/components/schemas/POST.ContractsExaminations"
    PaymentProvider:
      type: string
      enum:
      - PAYSLE
      - PAYPAY
      - APPLE_PAY_UC
      - APPLE_PAY_JCB
      - DIRECT_DEBIT
      - VIRTUAL_ACCOUNT
      description: "- `PAYSLE`: コンビニ決済\n- `PAYPAY`: PayPay\n- `APPLE_PAY_UC`: Apple Pay（VISA/Mastercard）\n- `APPLE_PAY_JCB`: Apple Pay（JCB/American Express/Diners Club）\n- `DIRECT_DEBIT`: 口座振替\n- `VIRTUAL_ACCOUNT`: 銀行振込（バーチャル口座）\n"
    provider:
      type: array
      items:
        $ref: "#/components/schemas/PaymentProvider"
      example:
      - PAYSLE
      - PAYPAY
      description: "追加対象決済手段\\\n\\\n追加で申請する決済手段をリストで指定します。\n\n- `PAYSLE`: コンビニ決済\n- `PAYPAY`: PayPay\n- `APPLE_PAY_UC`: Apple Pay（VISA/Mastercard）\n- `APPLE_PAY_JCB`: Apple Pay（JCB/American Express/Diners Club）\n- `DIRECT_DEBIT`: 口座振替\n- `VIRTUAL_ACCOUNT`: 銀行振込（バーチャル口座）\n"
    POST.ProviderReserve.Request:
      type: object
      properties:
        provider:
          $ref: "#/components/schemas/provider"
      required:
      - provider
    POST.ProviderReserve:
      type: object
      properties:
        reservation_list:
          type: array
          items:
            type: object
            properties:
              reservation_id:
                type: integer
                minimum: 1
                maximum: 20
                example: 123456
                description: 追加申請ID
              shop_id:
                $ref: "#/components/schemas/Shop_properties-id"
              provider:
                $ref: "#/components/schemas/PaymentProvider"
          description: "決済手段追加 申請リスト\\\n\\\n申請中の決済手段のリストです。\n"
      x-req-properties:
        provider:
          type: array
          items:
            $ref: "#/components/schemas/PaymentProvider"
          example:
          - PAYSLE
          - PAYPAY
          description: "追加対象決済手段\\\n\\\n追加で申請する決済手段をリストで指定します。\n\n- `PAYSLE`: コンビニ決済\n- `PAYPAY`: PayPay\n- `APPLE_PAY_UC`: Apple Pay（VISA/Mastercard）\n- `APPLE_PAY_JCB`: Apple Pay（JCB/American Express/Diners Club）\n- `DIRECT_DEBIT`: 口座振替\n- `VIRTUAL_ACCOUNT`: 銀行振込（バーチャル口座）\n"
    POST.ProviderReserve.Response:
      $ref: "#/components/schemas/POST.ProviderReserve"
    ExaminationStatus:
      type: string
      enum:
      - "1"
      - "2"
      - "3"
      description: "審査ステータス\n\n- `1`: 審査中<br /><span class=\"smallText\">まだこの決済手段による決済を受け付けることはできません。</span>\n- `2`: 審査OK<br /><span class=\"smallText\">この決済手段による決済を受け付けることができます。</span>\n- `3`: 審査NG<br /><span class=\"smallText\">この決済手段による決済を受け付けることはできません。</span>\n"
    Examination:
      type: object
      properties:
        examination_master_id:
          $ref: "#/components/schemas/ExaminationMasterId"
        status_code:
          $ref: "#/components/schemas/ExaminationStatus"
        member_code:
          type: string
          minLength: 1
          maxLength: 20
          nullable: true
          description: |
            加盟店番号
        tds_available:
          type: boolean
          nullable: true
          description: "3Dセキュア認証利用可否\n\n- `true`: 利用可\n- `false`: 利用不可\n"
        installments_payment_available:
          type: boolean
          nullable: true
          description: "分割払い利用可否\n\n- `true`: 利用可\n- `false`: 利用不可\n"
        mcc_1:
          type: string
          nullable: true
          description: |
            MCC 1
        mcc_2:
          type: string
          nullable: true
          description: |
            MCC 2
        paypay_mid:
          type: string
          nullable: true
          description: |
            PayPay 加盟店番号
        paypay_store_id:
          type: string
          nullable: true
          description: |
            PayPay 店舗ID
        paysle_merchant_code:
          type: string
          nullable: true
          description: |
            PAYSLE 企業コード
        paysle_user_id:
          type: string
          nullable: true
          description: |
            PAYSLE ログイン企業ID
        paysle_user_password:
          type: string
          nullable: true
          description: |
            PAYSLE システム接続パスワード
        cut_over_at:
          type: string
          nullable: true
          description: "利用開始日\\\n形式：`yyyy/MM/dd`\n"
    corporate_number:
      type: string
      minLength: 13
      maxLength: 13
      nullable: true
      example: "1234567890123"
      description: |
        法人番号
    corporate_name:
      type: string
      minLength: 1
      maxLength: 150
      example: サンプル株式会社
      description: |
        法人名
    corporate_name_kana:
      type: string
      minLength: 1
      maxLength: 150
      example: サンプルカブシキガイシャ
      description: |
        法人名（カナ）
    hp:
      type: string
      minLength: 1
      maxLength: 300
      nullable: true
      example: https://www.sample-corp.example.com
      description: |
        企業サイトURL
    capital:
      type: number
      nullable: true
      minimum: 1
      maximum: 19
      example: 1000000
      description: |
        資本金
    established_at:
      type: string
      nullable: true
      minLength: 10
      maxLength: 10
      example: 2020/01/01
      description: |
        設立日
    yearly_sales:
      type: number
      nullable: true
      minimum: 1
      maximum: 19
      example: 1000000
      description: |
        年商
    business_details:
      type: string
      nullable: true
      minLength: 1
      maxLength: 5000
      example: ○○の製造・販売を行っており、fincodeによるオンラインでの販売を予定。
      description: |
        事業内容
    company_postal_code:
      type: string
      nullable: true
      minLength: 8
      maxLength: 8
      example: 123-4567
      description: "会社住所 郵便番号\\\n形式： 半角数字（ハイフンあり）\n"
    company_prefecture:
      type: string
      nullable: true
      minLength: 3
      maxLength: 4
      example: 東京都
      description: "会社住所 都道府県\\\n形式： 漢字\n"
    company_prefecture_kana:
      type: string
      nullable: true
      minLength: 1
      maxLength: 6
      example: トウキョウト
      description: "会社住所 都道府県（カナ）\\\n形式： 全角カタカナ\n"
    company_address_municipality:
      type: string
      nullable: true
      minLength: 1
      maxLength: 50
      example: 渋谷区
      description: "会社住所 市区町村\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
    company_address_municipality_kana:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: シブヤク
      description: "会社住所 市区町村（カナ）\\\n形式： 全角カタカナ\n"
    company_address_section:
      type: string
      nullable: true
      minLength: 1
      maxLength: 50
      example: 道玄坂
      description: "会社住所 町域\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
    company_address_section_kana:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: ドウゲンザカ
      description: "会社住所 町域（カナ）\\\n形式： 全角カタカナ\n"
    company_address_chrome:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: 1-2-3
      description: "会社住所 番地\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
    company_address_chrome_kana:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: イチニサン
      description: "会社住所 番地（カナ）\\\n形式： 全角カタカナ\n"
    company_address_building_name:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: サンプルビル
      description: "会社住所 ビル名\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
    company_address_building_name_kana:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: サンプルビル
      description: "会社住所 ビル名（カナ）\\\n形式： 全角カタカナ\n"
    company_tel:
      type: string
      nullable: true
      minLength: 1
      maxLength: 15
      example: "0312345678"
      description: "会社情報 電話番号\\\n形式： 半角数字（ハイフンなし）\n"
    representative_last_name:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: 山田
      description: |
        代表者 姓
        形式： 漢字/ひらがな/カタカナ/半角英字
    representative_last_name_kana:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: ヤマダ
      description: "代表者 姓（カナ）\\\n形式： 全角カナ\n"
    representative_first_name:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: 太郎
      description: "代表者 名\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
    representative_first_name_kana:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: タロウ
      description: "代表者 名（カナ）\\\n形式： 全角カナ\n"
    representative_birthday:
      type: string
      pattern: "^\\d{4}/\\d{2}/\\d{2}$"
      nullable: true
      example: 1980/01/01
      description: "代表者 生年月日\\\n\\\n形式：`yyyy/MM/dd`\n"
    representative_gender:
      type: integer
      enum:
      - 0
      - 1
      nullable: true
      example: 0
      description: "代表者 性別\n\n- `0`: 男性\n- `1`: 女性\n"
    representative_postal_code:
      type: string
      pattern: "^\\d{3}-\\d{4}$"
      nullable: true
      minLength: 8
      maxLength: 8
      example: 150-0043
      description: "代表者 住所 郵便番号\\\n形式：`xxx-xxxx`\n"
    representative_prefecture:
      type: string
      minLength: 1
      maxLength: 4
      nullable: true
      example: 東京都
      description: "代表者 住所 都道府県\\\n形式： 漢字\n"
    representative_prefecture_kana:
      type: string
      minLength: 1
      maxLength: 6
      nullable: true
      example: トウキョウト
      description: "代表者 住所 都道府県（カナ）\\\n形式： 全角カナ\n"
    representative_address_municipality:
      type: string
      minLength: 1
      maxLength: 50
      nullable: true
      example: 渋谷区
      description: "代表者 住所 市区町村\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
    representative_address_municipality_kana:
      type: string
      minLength: 1
      maxLength: 100
      nullable: true
      example: シブヤク
      description: "代表者 住所 市区町村（カナ）\\\n形式： 全角カナ\n"
    representative_address_section:
      type: string
      minLength: 1
      maxLength: 50
      nullable: true
      example: 道玄坂
      description: "代表者 住所 町域\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
    representative_address_section_kana:
      type: string
      minLength: 1
      maxLength: 100
      nullable: true
      example: ドウゲンザカ
      description: "代表者 住所 町域（カナ）\\\n形式： 全角カナ\n"
    representative_address_chrome:
      type: string
      minLength: 1
      maxLength: 50
      nullable: true
      example: 1-14-6
      description: "代表者 住所 番地\\\n形式： 漢字/ひらがな/カタカナ/半角英数\n"
    representative_address_chrome_kana:
      type: string
      minLength: 1
      maxLength: 100
      nullable: true
      example: 1-14-6
      description: |
        代表者 住所 番地（カナ）
    representative_tel:
      type: string
      minLength: 11
      maxLength: 12
      pattern: "^\\d{11,12}$"
      nullable: true
      example: "0364330000"
      description: "代表者 電話番号\\\n形式： 半角数字（ハイフンなし、PHS番号不可）\n"
    staff1_last_name:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: 鈴木
      description: "担当者1 姓\\\n形式： 漢字/ひらがな/カタカナ/半角英字\\\n\\\nfincodeは担当者1,2宛てに審査結果の通知や審査保留対応の連絡などを行います。\n"
    staff1_last_name_kana:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: スズキ
      description: "担当者1 姓（カナ）\\\n形式： 全角カナ\n"
    staff1_first_name:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: 次郎
      description: "担当者1 名\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
    staff1_first_name_kana:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: ジロウ
      description: "担当者1 名（カナ）\\\n形式： 全角カナ\n"
    staff1_tel:
      type: string
      minLength: 11
      maxLength: 12
      pattern: "^\\d{11,12}$"
      nullable: true
      example: "09000000000"
      description: "担当者1 電話番号\\\n形式： 半角数字（ハイフンなし、PHS番号不可）\n"
    staff1_mail:
      type: string
      minLength: 1
      maxLength: 254
      format: email
      nullable: true
      example: staff-1@example.com
      description: "担当者1 メールアドレス\\\n形式： RFC 5322\n"
    staff2_last_name:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: 佐藤
      description: "担当者2 姓\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
    staff2_last_name_kana:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: サトウ
      description: "担当者2 姓（カナ）\\\n形式： 全角カナ\n"
    staff2_first_name:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: 三郎
      description: "担当者2 名\\\n形式： 漢字/ひらがな/カタカナ/半角英字\n"
    staff2_first_name_kana:
      type: string
      minLength: 1
      maxLength: 20
      nullable: true
      example: サブロウ
      description: "担当者2 名（カナ）\\\n形式： 全角カナ\n"
    staff2_tel:
      type: string
      minLength: 11
      maxLength: 12
      pattern: "^\\d{11,12}$"
      nullable: true
      example: "09000000000"
      description: "担当者2 電話番号\\\n形式： 半角数字（ハイフンなし、PHS番号不可）\n"
    staff2_mail:
      type: string
      minLength: 1
      maxLength: 254
      format: email
      nullable: true
      example: staff-2@example.com
      description: "担当者2 メールアドレス\\\n形式： RFC 5322\n"
    used_on_app:
      type: boolean
      nullable: true
      example: true
      description: "ネイティブアプリ利用有無\\\n\\\nネイティブアプリでfincodeを使用するかどうか\n\n- `true`: ネイティブアプリでfincodeを使用する\n"
    used_on_web:
      type: boolean
      nullable: true
      example: true
      description: "Webサイト利用有無\\\n\\\nWebサイト/Webアプリでfincodeを使用するかどうか\n\n- `true`: Webサイト/Webアプリでfincodeを使用する\n"
    url:
      type: string
      nullable: true
      minLength: 1
      maxLength: 300
      example: https://example.com
      description: "WebサイトURL\\\n\\\nfincode審査チームがサイトを閲覧するためのURL\n"
    credential:
      type: string
      nullable: true
      minLength: 1
      maxLength: 100
      example: "ID: example_user,Password: password"
      description: "ログイン情報\\\n\\\nfincode審査チームがサイトを閲覧するためのログイン情報\n"
    properties-shop_name:
      type: string
      minLength: 1
      maxLength: 100
      example: サンプルショップ東京
      description: |
        fincodeにおけるショップ名
    properties-shop_name_kana:
      type: string
      minLength: 1
      maxLength: 100
      example: サンプルショップトウキョウ
      description: |
        fincodeにおけるショップ名（カナ）
    shop_name_en:
      type: string
      minLength: 1
      maxLength: 100
      example: Sample Shop Tokyo
      description: |
        fincodeにおけるショップ名（英語）
    support_tel:
      type: string
      nullable: true
      minLength: 1
      maxLength: 15
      example: 312345678
      description: "購入者向けサポート窓口 電話番号\\\n形式： 電話番号（ハイフンなし）\n"
    support_mail:
      type: string
      nullable: true
      minLength: 1
      maxLength: 254
      example: support@example.com
      description: "購入者向けサポート窓口 メールアドレス\\\n形式： RFC 5322\n"
    product:
      type: boolean
      nullable: true
      example: false
      description: "物販商材 提供有無\\\n\\\nショップが物品販売を行うかどうか\n"
    service:
      type: boolean
      nullable: true
      example: false
      description: "サービス商材 提供有無\\\n\\\nショップがサービス提供を行うかどうか\n"
    digital_content:
      type: boolean
      nullable: true
      example: true
      description: "デジタルコンテンツ 提供有無\\\n\\\nショップがデジタルコンテンツ販売を行うかどうか\n"
    prepaid_point:
      type: boolean
      nullable: true
      example: true
      description: "プリペイドポイントの有無\\\n\\\nショップがプリペイドポイントを導入しているかどうか\n"
    unit_price:
      type: number
      nullable: true
      minimum: 1
      maximum: 23
      example: 1000
      description: "1回の決済における金額（単価）\\\n\\\n例： `1000`（1000円）\n"
    content_description:
      type: string
      nullable: true
      minLength: 1
      maxLength: 5000
      example: |
        本サービスは、ユーザーが自由にWeb記事を投稿・販売できるコンテンツを提供しています。
      description: "取扱商材の説明\\\n\\\nショップの提供する商材についての説明\n"
    about_expiration:
      type: string
      nullable: true
      minLength: 1
      maxLength: 300
      example: ポイントは1年間有効。
      description: "ポイント有効期限について\\\n\\\nプリペイドポイントの有効期限について\n"
    how_to_use:
      type: string
      nullable: true
      minLength: 1
      maxLength: 300
      example: ポイントは購入時に利用可能で、合計金額からポイントを差し引いて決済を行う。
      description: "ポイント利用方法\\\n\\\nプリペイドポイントの利用方法\n"
    lost_trial:
      type: boolean
      nullable: true
      example: true
      description: "改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明\n\n- `true`: 改正割賦販売法に基づく訴訟敗訴歴がある\n- `false`: 改正割賦販売法に基づく訴訟敗訴歴はない\n"
    deals_insecure_content:
      type: boolean
      nullable: true
      example: true
      description: "fincodeで取扱不可の商材を取り扱わないことの表明\n\n- `true`: 取扱不可の商材を取り扱う予定はない\n- `false`: 取扱不可の商材を取り扱う予定がある\n\nfincodeの禁止商材は以下の通りです。\n\n- 金融行為（クレジットカードショッピング枠の現金化等）\n- 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券\n- 賭博、ギャンブル\n- RMT（リアルマネートレーディング）\n- ペット等の生き物全般（※標本・剥製も含む）\n- お布施\n- 危険ドラッグ、デザイナーズドラッグ\n- 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等）\n- 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの\n- 公序良俗に反するもの（アダルト、出会い系サイトを含む）\n- 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法）\n"
    deals_long_apply_content:
      type: boolean
      nullable: true
      example: true
      description: "fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明\n\n- `true`: fincode審査に時間がかかるコンテンツを取り扱う\n- `false`: fincode審査に時間がかかるコンテンツを取り扱わない\n\n以下の商材を取り扱う場合は`true`を指定する必要があります。\n\n- 呉服\n- コンサルディングサービス\n- エステ、美容サロン、美容医療\n- スポーツ施設・フィットネスクラブ\n- カルチャースクール・通信講座\n- データ販売\n- 情報詳細（情報の内容自体が商品となるもの）\n- 占い\n- サプリメント・健康食品\n- 美容品・化粧品\n- カツラ\n- 旅行業に該当するサービス\n- タバコ・CBD\n- 寄付金\n"
    ContractDetail:
      type: object
      properties:
        corporate:
          type: boolean
          nullable: true
          example: true
          description: "事業形態\n\n- `true`: 法人\n- `false`: 個人事業主\n"
        corporate_number:
          $ref: "#/components/schemas/corporate_number"
        corporate_name:
          $ref: "#/components/schemas/corporate_name"
        corporate_name_kana:
          $ref: "#/components/schemas/corporate_name_kana"
        hp:
          $ref: "#/components/schemas/hp"
        capital:
          $ref: "#/components/schemas/capital"
        established_at:
          $ref: "#/components/schemas/established_at"
        yearly_sales:
          $ref: "#/components/schemas/yearly_sales"
        business_details:
          $ref: "#/components/schemas/business_details"
        company_postal_code:
          $ref: "#/components/schemas/company_postal_code"
        company_prefecture:
          $ref: "#/components/schemas/company_prefecture"
        company_prefecture_kana:
          $ref: "#/components/schemas/company_prefecture_kana"
        company_address_municipality:
          $ref: "#/components/schemas/company_address_municipality"
        company_address_municipality_kana:
          $ref: "#/components/schemas/company_address_municipality_kana"
        company_address_section:
          $ref: "#/components/schemas/company_address_section"
        company_address_section_kana:
          $ref: "#/components/schemas/company_address_section_kana"
        company_address_chrome:
          $ref: "#/components/schemas/company_address_chrome"
        company_address_chrome_kana:
          $ref: "#/components/schemas/company_address_chrome_kana"
        company_address_building_name:
          $ref: "#/components/schemas/company_address_building_name"
        company_address_building_name_kana:
          $ref: "#/components/schemas/company_address_building_name_kana"
        company_tel:
          $ref: "#/components/schemas/company_tel"
        representative_last_name:
          $ref: "#/components/schemas/representative_last_name"
        representative_last_name_kana:
          $ref: "#/components/schemas/representative_last_name_kana"
        representative_first_name:
          $ref: "#/components/schemas/representative_first_name"
        representative_first_name_kana:
          $ref: "#/components/schemas/representative_first_name_kana"
        representative_birthday:
          $ref: "#/components/schemas/representative_birthday"
        representative_gender:
          $ref: "#/components/schemas/representative_gender"
        representative_postal_code:
          $ref: "#/components/schemas/representative_postal_code"
        representative_prefecture:
          $ref: "#/components/schemas/representative_prefecture"
        representative_prefecture_kana:
          $ref: "#/components/schemas/representative_prefecture_kana"
        representative_address_municipality:
          $ref: "#/components/schemas/representative_address_municipality"
        representative_address_municipality_kana:
          $ref: "#/components/schemas/representative_address_municipality_kana"
        representative_address_section:
          $ref: "#/components/schemas/representative_address_section"
        representative_address_section_kana:
          $ref: "#/components/schemas/representative_address_section_kana"
        representative_address_chrome:
          $ref: "#/components/schemas/representative_address_chrome"
        representative_address_chrome_kana:
          $ref: "#/components/schemas/representative_address_chrome_kana"
        representative_tel:
          $ref: "#/components/schemas/representative_tel"
        staff1_last_name:
          $ref: "#/components/schemas/staff1_last_name"
        staff1_last_name_kana:
          $ref: "#/components/schemas/staff1_last_name_kana"
        staff1_first_name:
          $ref: "#/components/schemas/staff1_first_name"
        staff1_first_name_kana:
          $ref: "#/components/schemas/staff1_first_name_kana"
        staff1_tel:
          $ref: "#/components/schemas/staff1_tel"
        staff1_mail:
          $ref: "#/components/schemas/staff1_mail"
        staff2_last_name:
          $ref: "#/components/schemas/staff2_last_name"
        staff2_last_name_kana:
          $ref: "#/components/schemas/staff2_last_name_kana"
        staff2_first_name:
          $ref: "#/components/schemas/staff2_first_name"
        staff2_first_name_kana:
          $ref: "#/components/schemas/staff2_first_name_kana"
        staff2_tel:
          $ref: "#/components/schemas/staff2_tel"
        staff2_mail:
          $ref: "#/components/schemas/staff2_mail"
        used_on_app:
          $ref: "#/components/schemas/used_on_app"
        used_on_web:
          $ref: "#/components/schemas/used_on_web"
        used_on_other:
          type: boolean
          nullable: true
          example: false
          description: "その他の箇所での利用有無\\\n\\\nWebアプリケーションやネイティブアプリ上でない箇所で利用があるかどうか\n\n- `true`: Webアプリ／ネイティブアプリでない箇所でfincodeを使用する\n"
        site_existing:
          type: number
          enum:
          - 0
          - 1
          - 2
          description: "Webサイトの公開状況\\\n\\\nfincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。\n\n- `0`: fincode審査チームがサイトを閲覧可能\n- `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）\n- `2`: fincode審査チームがサイトを閲覧不可能\n"
        url:
          $ref: "#/components/schemas/url"
        site_credential:
          $ref: "#/components/schemas/credential"
        shop_name:
          $ref: "#/components/schemas/properties-shop_name"
        shop_name_kana:
          $ref: "#/components/schemas/properties-shop_name_kana"
        shop_name_en:
          $ref: "#/components/schemas/shop_name_en"
        platform_name:
          type: string
          minLength: 1
          maxLength: 100
          nullable: true
          description: |
            プラットフォーム名
        support_tel:
          $ref: "#/components/schemas/support_tel"
        support_mail:
          $ref: "#/components/schemas/support_mail"
        provides_product:
          $ref: "#/components/schemas/product"
        provides_service:
          $ref: "#/components/schemas/service"
        provides_digital_content:
          $ref: "#/components/schemas/digital_content"
        prepaid:
          $ref: "#/components/schemas/prepaid_point"
        unit_price:
          $ref: "#/components/schemas/unit_price"
        content_category_master_id:
          type: number
          minimum: 1
          maximum: 10
          nullable: true
          description: |
            取扱商材カテゴリID
        content_description:
          $ref: "#/components/schemas/content_description"
        expiretion_date_of_point:
          $ref: "#/components/schemas/about_expiration"
        usage_of_point:
          $ref: "#/components/schemas/how_to_use"
        lost_trial:
          $ref: "#/components/schemas/lost_trial"
        deals_insecure_content:
          $ref: "#/components/schemas/deals_insecure_content"
        deals_long_apply_content:
          $ref: "#/components/schemas/deals_long_apply_content"
    ShopPaymentMethod:
      type: number
      enum:
      - 0
      - 1
      description: "支払い方法\\\n\\\nキャンセル金額の超過などによりfincodeへの支払が発生した場合の支払い方法\n\n- `0`: クレジットカード\n- `1`: 銀行口座\n"
    ContractBankAccountInfo:
      type: object
      properties:
        bank_name:
          type: string
          minLength: 1
          maxLength: 20
          description: |
            銀行名
        bank_name_kana:
          type: string
          minLength: 1
          maxLength: 100
          description: |
            銀行名（カナ）
        bank_code:
          type: string
          minLength: 4
          maxLength: 4
          description: |
            金融機関コード
        branch_code:
          type: string
          minLength: 3
          maxLength: 3
          description: |
            支店コード
        branch_name:
          type: string
          minLength: 1
          maxLength: 100
          description: |
            支店名
        branch_name_kana:
          type: string
          minLength: 1
          maxLength: 100
          description: |
            支店名（カナ）
        account_kind:
          type: number
          enum:
          - 0
          - 1
          description: "口座種別\n\n- `0`: 普通\n- `1`: 当座\n"
        account_number:
          type: string
          minLength: 7
          maxLength: 7
          description: |
            口座番号
        account_name:
          type: string
          minLength: 1
          maxLength: 47
          description: |
            口座名義（カタカナ）
    CardDestination:
      type: object
      properties:
        contract_card_info_master_id:
          type: integer
          nullable: true
          minimum: 1
          maximum: 10
          example: 123456789
          description: |
            カードマスタID
        examination_master_id:
          $ref: "#/components/schemas/ExaminationMasterId"
        destination:
          type: string
          nullable: true
          minLength: 1
          maxLength: 13
          description: |
            仕向け先
        destination_type:
          type: number
          nullable: true
          minimum: 1
          maximum: 3
          description: |
            仕向け先種別
    CardPaymentSetting:
      type: object
      properties:
        vm_tds_available:
          type: boolean
          nullable: true
          example: true
          description: "（VISA／Mastercard）3Dセキュア認証が有効かどうか\n\n- `true`: 3Dセキュア認証が有効\n- `false`: 3Dセキュア認証が無効\n"
        vm_tds_required:
          type: boolean
          nullable: true
          example: true
          description: "（VISA／Mastercard）3Dセキュア認証の利用が必須かどうか\n\n- `true`: 3Dセキュア認証の使用が必須\n- `false`: 3Dセキュア認証の使用が任意\n"
        ja_tds_available:
          type: boolean
          nullable: true
          example: true
          description: "（JCB／AMEX）3Dセキュア認証が有効かどうか\n\n- `true`: 3Dセキュア認証が有効\n- `false`: 3Dセキュア認証が無効\n"
        ja_tds_required:
          type: boolean
          nullable: true
          example: true
          description: "（JCB／AMEX）3Dセキュア認証の利用が必須かどうか\n\n- `true`: 3Dセキュア認証の使用が必須\n- `false`: 3Dセキュア認証の使用が任意\n"
        install_payment_available:
          type: boolean
          nullable: true
          example: true
          description: "分割払い／リボ払いが利用可能かどうか\n\n- `true`: 利用可能\n- `false`: 利用不可\n"
    RegistryCorporateInfo:
      type: object
      properties:
        company_name:
          type: string
          nullable: true
          description: |
            法人名
        company_name_kana:
          type: string
          nullable: true
          description: |
            法人名（カナ）
        company_kind:
          type: string
          nullable: true
          description: |
            法人種別（国税庁既定のコード定義に準拠）
        company_postal_code:
          type: string
          nullable: true
          description: |
            会社情報 郵便番号
        company_prefecture_code:
          type: string
          nullable: true
          description: |
            会社情報 都道府県コード
        company_city_code:
          type: string
          nullable: true
          description: |
            会社情報 市区町村コード
        company_prefecture:
          type: string
          nullable: true
          description: |
            会社情報 都道府県
        company_prefecture_kana:
          type: string
          nullable: true
          description: |
            会社情報 都道府県（カナ）
        company_city:
          type: string
          nullable: true
          description: |
            会社情報 市区町村
        company_city_kana:
          type: string
          nullable: true
          description: |
            会社情報 市区町村（カナ）
        company_street:
          type: string
          nullable: true
          description: |
            会社情報 町域・丁目・番地
        company_street_kana:
          type: string
          nullable: true
          description: |
            会社情報 町域・丁目・番地（カナ）
    Contract:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        platform_id:
          $ref: "#/components/schemas/platform_id"
        shop_type:
          $ref: "#/components/schemas/ShopType"
        status_code:
          $ref: "#/components/schemas/ContractStatus"
        examination:
          type: array
          items:
            $ref: "#/components/schemas/Examination"
          description: "審査情報\\\n\\\n決済事業者ごとの審査状況を配列に格納しています。\\\nある決済手段について審査が開始されていない場合、その決済手段に対応する`examination_master_id`をもつオブジェクトは配列中に存在しません。\n"
        available_status_code:
          type: integer
          enum:
          - 201
          - 202
          example: 201
          description: "利用可能モード\n\n- 201: テスト環境のみ利用可能\n- 202: 本番環境利用可能\n"
        create_date:
          type: string
          example: 2021/01/01
          description: |
            ショップを作成したユーザーの登録日
            
            形式：`yyyy/MM/dd`
        contracted_at:
          type: string
          nullable: true
          example: 2021/01/01
          description: |
            本番環境申請日
            
            形式：`yyyy/MM/dd`
        start_charging_at:
          type: string
          nullable: true
          example: 2021/01/01
          description: |
            初回登録完了日
            
            形式：`yyyy/MM/dd`
        expired_at:
          type: string
          nullable: true
          example: 2021/12/01
          description: |
            解約日
            
            形式：`yyyy/MM/dd`
        sales_deposit_status_code:
          type: integer
          enum:
          - 501
          - 502
          - 503
          nullable: true
          description: "売上入金 可否ステータス\n\n- `501`: 入金に必要な手続きが未完了\n- `502`: 入金可能\n- `503`: 入金保留\n"
        sales_deposit_status_updated_date:
          type: string
          nullable: true
          example: 2021/01/21
          description: |
            売上入金 可否ステータス 更新日
            
            形式：`yyyy/MM/dd`
        denied_at:
          type: string
          nullable: true
          example: null
          description: |
            契約不成立日
            
            形式：`yyyy/MM/dd`
        suspended_billing:
          type: boolean
          nullable: true
          example: false
          description: |
            請求停止フラグ
        suspended_billing_date:
          type: string
          nullable: true
          example: null
          description: |
            請求停止フラグ 更新日
            
            形式：`yyyy/MM/dd`
        suspended_payment:
          type: boolean
          nullable: true
          example: false
          description: |
            入金停止フラグ
        suspended_payment_date:
          type: string
          nullable: true
          example: null
          description: |
            入金停止フラグ 更新日
            
            形式：`yyyy/MM/dd`
        suspended_service:
          type: boolean
          nullable: true
          example: false
          description: |
            サービス停止フラグ
        suspended_service_date:
          type: string
          nullable: true
          example: null
          description: |
            サービス停止フラグ 更新日
            
            形式：`yyyy/MM/dd`
        suspeded_immediate_use:
          type: boolean
          nullable: true
          example: false
          description: |
            即時利用停止フラグ
        suspended_immediate_use_date:
          type: string
          nullable: true
          example: null
          description: |
            即時利用停止フラグ 更新日
            
            形式：`yyyy/MM/dd`
        stop_cancelaltion_memo:
          type: string
          nullable: true
          minLength: 1
          maxLength: 5000
          example: null
          description: |
            停止・解約 備考
        obligations_notice:
          type: string
          nullable: true
          minLength: 1
          maxLength: 5000
          example: null
          description: |
            特記事項（債権債務）
        user_shop_name:
          type: string
          nullable: true
          minLength: 1
          maxLength: 50
          example: null
          description: |
            ショップ名（ユーザー用）
        register_mail:
          type: string
          nullable: true
          minLength: 1
          maxLength: 384
          example: null
          description: |
            登録メールアドレス
        platform_reprentative_shop:
          type: boolean
          nullable: true
          example: false
          description: "プラットフォームの代表ショップか\n\n- true: 代表ショップ\n- false: 代表ショップではない\n"
        shared_customer_flag:
          $ref: "#/components/schemas/shared_customer_flag"
        contract_detail:
          allOf:
          - $ref: "#/components/schemas/ContractDetail"
          - type: object
            properties:
              pay_by:
                $ref: "#/components/schemas/ShopPaymentMethod"
          description: |
            契約情報
        contract_bank_account:
          $ref: "#/components/schemas/ContractBankAccountInfo"
        contract_virtual_bank:
          $ref: "#/components/schemas/ContractBankAccountInfo"
        contract_card_destination:
          type: array
          items:
            $ref: "#/components/schemas/CardDestination"
          description: |
            カード決済 仕向け先のリスト
        credit_card_setting:
          $ref: "#/components/schemas/CardPaymentSetting"
        official_registered_corporate_info:
          $ref: "#/components/schemas/RegistryCorporateInfo"
    Contracts.Retrieving.Response:
      $ref: "#/components/schemas/Contract"
    ContentInfo:
      allOf:
      - $ref: "#/components/schemas/ContentInfo.V2"
      - type: object
        properties:
          id:
            type: string
            minLength: 1
            maxLength: 19
            nullable: true
            description: |
              商品情報ID
          type:
            type: number
            enum:
            - 0
            - 1
            - 2
            description: "取扱商材 品目種別\n\n- `0`: 物品販売\n- `1`: サービス\n- `2`: デジタルコンテンツ\n"
    ContractInputStatus:
      type: number
      enum:
      - 301
      - 302
      - 303
      - 304
      description: "本番環境申請情報入力ステータス\n\n- `301`: 全項目未入力\n- `302`: 一部入力済み\n- `303`: 全項目入力済み\n- `304`: 本番環境申請済み\n"
    ExaminationInfo:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        platform_id:
          $ref: "#/components/schemas/platform_id"
        shop_type:
          $ref: "#/components/schemas/ShopType"
        status_code:
          $ref: "#/components/schemas/ContractStatus"
        deposit_cycle_master_id:
          $ref: "#/components/schemas/DepositCycleMasterId"
        contract_detail:
          allOf:
          - $ref: "#/components/schemas/ContractDetail"
          - type: object
            properties:
              pay_by:
                $ref: "#/components/schemas/ShopPaymentMethod"
          description: "契約情報\\\n\\\nfincodeに登録されているショップ運営事業者の契約情報の詳細\n"
        shop_item_detail:
          type: array
          items:
            $ref: "#/components/schemas/ContentInfo"
          description: "ショップ 取扱商材情報\\\n\\\nfincodeに登録されているショップの取扱商材情報\n"
        contract_bank_account:
          $ref: "#/components/schemas/ContractBankAccountInfo"
        contract_input_status:
          type: object
          properties:
            status_code:
              $ref: "#/components/schemas/ContractInputStatus"
            contract_info_input:
              type: boolean
              description: "契約情報入力完了フラグ\\\n\\\n契約情報の入力が完了しているかどうか\n"
            shop_info_input:
              type: boolean
              description: "ショップ情報入力完了フラグ\\\n\\\nショップ情報の入力が完了しているかどうか\n"
            account_info_input:
              type: boolean
              description: "銀行口座情報入力完了フラグ\\\n\\\n銀行口座情報の入力が完了しているかどうか\n"
            card_info_input:
              type: boolean
              description: "請求先クレジットカード情報入力完了フラグ\\\n\\\nfincodeが請求を行う際に請求先となるクレジットカード情報の入力が完了しているかどうか\n"
      x-req-properties:
        update_contract_detail:
          type: boolean
          default: false
          nullable: true
          description: "契約情報更新フラグ\\\n\\\n契約情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
        update_shop:
          type: boolean
          default: false
          nullable: true
          description: "ショップ情報更新フラグ\\\n\\\nショップ情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
        update_bank_account:
          type: boolean
          default: false
          nullable: true
          description: "入金用銀行口座情報更新フラグ\\\n\\\nfincodeの売上の入金先となる銀行口座情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
        update_deposit_cycle:
          type: boolean
          default: false
          nullable: true
          description: "入金サイクル情報更新フラグ\\\n\\\nfincodeの売上の入金サイクル情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
    ExaminationInfo.Retrieving.Response:
      $ref: "#/components/schemas/ExaminationInfo"
    update_contract_detail:
      type: boolean
      default: false
      nullable: true
      description: "契約情報更新フラグ\\\n\\\n契約情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
    update_shop:
      type: boolean
      default: false
      nullable: true
      description: "ショップ情報更新フラグ\\\n\\\nショップ情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
    update_bank_account:
      type: boolean
      default: false
      nullable: true
      description: "入金用銀行口座情報更新フラグ\\\n\\\nfincodeの売上の入金先となる銀行口座情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
    update_deposit_cycle:
      type: boolean
      default: false
      nullable: true
      description: "入金サイクル情報更新フラグ\\\n\\\nfincodeの売上の入金サイクル情報の更新を行うかどうか\n\n- `true`: 更新を行う\n"
    ExaminationInfo.Updating.Request:
      type: object
      properties:
        update_contract_detail:
          $ref: "#/components/schemas/update_contract_detail"
        update_shop:
          $ref: "#/components/schemas/update_shop"
        update_bank_account:
          $ref: "#/components/schemas/update_bank_account"
        update_deposit_cycle:
          $ref: "#/components/schemas/update_deposit_cycle"
        deposit_cycle_master_id:
          $ref: "#/components/schemas/DepositCycleMasterId"
        contract_detail:
          allOf:
          - $ref: "#/components/schemas/ContractDetail"
          - type: object
            properties:
              pay_by:
                $ref: "#/components/schemas/ShopPaymentMethod"
          description: "契約情報\\\n\\\nfincodeに登録するショップ運営事業者の契約情報の詳細\n"
        shop_item_detail:
          type: array
          items:
            $ref: "#/components/schemas/ContentInfo"
          description: "ショップ 取扱商材情報\\\n\\\nfincodeに登録するショップの取扱商材情報\n"
        contract_bank_account:
          $ref: "#/components/schemas/ContractBankAccountInfo"
    ExaminationInfo.Updating.Response:
      $ref: "#/components/schemas/ExaminationInfo"
    FincodeEvent:
      type: string
      enum:
      - payments.card.regist
      - payments.card.exec
      - payments.card.capture
      - payments.card.cancel
      - payments.card.auth
      - payments.card.change
      - payments.card.secure2.authenticate
      - payments.card.secure2.result
      - payments.card.secure
      - payments.applepay.regist
      - payments.applepay.exec
      - payments.applepay.capture
      - payments.applepay.cancel
      - payments.konbini.regist
      - payments.konbini.exec
      - payments.konbini.cancel
      - payments.konbini.complete
      - payments.konbini.complete.stub
      - payments.konbini.expired.update.batch
      - payments.paypay.regist
      - payments.paypay.exec
      - payments.paypay.capture
      - payments.paypay.cancel
      - payments.paypay.change
      - payments.paypay.complete
      - payments.directdebit.regist
      - payments.directdebit.exec
      - payments.directdebit.cancel
      - payments.directdebit.change
      - payments.directdebit.complete
      - payments.directdebit.complete.stub
      - customers.payment_methods.updated
      - card.regist
      - card.update
      - subscription.card.regist
      - subscription.card.delete
      - subscription.card.update
      - recurring.card.batch
      - subscription.directdebit.regist
      - subscription.directdebit.delete
      - subscription.directdebit.update
      - recurring.directdebit.batch
      - payments.bulk.card.regist
      - payments.bulk.card.batch
      - contracts.status_code.updated
      minLength: 1
      maxLength: 40
      example: payments.card.secure
      description: |
        Webhook通知 トリガーイベント
    WebhookSetting:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 50
          example: w_*********************
          description: |
            Webhook設定ID
        url:
          type: string
          format: uri
          example: https://your-service.example.com/webhook-receiver
          description: "Webhook通知先 URL\\\n\\\nWebhookの通知先URLを指定します。\\\nfincodeのWebhookはHTTPS通信かつ443ポートでのみ受信可能です。\n"
        event:
          $ref: "#/components/schemas/FincodeEvent"
        signature:
          type: string
          minLength: 1
          maxLength: 60
          example: WEBHOOK_FROM_FINCODE
          description: "署名\\\n\\\nこのWebhookがfincodeから送信されたことを確認するための署名です。\\\nfincodeからのWebhook通知において`Fincode-Signature`ヘッダーにこの値が含まれます。\n"
        created:
          $ref: "#/components/schemas/created"
        updated:
          $ref: "#/components/schemas/updated"
    WebhookSetting.list:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/WebhookSetting"
    WebhookSetting.ListRetrieving.Response:
      $ref: "#/components/schemas/WebhookSetting.list"
    WebhookSetting_properties-id:
      type: string
      minLength: 1
      maxLength: 50
      example: w_*********************
      description: |
        Webhook設定ID
    properties-url:
      type: string
      format: uri
      example: https://your-service.example.com/webhook-receiver
      description: "Webhook通知先 URL\\\n\\\nWebhookの通知先URLを指定します。\\\nfincodeのWebhookはHTTPS通信かつ443ポートでのみ受信可能です。\n"
    signature:
      type: string
      minLength: 1
      maxLength: 60
      example: WEBHOOK_FROM_FINCODE
      description: "署名\\\n\\\nこのWebhookがfincodeから送信されたことを確認するための署名です。\\\nfincodeからのWebhook通知において`Fincode-Signature`ヘッダーにこの値が含まれます。\n"
    WebhookSetting.Creating.Request:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/WebhookSetting_properties-id"
        url:
          $ref: "#/components/schemas/properties-url"
        event:
          $ref: "#/components/schemas/FincodeEvent"
        signature:
          $ref: "#/components/schemas/signature"
      required:
      - event
    WebhookSetting.Creating.Response:
      $ref: "#/components/schemas/WebhookSetting"
    WebhookSettingId_schema:
      type: string
      example: w_**********************
    WebhookSetting.Retrieving.Response:
      $ref: "#/components/schemas/WebhookSetting"
    WebhookSetting.Updating.Request:
      type: object
      properties:
        url:
          $ref: "#/components/schemas/properties-url"
        event:
          $ref: "#/components/schemas/FincodeEvent"
        signature:
          $ref: "#/components/schemas/signature"
    WebhookSetting.Updating.Response:
      $ref: "#/components/schemas/WebhookSetting"
    WebhookSetting.Deleting.Response:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/WebhookSetting_properties-id"
        delete_flag:
          $ref: "#/components/schemas/delete_flag"
    CurrencyCode:
      type: string
      enum:
      - JPY
      example: JPY
      description: "通貨コード\\\nこの決済で利用された通貨のコードです。\n\n- `JPY`: 日本円\n"
    WebhookEvent.Payment.Card:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        access_id:
          $ref: "#/components/schemas/access_id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        customer_id:
          $ref: "#/components/schemas/id"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        currency:
          $ref: "#/components/schemas/CurrencyCode"
        job_code:
          $ref: "#/components/schemas/CardPaymentJobCode"
        subscription_id:
          $ref: "#/components/schemas/Subscription_properties-id"
        bulk_payment_id:
          $ref: "#/components/schemas/PaymentBulk_properties-id"
        forward:
          $ref: "#/components/schemas/forward"
        transaction_id:
          $ref: "#/components/schemas/transaction_id"
        transaction_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59:59.999
          description: |
            決済 処理日時
        approve:
          $ref: "#/components/schemas/approve"
        error_code:
          $ref: "#/components/schemas/error_code"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    WebhookResponse:
      type: object
      properties:
        receive:
          type: string
          minLength: 1
          maxLength: 1
          enum:
          - "0"
          - "1"
          example: "1"
          description: "Webhook通知受信\\\n\\\nWebhookの受信が正常に完了したかどうかをfincodeにレスポンスします。\n\n- `0`: 受信成功<br /><span class=\"smallText\">fincodeは受信に成功したと判断し、通知を終了します。</span>\n- `1`: 受信失敗<br /><span class=\"smallText\">fincodeは受信に失敗したと判断します。Webhookの受信に失敗した場合は、fincodeはリトライを行います。</span>\n"
    WebhookEvent.Payment.ApplePay:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        access_id:
          $ref: "#/components/schemas/access_id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        customer_id:
          $ref: "#/components/schemas/id"
        method:
          $ref: "#/components/schemas/CardPayMethod"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        currency:
          $ref: "#/components/schemas/CurrencyCode"
        job_code:
          $ref: "#/components/schemas/ApplePayPaymentJobCode"
        forward:
          $ref: "#/components/schemas/forward"
        transaction_id:
          $ref: "#/components/schemas/transaction_id"
        transaction_date:
          type: string
          nullable: true
          example: 2022/05/16 23:59:59.999
          description: |
            決済 処理日時
        approve:
          $ref: "#/components/schemas/approve"
        error_code:
          $ref: "#/components/schemas/error_code"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    overpayment_flag:
      type: string
      enum:
      - "0"
      - "1"
      description: "多重支払フラグ\\\nこの決済に対して複数回支払いが行われた場合`1`になります。\n\n- `0`: 0回、または1回の支払いが行われた\n- `1`: 2回以上、同一のバーコードを用いて支払いが行われた\n"
    cancel_overpayment_flag:
      type: string
      enum:
      - "0"
      - "1"
      description: "キャンセル後支払フラグ\\\nこの決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。\n\n- `0`: キャンセル後支払は行われていない\n- `1`: キャンセル後、購入者による支払いが行われた\n"
    payment_date:
      type: string
      nullable: true
      description: "支払日時\\\nコンビニ店頭で購入者が支払いを行った日時です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    payment_term:
      type: string
      nullable: true
      description: "支払い期限日時\\\nコンビニ決済の支払い期限日時です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    properties-process_date:
      type: string
      example: 2022/01/01 12:34:56.789
      description: "決済 処理日時\\\n決済の各種処理（決済実行、キャンセルなど）が行われた日時です。\n"
    konbini_store_code:
      nullable: true
      minLength: 1
      maxLength: 8
      description: "コンビニ店舗コード\\\nコンビニ事業者ごとに独自体系の店舗コードです。\n"
    order_serial:
      type: string
      nullable: true
      minLength: 1
      maxLength: 18
      description: |
        注文管理ID
    invoice_id:
      type: string
      nullable: true
      minLength: 1
      maxLength: 20
      description: |
        請求ID
    WebhookEvent.Payment.Konbini:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        access_id:
          $ref: "#/components/schemas/access_id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        customer_id:
          $ref: "#/components/schemas/id"
        overpayment_flag:
          $ref: "#/components/schemas/overpayment_flag"
        cancel_overpayment_flag:
          $ref: "#/components/schemas/cancel_overpayment_flag"
        payment_date:
          $ref: "#/components/schemas/payment_date"
        payment_term:
          $ref: "#/components/schemas/payment_term"
        process_date:
          $ref: "#/components/schemas/properties-process_date"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        konbini_code:
          $ref: "#/components/schemas/KonbiniCode"
        konbini_store_code:
          $ref: "#/components/schemas/konbini_store_code"
        order_serial:
          $ref: "#/components/schemas/order_serial"
        invoice_id:
          $ref: "#/components/schemas/invoice_id"
        error_code:
          $ref: "#/components/schemas/error_code"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    code_expiry_date:
      type: string
      nullable: true
      example: 2022/05/16 12:34:56.999
      description: "支払期限\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
    auth_max_date:
      type: string
      nullable: true
      example: 2022/05/16
      description: "仮売上期限\\\n形式： `yyyy/MM/dd`\n"
    code_id:
      type: string
      nullable: true
      minLength: 1
      maxLength: 64
      example: "123456"
      description: |
        PayPayの支払いコードID
    payment_id:
      type: string
      nullable: true
      minLength: 1
      maxLength: 64
      description: |
        PayPay 決済ID
    properties-payment_date:
      type: string
      nullable: true
      example: 2022/05/16 12:34:56.999
      description: "支払日時\\\n形式： `yyyy/MM/dd HH:mm:ss.SSS`\n"
    merchant_payment_id:
      type: string
      nullable: true
      minLength: 1
      maxLength: 64
      description: |
        PayPay トランザクションID
    merchant_update_id:
      type: string
      nullable: true
      minLength: 1
      maxLength: 64
      description: |
        PayPay 金額変更ID
    merchant_revert_id:
      type: string
      nullable: true
      minLength: 1
      maxLength: 64
      description: |
        PayPay キャンセルID
    merchant_refund_id:
      type: string
      nullable: true
      minLength: 1
      maxLength: 64
      description: |
        PayPay 返金ID
    WebhookEvent.Payment.PayPay:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        access_id:
          $ref: "#/components/schemas/access_id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        customer_id:
          $ref: "#/components/schemas/id"
        process_date:
          $ref: "#/components/schemas/properties-process_date"
        job_code:
          $ref: "#/components/schemas/PayPayPaymentJobCode"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        code_expiry_date:
          $ref: "#/components/schemas/code_expiry_date"
        auth_max_date:
          $ref: "#/components/schemas/auth_max_date"
        order_description:
          $ref: "#/components/schemas/order_description"
        code_id:
          $ref: "#/components/schemas/code_id"
        payment_id:
          $ref: "#/components/schemas/payment_id"
        payment_date:
          $ref: "#/components/schemas/properties-payment_date"
        merchant_payment_id:
          $ref: "#/components/schemas/merchant_payment_id"
        merchant_update_id:
          $ref: "#/components/schemas/merchant_update_id"
        merchant_revert_id:
          $ref: "#/components/schemas/merchant_revert_id"
        merchant_refund_id:
          $ref: "#/components/schemas/merchant_refund_id"
        error_code:
          $ref: "#/components/schemas/error_code"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    withdrawal_date:
      type: string
      nullable: true
      example: 2022/05/06
      description: "引き落とし日\\\n実際に購入者の口座から引き落としが行われた実績日です。\\\n\\\n形式： `yyyy/MM/dd`\n"
    request_accept_end_date:
      type: string
      nullable: true
      example: 2022/04/25
      description: "請求依頼受付期間 終了日\\\n振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\\\n\\\n形式： `yyyy/MM/dd`\\\n詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。\n"
    transfer_return_date:
      type: string
      nullable: true
      example: 2022/05/11
      description: "請求結果反映 予定日\\\n\\\n形式： `yyyy/MM/dd`\\\n詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。\n"
    WebhookEvent.Payment.DirectDebit:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        order_id:
          $ref: "#/components/schemas/Payment_properties-id"
        access_id:
          $ref: "#/components/schemas/access_id"
        pay_type:
          $ref: "#/components/schemas/PayType"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        customer_id:
          $ref: "#/components/schemas/id"
        payment_method_id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        result_code:
          $ref: "#/components/schemas/DirectDebitResultCode"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        amount:
          $ref: "#/components/schemas/amount"
        tax:
          $ref: "#/components/schemas/tax"
        process_date:
          $ref: "#/components/schemas/properties-process_date"
        target_date:
          $ref: "#/components/schemas/target_date"
        withdrawal_date:
          $ref: "#/components/schemas/withdrawal_date"
        request_accept_end_date:
          $ref: "#/components/schemas/request_accept_end_date"
        transfer_return_date:
          $ref: "#/components/schemas/transfer_return_date"
        remarks:
          $ref: "#/components/schemas/remarks"
        subscription_id:
          $ref: "#/components/schemas/Subscription_properties-id"
        error_code:
          $ref: "#/components/schemas/error_code"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    WebhookEvent.CustomerPaymentMethod:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        customer_id:
          $ref: "#/components/schemas/id"
        payment_method_id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        pay_type:
          $ref: "#/components/schemas/PaymentMethodPayType"
        status:
          $ref: "#/components/schemas/PaymentMethodStatus"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        application_type:
          $ref: "#/components/schemas/DirectDebitApplicationType"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    properties-customer_group_id:
      type: string
      nullable: true
      minLength: 13
      maxLength: 13
      description: "顧客情報共有グループID\\\nプラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。\n"
    Card_properties-expire:
      $ref: "#/components/schemas/expire"
    WebhookEvent.Card:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        customer_id:
          $ref: "#/components/schemas/id"
        customer_group_id:
          $ref: "#/components/schemas/properties-customer_group_id"
        card_id:
          $ref: "#/components/schemas/properties-id"
        default_flag:
          $ref: "#/components/schemas/default_flag"
        card_no_display:
          $ref: "#/components/schemas/properties-card_no"
        expire_display:
          $ref: "#/components/schemas/Card_properties-expire"
        process_date:
          type: string
          example: 2022/01/01 12:34:56.789
          description: |
            処理日時
        process_type:
          type: string
          enum:
          - I
          - U
          description: "処理タイプ\n\n- `I`: 登録\n- `U`: 更新\n"
        pay_type:
          type: string
          enum:
          - Card
          description: |
            決済種別
        forward:
          $ref: "#/components/schemas/forward"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    next_charge_date:
      type: string
      example: 2022/06/16 00:00:00.000
      description: "次回課金日\\\nサブスクリプションの次回課金日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
    WebhookEvent.Subscription.Card:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        subscription_id:
          $ref: "#/components/schemas/Subscription_properties-id"
        plan_id:
          $ref: "#/components/schemas/Plan_properties-id"
        customer_id:
          $ref: "#/components/schemas/id"
        card_id:
          $ref: "#/components/schemas/properties-id"
        default_card_flag:
          $ref: "#/components/schemas/default_flag"
        status:
          $ref: "#/components/schemas/SubscriptionStatus"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        process_date:
          $ref: "#/components/schemas/properties-process_date"
        start_date:
          $ref: "#/components/schemas/start_date"
        stop_date:
          $ref: "#/components/schemas/stop_date"
        next_charge_date:
          $ref: "#/components/schemas/next_charge_date"
        end_month_flag:
          $ref: "#/components/schemas/end_month_flag"
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    WebhookEvent.Subscription.DirectDebit:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        subscription_id:
          $ref: "#/components/schemas/Subscription_properties-id"
        plan_id:
          $ref: "#/components/schemas/Plan_properties-id"
        customer_id:
          $ref: "#/components/schemas/id"
        payment_method_id:
          $ref: "#/components/schemas/PaymentMethod_properties-id"
        default_flag:
          $ref: "#/components/schemas/properties-default_flag"
        status:
          $ref: "#/components/schemas/SubscriptionStatus"
        client_field_1:
          $ref: "#/components/schemas/client_field_n"
        client_field_2:
          $ref: "#/components/schemas/client_field_n"
        client_field_3:
          $ref: "#/components/schemas/client_field_n"
        remarks:
          $ref: "#/components/schemas/remarks"
        start_date:
          $ref: "#/components/schemas/start_date"
        stop_date:
          $ref: "#/components/schemas/stop_date"
        next_charge_date:
          $ref: "#/components/schemas/next_charge_date"
        end_month_flag:
          $ref: "#/components/schemas/end_month_flag"
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    WebhookEvent.RecurringBatch.Card:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        succeeded:
          type: string
          maxLength: 10
          description: "成功件数\\\n\\\n今回のサブスクリプション課金において成功した決済の件数です。\n"
        failed:
          type: string
          maxLength: 10
          description: "失敗件数\\\n\\\n今回のサブスクリプション課金において失敗した決済の件数です。\n"
        total:
          type: string
          maxLength: 10
          description: "合計件数\\\n\\\n今回のサブスクリプション課金において発生した決済の合計件数です。\n"
        process_date:
          $ref: "#/components/schemas/properties-process_date"
        charge_date:
          type: string
          example: 2022/06/16 00:00:00.000
          description: "課金日\\\n今回のサブスクリプションの課金日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    WebhookEvent.RecurringBatch.DirectDebit:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        succeeded:
          type: string
          maxLength: 10
          description: "成功件数\\\n\\\n今回のサブスクリプション課金において成功した決済の件数です。\n"
        failed:
          type: string
          maxLength: 10
          description: "失敗件数\\\n\\\n今回のサブスクリプション課金において失敗した決済の件数です。\n"
        total:
          type: string
          maxLength: 10
          description: "合計件数\\\n\\\n今回のサブスクリプション課金において発生した決済の合計件数です。\n"
        process_date:
          $ref: "#/components/schemas/properties-process_date"
        charge_date:
          type: string
          example: 2022/06/16 00:00:00.000
          description: "課金日\\\n今回のサブスクリプションの課金日です。\\\n\\\n形式：`yyyy/MM/dd HH:mm:ss.SSS`\n"
        pay_type:
          $ref: "#/components/schemas/SubscriptionPayType"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    WebhookEvent.PaymentBulk.Regist.Card:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        bulk_payment_id:
          $ref: "#/components/schemas/PaymentBulk_properties-id"
        file_name:
          $ref: "#/components/schemas/file_name"
        status:
          $ref: "#/components/schemas/PaymentBulkStatus"
        regist_total_count:
          type: string
          minLength: 1
          maxLength: 10
          description: "総件数\\\n\\\nこの一括決済に登録された決済の件数です。\n"
        error_total_count:
          type: string
          minLength: 1
          maxLength: 10
          description: "エラー件数\\\n\\\nこの一括決済においてエラーが発生した決済の件数です。\n"
        pay_type:
          $ref: "#/components/schemas/PaymentBulkPayType"
        bulk_search_url:
          type: string
          example: https://api.test.fincode.jp/v1/payments/bulk/{bulk_payment_id}?pay_type=Card
          description: |
            この一括決済の一括決済 詳細情報一覧取得APIのURLです。
        error_code:
          $ref: "#/components/schemas/error_code"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    WebhookEvent.PaymentBulk.Batch.Card:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        bulk_payment_id:
          $ref: "#/components/schemas/PaymentBulk_properties-id"
        file_name:
          $ref: "#/components/schemas/file_name"
        status:
          $ref: "#/components/schemas/PaymentBulkStatus"
        succeeded_count:
          type: string
          maxLength: 10
          description: "成功件数\\\n\\\n今回の一括決済課金において成功した決済の件数です。\n"
        failed_count:
          type: string
          maxLength: 10
          description: "失敗件数\\\n\\\n今回の一括決済課金において失敗した決済の件数です。\n"
        total_count:
          type: string
          maxLength: 10
          description: "合計件数\\\n\\\n今回の一括決済課金において発生した決済の合計件数です。\n"
        pay_type:
          $ref: "#/components/schemas/PaymentBulkPayType"
        event:
          $ref: "#/components/schemas/FincodeEvent"
    Acquirer:
      type: string
      enum:
      - UC
      - TFC
      - JCB/AMEX
      - DINERS
      - APPLE PAY UC
      - APPLE PAY JCB/AMEX
      - PAYSLE
      - PAYPAY
      - DIRECT DEBIT
      description: "審査対象\n\n- `UC`: VISA／Mastercard（UCカード）\n- `TFC`: VISA／Mastercard（トヨタファイナンス）\n- `JCB/AMEX`: JCB／AMEX（JCB）\n- `DINERS`: DINERS（JCB）\n- `APPLE PAY UC`: Apple Pay（UCカード）\n- `APPLE PAY JCB/AMEX`: Apple Pay（JCB）\n- `PAYSLE`: コンビニ決済（電算システム）\n- `PAYPAY`: コンビニ決済（PayPay）\n- `DIRECT DEBIT`: 口座振替（三井住友カード）\n"
      x-ja-description: "審査対象（和名）\n\n- `決済事業者審査: VISA/MASTER-UC`\n- `決済事業者審査: VISA/MASTER-TFC`\n- `決済事業者審査: JCB/AMEX`\n- `決済事業者審査: DINERS`\n- `決済事業者審査: ApplePay-UC`\n- `決済事業者審査: ApplePay-JCB/AMEX`\n- `決済事業者審査: コンビニ決済`\n- `決済事業者審査: PayPay決済`\n- `決済事業者審査: 口座振替決済`\n"
    AcquirerContractStatus:
      type: string
      enum:
      - "701"
      - "702"
      - "703"
      - "704"
      - "705"
      - "706"
      - "707"
      - "708"
      - "709"
      description: "決済事業者 契約ステータス\n\n- `701`: 申込なし<br /><span class=\"smallText\">まだこの決済手段を利用申請していません</span>\n- `702`: 審査受付<br /><span class=\"smallText\">fincodeが審査を受け付けました。まだこの決済手段は利用できません。</span>\n- `703`: 審査待ち<br /><span class=\"smallText\">fincodeによる審査開始を待っています。まだこの決済手段は利用できません。</span>\n- `704`: 審査中<br /><span class=\"smallText\">fincodeによる審査中です。まだこの決済手段は利用できません。</span>\n- `705`: 審査保留中<br /><span class=\"smallText\">審査の過程で保留中が発生しました。まだこの決済手段は利用できません。</span>\n- `706`: 審査OK<br /><span class=\"smallText\">fincodeによる審査の結果OKとなりました。まだこの決済手段は利用できません。</span>\n- `707`: 利用可能<br /><span class=\"smallText\">この決済手段は利用可能です。</span>\n- `708`: 審査NG<br /><span class=\"smallText\">fincodeによる審査の結果NGとなりました。この決済手段は利用できません。</span>\n- `709`: 申込中止<br /><span class=\"smallText\">この決済手段の利用申請を中止しました。</span>\n"
      x-ja-description: |
        決済事業者 契約ステータス（和名）
        
        - `申込なし`
        - `審査受付`
        - `審査待ち`
        - `審査中`
        - `審査保留中`
        - `審査OK`
        - `利用可能`
        - `審査NG`
        - `申込中止`
    WebhookEvent.Contract:
      type: object
      properties:
        shop_id:
          $ref: "#/components/schemas/Shop_properties-id"
        event:
          $ref: "#/components/schemas/FincodeEvent"
        body:
          type: array
          description: "決済手段 契約状況リスト\\\n\\\n決済手段の種別とその契約ステータスを含むオブジェクトの配列です。\n"
          items:
            type: object
            properties:
              acquirer:
                $ref: "#/components/schemas/Acquirer"
              examination_task:
                type: string
                description: "審査対象（和名）\n\n- `決済事業者審査: VISA/MASTER-UC`\n- `決済事業者審査: VISA/MASTER-TFC`\n- `決済事業者審査: JCB/AMEX`\n- `決済事業者審査: DINERS`\n- `決済事業者審査: ApplePay-UC`\n- `決済事業者審査: ApplePay-JCB/AMEX`\n- `決済事業者審査: コンビニ決済`\n- `決済事業者審査: PayPay決済`\n- `決済事業者審査: 口座振替決済`\n"
              status_code:
                $ref: "#/components/schemas/AcquirerContractStatus"
              status:
                type: string
                description: |
                  決済事業者 契約ステータス（和名）
                  
                  - `申込なし`
                  - `審査受付`
                  - `審査待ち`
                  - `審査中`
                  - `審査保留中`
                  - `審査OK`
                  - `利用可能`
                  - `審査NG`
                  - `申込中止`
              is_updated:
                type: boolean
                description: "更新の有無\\\n\\\n更新があった場合は `true`になります。\n"
x-tagGroups:
- name: 顧客情報
  tags:
  - Customer
  - Card
  - PaymentMethod
- name: 決済
  tags:
  - Payment
- name: 3Dセキュア認証
  tags:
  - Secure2
- name: リダイレクト型
  tags:
  - PaymentSession
  - CardRegistrationSession
- name: サブスクリプション機能
  tags:
  - Plan
  - Subscription
- name: 一括決済機能
  tags:
  - PaymentBulk
- name: ショップの入金情報
  tags:
  - Account
  - PlatformAccount
- name: Webhook
  tags:
  - WebhookSetting
  - Webhook
- name: プラットフォーム管理
  tags:
  - PlatformShop
  - TenantShop
- name: テナント申請管理 (Limited)
  tags:
  - LimitedTenantManagement
