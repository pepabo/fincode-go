// Code generated by ogen, DO NOT EDIT.

package fincode

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Encode implements json.Marshaler.
func (s *CustomersPostBadRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomersPostBadRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Errors != nil {
			e.FieldStart("errors")
			e.ArrStart()
			for _, elem := range s.Errors {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCustomersPostBadRequest = [1]string{
	0: "errors",
}

// Decode decodes CustomersPostBadRequest from json.
func (s *CustomersPostBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomersPostBadRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "errors":
			if err := func() error {
				s.Errors = make([]CustomersPostBadRequestErrorsItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CustomersPostBadRequestErrorsItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Errors = append(s.Errors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errors\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomersPostBadRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomersPostBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomersPostBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomersPostBadRequestErrorsItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomersPostBadRequestErrorsItem) encodeFields(e *jx.Encoder) {
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ErrorMessage.Set {
			e.FieldStart("error_message")
			s.ErrorMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomersPostBadRequestErrorsItem = [2]string{
	0: "error_code",
	1: "error_message",
}

// Decode decodes CustomersPostBadRequestErrorsItem from json.
func (s *CustomersPostBadRequestErrorsItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomersPostBadRequestErrorsItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomersPostBadRequestErrorsItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomersPostBadRequestErrorsItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomersPostBadRequestErrorsItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomersPostOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomersPostOK) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.CardRegistration.Set {
			e.FieldStart("card_registration")
			s.CardRegistration.Encode(e)
		}
	}
	{
		if s.DerectdebitRegistration.Set {
			e.FieldStart("derectdebit_registration")
			s.DerectdebitRegistration.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomersPostOK = [16]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_city",
	6:  "addr_country",
	7:  "addr_line_1",
	8:  "addr_line_2",
	9:  "addr_line_3",
	10: "addr_post_code",
	11: "addr_state",
	12: "card_registration",
	13: "derectdebit_registration",
	14: "created",
	15: "updated",
}

// Decode decodes CustomersPostOK from json.
func (s *CustomersPostOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomersPostOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "card_registration":
			if err := func() error {
				s.CardRegistration.Reset()
				if err := s.CardRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_registration\"")
			}
		case "derectdebit_registration":
			if err := func() error {
				s.DerectdebitRegistration.Reset()
				if err := s.DerectdebitRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"derectdebit_registration\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomersPostOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomersPostOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomersPostOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomersPostReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomersPostReq) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomersPostReq = [12]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_city",
	6:  "addr_country",
	7:  "addr_line_1",
	8:  "addr_line_2",
	9:  "addr_line_3",
	10: "addr_post_code",
	11: "addr_state",
}

// Decode decodes CustomersPostReq from json.
func (s *CustomersPostReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomersPostReq to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomersPostReq")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomersPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomersPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomersPostReq as json.
func (o OptCustomersPostReq) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomersPostReq from json.
func (o *OptCustomersPostReq) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomersPostReq to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomersPostReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomersPostReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
