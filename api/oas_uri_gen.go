// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EncodeURI encodes RetrieveAccountDetailListQuery as URI form.
func (s *RetrieveAccountDetailListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveAccountDetailListQuery = [3]string{
	0: "page",
	1: "limit",
	2: "count_only",
}

// DecodeURI decodes RetrieveAccountDetailListQuery from URI form.
func (s *RetrieveAccountDetailListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveAccountDetailListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveAccountDetailListQuery")
	}

	return nil
}

// EncodeURI encodes RetrieveAccountListQuery as URI form.
func (s *RetrieveAccountListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("processed", func(e uri.Encoder) error {
		if val, ok := s.Processed.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"processed\"")
	}
	if err := e.EncodeField("status", func(e uri.Encoder) error {
		if val, ok := s.Status.Get(); ok {
			return e.EncodeValue(conv.IntToString(int(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"status\"")
	}
	if err := e.EncodeField("scheduled_from", func(e uri.Encoder) error {
		if val, ok := s.ScheduledFrom.Get(); ok {
			return e.EncodeValue(conv.DateToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"scheduled_from\"")
	}
	if err := e.EncodeField("scheduled_to", func(e uri.Encoder) error {
		if val, ok := s.ScheduledTo.Get(); ok {
			return e.EncodeValue(conv.DateToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"scheduled_to\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveAccountListQuery = [7]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "processed",
	4: "status",
	5: "scheduled_from",
	6: "scheduled_to",
}

// DecodeURI decodes RetrieveAccountListQuery from URI form.
func (s *RetrieveAccountListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveAccountListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "processed":
			if err := func() error {
				var sDotProcessedVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotProcessedVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Processed.SetTo(sDotProcessedVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processed\"")
			}
		case "status":
			if err := func() error {
				var sDotStatusVal DepositStatusCode
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotStatusVal = DepositStatusCode(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Status.SetTo(sDotStatusVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "scheduled_from":
			if err := func() error {
				var sDotScheduledFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					sDotScheduledFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ScheduledFrom.SetTo(sDotScheduledFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_from\"")
			}
		case "scheduled_to":
			if err := func() error {
				var sDotScheduledToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					sDotScheduledToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ScheduledTo.SetTo(sDotScheduledToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_to\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveAccountListQuery")
	}

	return nil
}

// EncodeURI encodes RetrieveCustomerListQuery as URI form.
func (s *RetrieveCustomerListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("id", func(e uri.Encoder) error {
		if val, ok := s.ID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"id\"")
	}
	if err := e.EncodeField("name", func(e uri.Encoder) error {
		if val, ok := s.Name.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"name\"")
	}
	if err := e.EncodeField("email", func(e uri.Encoder) error {
		if val, ok := s.Email.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"email\"")
	}
	if err := e.EncodeField("created_from", func(e uri.Encoder) error {
		if val, ok := s.CreatedFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_from\"")
	}
	if err := e.EncodeField("created_to", func(e uri.Encoder) error {
		if val, ok := s.CreatedTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_to\"")
	}
	if err := e.EncodeField("sort", func(e uri.Encoder) error {
		if val, ok := s.Sort.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveCustomerListQuery = [9]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "id",
	4: "name",
	5: "email",
	6: "created_from",
	7: "created_to",
	8: "sort",
}

// DecodeURI decodes RetrieveCustomerListQuery from URI form.
func (s *RetrieveCustomerListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveCustomerListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "id":
			if err := func() error {
				var sDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ID.SetTo(sDotIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				var sDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Name.SetTo(sDotNameVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				var sDotEmailVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotEmailVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Email.SetTo(sDotEmailVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "created_from":
			if err := func() error {
				var sDotCreatedFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedFrom.SetTo(sDotCreatedFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_from\"")
			}
		case "created_to":
			if err := func() error {
				var sDotCreatedToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedTo.SetTo(sDotCreatedToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_to\"")
			}
		case "sort":
			if err := func() error {
				var sDotSortVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Sort.SetTo(sDotSortVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveCustomerListQuery")
	}

	return nil
}

// EncodeURI encodes RetrieveCustomerPaymentMethodListQuery as URI form.
func (s *RetrieveCustomerPaymentMethodListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("pay_type", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(string(s.PayType)))
	}); err != nil {
		return errors.Wrap(err, "encode field \"pay_type\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveCustomerPaymentMethodListQuery = [1]string{
	0: "pay_type",
}

// DecodeURI decodes RetrieveCustomerPaymentMethodListQuery from URI form.
func (s *RetrieveCustomerPaymentMethodListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveCustomerPaymentMethodListQuery to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.PayType = RetrieveCustomerPaymentMethodListQueryPayType(c)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveCustomerPaymentMethodListQuery")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfRetrieveCustomerPaymentMethodListQuery) {
					name = uriFieldsNameOfRetrieveCustomerPaymentMethodListQuery[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// EncodeURI encodes RetrieveCustomerPaymentMethodQuery as URI form.
func (s *RetrieveCustomerPaymentMethodQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("pay_type", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(string(s.PayType)))
	}); err != nil {
		return errors.Wrap(err, "encode field \"pay_type\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveCustomerPaymentMethodQuery = [1]string{
	0: "pay_type",
}

// DecodeURI decodes RetrieveCustomerPaymentMethodQuery from URI form.
func (s *RetrieveCustomerPaymentMethodQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveCustomerPaymentMethodQuery to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.PayType = RetrieveCustomerPaymentMethodQueryPayType(c)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveCustomerPaymentMethodQuery")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfRetrieveCustomerPaymentMethodQuery) {
					name = uriFieldsNameOfRetrieveCustomerPaymentMethodQuery[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// EncodeURI encodes RetrievePaymentBulkDetailListQuery as URI form.
func (s *RetrievePaymentBulkDetailListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("pay_type", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(string(s.PayType)))
	}); err != nil {
		return errors.Wrap(err, "encode field \"pay_type\"")
	}
	if err := e.EncodeField("order_id", func(e uri.Encoder) error {
		if val, ok := s.OrderID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"order_id\"")
	}
	if err := e.EncodeField("status", func(e uri.Encoder) error {
		if val, ok := s.Status.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"status\"")
	}
	return nil
}

var uriFieldsNameOfRetrievePaymentBulkDetailListQuery = [6]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "pay_type",
	4: "order_id",
	5: "status",
}

// DecodeURI decodes RetrievePaymentBulkDetailListQuery from URI form.
func (s *RetrievePaymentBulkDetailListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentBulkDetailListQuery to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.PayType = RetrievePaymentBulkDetailListQueryPayType(c)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "order_id":
			if err := func() error {
				var sDotOrderIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotOrderIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.OrderID.SetTo(sDotOrderIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "status":
			if err := func() error {
				var sDotStatusVal RetrievePaymentBulkDetailListQueryStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStatusVal = RetrievePaymentBulkDetailListQueryStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Status.SetTo(sDotStatusVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentBulkDetailListQuery")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfRetrievePaymentBulkDetailListQuery) {
					name = uriFieldsNameOfRetrievePaymentBulkDetailListQuery[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// EncodeURI encodes RetrievePaymentBulkListQuery as URI form.
func (s *RetrievePaymentBulkListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("process_plan_date_from", func(e uri.Encoder) error {
		if val, ok := s.ProcessPlanDateFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"process_plan_date_from\"")
	}
	if err := e.EncodeField("process_plan_date_to", func(e uri.Encoder) error {
		if val, ok := s.ProcessPlanDateTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"process_plan_date_to\"")
	}
	if err := e.EncodeField("status", func(e uri.Encoder) error {
		if val, ok := s.Status.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"status\"")
	}
	if err := e.EncodeField("pay_type", func(e uri.Encoder) error {
		if val, ok := s.PayType.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"pay_type\"")
	}
	if err := e.EncodeField("file_name", func(e uri.Encoder) error {
		if val, ok := s.FileName.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"file_name\"")
	}
	if err := e.EncodeField("delete_flag", func(e uri.Encoder) error {
		if val, ok := s.DeleteFlag.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"delete_flag\"")
	}
	if err := e.EncodeField("created_from", func(e uri.Encoder) error {
		if val, ok := s.CreatedFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_from\"")
	}
	if err := e.EncodeField("created_to", func(e uri.Encoder) error {
		if val, ok := s.CreatedTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_to\"")
	}
	if err := e.EncodeField("sort", func(e uri.Encoder) error {
		if val, ok := s.Sort.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort\"")
	}
	return nil
}

var uriFieldsNameOfRetrievePaymentBulkListQuery = [12]string{
	0:  "page",
	1:  "limit",
	2:  "count_only",
	3:  "process_plan_date_from",
	4:  "process_plan_date_to",
	5:  "status",
	6:  "pay_type",
	7:  "file_name",
	8:  "delete_flag",
	9:  "created_from",
	10: "created_to",
	11: "sort",
}

// DecodeURI decodes RetrievePaymentBulkListQuery from URI form.
func (s *RetrievePaymentBulkListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentBulkListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "process_plan_date_from":
			if err := func() error {
				var sDotProcessPlanDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotProcessPlanDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ProcessPlanDateFrom.SetTo(sDotProcessPlanDateFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_plan_date_from\"")
			}
		case "process_plan_date_to":
			if err := func() error {
				var sDotProcessPlanDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotProcessPlanDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ProcessPlanDateTo.SetTo(sDotProcessPlanDateToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_plan_date_to\"")
			}
		case "status":
			if err := func() error {
				var sDotStatusVal RetrievePaymentBulkListQueryStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStatusVal = RetrievePaymentBulkListQueryStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Status.SetTo(sDotStatusVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "pay_type":
			if err := func() error {
				var sDotPayTypeVal RetrievePaymentBulkListQueryPayType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPayTypeVal = RetrievePaymentBulkListQueryPayType(c)
					return nil
				}(); err != nil {
					return err
				}
				s.PayType.SetTo(sDotPayTypeVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "file_name":
			if err := func() error {
				var sDotFileNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotFileNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.FileName.SetTo(sDotFileNameVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "delete_flag":
			if err := func() error {
				var sDotDeleteFlagVal RetrievePaymentBulkListQueryDeleteFlag
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotDeleteFlagVal = RetrievePaymentBulkListQueryDeleteFlag(c)
					return nil
				}(); err != nil {
					return err
				}
				s.DeleteFlag.SetTo(sDotDeleteFlagVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created_from":
			if err := func() error {
				var sDotCreatedFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedFrom.SetTo(sDotCreatedFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_from\"")
			}
		case "created_to":
			if err := func() error {
				var sDotCreatedToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedTo.SetTo(sDotCreatedToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_to\"")
			}
		case "sort":
			if err := func() error {
				var sDotSortVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Sort.SetTo(sDotSortVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentBulkListQuery")
	}

	return nil
}

// EncodeURI encodes RetrievePaymentQuery as URI form.
func (s *RetrievePaymentQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("pay_type", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(string(s.PayType)))
	}); err != nil {
		return errors.Wrap(err, "encode field \"pay_type\"")
	}
	return nil
}

var uriFieldsNameOfRetrievePaymentQuery = [1]string{
	0: "pay_type",
}

// DecodeURI decodes RetrievePaymentQuery from URI form.
func (s *RetrievePaymentQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentQuery to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.PayType = RetrievePaymentQueryPayType(c)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentQuery")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfRetrievePaymentQuery) {
					name = uriFieldsNameOfRetrievePaymentQuery[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// EncodeURI encodes RetrievePlanListQuery as URI form.
func (s *RetrievePlanListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("total_amount_min", func(e uri.Encoder) error {
		if val, ok := s.TotalAmountMin.Get(); ok {
			return e.EncodeValue(conv.Int64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"total_amount_min\"")
	}
	if err := e.EncodeField("total_amount_max", func(e uri.Encoder) error {
		if val, ok := s.TotalAmountMax.Get(); ok {
			return e.EncodeValue(conv.Int64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"total_amount_max\"")
	}
	if err := e.EncodeField("interval_pattern", func(e uri.Encoder) error {
		if val, ok := s.IntervalPattern.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"interval_pattern\"")
	}
	if err := e.EncodeField("update_date_from", func(e uri.Encoder) error {
		if val, ok := s.UpdateDateFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"update_date_from\"")
	}
	if err := e.EncodeField("update_date_to", func(e uri.Encoder) error {
		if val, ok := s.UpdateDateTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"update_date_to\"")
	}
	if err := e.EncodeField("plan_name", func(e uri.Encoder) error {
		if val, ok := s.PlanName.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"plan_name\"")
	}
	if err := e.EncodeField("delete_flag", func(e uri.Encoder) error {
		if val, ok := s.DeleteFlag.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"delete_flag\"")
	}
	if err := e.EncodeField("sort", func(e uri.Encoder) error {
		if val, ok := s.Sort.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort\"")
	}
	return nil
}

var uriFieldsNameOfRetrievePlanListQuery = [11]string{
	0:  "page",
	1:  "limit",
	2:  "count_only",
	3:  "total_amount_min",
	4:  "total_amount_max",
	5:  "interval_pattern",
	6:  "update_date_from",
	7:  "update_date_to",
	8:  "plan_name",
	9:  "delete_flag",
	10: "sort",
}

// DecodeURI decodes RetrievePlanListQuery from URI form.
func (s *RetrievePlanListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePlanListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "total_amount_min":
			if err := func() error {
				var sDotTotalAmountMinVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					sDotTotalAmountMinVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TotalAmountMin.SetTo(sDotTotalAmountMinVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount_min\"")
			}
		case "total_amount_max":
			if err := func() error {
				var sDotTotalAmountMaxVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					sDotTotalAmountMaxVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TotalAmountMax.SetTo(sDotTotalAmountMaxVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount_max\"")
			}
		case "interval_pattern":
			if err := func() error {
				var sDotIntervalPatternVal RetrievePlanListQueryIntervalPattern
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIntervalPatternVal = RetrievePlanListQueryIntervalPattern(c)
					return nil
				}(); err != nil {
					return err
				}
				s.IntervalPattern.SetTo(sDotIntervalPatternVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "update_date_from":
			if err := func() error {
				var sDotUpdateDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotUpdateDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.UpdateDateFrom.SetTo(sDotUpdateDateFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_date_from\"")
			}
		case "update_date_to":
			if err := func() error {
				var sDotUpdateDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotUpdateDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.UpdateDateTo.SetTo(sDotUpdateDateToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_date_to\"")
			}
		case "plan_name":
			if err := func() error {
				var sDotPlanNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPlanNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PlanName.SetTo(sDotPlanNameVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "delete_flag":
			if err := func() error {
				var sDotDeleteFlagVal RetrievePlanListQueryDeleteFlag
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotDeleteFlagVal = RetrievePlanListQueryDeleteFlag(c)
					return nil
				}(); err != nil {
					return err
				}
				s.DeleteFlag.SetTo(sDotDeleteFlagVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "sort":
			if err := func() error {
				var sDotSortVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Sort.SetTo(sDotSortVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePlanListQuery")
	}

	return nil
}

// EncodeURI encodes RetrievePlatformAccountListQuery as URI form.
func (s *RetrievePlatformAccountListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("processed", func(e uri.Encoder) error {
		if val, ok := s.Processed.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"processed\"")
	}
	if err := e.EncodeField("status", func(e uri.Encoder) error {
		if val, ok := s.Status.Get(); ok {
			return e.EncodeValue(conv.IntToString(int(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"status\"")
	}
	if err := e.EncodeField("scheduled_from", func(e uri.Encoder) error {
		if val, ok := s.ScheduledFrom.Get(); ok {
			return e.EncodeValue(conv.DateToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"scheduled_from\"")
	}
	if err := e.EncodeField("scheduled_to", func(e uri.Encoder) error {
		if val, ok := s.ScheduledTo.Get(); ok {
			return e.EncodeValue(conv.DateToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"scheduled_to\"")
	}
	return nil
}

var uriFieldsNameOfRetrievePlatformAccountListQuery = [7]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "processed",
	4: "status",
	5: "scheduled_from",
	6: "scheduled_to",
}

// DecodeURI decodes RetrievePlatformAccountListQuery from URI form.
func (s *RetrievePlatformAccountListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePlatformAccountListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "processed":
			if err := func() error {
				var sDotProcessedVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotProcessedVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Processed.SetTo(sDotProcessedVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processed\"")
			}
		case "status":
			if err := func() error {
				var sDotStatusVal DepositStatusCode
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotStatusVal = DepositStatusCode(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Status.SetTo(sDotStatusVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "scheduled_from":
			if err := func() error {
				var sDotScheduledFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					sDotScheduledFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ScheduledFrom.SetTo(sDotScheduledFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_from\"")
			}
		case "scheduled_to":
			if err := func() error {
				var sDotScheduledToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					sDotScheduledToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ScheduledTo.SetTo(sDotScheduledToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_to\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePlatformAccountListQuery")
	}

	return nil
}

// EncodeURI encodes RetrievePlatformAccountSummaryListQuery as URI form.
func (s *RetrievePlatformAccountSummaryListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("scheduled_from", func(e uri.Encoder) error {
		if val, ok := s.ScheduledFrom.Get(); ok {
			return e.EncodeValue(conv.DateToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"scheduled_from\"")
	}
	if err := e.EncodeField("scheduled_to", func(e uri.Encoder) error {
		if val, ok := s.ScheduledTo.Get(); ok {
			return e.EncodeValue(conv.DateToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"scheduled_to\"")
	}
	return nil
}

var uriFieldsNameOfRetrievePlatformAccountSummaryListQuery = [5]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "scheduled_from",
	4: "scheduled_to",
}

// DecodeURI decodes RetrievePlatformAccountSummaryListQuery from URI form.
func (s *RetrievePlatformAccountSummaryListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePlatformAccountSummaryListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "scheduled_from":
			if err := func() error {
				var sDotScheduledFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					sDotScheduledFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ScheduledFrom.SetTo(sDotScheduledFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_from\"")
			}
		case "scheduled_to":
			if err := func() error {
				var sDotScheduledToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					sDotScheduledToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ScheduledTo.SetTo(sDotScheduledToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_to\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePlatformAccountSummaryListQuery")
	}

	return nil
}

// EncodeURI encodes RetrievePlatformShopListQuery as URI form.
func (s *RetrievePlatformShopListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("id", func(e uri.Encoder) error {
		if val, ok := s.ID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"id\"")
	}
	if err := e.EncodeField("shop_name", func(e uri.Encoder) error {
		if val, ok := s.ShopName.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"shop_name\"")
	}
	if err := e.EncodeField("shop_mail_address", func(e uri.Encoder) error {
		if val, ok := s.ShopMailAddress.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"shop_mail_address\"")
	}
	if err := e.EncodeField("created_from", func(e uri.Encoder) error {
		if val, ok := s.CreatedFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_from\"")
	}
	if err := e.EncodeField("created_to", func(e uri.Encoder) error {
		if val, ok := s.CreatedTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_to\"")
	}
	if err := e.EncodeField("sort", func(e uri.Encoder) error {
		if val, ok := s.Sort.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort\"")
	}
	return nil
}

var uriFieldsNameOfRetrievePlatformShopListQuery = [9]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "id",
	4: "shop_name",
	5: "shop_mail_address",
	6: "created_from",
	7: "created_to",
	8: "sort",
}

// DecodeURI decodes RetrievePlatformShopListQuery from URI form.
func (s *RetrievePlatformShopListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePlatformShopListQuery to nil")
	}
	s.setDefaults()

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "id":
			if err := func() error {
				var sDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ID.SetTo(sDotIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				var sDotShopNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotShopNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ShopName.SetTo(sDotShopNameVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_mail_address":
			if err := func() error {
				var sDotShopMailAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotShopMailAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ShopMailAddress.SetTo(sDotShopMailAddressVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "created_from":
			if err := func() error {
				var sDotCreatedFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedFrom.SetTo(sDotCreatedFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_from\"")
			}
		case "created_to":
			if err := func() error {
				var sDotCreatedToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedTo.SetTo(sDotCreatedToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_to\"")
			}
		case "sort":
			if err := func() error {
				var sDotSortVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Sort.SetTo(sDotSortVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePlatformShopListQuery")
	}

	return nil
}

// EncodeURI encodes RetrieveSubscriptionListQuery as URI form.
func (s *RetrieveSubscriptionListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("pay_type", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(string(s.PayType)))
	}); err != nil {
		return errors.Wrap(err, "encode field \"pay_type\"")
	}
	if err := e.EncodeField("id", func(e uri.Encoder) error {
		if val, ok := s.ID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"id\"")
	}
	if err := e.EncodeField("customer_id", func(e uri.Encoder) error {
		if val, ok := s.CustomerID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"customer_id\"")
	}
	if err := e.EncodeField("plan_id", func(e uri.Encoder) error {
		if val, ok := s.PlanID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"plan_id\"")
	}
	if err := e.EncodeField("status", func(e uri.Encoder) error {
		if val, ok := s.Status.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"status\"")
	}
	if err := e.EncodeField("total_amount_min", func(e uri.Encoder) error {
		if val, ok := s.TotalAmountMin.Get(); ok {
			return e.EncodeValue(conv.Int64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"total_amount_min\"")
	}
	if err := e.EncodeField("total_amount_max", func(e uri.Encoder) error {
		if val, ok := s.TotalAmountMax.Get(); ok {
			return e.EncodeValue(conv.Int64ToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"total_amount_max\"")
	}
	if err := e.EncodeField("interval_pattern", func(e uri.Encoder) error {
		if val, ok := s.IntervalPattern.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"interval_pattern\"")
	}
	if err := e.EncodeField("start_date_from", func(e uri.Encoder) error {
		if val, ok := s.StartDateFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"start_date_from\"")
	}
	if err := e.EncodeField("start_date_to", func(e uri.Encoder) error {
		if val, ok := s.StartDateTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"start_date_to\"")
	}
	if err := e.EncodeField("stop_date_from", func(e uri.Encoder) error {
		if val, ok := s.StopDateFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"stop_date_from\"")
	}
	if err := e.EncodeField("stop_date_to", func(e uri.Encoder) error {
		if val, ok := s.StopDateTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"stop_date_to\"")
	}
	if err := e.EncodeField("next_charge_date_from", func(e uri.Encoder) error {
		if val, ok := s.NextChargeDateFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"next_charge_date_from\"")
	}
	if err := e.EncodeField("next_charge_date_to", func(e uri.Encoder) error {
		if val, ok := s.NextChargeDateTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"next_charge_date_to\"")
	}
	if err := e.EncodeField("update_date_from", func(e uri.Encoder) error {
		if val, ok := s.UpdateDateFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"update_date_from\"")
	}
	if err := e.EncodeField("update_date_to", func(e uri.Encoder) error {
		if val, ok := s.UpdateDateTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"update_date_to\"")
	}
	if err := e.EncodeField("sort", func(e uri.Encoder) error {
		if val, ok := s.Sort.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveSubscriptionListQuery = [20]string{
	0:  "page",
	1:  "limit",
	2:  "count_only",
	3:  "pay_type",
	4:  "id",
	5:  "customer_id",
	6:  "plan_id",
	7:  "status",
	8:  "total_amount_min",
	9:  "total_amount_max",
	10: "interval_pattern",
	11: "start_date_from",
	12: "start_date_to",
	13: "stop_date_from",
	14: "stop_date_to",
	15: "next_charge_date_from",
	16: "next_charge_date_to",
	17: "update_date_from",
	18: "update_date_to",
	19: "sort",
}

// DecodeURI decodes RetrieveSubscriptionListQuery from URI form.
func (s *RetrieveSubscriptionListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveSubscriptionListQuery to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.PayType = RetrieveSubscriptionListQueryPayType(c)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "id":
			if err := func() error {
				var sDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ID.SetTo(sDotIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				var sDotCustomerIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCustomerIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CustomerID.SetTo(sDotCustomerIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "plan_id":
			if err := func() error {
				var sDotPlanIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotPlanIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.PlanID.SetTo(sDotPlanIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "status":
			if err := func() error {
				var sDotStatusVal RetrieveSubscriptionListQueryStatus
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStatusVal = RetrieveSubscriptionListQueryStatus(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Status.SetTo(sDotStatusVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "total_amount_min":
			if err := func() error {
				var sDotTotalAmountMinVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					sDotTotalAmountMinVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TotalAmountMin.SetTo(sDotTotalAmountMinVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount_min\"")
			}
		case "total_amount_max":
			if err := func() error {
				var sDotTotalAmountMaxVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					sDotTotalAmountMaxVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.TotalAmountMax.SetTo(sDotTotalAmountMaxVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount_max\"")
			}
		case "interval_pattern":
			if err := func() error {
				var sDotIntervalPatternVal RetrieveSubscriptionListQueryIntervalPattern
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIntervalPatternVal = RetrieveSubscriptionListQueryIntervalPattern(c)
					return nil
				}(); err != nil {
					return err
				}
				s.IntervalPattern.SetTo(sDotIntervalPatternVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "start_date_from":
			if err := func() error {
				var sDotStartDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStartDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.StartDateFrom.SetTo(sDotStartDateFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date_from\"")
			}
		case "start_date_to":
			if err := func() error {
				var sDotStartDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStartDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.StartDateTo.SetTo(sDotStartDateToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date_to\"")
			}
		case "stop_date_from":
			if err := func() error {
				var sDotStopDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStopDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.StopDateFrom.SetTo(sDotStopDateFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date_from\"")
			}
		case "stop_date_to":
			if err := func() error {
				var sDotStopDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotStopDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.StopDateTo.SetTo(sDotStopDateToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date_to\"")
			}
		case "next_charge_date_from":
			if err := func() error {
				var sDotNextChargeDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotNextChargeDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.NextChargeDateFrom.SetTo(sDotNextChargeDateFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date_from\"")
			}
		case "next_charge_date_to":
			if err := func() error {
				var sDotNextChargeDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotNextChargeDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.NextChargeDateTo.SetTo(sDotNextChargeDateToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date_to\"")
			}
		case "update_date_from":
			if err := func() error {
				var sDotUpdateDateFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotUpdateDateFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.UpdateDateFrom.SetTo(sDotUpdateDateFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_date_from\"")
			}
		case "update_date_to":
			if err := func() error {
				var sDotUpdateDateToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotUpdateDateToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.UpdateDateTo.SetTo(sDotUpdateDateToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_date_to\"")
			}
		case "sort":
			if err := func() error {
				var sDotSortVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Sort.SetTo(sDotSortVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveSubscriptionListQuery")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b00001000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfRetrieveSubscriptionListQuery) {
					name = uriFieldsNameOfRetrieveSubscriptionListQuery[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// EncodeURI encodes RetrieveSubscriptionResultListQuery as URI form.
func (s *RetrieveSubscriptionResultListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("pay_type", func(e uri.Encoder) error {
		return e.EncodeValue(conv.StringToString(string(s.PayType)))
	}); err != nil {
		return errors.Wrap(err, "encode field \"pay_type\"")
	}
	if err := e.EncodeField("sort", func(e uri.Encoder) error {
		if val, ok := s.Sort.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveSubscriptionResultListQuery = [5]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "pay_type",
	4: "sort",
}

// DecodeURI decodes RetrieveSubscriptionResultListQuery from URI form.
func (s *RetrieveSubscriptionResultListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveSubscriptionResultListQuery to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				s.PayType = RetrieveSubscriptionResultListQueryPayType(c)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "sort":
			if err := func() error {
				var sDotSortVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Sort.SetTo(sDotSortVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveSubscriptionResultListQuery")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfRetrieveSubscriptionResultListQuery) {
					name = uriFieldsNameOfRetrieveSubscriptionResultListQuery[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// EncodeURI encodes RetrieveTenantShopListQuery as URI form.
func (s *RetrieveTenantShopListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	if err := e.EncodeField("id", func(e uri.Encoder) error {
		if val, ok := s.ID.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"id\"")
	}
	if err := e.EncodeField("shop_name", func(e uri.Encoder) error {
		if val, ok := s.ShopName.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"shop_name\"")
	}
	if err := e.EncodeField("shop_mail_address", func(e uri.Encoder) error {
		if val, ok := s.ShopMailAddress.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"shop_mail_address\"")
	}
	if err := e.EncodeField("created_from", func(e uri.Encoder) error {
		if val, ok := s.CreatedFrom.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_from\"")
	}
	if err := e.EncodeField("created_to", func(e uri.Encoder) error {
		if val, ok := s.CreatedTo.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"created_to\"")
	}
	if err := e.EncodeField("sort", func(e uri.Encoder) error {
		if val, ok := s.Sort.Get(); ok {
			return e.EncodeValue(conv.StringToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"sort\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveTenantShopListQuery = [9]string{
	0: "page",
	1: "limit",
	2: "count_only",
	3: "id",
	4: "shop_name",
	5: "shop_mail_address",
	6: "created_from",
	7: "created_to",
	8: "sort",
}

// DecodeURI decodes RetrieveTenantShopListQuery from URI form.
func (s *RetrieveTenantShopListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveTenantShopListQuery to nil")
	}
	s.setDefaults()

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		case "id":
			if err := func() error {
				var sDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ID.SetTo(sDotIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				var sDotShopNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotShopNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ShopName.SetTo(sDotShopNameVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_mail_address":
			if err := func() error {
				var sDotShopMailAddressVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotShopMailAddressVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ShopMailAddress.SetTo(sDotShopMailAddressVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "created_from":
			if err := func() error {
				var sDotCreatedFromVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedFrom.SetTo(sDotCreatedFromVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_from\"")
			}
		case "created_to":
			if err := func() error {
				var sDotCreatedToVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotCreatedToVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CreatedTo.SetTo(sDotCreatedToVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created_to\"")
			}
		case "sort":
			if err := func() error {
				var sDotSortVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotSortVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Sort.SetTo(sDotSortVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sort\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveTenantShopListQuery")
	}

	return nil
}

// EncodeURI encodes RetrieveWebhookSettingListQuery as URI form.
func (s *RetrieveWebhookSettingListQuery) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("page", func(e uri.Encoder) error {
		if val, ok := s.Page.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"page\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("count_only", func(e uri.Encoder) error {
		if val, ok := s.CountOnly.Get(); ok {
			return e.EncodeValue(conv.BoolToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"count_only\"")
	}
	return nil
}

var uriFieldsNameOfRetrieveWebhookSettingListQuery = [3]string{
	0: "page",
	1: "limit",
	2: "count_only",
}

// DecodeURI decodes RetrieveWebhookSettingListQuery from URI form.
func (s *RetrieveWebhookSettingListQuery) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveWebhookSettingListQuery to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "page":
			if err := func() error {
				var sDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Page.SetTo(sDotPageVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"page\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "count_only":
			if err := func() error {
				var sDotCountOnlyVal bool
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToBool(val)
					if err != nil {
						return err
					}

					sDotCountOnlyVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.CountOnly.SetTo(sDotCountOnlyVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count_only\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveWebhookSettingListQuery")
	}

	return nil
}
