// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandlePublicBearerAuth handles Public-Bearer-Auth security.
	// このAPIはパブリックキーによる認証で利用できます。\
	// Bearer認証を用いる場合、リクエストヘッダー
	// `Authorization`に下記の形式でパブリックキーを指定します。
	// ```
	// Authorization: Bearer␣{APIキー}
	// ```
	// パブリックキーはfincodeの管理画面から取得できます。.
	HandlePublicBearerAuth(ctx context.Context, operationName string, t PublicBearerAuth) (context.Context, error)
	// HandleSecretBasicAuth handles Secret-Basic-Auth security.
	// このAPIはシークレットキーによる認証を必要とします。\
	// Basic認証を用いる場合、リクエストヘッダー
	// `Authorization`に下記の形式でシークレットキーを指定します。
	// ``` JavaScript
	// Authorization: Basic␣{Base64でエンコードしたAPIキー}
	// ```
	// シークレットキーはfincodeの管理画面から取得できます。.
	HandleSecretBasicAuth(ctx context.Context, operationName string, t SecretBasicAuth) (context.Context, error)
	// HandleSecretBearerAuth handles Secret-Bearer-Auth security.
	// このAPIはシークレットキーによる認証を必要とします。\
	// Bearer認証を用いる場合、リクエストヘッダー
	// `Authorization`に下記の形式でシークレットキーを指定します。
	// ```
	// Authorization: Bearer␣{APIキー}
	// ```
	// シークレットキーはfincodeの管理画面から取得できます。.
	HandleSecretBearerAuth(ctx context.Context, operationName string, t SecretBearerAuth) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

func (s *Server) securityPublicBearerAuth(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t PublicBearerAuth
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	rctx, err := s.sec.HandlePublicBearerAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
func (s *Server) securitySecretBasicAuth(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t SecretBasicAuth
	if _, ok := findAuthorization(req.Header, "Basic"); !ok {
		return ctx, false, nil
	}
	username, password, ok := req.BasicAuth()
	if !ok {
		return nil, false, errors.New("invalid basic auth")
	}
	t.Username = username
	t.Password = password
	rctx, err := s.sec.HandleSecretBasicAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
func (s *Server) securitySecretBearerAuth(ctx context.Context, operationName string, req *http.Request) (context.Context, bool, error) {
	var t SecretBearerAuth
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	rctx, err := s.sec.HandleSecretBearerAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// PublicBearerAuth provides Public-Bearer-Auth security value.
	// このAPIはパブリックキーによる認証で利用できます。\
	// Bearer認証を用いる場合、リクエストヘッダー
	// `Authorization`に下記の形式でパブリックキーを指定します。
	// ```
	// Authorization: Bearer␣{APIキー}
	// ```
	// パブリックキーはfincodeの管理画面から取得できます。.
	PublicBearerAuth(ctx context.Context, operationName string) (PublicBearerAuth, error)
	// SecretBasicAuth provides Secret-Basic-Auth security value.
	// このAPIはシークレットキーによる認証を必要とします。\
	// Basic認証を用いる場合、リクエストヘッダー
	// `Authorization`に下記の形式でシークレットキーを指定します。
	// ``` JavaScript
	// Authorization: Basic␣{Base64でエンコードしたAPIキー}
	// ```
	// シークレットキーはfincodeの管理画面から取得できます。.
	SecretBasicAuth(ctx context.Context, operationName string) (SecretBasicAuth, error)
	// SecretBearerAuth provides Secret-Bearer-Auth security value.
	// このAPIはシークレットキーによる認証を必要とします。\
	// Bearer認証を用いる場合、リクエストヘッダー
	// `Authorization`に下記の形式でシークレットキーを指定します。
	// ```
	// Authorization: Bearer␣{APIキー}
	// ```
	// シークレットキーはfincodeの管理画面から取得できます。.
	SecretBearerAuth(ctx context.Context, operationName string) (SecretBearerAuth, error)
}

func (s *Client) securityPublicBearerAuth(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.PublicBearerAuth(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"PublicBearerAuth\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
func (s *Client) securitySecretBasicAuth(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.SecretBasicAuth(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"SecretBasicAuth\"")
	}
	req.SetBasicAuth(t.Username, t.Password)
	return nil
}
func (s *Client) securitySecretBearerAuth(ctx context.Context, operationName string, req *http.Request) error {
	t, err := s.sec.SecretBearerAuth(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"SecretBearerAuth\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
