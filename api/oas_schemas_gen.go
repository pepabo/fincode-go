// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

type CustomersCustomerIDCardsIDDeleteOK struct {
	ID         string `json:"id"`
	DeleteFlag string `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *CustomersCustomerIDCardsIDDeleteOK) GetID() string {
	return s.ID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomersCustomerIDCardsIDDeleteOK) GetDeleteFlag() string {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *CustomersCustomerIDCardsIDDeleteOK) SetID(val string) {
	s.ID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomersCustomerIDCardsIDDeleteOK) SetDeleteFlag(val string) {
	s.DeleteFlag = val
}

func (*CustomersCustomerIDCardsIDDeleteOK) customersCustomerIDCardsIDDeleteRes() {}

type CustomersCustomerIDCardsIDGetOK struct {
	DefaultFlag OptString `json:"default_flag"`
	CardNo      OptString `json:"card_no"`
	Expire      OptString `json:"expire"`
	HolderName  OptString `json:"holder_name"`
	CardNoHash  OptString `json:"card_no_hash"`
	Created     OptString `json:"created"`
	Updated     OptString `json:"updated"`
	Type        OptString `json:"type"`
	Brand       OptString `json:"brand"`
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomersCustomerIDCardsIDGetOK) GetDefaultFlag() OptString {
	return s.DefaultFlag
}

// GetCardNo returns the value of CardNo.
func (s *CustomersCustomerIDCardsIDGetOK) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CustomersCustomerIDCardsIDGetOK) GetExpire() OptString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CustomersCustomerIDCardsIDGetOK) GetHolderName() OptString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CustomersCustomerIDCardsIDGetOK) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetCreated returns the value of Created.
func (s *CustomersCustomerIDCardsIDGetOK) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomersCustomerIDCardsIDGetOK) GetUpdated() OptString {
	return s.Updated
}

// GetType returns the value of Type.
func (s *CustomersCustomerIDCardsIDGetOK) GetType() OptString {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *CustomersCustomerIDCardsIDGetOK) GetBrand() OptString {
	return s.Brand
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomersCustomerIDCardsIDGetOK) SetDefaultFlag(val OptString) {
	s.DefaultFlag = val
}

// SetCardNo sets the value of CardNo.
func (s *CustomersCustomerIDCardsIDGetOK) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CustomersCustomerIDCardsIDGetOK) SetExpire(val OptString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CustomersCustomerIDCardsIDGetOK) SetHolderName(val OptString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CustomersCustomerIDCardsIDGetOK) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetCreated sets the value of Created.
func (s *CustomersCustomerIDCardsIDGetOK) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomersCustomerIDCardsIDGetOK) SetUpdated(val OptString) {
	s.Updated = val
}

// SetType sets the value of Type.
func (s *CustomersCustomerIDCardsIDGetOK) SetType(val OptString) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *CustomersCustomerIDCardsIDGetOK) SetBrand(val OptString) {
	s.Brand = val
}

func (*CustomersCustomerIDCardsIDGetOK) customersCustomerIDCardsIDGetRes() {}

type CustomersCustomerIDPaymentMethodsPaymentMethodIDDeleteOK struct {
	ID         string `json:"id"`
	DeleteFlag string `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDDeleteOK) GetID() string {
	return s.ID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDDeleteOK) GetDeleteFlag() string {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDDeleteOK) SetID(val string) {
	s.ID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDDeleteOK) SetDeleteFlag(val string) {
	s.DeleteFlag = val
}

func (*CustomersCustomerIDPaymentMethodsPaymentMethodIDDeleteOK) customersCustomerIDPaymentMethodsPaymentMethodIDDeleteRes() {
}

type CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK struct {
	ID                      string       `json:"id"`
	Name                    string       `json:"name"`
	Email                   string       `json:"email"`
	PhoneCc                 OptNilString `json:"phone_cc"`
	PhoneNo                 OptNilString `json:"phone_no"`
	AddrCity                OptNilString `json:"addr_city"`
	AddrCountry             OptNilString `json:"addr_country"`
	AddrLine1               OptNilString `json:"addr_line_1"`
	AddrLine2               OptNilString `json:"addr_line_2"`
	AddrLine3               OptNilString `json:"addr_line_3"`
	AddrPostCode            OptNilString `json:"addr_post_code"`
	AddrState               OptNilString `json:"addr_state"`
	CardRegistration        OptNilString `json:"card_registration"`
	DerectdebitRegistration OptNilString `json:"derectdebit_registration"`
	Created                 OptNilString `json:"created"`
	Updated                 OptNilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetEmail() string {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// GetAddrState returns the value of AddrState.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetAddrState() OptNilString {
	return s.AddrState
}

// GetCardRegistration returns the value of CardRegistration.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetCardRegistration() OptNilString {
	return s.CardRegistration
}

// GetDerectdebitRegistration returns the value of DerectdebitRegistration.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetDerectdebitRegistration() OptNilString {
	return s.DerectdebitRegistration
}

// GetCreated returns the value of Created.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) GetUpdated() OptNilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetEmail(val string) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetCardRegistration sets the value of CardRegistration.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetCardRegistration(val OptNilString) {
	s.CardRegistration = val
}

// SetDerectdebitRegistration sets the value of DerectdebitRegistration.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetDerectdebitRegistration(val OptNilString) {
	s.DerectdebitRegistration = val
}

// SetCreated sets the value of Created.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) SetUpdated(val OptNilString) {
	s.Updated = val
}

func (*CustomersCustomerIDPaymentMethodsPaymentMethodIDGetOK) customersCustomerIDPaymentMethodsPaymentMethodIDGetRes() {
}

// CustomersCustomerIDPaymentMethodsPostOK represents sum type.
type CustomersCustomerIDPaymentMethodsPostOK struct {
	Type                             CustomersCustomerIDPaymentMethodsPostOKType // switch on this field
	PaymentMethodCardResponse        PaymentMethodCardResponse
	PaymentMethodDirectDebitResponse PaymentMethodDirectDebitResponse
}

// CustomersCustomerIDPaymentMethodsPostOKType is oneOf type of CustomersCustomerIDPaymentMethodsPostOK.
type CustomersCustomerIDPaymentMethodsPostOKType string

// Possible values for CustomersCustomerIDPaymentMethodsPostOKType.
const (
	PaymentMethodCardResponseCustomersCustomerIDPaymentMethodsPostOK        CustomersCustomerIDPaymentMethodsPostOKType = "PaymentMethodCardResponse"
	PaymentMethodDirectDebitResponseCustomersCustomerIDPaymentMethodsPostOK CustomersCustomerIDPaymentMethodsPostOKType = "PaymentMethodDirectDebitResponse"
)

// IsPaymentMethodCardResponse reports whether CustomersCustomerIDPaymentMethodsPostOK is PaymentMethodCardResponse.
func (s CustomersCustomerIDPaymentMethodsPostOK) IsPaymentMethodCardResponse() bool {
	return s.Type == PaymentMethodCardResponseCustomersCustomerIDPaymentMethodsPostOK
}

// IsPaymentMethodDirectDebitResponse reports whether CustomersCustomerIDPaymentMethodsPostOK is PaymentMethodDirectDebitResponse.
func (s CustomersCustomerIDPaymentMethodsPostOK) IsPaymentMethodDirectDebitResponse() bool {
	return s.Type == PaymentMethodDirectDebitResponseCustomersCustomerIDPaymentMethodsPostOK
}

// SetPaymentMethodCardResponse sets CustomersCustomerIDPaymentMethodsPostOK to PaymentMethodCardResponse.
func (s *CustomersCustomerIDPaymentMethodsPostOK) SetPaymentMethodCardResponse(v PaymentMethodCardResponse) {
	s.Type = PaymentMethodCardResponseCustomersCustomerIDPaymentMethodsPostOK
	s.PaymentMethodCardResponse = v
}

// GetPaymentMethodCardResponse returns PaymentMethodCardResponse and true boolean if CustomersCustomerIDPaymentMethodsPostOK is PaymentMethodCardResponse.
func (s CustomersCustomerIDPaymentMethodsPostOK) GetPaymentMethodCardResponse() (v PaymentMethodCardResponse, ok bool) {
	if !s.IsPaymentMethodCardResponse() {
		return v, false
	}
	return s.PaymentMethodCardResponse, true
}

// NewPaymentMethodCardResponseCustomersCustomerIDPaymentMethodsPostOK returns new CustomersCustomerIDPaymentMethodsPostOK from PaymentMethodCardResponse.
func NewPaymentMethodCardResponseCustomersCustomerIDPaymentMethodsPostOK(v PaymentMethodCardResponse) CustomersCustomerIDPaymentMethodsPostOK {
	var s CustomersCustomerIDPaymentMethodsPostOK
	s.SetPaymentMethodCardResponse(v)
	return s
}

// SetPaymentMethodDirectDebitResponse sets CustomersCustomerIDPaymentMethodsPostOK to PaymentMethodDirectDebitResponse.
func (s *CustomersCustomerIDPaymentMethodsPostOK) SetPaymentMethodDirectDebitResponse(v PaymentMethodDirectDebitResponse) {
	s.Type = PaymentMethodDirectDebitResponseCustomersCustomerIDPaymentMethodsPostOK
	s.PaymentMethodDirectDebitResponse = v
}

// GetPaymentMethodDirectDebitResponse returns PaymentMethodDirectDebitResponse and true boolean if CustomersCustomerIDPaymentMethodsPostOK is PaymentMethodDirectDebitResponse.
func (s CustomersCustomerIDPaymentMethodsPostOK) GetPaymentMethodDirectDebitResponse() (v PaymentMethodDirectDebitResponse, ok bool) {
	if !s.IsPaymentMethodDirectDebitResponse() {
		return v, false
	}
	return s.PaymentMethodDirectDebitResponse, true
}

// NewPaymentMethodDirectDebitResponseCustomersCustomerIDPaymentMethodsPostOK returns new CustomersCustomerIDPaymentMethodsPostOK from PaymentMethodDirectDebitResponse.
func NewPaymentMethodDirectDebitResponseCustomersCustomerIDPaymentMethodsPostOK(v PaymentMethodDirectDebitResponse) CustomersCustomerIDPaymentMethodsPostOK {
	var s CustomersCustomerIDPaymentMethodsPostOK
	s.SetPaymentMethodDirectDebitResponse(v)
	return s
}

func (*CustomersCustomerIDPaymentMethodsPostOK) customersCustomerIDPaymentMethodsPostRes() {}

// CustomersCustomerIDPaymentMethodsPostReq represents sum type.
type CustomersCustomerIDPaymentMethodsPostReq struct {
	Type                             CustomersCustomerIDPaymentMethodsPostReqType // switch on this field
	PaymentMethodCardWith3DSecure    PaymentMethodCardWith3DSecure
	PaymentMethodCardWithout3DSecure PaymentMethodCardWithout3DSecure
	PaymentMethodDirectDebit         PaymentMethodDirectDebit
}

// CustomersCustomerIDPaymentMethodsPostReqType is oneOf type of CustomersCustomerIDPaymentMethodsPostReq.
type CustomersCustomerIDPaymentMethodsPostReqType string

// Possible values for CustomersCustomerIDPaymentMethodsPostReqType.
const (
	PaymentMethodCardWith3DSecureCustomersCustomerIDPaymentMethodsPostReq    CustomersCustomerIDPaymentMethodsPostReqType = "PaymentMethodCardWith3DSecure"
	PaymentMethodCardWithout3DSecureCustomersCustomerIDPaymentMethodsPostReq CustomersCustomerIDPaymentMethodsPostReqType = "PaymentMethodCardWithout3DSecure"
	PaymentMethodDirectDebitCustomersCustomerIDPaymentMethodsPostReq         CustomersCustomerIDPaymentMethodsPostReqType = "PaymentMethodDirectDebit"
)

// IsPaymentMethodCardWith3DSecure reports whether CustomersCustomerIDPaymentMethodsPostReq is PaymentMethodCardWith3DSecure.
func (s CustomersCustomerIDPaymentMethodsPostReq) IsPaymentMethodCardWith3DSecure() bool {
	return s.Type == PaymentMethodCardWith3DSecureCustomersCustomerIDPaymentMethodsPostReq
}

// IsPaymentMethodCardWithout3DSecure reports whether CustomersCustomerIDPaymentMethodsPostReq is PaymentMethodCardWithout3DSecure.
func (s CustomersCustomerIDPaymentMethodsPostReq) IsPaymentMethodCardWithout3DSecure() bool {
	return s.Type == PaymentMethodCardWithout3DSecureCustomersCustomerIDPaymentMethodsPostReq
}

// IsPaymentMethodDirectDebit reports whether CustomersCustomerIDPaymentMethodsPostReq is PaymentMethodDirectDebit.
func (s CustomersCustomerIDPaymentMethodsPostReq) IsPaymentMethodDirectDebit() bool {
	return s.Type == PaymentMethodDirectDebitCustomersCustomerIDPaymentMethodsPostReq
}

// SetPaymentMethodCardWith3DSecure sets CustomersCustomerIDPaymentMethodsPostReq to PaymentMethodCardWith3DSecure.
func (s *CustomersCustomerIDPaymentMethodsPostReq) SetPaymentMethodCardWith3DSecure(v PaymentMethodCardWith3DSecure) {
	s.Type = PaymentMethodCardWith3DSecureCustomersCustomerIDPaymentMethodsPostReq
	s.PaymentMethodCardWith3DSecure = v
}

// GetPaymentMethodCardWith3DSecure returns PaymentMethodCardWith3DSecure and true boolean if CustomersCustomerIDPaymentMethodsPostReq is PaymentMethodCardWith3DSecure.
func (s CustomersCustomerIDPaymentMethodsPostReq) GetPaymentMethodCardWith3DSecure() (v PaymentMethodCardWith3DSecure, ok bool) {
	if !s.IsPaymentMethodCardWith3DSecure() {
		return v, false
	}
	return s.PaymentMethodCardWith3DSecure, true
}

// NewPaymentMethodCardWith3DSecureCustomersCustomerIDPaymentMethodsPostReq returns new CustomersCustomerIDPaymentMethodsPostReq from PaymentMethodCardWith3DSecure.
func NewPaymentMethodCardWith3DSecureCustomersCustomerIDPaymentMethodsPostReq(v PaymentMethodCardWith3DSecure) CustomersCustomerIDPaymentMethodsPostReq {
	var s CustomersCustomerIDPaymentMethodsPostReq
	s.SetPaymentMethodCardWith3DSecure(v)
	return s
}

// SetPaymentMethodCardWithout3DSecure sets CustomersCustomerIDPaymentMethodsPostReq to PaymentMethodCardWithout3DSecure.
func (s *CustomersCustomerIDPaymentMethodsPostReq) SetPaymentMethodCardWithout3DSecure(v PaymentMethodCardWithout3DSecure) {
	s.Type = PaymentMethodCardWithout3DSecureCustomersCustomerIDPaymentMethodsPostReq
	s.PaymentMethodCardWithout3DSecure = v
}

// GetPaymentMethodCardWithout3DSecure returns PaymentMethodCardWithout3DSecure and true boolean if CustomersCustomerIDPaymentMethodsPostReq is PaymentMethodCardWithout3DSecure.
func (s CustomersCustomerIDPaymentMethodsPostReq) GetPaymentMethodCardWithout3DSecure() (v PaymentMethodCardWithout3DSecure, ok bool) {
	if !s.IsPaymentMethodCardWithout3DSecure() {
		return v, false
	}
	return s.PaymentMethodCardWithout3DSecure, true
}

// NewPaymentMethodCardWithout3DSecureCustomersCustomerIDPaymentMethodsPostReq returns new CustomersCustomerIDPaymentMethodsPostReq from PaymentMethodCardWithout3DSecure.
func NewPaymentMethodCardWithout3DSecureCustomersCustomerIDPaymentMethodsPostReq(v PaymentMethodCardWithout3DSecure) CustomersCustomerIDPaymentMethodsPostReq {
	var s CustomersCustomerIDPaymentMethodsPostReq
	s.SetPaymentMethodCardWithout3DSecure(v)
	return s
}

// SetPaymentMethodDirectDebit sets CustomersCustomerIDPaymentMethodsPostReq to PaymentMethodDirectDebit.
func (s *CustomersCustomerIDPaymentMethodsPostReq) SetPaymentMethodDirectDebit(v PaymentMethodDirectDebit) {
	s.Type = PaymentMethodDirectDebitCustomersCustomerIDPaymentMethodsPostReq
	s.PaymentMethodDirectDebit = v
}

// GetPaymentMethodDirectDebit returns PaymentMethodDirectDebit and true boolean if CustomersCustomerIDPaymentMethodsPostReq is PaymentMethodDirectDebit.
func (s CustomersCustomerIDPaymentMethodsPostReq) GetPaymentMethodDirectDebit() (v PaymentMethodDirectDebit, ok bool) {
	if !s.IsPaymentMethodDirectDebit() {
		return v, false
	}
	return s.PaymentMethodDirectDebit, true
}

// NewPaymentMethodDirectDebitCustomersCustomerIDPaymentMethodsPostReq returns new CustomersCustomerIDPaymentMethodsPostReq from PaymentMethodDirectDebit.
func NewPaymentMethodDirectDebitCustomersCustomerIDPaymentMethodsPostReq(v PaymentMethodDirectDebit) CustomersCustomerIDPaymentMethodsPostReq {
	var s CustomersCustomerIDPaymentMethodsPostReq
	s.SetPaymentMethodDirectDebit(v)
	return s
}

type CustomersIDDeleteOK struct {
	ID         string `json:"id"`
	DeleteFlag string `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *CustomersIDDeleteOK) GetID() string {
	return s.ID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomersIDDeleteOK) GetDeleteFlag() string {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *CustomersIDDeleteOK) SetID(val string) {
	s.ID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomersIDDeleteOK) SetDeleteFlag(val string) {
	s.DeleteFlag = val
}

func (*CustomersIDDeleteOK) customersIDDeleteRes() {}

type CustomersIDGetOK struct {
	ID                      string       `json:"id"`
	Name                    string       `json:"name"`
	Email                   string       `json:"email"`
	PhoneCc                 OptNilString `json:"phone_cc"`
	PhoneNo                 OptNilString `json:"phone_no"`
	AddrCity                OptNilString `json:"addr_city"`
	AddrCountry             OptNilString `json:"addr_country"`
	AddrLine1               OptNilString `json:"addr_line_1"`
	AddrLine2               OptNilString `json:"addr_line_2"`
	AddrLine3               OptNilString `json:"addr_line_3"`
	AddrPostCode            OptNilString `json:"addr_post_code"`
	AddrState               OptNilString `json:"addr_state"`
	CardRegistration        OptNilString `json:"card_registration"`
	DerectdebitRegistration OptNilString `json:"derectdebit_registration"`
	Created                 OptNilString `json:"created"`
	Updated                 OptNilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomersIDGetOK) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomersIDGetOK) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomersIDGetOK) GetEmail() string {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomersIDGetOK) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomersIDGetOK) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomersIDGetOK) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomersIDGetOK) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomersIDGetOK) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomersIDGetOK) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomersIDGetOK) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomersIDGetOK) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// GetAddrState returns the value of AddrState.
func (s *CustomersIDGetOK) GetAddrState() OptNilString {
	return s.AddrState
}

// GetCardRegistration returns the value of CardRegistration.
func (s *CustomersIDGetOK) GetCardRegistration() OptNilString {
	return s.CardRegistration
}

// GetDerectdebitRegistration returns the value of DerectdebitRegistration.
func (s *CustomersIDGetOK) GetDerectdebitRegistration() OptNilString {
	return s.DerectdebitRegistration
}

// GetCreated returns the value of Created.
func (s *CustomersIDGetOK) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomersIDGetOK) GetUpdated() OptNilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomersIDGetOK) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomersIDGetOK) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomersIDGetOK) SetEmail(val string) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomersIDGetOK) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomersIDGetOK) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomersIDGetOK) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomersIDGetOK) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomersIDGetOK) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomersIDGetOK) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomersIDGetOK) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomersIDGetOK) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomersIDGetOK) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetCardRegistration sets the value of CardRegistration.
func (s *CustomersIDGetOK) SetCardRegistration(val OptNilString) {
	s.CardRegistration = val
}

// SetDerectdebitRegistration sets the value of DerectdebitRegistration.
func (s *CustomersIDGetOK) SetDerectdebitRegistration(val OptNilString) {
	s.DerectdebitRegistration = val
}

// SetCreated sets the value of Created.
func (s *CustomersIDGetOK) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomersIDGetOK) SetUpdated(val OptNilString) {
	s.Updated = val
}

func (*CustomersIDGetOK) customersIDGetRes() {}

type CustomersPostOK struct {
	ID                      string       `json:"id"`
	Name                    string       `json:"name"`
	Email                   string       `json:"email"`
	PhoneCc                 OptNilString `json:"phone_cc"`
	PhoneNo                 OptNilString `json:"phone_no"`
	AddrCity                OptNilString `json:"addr_city"`
	AddrCountry             OptNilString `json:"addr_country"`
	AddrLine1               OptNilString `json:"addr_line_1"`
	AddrLine2               OptNilString `json:"addr_line_2"`
	AddrLine3               OptNilString `json:"addr_line_3"`
	AddrPostCode            OptNilString `json:"addr_post_code"`
	AddrState               OptNilString `json:"addr_state"`
	CardRegistration        OptNilString `json:"card_registration"`
	DerectdebitRegistration OptNilString `json:"derectdebit_registration"`
	Created                 OptNilString `json:"created"`
	Updated                 OptNilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomersPostOK) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomersPostOK) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomersPostOK) GetEmail() string {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomersPostOK) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomersPostOK) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomersPostOK) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomersPostOK) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomersPostOK) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomersPostOK) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomersPostOK) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomersPostOK) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// GetAddrState returns the value of AddrState.
func (s *CustomersPostOK) GetAddrState() OptNilString {
	return s.AddrState
}

// GetCardRegistration returns the value of CardRegistration.
func (s *CustomersPostOK) GetCardRegistration() OptNilString {
	return s.CardRegistration
}

// GetDerectdebitRegistration returns the value of DerectdebitRegistration.
func (s *CustomersPostOK) GetDerectdebitRegistration() OptNilString {
	return s.DerectdebitRegistration
}

// GetCreated returns the value of Created.
func (s *CustomersPostOK) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomersPostOK) GetUpdated() OptNilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomersPostOK) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomersPostOK) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomersPostOK) SetEmail(val string) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomersPostOK) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomersPostOK) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomersPostOK) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomersPostOK) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomersPostOK) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomersPostOK) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomersPostOK) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomersPostOK) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomersPostOK) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetCardRegistration sets the value of CardRegistration.
func (s *CustomersPostOK) SetCardRegistration(val OptNilString) {
	s.CardRegistration = val
}

// SetDerectdebitRegistration sets the value of DerectdebitRegistration.
func (s *CustomersPostOK) SetDerectdebitRegistration(val OptNilString) {
	s.DerectdebitRegistration = val
}

// SetCreated sets the value of Created.
func (s *CustomersPostOK) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomersPostOK) SetUpdated(val OptNilString) {
	s.Updated = val
}

func (*CustomersPostOK) customersPostRes() {}

type CustomersPostReq struct {
	ID           string    `json:"id"`
	Name         string    `json:"name"`
	Email        string    `json:"email"`
	PhoneCc      OptString `json:"phone_cc"`
	PhoneNo      OptString `json:"phone_no"`
	AddrCity     OptString `json:"addr_city"`
	AddrCountry  OptString `json:"addr_country"`
	AddrLine1    OptString `json:"addr_line_1"`
	AddrLine2    OptString `json:"addr_line_2"`
	AddrLine3    OptString `json:"addr_line_3"`
	AddrPostCode OptString `json:"addr_post_code"`
	AddrState    OptString `json:"addr_state"`
}

// GetID returns the value of ID.
func (s *CustomersPostReq) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomersPostReq) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomersPostReq) GetEmail() string {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomersPostReq) GetPhoneCc() OptString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomersPostReq) GetPhoneNo() OptString {
	return s.PhoneNo
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomersPostReq) GetAddrCity() OptString {
	return s.AddrCity
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomersPostReq) GetAddrCountry() OptString {
	return s.AddrCountry
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomersPostReq) GetAddrLine1() OptString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomersPostReq) GetAddrLine2() OptString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomersPostReq) GetAddrLine3() OptString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomersPostReq) GetAddrPostCode() OptString {
	return s.AddrPostCode
}

// GetAddrState returns the value of AddrState.
func (s *CustomersPostReq) GetAddrState() OptString {
	return s.AddrState
}

// SetID sets the value of ID.
func (s *CustomersPostReq) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomersPostReq) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomersPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomersPostReq) SetPhoneCc(val OptString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomersPostReq) SetPhoneNo(val OptString) {
	s.PhoneNo = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomersPostReq) SetAddrCity(val OptString) {
	s.AddrCity = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomersPostReq) SetAddrCountry(val OptString) {
	s.AddrCountry = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomersPostReq) SetAddrLine1(val OptString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomersPostReq) SetAddrLine2(val OptString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomersPostReq) SetAddrLine3(val OptString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomersPostReq) SetAddrPostCode(val OptString) {
	s.AddrPostCode = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomersPostReq) SetAddrState(val OptString) {
	s.AddrState = val
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Errors []ErrorResponseErrorsItem `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *ErrorResponse) GetErrors() []ErrorResponseErrorsItem {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *ErrorResponse) SetErrors(val []ErrorResponseErrorsItem) {
	s.Errors = val
}

func (*ErrorResponse) customersCustomerIDCardsIDDeleteRes()                       {}
func (*ErrorResponse) customersCustomerIDCardsIDGetRes()                          {}
func (*ErrorResponse) customersCustomerIDPaymentMethodsPaymentMethodIDDeleteRes() {}
func (*ErrorResponse) customersCustomerIDPaymentMethodsPaymentMethodIDGetRes()    {}
func (*ErrorResponse) customersCustomerIDPaymentMethodsPostRes()                  {}
func (*ErrorResponse) customersIDDeleteRes()                                      {}
func (*ErrorResponse) customersIDGetRes()                                         {}
func (*ErrorResponse) customersPostRes()                                          {}
func (*ErrorResponse) paymentsIDAuthPutRes()                                      {}
func (*ErrorResponse) paymentsIDCancelPutRes()                                    {}
func (*ErrorResponse) paymentsIDCapturePutRes()                                   {}
func (*ErrorResponse) paymentsIDGetRes()                                          {}
func (*ErrorResponse) paymentsIDPutRes()                                          {}
func (*ErrorResponse) paymentsPostRes()                                           {}

type ErrorResponseErrorsItem struct {
	ErrorCode    string `json:"error_code"`
	ErrorMessage string `json:"error_message"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *ErrorResponseErrorsItem) GetErrorCode() string {
	return s.ErrorCode
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *ErrorResponseErrorsItem) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorCode sets the value of ErrorCode.
func (s *ErrorResponseErrorsItem) SetErrorCode(val string) {
	s.ErrorCode = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *ErrorResponseErrorsItem) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentAuthCardResponseMethod returns new OptNilPaymentAuthCardResponseMethod with value set to v.
func NewOptNilPaymentAuthCardResponseMethod(v PaymentAuthCardResponseMethod) OptNilPaymentAuthCardResponseMethod {
	return OptNilPaymentAuthCardResponseMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentAuthCardResponseMethod is optional nullable PaymentAuthCardResponseMethod.
type OptNilPaymentAuthCardResponseMethod struct {
	Value PaymentAuthCardResponseMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentAuthCardResponseMethod was set.
func (o OptNilPaymentAuthCardResponseMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentAuthCardResponseMethod) Reset() {
	var v PaymentAuthCardResponseMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentAuthCardResponseMethod) SetTo(v PaymentAuthCardResponseMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentAuthCardResponseMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentAuthCardResponseMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentAuthCardResponseMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentAuthCardResponseMethod) Get() (v PaymentAuthCardResponseMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentAuthCardResponseMethod) Or(d PaymentAuthCardResponseMethod) PaymentAuthCardResponseMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentAuthCardResponseTds2Status returns new OptNilPaymentAuthCardResponseTds2Status with value set to v.
func NewOptNilPaymentAuthCardResponseTds2Status(v PaymentAuthCardResponseTds2Status) OptNilPaymentAuthCardResponseTds2Status {
	return OptNilPaymentAuthCardResponseTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentAuthCardResponseTds2Status is optional nullable PaymentAuthCardResponseTds2Status.
type OptNilPaymentAuthCardResponseTds2Status struct {
	Value PaymentAuthCardResponseTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentAuthCardResponseTds2Status was set.
func (o OptNilPaymentAuthCardResponseTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentAuthCardResponseTds2Status) Reset() {
	var v PaymentAuthCardResponseTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentAuthCardResponseTds2Status) SetTo(v PaymentAuthCardResponseTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentAuthCardResponseTds2Status) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentAuthCardResponseTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentAuthCardResponseTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentAuthCardResponseTds2Status) Get() (v PaymentAuthCardResponseTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentAuthCardResponseTds2Status) Or(d PaymentAuthCardResponseTds2Status) PaymentAuthCardResponseTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentAuthCardResponseTds2Type returns new OptNilPaymentAuthCardResponseTds2Type with value set to v.
func NewOptNilPaymentAuthCardResponseTds2Type(v PaymentAuthCardResponseTds2Type) OptNilPaymentAuthCardResponseTds2Type {
	return OptNilPaymentAuthCardResponseTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentAuthCardResponseTds2Type is optional nullable PaymentAuthCardResponseTds2Type.
type OptNilPaymentAuthCardResponseTds2Type struct {
	Value PaymentAuthCardResponseTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentAuthCardResponseTds2Type was set.
func (o OptNilPaymentAuthCardResponseTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentAuthCardResponseTds2Type) Reset() {
	var v PaymentAuthCardResponseTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentAuthCardResponseTds2Type) SetTo(v PaymentAuthCardResponseTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentAuthCardResponseTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentAuthCardResponseTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentAuthCardResponseTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentAuthCardResponseTds2Type) Get() (v PaymentAuthCardResponseTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentAuthCardResponseTds2Type) Or(d PaymentAuthCardResponseTds2Type) PaymentAuthCardResponseTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentAuthCardResponseTdsType returns new OptNilPaymentAuthCardResponseTdsType with value set to v.
func NewOptNilPaymentAuthCardResponseTdsType(v PaymentAuthCardResponseTdsType) OptNilPaymentAuthCardResponseTdsType {
	return OptNilPaymentAuthCardResponseTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentAuthCardResponseTdsType is optional nullable PaymentAuthCardResponseTdsType.
type OptNilPaymentAuthCardResponseTdsType struct {
	Value PaymentAuthCardResponseTdsType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentAuthCardResponseTdsType was set.
func (o OptNilPaymentAuthCardResponseTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentAuthCardResponseTdsType) Reset() {
	var v PaymentAuthCardResponseTdsType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentAuthCardResponseTdsType) SetTo(v PaymentAuthCardResponseTdsType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentAuthCardResponseTdsType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentAuthCardResponseTdsType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentAuthCardResponseTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentAuthCardResponseTdsType) Get() (v PaymentAuthCardResponseTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentAuthCardResponseTdsType) Or(d PaymentAuthCardResponseTdsType) PaymentAuthCardResponseTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCancelCardResponseMethod returns new OptNilPaymentCancelCardResponseMethod with value set to v.
func NewOptNilPaymentCancelCardResponseMethod(v PaymentCancelCardResponseMethod) OptNilPaymentCancelCardResponseMethod {
	return OptNilPaymentCancelCardResponseMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCancelCardResponseMethod is optional nullable PaymentCancelCardResponseMethod.
type OptNilPaymentCancelCardResponseMethod struct {
	Value PaymentCancelCardResponseMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCancelCardResponseMethod was set.
func (o OptNilPaymentCancelCardResponseMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCancelCardResponseMethod) Reset() {
	var v PaymentCancelCardResponseMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCancelCardResponseMethod) SetTo(v PaymentCancelCardResponseMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCancelCardResponseMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCancelCardResponseMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCancelCardResponseMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCancelCardResponseMethod) Get() (v PaymentCancelCardResponseMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCancelCardResponseMethod) Or(d PaymentCancelCardResponseMethod) PaymentCancelCardResponseMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCancelCardResponseTds2Status returns new OptNilPaymentCancelCardResponseTds2Status with value set to v.
func NewOptNilPaymentCancelCardResponseTds2Status(v PaymentCancelCardResponseTds2Status) OptNilPaymentCancelCardResponseTds2Status {
	return OptNilPaymentCancelCardResponseTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCancelCardResponseTds2Status is optional nullable PaymentCancelCardResponseTds2Status.
type OptNilPaymentCancelCardResponseTds2Status struct {
	Value PaymentCancelCardResponseTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCancelCardResponseTds2Status was set.
func (o OptNilPaymentCancelCardResponseTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCancelCardResponseTds2Status) Reset() {
	var v PaymentCancelCardResponseTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCancelCardResponseTds2Status) SetTo(v PaymentCancelCardResponseTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCancelCardResponseTds2Status) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCancelCardResponseTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCancelCardResponseTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCancelCardResponseTds2Status) Get() (v PaymentCancelCardResponseTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCancelCardResponseTds2Status) Or(d PaymentCancelCardResponseTds2Status) PaymentCancelCardResponseTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCancelCardResponseTds2Type returns new OptNilPaymentCancelCardResponseTds2Type with value set to v.
func NewOptNilPaymentCancelCardResponseTds2Type(v PaymentCancelCardResponseTds2Type) OptNilPaymentCancelCardResponseTds2Type {
	return OptNilPaymentCancelCardResponseTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCancelCardResponseTds2Type is optional nullable PaymentCancelCardResponseTds2Type.
type OptNilPaymentCancelCardResponseTds2Type struct {
	Value PaymentCancelCardResponseTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCancelCardResponseTds2Type was set.
func (o OptNilPaymentCancelCardResponseTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCancelCardResponseTds2Type) Reset() {
	var v PaymentCancelCardResponseTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCancelCardResponseTds2Type) SetTo(v PaymentCancelCardResponseTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCancelCardResponseTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCancelCardResponseTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCancelCardResponseTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCancelCardResponseTds2Type) Get() (v PaymentCancelCardResponseTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCancelCardResponseTds2Type) Or(d PaymentCancelCardResponseTds2Type) PaymentCancelCardResponseTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCancelCardResponseTdsType returns new OptNilPaymentCancelCardResponseTdsType with value set to v.
func NewOptNilPaymentCancelCardResponseTdsType(v PaymentCancelCardResponseTdsType) OptNilPaymentCancelCardResponseTdsType {
	return OptNilPaymentCancelCardResponseTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCancelCardResponseTdsType is optional nullable PaymentCancelCardResponseTdsType.
type OptNilPaymentCancelCardResponseTdsType struct {
	Value PaymentCancelCardResponseTdsType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCancelCardResponseTdsType was set.
func (o OptNilPaymentCancelCardResponseTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCancelCardResponseTdsType) Reset() {
	var v PaymentCancelCardResponseTdsType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCancelCardResponseTdsType) SetTo(v PaymentCancelCardResponseTdsType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCancelCardResponseTdsType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCancelCardResponseTdsType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCancelCardResponseTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCancelCardResponseTdsType) Get() (v PaymentCancelCardResponseTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCancelCardResponseTdsType) Or(d PaymentCancelCardResponseTdsType) PaymentCancelCardResponseTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCancelPaypayResponseRedirectType returns new OptNilPaymentCancelPaypayResponseRedirectType with value set to v.
func NewOptNilPaymentCancelPaypayResponseRedirectType(v PaymentCancelPaypayResponseRedirectType) OptNilPaymentCancelPaypayResponseRedirectType {
	return OptNilPaymentCancelPaypayResponseRedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCancelPaypayResponseRedirectType is optional nullable PaymentCancelPaypayResponseRedirectType.
type OptNilPaymentCancelPaypayResponseRedirectType struct {
	Value PaymentCancelPaypayResponseRedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCancelPaypayResponseRedirectType was set.
func (o OptNilPaymentCancelPaypayResponseRedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCancelPaypayResponseRedirectType) Reset() {
	var v PaymentCancelPaypayResponseRedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCancelPaypayResponseRedirectType) SetTo(v PaymentCancelPaypayResponseRedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCancelPaypayResponseRedirectType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCancelPaypayResponseRedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCancelPaypayResponseRedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCancelPaypayResponseRedirectType) Get() (v PaymentCancelPaypayResponseRedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCancelPaypayResponseRedirectType) Or(d PaymentCancelPaypayResponseRedirectType) PaymentCancelPaypayResponseRedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCaptureCardResponseMethod returns new OptNilPaymentCaptureCardResponseMethod with value set to v.
func NewOptNilPaymentCaptureCardResponseMethod(v PaymentCaptureCardResponseMethod) OptNilPaymentCaptureCardResponseMethod {
	return OptNilPaymentCaptureCardResponseMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCaptureCardResponseMethod is optional nullable PaymentCaptureCardResponseMethod.
type OptNilPaymentCaptureCardResponseMethod struct {
	Value PaymentCaptureCardResponseMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCaptureCardResponseMethod was set.
func (o OptNilPaymentCaptureCardResponseMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCaptureCardResponseMethod) Reset() {
	var v PaymentCaptureCardResponseMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCaptureCardResponseMethod) SetTo(v PaymentCaptureCardResponseMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCaptureCardResponseMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCaptureCardResponseMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCaptureCardResponseMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCaptureCardResponseMethod) Get() (v PaymentCaptureCardResponseMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCaptureCardResponseMethod) Or(d PaymentCaptureCardResponseMethod) PaymentCaptureCardResponseMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCaptureCardResponseTds2Status returns new OptNilPaymentCaptureCardResponseTds2Status with value set to v.
func NewOptNilPaymentCaptureCardResponseTds2Status(v PaymentCaptureCardResponseTds2Status) OptNilPaymentCaptureCardResponseTds2Status {
	return OptNilPaymentCaptureCardResponseTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCaptureCardResponseTds2Status is optional nullable PaymentCaptureCardResponseTds2Status.
type OptNilPaymentCaptureCardResponseTds2Status struct {
	Value PaymentCaptureCardResponseTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCaptureCardResponseTds2Status was set.
func (o OptNilPaymentCaptureCardResponseTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCaptureCardResponseTds2Status) Reset() {
	var v PaymentCaptureCardResponseTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCaptureCardResponseTds2Status) SetTo(v PaymentCaptureCardResponseTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCaptureCardResponseTds2Status) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCaptureCardResponseTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCaptureCardResponseTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCaptureCardResponseTds2Status) Get() (v PaymentCaptureCardResponseTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCaptureCardResponseTds2Status) Or(d PaymentCaptureCardResponseTds2Status) PaymentCaptureCardResponseTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCaptureCardResponseTds2Type returns new OptNilPaymentCaptureCardResponseTds2Type with value set to v.
func NewOptNilPaymentCaptureCardResponseTds2Type(v PaymentCaptureCardResponseTds2Type) OptNilPaymentCaptureCardResponseTds2Type {
	return OptNilPaymentCaptureCardResponseTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCaptureCardResponseTds2Type is optional nullable PaymentCaptureCardResponseTds2Type.
type OptNilPaymentCaptureCardResponseTds2Type struct {
	Value PaymentCaptureCardResponseTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCaptureCardResponseTds2Type was set.
func (o OptNilPaymentCaptureCardResponseTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCaptureCardResponseTds2Type) Reset() {
	var v PaymentCaptureCardResponseTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCaptureCardResponseTds2Type) SetTo(v PaymentCaptureCardResponseTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCaptureCardResponseTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCaptureCardResponseTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCaptureCardResponseTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCaptureCardResponseTds2Type) Get() (v PaymentCaptureCardResponseTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCaptureCardResponseTds2Type) Or(d PaymentCaptureCardResponseTds2Type) PaymentCaptureCardResponseTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCaptureCardResponseTdsType returns new OptNilPaymentCaptureCardResponseTdsType with value set to v.
func NewOptNilPaymentCaptureCardResponseTdsType(v PaymentCaptureCardResponseTdsType) OptNilPaymentCaptureCardResponseTdsType {
	return OptNilPaymentCaptureCardResponseTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCaptureCardResponseTdsType is optional nullable PaymentCaptureCardResponseTdsType.
type OptNilPaymentCaptureCardResponseTdsType struct {
	Value PaymentCaptureCardResponseTdsType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCaptureCardResponseTdsType was set.
func (o OptNilPaymentCaptureCardResponseTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCaptureCardResponseTdsType) Reset() {
	var v PaymentCaptureCardResponseTdsType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCaptureCardResponseTdsType) SetTo(v PaymentCaptureCardResponseTdsType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCaptureCardResponseTdsType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCaptureCardResponseTdsType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCaptureCardResponseTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCaptureCardResponseTdsType) Get() (v PaymentCaptureCardResponseTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCaptureCardResponseTdsType) Or(d PaymentCaptureCardResponseTdsType) PaymentCaptureCardResponseTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCardResponseMethod returns new OptNilPaymentCardResponseMethod with value set to v.
func NewOptNilPaymentCardResponseMethod(v PaymentCardResponseMethod) OptNilPaymentCardResponseMethod {
	return OptNilPaymentCardResponseMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCardResponseMethod is optional nullable PaymentCardResponseMethod.
type OptNilPaymentCardResponseMethod struct {
	Value PaymentCardResponseMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCardResponseMethod was set.
func (o OptNilPaymentCardResponseMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCardResponseMethod) Reset() {
	var v PaymentCardResponseMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCardResponseMethod) SetTo(v PaymentCardResponseMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCardResponseMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCardResponseMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCardResponseMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCardResponseMethod) Get() (v PaymentCardResponseMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCardResponseMethod) Or(d PaymentCardResponseMethod) PaymentCardResponseMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCardResponseTds2Status returns new OptNilPaymentCardResponseTds2Status with value set to v.
func NewOptNilPaymentCardResponseTds2Status(v PaymentCardResponseTds2Status) OptNilPaymentCardResponseTds2Status {
	return OptNilPaymentCardResponseTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCardResponseTds2Status is optional nullable PaymentCardResponseTds2Status.
type OptNilPaymentCardResponseTds2Status struct {
	Value PaymentCardResponseTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCardResponseTds2Status was set.
func (o OptNilPaymentCardResponseTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCardResponseTds2Status) Reset() {
	var v PaymentCardResponseTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCardResponseTds2Status) SetTo(v PaymentCardResponseTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCardResponseTds2Status) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCardResponseTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCardResponseTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCardResponseTds2Status) Get() (v PaymentCardResponseTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCardResponseTds2Status) Or(d PaymentCardResponseTds2Status) PaymentCardResponseTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCardResponseTds2Type returns new OptNilPaymentCardResponseTds2Type with value set to v.
func NewOptNilPaymentCardResponseTds2Type(v PaymentCardResponseTds2Type) OptNilPaymentCardResponseTds2Type {
	return OptNilPaymentCardResponseTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCardResponseTds2Type is optional nullable PaymentCardResponseTds2Type.
type OptNilPaymentCardResponseTds2Type struct {
	Value PaymentCardResponseTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCardResponseTds2Type was set.
func (o OptNilPaymentCardResponseTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCardResponseTds2Type) Reset() {
	var v PaymentCardResponseTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCardResponseTds2Type) SetTo(v PaymentCardResponseTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCardResponseTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCardResponseTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCardResponseTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCardResponseTds2Type) Get() (v PaymentCardResponseTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCardResponseTds2Type) Or(d PaymentCardResponseTds2Type) PaymentCardResponseTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCardResponseTdsType returns new OptNilPaymentCardResponseTdsType with value set to v.
func NewOptNilPaymentCardResponseTdsType(v PaymentCardResponseTdsType) OptNilPaymentCardResponseTdsType {
	return OptNilPaymentCardResponseTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCardResponseTdsType is optional nullable PaymentCardResponseTdsType.
type OptNilPaymentCardResponseTdsType struct {
	Value PaymentCardResponseTdsType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCardResponseTdsType was set.
func (o OptNilPaymentCardResponseTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCardResponseTdsType) Reset() {
	var v PaymentCardResponseTdsType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCardResponseTdsType) SetTo(v PaymentCardResponseTdsType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCardResponseTdsType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCardResponseTdsType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCardResponseTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCardResponseTdsType) Get() (v PaymentCardResponseTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCardResponseTdsType) Or(d PaymentCardResponseTdsType) PaymentCardResponseTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentCardTds2Type returns new OptNilPaymentCardTds2Type with value set to v.
func NewOptNilPaymentCardTds2Type(v PaymentCardTds2Type) OptNilPaymentCardTds2Type {
	return OptNilPaymentCardTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentCardTds2Type is optional nullable PaymentCardTds2Type.
type OptNilPaymentCardTds2Type struct {
	Value PaymentCardTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentCardTds2Type was set.
func (o OptNilPaymentCardTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentCardTds2Type) Reset() {
	var v PaymentCardTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentCardTds2Type) SetTo(v PaymentCardTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentCardTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentCardTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentCardTds2Type) Get() (v PaymentCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentCardTds2Type) Or(d PaymentCardTds2Type) PaymentCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardResponseMethod returns new OptNilPaymentDoCardResponseMethod with value set to v.
func NewOptNilPaymentDoCardResponseMethod(v PaymentDoCardResponseMethod) OptNilPaymentDoCardResponseMethod {
	return OptNilPaymentDoCardResponseMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardResponseMethod is optional nullable PaymentDoCardResponseMethod.
type OptNilPaymentDoCardResponseMethod struct {
	Value PaymentDoCardResponseMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardResponseMethod was set.
func (o OptNilPaymentDoCardResponseMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardResponseMethod) Reset() {
	var v PaymentDoCardResponseMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardResponseMethod) SetTo(v PaymentDoCardResponseMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardResponseMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardResponseMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardResponseMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardResponseMethod) Get() (v PaymentDoCardResponseMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardResponseMethod) Or(d PaymentDoCardResponseMethod) PaymentDoCardResponseMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardResponseTds2Status returns new OptNilPaymentDoCardResponseTds2Status with value set to v.
func NewOptNilPaymentDoCardResponseTds2Status(v PaymentDoCardResponseTds2Status) OptNilPaymentDoCardResponseTds2Status {
	return OptNilPaymentDoCardResponseTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardResponseTds2Status is optional nullable PaymentDoCardResponseTds2Status.
type OptNilPaymentDoCardResponseTds2Status struct {
	Value PaymentDoCardResponseTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardResponseTds2Status was set.
func (o OptNilPaymentDoCardResponseTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardResponseTds2Status) Reset() {
	var v PaymentDoCardResponseTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardResponseTds2Status) SetTo(v PaymentDoCardResponseTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardResponseTds2Status) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardResponseTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardResponseTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardResponseTds2Status) Get() (v PaymentDoCardResponseTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardResponseTds2Status) Or(d PaymentDoCardResponseTds2Status) PaymentDoCardResponseTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardResponseTds2Type returns new OptNilPaymentDoCardResponseTds2Type with value set to v.
func NewOptNilPaymentDoCardResponseTds2Type(v PaymentDoCardResponseTds2Type) OptNilPaymentDoCardResponseTds2Type {
	return OptNilPaymentDoCardResponseTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardResponseTds2Type is optional nullable PaymentDoCardResponseTds2Type.
type OptNilPaymentDoCardResponseTds2Type struct {
	Value PaymentDoCardResponseTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardResponseTds2Type was set.
func (o OptNilPaymentDoCardResponseTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardResponseTds2Type) Reset() {
	var v PaymentDoCardResponseTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardResponseTds2Type) SetTo(v PaymentDoCardResponseTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardResponseTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardResponseTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardResponseTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardResponseTds2Type) Get() (v PaymentDoCardResponseTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardResponseTds2Type) Or(d PaymentDoCardResponseTds2Type) PaymentDoCardResponseTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardResponseTdsType returns new OptNilPaymentDoCardResponseTdsType with value set to v.
func NewOptNilPaymentDoCardResponseTdsType(v PaymentDoCardResponseTdsType) OptNilPaymentDoCardResponseTdsType {
	return OptNilPaymentDoCardResponseTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardResponseTdsType is optional nullable PaymentDoCardResponseTdsType.
type OptNilPaymentDoCardResponseTdsType struct {
	Value PaymentDoCardResponseTdsType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardResponseTdsType was set.
func (o OptNilPaymentDoCardResponseTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardResponseTdsType) Reset() {
	var v PaymentDoCardResponseTdsType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardResponseTdsType) SetTo(v PaymentDoCardResponseTdsType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardResponseTdsType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardResponseTdsType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardResponseTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardResponseTdsType) Get() (v PaymentDoCardResponseTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardResponseTdsType) Or(d PaymentDoCardResponseTdsType) PaymentDoCardResponseTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecurePayTimes returns new OptNilPaymentDoCardWith3DSecurePayTimes with value set to v.
func NewOptNilPaymentDoCardWith3DSecurePayTimes(v PaymentDoCardWith3DSecurePayTimes) OptNilPaymentDoCardWith3DSecurePayTimes {
	return OptNilPaymentDoCardWith3DSecurePayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecurePayTimes is optional nullable PaymentDoCardWith3DSecurePayTimes.
type OptNilPaymentDoCardWith3DSecurePayTimes struct {
	Value PaymentDoCardWith3DSecurePayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecurePayTimes was set.
func (o OptNilPaymentDoCardWith3DSecurePayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecurePayTimes) Reset() {
	var v PaymentDoCardWith3DSecurePayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecurePayTimes) SetTo(v PaymentDoCardWith3DSecurePayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecurePayTimes) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecurePayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecurePayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecurePayTimes) Get() (v PaymentDoCardWith3DSecurePayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecurePayTimes) Or(d PaymentDoCardWith3DSecurePayTimes) PaymentDoCardWith3DSecurePayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod returns new OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod(v PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod {
	return OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod is optional nullable PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod.
type OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod struct {
	Value PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod was set.
func (o OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) Reset() {
	var v PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) SetTo(v PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) Get() (v PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) Or(d PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTds2AddrMatch returns new OptNilPaymentDoCardWith3DSecureTds2AddrMatch with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTds2AddrMatch(v PaymentDoCardWith3DSecureTds2AddrMatch) OptNilPaymentDoCardWith3DSecureTds2AddrMatch {
	return OptNilPaymentDoCardWith3DSecureTds2AddrMatch{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTds2AddrMatch is optional nullable PaymentDoCardWith3DSecureTds2AddrMatch.
type OptNilPaymentDoCardWith3DSecureTds2AddrMatch struct {
	Value PaymentDoCardWith3DSecureTds2AddrMatch
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTds2AddrMatch was set.
func (o OptNilPaymentDoCardWith3DSecureTds2AddrMatch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTds2AddrMatch) Reset() {
	var v PaymentDoCardWith3DSecureTds2AddrMatch
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTds2AddrMatch) SetTo(v PaymentDoCardWith3DSecureTds2AddrMatch) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTds2AddrMatch) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTds2AddrMatch) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTds2AddrMatch
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTds2AddrMatch) Get() (v PaymentDoCardWith3DSecureTds2AddrMatch, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTds2AddrMatch) Or(d PaymentDoCardWith3DSecureTds2AddrMatch) PaymentDoCardWith3DSecureTds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe returns new OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe(v PaymentDoCardWith3DSecureTds2DeliveryTimeframe) OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe {
	return OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe is optional nullable PaymentDoCardWith3DSecureTds2DeliveryTimeframe.
type OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe struct {
	Value PaymentDoCardWith3DSecureTds2DeliveryTimeframe
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe was set.
func (o OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) Reset() {
	var v PaymentDoCardWith3DSecureTds2DeliveryTimeframe
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) SetTo(v PaymentDoCardWith3DSecureTds2DeliveryTimeframe) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTds2DeliveryTimeframe
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) Get() (v PaymentDoCardWith3DSecureTds2DeliveryTimeframe, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) Or(d PaymentDoCardWith3DSecureTds2DeliveryTimeframe) PaymentDoCardWith3DSecureTds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd returns new OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd(v PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd {
	return OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd is optional nullable PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd.
type OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd struct {
	Value PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd was set.
func (o OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) Reset() {
	var v PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) SetTo(v PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) Get() (v PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) Or(d PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd returns new OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd(v PaymentDoCardWith3DSecureTds2ReorderItemsInd) OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd {
	return OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd is optional nullable PaymentDoCardWith3DSecureTds2ReorderItemsInd.
type OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd struct {
	Value PaymentDoCardWith3DSecureTds2ReorderItemsInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd was set.
func (o OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) Reset() {
	var v PaymentDoCardWith3DSecureTds2ReorderItemsInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) SetTo(v PaymentDoCardWith3DSecureTds2ReorderItemsInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTds2ReorderItemsInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) Get() (v PaymentDoCardWith3DSecureTds2ReorderItemsInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) Or(d PaymentDoCardWith3DSecureTds2ReorderItemsInd) PaymentDoCardWith3DSecureTds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTds2ShipInd returns new OptNilPaymentDoCardWith3DSecureTds2ShipInd with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTds2ShipInd(v PaymentDoCardWith3DSecureTds2ShipInd) OptNilPaymentDoCardWith3DSecureTds2ShipInd {
	return OptNilPaymentDoCardWith3DSecureTds2ShipInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTds2ShipInd is optional nullable PaymentDoCardWith3DSecureTds2ShipInd.
type OptNilPaymentDoCardWith3DSecureTds2ShipInd struct {
	Value PaymentDoCardWith3DSecureTds2ShipInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTds2ShipInd was set.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTds2ShipInd) Reset() {
	var v PaymentDoCardWith3DSecureTds2ShipInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTds2ShipInd) SetTo(v PaymentDoCardWith3DSecureTds2ShipInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTds2ShipInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTds2ShipInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipInd) Get() (v PaymentDoCardWith3DSecureTds2ShipInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipInd) Or(d PaymentDoCardWith3DSecureTds2ShipInd) PaymentDoCardWith3DSecureTds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTds2ShipNameInd returns new OptNilPaymentDoCardWith3DSecureTds2ShipNameInd with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTds2ShipNameInd(v PaymentDoCardWith3DSecureTds2ShipNameInd) OptNilPaymentDoCardWith3DSecureTds2ShipNameInd {
	return OptNilPaymentDoCardWith3DSecureTds2ShipNameInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTds2ShipNameInd is optional nullable PaymentDoCardWith3DSecureTds2ShipNameInd.
type OptNilPaymentDoCardWith3DSecureTds2ShipNameInd struct {
	Value PaymentDoCardWith3DSecureTds2ShipNameInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTds2ShipNameInd was set.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) Reset() {
	var v PaymentDoCardWith3DSecureTds2ShipNameInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) SetTo(v PaymentDoCardWith3DSecureTds2ShipNameInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTds2ShipNameInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) Get() (v PaymentDoCardWith3DSecureTds2ShipNameInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) Or(d PaymentDoCardWith3DSecureTds2ShipNameInd) PaymentDoCardWith3DSecureTds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity returns new OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity with value set to v.
func NewOptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity(v PaymentDoCardWith3DSecureTds2SuspiciousAccActivity) OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity {
	return OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity is optional nullable PaymentDoCardWith3DSecureTds2SuspiciousAccActivity.
type OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity struct {
	Value PaymentDoCardWith3DSecureTds2SuspiciousAccActivity
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity was set.
func (o OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) Reset() {
	var v PaymentDoCardWith3DSecureTds2SuspiciousAccActivity
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) SetTo(v PaymentDoCardWith3DSecureTds2SuspiciousAccActivity) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWith3DSecureTds2SuspiciousAccActivity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) Get() (v PaymentDoCardWith3DSecureTds2SuspiciousAccActivity, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) Or(d PaymentDoCardWith3DSecureTds2SuspiciousAccActivity) PaymentDoCardWith3DSecureTds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoCardWithout3DSecurePayTimes returns new OptNilPaymentDoCardWithout3DSecurePayTimes with value set to v.
func NewOptNilPaymentDoCardWithout3DSecurePayTimes(v PaymentDoCardWithout3DSecurePayTimes) OptNilPaymentDoCardWithout3DSecurePayTimes {
	return OptNilPaymentDoCardWithout3DSecurePayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoCardWithout3DSecurePayTimes is optional nullable PaymentDoCardWithout3DSecurePayTimes.
type OptNilPaymentDoCardWithout3DSecurePayTimes struct {
	Value PaymentDoCardWithout3DSecurePayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoCardWithout3DSecurePayTimes was set.
func (o OptNilPaymentDoCardWithout3DSecurePayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoCardWithout3DSecurePayTimes) Reset() {
	var v PaymentDoCardWithout3DSecurePayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoCardWithout3DSecurePayTimes) SetTo(v PaymentDoCardWithout3DSecurePayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoCardWithout3DSecurePayTimes) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoCardWithout3DSecurePayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoCardWithout3DSecurePayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoCardWithout3DSecurePayTimes) Get() (v PaymentDoCardWithout3DSecurePayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoCardWithout3DSecurePayTimes) Or(d PaymentDoCardWithout3DSecurePayTimes) PaymentDoCardWithout3DSecurePayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentDoPaypayResponseRedirectType returns new OptNilPaymentDoPaypayResponseRedirectType with value set to v.
func NewOptNilPaymentDoPaypayResponseRedirectType(v PaymentDoPaypayResponseRedirectType) OptNilPaymentDoPaypayResponseRedirectType {
	return OptNilPaymentDoPaypayResponseRedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentDoPaypayResponseRedirectType is optional nullable PaymentDoPaypayResponseRedirectType.
type OptNilPaymentDoPaypayResponseRedirectType struct {
	Value PaymentDoPaypayResponseRedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentDoPaypayResponseRedirectType was set.
func (o OptNilPaymentDoPaypayResponseRedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentDoPaypayResponseRedirectType) Reset() {
	var v PaymentDoPaypayResponseRedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentDoPaypayResponseRedirectType) SetTo(v PaymentDoPaypayResponseRedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentDoPaypayResponseRedirectType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentDoPaypayResponseRedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentDoPaypayResponseRedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentDoPaypayResponseRedirectType) Get() (v PaymentDoPaypayResponseRedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentDoPaypayResponseRedirectType) Or(d PaymentDoPaypayResponseRedirectType) PaymentDoPaypayResponseRedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardResponseCardTds2Status returns new OptNilPaymentMethodCardResponseCardTds2Status with value set to v.
func NewOptNilPaymentMethodCardResponseCardTds2Status(v PaymentMethodCardResponseCardTds2Status) OptNilPaymentMethodCardResponseCardTds2Status {
	return OptNilPaymentMethodCardResponseCardTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardResponseCardTds2Status is optional nullable PaymentMethodCardResponseCardTds2Status.
type OptNilPaymentMethodCardResponseCardTds2Status struct {
	Value PaymentMethodCardResponseCardTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardResponseCardTds2Status was set.
func (o OptNilPaymentMethodCardResponseCardTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardResponseCardTds2Status) Reset() {
	var v PaymentMethodCardResponseCardTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardResponseCardTds2Status) SetTo(v PaymentMethodCardResponseCardTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardResponseCardTds2Status) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardResponseCardTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardResponseCardTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardResponseCardTds2Status) Get() (v PaymentMethodCardResponseCardTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardResponseCardTds2Status) Or(d PaymentMethodCardResponseCardTds2Status) PaymentMethodCardResponseCardTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardResponseCardTds2Type returns new OptNilPaymentMethodCardResponseCardTds2Type with value set to v.
func NewOptNilPaymentMethodCardResponseCardTds2Type(v PaymentMethodCardResponseCardTds2Type) OptNilPaymentMethodCardResponseCardTds2Type {
	return OptNilPaymentMethodCardResponseCardTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardResponseCardTds2Type is optional nullable PaymentMethodCardResponseCardTds2Type.
type OptNilPaymentMethodCardResponseCardTds2Type struct {
	Value PaymentMethodCardResponseCardTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardResponseCardTds2Type was set.
func (o OptNilPaymentMethodCardResponseCardTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardResponseCardTds2Type) Reset() {
	var v PaymentMethodCardResponseCardTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardResponseCardTds2Type) SetTo(v PaymentMethodCardResponseCardTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardResponseCardTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardResponseCardTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardResponseCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardResponseCardTds2Type) Get() (v PaymentMethodCardResponseCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardResponseCardTds2Type) Or(d PaymentMethodCardResponseCardTds2Type) PaymentMethodCardResponseCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardResponseCardTdsType returns new OptNilPaymentMethodCardResponseCardTdsType with value set to v.
func NewOptNilPaymentMethodCardResponseCardTdsType(v PaymentMethodCardResponseCardTdsType) OptNilPaymentMethodCardResponseCardTdsType {
	return OptNilPaymentMethodCardResponseCardTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardResponseCardTdsType is optional nullable PaymentMethodCardResponseCardTdsType.
type OptNilPaymentMethodCardResponseCardTdsType struct {
	Value PaymentMethodCardResponseCardTdsType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardResponseCardTdsType was set.
func (o OptNilPaymentMethodCardResponseCardTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardResponseCardTdsType) Reset() {
	var v PaymentMethodCardResponseCardTdsType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardResponseCardTdsType) SetTo(v PaymentMethodCardResponseCardTdsType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardResponseCardTdsType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardResponseCardTdsType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardResponseCardTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardResponseCardTdsType) Get() (v PaymentMethodCardResponseCardTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardResponseCardTdsType) Or(d PaymentMethodCardResponseCardTdsType) PaymentMethodCardResponseCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch returns new OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch(v PaymentMethodCardWith3DSecureCardTds2AddrMatch) OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch {
	return OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch is optional nullable PaymentMethodCardWith3DSecureCardTds2AddrMatch.
type OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch struct {
	Value PaymentMethodCardWith3DSecureCardTds2AddrMatch
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2AddrMatch
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) SetTo(v PaymentMethodCardWith3DSecureCardTds2AddrMatch) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2AddrMatch
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) Get() (v PaymentMethodCardWith3DSecureCardTds2AddrMatch, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) Or(d PaymentMethodCardWith3DSecureCardTds2AddrMatch) PaymentMethodCardWith3DSecureCardTds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe returns new OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe(v PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe {
	return OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe is optional nullable PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe.
type OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe struct {
	Value PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) SetTo(v PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) Get() (v PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) Or(d PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd returns new OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd(v PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd {
	return OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd is optional nullable PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd.
type OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd struct {
	Value PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) SetTo(v PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) Get() (v PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) Or(d PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd returns new OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd(v PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd {
	return OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd is optional nullable PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd.
type OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd struct {
	Value PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) SetTo(v PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) Get() (v PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) Or(d PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2ShipInd returns new OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2ShipInd(v PaymentMethodCardWith3DSecureCardTds2ShipInd) OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd {
	return OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd is optional nullable PaymentMethodCardWith3DSecureCardTds2ShipInd.
type OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd struct {
	Value PaymentMethodCardWith3DSecureCardTds2ShipInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2ShipInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) SetTo(v PaymentMethodCardWith3DSecureCardTds2ShipInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2ShipInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) Get() (v PaymentMethodCardWith3DSecureCardTds2ShipInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) Or(d PaymentMethodCardWith3DSecureCardTds2ShipInd) PaymentMethodCardWith3DSecureCardTds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd returns new OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd(v PaymentMethodCardWith3DSecureCardTds2ShipNameInd) OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd {
	return OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd is optional nullable PaymentMethodCardWith3DSecureCardTds2ShipNameInd.
type OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd struct {
	Value PaymentMethodCardWith3DSecureCardTds2ShipNameInd
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2ShipNameInd
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) SetTo(v PaymentMethodCardWith3DSecureCardTds2ShipNameInd) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2ShipNameInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) Get() (v PaymentMethodCardWith3DSecureCardTds2ShipNameInd, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) Or(d PaymentMethodCardWith3DSecureCardTds2ShipNameInd) PaymentMethodCardWith3DSecureCardTds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity returns new OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity(v PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity {
	return OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity is optional nullable PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity.
type OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity struct {
	Value PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) SetTo(v PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) IsNull() bool {
	return o.Null
}

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) Get() (v PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) Or(d PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod returns new OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod(v PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod {
	return OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod is optional nullable PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod.
type OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod struct {
	Value PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) SetTo(v PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) Get() (v PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) Or(d PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCardWith3DSecureCardTds2Type returns new OptNilPaymentMethodCardWith3DSecureCardTds2Type with value set to v.
func NewOptNilPaymentMethodCardWith3DSecureCardTds2Type(v PaymentMethodCardWith3DSecureCardTds2Type) OptNilPaymentMethodCardWith3DSecureCardTds2Type {
	return OptNilPaymentMethodCardWith3DSecureCardTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCardWith3DSecureCardTds2Type is optional nullable PaymentMethodCardWith3DSecureCardTds2Type.
type OptNilPaymentMethodCardWith3DSecureCardTds2Type struct {
	Value PaymentMethodCardWith3DSecureCardTds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCardWith3DSecureCardTds2Type was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2Type) Reset() {
	var v PaymentMethodCardWith3DSecureCardTds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2Type) SetTo(v PaymentMethodCardWith3DSecureCardTds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2Type) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentMethodCardWith3DSecureCardTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCardWith3DSecureCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2Type) Get() (v PaymentMethodCardWith3DSecureCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCardWith3DSecureCardTds2Type) Or(d PaymentMethodCardWith3DSecureCardTds2Type) PaymentMethodCardWith3DSecureCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentPaypayResponseRedirectType returns new OptNilPaymentPaypayResponseRedirectType with value set to v.
func NewOptNilPaymentPaypayResponseRedirectType(v PaymentPaypayResponseRedirectType) OptNilPaymentPaypayResponseRedirectType {
	return OptNilPaymentPaypayResponseRedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentPaypayResponseRedirectType is optional nullable PaymentPaypayResponseRedirectType.
type OptNilPaymentPaypayResponseRedirectType struct {
	Value PaymentPaypayResponseRedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentPaypayResponseRedirectType was set.
func (o OptNilPaymentPaypayResponseRedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentPaypayResponseRedirectType) Reset() {
	var v PaymentPaypayResponseRedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentPaypayResponseRedirectType) SetTo(v PaymentPaypayResponseRedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPaymentPaypayResponseRedirectType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPaymentPaypayResponseRedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentPaypayResponseRedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentPaypayResponseRedirectType) Get() (v PaymentPaypayResponseRedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentPaypayResponseRedirectType) Or(d PaymentPaypayResponseRedirectType) PaymentPaypayResponseRedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentAuthCardPayTimes returns new OptPaymentAuthCardPayTimes with value set to v.
func NewOptPaymentAuthCardPayTimes(v PaymentAuthCardPayTimes) OptPaymentAuthCardPayTimes {
	return OptPaymentAuthCardPayTimes{
		Value: v,
		Set:   true,
	}
}

// OptPaymentAuthCardPayTimes is optional PaymentAuthCardPayTimes.
type OptPaymentAuthCardPayTimes struct {
	Value PaymentAuthCardPayTimes
	Set   bool
}

// IsSet returns true if OptPaymentAuthCardPayTimes was set.
func (o OptPaymentAuthCardPayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentAuthCardPayTimes) Reset() {
	var v PaymentAuthCardPayTimes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentAuthCardPayTimes) SetTo(v PaymentAuthCardPayTimes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentAuthCardPayTimes) Get() (v PaymentAuthCardPayTimes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentAuthCardPayTimes) Or(d PaymentAuthCardPayTimes) PaymentAuthCardPayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentAuthCardResponseJobCode returns new OptPaymentAuthCardResponseJobCode with value set to v.
func NewOptPaymentAuthCardResponseJobCode(v PaymentAuthCardResponseJobCode) OptPaymentAuthCardResponseJobCode {
	return OptPaymentAuthCardResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentAuthCardResponseJobCode is optional PaymentAuthCardResponseJobCode.
type OptPaymentAuthCardResponseJobCode struct {
	Value PaymentAuthCardResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentAuthCardResponseJobCode was set.
func (o OptPaymentAuthCardResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentAuthCardResponseJobCode) Reset() {
	var v PaymentAuthCardResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentAuthCardResponseJobCode) SetTo(v PaymentAuthCardResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentAuthCardResponseJobCode) Get() (v PaymentAuthCardResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentAuthCardResponseJobCode) Or(d PaymentAuthCardResponseJobCode) PaymentAuthCardResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentAuthCardResponsePayType returns new OptPaymentAuthCardResponsePayType with value set to v.
func NewOptPaymentAuthCardResponsePayType(v PaymentAuthCardResponsePayType) OptPaymentAuthCardResponsePayType {
	return OptPaymentAuthCardResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentAuthCardResponsePayType is optional PaymentAuthCardResponsePayType.
type OptPaymentAuthCardResponsePayType struct {
	Value PaymentAuthCardResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentAuthCardResponsePayType was set.
func (o OptPaymentAuthCardResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentAuthCardResponsePayType) Reset() {
	var v PaymentAuthCardResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentAuthCardResponsePayType) SetTo(v PaymentAuthCardResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentAuthCardResponsePayType) Get() (v PaymentAuthCardResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentAuthCardResponsePayType) Or(d PaymentAuthCardResponsePayType) PaymentAuthCardResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentAuthCardResponseStatus returns new OptPaymentAuthCardResponseStatus with value set to v.
func NewOptPaymentAuthCardResponseStatus(v PaymentAuthCardResponseStatus) OptPaymentAuthCardResponseStatus {
	return OptPaymentAuthCardResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentAuthCardResponseStatus is optional PaymentAuthCardResponseStatus.
type OptPaymentAuthCardResponseStatus struct {
	Value PaymentAuthCardResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentAuthCardResponseStatus was set.
func (o OptPaymentAuthCardResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentAuthCardResponseStatus) Reset() {
	var v PaymentAuthCardResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentAuthCardResponseStatus) SetTo(v PaymentAuthCardResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentAuthCardResponseStatus) Get() (v PaymentAuthCardResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentAuthCardResponseStatus) Or(d PaymentAuthCardResponseStatus) PaymentAuthCardResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCancelCardResponseJobCode returns new OptPaymentCancelCardResponseJobCode with value set to v.
func NewOptPaymentCancelCardResponseJobCode(v PaymentCancelCardResponseJobCode) OptPaymentCancelCardResponseJobCode {
	return OptPaymentCancelCardResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCancelCardResponseJobCode is optional PaymentCancelCardResponseJobCode.
type OptPaymentCancelCardResponseJobCode struct {
	Value PaymentCancelCardResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentCancelCardResponseJobCode was set.
func (o OptPaymentCancelCardResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCancelCardResponseJobCode) Reset() {
	var v PaymentCancelCardResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCancelCardResponseJobCode) SetTo(v PaymentCancelCardResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCancelCardResponseJobCode) Get() (v PaymentCancelCardResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCancelCardResponseJobCode) Or(d PaymentCancelCardResponseJobCode) PaymentCancelCardResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCancelCardResponsePayType returns new OptPaymentCancelCardResponsePayType with value set to v.
func NewOptPaymentCancelCardResponsePayType(v PaymentCancelCardResponsePayType) OptPaymentCancelCardResponsePayType {
	return OptPaymentCancelCardResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCancelCardResponsePayType is optional PaymentCancelCardResponsePayType.
type OptPaymentCancelCardResponsePayType struct {
	Value PaymentCancelCardResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentCancelCardResponsePayType was set.
func (o OptPaymentCancelCardResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCancelCardResponsePayType) Reset() {
	var v PaymentCancelCardResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCancelCardResponsePayType) SetTo(v PaymentCancelCardResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCancelCardResponsePayType) Get() (v PaymentCancelCardResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCancelCardResponsePayType) Or(d PaymentCancelCardResponsePayType) PaymentCancelCardResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCancelCardResponseStatus returns new OptPaymentCancelCardResponseStatus with value set to v.
func NewOptPaymentCancelCardResponseStatus(v PaymentCancelCardResponseStatus) OptPaymentCancelCardResponseStatus {
	return OptPaymentCancelCardResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCancelCardResponseStatus is optional PaymentCancelCardResponseStatus.
type OptPaymentCancelCardResponseStatus struct {
	Value PaymentCancelCardResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentCancelCardResponseStatus was set.
func (o OptPaymentCancelCardResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCancelCardResponseStatus) Reset() {
	var v PaymentCancelCardResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCancelCardResponseStatus) SetTo(v PaymentCancelCardResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCancelCardResponseStatus) Get() (v PaymentCancelCardResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCancelCardResponseStatus) Or(d PaymentCancelCardResponseStatus) PaymentCancelCardResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCancelPaypayResponseJobCode returns new OptPaymentCancelPaypayResponseJobCode with value set to v.
func NewOptPaymentCancelPaypayResponseJobCode(v PaymentCancelPaypayResponseJobCode) OptPaymentCancelPaypayResponseJobCode {
	return OptPaymentCancelPaypayResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCancelPaypayResponseJobCode is optional PaymentCancelPaypayResponseJobCode.
type OptPaymentCancelPaypayResponseJobCode struct {
	Value PaymentCancelPaypayResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentCancelPaypayResponseJobCode was set.
func (o OptPaymentCancelPaypayResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCancelPaypayResponseJobCode) Reset() {
	var v PaymentCancelPaypayResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCancelPaypayResponseJobCode) SetTo(v PaymentCancelPaypayResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCancelPaypayResponseJobCode) Get() (v PaymentCancelPaypayResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCancelPaypayResponseJobCode) Or(d PaymentCancelPaypayResponseJobCode) PaymentCancelPaypayResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCancelPaypayResponsePayType returns new OptPaymentCancelPaypayResponsePayType with value set to v.
func NewOptPaymentCancelPaypayResponsePayType(v PaymentCancelPaypayResponsePayType) OptPaymentCancelPaypayResponsePayType {
	return OptPaymentCancelPaypayResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCancelPaypayResponsePayType is optional PaymentCancelPaypayResponsePayType.
type OptPaymentCancelPaypayResponsePayType struct {
	Value PaymentCancelPaypayResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentCancelPaypayResponsePayType was set.
func (o OptPaymentCancelPaypayResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCancelPaypayResponsePayType) Reset() {
	var v PaymentCancelPaypayResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCancelPaypayResponsePayType) SetTo(v PaymentCancelPaypayResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCancelPaypayResponsePayType) Get() (v PaymentCancelPaypayResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCancelPaypayResponsePayType) Or(d PaymentCancelPaypayResponsePayType) PaymentCancelPaypayResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCancelPaypayResponseStatus returns new OptPaymentCancelPaypayResponseStatus with value set to v.
func NewOptPaymentCancelPaypayResponseStatus(v PaymentCancelPaypayResponseStatus) OptPaymentCancelPaypayResponseStatus {
	return OptPaymentCancelPaypayResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCancelPaypayResponseStatus is optional PaymentCancelPaypayResponseStatus.
type OptPaymentCancelPaypayResponseStatus struct {
	Value PaymentCancelPaypayResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentCancelPaypayResponseStatus was set.
func (o OptPaymentCancelPaypayResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCancelPaypayResponseStatus) Reset() {
	var v PaymentCancelPaypayResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCancelPaypayResponseStatus) SetTo(v PaymentCancelPaypayResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCancelPaypayResponseStatus) Get() (v PaymentCancelPaypayResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCancelPaypayResponseStatus) Or(d PaymentCancelPaypayResponseStatus) PaymentCancelPaypayResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCaptureCardMethod returns new OptPaymentCaptureCardMethod with value set to v.
func NewOptPaymentCaptureCardMethod(v PaymentCaptureCardMethod) OptPaymentCaptureCardMethod {
	return OptPaymentCaptureCardMethod{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCaptureCardMethod is optional PaymentCaptureCardMethod.
type OptPaymentCaptureCardMethod struct {
	Value PaymentCaptureCardMethod
	Set   bool
}

// IsSet returns true if OptPaymentCaptureCardMethod was set.
func (o OptPaymentCaptureCardMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCaptureCardMethod) Reset() {
	var v PaymentCaptureCardMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCaptureCardMethod) SetTo(v PaymentCaptureCardMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCaptureCardMethod) Get() (v PaymentCaptureCardMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCaptureCardMethod) Or(d PaymentCaptureCardMethod) PaymentCaptureCardMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCaptureCardPayTimes returns new OptPaymentCaptureCardPayTimes with value set to v.
func NewOptPaymentCaptureCardPayTimes(v PaymentCaptureCardPayTimes) OptPaymentCaptureCardPayTimes {
	return OptPaymentCaptureCardPayTimes{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCaptureCardPayTimes is optional PaymentCaptureCardPayTimes.
type OptPaymentCaptureCardPayTimes struct {
	Value PaymentCaptureCardPayTimes
	Set   bool
}

// IsSet returns true if OptPaymentCaptureCardPayTimes was set.
func (o OptPaymentCaptureCardPayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCaptureCardPayTimes) Reset() {
	var v PaymentCaptureCardPayTimes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCaptureCardPayTimes) SetTo(v PaymentCaptureCardPayTimes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCaptureCardPayTimes) Get() (v PaymentCaptureCardPayTimes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCaptureCardPayTimes) Or(d PaymentCaptureCardPayTimes) PaymentCaptureCardPayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCaptureCardResponseJobCode returns new OptPaymentCaptureCardResponseJobCode with value set to v.
func NewOptPaymentCaptureCardResponseJobCode(v PaymentCaptureCardResponseJobCode) OptPaymentCaptureCardResponseJobCode {
	return OptPaymentCaptureCardResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCaptureCardResponseJobCode is optional PaymentCaptureCardResponseJobCode.
type OptPaymentCaptureCardResponseJobCode struct {
	Value PaymentCaptureCardResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentCaptureCardResponseJobCode was set.
func (o OptPaymentCaptureCardResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCaptureCardResponseJobCode) Reset() {
	var v PaymentCaptureCardResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCaptureCardResponseJobCode) SetTo(v PaymentCaptureCardResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCaptureCardResponseJobCode) Get() (v PaymentCaptureCardResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCaptureCardResponseJobCode) Or(d PaymentCaptureCardResponseJobCode) PaymentCaptureCardResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCaptureCardResponsePayType returns new OptPaymentCaptureCardResponsePayType with value set to v.
func NewOptPaymentCaptureCardResponsePayType(v PaymentCaptureCardResponsePayType) OptPaymentCaptureCardResponsePayType {
	return OptPaymentCaptureCardResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCaptureCardResponsePayType is optional PaymentCaptureCardResponsePayType.
type OptPaymentCaptureCardResponsePayType struct {
	Value PaymentCaptureCardResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentCaptureCardResponsePayType was set.
func (o OptPaymentCaptureCardResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCaptureCardResponsePayType) Reset() {
	var v PaymentCaptureCardResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCaptureCardResponsePayType) SetTo(v PaymentCaptureCardResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCaptureCardResponsePayType) Get() (v PaymentCaptureCardResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCaptureCardResponsePayType) Or(d PaymentCaptureCardResponsePayType) PaymentCaptureCardResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCaptureCardResponseStatus returns new OptPaymentCaptureCardResponseStatus with value set to v.
func NewOptPaymentCaptureCardResponseStatus(v PaymentCaptureCardResponseStatus) OptPaymentCaptureCardResponseStatus {
	return OptPaymentCaptureCardResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCaptureCardResponseStatus is optional PaymentCaptureCardResponseStatus.
type OptPaymentCaptureCardResponseStatus struct {
	Value PaymentCaptureCardResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentCaptureCardResponseStatus was set.
func (o OptPaymentCaptureCardResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCaptureCardResponseStatus) Reset() {
	var v PaymentCaptureCardResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCaptureCardResponseStatus) SetTo(v PaymentCaptureCardResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCaptureCardResponseStatus) Get() (v PaymentCaptureCardResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCaptureCardResponseStatus) Or(d PaymentCaptureCardResponseStatus) PaymentCaptureCardResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCardResponseJobCode returns new OptPaymentCardResponseJobCode with value set to v.
func NewOptPaymentCardResponseJobCode(v PaymentCardResponseJobCode) OptPaymentCardResponseJobCode {
	return OptPaymentCardResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCardResponseJobCode is optional PaymentCardResponseJobCode.
type OptPaymentCardResponseJobCode struct {
	Value PaymentCardResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentCardResponseJobCode was set.
func (o OptPaymentCardResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCardResponseJobCode) Reset() {
	var v PaymentCardResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCardResponseJobCode) SetTo(v PaymentCardResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCardResponseJobCode) Get() (v PaymentCardResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCardResponseJobCode) Or(d PaymentCardResponseJobCode) PaymentCardResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCardResponsePayType returns new OptPaymentCardResponsePayType with value set to v.
func NewOptPaymentCardResponsePayType(v PaymentCardResponsePayType) OptPaymentCardResponsePayType {
	return OptPaymentCardResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCardResponsePayType is optional PaymentCardResponsePayType.
type OptPaymentCardResponsePayType struct {
	Value PaymentCardResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentCardResponsePayType was set.
func (o OptPaymentCardResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCardResponsePayType) Reset() {
	var v PaymentCardResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCardResponsePayType) SetTo(v PaymentCardResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCardResponsePayType) Get() (v PaymentCardResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCardResponsePayType) Or(d PaymentCardResponsePayType) PaymentCardResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCardResponseStatus returns new OptPaymentCardResponseStatus with value set to v.
func NewOptPaymentCardResponseStatus(v PaymentCardResponseStatus) OptPaymentCardResponseStatus {
	return OptPaymentCardResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCardResponseStatus is optional PaymentCardResponseStatus.
type OptPaymentCardResponseStatus struct {
	Value PaymentCardResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentCardResponseStatus was set.
func (o OptPaymentCardResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCardResponseStatus) Reset() {
	var v PaymentCardResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCardResponseStatus) SetTo(v PaymentCardResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCardResponseStatus) Get() (v PaymentCardResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCardResponseStatus) Or(d PaymentCardResponseStatus) PaymentCardResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentCardTdsType returns new OptPaymentCardTdsType with value set to v.
func NewOptPaymentCardTdsType(v PaymentCardTdsType) OptPaymentCardTdsType {
	return OptPaymentCardTdsType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentCardTdsType is optional PaymentCardTdsType.
type OptPaymentCardTdsType struct {
	Value PaymentCardTdsType
	Set   bool
}

// IsSet returns true if OptPaymentCardTdsType was set.
func (o OptPaymentCardTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentCardTdsType) Reset() {
	var v PaymentCardTdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentCardTdsType) SetTo(v PaymentCardTdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentCardTdsType) Get() (v PaymentCardTdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentCardTdsType) Or(d PaymentCardTdsType) PaymentCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDirectdebitResponsePayType returns new OptPaymentDirectdebitResponsePayType with value set to v.
func NewOptPaymentDirectdebitResponsePayType(v PaymentDirectdebitResponsePayType) OptPaymentDirectdebitResponsePayType {
	return OptPaymentDirectdebitResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDirectdebitResponsePayType is optional PaymentDirectdebitResponsePayType.
type OptPaymentDirectdebitResponsePayType struct {
	Value PaymentDirectdebitResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentDirectdebitResponsePayType was set.
func (o OptPaymentDirectdebitResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDirectdebitResponsePayType) Reset() {
	var v PaymentDirectdebitResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDirectdebitResponsePayType) SetTo(v PaymentDirectdebitResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDirectdebitResponsePayType) Get() (v PaymentDirectdebitResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDirectdebitResponsePayType) Or(d PaymentDirectdebitResponsePayType) PaymentDirectdebitResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDirectdebitResponseResultCode returns new OptPaymentDirectdebitResponseResultCode with value set to v.
func NewOptPaymentDirectdebitResponseResultCode(v PaymentDirectdebitResponseResultCode) OptPaymentDirectdebitResponseResultCode {
	return OptPaymentDirectdebitResponseResultCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDirectdebitResponseResultCode is optional PaymentDirectdebitResponseResultCode.
type OptPaymentDirectdebitResponseResultCode struct {
	Value PaymentDirectdebitResponseResultCode
	Set   bool
}

// IsSet returns true if OptPaymentDirectdebitResponseResultCode was set.
func (o OptPaymentDirectdebitResponseResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDirectdebitResponseResultCode) Reset() {
	var v PaymentDirectdebitResponseResultCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDirectdebitResponseResultCode) SetTo(v PaymentDirectdebitResponseResultCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDirectdebitResponseResultCode) Get() (v PaymentDirectdebitResponseResultCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDirectdebitResponseResultCode) Or(d PaymentDirectdebitResponseResultCode) PaymentDirectdebitResponseResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDirectdebitResponseStatus returns new OptPaymentDirectdebitResponseStatus with value set to v.
func NewOptPaymentDirectdebitResponseStatus(v PaymentDirectdebitResponseStatus) OptPaymentDirectdebitResponseStatus {
	return OptPaymentDirectdebitResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDirectdebitResponseStatus is optional PaymentDirectdebitResponseStatus.
type OptPaymentDirectdebitResponseStatus struct {
	Value PaymentDirectdebitResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentDirectdebitResponseStatus was set.
func (o OptPaymentDirectdebitResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDirectdebitResponseStatus) Reset() {
	var v PaymentDirectdebitResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDirectdebitResponseStatus) SetTo(v PaymentDirectdebitResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDirectdebitResponseStatus) Get() (v PaymentDirectdebitResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDirectdebitResponseStatus) Or(d PaymentDirectdebitResponseStatus) PaymentDirectdebitResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoCardResponseJobCode returns new OptPaymentDoCardResponseJobCode with value set to v.
func NewOptPaymentDoCardResponseJobCode(v PaymentDoCardResponseJobCode) OptPaymentDoCardResponseJobCode {
	return OptPaymentDoCardResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoCardResponseJobCode is optional PaymentDoCardResponseJobCode.
type OptPaymentDoCardResponseJobCode struct {
	Value PaymentDoCardResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentDoCardResponseJobCode was set.
func (o OptPaymentDoCardResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoCardResponseJobCode) Reset() {
	var v PaymentDoCardResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoCardResponseJobCode) SetTo(v PaymentDoCardResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoCardResponseJobCode) Get() (v PaymentDoCardResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoCardResponseJobCode) Or(d PaymentDoCardResponseJobCode) PaymentDoCardResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoCardResponsePayType returns new OptPaymentDoCardResponsePayType with value set to v.
func NewOptPaymentDoCardResponsePayType(v PaymentDoCardResponsePayType) OptPaymentDoCardResponsePayType {
	return OptPaymentDoCardResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoCardResponsePayType is optional PaymentDoCardResponsePayType.
type OptPaymentDoCardResponsePayType struct {
	Value PaymentDoCardResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentDoCardResponsePayType was set.
func (o OptPaymentDoCardResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoCardResponsePayType) Reset() {
	var v PaymentDoCardResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoCardResponsePayType) SetTo(v PaymentDoCardResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoCardResponsePayType) Get() (v PaymentDoCardResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoCardResponsePayType) Or(d PaymentDoCardResponsePayType) PaymentDoCardResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoCardResponseStatus returns new OptPaymentDoCardResponseStatus with value set to v.
func NewOptPaymentDoCardResponseStatus(v PaymentDoCardResponseStatus) OptPaymentDoCardResponseStatus {
	return OptPaymentDoCardResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoCardResponseStatus is optional PaymentDoCardResponseStatus.
type OptPaymentDoCardResponseStatus struct {
	Value PaymentDoCardResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentDoCardResponseStatus was set.
func (o OptPaymentDoCardResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoCardResponseStatus) Reset() {
	var v PaymentDoCardResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoCardResponseStatus) SetTo(v PaymentDoCardResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoCardResponseStatus) Get() (v PaymentDoCardResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoCardResponseStatus) Or(d PaymentDoCardResponseStatus) PaymentDoCardResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoCardWith3DSecureMethod returns new OptPaymentDoCardWith3DSecureMethod with value set to v.
func NewOptPaymentDoCardWith3DSecureMethod(v PaymentDoCardWith3DSecureMethod) OptPaymentDoCardWith3DSecureMethod {
	return OptPaymentDoCardWith3DSecureMethod{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoCardWith3DSecureMethod is optional PaymentDoCardWith3DSecureMethod.
type OptPaymentDoCardWith3DSecureMethod struct {
	Value PaymentDoCardWith3DSecureMethod
	Set   bool
}

// IsSet returns true if OptPaymentDoCardWith3DSecureMethod was set.
func (o OptPaymentDoCardWith3DSecureMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoCardWith3DSecureMethod) Reset() {
	var v PaymentDoCardWith3DSecureMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoCardWith3DSecureMethod) SetTo(v PaymentDoCardWith3DSecureMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoCardWith3DSecureMethod) Get() (v PaymentDoCardWith3DSecureMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoCardWith3DSecureMethod) Or(d PaymentDoCardWith3DSecureMethod) PaymentDoCardWith3DSecureMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoCardWithout3DSecureMethod returns new OptPaymentDoCardWithout3DSecureMethod with value set to v.
func NewOptPaymentDoCardWithout3DSecureMethod(v PaymentDoCardWithout3DSecureMethod) OptPaymentDoCardWithout3DSecureMethod {
	return OptPaymentDoCardWithout3DSecureMethod{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoCardWithout3DSecureMethod is optional PaymentDoCardWithout3DSecureMethod.
type OptPaymentDoCardWithout3DSecureMethod struct {
	Value PaymentDoCardWithout3DSecureMethod
	Set   bool
}

// IsSet returns true if OptPaymentDoCardWithout3DSecureMethod was set.
func (o OptPaymentDoCardWithout3DSecureMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoCardWithout3DSecureMethod) Reset() {
	var v PaymentDoCardWithout3DSecureMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoCardWithout3DSecureMethod) SetTo(v PaymentDoCardWithout3DSecureMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoCardWithout3DSecureMethod) Get() (v PaymentDoCardWithout3DSecureMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoCardWithout3DSecureMethod) Or(d PaymentDoCardWithout3DSecureMethod) PaymentDoCardWithout3DSecureMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoPaypayRedirectType returns new OptPaymentDoPaypayRedirectType with value set to v.
func NewOptPaymentDoPaypayRedirectType(v PaymentDoPaypayRedirectType) OptPaymentDoPaypayRedirectType {
	return OptPaymentDoPaypayRedirectType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoPaypayRedirectType is optional PaymentDoPaypayRedirectType.
type OptPaymentDoPaypayRedirectType struct {
	Value PaymentDoPaypayRedirectType
	Set   bool
}

// IsSet returns true if OptPaymentDoPaypayRedirectType was set.
func (o OptPaymentDoPaypayRedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoPaypayRedirectType) Reset() {
	var v PaymentDoPaypayRedirectType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoPaypayRedirectType) SetTo(v PaymentDoPaypayRedirectType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoPaypayRedirectType) Get() (v PaymentDoPaypayRedirectType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoPaypayRedirectType) Or(d PaymentDoPaypayRedirectType) PaymentDoPaypayRedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoPaypayResponseJobCode returns new OptPaymentDoPaypayResponseJobCode with value set to v.
func NewOptPaymentDoPaypayResponseJobCode(v PaymentDoPaypayResponseJobCode) OptPaymentDoPaypayResponseJobCode {
	return OptPaymentDoPaypayResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoPaypayResponseJobCode is optional PaymentDoPaypayResponseJobCode.
type OptPaymentDoPaypayResponseJobCode struct {
	Value PaymentDoPaypayResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentDoPaypayResponseJobCode was set.
func (o OptPaymentDoPaypayResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoPaypayResponseJobCode) Reset() {
	var v PaymentDoPaypayResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoPaypayResponseJobCode) SetTo(v PaymentDoPaypayResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoPaypayResponseJobCode) Get() (v PaymentDoPaypayResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoPaypayResponseJobCode) Or(d PaymentDoPaypayResponseJobCode) PaymentDoPaypayResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoPaypayResponsePayType returns new OptPaymentDoPaypayResponsePayType with value set to v.
func NewOptPaymentDoPaypayResponsePayType(v PaymentDoPaypayResponsePayType) OptPaymentDoPaypayResponsePayType {
	return OptPaymentDoPaypayResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoPaypayResponsePayType is optional PaymentDoPaypayResponsePayType.
type OptPaymentDoPaypayResponsePayType struct {
	Value PaymentDoPaypayResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentDoPaypayResponsePayType was set.
func (o OptPaymentDoPaypayResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoPaypayResponsePayType) Reset() {
	var v PaymentDoPaypayResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoPaypayResponsePayType) SetTo(v PaymentDoPaypayResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoPaypayResponsePayType) Get() (v PaymentDoPaypayResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoPaypayResponsePayType) Or(d PaymentDoPaypayResponsePayType) PaymentDoPaypayResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentDoPaypayResponseStatus returns new OptPaymentDoPaypayResponseStatus with value set to v.
func NewOptPaymentDoPaypayResponseStatus(v PaymentDoPaypayResponseStatus) OptPaymentDoPaypayResponseStatus {
	return OptPaymentDoPaypayResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentDoPaypayResponseStatus is optional PaymentDoPaypayResponseStatus.
type OptPaymentDoPaypayResponseStatus struct {
	Value PaymentDoPaypayResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentDoPaypayResponseStatus was set.
func (o OptPaymentDoPaypayResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentDoPaypayResponseStatus) Reset() {
	var v PaymentDoPaypayResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentDoPaypayResponseStatus) SetTo(v PaymentDoPaypayResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentDoPaypayResponseStatus) Get() (v PaymentDoPaypayResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentDoPaypayResponseStatus) Or(d PaymentDoPaypayResponseStatus) PaymentDoPaypayResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodCardResponseCard returns new OptPaymentMethodCardResponseCard with value set to v.
func NewOptPaymentMethodCardResponseCard(v PaymentMethodCardResponseCard) OptPaymentMethodCardResponseCard {
	return OptPaymentMethodCardResponseCard{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodCardResponseCard is optional PaymentMethodCardResponseCard.
type OptPaymentMethodCardResponseCard struct {
	Value PaymentMethodCardResponseCard
	Set   bool
}

// IsSet returns true if OptPaymentMethodCardResponseCard was set.
func (o OptPaymentMethodCardResponseCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodCardResponseCard) Reset() {
	var v PaymentMethodCardResponseCard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodCardResponseCard) SetTo(v PaymentMethodCardResponseCard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodCardResponseCard) Get() (v PaymentMethodCardResponseCard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodCardResponseCard) Or(d PaymentMethodCardResponseCard) PaymentMethodCardResponseCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodCardResponseCardType returns new OptPaymentMethodCardResponseCardType with value set to v.
func NewOptPaymentMethodCardResponseCardType(v PaymentMethodCardResponseCardType) OptPaymentMethodCardResponseCardType {
	return OptPaymentMethodCardResponseCardType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodCardResponseCardType is optional PaymentMethodCardResponseCardType.
type OptPaymentMethodCardResponseCardType struct {
	Value PaymentMethodCardResponseCardType
	Set   bool
}

// IsSet returns true if OptPaymentMethodCardResponseCardType was set.
func (o OptPaymentMethodCardResponseCardType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodCardResponseCardType) Reset() {
	var v PaymentMethodCardResponseCardType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodCardResponseCardType) SetTo(v PaymentMethodCardResponseCardType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodCardResponseCardType) Get() (v PaymentMethodCardResponseCardType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodCardResponseCardType) Or(d PaymentMethodCardResponseCardType) PaymentMethodCardResponseCardType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodCardResponseDefaultFlag returns new OptPaymentMethodCardResponseDefaultFlag with value set to v.
func NewOptPaymentMethodCardResponseDefaultFlag(v PaymentMethodCardResponseDefaultFlag) OptPaymentMethodCardResponseDefaultFlag {
	return OptPaymentMethodCardResponseDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodCardResponseDefaultFlag is optional PaymentMethodCardResponseDefaultFlag.
type OptPaymentMethodCardResponseDefaultFlag struct {
	Value PaymentMethodCardResponseDefaultFlag
	Set   bool
}

// IsSet returns true if OptPaymentMethodCardResponseDefaultFlag was set.
func (o OptPaymentMethodCardResponseDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodCardResponseDefaultFlag) Reset() {
	var v PaymentMethodCardResponseDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodCardResponseDefaultFlag) SetTo(v PaymentMethodCardResponseDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodCardResponseDefaultFlag) Get() (v PaymentMethodCardResponseDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodCardResponseDefaultFlag) Or(d PaymentMethodCardResponseDefaultFlag) PaymentMethodCardResponseDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodCardResponseStatus returns new OptPaymentMethodCardResponseStatus with value set to v.
func NewOptPaymentMethodCardResponseStatus(v PaymentMethodCardResponseStatus) OptPaymentMethodCardResponseStatus {
	return OptPaymentMethodCardResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodCardResponseStatus is optional PaymentMethodCardResponseStatus.
type OptPaymentMethodCardResponseStatus struct {
	Value PaymentMethodCardResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentMethodCardResponseStatus was set.
func (o OptPaymentMethodCardResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodCardResponseStatus) Reset() {
	var v PaymentMethodCardResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodCardResponseStatus) SetTo(v PaymentMethodCardResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodCardResponseStatus) Get() (v PaymentMethodCardResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodCardResponseStatus) Or(d PaymentMethodCardResponseStatus) PaymentMethodCardResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseDirectdebit returns new OptPaymentMethodDirectDebitResponseDirectdebit with value set to v.
func NewOptPaymentMethodDirectDebitResponseDirectdebit(v PaymentMethodDirectDebitResponseDirectdebit) OptPaymentMethodDirectDebitResponseDirectdebit {
	return OptPaymentMethodDirectDebitResponseDirectdebit{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseDirectdebit is optional PaymentMethodDirectDebitResponseDirectdebit.
type OptPaymentMethodDirectDebitResponseDirectdebit struct {
	Value PaymentMethodDirectDebitResponseDirectdebit
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseDirectdebit was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseDirectdebit) Reset() {
	var v PaymentMethodDirectDebitResponseDirectdebit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseDirectdebit) SetTo(v PaymentMethodDirectDebitResponseDirectdebit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebit) Get() (v PaymentMethodDirectDebitResponseDirectdebit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseDirectdebit) Or(d PaymentMethodDirectDebitResponseDirectdebit) PaymentMethodDirectDebitResponseDirectdebit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseDirectdebitAccountType returns new OptPaymentMethodDirectDebitResponseDirectdebitAccountType with value set to v.
func NewOptPaymentMethodDirectDebitResponseDirectdebitAccountType(v PaymentMethodDirectDebitResponseDirectdebitAccountType) OptPaymentMethodDirectDebitResponseDirectdebitAccountType {
	return OptPaymentMethodDirectDebitResponseDirectdebitAccountType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseDirectdebitAccountType is optional PaymentMethodDirectDebitResponseDirectdebitAccountType.
type OptPaymentMethodDirectDebitResponseDirectdebitAccountType struct {
	Value PaymentMethodDirectDebitResponseDirectdebitAccountType
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseDirectdebitAccountType was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitAccountType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitAccountType) Reset() {
	var v PaymentMethodDirectDebitResponseDirectdebitAccountType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitAccountType) SetTo(v PaymentMethodDirectDebitResponseDirectdebitAccountType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitAccountType) Get() (v PaymentMethodDirectDebitResponseDirectdebitAccountType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseDirectdebitAccountType) Or(d PaymentMethodDirectDebitResponseDirectdebitAccountType) PaymentMethodDirectDebitResponseDirectdebitAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseDirectdebitApplicationType returns new OptPaymentMethodDirectDebitResponseDirectdebitApplicationType with value set to v.
func NewOptPaymentMethodDirectDebitResponseDirectdebitApplicationType(v PaymentMethodDirectDebitResponseDirectdebitApplicationType) OptPaymentMethodDirectDebitResponseDirectdebitApplicationType {
	return OptPaymentMethodDirectDebitResponseDirectdebitApplicationType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseDirectdebitApplicationType is optional PaymentMethodDirectDebitResponseDirectdebitApplicationType.
type OptPaymentMethodDirectDebitResponseDirectdebitApplicationType struct {
	Value PaymentMethodDirectDebitResponseDirectdebitApplicationType
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseDirectdebitApplicationType was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitApplicationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitApplicationType) Reset() {
	var v PaymentMethodDirectDebitResponseDirectdebitApplicationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitApplicationType) SetTo(v PaymentMethodDirectDebitResponseDirectdebitApplicationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitApplicationType) Get() (v PaymentMethodDirectDebitResponseDirectdebitApplicationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseDirectdebitApplicationType) Or(d PaymentMethodDirectDebitResponseDirectdebitApplicationType) PaymentMethodDirectDebitResponseDirectdebitApplicationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseDirectdebitBankType returns new OptPaymentMethodDirectDebitResponseDirectdebitBankType with value set to v.
func NewOptPaymentMethodDirectDebitResponseDirectdebitBankType(v PaymentMethodDirectDebitResponseDirectdebitBankType) OptPaymentMethodDirectDebitResponseDirectdebitBankType {
	return OptPaymentMethodDirectDebitResponseDirectdebitBankType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseDirectdebitBankType is optional PaymentMethodDirectDebitResponseDirectdebitBankType.
type OptPaymentMethodDirectDebitResponseDirectdebitBankType struct {
	Value PaymentMethodDirectDebitResponseDirectdebitBankType
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseDirectdebitBankType was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitBankType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitBankType) Reset() {
	var v PaymentMethodDirectDebitResponseDirectdebitBankType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitBankType) SetTo(v PaymentMethodDirectDebitResponseDirectdebitBankType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitBankType) Get() (v PaymentMethodDirectDebitResponseDirectdebitBankType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseDirectdebitBankType) Or(d PaymentMethodDirectDebitResponseDirectdebitBankType) PaymentMethodDirectDebitResponseDirectdebitBankType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseDirectdebitLastResultCode returns new OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode with value set to v.
func NewOptPaymentMethodDirectDebitResponseDirectdebitLastResultCode(v PaymentMethodDirectDebitResponseDirectdebitLastResultCode) OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode {
	return OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode is optional PaymentMethodDirectDebitResponseDirectdebitLastResultCode.
type OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode struct {
	Value PaymentMethodDirectDebitResponseDirectdebitLastResultCode
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode) Reset() {
	var v PaymentMethodDirectDebitResponseDirectdebitLastResultCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode) SetTo(v PaymentMethodDirectDebitResponseDirectdebitLastResultCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode) Get() (v PaymentMethodDirectDebitResponseDirectdebitLastResultCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode) Or(d PaymentMethodDirectDebitResponseDirectdebitLastResultCode) PaymentMethodDirectDebitResponseDirectdebitLastResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseDirectdebitPaperApplication returns new OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication with value set to v.
func NewOptPaymentMethodDirectDebitResponseDirectdebitPaperApplication(v PaymentMethodDirectDebitResponseDirectdebitPaperApplication) OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication {
	return OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication is optional PaymentMethodDirectDebitResponseDirectdebitPaperApplication.
type OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication struct {
	Value PaymentMethodDirectDebitResponseDirectdebitPaperApplication
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication) Reset() {
	var v PaymentMethodDirectDebitResponseDirectdebitPaperApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication) SetTo(v PaymentMethodDirectDebitResponseDirectdebitPaperApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication) Get() (v PaymentMethodDirectDebitResponseDirectdebitPaperApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication) Or(d PaymentMethodDirectDebitResponseDirectdebitPaperApplication) PaymentMethodDirectDebitResponseDirectdebitPaperApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponsePayType returns new OptPaymentMethodDirectDebitResponsePayType with value set to v.
func NewOptPaymentMethodDirectDebitResponsePayType(v PaymentMethodDirectDebitResponsePayType) OptPaymentMethodDirectDebitResponsePayType {
	return OptPaymentMethodDirectDebitResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponsePayType is optional PaymentMethodDirectDebitResponsePayType.
type OptPaymentMethodDirectDebitResponsePayType struct {
	Value PaymentMethodDirectDebitResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponsePayType was set.
func (o OptPaymentMethodDirectDebitResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponsePayType) Reset() {
	var v PaymentMethodDirectDebitResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponsePayType) SetTo(v PaymentMethodDirectDebitResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponsePayType) Get() (v PaymentMethodDirectDebitResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponsePayType) Or(d PaymentMethodDirectDebitResponsePayType) PaymentMethodDirectDebitResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag returns new OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag with value set to v.
func NewOptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag(v PaymentMethodDirectDebitResponseRedirectURLAccessedFlag) OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag {
	return OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag is optional PaymentMethodDirectDebitResponseRedirectURLAccessedFlag.
type OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag struct {
	Value PaymentMethodDirectDebitResponseRedirectURLAccessedFlag
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag was set.
func (o OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag) Reset() {
	var v PaymentMethodDirectDebitResponseRedirectURLAccessedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag) SetTo(v PaymentMethodDirectDebitResponseRedirectURLAccessedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag) Get() (v PaymentMethodDirectDebitResponseRedirectURLAccessedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag) Or(d PaymentMethodDirectDebitResponseRedirectURLAccessedFlag) PaymentMethodDirectDebitResponseRedirectURLAccessedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDirectDebitResponseStatus returns new OptPaymentMethodDirectDebitResponseStatus with value set to v.
func NewOptPaymentMethodDirectDebitResponseStatus(v PaymentMethodDirectDebitResponseStatus) OptPaymentMethodDirectDebitResponseStatus {
	return OptPaymentMethodDirectDebitResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDirectDebitResponseStatus is optional PaymentMethodDirectDebitResponseStatus.
type OptPaymentMethodDirectDebitResponseStatus struct {
	Value PaymentMethodDirectDebitResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentMethodDirectDebitResponseStatus was set.
func (o OptPaymentMethodDirectDebitResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDirectDebitResponseStatus) Reset() {
	var v PaymentMethodDirectDebitResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDirectDebitResponseStatus) SetTo(v PaymentMethodDirectDebitResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDirectDebitResponseStatus) Get() (v PaymentMethodDirectDebitResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDirectDebitResponseStatus) Or(d PaymentMethodDirectDebitResponseStatus) PaymentMethodDirectDebitResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentPaypayResponseJobCode returns new OptPaymentPaypayResponseJobCode with value set to v.
func NewOptPaymentPaypayResponseJobCode(v PaymentPaypayResponseJobCode) OptPaymentPaypayResponseJobCode {
	return OptPaymentPaypayResponseJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentPaypayResponseJobCode is optional PaymentPaypayResponseJobCode.
type OptPaymentPaypayResponseJobCode struct {
	Value PaymentPaypayResponseJobCode
	Set   bool
}

// IsSet returns true if OptPaymentPaypayResponseJobCode was set.
func (o OptPaymentPaypayResponseJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentPaypayResponseJobCode) Reset() {
	var v PaymentPaypayResponseJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentPaypayResponseJobCode) SetTo(v PaymentPaypayResponseJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentPaypayResponseJobCode) Get() (v PaymentPaypayResponseJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentPaypayResponseJobCode) Or(d PaymentPaypayResponseJobCode) PaymentPaypayResponseJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentPaypayResponsePayType returns new OptPaymentPaypayResponsePayType with value set to v.
func NewOptPaymentPaypayResponsePayType(v PaymentPaypayResponsePayType) OptPaymentPaypayResponsePayType {
	return OptPaymentPaypayResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentPaypayResponsePayType is optional PaymentPaypayResponsePayType.
type OptPaymentPaypayResponsePayType struct {
	Value PaymentPaypayResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentPaypayResponsePayType was set.
func (o OptPaymentPaypayResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentPaypayResponsePayType) Reset() {
	var v PaymentPaypayResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentPaypayResponsePayType) SetTo(v PaymentPaypayResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentPaypayResponsePayType) Get() (v PaymentPaypayResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentPaypayResponsePayType) Or(d PaymentPaypayResponsePayType) PaymentPaypayResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentPaypayResponseStatus returns new OptPaymentPaypayResponseStatus with value set to v.
func NewOptPaymentPaypayResponseStatus(v PaymentPaypayResponseStatus) OptPaymentPaypayResponseStatus {
	return OptPaymentPaypayResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentPaypayResponseStatus is optional PaymentPaypayResponseStatus.
type OptPaymentPaypayResponseStatus struct {
	Value PaymentPaypayResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentPaypayResponseStatus was set.
func (o OptPaymentPaypayResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentPaypayResponseStatus) Reset() {
	var v PaymentPaypayResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentPaypayResponseStatus) SetTo(v PaymentPaypayResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentPaypayResponseStatus) Get() (v PaymentPaypayResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentPaypayResponseStatus) Or(d PaymentPaypayResponseStatus) PaymentPaypayResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/paymentAuthCard
type PaymentAuthCard struct {
	PayType  PaymentAuthCardPayType     `json:"pay_type"`
	AccessID string                     `json:"access_id"`
	Method   PaymentAuthCardMethod      `json:"method"`
	PayTimes OptPaymentAuthCardPayTimes `json:"pay_times"`
}

// GetPayType returns the value of PayType.
func (s *PaymentAuthCard) GetPayType() PaymentAuthCardPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *PaymentAuthCard) GetAccessID() string {
	return s.AccessID
}

// GetMethod returns the value of Method.
func (s *PaymentAuthCard) GetMethod() PaymentAuthCardMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentAuthCard) GetPayTimes() OptPaymentAuthCardPayTimes {
	return s.PayTimes
}

// SetPayType sets the value of PayType.
func (s *PaymentAuthCard) SetPayType(val PaymentAuthCardPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentAuthCard) SetAccessID(val string) {
	s.AccessID = val
}

// SetMethod sets the value of Method.
func (s *PaymentAuthCard) SetMethod(val PaymentAuthCardMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentAuthCard) SetPayTimes(val OptPaymentAuthCardPayTimes) {
	s.PayTimes = val
}

type PaymentAuthCardMethod string

const (
	PaymentAuthCardMethod1 PaymentAuthCardMethod = "1"
	PaymentAuthCardMethod2 PaymentAuthCardMethod = "2"
	PaymentAuthCardMethod5 PaymentAuthCardMethod = "5"
)

// AllValues returns all PaymentAuthCardMethod values.
func (PaymentAuthCardMethod) AllValues() []PaymentAuthCardMethod {
	return []PaymentAuthCardMethod{
		PaymentAuthCardMethod1,
		PaymentAuthCardMethod2,
		PaymentAuthCardMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardMethod1:
		return []byte(s), nil
	case PaymentAuthCardMethod2:
		return []byte(s), nil
	case PaymentAuthCardMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardMethod) UnmarshalText(data []byte) error {
	switch PaymentAuthCardMethod(data) {
	case PaymentAuthCardMethod1:
		*s = PaymentAuthCardMethod1
		return nil
	case PaymentAuthCardMethod2:
		*s = PaymentAuthCardMethod2
		return nil
	case PaymentAuthCardMethod5:
		*s = PaymentAuthCardMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardPayTimes string

const (
	PaymentAuthCardPayTimes3  PaymentAuthCardPayTimes = "3"
	PaymentAuthCardPayTimes5  PaymentAuthCardPayTimes = "5"
	PaymentAuthCardPayTimes6  PaymentAuthCardPayTimes = "6"
	PaymentAuthCardPayTimes10 PaymentAuthCardPayTimes = "10"
	PaymentAuthCardPayTimes12 PaymentAuthCardPayTimes = "12"
	PaymentAuthCardPayTimes15 PaymentAuthCardPayTimes = "15"
	PaymentAuthCardPayTimes18 PaymentAuthCardPayTimes = "18"
	PaymentAuthCardPayTimes20 PaymentAuthCardPayTimes = "20"
	PaymentAuthCardPayTimes24 PaymentAuthCardPayTimes = "24"
)

// AllValues returns all PaymentAuthCardPayTimes values.
func (PaymentAuthCardPayTimes) AllValues() []PaymentAuthCardPayTimes {
	return []PaymentAuthCardPayTimes{
		PaymentAuthCardPayTimes3,
		PaymentAuthCardPayTimes5,
		PaymentAuthCardPayTimes6,
		PaymentAuthCardPayTimes10,
		PaymentAuthCardPayTimes12,
		PaymentAuthCardPayTimes15,
		PaymentAuthCardPayTimes18,
		PaymentAuthCardPayTimes20,
		PaymentAuthCardPayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardPayTimes) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardPayTimes3:
		return []byte(s), nil
	case PaymentAuthCardPayTimes5:
		return []byte(s), nil
	case PaymentAuthCardPayTimes6:
		return []byte(s), nil
	case PaymentAuthCardPayTimes10:
		return []byte(s), nil
	case PaymentAuthCardPayTimes12:
		return []byte(s), nil
	case PaymentAuthCardPayTimes15:
		return []byte(s), nil
	case PaymentAuthCardPayTimes18:
		return []byte(s), nil
	case PaymentAuthCardPayTimes20:
		return []byte(s), nil
	case PaymentAuthCardPayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardPayTimes) UnmarshalText(data []byte) error {
	switch PaymentAuthCardPayTimes(data) {
	case PaymentAuthCardPayTimes3:
		*s = PaymentAuthCardPayTimes3
		return nil
	case PaymentAuthCardPayTimes5:
		*s = PaymentAuthCardPayTimes5
		return nil
	case PaymentAuthCardPayTimes6:
		*s = PaymentAuthCardPayTimes6
		return nil
	case PaymentAuthCardPayTimes10:
		*s = PaymentAuthCardPayTimes10
		return nil
	case PaymentAuthCardPayTimes12:
		*s = PaymentAuthCardPayTimes12
		return nil
	case PaymentAuthCardPayTimes15:
		*s = PaymentAuthCardPayTimes15
		return nil
	case PaymentAuthCardPayTimes18:
		*s = PaymentAuthCardPayTimes18
		return nil
	case PaymentAuthCardPayTimes20:
		*s = PaymentAuthCardPayTimes20
		return nil
	case PaymentAuthCardPayTimes24:
		*s = PaymentAuthCardPayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardPayType string

const (
	PaymentAuthCardPayTypeCard PaymentAuthCardPayType = "Card"
)

// AllValues returns all PaymentAuthCardPayType values.
func (PaymentAuthCardPayType) AllValues() []PaymentAuthCardPayType {
	return []PaymentAuthCardPayType{
		PaymentAuthCardPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardPayType) UnmarshalText(data []byte) error {
	switch PaymentAuthCardPayType(data) {
	case PaymentAuthCardPayTypeCard:
		*s = PaymentAuthCardPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentAuthCardResponse
type PaymentAuthCardResponse struct {
	ShopID          OptString                               `json:"shop_id"`
	ID              OptString                               `json:"id"`
	PayType         OptPaymentAuthCardResponsePayType       `json:"pay_type"`
	Status          OptPaymentAuthCardResponseStatus        `json:"status"`
	AccessID        OptString                               `json:"access_id"`
	ProcessDate     OptString                               `json:"process_date"`
	JobCode         OptPaymentAuthCardResponseJobCode       `json:"job_code"`
	ItemCode        OptString                               `json:"item_code"`
	Amount          OptInt                                  `json:"amount"`
	Tax             OptInt                                  `json:"tax"`
	TotalAmount     OptInt                                  `json:"total_amount"`
	CustomerGroupID OptNilString                            `json:"customer_group_id"`
	CustomerID      OptNilString                            `json:"customer_id"`
	CardNo          OptNilString                            `json:"card_no"`
	CardID          OptNilString                            `json:"card_id"`
	Expire          OptNilString                            `json:"expire"`
	HolderName      OptNilString                            `json:"holder_name"`
	CardNoHash      OptNilString                            `json:"card_no_hash"`
	Method          OptNilPaymentAuthCardResponseMethod     `json:"method"`
	PayTimes        OptNilString                            `json:"pay_times"`
	Forward         OptNilString                            `json:"forward"`
	Issuer          OptNilString                            `json:"issuer"`
	TransactionID   OptNilString                            `json:"transaction_id"`
	Approve         OptNilString                            `json:"approve"`
	AuthMaxDate     OptNilString                            `json:"auth_max_date"`
	ClientField1    OptNilString                            `json:"client_field_1"`
	ClientField2    OptNilString                            `json:"client_field_2"`
	ClientField3    OptNilString                            `json:"client_field_3"`
	TdsType         OptNilPaymentAuthCardResponseTdsType    `json:"tds_type"`
	Tds2Type        OptNilPaymentAuthCardResponseTds2Type   `json:"tds2_type"`
	Tds2RetURL      OptNilString                            `json:"tds2_ret_url"`
	Tds2Status      OptNilPaymentAuthCardResponseTds2Status `json:"tds2_status"`
	MerchantName    OptNilString                            `json:"merchant_name"`
	SendURL         OptNilString                            `json:"send_url"`
	SubscriptionID  OptNilString                            `json:"subscription_id"`
	Brand           OptString                               `json:"brand"`
	ErrorCode       OptNilString                            `json:"error_code"`
	Created         OptNilString                            `json:"created"`
	Updated         OptNilString                            `json:"updated"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentAuthCardResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentAuthCardResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentAuthCardResponse) GetPayType() OptPaymentAuthCardResponsePayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentAuthCardResponse) GetStatus() OptPaymentAuthCardResponseStatus {
	return s.Status
}

// GetAccessID returns the value of AccessID.
func (s *PaymentAuthCardResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentAuthCardResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetJobCode returns the value of JobCode.
func (s *PaymentAuthCardResponse) GetJobCode() OptPaymentAuthCardResponseJobCode {
	return s.JobCode
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentAuthCardResponse) GetItemCode() OptString {
	return s.ItemCode
}

// GetAmount returns the value of Amount.
func (s *PaymentAuthCardResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentAuthCardResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentAuthCardResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentAuthCardResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentAuthCardResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCardNo returns the value of CardNo.
func (s *PaymentAuthCardResponse) GetCardNo() OptNilString {
	return s.CardNo
}

// GetCardID returns the value of CardID.
func (s *PaymentAuthCardResponse) GetCardID() OptNilString {
	return s.CardID
}

// GetExpire returns the value of Expire.
func (s *PaymentAuthCardResponse) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentAuthCardResponse) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentAuthCardResponse) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *PaymentAuthCardResponse) GetMethod() OptNilPaymentAuthCardResponseMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentAuthCardResponse) GetPayTimes() OptNilString {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *PaymentAuthCardResponse) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *PaymentAuthCardResponse) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *PaymentAuthCardResponse) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *PaymentAuthCardResponse) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentAuthCardResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentAuthCardResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentAuthCardResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentAuthCardResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetTdsType returns the value of TdsType.
func (s *PaymentAuthCardResponse) GetTdsType() OptNilPaymentAuthCardResponseTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentAuthCardResponse) GetTds2Type() OptNilPaymentAuthCardResponseTds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *PaymentAuthCardResponse) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentAuthCardResponse) GetTds2Status() OptNilPaymentAuthCardResponseTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentAuthCardResponse) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetSendURL returns the value of SendURL.
func (s *PaymentAuthCardResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentAuthCardResponse) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetBrand returns the value of Brand.
func (s *PaymentAuthCardResponse) GetBrand() OptString {
	return s.Brand
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentAuthCardResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentAuthCardResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentAuthCardResponse) GetUpdated() OptNilString {
	return s.Updated
}

// SetShopID sets the value of ShopID.
func (s *PaymentAuthCardResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentAuthCardResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentAuthCardResponse) SetPayType(val OptPaymentAuthCardResponsePayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentAuthCardResponse) SetStatus(val OptPaymentAuthCardResponseStatus) {
	s.Status = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentAuthCardResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentAuthCardResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentAuthCardResponse) SetJobCode(val OptPaymentAuthCardResponseJobCode) {
	s.JobCode = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentAuthCardResponse) SetItemCode(val OptString) {
	s.ItemCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentAuthCardResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentAuthCardResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentAuthCardResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentAuthCardResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentAuthCardResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCardNo sets the value of CardNo.
func (s *PaymentAuthCardResponse) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetCardID sets the value of CardID.
func (s *PaymentAuthCardResponse) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetExpire sets the value of Expire.
func (s *PaymentAuthCardResponse) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentAuthCardResponse) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentAuthCardResponse) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *PaymentAuthCardResponse) SetMethod(val OptNilPaymentAuthCardResponseMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentAuthCardResponse) SetPayTimes(val OptNilString) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *PaymentAuthCardResponse) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *PaymentAuthCardResponse) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *PaymentAuthCardResponse) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *PaymentAuthCardResponse) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentAuthCardResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentAuthCardResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentAuthCardResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentAuthCardResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentAuthCardResponse) SetTdsType(val OptNilPaymentAuthCardResponseTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentAuthCardResponse) SetTds2Type(val OptNilPaymentAuthCardResponseTds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *PaymentAuthCardResponse) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentAuthCardResponse) SetTds2Status(val OptNilPaymentAuthCardResponseTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentAuthCardResponse) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetSendURL sets the value of SendURL.
func (s *PaymentAuthCardResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentAuthCardResponse) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetBrand sets the value of Brand.
func (s *PaymentAuthCardResponse) SetBrand(val OptString) {
	s.Brand = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentAuthCardResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentAuthCardResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentAuthCardResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

type PaymentAuthCardResponseJobCode string

const (
	PaymentAuthCardResponseJobCodeCHECK   PaymentAuthCardResponseJobCode = "CHECK"
	PaymentAuthCardResponseJobCodeAUTH    PaymentAuthCardResponseJobCode = "AUTH"
	PaymentAuthCardResponseJobCodeCAPTURE PaymentAuthCardResponseJobCode = "CAPTURE"
	PaymentAuthCardResponseJobCodeSALES   PaymentAuthCardResponseJobCode = "SALES"
	PaymentAuthCardResponseJobCodeCANCEL  PaymentAuthCardResponseJobCode = "CANCEL"
)

// AllValues returns all PaymentAuthCardResponseJobCode values.
func (PaymentAuthCardResponseJobCode) AllValues() []PaymentAuthCardResponseJobCode {
	return []PaymentAuthCardResponseJobCode{
		PaymentAuthCardResponseJobCodeCHECK,
		PaymentAuthCardResponseJobCodeAUTH,
		PaymentAuthCardResponseJobCodeCAPTURE,
		PaymentAuthCardResponseJobCodeSALES,
		PaymentAuthCardResponseJobCodeCANCEL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardResponseJobCodeCHECK:
		return []byte(s), nil
	case PaymentAuthCardResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentAuthCardResponseJobCodeCAPTURE:
		return []byte(s), nil
	case PaymentAuthCardResponseJobCodeSALES:
		return []byte(s), nil
	case PaymentAuthCardResponseJobCodeCANCEL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentAuthCardResponseJobCode(data) {
	case PaymentAuthCardResponseJobCodeCHECK:
		*s = PaymentAuthCardResponseJobCodeCHECK
		return nil
	case PaymentAuthCardResponseJobCodeAUTH:
		*s = PaymentAuthCardResponseJobCodeAUTH
		return nil
	case PaymentAuthCardResponseJobCodeCAPTURE:
		*s = PaymentAuthCardResponseJobCodeCAPTURE
		return nil
	case PaymentAuthCardResponseJobCodeSALES:
		*s = PaymentAuthCardResponseJobCodeSALES
		return nil
	case PaymentAuthCardResponseJobCodeCANCEL:
		*s = PaymentAuthCardResponseJobCodeCANCEL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardResponseMethod string

const (
	PaymentAuthCardResponseMethod1 PaymentAuthCardResponseMethod = "1"
	PaymentAuthCardResponseMethod2 PaymentAuthCardResponseMethod = "2"
	PaymentAuthCardResponseMethod5 PaymentAuthCardResponseMethod = "5"
)

// AllValues returns all PaymentAuthCardResponseMethod values.
func (PaymentAuthCardResponseMethod) AllValues() []PaymentAuthCardResponseMethod {
	return []PaymentAuthCardResponseMethod{
		PaymentAuthCardResponseMethod1,
		PaymentAuthCardResponseMethod2,
		PaymentAuthCardResponseMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardResponseMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardResponseMethod1:
		return []byte(s), nil
	case PaymentAuthCardResponseMethod2:
		return []byte(s), nil
	case PaymentAuthCardResponseMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardResponseMethod) UnmarshalText(data []byte) error {
	switch PaymentAuthCardResponseMethod(data) {
	case PaymentAuthCardResponseMethod1:
		*s = PaymentAuthCardResponseMethod1
		return nil
	case PaymentAuthCardResponseMethod2:
		*s = PaymentAuthCardResponseMethod2
		return nil
	case PaymentAuthCardResponseMethod5:
		*s = PaymentAuthCardResponseMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardResponsePayType string

const (
	PaymentAuthCardResponsePayTypeCard PaymentAuthCardResponsePayType = "Card"
)

// AllValues returns all PaymentAuthCardResponsePayType values.
func (PaymentAuthCardResponsePayType) AllValues() []PaymentAuthCardResponsePayType {
	return []PaymentAuthCardResponsePayType{
		PaymentAuthCardResponsePayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardResponsePayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentAuthCardResponsePayType(data) {
	case PaymentAuthCardResponsePayTypeCard:
		*s = PaymentAuthCardResponsePayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardResponseStatus string

const (
	PaymentAuthCardResponseStatusUNPROCESSED   PaymentAuthCardResponseStatus = "UNPROCESSED"
	PaymentAuthCardResponseStatusCHECKED       PaymentAuthCardResponseStatus = "CHECKED"
	PaymentAuthCardResponseStatusAUTHORIZED    PaymentAuthCardResponseStatus = "AUTHORIZED"
	PaymentAuthCardResponseStatusCAPTURED      PaymentAuthCardResponseStatus = "CAPTURED"
	PaymentAuthCardResponseStatusCANCELED      PaymentAuthCardResponseStatus = "CANCELED"
	PaymentAuthCardResponseStatusAUTHENTICATED PaymentAuthCardResponseStatus = "AUTHENTICATED"
)

// AllValues returns all PaymentAuthCardResponseStatus values.
func (PaymentAuthCardResponseStatus) AllValues() []PaymentAuthCardResponseStatus {
	return []PaymentAuthCardResponseStatus{
		PaymentAuthCardResponseStatusUNPROCESSED,
		PaymentAuthCardResponseStatusCHECKED,
		PaymentAuthCardResponseStatusAUTHORIZED,
		PaymentAuthCardResponseStatusCAPTURED,
		PaymentAuthCardResponseStatusCANCELED,
		PaymentAuthCardResponseStatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentAuthCardResponseStatusCHECKED:
		return []byte(s), nil
	case PaymentAuthCardResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentAuthCardResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentAuthCardResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentAuthCardResponseStatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentAuthCardResponseStatus(data) {
	case PaymentAuthCardResponseStatusUNPROCESSED:
		*s = PaymentAuthCardResponseStatusUNPROCESSED
		return nil
	case PaymentAuthCardResponseStatusCHECKED:
		*s = PaymentAuthCardResponseStatusCHECKED
		return nil
	case PaymentAuthCardResponseStatusAUTHORIZED:
		*s = PaymentAuthCardResponseStatusAUTHORIZED
		return nil
	case PaymentAuthCardResponseStatusCAPTURED:
		*s = PaymentAuthCardResponseStatusCAPTURED
		return nil
	case PaymentAuthCardResponseStatusCANCELED:
		*s = PaymentAuthCardResponseStatusCANCELED
		return nil
	case PaymentAuthCardResponseStatusAUTHENTICATED:
		*s = PaymentAuthCardResponseStatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardResponseTds2Status string

const (
	PaymentAuthCardResponseTds2StatusAUTHENTICATING PaymentAuthCardResponseTds2Status = "AUTHENTICATING"
	PaymentAuthCardResponseTds2StatusCHALLENGE      PaymentAuthCardResponseTds2Status = "CHALLENGE"
	PaymentAuthCardResponseTds2StatusAUTHENTICATED  PaymentAuthCardResponseTds2Status = "AUTHENTICATED"
)

// AllValues returns all PaymentAuthCardResponseTds2Status values.
func (PaymentAuthCardResponseTds2Status) AllValues() []PaymentAuthCardResponseTds2Status {
	return []PaymentAuthCardResponseTds2Status{
		PaymentAuthCardResponseTds2StatusAUTHENTICATING,
		PaymentAuthCardResponseTds2StatusCHALLENGE,
		PaymentAuthCardResponseTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardResponseTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardResponseTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case PaymentAuthCardResponseTds2StatusCHALLENGE:
		return []byte(s), nil
	case PaymentAuthCardResponseTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardResponseTds2Status) UnmarshalText(data []byte) error {
	switch PaymentAuthCardResponseTds2Status(data) {
	case PaymentAuthCardResponseTds2StatusAUTHENTICATING:
		*s = PaymentAuthCardResponseTds2StatusAUTHENTICATING
		return nil
	case PaymentAuthCardResponseTds2StatusCHALLENGE:
		*s = PaymentAuthCardResponseTds2StatusCHALLENGE
		return nil
	case PaymentAuthCardResponseTds2StatusAUTHENTICATED:
		*s = PaymentAuthCardResponseTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardResponseTds2Type string

const (
	PaymentAuthCardResponseTds2Type2 PaymentAuthCardResponseTds2Type = "2"
	PaymentAuthCardResponseTds2Type3 PaymentAuthCardResponseTds2Type = "3"
)

// AllValues returns all PaymentAuthCardResponseTds2Type values.
func (PaymentAuthCardResponseTds2Type) AllValues() []PaymentAuthCardResponseTds2Type {
	return []PaymentAuthCardResponseTds2Type{
		PaymentAuthCardResponseTds2Type2,
		PaymentAuthCardResponseTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardResponseTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardResponseTds2Type2:
		return []byte(s), nil
	case PaymentAuthCardResponseTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardResponseTds2Type) UnmarshalText(data []byte) error {
	switch PaymentAuthCardResponseTds2Type(data) {
	case PaymentAuthCardResponseTds2Type2:
		*s = PaymentAuthCardResponseTds2Type2
		return nil
	case PaymentAuthCardResponseTds2Type3:
		*s = PaymentAuthCardResponseTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentAuthCardResponseTdsType string

const (
	PaymentAuthCardResponseTdsType0 PaymentAuthCardResponseTdsType = "0"
	PaymentAuthCardResponseTdsType2 PaymentAuthCardResponseTdsType = "2"
)

// AllValues returns all PaymentAuthCardResponseTdsType values.
func (PaymentAuthCardResponseTdsType) AllValues() []PaymentAuthCardResponseTdsType {
	return []PaymentAuthCardResponseTdsType{
		PaymentAuthCardResponseTdsType0,
		PaymentAuthCardResponseTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAuthCardResponseTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAuthCardResponseTdsType0:
		return []byte(s), nil
	case PaymentAuthCardResponseTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAuthCardResponseTdsType) UnmarshalText(data []byte) error {
	switch PaymentAuthCardResponseTdsType(data) {
	case PaymentAuthCardResponseTdsType0:
		*s = PaymentAuthCardResponseTdsType0
		return nil
	case PaymentAuthCardResponseTdsType2:
		*s = PaymentAuthCardResponseTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCancelCard
type PaymentCancelCard struct {
	PayType  PaymentCancelCardPayType `json:"pay_type"`
	AccessID string                   `json:"access_id"`
}

// GetPayType returns the value of PayType.
func (s *PaymentCancelCard) GetPayType() PaymentCancelCardPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *PaymentCancelCard) GetAccessID() string {
	return s.AccessID
}

// SetPayType sets the value of PayType.
func (s *PaymentCancelCard) SetPayType(val PaymentCancelCardPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentCancelCard) SetAccessID(val string) {
	s.AccessID = val
}

type PaymentCancelCardPayType string

const (
	PaymentCancelCardPayTypeCard PaymentCancelCardPayType = "Card"
)

// AllValues returns all PaymentCancelCardPayType values.
func (PaymentCancelCardPayType) AllValues() []PaymentCancelCardPayType {
	return []PaymentCancelCardPayType{
		PaymentCancelCardPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardPayType) UnmarshalText(data []byte) error {
	switch PaymentCancelCardPayType(data) {
	case PaymentCancelCardPayTypeCard:
		*s = PaymentCancelCardPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCancelCardResponse
type PaymentCancelCardResponse struct {
	ShopID          OptString                                 `json:"shop_id"`
	ID              OptString                                 `json:"id"`
	PayType         OptPaymentCancelCardResponsePayType       `json:"pay_type"`
	Status          OptPaymentCancelCardResponseStatus        `json:"status"`
	AccessID        OptString                                 `json:"access_id"`
	ProcessDate     OptString                                 `json:"process_date"`
	JobCode         OptPaymentCancelCardResponseJobCode       `json:"job_code"`
	ItemCode        OptString                                 `json:"item_code"`
	Amount          OptInt                                    `json:"amount"`
	Tax             OptInt                                    `json:"tax"`
	TotalAmount     OptInt                                    `json:"total_amount"`
	CustomerGroupID OptNilString                              `json:"customer_group_id"`
	CustomerID      OptNilString                              `json:"customer_id"`
	CardNo          OptNilString                              `json:"card_no"`
	CardID          OptNilString                              `json:"card_id"`
	Expire          OptNilString                              `json:"expire"`
	HolderName      OptNilString                              `json:"holder_name"`
	CardNoHash      OptNilString                              `json:"card_no_hash"`
	Method          OptNilPaymentCancelCardResponseMethod     `json:"method"`
	PayTimes        OptNilString                              `json:"pay_times"`
	Forward         OptNilString                              `json:"forward"`
	Issuer          OptNilString                              `json:"issuer"`
	TransactionID   OptNilString                              `json:"transaction_id"`
	Approve         OptNilString                              `json:"approve"`
	AuthMaxDate     OptNilString                              `json:"auth_max_date"`
	ClientField1    OptNilString                              `json:"client_field_1"`
	ClientField2    OptNilString                              `json:"client_field_2"`
	ClientField3    OptNilString                              `json:"client_field_3"`
	TdsType         OptNilPaymentCancelCardResponseTdsType    `json:"tds_type"`
	Tds2Type        OptNilPaymentCancelCardResponseTds2Type   `json:"tds2_type"`
	Tds2RetURL      OptNilString                              `json:"tds2_ret_url"`
	Tds2Status      OptNilPaymentCancelCardResponseTds2Status `json:"tds2_status"`
	MerchantName    OptNilString                              `json:"merchant_name"`
	SendURL         OptNilString                              `json:"send_url"`
	SubscriptionID  OptNilString                              `json:"subscription_id"`
	Brand           OptString                                 `json:"brand"`
	ErrorCode       OptNilString                              `json:"error_code"`
	Created         OptNilString                              `json:"created"`
	Updated         OptNilString                              `json:"updated"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentCancelCardResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentCancelCardResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentCancelCardResponse) GetPayType() OptPaymentCancelCardResponsePayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentCancelCardResponse) GetStatus() OptPaymentCancelCardResponseStatus {
	return s.Status
}

// GetAccessID returns the value of AccessID.
func (s *PaymentCancelCardResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentCancelCardResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetJobCode returns the value of JobCode.
func (s *PaymentCancelCardResponse) GetJobCode() OptPaymentCancelCardResponseJobCode {
	return s.JobCode
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentCancelCardResponse) GetItemCode() OptString {
	return s.ItemCode
}

// GetAmount returns the value of Amount.
func (s *PaymentCancelCardResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentCancelCardResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentCancelCardResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentCancelCardResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentCancelCardResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCardNo returns the value of CardNo.
func (s *PaymentCancelCardResponse) GetCardNo() OptNilString {
	return s.CardNo
}

// GetCardID returns the value of CardID.
func (s *PaymentCancelCardResponse) GetCardID() OptNilString {
	return s.CardID
}

// GetExpire returns the value of Expire.
func (s *PaymentCancelCardResponse) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentCancelCardResponse) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentCancelCardResponse) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *PaymentCancelCardResponse) GetMethod() OptNilPaymentCancelCardResponseMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentCancelCardResponse) GetPayTimes() OptNilString {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *PaymentCancelCardResponse) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *PaymentCancelCardResponse) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *PaymentCancelCardResponse) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *PaymentCancelCardResponse) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentCancelCardResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentCancelCardResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentCancelCardResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentCancelCardResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetTdsType returns the value of TdsType.
func (s *PaymentCancelCardResponse) GetTdsType() OptNilPaymentCancelCardResponseTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentCancelCardResponse) GetTds2Type() OptNilPaymentCancelCardResponseTds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *PaymentCancelCardResponse) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentCancelCardResponse) GetTds2Status() OptNilPaymentCancelCardResponseTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentCancelCardResponse) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetSendURL returns the value of SendURL.
func (s *PaymentCancelCardResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentCancelCardResponse) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetBrand returns the value of Brand.
func (s *PaymentCancelCardResponse) GetBrand() OptString {
	return s.Brand
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentCancelCardResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentCancelCardResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentCancelCardResponse) GetUpdated() OptNilString {
	return s.Updated
}

// SetShopID sets the value of ShopID.
func (s *PaymentCancelCardResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentCancelCardResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentCancelCardResponse) SetPayType(val OptPaymentCancelCardResponsePayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentCancelCardResponse) SetStatus(val OptPaymentCancelCardResponseStatus) {
	s.Status = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentCancelCardResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentCancelCardResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentCancelCardResponse) SetJobCode(val OptPaymentCancelCardResponseJobCode) {
	s.JobCode = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentCancelCardResponse) SetItemCode(val OptString) {
	s.ItemCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentCancelCardResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentCancelCardResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentCancelCardResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentCancelCardResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentCancelCardResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCardNo sets the value of CardNo.
func (s *PaymentCancelCardResponse) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetCardID sets the value of CardID.
func (s *PaymentCancelCardResponse) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetExpire sets the value of Expire.
func (s *PaymentCancelCardResponse) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentCancelCardResponse) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentCancelCardResponse) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *PaymentCancelCardResponse) SetMethod(val OptNilPaymentCancelCardResponseMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentCancelCardResponse) SetPayTimes(val OptNilString) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *PaymentCancelCardResponse) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *PaymentCancelCardResponse) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *PaymentCancelCardResponse) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *PaymentCancelCardResponse) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentCancelCardResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentCancelCardResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentCancelCardResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentCancelCardResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentCancelCardResponse) SetTdsType(val OptNilPaymentCancelCardResponseTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentCancelCardResponse) SetTds2Type(val OptNilPaymentCancelCardResponseTds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *PaymentCancelCardResponse) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentCancelCardResponse) SetTds2Status(val OptNilPaymentCancelCardResponseTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentCancelCardResponse) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetSendURL sets the value of SendURL.
func (s *PaymentCancelCardResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentCancelCardResponse) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetBrand sets the value of Brand.
func (s *PaymentCancelCardResponse) SetBrand(val OptString) {
	s.Brand = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentCancelCardResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentCancelCardResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentCancelCardResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

type PaymentCancelCardResponseJobCode string

const (
	PaymentCancelCardResponseJobCodeCHECK   PaymentCancelCardResponseJobCode = "CHECK"
	PaymentCancelCardResponseJobCodeAUTH    PaymentCancelCardResponseJobCode = "AUTH"
	PaymentCancelCardResponseJobCodeCAPTURE PaymentCancelCardResponseJobCode = "CAPTURE"
	PaymentCancelCardResponseJobCodeSALES   PaymentCancelCardResponseJobCode = "SALES"
	PaymentCancelCardResponseJobCodeCANCEL  PaymentCancelCardResponseJobCode = "CANCEL"
)

// AllValues returns all PaymentCancelCardResponseJobCode values.
func (PaymentCancelCardResponseJobCode) AllValues() []PaymentCancelCardResponseJobCode {
	return []PaymentCancelCardResponseJobCode{
		PaymentCancelCardResponseJobCodeCHECK,
		PaymentCancelCardResponseJobCodeAUTH,
		PaymentCancelCardResponseJobCodeCAPTURE,
		PaymentCancelCardResponseJobCodeSALES,
		PaymentCancelCardResponseJobCodeCANCEL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardResponseJobCodeCHECK:
		return []byte(s), nil
	case PaymentCancelCardResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentCancelCardResponseJobCodeCAPTURE:
		return []byte(s), nil
	case PaymentCancelCardResponseJobCodeSALES:
		return []byte(s), nil
	case PaymentCancelCardResponseJobCodeCANCEL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentCancelCardResponseJobCode(data) {
	case PaymentCancelCardResponseJobCodeCHECK:
		*s = PaymentCancelCardResponseJobCodeCHECK
		return nil
	case PaymentCancelCardResponseJobCodeAUTH:
		*s = PaymentCancelCardResponseJobCodeAUTH
		return nil
	case PaymentCancelCardResponseJobCodeCAPTURE:
		*s = PaymentCancelCardResponseJobCodeCAPTURE
		return nil
	case PaymentCancelCardResponseJobCodeSALES:
		*s = PaymentCancelCardResponseJobCodeSALES
		return nil
	case PaymentCancelCardResponseJobCodeCANCEL:
		*s = PaymentCancelCardResponseJobCodeCANCEL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelCardResponseMethod string

const (
	PaymentCancelCardResponseMethod1 PaymentCancelCardResponseMethod = "1"
	PaymentCancelCardResponseMethod2 PaymentCancelCardResponseMethod = "2"
	PaymentCancelCardResponseMethod5 PaymentCancelCardResponseMethod = "5"
)

// AllValues returns all PaymentCancelCardResponseMethod values.
func (PaymentCancelCardResponseMethod) AllValues() []PaymentCancelCardResponseMethod {
	return []PaymentCancelCardResponseMethod{
		PaymentCancelCardResponseMethod1,
		PaymentCancelCardResponseMethod2,
		PaymentCancelCardResponseMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardResponseMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardResponseMethod1:
		return []byte(s), nil
	case PaymentCancelCardResponseMethod2:
		return []byte(s), nil
	case PaymentCancelCardResponseMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardResponseMethod) UnmarshalText(data []byte) error {
	switch PaymentCancelCardResponseMethod(data) {
	case PaymentCancelCardResponseMethod1:
		*s = PaymentCancelCardResponseMethod1
		return nil
	case PaymentCancelCardResponseMethod2:
		*s = PaymentCancelCardResponseMethod2
		return nil
	case PaymentCancelCardResponseMethod5:
		*s = PaymentCancelCardResponseMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelCardResponsePayType string

const (
	PaymentCancelCardResponsePayTypeCard PaymentCancelCardResponsePayType = "Card"
)

// AllValues returns all PaymentCancelCardResponsePayType values.
func (PaymentCancelCardResponsePayType) AllValues() []PaymentCancelCardResponsePayType {
	return []PaymentCancelCardResponsePayType{
		PaymentCancelCardResponsePayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardResponsePayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentCancelCardResponsePayType(data) {
	case PaymentCancelCardResponsePayTypeCard:
		*s = PaymentCancelCardResponsePayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelCardResponseStatus string

const (
	PaymentCancelCardResponseStatusUNPROCESSED   PaymentCancelCardResponseStatus = "UNPROCESSED"
	PaymentCancelCardResponseStatusCHECKED       PaymentCancelCardResponseStatus = "CHECKED"
	PaymentCancelCardResponseStatusAUTHORIZED    PaymentCancelCardResponseStatus = "AUTHORIZED"
	PaymentCancelCardResponseStatusCAPTURED      PaymentCancelCardResponseStatus = "CAPTURED"
	PaymentCancelCardResponseStatusCANCELED      PaymentCancelCardResponseStatus = "CANCELED"
	PaymentCancelCardResponseStatusAUTHENTICATED PaymentCancelCardResponseStatus = "AUTHENTICATED"
)

// AllValues returns all PaymentCancelCardResponseStatus values.
func (PaymentCancelCardResponseStatus) AllValues() []PaymentCancelCardResponseStatus {
	return []PaymentCancelCardResponseStatus{
		PaymentCancelCardResponseStatusUNPROCESSED,
		PaymentCancelCardResponseStatusCHECKED,
		PaymentCancelCardResponseStatusAUTHORIZED,
		PaymentCancelCardResponseStatusCAPTURED,
		PaymentCancelCardResponseStatusCANCELED,
		PaymentCancelCardResponseStatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentCancelCardResponseStatusCHECKED:
		return []byte(s), nil
	case PaymentCancelCardResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentCancelCardResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentCancelCardResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentCancelCardResponseStatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentCancelCardResponseStatus(data) {
	case PaymentCancelCardResponseStatusUNPROCESSED:
		*s = PaymentCancelCardResponseStatusUNPROCESSED
		return nil
	case PaymentCancelCardResponseStatusCHECKED:
		*s = PaymentCancelCardResponseStatusCHECKED
		return nil
	case PaymentCancelCardResponseStatusAUTHORIZED:
		*s = PaymentCancelCardResponseStatusAUTHORIZED
		return nil
	case PaymentCancelCardResponseStatusCAPTURED:
		*s = PaymentCancelCardResponseStatusCAPTURED
		return nil
	case PaymentCancelCardResponseStatusCANCELED:
		*s = PaymentCancelCardResponseStatusCANCELED
		return nil
	case PaymentCancelCardResponseStatusAUTHENTICATED:
		*s = PaymentCancelCardResponseStatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelCardResponseTds2Status string

const (
	PaymentCancelCardResponseTds2StatusAUTHENTICATING PaymentCancelCardResponseTds2Status = "AUTHENTICATING"
	PaymentCancelCardResponseTds2StatusCHALLENGE      PaymentCancelCardResponseTds2Status = "CHALLENGE"
	PaymentCancelCardResponseTds2StatusAUTHENTICATED  PaymentCancelCardResponseTds2Status = "AUTHENTICATED"
)

// AllValues returns all PaymentCancelCardResponseTds2Status values.
func (PaymentCancelCardResponseTds2Status) AllValues() []PaymentCancelCardResponseTds2Status {
	return []PaymentCancelCardResponseTds2Status{
		PaymentCancelCardResponseTds2StatusAUTHENTICATING,
		PaymentCancelCardResponseTds2StatusCHALLENGE,
		PaymentCancelCardResponseTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardResponseTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardResponseTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case PaymentCancelCardResponseTds2StatusCHALLENGE:
		return []byte(s), nil
	case PaymentCancelCardResponseTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardResponseTds2Status) UnmarshalText(data []byte) error {
	switch PaymentCancelCardResponseTds2Status(data) {
	case PaymentCancelCardResponseTds2StatusAUTHENTICATING:
		*s = PaymentCancelCardResponseTds2StatusAUTHENTICATING
		return nil
	case PaymentCancelCardResponseTds2StatusCHALLENGE:
		*s = PaymentCancelCardResponseTds2StatusCHALLENGE
		return nil
	case PaymentCancelCardResponseTds2StatusAUTHENTICATED:
		*s = PaymentCancelCardResponseTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelCardResponseTds2Type string

const (
	PaymentCancelCardResponseTds2Type2 PaymentCancelCardResponseTds2Type = "2"
	PaymentCancelCardResponseTds2Type3 PaymentCancelCardResponseTds2Type = "3"
)

// AllValues returns all PaymentCancelCardResponseTds2Type values.
func (PaymentCancelCardResponseTds2Type) AllValues() []PaymentCancelCardResponseTds2Type {
	return []PaymentCancelCardResponseTds2Type{
		PaymentCancelCardResponseTds2Type2,
		PaymentCancelCardResponseTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardResponseTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardResponseTds2Type2:
		return []byte(s), nil
	case PaymentCancelCardResponseTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardResponseTds2Type) UnmarshalText(data []byte) error {
	switch PaymentCancelCardResponseTds2Type(data) {
	case PaymentCancelCardResponseTds2Type2:
		*s = PaymentCancelCardResponseTds2Type2
		return nil
	case PaymentCancelCardResponseTds2Type3:
		*s = PaymentCancelCardResponseTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelCardResponseTdsType string

const (
	PaymentCancelCardResponseTdsType0 PaymentCancelCardResponseTdsType = "0"
	PaymentCancelCardResponseTdsType2 PaymentCancelCardResponseTdsType = "2"
)

// AllValues returns all PaymentCancelCardResponseTdsType values.
func (PaymentCancelCardResponseTdsType) AllValues() []PaymentCancelCardResponseTdsType {
	return []PaymentCancelCardResponseTdsType{
		PaymentCancelCardResponseTdsType0,
		PaymentCancelCardResponseTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelCardResponseTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelCardResponseTdsType0:
		return []byte(s), nil
	case PaymentCancelCardResponseTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelCardResponseTdsType) UnmarshalText(data []byte) error {
	switch PaymentCancelCardResponseTdsType(data) {
	case PaymentCancelCardResponseTdsType0:
		*s = PaymentCancelCardResponseTdsType0
		return nil
	case PaymentCancelCardResponseTdsType2:
		*s = PaymentCancelCardResponseTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCancelPaypay
type PaymentCancelPaypay struct {
	PayType           PaymentCancelPaypayPayType `json:"pay_type"`
	AccessID          string                     `json:"access_id"`
	CancelDescription OptNilString               `json:"cancel_description"`
}

// GetPayType returns the value of PayType.
func (s *PaymentCancelPaypay) GetPayType() PaymentCancelPaypayPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *PaymentCancelPaypay) GetAccessID() string {
	return s.AccessID
}

// GetCancelDescription returns the value of CancelDescription.
func (s *PaymentCancelPaypay) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// SetPayType sets the value of PayType.
func (s *PaymentCancelPaypay) SetPayType(val PaymentCancelPaypayPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentCancelPaypay) SetAccessID(val string) {
	s.AccessID = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *PaymentCancelPaypay) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

type PaymentCancelPaypayPayType string

const (
	PaymentCancelPaypayPayTypePaypay PaymentCancelPaypayPayType = "Paypay"
)

// AllValues returns all PaymentCancelPaypayPayType values.
func (PaymentCancelPaypayPayType) AllValues() []PaymentCancelPaypayPayType {
	return []PaymentCancelPaypayPayType{
		PaymentCancelPaypayPayTypePaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelPaypayPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelPaypayPayTypePaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelPaypayPayType) UnmarshalText(data []byte) error {
	switch PaymentCancelPaypayPayType(data) {
	case PaymentCancelPaypayPayTypePaypay:
		*s = PaymentCancelPaypayPayTypePaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCancelPaypayResponse
type PaymentCancelPaypayResponse struct {
	ShopID             OptString                                     `json:"shop_id"`
	ID                 OptString                                     `json:"id"`
	AccessID           OptString                                     `json:"access_id"`
	Amount             OptInt                                        `json:"amount"`
	Tax                OptInt                                        `json:"tax"`
	TotalAmount        OptInt                                        `json:"total_amount"`
	ClientField1       OptNilString                                  `json:"client_field_1"`
	ClientField2       OptNilString                                  `json:"client_field_2"`
	ClientField3       OptNilString                                  `json:"client_field_3"`
	ProcessDate        OptString                                     `json:"process_date"`
	CustomerID         OptNilString                                  `json:"customer_id"`
	CustomerGroupID    OptNilString                                  `json:"customer_group_id"`
	ErrorCode          OptNilString                                  `json:"error_code"`
	Created            OptNilString                                  `json:"created"`
	Updated            OptNilString                                  `json:"updated"`
	PayType            OptPaymentCancelPaypayResponsePayType         `json:"pay_type"`
	JobCode            OptPaymentCancelPaypayResponseJobCode         `json:"job_code"`
	Status             OptPaymentCancelPaypayResponseStatus          `json:"status"`
	CodeURL            OptNilString                                  `json:"code_url"`
	CodeExpiryDate     OptNilString                                  `json:"code_expiry_date"`
	RedirectURL        OptNilString                                  `json:"redirect_url"`
	RedirectType       OptNilPaymentCancelPaypayResponseRedirectType `json:"redirect_type"`
	AuthMaxDate        OptNilString                                  `json:"auth_max_date"`
	OrderDescription   OptNilString                                  `json:"order_description"`
	CaptureDescription OptNilString                                  `json:"capture_description"`
	UpdateDescription  OptNilString                                  `json:"update_description"`
	CancelDescription  OptNilString                                  `json:"cancel_description"`
	StoreID            OptNilString                                  `json:"store_id"`
	CodeID             OptNilString                                  `json:"code_id"`
	PaymentID          OptNilString                                  `json:"payment_id"`
	PaypayResultCode   OptNilString                                  `json:"paypay_result_code"`
	MerchantPaymentID  OptNilString                                  `json:"merchant_payment_id"`
	MerchantCaptureID  OptNilString                                  `json:"merchant_capture_id"`
	MerchantUpdateID   OptNilString                                  `json:"merchant_update_id"`
	MerchantRefundID   OptNilString                                  `json:"merchant_refund_id"`
	PaymentDate        OptNilString                                  `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentCancelPaypayResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentCancelPaypayResponse) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *PaymentCancelPaypayResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *PaymentCancelPaypayResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentCancelPaypayResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentCancelPaypayResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentCancelPaypayResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentCancelPaypayResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentCancelPaypayResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentCancelPaypayResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentCancelPaypayResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentCancelPaypayResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentCancelPaypayResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentCancelPaypayResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentCancelPaypayResponse) GetUpdated() OptNilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *PaymentCancelPaypayResponse) GetPayType() OptPaymentCancelPaypayResponsePayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *PaymentCancelPaypayResponse) GetJobCode() OptPaymentCancelPaypayResponseJobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *PaymentCancelPaypayResponse) GetStatus() OptPaymentCancelPaypayResponseStatus {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *PaymentCancelPaypayResponse) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *PaymentCancelPaypayResponse) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *PaymentCancelPaypayResponse) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *PaymentCancelPaypayResponse) GetRedirectType() OptNilPaymentCancelPaypayResponseRedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentCancelPaypayResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *PaymentCancelPaypayResponse) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *PaymentCancelPaypayResponse) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *PaymentCancelPaypayResponse) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *PaymentCancelPaypayResponse) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *PaymentCancelPaypayResponse) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *PaymentCancelPaypayResponse) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *PaymentCancelPaypayResponse) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *PaymentCancelPaypayResponse) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *PaymentCancelPaypayResponse) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *PaymentCancelPaypayResponse) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *PaymentCancelPaypayResponse) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *PaymentCancelPaypayResponse) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *PaymentCancelPaypayResponse) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *PaymentCancelPaypayResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentCancelPaypayResponse) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentCancelPaypayResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *PaymentCancelPaypayResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentCancelPaypayResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentCancelPaypayResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentCancelPaypayResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentCancelPaypayResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentCancelPaypayResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentCancelPaypayResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentCancelPaypayResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentCancelPaypayResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentCancelPaypayResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentCancelPaypayResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentCancelPaypayResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *PaymentCancelPaypayResponse) SetPayType(val OptPaymentCancelPaypayResponsePayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentCancelPaypayResponse) SetJobCode(val OptPaymentCancelPaypayResponseJobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *PaymentCancelPaypayResponse) SetStatus(val OptPaymentCancelPaypayResponseStatus) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *PaymentCancelPaypayResponse) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *PaymentCancelPaypayResponse) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *PaymentCancelPaypayResponse) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *PaymentCancelPaypayResponse) SetRedirectType(val OptNilPaymentCancelPaypayResponseRedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentCancelPaypayResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *PaymentCancelPaypayResponse) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *PaymentCancelPaypayResponse) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *PaymentCancelPaypayResponse) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *PaymentCancelPaypayResponse) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *PaymentCancelPaypayResponse) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *PaymentCancelPaypayResponse) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *PaymentCancelPaypayResponse) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *PaymentCancelPaypayResponse) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *PaymentCancelPaypayResponse) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *PaymentCancelPaypayResponse) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *PaymentCancelPaypayResponse) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *PaymentCancelPaypayResponse) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *PaymentCancelPaypayResponse) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

type PaymentCancelPaypayResponseJobCode string

const (
	PaymentCancelPaypayResponseJobCodeAUTH    PaymentCancelPaypayResponseJobCode = "AUTH"
	PaymentCancelPaypayResponseJobCodeCAPTURE PaymentCancelPaypayResponseJobCode = "CAPTURE"
)

// AllValues returns all PaymentCancelPaypayResponseJobCode values.
func (PaymentCancelPaypayResponseJobCode) AllValues() []PaymentCancelPaypayResponseJobCode {
	return []PaymentCancelPaypayResponseJobCode{
		PaymentCancelPaypayResponseJobCodeAUTH,
		PaymentCancelPaypayResponseJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelPaypayResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelPaypayResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentCancelPaypayResponseJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelPaypayResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentCancelPaypayResponseJobCode(data) {
	case PaymentCancelPaypayResponseJobCodeAUTH:
		*s = PaymentCancelPaypayResponseJobCodeAUTH
		return nil
	case PaymentCancelPaypayResponseJobCodeCAPTURE:
		*s = PaymentCancelPaypayResponseJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelPaypayResponsePayType string

const (
	PaymentCancelPaypayResponsePayTypePaypay PaymentCancelPaypayResponsePayType = "Paypay"
)

// AllValues returns all PaymentCancelPaypayResponsePayType values.
func (PaymentCancelPaypayResponsePayType) AllValues() []PaymentCancelPaypayResponsePayType {
	return []PaymentCancelPaypayResponsePayType{
		PaymentCancelPaypayResponsePayTypePaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelPaypayResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelPaypayResponsePayTypePaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelPaypayResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentCancelPaypayResponsePayType(data) {
	case PaymentCancelPaypayResponsePayTypePaypay:
		*s = PaymentCancelPaypayResponsePayTypePaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelPaypayResponseRedirectType string

const (
	PaymentCancelPaypayResponseRedirectType1 PaymentCancelPaypayResponseRedirectType = "1"
	PaymentCancelPaypayResponseRedirectType2 PaymentCancelPaypayResponseRedirectType = "2"
)

// AllValues returns all PaymentCancelPaypayResponseRedirectType values.
func (PaymentCancelPaypayResponseRedirectType) AllValues() []PaymentCancelPaypayResponseRedirectType {
	return []PaymentCancelPaypayResponseRedirectType{
		PaymentCancelPaypayResponseRedirectType1,
		PaymentCancelPaypayResponseRedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelPaypayResponseRedirectType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelPaypayResponseRedirectType1:
		return []byte(s), nil
	case PaymentCancelPaypayResponseRedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelPaypayResponseRedirectType) UnmarshalText(data []byte) error {
	switch PaymentCancelPaypayResponseRedirectType(data) {
	case PaymentCancelPaypayResponseRedirectType1:
		*s = PaymentCancelPaypayResponseRedirectType1
		return nil
	case PaymentCancelPaypayResponseRedirectType2:
		*s = PaymentCancelPaypayResponseRedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCancelPaypayResponseStatus string

const (
	PaymentCancelPaypayResponseStatusUNPROCESSED             PaymentCancelPaypayResponseStatus = "UNPROCESSED"
	PaymentCancelPaypayResponseStatusAWAITINGCUSTOMERPAYMENT PaymentCancelPaypayResponseStatus = "AWAITING_CUSTOMER_PAYMENT"
	PaymentCancelPaypayResponseStatusAUTHORIZED              PaymentCancelPaypayResponseStatus = "AUTHORIZED"
	PaymentCancelPaypayResponseStatusCAPTURED                PaymentCancelPaypayResponseStatus = "CAPTURED"
	PaymentCancelPaypayResponseStatusCANCELED                PaymentCancelPaypayResponseStatus = "CANCELED"
	PaymentCancelPaypayResponseStatusEXPIRED                 PaymentCancelPaypayResponseStatus = "EXPIRED"
)

// AllValues returns all PaymentCancelPaypayResponseStatus values.
func (PaymentCancelPaypayResponseStatus) AllValues() []PaymentCancelPaypayResponseStatus {
	return []PaymentCancelPaypayResponseStatus{
		PaymentCancelPaypayResponseStatusUNPROCESSED,
		PaymentCancelPaypayResponseStatusAWAITINGCUSTOMERPAYMENT,
		PaymentCancelPaypayResponseStatusAUTHORIZED,
		PaymentCancelPaypayResponseStatusCAPTURED,
		PaymentCancelPaypayResponseStatusCANCELED,
		PaymentCancelPaypayResponseStatusEXPIRED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCancelPaypayResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCancelPaypayResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentCancelPaypayResponseStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case PaymentCancelPaypayResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentCancelPaypayResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentCancelPaypayResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentCancelPaypayResponseStatusEXPIRED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCancelPaypayResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentCancelPaypayResponseStatus(data) {
	case PaymentCancelPaypayResponseStatusUNPROCESSED:
		*s = PaymentCancelPaypayResponseStatusUNPROCESSED
		return nil
	case PaymentCancelPaypayResponseStatusAWAITINGCUSTOMERPAYMENT:
		*s = PaymentCancelPaypayResponseStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case PaymentCancelPaypayResponseStatusAUTHORIZED:
		*s = PaymentCancelPaypayResponseStatusAUTHORIZED
		return nil
	case PaymentCancelPaypayResponseStatusCAPTURED:
		*s = PaymentCancelPaypayResponseStatusCAPTURED
		return nil
	case PaymentCancelPaypayResponseStatusCANCELED:
		*s = PaymentCancelPaypayResponseStatusCANCELED
		return nil
	case PaymentCancelPaypayResponseStatusEXPIRED:
		*s = PaymentCancelPaypayResponseStatusEXPIRED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCaptureCard
type PaymentCaptureCard struct {
	PayType  PaymentCaptureCardPayType     `json:"pay_type"`
	AccessID string                        `json:"access_id"`
	Method   OptPaymentCaptureCardMethod   `json:"method"`
	PayTimes OptPaymentCaptureCardPayTimes `json:"pay_times"`
}

// GetPayType returns the value of PayType.
func (s *PaymentCaptureCard) GetPayType() PaymentCaptureCardPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *PaymentCaptureCard) GetAccessID() string {
	return s.AccessID
}

// GetMethod returns the value of Method.
func (s *PaymentCaptureCard) GetMethod() OptPaymentCaptureCardMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentCaptureCard) GetPayTimes() OptPaymentCaptureCardPayTimes {
	return s.PayTimes
}

// SetPayType sets the value of PayType.
func (s *PaymentCaptureCard) SetPayType(val PaymentCaptureCardPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentCaptureCard) SetAccessID(val string) {
	s.AccessID = val
}

// SetMethod sets the value of Method.
func (s *PaymentCaptureCard) SetMethod(val OptPaymentCaptureCardMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentCaptureCard) SetPayTimes(val OptPaymentCaptureCardPayTimes) {
	s.PayTimes = val
}

type PaymentCaptureCardMethod string

const (
	PaymentCaptureCardMethod1 PaymentCaptureCardMethod = "1"
	PaymentCaptureCardMethod2 PaymentCaptureCardMethod = "2"
	PaymentCaptureCardMethod5 PaymentCaptureCardMethod = "5"
)

// AllValues returns all PaymentCaptureCardMethod values.
func (PaymentCaptureCardMethod) AllValues() []PaymentCaptureCardMethod {
	return []PaymentCaptureCardMethod{
		PaymentCaptureCardMethod1,
		PaymentCaptureCardMethod2,
		PaymentCaptureCardMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardMethod1:
		return []byte(s), nil
	case PaymentCaptureCardMethod2:
		return []byte(s), nil
	case PaymentCaptureCardMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardMethod) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardMethod(data) {
	case PaymentCaptureCardMethod1:
		*s = PaymentCaptureCardMethod1
		return nil
	case PaymentCaptureCardMethod2:
		*s = PaymentCaptureCardMethod2
		return nil
	case PaymentCaptureCardMethod5:
		*s = PaymentCaptureCardMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardPayTimes string

const (
	PaymentCaptureCardPayTimes3  PaymentCaptureCardPayTimes = "3"
	PaymentCaptureCardPayTimes5  PaymentCaptureCardPayTimes = "5"
	PaymentCaptureCardPayTimes6  PaymentCaptureCardPayTimes = "6"
	PaymentCaptureCardPayTimes10 PaymentCaptureCardPayTimes = "10"
	PaymentCaptureCardPayTimes12 PaymentCaptureCardPayTimes = "12"
	PaymentCaptureCardPayTimes15 PaymentCaptureCardPayTimes = "15"
	PaymentCaptureCardPayTimes18 PaymentCaptureCardPayTimes = "18"
	PaymentCaptureCardPayTimes20 PaymentCaptureCardPayTimes = "20"
	PaymentCaptureCardPayTimes24 PaymentCaptureCardPayTimes = "24"
)

// AllValues returns all PaymentCaptureCardPayTimes values.
func (PaymentCaptureCardPayTimes) AllValues() []PaymentCaptureCardPayTimes {
	return []PaymentCaptureCardPayTimes{
		PaymentCaptureCardPayTimes3,
		PaymentCaptureCardPayTimes5,
		PaymentCaptureCardPayTimes6,
		PaymentCaptureCardPayTimes10,
		PaymentCaptureCardPayTimes12,
		PaymentCaptureCardPayTimes15,
		PaymentCaptureCardPayTimes18,
		PaymentCaptureCardPayTimes20,
		PaymentCaptureCardPayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardPayTimes) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardPayTimes3:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes5:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes6:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes10:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes12:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes15:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes18:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes20:
		return []byte(s), nil
	case PaymentCaptureCardPayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardPayTimes) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardPayTimes(data) {
	case PaymentCaptureCardPayTimes3:
		*s = PaymentCaptureCardPayTimes3
		return nil
	case PaymentCaptureCardPayTimes5:
		*s = PaymentCaptureCardPayTimes5
		return nil
	case PaymentCaptureCardPayTimes6:
		*s = PaymentCaptureCardPayTimes6
		return nil
	case PaymentCaptureCardPayTimes10:
		*s = PaymentCaptureCardPayTimes10
		return nil
	case PaymentCaptureCardPayTimes12:
		*s = PaymentCaptureCardPayTimes12
		return nil
	case PaymentCaptureCardPayTimes15:
		*s = PaymentCaptureCardPayTimes15
		return nil
	case PaymentCaptureCardPayTimes18:
		*s = PaymentCaptureCardPayTimes18
		return nil
	case PaymentCaptureCardPayTimes20:
		*s = PaymentCaptureCardPayTimes20
		return nil
	case PaymentCaptureCardPayTimes24:
		*s = PaymentCaptureCardPayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardPayType string

const (
	PaymentCaptureCardPayTypeCard PaymentCaptureCardPayType = "Card"
)

// AllValues returns all PaymentCaptureCardPayType values.
func (PaymentCaptureCardPayType) AllValues() []PaymentCaptureCardPayType {
	return []PaymentCaptureCardPayType{
		PaymentCaptureCardPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardPayType) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardPayType(data) {
	case PaymentCaptureCardPayTypeCard:
		*s = PaymentCaptureCardPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCaptureCardResponse
type PaymentCaptureCardResponse struct {
	ShopID          OptString                                  `json:"shop_id"`
	ID              OptString                                  `json:"id"`
	PayType         OptPaymentCaptureCardResponsePayType       `json:"pay_type"`
	Status          OptPaymentCaptureCardResponseStatus        `json:"status"`
	AccessID        OptString                                  `json:"access_id"`
	ProcessDate     OptString                                  `json:"process_date"`
	JobCode         OptPaymentCaptureCardResponseJobCode       `json:"job_code"`
	ItemCode        OptString                                  `json:"item_code"`
	Amount          OptInt                                     `json:"amount"`
	Tax             OptInt                                     `json:"tax"`
	TotalAmount     OptInt                                     `json:"total_amount"`
	CustomerGroupID OptNilString                               `json:"customer_group_id"`
	CustomerID      OptNilString                               `json:"customer_id"`
	CardNo          OptNilString                               `json:"card_no"`
	CardID          OptNilString                               `json:"card_id"`
	Expire          OptNilString                               `json:"expire"`
	HolderName      OptNilString                               `json:"holder_name"`
	CardNoHash      OptNilString                               `json:"card_no_hash"`
	Method          OptNilPaymentCaptureCardResponseMethod     `json:"method"`
	PayTimes        OptNilString                               `json:"pay_times"`
	Forward         OptNilString                               `json:"forward"`
	Issuer          OptNilString                               `json:"issuer"`
	TransactionID   OptNilString                               `json:"transaction_id"`
	Approve         OptNilString                               `json:"approve"`
	AuthMaxDate     OptNilString                               `json:"auth_max_date"`
	ClientField1    OptNilString                               `json:"client_field_1"`
	ClientField2    OptNilString                               `json:"client_field_2"`
	ClientField3    OptNilString                               `json:"client_field_3"`
	TdsType         OptNilPaymentCaptureCardResponseTdsType    `json:"tds_type"`
	Tds2Type        OptNilPaymentCaptureCardResponseTds2Type   `json:"tds2_type"`
	Tds2RetURL      OptNilString                               `json:"tds2_ret_url"`
	Tds2Status      OptNilPaymentCaptureCardResponseTds2Status `json:"tds2_status"`
	MerchantName    OptNilString                               `json:"merchant_name"`
	SendURL         OptNilString                               `json:"send_url"`
	SubscriptionID  OptNilString                               `json:"subscription_id"`
	Brand           OptString                                  `json:"brand"`
	ErrorCode       OptNilString                               `json:"error_code"`
	Created         OptNilString                               `json:"created"`
	Updated         OptNilString                               `json:"updated"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentCaptureCardResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentCaptureCardResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentCaptureCardResponse) GetPayType() OptPaymentCaptureCardResponsePayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentCaptureCardResponse) GetStatus() OptPaymentCaptureCardResponseStatus {
	return s.Status
}

// GetAccessID returns the value of AccessID.
func (s *PaymentCaptureCardResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentCaptureCardResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetJobCode returns the value of JobCode.
func (s *PaymentCaptureCardResponse) GetJobCode() OptPaymentCaptureCardResponseJobCode {
	return s.JobCode
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentCaptureCardResponse) GetItemCode() OptString {
	return s.ItemCode
}

// GetAmount returns the value of Amount.
func (s *PaymentCaptureCardResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentCaptureCardResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentCaptureCardResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentCaptureCardResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentCaptureCardResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCardNo returns the value of CardNo.
func (s *PaymentCaptureCardResponse) GetCardNo() OptNilString {
	return s.CardNo
}

// GetCardID returns the value of CardID.
func (s *PaymentCaptureCardResponse) GetCardID() OptNilString {
	return s.CardID
}

// GetExpire returns the value of Expire.
func (s *PaymentCaptureCardResponse) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentCaptureCardResponse) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentCaptureCardResponse) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *PaymentCaptureCardResponse) GetMethod() OptNilPaymentCaptureCardResponseMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentCaptureCardResponse) GetPayTimes() OptNilString {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *PaymentCaptureCardResponse) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *PaymentCaptureCardResponse) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *PaymentCaptureCardResponse) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *PaymentCaptureCardResponse) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentCaptureCardResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentCaptureCardResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentCaptureCardResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentCaptureCardResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetTdsType returns the value of TdsType.
func (s *PaymentCaptureCardResponse) GetTdsType() OptNilPaymentCaptureCardResponseTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentCaptureCardResponse) GetTds2Type() OptNilPaymentCaptureCardResponseTds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *PaymentCaptureCardResponse) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentCaptureCardResponse) GetTds2Status() OptNilPaymentCaptureCardResponseTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentCaptureCardResponse) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetSendURL returns the value of SendURL.
func (s *PaymentCaptureCardResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentCaptureCardResponse) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetBrand returns the value of Brand.
func (s *PaymentCaptureCardResponse) GetBrand() OptString {
	return s.Brand
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentCaptureCardResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentCaptureCardResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentCaptureCardResponse) GetUpdated() OptNilString {
	return s.Updated
}

// SetShopID sets the value of ShopID.
func (s *PaymentCaptureCardResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentCaptureCardResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentCaptureCardResponse) SetPayType(val OptPaymentCaptureCardResponsePayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentCaptureCardResponse) SetStatus(val OptPaymentCaptureCardResponseStatus) {
	s.Status = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentCaptureCardResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentCaptureCardResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentCaptureCardResponse) SetJobCode(val OptPaymentCaptureCardResponseJobCode) {
	s.JobCode = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentCaptureCardResponse) SetItemCode(val OptString) {
	s.ItemCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentCaptureCardResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentCaptureCardResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentCaptureCardResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentCaptureCardResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentCaptureCardResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCardNo sets the value of CardNo.
func (s *PaymentCaptureCardResponse) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetCardID sets the value of CardID.
func (s *PaymentCaptureCardResponse) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetExpire sets the value of Expire.
func (s *PaymentCaptureCardResponse) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentCaptureCardResponse) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentCaptureCardResponse) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *PaymentCaptureCardResponse) SetMethod(val OptNilPaymentCaptureCardResponseMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentCaptureCardResponse) SetPayTimes(val OptNilString) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *PaymentCaptureCardResponse) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *PaymentCaptureCardResponse) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *PaymentCaptureCardResponse) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *PaymentCaptureCardResponse) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentCaptureCardResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentCaptureCardResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentCaptureCardResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentCaptureCardResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentCaptureCardResponse) SetTdsType(val OptNilPaymentCaptureCardResponseTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentCaptureCardResponse) SetTds2Type(val OptNilPaymentCaptureCardResponseTds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *PaymentCaptureCardResponse) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentCaptureCardResponse) SetTds2Status(val OptNilPaymentCaptureCardResponseTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentCaptureCardResponse) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetSendURL sets the value of SendURL.
func (s *PaymentCaptureCardResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentCaptureCardResponse) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetBrand sets the value of Brand.
func (s *PaymentCaptureCardResponse) SetBrand(val OptString) {
	s.Brand = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentCaptureCardResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentCaptureCardResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentCaptureCardResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

type PaymentCaptureCardResponseJobCode string

const (
	PaymentCaptureCardResponseJobCodeCHECK   PaymentCaptureCardResponseJobCode = "CHECK"
	PaymentCaptureCardResponseJobCodeAUTH    PaymentCaptureCardResponseJobCode = "AUTH"
	PaymentCaptureCardResponseJobCodeCAPTURE PaymentCaptureCardResponseJobCode = "CAPTURE"
	PaymentCaptureCardResponseJobCodeSALES   PaymentCaptureCardResponseJobCode = "SALES"
	PaymentCaptureCardResponseJobCodeCANCEL  PaymentCaptureCardResponseJobCode = "CANCEL"
)

// AllValues returns all PaymentCaptureCardResponseJobCode values.
func (PaymentCaptureCardResponseJobCode) AllValues() []PaymentCaptureCardResponseJobCode {
	return []PaymentCaptureCardResponseJobCode{
		PaymentCaptureCardResponseJobCodeCHECK,
		PaymentCaptureCardResponseJobCodeAUTH,
		PaymentCaptureCardResponseJobCodeCAPTURE,
		PaymentCaptureCardResponseJobCodeSALES,
		PaymentCaptureCardResponseJobCodeCANCEL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardResponseJobCodeCHECK:
		return []byte(s), nil
	case PaymentCaptureCardResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentCaptureCardResponseJobCodeCAPTURE:
		return []byte(s), nil
	case PaymentCaptureCardResponseJobCodeSALES:
		return []byte(s), nil
	case PaymentCaptureCardResponseJobCodeCANCEL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardResponseJobCode(data) {
	case PaymentCaptureCardResponseJobCodeCHECK:
		*s = PaymentCaptureCardResponseJobCodeCHECK
		return nil
	case PaymentCaptureCardResponseJobCodeAUTH:
		*s = PaymentCaptureCardResponseJobCodeAUTH
		return nil
	case PaymentCaptureCardResponseJobCodeCAPTURE:
		*s = PaymentCaptureCardResponseJobCodeCAPTURE
		return nil
	case PaymentCaptureCardResponseJobCodeSALES:
		*s = PaymentCaptureCardResponseJobCodeSALES
		return nil
	case PaymentCaptureCardResponseJobCodeCANCEL:
		*s = PaymentCaptureCardResponseJobCodeCANCEL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardResponseMethod string

const (
	PaymentCaptureCardResponseMethod1 PaymentCaptureCardResponseMethod = "1"
	PaymentCaptureCardResponseMethod2 PaymentCaptureCardResponseMethod = "2"
	PaymentCaptureCardResponseMethod5 PaymentCaptureCardResponseMethod = "5"
)

// AllValues returns all PaymentCaptureCardResponseMethod values.
func (PaymentCaptureCardResponseMethod) AllValues() []PaymentCaptureCardResponseMethod {
	return []PaymentCaptureCardResponseMethod{
		PaymentCaptureCardResponseMethod1,
		PaymentCaptureCardResponseMethod2,
		PaymentCaptureCardResponseMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardResponseMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardResponseMethod1:
		return []byte(s), nil
	case PaymentCaptureCardResponseMethod2:
		return []byte(s), nil
	case PaymentCaptureCardResponseMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardResponseMethod) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardResponseMethod(data) {
	case PaymentCaptureCardResponseMethod1:
		*s = PaymentCaptureCardResponseMethod1
		return nil
	case PaymentCaptureCardResponseMethod2:
		*s = PaymentCaptureCardResponseMethod2
		return nil
	case PaymentCaptureCardResponseMethod5:
		*s = PaymentCaptureCardResponseMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardResponsePayType string

const (
	PaymentCaptureCardResponsePayTypeCard PaymentCaptureCardResponsePayType = "Card"
)

// AllValues returns all PaymentCaptureCardResponsePayType values.
func (PaymentCaptureCardResponsePayType) AllValues() []PaymentCaptureCardResponsePayType {
	return []PaymentCaptureCardResponsePayType{
		PaymentCaptureCardResponsePayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardResponsePayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardResponsePayType(data) {
	case PaymentCaptureCardResponsePayTypeCard:
		*s = PaymentCaptureCardResponsePayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardResponseStatus string

const (
	PaymentCaptureCardResponseStatusUNPROCESSED   PaymentCaptureCardResponseStatus = "UNPROCESSED"
	PaymentCaptureCardResponseStatusCHECKED       PaymentCaptureCardResponseStatus = "CHECKED"
	PaymentCaptureCardResponseStatusAUTHORIZED    PaymentCaptureCardResponseStatus = "AUTHORIZED"
	PaymentCaptureCardResponseStatusCAPTURED      PaymentCaptureCardResponseStatus = "CAPTURED"
	PaymentCaptureCardResponseStatusCANCELED      PaymentCaptureCardResponseStatus = "CANCELED"
	PaymentCaptureCardResponseStatusAUTHENTICATED PaymentCaptureCardResponseStatus = "AUTHENTICATED"
)

// AllValues returns all PaymentCaptureCardResponseStatus values.
func (PaymentCaptureCardResponseStatus) AllValues() []PaymentCaptureCardResponseStatus {
	return []PaymentCaptureCardResponseStatus{
		PaymentCaptureCardResponseStatusUNPROCESSED,
		PaymentCaptureCardResponseStatusCHECKED,
		PaymentCaptureCardResponseStatusAUTHORIZED,
		PaymentCaptureCardResponseStatusCAPTURED,
		PaymentCaptureCardResponseStatusCANCELED,
		PaymentCaptureCardResponseStatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentCaptureCardResponseStatusCHECKED:
		return []byte(s), nil
	case PaymentCaptureCardResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentCaptureCardResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentCaptureCardResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentCaptureCardResponseStatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardResponseStatus(data) {
	case PaymentCaptureCardResponseStatusUNPROCESSED:
		*s = PaymentCaptureCardResponseStatusUNPROCESSED
		return nil
	case PaymentCaptureCardResponseStatusCHECKED:
		*s = PaymentCaptureCardResponseStatusCHECKED
		return nil
	case PaymentCaptureCardResponseStatusAUTHORIZED:
		*s = PaymentCaptureCardResponseStatusAUTHORIZED
		return nil
	case PaymentCaptureCardResponseStatusCAPTURED:
		*s = PaymentCaptureCardResponseStatusCAPTURED
		return nil
	case PaymentCaptureCardResponseStatusCANCELED:
		*s = PaymentCaptureCardResponseStatusCANCELED
		return nil
	case PaymentCaptureCardResponseStatusAUTHENTICATED:
		*s = PaymentCaptureCardResponseStatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardResponseTds2Status string

const (
	PaymentCaptureCardResponseTds2StatusAUTHENTICATING PaymentCaptureCardResponseTds2Status = "AUTHENTICATING"
	PaymentCaptureCardResponseTds2StatusCHALLENGE      PaymentCaptureCardResponseTds2Status = "CHALLENGE"
	PaymentCaptureCardResponseTds2StatusAUTHENTICATED  PaymentCaptureCardResponseTds2Status = "AUTHENTICATED"
)

// AllValues returns all PaymentCaptureCardResponseTds2Status values.
func (PaymentCaptureCardResponseTds2Status) AllValues() []PaymentCaptureCardResponseTds2Status {
	return []PaymentCaptureCardResponseTds2Status{
		PaymentCaptureCardResponseTds2StatusAUTHENTICATING,
		PaymentCaptureCardResponseTds2StatusCHALLENGE,
		PaymentCaptureCardResponseTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardResponseTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardResponseTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case PaymentCaptureCardResponseTds2StatusCHALLENGE:
		return []byte(s), nil
	case PaymentCaptureCardResponseTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardResponseTds2Status) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardResponseTds2Status(data) {
	case PaymentCaptureCardResponseTds2StatusAUTHENTICATING:
		*s = PaymentCaptureCardResponseTds2StatusAUTHENTICATING
		return nil
	case PaymentCaptureCardResponseTds2StatusCHALLENGE:
		*s = PaymentCaptureCardResponseTds2StatusCHALLENGE
		return nil
	case PaymentCaptureCardResponseTds2StatusAUTHENTICATED:
		*s = PaymentCaptureCardResponseTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardResponseTds2Type string

const (
	PaymentCaptureCardResponseTds2Type2 PaymentCaptureCardResponseTds2Type = "2"
	PaymentCaptureCardResponseTds2Type3 PaymentCaptureCardResponseTds2Type = "3"
)

// AllValues returns all PaymentCaptureCardResponseTds2Type values.
func (PaymentCaptureCardResponseTds2Type) AllValues() []PaymentCaptureCardResponseTds2Type {
	return []PaymentCaptureCardResponseTds2Type{
		PaymentCaptureCardResponseTds2Type2,
		PaymentCaptureCardResponseTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardResponseTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardResponseTds2Type2:
		return []byte(s), nil
	case PaymentCaptureCardResponseTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardResponseTds2Type) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardResponseTds2Type(data) {
	case PaymentCaptureCardResponseTds2Type2:
		*s = PaymentCaptureCardResponseTds2Type2
		return nil
	case PaymentCaptureCardResponseTds2Type3:
		*s = PaymentCaptureCardResponseTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCaptureCardResponseTdsType string

const (
	PaymentCaptureCardResponseTdsType0 PaymentCaptureCardResponseTdsType = "0"
	PaymentCaptureCardResponseTdsType2 PaymentCaptureCardResponseTdsType = "2"
)

// AllValues returns all PaymentCaptureCardResponseTdsType values.
func (PaymentCaptureCardResponseTdsType) AllValues() []PaymentCaptureCardResponseTdsType {
	return []PaymentCaptureCardResponseTdsType{
		PaymentCaptureCardResponseTdsType0,
		PaymentCaptureCardResponseTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCaptureCardResponseTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCaptureCardResponseTdsType0:
		return []byte(s), nil
	case PaymentCaptureCardResponseTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCaptureCardResponseTdsType) UnmarshalText(data []byte) error {
	switch PaymentCaptureCardResponseTdsType(data) {
	case PaymentCaptureCardResponseTdsType0:
		*s = PaymentCaptureCardResponseTdsType0
		return nil
	case PaymentCaptureCardResponseTdsType2:
		*s = PaymentCaptureCardResponseTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCard
type PaymentCard struct {
	PayType        PaymentCardPayType        `json:"pay_type"`
	ID             OptString                 `json:"id"`
	JobCode        PaymentCardJobCode        `json:"job_code"`
	Amount         OptString                 `json:"amount"`
	Tax            OptString                 `json:"tax"`
	ClientField1   OptNilString              `json:"client_field_1"`
	ClientField2   OptNilString              `json:"client_field_2"`
	ClientField3   OptNilString              `json:"client_field_3"`
	TdsType        OptPaymentCardTdsType     `json:"tds_type"`
	TdTenamtName   OptNilString              `json:"td_tenamt_name"`
	SubscriptionID OptNilString              `json:"subscription_id"`
	Tds2Type       OptNilPaymentCardTds2Type `json:"tds2_type"`
}

// GetPayType returns the value of PayType.
func (s *PaymentCard) GetPayType() PaymentCardPayType {
	return s.PayType
}

// GetID returns the value of ID.
func (s *PaymentCard) GetID() OptString {
	return s.ID
}

// GetJobCode returns the value of JobCode.
func (s *PaymentCard) GetJobCode() PaymentCardJobCode {
	return s.JobCode
}

// GetAmount returns the value of Amount.
func (s *PaymentCard) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentCard) GetTax() OptString {
	return s.Tax
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentCard) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentCard) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentCard) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetTdsType returns the value of TdsType.
func (s *PaymentCard) GetTdsType() OptPaymentCardTdsType {
	return s.TdsType
}

// GetTdTenamtName returns the value of TdTenamtName.
func (s *PaymentCard) GetTdTenamtName() OptNilString {
	return s.TdTenamtName
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentCard) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentCard) GetTds2Type() OptNilPaymentCardTds2Type {
	return s.Tds2Type
}

// SetPayType sets the value of PayType.
func (s *PaymentCard) SetPayType(val PaymentCardPayType) {
	s.PayType = val
}

// SetID sets the value of ID.
func (s *PaymentCard) SetID(val OptString) {
	s.ID = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentCard) SetJobCode(val PaymentCardJobCode) {
	s.JobCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentCard) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentCard) SetTax(val OptString) {
	s.Tax = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentCard) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentCard) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentCard) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentCard) SetTdsType(val OptPaymentCardTdsType) {
	s.TdsType = val
}

// SetTdTenamtName sets the value of TdTenamtName.
func (s *PaymentCard) SetTdTenamtName(val OptNilString) {
	s.TdTenamtName = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentCard) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentCard) SetTds2Type(val OptNilPaymentCardTds2Type) {
	s.Tds2Type = val
}

type PaymentCardJobCode string

const (
	PaymentCardJobCodeCHECK   PaymentCardJobCode = "CHECK"
	PaymentCardJobCodeAUTH    PaymentCardJobCode = "AUTH"
	PaymentCardJobCodeCAPTURE PaymentCardJobCode = "CAPTURE"
)

// AllValues returns all PaymentCardJobCode values.
func (PaymentCardJobCode) AllValues() []PaymentCardJobCode {
	return []PaymentCardJobCode{
		PaymentCardJobCodeCHECK,
		PaymentCardJobCodeAUTH,
		PaymentCardJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardJobCodeCHECK:
		return []byte(s), nil
	case PaymentCardJobCodeAUTH:
		return []byte(s), nil
	case PaymentCardJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardJobCode) UnmarshalText(data []byte) error {
	switch PaymentCardJobCode(data) {
	case PaymentCardJobCodeCHECK:
		*s = PaymentCardJobCodeCHECK
		return nil
	case PaymentCardJobCodeAUTH:
		*s = PaymentCardJobCodeAUTH
		return nil
	case PaymentCardJobCodeCAPTURE:
		*s = PaymentCardJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardPayType string

const (
	PaymentCardPayTypeCard        PaymentCardPayType = "Card"
	PaymentCardPayTypeDirectdebit PaymentCardPayType = "Directdebit"
)

// AllValues returns all PaymentCardPayType values.
func (PaymentCardPayType) AllValues() []PaymentCardPayType {
	return []PaymentCardPayType{
		PaymentCardPayTypeCard,
		PaymentCardPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardPayTypeCard:
		return []byte(s), nil
	case PaymentCardPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardPayType) UnmarshalText(data []byte) error {
	switch PaymentCardPayType(data) {
	case PaymentCardPayTypeCard:
		*s = PaymentCardPayTypeCard
		return nil
	case PaymentCardPayTypeDirectdebit:
		*s = PaymentCardPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentCardResponse
type PaymentCardResponse struct {
	ShopID          OptString                           `json:"shop_id"`
	ID              OptString                           `json:"id"`
	PayType         OptPaymentCardResponsePayType       `json:"pay_type"`
	Status          OptPaymentCardResponseStatus        `json:"status"`
	AccessID        OptString                           `json:"access_id"`
	ProcessDate     OptString                           `json:"process_date"`
	JobCode         OptPaymentCardResponseJobCode       `json:"job_code"`
	ItemCode        OptString                           `json:"item_code"`
	Amount          OptInt                              `json:"amount"`
	Tax             OptInt                              `json:"tax"`
	TotalAmount     OptInt                              `json:"total_amount"`
	CustomerGroupID OptNilString                        `json:"customer_group_id"`
	CustomerID      OptNilString                        `json:"customer_id"`
	CardNo          OptNilString                        `json:"card_no"`
	CardID          OptNilString                        `json:"card_id"`
	Expire          OptNilString                        `json:"expire"`
	HolderName      OptNilString                        `json:"holder_name"`
	CardNoHash      OptNilString                        `json:"card_no_hash"`
	Method          OptNilPaymentCardResponseMethod     `json:"method"`
	PayTimes        OptNilString                        `json:"pay_times"`
	Forward         OptNilString                        `json:"forward"`
	Issuer          OptNilString                        `json:"issuer"`
	TransactionID   OptNilString                        `json:"transaction_id"`
	Approve         OptNilString                        `json:"approve"`
	AuthMaxDate     OptNilString                        `json:"auth_max_date"`
	ClientField1    OptNilString                        `json:"client_field_1"`
	ClientField2    OptNilString                        `json:"client_field_2"`
	ClientField3    OptNilString                        `json:"client_field_3"`
	TdsType         OptNilPaymentCardResponseTdsType    `json:"tds_type"`
	Tds2Type        OptNilPaymentCardResponseTds2Type   `json:"tds2_type"`
	Tds2RetURL      OptNilString                        `json:"tds2_ret_url"`
	Tds2Status      OptNilPaymentCardResponseTds2Status `json:"tds2_status"`
	MerchantName    OptNilString                        `json:"merchant_name"`
	SendURL         OptNilString                        `json:"send_url"`
	SubscriptionID  OptNilString                        `json:"subscription_id"`
	Brand           OptString                           `json:"brand"`
	ErrorCode       OptNilString                        `json:"error_code"`
	Created         OptNilString                        `json:"created"`
	Updated         OptNilString                        `json:"updated"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentCardResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentCardResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentCardResponse) GetPayType() OptPaymentCardResponsePayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentCardResponse) GetStatus() OptPaymentCardResponseStatus {
	return s.Status
}

// GetAccessID returns the value of AccessID.
func (s *PaymentCardResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentCardResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetJobCode returns the value of JobCode.
func (s *PaymentCardResponse) GetJobCode() OptPaymentCardResponseJobCode {
	return s.JobCode
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentCardResponse) GetItemCode() OptString {
	return s.ItemCode
}

// GetAmount returns the value of Amount.
func (s *PaymentCardResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentCardResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentCardResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentCardResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentCardResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCardNo returns the value of CardNo.
func (s *PaymentCardResponse) GetCardNo() OptNilString {
	return s.CardNo
}

// GetCardID returns the value of CardID.
func (s *PaymentCardResponse) GetCardID() OptNilString {
	return s.CardID
}

// GetExpire returns the value of Expire.
func (s *PaymentCardResponse) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentCardResponse) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentCardResponse) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *PaymentCardResponse) GetMethod() OptNilPaymentCardResponseMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentCardResponse) GetPayTimes() OptNilString {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *PaymentCardResponse) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *PaymentCardResponse) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *PaymentCardResponse) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *PaymentCardResponse) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentCardResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentCardResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentCardResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentCardResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetTdsType returns the value of TdsType.
func (s *PaymentCardResponse) GetTdsType() OptNilPaymentCardResponseTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentCardResponse) GetTds2Type() OptNilPaymentCardResponseTds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *PaymentCardResponse) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentCardResponse) GetTds2Status() OptNilPaymentCardResponseTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentCardResponse) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetSendURL returns the value of SendURL.
func (s *PaymentCardResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentCardResponse) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetBrand returns the value of Brand.
func (s *PaymentCardResponse) GetBrand() OptString {
	return s.Brand
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentCardResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentCardResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentCardResponse) GetUpdated() OptNilString {
	return s.Updated
}

// SetShopID sets the value of ShopID.
func (s *PaymentCardResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentCardResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentCardResponse) SetPayType(val OptPaymentCardResponsePayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentCardResponse) SetStatus(val OptPaymentCardResponseStatus) {
	s.Status = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentCardResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentCardResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentCardResponse) SetJobCode(val OptPaymentCardResponseJobCode) {
	s.JobCode = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentCardResponse) SetItemCode(val OptString) {
	s.ItemCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentCardResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentCardResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentCardResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentCardResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentCardResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCardNo sets the value of CardNo.
func (s *PaymentCardResponse) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetCardID sets the value of CardID.
func (s *PaymentCardResponse) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetExpire sets the value of Expire.
func (s *PaymentCardResponse) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentCardResponse) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentCardResponse) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *PaymentCardResponse) SetMethod(val OptNilPaymentCardResponseMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentCardResponse) SetPayTimes(val OptNilString) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *PaymentCardResponse) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *PaymentCardResponse) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *PaymentCardResponse) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *PaymentCardResponse) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentCardResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentCardResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentCardResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentCardResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentCardResponse) SetTdsType(val OptNilPaymentCardResponseTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentCardResponse) SetTds2Type(val OptNilPaymentCardResponseTds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *PaymentCardResponse) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentCardResponse) SetTds2Status(val OptNilPaymentCardResponseTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentCardResponse) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetSendURL sets the value of SendURL.
func (s *PaymentCardResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentCardResponse) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetBrand sets the value of Brand.
func (s *PaymentCardResponse) SetBrand(val OptString) {
	s.Brand = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentCardResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentCardResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentCardResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

type PaymentCardResponseJobCode string

const (
	PaymentCardResponseJobCodeCHECK   PaymentCardResponseJobCode = "CHECK"
	PaymentCardResponseJobCodeAUTH    PaymentCardResponseJobCode = "AUTH"
	PaymentCardResponseJobCodeCAPTURE PaymentCardResponseJobCode = "CAPTURE"
	PaymentCardResponseJobCodeSALES   PaymentCardResponseJobCode = "SALES"
	PaymentCardResponseJobCodeCANCEL  PaymentCardResponseJobCode = "CANCEL"
)

// AllValues returns all PaymentCardResponseJobCode values.
func (PaymentCardResponseJobCode) AllValues() []PaymentCardResponseJobCode {
	return []PaymentCardResponseJobCode{
		PaymentCardResponseJobCodeCHECK,
		PaymentCardResponseJobCodeAUTH,
		PaymentCardResponseJobCodeCAPTURE,
		PaymentCardResponseJobCodeSALES,
		PaymentCardResponseJobCodeCANCEL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardResponseJobCodeCHECK:
		return []byte(s), nil
	case PaymentCardResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentCardResponseJobCodeCAPTURE:
		return []byte(s), nil
	case PaymentCardResponseJobCodeSALES:
		return []byte(s), nil
	case PaymentCardResponseJobCodeCANCEL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentCardResponseJobCode(data) {
	case PaymentCardResponseJobCodeCHECK:
		*s = PaymentCardResponseJobCodeCHECK
		return nil
	case PaymentCardResponseJobCodeAUTH:
		*s = PaymentCardResponseJobCodeAUTH
		return nil
	case PaymentCardResponseJobCodeCAPTURE:
		*s = PaymentCardResponseJobCodeCAPTURE
		return nil
	case PaymentCardResponseJobCodeSALES:
		*s = PaymentCardResponseJobCodeSALES
		return nil
	case PaymentCardResponseJobCodeCANCEL:
		*s = PaymentCardResponseJobCodeCANCEL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardResponseMethod string

const (
	PaymentCardResponseMethod1 PaymentCardResponseMethod = "1"
	PaymentCardResponseMethod2 PaymentCardResponseMethod = "2"
	PaymentCardResponseMethod5 PaymentCardResponseMethod = "5"
)

// AllValues returns all PaymentCardResponseMethod values.
func (PaymentCardResponseMethod) AllValues() []PaymentCardResponseMethod {
	return []PaymentCardResponseMethod{
		PaymentCardResponseMethod1,
		PaymentCardResponseMethod2,
		PaymentCardResponseMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardResponseMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardResponseMethod1:
		return []byte(s), nil
	case PaymentCardResponseMethod2:
		return []byte(s), nil
	case PaymentCardResponseMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardResponseMethod) UnmarshalText(data []byte) error {
	switch PaymentCardResponseMethod(data) {
	case PaymentCardResponseMethod1:
		*s = PaymentCardResponseMethod1
		return nil
	case PaymentCardResponseMethod2:
		*s = PaymentCardResponseMethod2
		return nil
	case PaymentCardResponseMethod5:
		*s = PaymentCardResponseMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardResponsePayType string

const (
	PaymentCardResponsePayTypeCard        PaymentCardResponsePayType = "Card"
	PaymentCardResponsePayTypeDirectdebit PaymentCardResponsePayType = "Directdebit"
)

// AllValues returns all PaymentCardResponsePayType values.
func (PaymentCardResponsePayType) AllValues() []PaymentCardResponsePayType {
	return []PaymentCardResponsePayType{
		PaymentCardResponsePayTypeCard,
		PaymentCardResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardResponsePayTypeCard:
		return []byte(s), nil
	case PaymentCardResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentCardResponsePayType(data) {
	case PaymentCardResponsePayTypeCard:
		*s = PaymentCardResponsePayTypeCard
		return nil
	case PaymentCardResponsePayTypeDirectdebit:
		*s = PaymentCardResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardResponseStatus string

const (
	PaymentCardResponseStatusUNPROCESSED   PaymentCardResponseStatus = "UNPROCESSED"
	PaymentCardResponseStatusCHECKED       PaymentCardResponseStatus = "CHECKED"
	PaymentCardResponseStatusAUTHORIZED    PaymentCardResponseStatus = "AUTHORIZED"
	PaymentCardResponseStatusCAPTURED      PaymentCardResponseStatus = "CAPTURED"
	PaymentCardResponseStatusCANCELED      PaymentCardResponseStatus = "CANCELED"
	PaymentCardResponseStatusAUTHENTICATED PaymentCardResponseStatus = "AUTHENTICATED"
)

// AllValues returns all PaymentCardResponseStatus values.
func (PaymentCardResponseStatus) AllValues() []PaymentCardResponseStatus {
	return []PaymentCardResponseStatus{
		PaymentCardResponseStatusUNPROCESSED,
		PaymentCardResponseStatusCHECKED,
		PaymentCardResponseStatusAUTHORIZED,
		PaymentCardResponseStatusCAPTURED,
		PaymentCardResponseStatusCANCELED,
		PaymentCardResponseStatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentCardResponseStatusCHECKED:
		return []byte(s), nil
	case PaymentCardResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentCardResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentCardResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentCardResponseStatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentCardResponseStatus(data) {
	case PaymentCardResponseStatusUNPROCESSED:
		*s = PaymentCardResponseStatusUNPROCESSED
		return nil
	case PaymentCardResponseStatusCHECKED:
		*s = PaymentCardResponseStatusCHECKED
		return nil
	case PaymentCardResponseStatusAUTHORIZED:
		*s = PaymentCardResponseStatusAUTHORIZED
		return nil
	case PaymentCardResponseStatusCAPTURED:
		*s = PaymentCardResponseStatusCAPTURED
		return nil
	case PaymentCardResponseStatusCANCELED:
		*s = PaymentCardResponseStatusCANCELED
		return nil
	case PaymentCardResponseStatusAUTHENTICATED:
		*s = PaymentCardResponseStatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardResponseTds2Status string

const (
	PaymentCardResponseTds2StatusAUTHENTICATING PaymentCardResponseTds2Status = "AUTHENTICATING"
	PaymentCardResponseTds2StatusCHALLENGE      PaymentCardResponseTds2Status = "CHALLENGE"
	PaymentCardResponseTds2StatusAUTHENTICATED  PaymentCardResponseTds2Status = "AUTHENTICATED"
)

// AllValues returns all PaymentCardResponseTds2Status values.
func (PaymentCardResponseTds2Status) AllValues() []PaymentCardResponseTds2Status {
	return []PaymentCardResponseTds2Status{
		PaymentCardResponseTds2StatusAUTHENTICATING,
		PaymentCardResponseTds2StatusCHALLENGE,
		PaymentCardResponseTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardResponseTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardResponseTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case PaymentCardResponseTds2StatusCHALLENGE:
		return []byte(s), nil
	case PaymentCardResponseTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardResponseTds2Status) UnmarshalText(data []byte) error {
	switch PaymentCardResponseTds2Status(data) {
	case PaymentCardResponseTds2StatusAUTHENTICATING:
		*s = PaymentCardResponseTds2StatusAUTHENTICATING
		return nil
	case PaymentCardResponseTds2StatusCHALLENGE:
		*s = PaymentCardResponseTds2StatusCHALLENGE
		return nil
	case PaymentCardResponseTds2StatusAUTHENTICATED:
		*s = PaymentCardResponseTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardResponseTds2Type string

const (
	PaymentCardResponseTds2Type2 PaymentCardResponseTds2Type = "2"
	PaymentCardResponseTds2Type3 PaymentCardResponseTds2Type = "3"
)

// AllValues returns all PaymentCardResponseTds2Type values.
func (PaymentCardResponseTds2Type) AllValues() []PaymentCardResponseTds2Type {
	return []PaymentCardResponseTds2Type{
		PaymentCardResponseTds2Type2,
		PaymentCardResponseTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardResponseTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardResponseTds2Type2:
		return []byte(s), nil
	case PaymentCardResponseTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardResponseTds2Type) UnmarshalText(data []byte) error {
	switch PaymentCardResponseTds2Type(data) {
	case PaymentCardResponseTds2Type2:
		*s = PaymentCardResponseTds2Type2
		return nil
	case PaymentCardResponseTds2Type3:
		*s = PaymentCardResponseTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardResponseTdsType string

const (
	PaymentCardResponseTdsType0 PaymentCardResponseTdsType = "0"
	PaymentCardResponseTdsType2 PaymentCardResponseTdsType = "2"
)

// AllValues returns all PaymentCardResponseTdsType values.
func (PaymentCardResponseTdsType) AllValues() []PaymentCardResponseTdsType {
	return []PaymentCardResponseTdsType{
		PaymentCardResponseTdsType0,
		PaymentCardResponseTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardResponseTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardResponseTdsType0:
		return []byte(s), nil
	case PaymentCardResponseTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardResponseTdsType) UnmarshalText(data []byte) error {
	switch PaymentCardResponseTdsType(data) {
	case PaymentCardResponseTdsType0:
		*s = PaymentCardResponseTdsType0
		return nil
	case PaymentCardResponseTdsType2:
		*s = PaymentCardResponseTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardTds2Type string

const (
	PaymentCardTds2Type2 PaymentCardTds2Type = "2"
	PaymentCardTds2Type3 PaymentCardTds2Type = "3"
)

// AllValues returns all PaymentCardTds2Type values.
func (PaymentCardTds2Type) AllValues() []PaymentCardTds2Type {
	return []PaymentCardTds2Type{
		PaymentCardTds2Type2,
		PaymentCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardTds2Type2:
		return []byte(s), nil
	case PaymentCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardTds2Type) UnmarshalText(data []byte) error {
	switch PaymentCardTds2Type(data) {
	case PaymentCardTds2Type2:
		*s = PaymentCardTds2Type2
		return nil
	case PaymentCardTds2Type3:
		*s = PaymentCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentCardTdsType string

const (
	PaymentCardTdsType0 PaymentCardTdsType = "0"
	PaymentCardTdsType2 PaymentCardTdsType = "2"
)

// AllValues returns all PaymentCardTdsType values.
func (PaymentCardTdsType) AllValues() []PaymentCardTdsType {
	return []PaymentCardTdsType{
		PaymentCardTdsType0,
		PaymentCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentCardTdsType0:
		return []byte(s), nil
	case PaymentCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentCardTdsType) UnmarshalText(data []byte) error {
	switch PaymentCardTdsType(data) {
	case PaymentCardTdsType0:
		*s = PaymentCardTdsType0
		return nil
	case PaymentCardTdsType2:
		*s = PaymentCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentDirectdebit
type PaymentDirectdebit struct {
	PayType      PaymentDirectdebitPayType `json:"pay_type"`
	ID           OptString                 `json:"id"`
	Amount       string                    `json:"amount"`
	Tax          OptString                 `json:"tax"`
	Remarks      OptString                 `json:"remarks"`
	ClientField1 OptNilString              `json:"client_field_1"`
	ClientField2 OptNilString              `json:"client_field_2"`
	ClientField3 OptNilString              `json:"client_field_3"`
}

// GetPayType returns the value of PayType.
func (s *PaymentDirectdebit) GetPayType() PaymentDirectdebitPayType {
	return s.PayType
}

// GetID returns the value of ID.
func (s *PaymentDirectdebit) GetID() OptString {
	return s.ID
}

// GetAmount returns the value of Amount.
func (s *PaymentDirectdebit) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentDirectdebit) GetTax() OptString {
	return s.Tax
}

// GetRemarks returns the value of Remarks.
func (s *PaymentDirectdebit) GetRemarks() OptString {
	return s.Remarks
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentDirectdebit) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentDirectdebit) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentDirectdebit) GetClientField3() OptNilString {
	return s.ClientField3
}

// SetPayType sets the value of PayType.
func (s *PaymentDirectdebit) SetPayType(val PaymentDirectdebitPayType) {
	s.PayType = val
}

// SetID sets the value of ID.
func (s *PaymentDirectdebit) SetID(val OptString) {
	s.ID = val
}

// SetAmount sets the value of Amount.
func (s *PaymentDirectdebit) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentDirectdebit) SetTax(val OptString) {
	s.Tax = val
}

// SetRemarks sets the value of Remarks.
func (s *PaymentDirectdebit) SetRemarks(val OptString) {
	s.Remarks = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentDirectdebit) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentDirectdebit) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentDirectdebit) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

type PaymentDirectdebitPayType string

const (
	PaymentDirectdebitPayTypeCard        PaymentDirectdebitPayType = "Card"
	PaymentDirectdebitPayTypeDirectdebit PaymentDirectdebitPayType = "Directdebit"
)

// AllValues returns all PaymentDirectdebitPayType values.
func (PaymentDirectdebitPayType) AllValues() []PaymentDirectdebitPayType {
	return []PaymentDirectdebitPayType{
		PaymentDirectdebitPayTypeCard,
		PaymentDirectdebitPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDirectdebitPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDirectdebitPayTypeCard:
		return []byte(s), nil
	case PaymentDirectdebitPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDirectdebitPayType) UnmarshalText(data []byte) error {
	switch PaymentDirectdebitPayType(data) {
	case PaymentDirectdebitPayTypeCard:
		*s = PaymentDirectdebitPayTypeCard
		return nil
	case PaymentDirectdebitPayTypeDirectdebit:
		*s = PaymentDirectdebitPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentDirectdebitResponse
type PaymentDirectdebitResponse struct {
	ShopID               OptString                               `json:"shop_id"`
	ID                   OptString                               `json:"id"`
	PayType              OptPaymentDirectdebitResponsePayType    `json:"pay_type"`
	Status               OptPaymentDirectdebitResponseStatus     `json:"status"`
	AccessID             OptString                               `json:"access_id"`
	ProcessDate          OptString                               `json:"process_date"`
	Amount               OptInt                                  `json:"amount"`
	Tax                  OptInt                                  `json:"tax"`
	TotalAmount          OptInt                                  `json:"total_amount"`
	CustomerGroupID      OptNilString                            `json:"customer_group_id"`
	CustomerID           OptNilString                            `json:"customer_id"`
	TargetDate           OptString                               `json:"target_date"`
	RequestAcceptEndDate OptString                               `json:"request_accept_end_date"`
	TransferReturnDate   OptString                               `json:"transfer_return_date"`
	PaymentMethodID      OptString                               `json:"payment_method_id"`
	BankCode             OptString                               `json:"bank_code"`
	BankName             OptString                               `json:"bank_name"`
	BranchCode           OptString                               `json:"branch_code"`
	BranchName           OptString                               `json:"branch_name"`
	ClientField1         OptString                               `json:"client_field_1"`
	ClientField2         OptString                               `json:"client_field_2"`
	ClientField3         OptString                               `json:"client_field_3"`
	Remarks              OptString                               `json:"remarks"`
	ResultCode           OptPaymentDirectdebitResponseResultCode `json:"result_code"`
	WithdrawalDate       OptString                               `json:"withdrawal_date"`
	ErrorCode            OptNilString                            `json:"error_code"`
	SubscriptionID       OptNilString                            `json:"subscription_id"`
	Created              OptNilString                            `json:"created"`
	Updated              OptNilString                            `json:"updated"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentDirectdebitResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentDirectdebitResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentDirectdebitResponse) GetPayType() OptPaymentDirectdebitResponsePayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentDirectdebitResponse) GetStatus() OptPaymentDirectdebitResponseStatus {
	return s.Status
}

// GetAccessID returns the value of AccessID.
func (s *PaymentDirectdebitResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentDirectdebitResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetAmount returns the value of Amount.
func (s *PaymentDirectdebitResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentDirectdebitResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentDirectdebitResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentDirectdebitResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentDirectdebitResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetTargetDate returns the value of TargetDate.
func (s *PaymentDirectdebitResponse) GetTargetDate() OptString {
	return s.TargetDate
}

// GetRequestAcceptEndDate returns the value of RequestAcceptEndDate.
func (s *PaymentDirectdebitResponse) GetRequestAcceptEndDate() OptString {
	return s.RequestAcceptEndDate
}

// GetTransferReturnDate returns the value of TransferReturnDate.
func (s *PaymentDirectdebitResponse) GetTransferReturnDate() OptString {
	return s.TransferReturnDate
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *PaymentDirectdebitResponse) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetBankCode returns the value of BankCode.
func (s *PaymentDirectdebitResponse) GetBankCode() OptString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *PaymentDirectdebitResponse) GetBankName() OptString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *PaymentDirectdebitResponse) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *PaymentDirectdebitResponse) GetBranchName() OptString {
	return s.BranchName
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentDirectdebitResponse) GetClientField1() OptString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentDirectdebitResponse) GetClientField2() OptString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentDirectdebitResponse) GetClientField3() OptString {
	return s.ClientField3
}

// GetRemarks returns the value of Remarks.
func (s *PaymentDirectdebitResponse) GetRemarks() OptString {
	return s.Remarks
}

// GetResultCode returns the value of ResultCode.
func (s *PaymentDirectdebitResponse) GetResultCode() OptPaymentDirectdebitResponseResultCode {
	return s.ResultCode
}

// GetWithdrawalDate returns the value of WithdrawalDate.
func (s *PaymentDirectdebitResponse) GetWithdrawalDate() OptString {
	return s.WithdrawalDate
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentDirectdebitResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentDirectdebitResponse) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetCreated returns the value of Created.
func (s *PaymentDirectdebitResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentDirectdebitResponse) GetUpdated() OptNilString {
	return s.Updated
}

// SetShopID sets the value of ShopID.
func (s *PaymentDirectdebitResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentDirectdebitResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentDirectdebitResponse) SetPayType(val OptPaymentDirectdebitResponsePayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentDirectdebitResponse) SetStatus(val OptPaymentDirectdebitResponseStatus) {
	s.Status = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentDirectdebitResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentDirectdebitResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetAmount sets the value of Amount.
func (s *PaymentDirectdebitResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentDirectdebitResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentDirectdebitResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentDirectdebitResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentDirectdebitResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetTargetDate sets the value of TargetDate.
func (s *PaymentDirectdebitResponse) SetTargetDate(val OptString) {
	s.TargetDate = val
}

// SetRequestAcceptEndDate sets the value of RequestAcceptEndDate.
func (s *PaymentDirectdebitResponse) SetRequestAcceptEndDate(val OptString) {
	s.RequestAcceptEndDate = val
}

// SetTransferReturnDate sets the value of TransferReturnDate.
func (s *PaymentDirectdebitResponse) SetTransferReturnDate(val OptString) {
	s.TransferReturnDate = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *PaymentDirectdebitResponse) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetBankCode sets the value of BankCode.
func (s *PaymentDirectdebitResponse) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *PaymentDirectdebitResponse) SetBankName(val OptString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *PaymentDirectdebitResponse) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *PaymentDirectdebitResponse) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentDirectdebitResponse) SetClientField1(val OptString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentDirectdebitResponse) SetClientField2(val OptString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentDirectdebitResponse) SetClientField3(val OptString) {
	s.ClientField3 = val
}

// SetRemarks sets the value of Remarks.
func (s *PaymentDirectdebitResponse) SetRemarks(val OptString) {
	s.Remarks = val
}

// SetResultCode sets the value of ResultCode.
func (s *PaymentDirectdebitResponse) SetResultCode(val OptPaymentDirectdebitResponseResultCode) {
	s.ResultCode = val
}

// SetWithdrawalDate sets the value of WithdrawalDate.
func (s *PaymentDirectdebitResponse) SetWithdrawalDate(val OptString) {
	s.WithdrawalDate = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentDirectdebitResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentDirectdebitResponse) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetCreated sets the value of Created.
func (s *PaymentDirectdebitResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentDirectdebitResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

type PaymentDirectdebitResponsePayType string

const (
	PaymentDirectdebitResponsePayTypeCard        PaymentDirectdebitResponsePayType = "Card"
	PaymentDirectdebitResponsePayTypeDirectdebit PaymentDirectdebitResponsePayType = "Directdebit"
)

// AllValues returns all PaymentDirectdebitResponsePayType values.
func (PaymentDirectdebitResponsePayType) AllValues() []PaymentDirectdebitResponsePayType {
	return []PaymentDirectdebitResponsePayType{
		PaymentDirectdebitResponsePayTypeCard,
		PaymentDirectdebitResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDirectdebitResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDirectdebitResponsePayTypeCard:
		return []byte(s), nil
	case PaymentDirectdebitResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDirectdebitResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentDirectdebitResponsePayType(data) {
	case PaymentDirectdebitResponsePayTypeCard:
		*s = PaymentDirectdebitResponsePayTypeCard
		return nil
	case PaymentDirectdebitResponsePayTypeDirectdebit:
		*s = PaymentDirectdebitResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDirectdebitResponseResultCode string

const (
	PaymentDirectdebitResponseResultCode0 PaymentDirectdebitResponseResultCode = "0"
	PaymentDirectdebitResponseResultCode1 PaymentDirectdebitResponseResultCode = "1"
	PaymentDirectdebitResponseResultCode2 PaymentDirectdebitResponseResultCode = "2"
	PaymentDirectdebitResponseResultCode3 PaymentDirectdebitResponseResultCode = "3"
	PaymentDirectdebitResponseResultCode4 PaymentDirectdebitResponseResultCode = "4"
	PaymentDirectdebitResponseResultCode8 PaymentDirectdebitResponseResultCode = "8"
	PaymentDirectdebitResponseResultCode9 PaymentDirectdebitResponseResultCode = "9"
	PaymentDirectdebitResponseResultCodeE PaymentDirectdebitResponseResultCode = "E"
	PaymentDirectdebitResponseResultCodeN PaymentDirectdebitResponseResultCode = "N"
)

// AllValues returns all PaymentDirectdebitResponseResultCode values.
func (PaymentDirectdebitResponseResultCode) AllValues() []PaymentDirectdebitResponseResultCode {
	return []PaymentDirectdebitResponseResultCode{
		PaymentDirectdebitResponseResultCode0,
		PaymentDirectdebitResponseResultCode1,
		PaymentDirectdebitResponseResultCode2,
		PaymentDirectdebitResponseResultCode3,
		PaymentDirectdebitResponseResultCode4,
		PaymentDirectdebitResponseResultCode8,
		PaymentDirectdebitResponseResultCode9,
		PaymentDirectdebitResponseResultCodeE,
		PaymentDirectdebitResponseResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDirectdebitResponseResultCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDirectdebitResponseResultCode0:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCode1:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCode2:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCode3:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCode4:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCode8:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCode9:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCodeE:
		return []byte(s), nil
	case PaymentDirectdebitResponseResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDirectdebitResponseResultCode) UnmarshalText(data []byte) error {
	switch PaymentDirectdebitResponseResultCode(data) {
	case PaymentDirectdebitResponseResultCode0:
		*s = PaymentDirectdebitResponseResultCode0
		return nil
	case PaymentDirectdebitResponseResultCode1:
		*s = PaymentDirectdebitResponseResultCode1
		return nil
	case PaymentDirectdebitResponseResultCode2:
		*s = PaymentDirectdebitResponseResultCode2
		return nil
	case PaymentDirectdebitResponseResultCode3:
		*s = PaymentDirectdebitResponseResultCode3
		return nil
	case PaymentDirectdebitResponseResultCode4:
		*s = PaymentDirectdebitResponseResultCode4
		return nil
	case PaymentDirectdebitResponseResultCode8:
		*s = PaymentDirectdebitResponseResultCode8
		return nil
	case PaymentDirectdebitResponseResultCode9:
		*s = PaymentDirectdebitResponseResultCode9
		return nil
	case PaymentDirectdebitResponseResultCodeE:
		*s = PaymentDirectdebitResponseResultCodeE
		return nil
	case PaymentDirectdebitResponseResultCodeN:
		*s = PaymentDirectdebitResponseResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDirectdebitResponseStatus string

const (
	PaymentDirectdebitResponseStatusUNPROCESSED             PaymentDirectdebitResponseStatus = "UNPROCESSED"
	PaymentDirectdebitResponseStatusAWAITINGPAYMENTAPPROVAL PaymentDirectdebitResponseStatus = "AWAITING_PAYMENT_APPROVAL"
	PaymentDirectdebitResponseStatusCAPTURED                PaymentDirectdebitResponseStatus = "CAPTURED"
	PaymentDirectdebitResponseStatusCANCELED                PaymentDirectdebitResponseStatus = "CANCELED"
	PaymentDirectdebitResponseStatusFAILED                  PaymentDirectdebitResponseStatus = "FAILED"
)

// AllValues returns all PaymentDirectdebitResponseStatus values.
func (PaymentDirectdebitResponseStatus) AllValues() []PaymentDirectdebitResponseStatus {
	return []PaymentDirectdebitResponseStatus{
		PaymentDirectdebitResponseStatusUNPROCESSED,
		PaymentDirectdebitResponseStatusAWAITINGPAYMENTAPPROVAL,
		PaymentDirectdebitResponseStatusCAPTURED,
		PaymentDirectdebitResponseStatusCANCELED,
		PaymentDirectdebitResponseStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDirectdebitResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDirectdebitResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentDirectdebitResponseStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case PaymentDirectdebitResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentDirectdebitResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentDirectdebitResponseStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDirectdebitResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentDirectdebitResponseStatus(data) {
	case PaymentDirectdebitResponseStatusUNPROCESSED:
		*s = PaymentDirectdebitResponseStatusUNPROCESSED
		return nil
	case PaymentDirectdebitResponseStatusAWAITINGPAYMENTAPPROVAL:
		*s = PaymentDirectdebitResponseStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case PaymentDirectdebitResponseStatusCAPTURED:
		*s = PaymentDirectdebitResponseStatusCAPTURED
		return nil
	case PaymentDirectdebitResponseStatusCANCELED:
		*s = PaymentDirectdebitResponseStatusCANCELED
		return nil
	case PaymentDirectdebitResponseStatusFAILED:
		*s = PaymentDirectdebitResponseStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentDoCardResponse
type PaymentDoCardResponse struct {
	ShopID          OptString                             `json:"shop_id"`
	ID              OptString                             `json:"id"`
	PayType         OptPaymentDoCardResponsePayType       `json:"pay_type"`
	Status          OptPaymentDoCardResponseStatus        `json:"status"`
	AccessID        OptString                             `json:"access_id"`
	ProcessDate     OptString                             `json:"process_date"`
	JobCode         OptPaymentDoCardResponseJobCode       `json:"job_code"`
	ItemCode        OptString                             `json:"item_code"`
	Amount          OptInt                                `json:"amount"`
	Tax             OptInt                                `json:"tax"`
	TotalAmount     OptInt                                `json:"total_amount"`
	CustomerGroupID OptNilString                          `json:"customer_group_id"`
	CustomerID      OptNilString                          `json:"customer_id"`
	CardNo          OptNilString                          `json:"card_no"`
	CardID          OptNilString                          `json:"card_id"`
	Expire          OptNilString                          `json:"expire"`
	HolderName      OptNilString                          `json:"holder_name"`
	CardNoHash      OptNilString                          `json:"card_no_hash"`
	Method          OptNilPaymentDoCardResponseMethod     `json:"method"`
	PayTimes        OptNilString                          `json:"pay_times"`
	Forward         OptNilString                          `json:"forward"`
	Issuer          OptNilString                          `json:"issuer"`
	TransactionID   OptNilString                          `json:"transaction_id"`
	Approve         OptNilString                          `json:"approve"`
	AuthMaxDate     OptNilString                          `json:"auth_max_date"`
	ClientField1    OptNilString                          `json:"client_field_1"`
	ClientField2    OptNilString                          `json:"client_field_2"`
	ClientField3    OptNilString                          `json:"client_field_3"`
	TdsType         OptNilPaymentDoCardResponseTdsType    `json:"tds_type"`
	Tds2Type        OptNilPaymentDoCardResponseTds2Type   `json:"tds2_type"`
	Tds2RetURL      OptNilString                          `json:"tds2_ret_url"`
	Tds2Status      OptNilPaymentDoCardResponseTds2Status `json:"tds2_status"`
	MerchantName    OptNilString                          `json:"merchant_name"`
	SendURL         OptNilString                          `json:"send_url"`
	SubscriptionID  OptNilString                          `json:"subscription_id"`
	Brand           OptString                             `json:"brand"`
	ErrorCode       OptNilString                          `json:"error_code"`
	Created         OptNilString                          `json:"created"`
	Updated         OptNilString                          `json:"updated"`
	Acs             OptNilString                          `json:"acs"`
	AcsURL          OptNilString                          `json:"acs_url"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentDoCardResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentDoCardResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentDoCardResponse) GetPayType() OptPaymentDoCardResponsePayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentDoCardResponse) GetStatus() OptPaymentDoCardResponseStatus {
	return s.Status
}

// GetAccessID returns the value of AccessID.
func (s *PaymentDoCardResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentDoCardResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetJobCode returns the value of JobCode.
func (s *PaymentDoCardResponse) GetJobCode() OptPaymentDoCardResponseJobCode {
	return s.JobCode
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentDoCardResponse) GetItemCode() OptString {
	return s.ItemCode
}

// GetAmount returns the value of Amount.
func (s *PaymentDoCardResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentDoCardResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentDoCardResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentDoCardResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentDoCardResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCardNo returns the value of CardNo.
func (s *PaymentDoCardResponse) GetCardNo() OptNilString {
	return s.CardNo
}

// GetCardID returns the value of CardID.
func (s *PaymentDoCardResponse) GetCardID() OptNilString {
	return s.CardID
}

// GetExpire returns the value of Expire.
func (s *PaymentDoCardResponse) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentDoCardResponse) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentDoCardResponse) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *PaymentDoCardResponse) GetMethod() OptNilPaymentDoCardResponseMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentDoCardResponse) GetPayTimes() OptNilString {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *PaymentDoCardResponse) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *PaymentDoCardResponse) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *PaymentDoCardResponse) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *PaymentDoCardResponse) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentDoCardResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentDoCardResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentDoCardResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentDoCardResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetTdsType returns the value of TdsType.
func (s *PaymentDoCardResponse) GetTdsType() OptNilPaymentDoCardResponseTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentDoCardResponse) GetTds2Type() OptNilPaymentDoCardResponseTds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *PaymentDoCardResponse) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentDoCardResponse) GetTds2Status() OptNilPaymentDoCardResponseTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentDoCardResponse) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetSendURL returns the value of SendURL.
func (s *PaymentDoCardResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentDoCardResponse) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetBrand returns the value of Brand.
func (s *PaymentDoCardResponse) GetBrand() OptString {
	return s.Brand
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentDoCardResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentDoCardResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentDoCardResponse) GetUpdated() OptNilString {
	return s.Updated
}

// GetAcs returns the value of Acs.
func (s *PaymentDoCardResponse) GetAcs() OptNilString {
	return s.Acs
}

// GetAcsURL returns the value of AcsURL.
func (s *PaymentDoCardResponse) GetAcsURL() OptNilString {
	return s.AcsURL
}

// SetShopID sets the value of ShopID.
func (s *PaymentDoCardResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentDoCardResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentDoCardResponse) SetPayType(val OptPaymentDoCardResponsePayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentDoCardResponse) SetStatus(val OptPaymentDoCardResponseStatus) {
	s.Status = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentDoCardResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentDoCardResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentDoCardResponse) SetJobCode(val OptPaymentDoCardResponseJobCode) {
	s.JobCode = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentDoCardResponse) SetItemCode(val OptString) {
	s.ItemCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentDoCardResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentDoCardResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentDoCardResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentDoCardResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentDoCardResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCardNo sets the value of CardNo.
func (s *PaymentDoCardResponse) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetCardID sets the value of CardID.
func (s *PaymentDoCardResponse) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetExpire sets the value of Expire.
func (s *PaymentDoCardResponse) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentDoCardResponse) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentDoCardResponse) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *PaymentDoCardResponse) SetMethod(val OptNilPaymentDoCardResponseMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentDoCardResponse) SetPayTimes(val OptNilString) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *PaymentDoCardResponse) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *PaymentDoCardResponse) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *PaymentDoCardResponse) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *PaymentDoCardResponse) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentDoCardResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentDoCardResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentDoCardResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentDoCardResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentDoCardResponse) SetTdsType(val OptNilPaymentDoCardResponseTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentDoCardResponse) SetTds2Type(val OptNilPaymentDoCardResponseTds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *PaymentDoCardResponse) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentDoCardResponse) SetTds2Status(val OptNilPaymentDoCardResponseTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentDoCardResponse) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetSendURL sets the value of SendURL.
func (s *PaymentDoCardResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentDoCardResponse) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetBrand sets the value of Brand.
func (s *PaymentDoCardResponse) SetBrand(val OptString) {
	s.Brand = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentDoCardResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentDoCardResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentDoCardResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

// SetAcs sets the value of Acs.
func (s *PaymentDoCardResponse) SetAcs(val OptNilString) {
	s.Acs = val
}

// SetAcsURL sets the value of AcsURL.
func (s *PaymentDoCardResponse) SetAcsURL(val OptNilString) {
	s.AcsURL = val
}

type PaymentDoCardResponseJobCode string

const (
	PaymentDoCardResponseJobCodeCHECK   PaymentDoCardResponseJobCode = "CHECK"
	PaymentDoCardResponseJobCodeAUTH    PaymentDoCardResponseJobCode = "AUTH"
	PaymentDoCardResponseJobCodeCAPTURE PaymentDoCardResponseJobCode = "CAPTURE"
	PaymentDoCardResponseJobCodeSALES   PaymentDoCardResponseJobCode = "SALES"
	PaymentDoCardResponseJobCodeCANCEL  PaymentDoCardResponseJobCode = "CANCEL"
)

// AllValues returns all PaymentDoCardResponseJobCode values.
func (PaymentDoCardResponseJobCode) AllValues() []PaymentDoCardResponseJobCode {
	return []PaymentDoCardResponseJobCode{
		PaymentDoCardResponseJobCodeCHECK,
		PaymentDoCardResponseJobCodeAUTH,
		PaymentDoCardResponseJobCodeCAPTURE,
		PaymentDoCardResponseJobCodeSALES,
		PaymentDoCardResponseJobCodeCANCEL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardResponseJobCodeCHECK:
		return []byte(s), nil
	case PaymentDoCardResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentDoCardResponseJobCodeCAPTURE:
		return []byte(s), nil
	case PaymentDoCardResponseJobCodeSALES:
		return []byte(s), nil
	case PaymentDoCardResponseJobCodeCANCEL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentDoCardResponseJobCode(data) {
	case PaymentDoCardResponseJobCodeCHECK:
		*s = PaymentDoCardResponseJobCodeCHECK
		return nil
	case PaymentDoCardResponseJobCodeAUTH:
		*s = PaymentDoCardResponseJobCodeAUTH
		return nil
	case PaymentDoCardResponseJobCodeCAPTURE:
		*s = PaymentDoCardResponseJobCodeCAPTURE
		return nil
	case PaymentDoCardResponseJobCodeSALES:
		*s = PaymentDoCardResponseJobCodeSALES
		return nil
	case PaymentDoCardResponseJobCodeCANCEL:
		*s = PaymentDoCardResponseJobCodeCANCEL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardResponseMethod string

const (
	PaymentDoCardResponseMethod1 PaymentDoCardResponseMethod = "1"
	PaymentDoCardResponseMethod2 PaymentDoCardResponseMethod = "2"
	PaymentDoCardResponseMethod5 PaymentDoCardResponseMethod = "5"
)

// AllValues returns all PaymentDoCardResponseMethod values.
func (PaymentDoCardResponseMethod) AllValues() []PaymentDoCardResponseMethod {
	return []PaymentDoCardResponseMethod{
		PaymentDoCardResponseMethod1,
		PaymentDoCardResponseMethod2,
		PaymentDoCardResponseMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardResponseMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardResponseMethod1:
		return []byte(s), nil
	case PaymentDoCardResponseMethod2:
		return []byte(s), nil
	case PaymentDoCardResponseMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardResponseMethod) UnmarshalText(data []byte) error {
	switch PaymentDoCardResponseMethod(data) {
	case PaymentDoCardResponseMethod1:
		*s = PaymentDoCardResponseMethod1
		return nil
	case PaymentDoCardResponseMethod2:
		*s = PaymentDoCardResponseMethod2
		return nil
	case PaymentDoCardResponseMethod5:
		*s = PaymentDoCardResponseMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardResponsePayType string

const (
	PaymentDoCardResponsePayTypeCard PaymentDoCardResponsePayType = "Card"
)

// AllValues returns all PaymentDoCardResponsePayType values.
func (PaymentDoCardResponsePayType) AllValues() []PaymentDoCardResponsePayType {
	return []PaymentDoCardResponsePayType{
		PaymentDoCardResponsePayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardResponsePayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentDoCardResponsePayType(data) {
	case PaymentDoCardResponsePayTypeCard:
		*s = PaymentDoCardResponsePayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardResponseStatus string

const (
	PaymentDoCardResponseStatusUNPROCESSED   PaymentDoCardResponseStatus = "UNPROCESSED"
	PaymentDoCardResponseStatusCHECKED       PaymentDoCardResponseStatus = "CHECKED"
	PaymentDoCardResponseStatusAUTHORIZED    PaymentDoCardResponseStatus = "AUTHORIZED"
	PaymentDoCardResponseStatusCAPTURED      PaymentDoCardResponseStatus = "CAPTURED"
	PaymentDoCardResponseStatusCANCELED      PaymentDoCardResponseStatus = "CANCELED"
	PaymentDoCardResponseStatusAUTHENTICATED PaymentDoCardResponseStatus = "AUTHENTICATED"
)

// AllValues returns all PaymentDoCardResponseStatus values.
func (PaymentDoCardResponseStatus) AllValues() []PaymentDoCardResponseStatus {
	return []PaymentDoCardResponseStatus{
		PaymentDoCardResponseStatusUNPROCESSED,
		PaymentDoCardResponseStatusCHECKED,
		PaymentDoCardResponseStatusAUTHORIZED,
		PaymentDoCardResponseStatusCAPTURED,
		PaymentDoCardResponseStatusCANCELED,
		PaymentDoCardResponseStatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentDoCardResponseStatusCHECKED:
		return []byte(s), nil
	case PaymentDoCardResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentDoCardResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentDoCardResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentDoCardResponseStatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentDoCardResponseStatus(data) {
	case PaymentDoCardResponseStatusUNPROCESSED:
		*s = PaymentDoCardResponseStatusUNPROCESSED
		return nil
	case PaymentDoCardResponseStatusCHECKED:
		*s = PaymentDoCardResponseStatusCHECKED
		return nil
	case PaymentDoCardResponseStatusAUTHORIZED:
		*s = PaymentDoCardResponseStatusAUTHORIZED
		return nil
	case PaymentDoCardResponseStatusCAPTURED:
		*s = PaymentDoCardResponseStatusCAPTURED
		return nil
	case PaymentDoCardResponseStatusCANCELED:
		*s = PaymentDoCardResponseStatusCANCELED
		return nil
	case PaymentDoCardResponseStatusAUTHENTICATED:
		*s = PaymentDoCardResponseStatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardResponseTds2Status string

const (
	PaymentDoCardResponseTds2StatusAUTHENTICATING PaymentDoCardResponseTds2Status = "AUTHENTICATING"
	PaymentDoCardResponseTds2StatusCHALLENGE      PaymentDoCardResponseTds2Status = "CHALLENGE"
	PaymentDoCardResponseTds2StatusAUTHENTICATED  PaymentDoCardResponseTds2Status = "AUTHENTICATED"
)

// AllValues returns all PaymentDoCardResponseTds2Status values.
func (PaymentDoCardResponseTds2Status) AllValues() []PaymentDoCardResponseTds2Status {
	return []PaymentDoCardResponseTds2Status{
		PaymentDoCardResponseTds2StatusAUTHENTICATING,
		PaymentDoCardResponseTds2StatusCHALLENGE,
		PaymentDoCardResponseTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardResponseTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardResponseTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case PaymentDoCardResponseTds2StatusCHALLENGE:
		return []byte(s), nil
	case PaymentDoCardResponseTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardResponseTds2Status) UnmarshalText(data []byte) error {
	switch PaymentDoCardResponseTds2Status(data) {
	case PaymentDoCardResponseTds2StatusAUTHENTICATING:
		*s = PaymentDoCardResponseTds2StatusAUTHENTICATING
		return nil
	case PaymentDoCardResponseTds2StatusCHALLENGE:
		*s = PaymentDoCardResponseTds2StatusCHALLENGE
		return nil
	case PaymentDoCardResponseTds2StatusAUTHENTICATED:
		*s = PaymentDoCardResponseTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardResponseTds2Type string

const (
	PaymentDoCardResponseTds2Type2 PaymentDoCardResponseTds2Type = "2"
	PaymentDoCardResponseTds2Type3 PaymentDoCardResponseTds2Type = "3"
)

// AllValues returns all PaymentDoCardResponseTds2Type values.
func (PaymentDoCardResponseTds2Type) AllValues() []PaymentDoCardResponseTds2Type {
	return []PaymentDoCardResponseTds2Type{
		PaymentDoCardResponseTds2Type2,
		PaymentDoCardResponseTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardResponseTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardResponseTds2Type2:
		return []byte(s), nil
	case PaymentDoCardResponseTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardResponseTds2Type) UnmarshalText(data []byte) error {
	switch PaymentDoCardResponseTds2Type(data) {
	case PaymentDoCardResponseTds2Type2:
		*s = PaymentDoCardResponseTds2Type2
		return nil
	case PaymentDoCardResponseTds2Type3:
		*s = PaymentDoCardResponseTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardResponseTdsType string

const (
	PaymentDoCardResponseTdsType0 PaymentDoCardResponseTdsType = "0"
	PaymentDoCardResponseTdsType2 PaymentDoCardResponseTdsType = "2"
)

// AllValues returns all PaymentDoCardResponseTdsType values.
func (PaymentDoCardResponseTdsType) AllValues() []PaymentDoCardResponseTdsType {
	return []PaymentDoCardResponseTdsType{
		PaymentDoCardResponseTdsType0,
		PaymentDoCardResponseTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardResponseTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardResponseTdsType0:
		return []byte(s), nil
	case PaymentDoCardResponseTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardResponseTdsType) UnmarshalText(data []byte) error {
	switch PaymentDoCardResponseTdsType(data) {
	case PaymentDoCardResponseTdsType0:
		*s = PaymentDoCardResponseTdsType0
		return nil
	case PaymentDoCardResponseTdsType2:
		*s = PaymentDoCardResponseTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentDoCardWith3DSecure
type PaymentDoCardWith3DSecure struct {
	PayType                     PaymentDoCardWith3DSecurePayType                         `json:"pay_type"`
	AccessID                    string                                                   `json:"access_id"`
	Token                       OptString                                                `json:"token"`
	CustomerID                  OptString                                                `json:"customer_id"`
	CardID                      OptString                                                `json:"card_id"`
	Method                      OptPaymentDoCardWith3DSecureMethod                       `json:"method"`
	PayTimes                    OptNilPaymentDoCardWith3DSecurePayTimes                  `json:"pay_times"`
	Tds2RetURL                  OptNilString                                             `json:"tds2_ret_url"`
	Tds2ChAccChange             OptNilString                                             `json:"tds2_ch_acc_change"`
	Tds2ChAccDate               OptNilString                                             `json:"tds2_ch_acc_date"`
	Tds2ChAccPwChange           OptNilString                                             `json:"tds2_ch_acc_pw_change"`
	Tds2NbPurchaseAccount       OptNilString                                             `json:"tds2_nb_purchase_account"`
	Tds2PurchaseAccAge          OptNilString                                             `json:"tds2_purchase_acc_age"`
	Tds2ProvisionAttemptsDay    OptNilString                                             `json:"tds2_provision_attempts_day"`
	Tds2ShipAddressUsage        OptNilString                                             `json:"tds2_ship_address_usage"`
	Tds2ShipNameInd             OptNilPaymentDoCardWith3DSecureTds2ShipNameInd           `json:"tds2_ship_name_ind"`
	Tds2SuspiciousAccActivity   OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity `json:"tds2_suspicious_acc_activity"`
	Tds2TxnActivityDay          OptNilString                                             `json:"tds2_txn_activity_day"`
	Tds2TxnActivityYear         OptNilString                                             `json:"tds2_txn_activity_year"`
	Tds2ThreeDsReqAuthData      OptNilString                                             `json:"tds2_three_ds_req_auth_data"`
	Td2sThreeDsReqAuthMethod    OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod  `json:"td2s_three_ds_req_auth_method"`
	Tds2ThreeDsReqAuthTimestamp OptNilString                                             `json:"tds2_three_ds_req_auth_timestamp"`
	Tds2AddrMatch               OptNilPaymentDoCardWith3DSecureTds2AddrMatch             `json:"tds2_addr_match"`
	Tds2BillAddrCity            OptNilString                                             `json:"tds2_bill_addr_city"`
	Tds2BillAddrCountry         OptNilString                                             `json:"tds2_bill_addr_country"`
	Tds2BillAddrLine1           OptNilString                                             `json:"tds2_bill_addr_line1"`
	Tds2BillAddrLine2           OptNilString                                             `json:"tds2_bill_addr_line2"`
	Tds2BillAddrLine3           OptNilString                                             `json:"tds2_bill_addr_line3"`
	Tds2BillAddrPostCode        OptNilString                                             `json:"tds2_bill_addr_post_code"`
	Tds2BillAddrState           OptNilString                                             `json:"tds2_bill_addr_state"`
	Tds2Email                   OptNilString                                             `json:"tds2_email"`
	Tds2HomePhoneCc             OptNilString                                             `json:"tds2_home_phone_cc"`
	Tds2HomePhoneNo             OptNilString                                             `json:"tds2_home_phone_no"`
	Tds2MobilePhoneCc           OptNilString                                             `json:"tds2_mobile_phone_cc"`
	Tds2MobilePhoneNo           OptNilString                                             `json:"tds2_mobile_phone_no"`
	Tds2WorkPhoneCc             OptNilString                                             `json:"tds2_work_phone_cc"`
	Tds2WorkPhoneNo             OptNilString                                             `json:"tds2_work_phone_no"`
	Tds2ShipAddrCity            OptNilString                                             `json:"tds2_ship_addr_city"`
	Tds2ShipAddrCountry         OptNilString                                             `json:"tds2_ship_addr_country"`
	Tds2ShipAddrLine1           OptNilString                                             `json:"tds2_ship_addr_line1"`
	Tds2ShipAddrLine2           OptNilString                                             `json:"tds2_ship_addr_line2"`
	Tds2ShipAddrLine3           OptNilString                                             `json:"tds2_ship_addr_line3"`
	Tds2ShipAddrPostCode        OptNilString                                             `json:"tds2_ship_addr_post_code"`
	Tds2ShipAddrState           OptNilString                                             `json:"tds2_ship_addr_state"`
	Tds2DeliveryEmailAddress    OptNilString                                             `json:"tds2_delivery_email_address"`
	Tds2DeliveryTimeframe       OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe     `json:"tds2_delivery_timeframe"`
	Tds2GiftCardAmount          OptNilString                                             `json:"tds2_gift_card_amount"`
	Tds2GiftCardCount           OptNilString                                             `json:"tds2_gift_card_count"`
	Tds2GiftCardCurr            OptNilString                                             `json:"tds2_gift_card_curr"`
	Tds2PreOrderDate            OptNilString                                             `json:"tds2_pre_order_date"`
	Tds2PreOrderPurchaseInd     OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd   `json:"tds2_pre_order_purchase_ind"`
	Tds2ReorderItemsInd         OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd       `json:"tds2_reorder_items_ind"`
	Tds2ShipInd                 OptNilPaymentDoCardWith3DSecureTds2ShipInd               `json:"tds2_ship_ind"`
	Tds2RecurringExpiry         OptNilString                                             `json:"tds2_recurring_expiry"`
	Tds2RecurringFrequncy       OptNilString                                             `json:"tds2_recurring_frequncy"`
}

// GetPayType returns the value of PayType.
func (s *PaymentDoCardWith3DSecure) GetPayType() PaymentDoCardWith3DSecurePayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *PaymentDoCardWith3DSecure) GetAccessID() string {
	return s.AccessID
}

// GetToken returns the value of Token.
func (s *PaymentDoCardWith3DSecure) GetToken() OptString {
	return s.Token
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentDoCardWith3DSecure) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *PaymentDoCardWith3DSecure) GetCardID() OptString {
	return s.CardID
}

// GetMethod returns the value of Method.
func (s *PaymentDoCardWith3DSecure) GetMethod() OptPaymentDoCardWith3DSecureMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentDoCardWith3DSecure) GetPayTimes() OptNilPaymentDoCardWith3DSecurePayTimes {
	return s.PayTimes
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *PaymentDoCardWith3DSecure) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2ChAccChange returns the value of Tds2ChAccChange.
func (s *PaymentDoCardWith3DSecure) GetTds2ChAccChange() OptNilString {
	return s.Tds2ChAccChange
}

// GetTds2ChAccDate returns the value of Tds2ChAccDate.
func (s *PaymentDoCardWith3DSecure) GetTds2ChAccDate() OptNilString {
	return s.Tds2ChAccDate
}

// GetTds2ChAccPwChange returns the value of Tds2ChAccPwChange.
func (s *PaymentDoCardWith3DSecure) GetTds2ChAccPwChange() OptNilString {
	return s.Tds2ChAccPwChange
}

// GetTds2NbPurchaseAccount returns the value of Tds2NbPurchaseAccount.
func (s *PaymentDoCardWith3DSecure) GetTds2NbPurchaseAccount() OptNilString {
	return s.Tds2NbPurchaseAccount
}

// GetTds2PurchaseAccAge returns the value of Tds2PurchaseAccAge.
func (s *PaymentDoCardWith3DSecure) GetTds2PurchaseAccAge() OptNilString {
	return s.Tds2PurchaseAccAge
}

// GetTds2ProvisionAttemptsDay returns the value of Tds2ProvisionAttemptsDay.
func (s *PaymentDoCardWith3DSecure) GetTds2ProvisionAttemptsDay() OptNilString {
	return s.Tds2ProvisionAttemptsDay
}

// GetTds2ShipAddressUsage returns the value of Tds2ShipAddressUsage.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddressUsage() OptNilString {
	return s.Tds2ShipAddressUsage
}

// GetTds2ShipNameInd returns the value of Tds2ShipNameInd.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipNameInd() OptNilPaymentDoCardWith3DSecureTds2ShipNameInd {
	return s.Tds2ShipNameInd
}

// GetTds2SuspiciousAccActivity returns the value of Tds2SuspiciousAccActivity.
func (s *PaymentDoCardWith3DSecure) GetTds2SuspiciousAccActivity() OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity {
	return s.Tds2SuspiciousAccActivity
}

// GetTds2TxnActivityDay returns the value of Tds2TxnActivityDay.
func (s *PaymentDoCardWith3DSecure) GetTds2TxnActivityDay() OptNilString {
	return s.Tds2TxnActivityDay
}

// GetTds2TxnActivityYear returns the value of Tds2TxnActivityYear.
func (s *PaymentDoCardWith3DSecure) GetTds2TxnActivityYear() OptNilString {
	return s.Tds2TxnActivityYear
}

// GetTds2ThreeDsReqAuthData returns the value of Tds2ThreeDsReqAuthData.
func (s *PaymentDoCardWith3DSecure) GetTds2ThreeDsReqAuthData() OptNilString {
	return s.Tds2ThreeDsReqAuthData
}

// GetTd2sThreeDsReqAuthMethod returns the value of Td2sThreeDsReqAuthMethod.
func (s *PaymentDoCardWith3DSecure) GetTd2sThreeDsReqAuthMethod() OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod {
	return s.Td2sThreeDsReqAuthMethod
}

// GetTds2ThreeDsReqAuthTimestamp returns the value of Tds2ThreeDsReqAuthTimestamp.
func (s *PaymentDoCardWith3DSecure) GetTds2ThreeDsReqAuthTimestamp() OptNilString {
	return s.Tds2ThreeDsReqAuthTimestamp
}

// GetTds2AddrMatch returns the value of Tds2AddrMatch.
func (s *PaymentDoCardWith3DSecure) GetTds2AddrMatch() OptNilPaymentDoCardWith3DSecureTds2AddrMatch {
	return s.Tds2AddrMatch
}

// GetTds2BillAddrCity returns the value of Tds2BillAddrCity.
func (s *PaymentDoCardWith3DSecure) GetTds2BillAddrCity() OptNilString {
	return s.Tds2BillAddrCity
}

// GetTds2BillAddrCountry returns the value of Tds2BillAddrCountry.
func (s *PaymentDoCardWith3DSecure) GetTds2BillAddrCountry() OptNilString {
	return s.Tds2BillAddrCountry
}

// GetTds2BillAddrLine1 returns the value of Tds2BillAddrLine1.
func (s *PaymentDoCardWith3DSecure) GetTds2BillAddrLine1() OptNilString {
	return s.Tds2BillAddrLine1
}

// GetTds2BillAddrLine2 returns the value of Tds2BillAddrLine2.
func (s *PaymentDoCardWith3DSecure) GetTds2BillAddrLine2() OptNilString {
	return s.Tds2BillAddrLine2
}

// GetTds2BillAddrLine3 returns the value of Tds2BillAddrLine3.
func (s *PaymentDoCardWith3DSecure) GetTds2BillAddrLine3() OptNilString {
	return s.Tds2BillAddrLine3
}

// GetTds2BillAddrPostCode returns the value of Tds2BillAddrPostCode.
func (s *PaymentDoCardWith3DSecure) GetTds2BillAddrPostCode() OptNilString {
	return s.Tds2BillAddrPostCode
}

// GetTds2BillAddrState returns the value of Tds2BillAddrState.
func (s *PaymentDoCardWith3DSecure) GetTds2BillAddrState() OptNilString {
	return s.Tds2BillAddrState
}

// GetTds2Email returns the value of Tds2Email.
func (s *PaymentDoCardWith3DSecure) GetTds2Email() OptNilString {
	return s.Tds2Email
}

// GetTds2HomePhoneCc returns the value of Tds2HomePhoneCc.
func (s *PaymentDoCardWith3DSecure) GetTds2HomePhoneCc() OptNilString {
	return s.Tds2HomePhoneCc
}

// GetTds2HomePhoneNo returns the value of Tds2HomePhoneNo.
func (s *PaymentDoCardWith3DSecure) GetTds2HomePhoneNo() OptNilString {
	return s.Tds2HomePhoneNo
}

// GetTds2MobilePhoneCc returns the value of Tds2MobilePhoneCc.
func (s *PaymentDoCardWith3DSecure) GetTds2MobilePhoneCc() OptNilString {
	return s.Tds2MobilePhoneCc
}

// GetTds2MobilePhoneNo returns the value of Tds2MobilePhoneNo.
func (s *PaymentDoCardWith3DSecure) GetTds2MobilePhoneNo() OptNilString {
	return s.Tds2MobilePhoneNo
}

// GetTds2WorkPhoneCc returns the value of Tds2WorkPhoneCc.
func (s *PaymentDoCardWith3DSecure) GetTds2WorkPhoneCc() OptNilString {
	return s.Tds2WorkPhoneCc
}

// GetTds2WorkPhoneNo returns the value of Tds2WorkPhoneNo.
func (s *PaymentDoCardWith3DSecure) GetTds2WorkPhoneNo() OptNilString {
	return s.Tds2WorkPhoneNo
}

// GetTds2ShipAddrCity returns the value of Tds2ShipAddrCity.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddrCity() OptNilString {
	return s.Tds2ShipAddrCity
}

// GetTds2ShipAddrCountry returns the value of Tds2ShipAddrCountry.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddrCountry() OptNilString {
	return s.Tds2ShipAddrCountry
}

// GetTds2ShipAddrLine1 returns the value of Tds2ShipAddrLine1.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddrLine1() OptNilString {
	return s.Tds2ShipAddrLine1
}

// GetTds2ShipAddrLine2 returns the value of Tds2ShipAddrLine2.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddrLine2() OptNilString {
	return s.Tds2ShipAddrLine2
}

// GetTds2ShipAddrLine3 returns the value of Tds2ShipAddrLine3.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddrLine3() OptNilString {
	return s.Tds2ShipAddrLine3
}

// GetTds2ShipAddrPostCode returns the value of Tds2ShipAddrPostCode.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddrPostCode() OptNilString {
	return s.Tds2ShipAddrPostCode
}

// GetTds2ShipAddrState returns the value of Tds2ShipAddrState.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipAddrState() OptNilString {
	return s.Tds2ShipAddrState
}

// GetTds2DeliveryEmailAddress returns the value of Tds2DeliveryEmailAddress.
func (s *PaymentDoCardWith3DSecure) GetTds2DeliveryEmailAddress() OptNilString {
	return s.Tds2DeliveryEmailAddress
}

// GetTds2DeliveryTimeframe returns the value of Tds2DeliveryTimeframe.
func (s *PaymentDoCardWith3DSecure) GetTds2DeliveryTimeframe() OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe {
	return s.Tds2DeliveryTimeframe
}

// GetTds2GiftCardAmount returns the value of Tds2GiftCardAmount.
func (s *PaymentDoCardWith3DSecure) GetTds2GiftCardAmount() OptNilString {
	return s.Tds2GiftCardAmount
}

// GetTds2GiftCardCount returns the value of Tds2GiftCardCount.
func (s *PaymentDoCardWith3DSecure) GetTds2GiftCardCount() OptNilString {
	return s.Tds2GiftCardCount
}

// GetTds2GiftCardCurr returns the value of Tds2GiftCardCurr.
func (s *PaymentDoCardWith3DSecure) GetTds2GiftCardCurr() OptNilString {
	return s.Tds2GiftCardCurr
}

// GetTds2PreOrderDate returns the value of Tds2PreOrderDate.
func (s *PaymentDoCardWith3DSecure) GetTds2PreOrderDate() OptNilString {
	return s.Tds2PreOrderDate
}

// GetTds2PreOrderPurchaseInd returns the value of Tds2PreOrderPurchaseInd.
func (s *PaymentDoCardWith3DSecure) GetTds2PreOrderPurchaseInd() OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd {
	return s.Tds2PreOrderPurchaseInd
}

// GetTds2ReorderItemsInd returns the value of Tds2ReorderItemsInd.
func (s *PaymentDoCardWith3DSecure) GetTds2ReorderItemsInd() OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd {
	return s.Tds2ReorderItemsInd
}

// GetTds2ShipInd returns the value of Tds2ShipInd.
func (s *PaymentDoCardWith3DSecure) GetTds2ShipInd() OptNilPaymentDoCardWith3DSecureTds2ShipInd {
	return s.Tds2ShipInd
}

// GetTds2RecurringExpiry returns the value of Tds2RecurringExpiry.
func (s *PaymentDoCardWith3DSecure) GetTds2RecurringExpiry() OptNilString {
	return s.Tds2RecurringExpiry
}

// GetTds2RecurringFrequncy returns the value of Tds2RecurringFrequncy.
func (s *PaymentDoCardWith3DSecure) GetTds2RecurringFrequncy() OptNilString {
	return s.Tds2RecurringFrequncy
}

// SetPayType sets the value of PayType.
func (s *PaymentDoCardWith3DSecure) SetPayType(val PaymentDoCardWith3DSecurePayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentDoCardWith3DSecure) SetAccessID(val string) {
	s.AccessID = val
}

// SetToken sets the value of Token.
func (s *PaymentDoCardWith3DSecure) SetToken(val OptString) {
	s.Token = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentDoCardWith3DSecure) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *PaymentDoCardWith3DSecure) SetCardID(val OptString) {
	s.CardID = val
}

// SetMethod sets the value of Method.
func (s *PaymentDoCardWith3DSecure) SetMethod(val OptPaymentDoCardWith3DSecureMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentDoCardWith3DSecure) SetPayTimes(val OptNilPaymentDoCardWith3DSecurePayTimes) {
	s.PayTimes = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *PaymentDoCardWith3DSecure) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2ChAccChange sets the value of Tds2ChAccChange.
func (s *PaymentDoCardWith3DSecure) SetTds2ChAccChange(val OptNilString) {
	s.Tds2ChAccChange = val
}

// SetTds2ChAccDate sets the value of Tds2ChAccDate.
func (s *PaymentDoCardWith3DSecure) SetTds2ChAccDate(val OptNilString) {
	s.Tds2ChAccDate = val
}

// SetTds2ChAccPwChange sets the value of Tds2ChAccPwChange.
func (s *PaymentDoCardWith3DSecure) SetTds2ChAccPwChange(val OptNilString) {
	s.Tds2ChAccPwChange = val
}

// SetTds2NbPurchaseAccount sets the value of Tds2NbPurchaseAccount.
func (s *PaymentDoCardWith3DSecure) SetTds2NbPurchaseAccount(val OptNilString) {
	s.Tds2NbPurchaseAccount = val
}

// SetTds2PurchaseAccAge sets the value of Tds2PurchaseAccAge.
func (s *PaymentDoCardWith3DSecure) SetTds2PurchaseAccAge(val OptNilString) {
	s.Tds2PurchaseAccAge = val
}

// SetTds2ProvisionAttemptsDay sets the value of Tds2ProvisionAttemptsDay.
func (s *PaymentDoCardWith3DSecure) SetTds2ProvisionAttemptsDay(val OptNilString) {
	s.Tds2ProvisionAttemptsDay = val
}

// SetTds2ShipAddressUsage sets the value of Tds2ShipAddressUsage.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddressUsage(val OptNilString) {
	s.Tds2ShipAddressUsage = val
}

// SetTds2ShipNameInd sets the value of Tds2ShipNameInd.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipNameInd(val OptNilPaymentDoCardWith3DSecureTds2ShipNameInd) {
	s.Tds2ShipNameInd = val
}

// SetTds2SuspiciousAccActivity sets the value of Tds2SuspiciousAccActivity.
func (s *PaymentDoCardWith3DSecure) SetTds2SuspiciousAccActivity(val OptNilPaymentDoCardWith3DSecureTds2SuspiciousAccActivity) {
	s.Tds2SuspiciousAccActivity = val
}

// SetTds2TxnActivityDay sets the value of Tds2TxnActivityDay.
func (s *PaymentDoCardWith3DSecure) SetTds2TxnActivityDay(val OptNilString) {
	s.Tds2TxnActivityDay = val
}

// SetTds2TxnActivityYear sets the value of Tds2TxnActivityYear.
func (s *PaymentDoCardWith3DSecure) SetTds2TxnActivityYear(val OptNilString) {
	s.Tds2TxnActivityYear = val
}

// SetTds2ThreeDsReqAuthData sets the value of Tds2ThreeDsReqAuthData.
func (s *PaymentDoCardWith3DSecure) SetTds2ThreeDsReqAuthData(val OptNilString) {
	s.Tds2ThreeDsReqAuthData = val
}

// SetTd2sThreeDsReqAuthMethod sets the value of Td2sThreeDsReqAuthMethod.
func (s *PaymentDoCardWith3DSecure) SetTd2sThreeDsReqAuthMethod(val OptNilPaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) {
	s.Td2sThreeDsReqAuthMethod = val
}

// SetTds2ThreeDsReqAuthTimestamp sets the value of Tds2ThreeDsReqAuthTimestamp.
func (s *PaymentDoCardWith3DSecure) SetTds2ThreeDsReqAuthTimestamp(val OptNilString) {
	s.Tds2ThreeDsReqAuthTimestamp = val
}

// SetTds2AddrMatch sets the value of Tds2AddrMatch.
func (s *PaymentDoCardWith3DSecure) SetTds2AddrMatch(val OptNilPaymentDoCardWith3DSecureTds2AddrMatch) {
	s.Tds2AddrMatch = val
}

// SetTds2BillAddrCity sets the value of Tds2BillAddrCity.
func (s *PaymentDoCardWith3DSecure) SetTds2BillAddrCity(val OptNilString) {
	s.Tds2BillAddrCity = val
}

// SetTds2BillAddrCountry sets the value of Tds2BillAddrCountry.
func (s *PaymentDoCardWith3DSecure) SetTds2BillAddrCountry(val OptNilString) {
	s.Tds2BillAddrCountry = val
}

// SetTds2BillAddrLine1 sets the value of Tds2BillAddrLine1.
func (s *PaymentDoCardWith3DSecure) SetTds2BillAddrLine1(val OptNilString) {
	s.Tds2BillAddrLine1 = val
}

// SetTds2BillAddrLine2 sets the value of Tds2BillAddrLine2.
func (s *PaymentDoCardWith3DSecure) SetTds2BillAddrLine2(val OptNilString) {
	s.Tds2BillAddrLine2 = val
}

// SetTds2BillAddrLine3 sets the value of Tds2BillAddrLine3.
func (s *PaymentDoCardWith3DSecure) SetTds2BillAddrLine3(val OptNilString) {
	s.Tds2BillAddrLine3 = val
}

// SetTds2BillAddrPostCode sets the value of Tds2BillAddrPostCode.
func (s *PaymentDoCardWith3DSecure) SetTds2BillAddrPostCode(val OptNilString) {
	s.Tds2BillAddrPostCode = val
}

// SetTds2BillAddrState sets the value of Tds2BillAddrState.
func (s *PaymentDoCardWith3DSecure) SetTds2BillAddrState(val OptNilString) {
	s.Tds2BillAddrState = val
}

// SetTds2Email sets the value of Tds2Email.
func (s *PaymentDoCardWith3DSecure) SetTds2Email(val OptNilString) {
	s.Tds2Email = val
}

// SetTds2HomePhoneCc sets the value of Tds2HomePhoneCc.
func (s *PaymentDoCardWith3DSecure) SetTds2HomePhoneCc(val OptNilString) {
	s.Tds2HomePhoneCc = val
}

// SetTds2HomePhoneNo sets the value of Tds2HomePhoneNo.
func (s *PaymentDoCardWith3DSecure) SetTds2HomePhoneNo(val OptNilString) {
	s.Tds2HomePhoneNo = val
}

// SetTds2MobilePhoneCc sets the value of Tds2MobilePhoneCc.
func (s *PaymentDoCardWith3DSecure) SetTds2MobilePhoneCc(val OptNilString) {
	s.Tds2MobilePhoneCc = val
}

// SetTds2MobilePhoneNo sets the value of Tds2MobilePhoneNo.
func (s *PaymentDoCardWith3DSecure) SetTds2MobilePhoneNo(val OptNilString) {
	s.Tds2MobilePhoneNo = val
}

// SetTds2WorkPhoneCc sets the value of Tds2WorkPhoneCc.
func (s *PaymentDoCardWith3DSecure) SetTds2WorkPhoneCc(val OptNilString) {
	s.Tds2WorkPhoneCc = val
}

// SetTds2WorkPhoneNo sets the value of Tds2WorkPhoneNo.
func (s *PaymentDoCardWith3DSecure) SetTds2WorkPhoneNo(val OptNilString) {
	s.Tds2WorkPhoneNo = val
}

// SetTds2ShipAddrCity sets the value of Tds2ShipAddrCity.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddrCity(val OptNilString) {
	s.Tds2ShipAddrCity = val
}

// SetTds2ShipAddrCountry sets the value of Tds2ShipAddrCountry.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddrCountry(val OptNilString) {
	s.Tds2ShipAddrCountry = val
}

// SetTds2ShipAddrLine1 sets the value of Tds2ShipAddrLine1.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddrLine1(val OptNilString) {
	s.Tds2ShipAddrLine1 = val
}

// SetTds2ShipAddrLine2 sets the value of Tds2ShipAddrLine2.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddrLine2(val OptNilString) {
	s.Tds2ShipAddrLine2 = val
}

// SetTds2ShipAddrLine3 sets the value of Tds2ShipAddrLine3.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddrLine3(val OptNilString) {
	s.Tds2ShipAddrLine3 = val
}

// SetTds2ShipAddrPostCode sets the value of Tds2ShipAddrPostCode.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddrPostCode(val OptNilString) {
	s.Tds2ShipAddrPostCode = val
}

// SetTds2ShipAddrState sets the value of Tds2ShipAddrState.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipAddrState(val OptNilString) {
	s.Tds2ShipAddrState = val
}

// SetTds2DeliveryEmailAddress sets the value of Tds2DeliveryEmailAddress.
func (s *PaymentDoCardWith3DSecure) SetTds2DeliveryEmailAddress(val OptNilString) {
	s.Tds2DeliveryEmailAddress = val
}

// SetTds2DeliveryTimeframe sets the value of Tds2DeliveryTimeframe.
func (s *PaymentDoCardWith3DSecure) SetTds2DeliveryTimeframe(val OptNilPaymentDoCardWith3DSecureTds2DeliveryTimeframe) {
	s.Tds2DeliveryTimeframe = val
}

// SetTds2GiftCardAmount sets the value of Tds2GiftCardAmount.
func (s *PaymentDoCardWith3DSecure) SetTds2GiftCardAmount(val OptNilString) {
	s.Tds2GiftCardAmount = val
}

// SetTds2GiftCardCount sets the value of Tds2GiftCardCount.
func (s *PaymentDoCardWith3DSecure) SetTds2GiftCardCount(val OptNilString) {
	s.Tds2GiftCardCount = val
}

// SetTds2GiftCardCurr sets the value of Tds2GiftCardCurr.
func (s *PaymentDoCardWith3DSecure) SetTds2GiftCardCurr(val OptNilString) {
	s.Tds2GiftCardCurr = val
}

// SetTds2PreOrderDate sets the value of Tds2PreOrderDate.
func (s *PaymentDoCardWith3DSecure) SetTds2PreOrderDate(val OptNilString) {
	s.Tds2PreOrderDate = val
}

// SetTds2PreOrderPurchaseInd sets the value of Tds2PreOrderPurchaseInd.
func (s *PaymentDoCardWith3DSecure) SetTds2PreOrderPurchaseInd(val OptNilPaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) {
	s.Tds2PreOrderPurchaseInd = val
}

// SetTds2ReorderItemsInd sets the value of Tds2ReorderItemsInd.
func (s *PaymentDoCardWith3DSecure) SetTds2ReorderItemsInd(val OptNilPaymentDoCardWith3DSecureTds2ReorderItemsInd) {
	s.Tds2ReorderItemsInd = val
}

// SetTds2ShipInd sets the value of Tds2ShipInd.
func (s *PaymentDoCardWith3DSecure) SetTds2ShipInd(val OptNilPaymentDoCardWith3DSecureTds2ShipInd) {
	s.Tds2ShipInd = val
}

// SetTds2RecurringExpiry sets the value of Tds2RecurringExpiry.
func (s *PaymentDoCardWith3DSecure) SetTds2RecurringExpiry(val OptNilString) {
	s.Tds2RecurringExpiry = val
}

// SetTds2RecurringFrequncy sets the value of Tds2RecurringFrequncy.
func (s *PaymentDoCardWith3DSecure) SetTds2RecurringFrequncy(val OptNilString) {
	s.Tds2RecurringFrequncy = val
}

type PaymentDoCardWith3DSecureMethod string

const (
	PaymentDoCardWith3DSecureMethod1 PaymentDoCardWith3DSecureMethod = "1"
	PaymentDoCardWith3DSecureMethod2 PaymentDoCardWith3DSecureMethod = "2"
	PaymentDoCardWith3DSecureMethod5 PaymentDoCardWith3DSecureMethod = "5"
)

// AllValues returns all PaymentDoCardWith3DSecureMethod values.
func (PaymentDoCardWith3DSecureMethod) AllValues() []PaymentDoCardWith3DSecureMethod {
	return []PaymentDoCardWith3DSecureMethod{
		PaymentDoCardWith3DSecureMethod1,
		PaymentDoCardWith3DSecureMethod2,
		PaymentDoCardWith3DSecureMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureMethod1:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureMethod2:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureMethod) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureMethod(data) {
	case PaymentDoCardWith3DSecureMethod1:
		*s = PaymentDoCardWith3DSecureMethod1
		return nil
	case PaymentDoCardWith3DSecureMethod2:
		*s = PaymentDoCardWith3DSecureMethod2
		return nil
	case PaymentDoCardWith3DSecureMethod5:
		*s = PaymentDoCardWith3DSecureMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecurePayTimes string

const (
	PaymentDoCardWith3DSecurePayTimes3  PaymentDoCardWith3DSecurePayTimes = "3"
	PaymentDoCardWith3DSecurePayTimes5  PaymentDoCardWith3DSecurePayTimes = "5"
	PaymentDoCardWith3DSecurePayTimes6  PaymentDoCardWith3DSecurePayTimes = "6"
	PaymentDoCardWith3DSecurePayTimes10 PaymentDoCardWith3DSecurePayTimes = "10"
	PaymentDoCardWith3DSecurePayTimes12 PaymentDoCardWith3DSecurePayTimes = "12"
	PaymentDoCardWith3DSecurePayTimes15 PaymentDoCardWith3DSecurePayTimes = "15"
	PaymentDoCardWith3DSecurePayTimes18 PaymentDoCardWith3DSecurePayTimes = "18"
	PaymentDoCardWith3DSecurePayTimes20 PaymentDoCardWith3DSecurePayTimes = "20"
	PaymentDoCardWith3DSecurePayTimes24 PaymentDoCardWith3DSecurePayTimes = "24"
)

// AllValues returns all PaymentDoCardWith3DSecurePayTimes values.
func (PaymentDoCardWith3DSecurePayTimes) AllValues() []PaymentDoCardWith3DSecurePayTimes {
	return []PaymentDoCardWith3DSecurePayTimes{
		PaymentDoCardWith3DSecurePayTimes3,
		PaymentDoCardWith3DSecurePayTimes5,
		PaymentDoCardWith3DSecurePayTimes6,
		PaymentDoCardWith3DSecurePayTimes10,
		PaymentDoCardWith3DSecurePayTimes12,
		PaymentDoCardWith3DSecurePayTimes15,
		PaymentDoCardWith3DSecurePayTimes18,
		PaymentDoCardWith3DSecurePayTimes20,
		PaymentDoCardWith3DSecurePayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecurePayTimes) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecurePayTimes3:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes5:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes6:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes10:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes12:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes15:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes18:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes20:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecurePayTimes) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecurePayTimes(data) {
	case PaymentDoCardWith3DSecurePayTimes3:
		*s = PaymentDoCardWith3DSecurePayTimes3
		return nil
	case PaymentDoCardWith3DSecurePayTimes5:
		*s = PaymentDoCardWith3DSecurePayTimes5
		return nil
	case PaymentDoCardWith3DSecurePayTimes6:
		*s = PaymentDoCardWith3DSecurePayTimes6
		return nil
	case PaymentDoCardWith3DSecurePayTimes10:
		*s = PaymentDoCardWith3DSecurePayTimes10
		return nil
	case PaymentDoCardWith3DSecurePayTimes12:
		*s = PaymentDoCardWith3DSecurePayTimes12
		return nil
	case PaymentDoCardWith3DSecurePayTimes15:
		*s = PaymentDoCardWith3DSecurePayTimes15
		return nil
	case PaymentDoCardWith3DSecurePayTimes18:
		*s = PaymentDoCardWith3DSecurePayTimes18
		return nil
	case PaymentDoCardWith3DSecurePayTimes20:
		*s = PaymentDoCardWith3DSecurePayTimes20
		return nil
	case PaymentDoCardWith3DSecurePayTimes24:
		*s = PaymentDoCardWith3DSecurePayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecurePayType string

const (
	PaymentDoCardWith3DSecurePayTypeCard        PaymentDoCardWith3DSecurePayType = "Card"
	PaymentDoCardWith3DSecurePayTypeDirectdebit PaymentDoCardWith3DSecurePayType = "Directdebit"
)

// AllValues returns all PaymentDoCardWith3DSecurePayType values.
func (PaymentDoCardWith3DSecurePayType) AllValues() []PaymentDoCardWith3DSecurePayType {
	return []PaymentDoCardWith3DSecurePayType{
		PaymentDoCardWith3DSecurePayTypeCard,
		PaymentDoCardWith3DSecurePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecurePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecurePayTypeCard:
		return []byte(s), nil
	case PaymentDoCardWith3DSecurePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecurePayType) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecurePayType(data) {
	case PaymentDoCardWith3DSecurePayTypeCard:
		*s = PaymentDoCardWith3DSecurePayTypeCard
		return nil
	case PaymentDoCardWith3DSecurePayTypeDirectdebit:
		*s = PaymentDoCardWith3DSecurePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod string

const (
	PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod01 PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod = "01"
	PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod02 PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod = "02"
	PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod03 PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod = "03"
	PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod04 PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod = "04"
	PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod05 PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod = "05"
	PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod06 PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod = "06"
)

// AllValues returns all PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod values.
func (PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) AllValues() []PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod {
	return []PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod{
		PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod01,
		PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod02,
		PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod03,
		PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod04,
		PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod05,
		PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod06,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod01:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod02:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod03:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod04:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod05:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod06:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod(data) {
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod01:
		*s = PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod01
		return nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod02:
		*s = PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod02
		return nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod03:
		*s = PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod03
		return nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod04:
		*s = PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod04
		return nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod05:
		*s = PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod05
		return nil
	case PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod06:
		*s = PaymentDoCardWith3DSecureTd2sThreeDsReqAuthMethod06
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTds2AddrMatch string

const (
	PaymentDoCardWith3DSecureTds2AddrMatchY PaymentDoCardWith3DSecureTds2AddrMatch = "Y"
	PaymentDoCardWith3DSecureTds2AddrMatchN PaymentDoCardWith3DSecureTds2AddrMatch = "N"
)

// AllValues returns all PaymentDoCardWith3DSecureTds2AddrMatch values.
func (PaymentDoCardWith3DSecureTds2AddrMatch) AllValues() []PaymentDoCardWith3DSecureTds2AddrMatch {
	return []PaymentDoCardWith3DSecureTds2AddrMatch{
		PaymentDoCardWith3DSecureTds2AddrMatchY,
		PaymentDoCardWith3DSecureTds2AddrMatchN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTds2AddrMatch) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTds2AddrMatchY:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2AddrMatchN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTds2AddrMatch) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTds2AddrMatch(data) {
	case PaymentDoCardWith3DSecureTds2AddrMatchY:
		*s = PaymentDoCardWith3DSecureTds2AddrMatchY
		return nil
	case PaymentDoCardWith3DSecureTds2AddrMatchN:
		*s = PaymentDoCardWith3DSecureTds2AddrMatchN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTds2DeliveryTimeframe string

const (
	PaymentDoCardWith3DSecureTds2DeliveryTimeframe01 PaymentDoCardWith3DSecureTds2DeliveryTimeframe = "01"
	PaymentDoCardWith3DSecureTds2DeliveryTimeframe02 PaymentDoCardWith3DSecureTds2DeliveryTimeframe = "02"
	PaymentDoCardWith3DSecureTds2DeliveryTimeframe03 PaymentDoCardWith3DSecureTds2DeliveryTimeframe = "03"
	PaymentDoCardWith3DSecureTds2DeliveryTimeframe04 PaymentDoCardWith3DSecureTds2DeliveryTimeframe = "04"
)

// AllValues returns all PaymentDoCardWith3DSecureTds2DeliveryTimeframe values.
func (PaymentDoCardWith3DSecureTds2DeliveryTimeframe) AllValues() []PaymentDoCardWith3DSecureTds2DeliveryTimeframe {
	return []PaymentDoCardWith3DSecureTds2DeliveryTimeframe{
		PaymentDoCardWith3DSecureTds2DeliveryTimeframe01,
		PaymentDoCardWith3DSecureTds2DeliveryTimeframe02,
		PaymentDoCardWith3DSecureTds2DeliveryTimeframe03,
		PaymentDoCardWith3DSecureTds2DeliveryTimeframe04,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTds2DeliveryTimeframe) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe01:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe02:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe03:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe04:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTds2DeliveryTimeframe) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTds2DeliveryTimeframe(data) {
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe01:
		*s = PaymentDoCardWith3DSecureTds2DeliveryTimeframe01
		return nil
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe02:
		*s = PaymentDoCardWith3DSecureTds2DeliveryTimeframe02
		return nil
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe03:
		*s = PaymentDoCardWith3DSecureTds2DeliveryTimeframe03
		return nil
	case PaymentDoCardWith3DSecureTds2DeliveryTimeframe04:
		*s = PaymentDoCardWith3DSecureTds2DeliveryTimeframe04
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd string

const (
	PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd01 PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd = "01"
	PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd02 PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd = "02"
)

// AllValues returns all PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd values.
func (PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) AllValues() []PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd {
	return []PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd{
		PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd01,
		PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd01:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd(data) {
	case PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd01:
		*s = PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd01
		return nil
	case PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd02:
		*s = PaymentDoCardWith3DSecureTds2PreOrderPurchaseInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTds2ReorderItemsInd string

const (
	PaymentDoCardWith3DSecureTds2ReorderItemsInd01 PaymentDoCardWith3DSecureTds2ReorderItemsInd = "01"
	PaymentDoCardWith3DSecureTds2ReorderItemsInd02 PaymentDoCardWith3DSecureTds2ReorderItemsInd = "02"
)

// AllValues returns all PaymentDoCardWith3DSecureTds2ReorderItemsInd values.
func (PaymentDoCardWith3DSecureTds2ReorderItemsInd) AllValues() []PaymentDoCardWith3DSecureTds2ReorderItemsInd {
	return []PaymentDoCardWith3DSecureTds2ReorderItemsInd{
		PaymentDoCardWith3DSecureTds2ReorderItemsInd01,
		PaymentDoCardWith3DSecureTds2ReorderItemsInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTds2ReorderItemsInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTds2ReorderItemsInd01:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ReorderItemsInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTds2ReorderItemsInd) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTds2ReorderItemsInd(data) {
	case PaymentDoCardWith3DSecureTds2ReorderItemsInd01:
		*s = PaymentDoCardWith3DSecureTds2ReorderItemsInd01
		return nil
	case PaymentDoCardWith3DSecureTds2ReorderItemsInd02:
		*s = PaymentDoCardWith3DSecureTds2ReorderItemsInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTds2ShipInd string

const (
	PaymentDoCardWith3DSecureTds2ShipInd01 PaymentDoCardWith3DSecureTds2ShipInd = "01"
	PaymentDoCardWith3DSecureTds2ShipInd02 PaymentDoCardWith3DSecureTds2ShipInd = "02"
	PaymentDoCardWith3DSecureTds2ShipInd03 PaymentDoCardWith3DSecureTds2ShipInd = "03"
	PaymentDoCardWith3DSecureTds2ShipInd04 PaymentDoCardWith3DSecureTds2ShipInd = "04"
	PaymentDoCardWith3DSecureTds2ShipInd05 PaymentDoCardWith3DSecureTds2ShipInd = "05"
	PaymentDoCardWith3DSecureTds2ShipInd06 PaymentDoCardWith3DSecureTds2ShipInd = "06"
	PaymentDoCardWith3DSecureTds2ShipInd07 PaymentDoCardWith3DSecureTds2ShipInd = "07"
)

// AllValues returns all PaymentDoCardWith3DSecureTds2ShipInd values.
func (PaymentDoCardWith3DSecureTds2ShipInd) AllValues() []PaymentDoCardWith3DSecureTds2ShipInd {
	return []PaymentDoCardWith3DSecureTds2ShipInd{
		PaymentDoCardWith3DSecureTds2ShipInd01,
		PaymentDoCardWith3DSecureTds2ShipInd02,
		PaymentDoCardWith3DSecureTds2ShipInd03,
		PaymentDoCardWith3DSecureTds2ShipInd04,
		PaymentDoCardWith3DSecureTds2ShipInd05,
		PaymentDoCardWith3DSecureTds2ShipInd06,
		PaymentDoCardWith3DSecureTds2ShipInd07,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTds2ShipInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTds2ShipInd01:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ShipInd02:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ShipInd03:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ShipInd04:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ShipInd05:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ShipInd06:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ShipInd07:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTds2ShipInd) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTds2ShipInd(data) {
	case PaymentDoCardWith3DSecureTds2ShipInd01:
		*s = PaymentDoCardWith3DSecureTds2ShipInd01
		return nil
	case PaymentDoCardWith3DSecureTds2ShipInd02:
		*s = PaymentDoCardWith3DSecureTds2ShipInd02
		return nil
	case PaymentDoCardWith3DSecureTds2ShipInd03:
		*s = PaymentDoCardWith3DSecureTds2ShipInd03
		return nil
	case PaymentDoCardWith3DSecureTds2ShipInd04:
		*s = PaymentDoCardWith3DSecureTds2ShipInd04
		return nil
	case PaymentDoCardWith3DSecureTds2ShipInd05:
		*s = PaymentDoCardWith3DSecureTds2ShipInd05
		return nil
	case PaymentDoCardWith3DSecureTds2ShipInd06:
		*s = PaymentDoCardWith3DSecureTds2ShipInd06
		return nil
	case PaymentDoCardWith3DSecureTds2ShipInd07:
		*s = PaymentDoCardWith3DSecureTds2ShipInd07
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTds2ShipNameInd string

const (
	PaymentDoCardWith3DSecureTds2ShipNameInd01 PaymentDoCardWith3DSecureTds2ShipNameInd = "01"
	PaymentDoCardWith3DSecureTds2ShipNameInd02 PaymentDoCardWith3DSecureTds2ShipNameInd = "02"
)

// AllValues returns all PaymentDoCardWith3DSecureTds2ShipNameInd values.
func (PaymentDoCardWith3DSecureTds2ShipNameInd) AllValues() []PaymentDoCardWith3DSecureTds2ShipNameInd {
	return []PaymentDoCardWith3DSecureTds2ShipNameInd{
		PaymentDoCardWith3DSecureTds2ShipNameInd01,
		PaymentDoCardWith3DSecureTds2ShipNameInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTds2ShipNameInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTds2ShipNameInd01:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2ShipNameInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTds2ShipNameInd) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTds2ShipNameInd(data) {
	case PaymentDoCardWith3DSecureTds2ShipNameInd01:
		*s = PaymentDoCardWith3DSecureTds2ShipNameInd01
		return nil
	case PaymentDoCardWith3DSecureTds2ShipNameInd02:
		*s = PaymentDoCardWith3DSecureTds2ShipNameInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWith3DSecureTds2SuspiciousAccActivity string

const (
	PaymentDoCardWith3DSecureTds2SuspiciousAccActivity01 PaymentDoCardWith3DSecureTds2SuspiciousAccActivity = "01"
	PaymentDoCardWith3DSecureTds2SuspiciousAccActivity02 PaymentDoCardWith3DSecureTds2SuspiciousAccActivity = "02"
)

// AllValues returns all PaymentDoCardWith3DSecureTds2SuspiciousAccActivity values.
func (PaymentDoCardWith3DSecureTds2SuspiciousAccActivity) AllValues() []PaymentDoCardWith3DSecureTds2SuspiciousAccActivity {
	return []PaymentDoCardWith3DSecureTds2SuspiciousAccActivity{
		PaymentDoCardWith3DSecureTds2SuspiciousAccActivity01,
		PaymentDoCardWith3DSecureTds2SuspiciousAccActivity02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWith3DSecureTds2SuspiciousAccActivity) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWith3DSecureTds2SuspiciousAccActivity01:
		return []byte(s), nil
	case PaymentDoCardWith3DSecureTds2SuspiciousAccActivity02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWith3DSecureTds2SuspiciousAccActivity) UnmarshalText(data []byte) error {
	switch PaymentDoCardWith3DSecureTds2SuspiciousAccActivity(data) {
	case PaymentDoCardWith3DSecureTds2SuspiciousAccActivity01:
		*s = PaymentDoCardWith3DSecureTds2SuspiciousAccActivity01
		return nil
	case PaymentDoCardWith3DSecureTds2SuspiciousAccActivity02:
		*s = PaymentDoCardWith3DSecureTds2SuspiciousAccActivity02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentDoCardWithout3DSecure
type PaymentDoCardWithout3DSecure struct {
	PayType    PaymentDoCardWithout3DSecurePayType        `json:"pay_type"`
	AccessID   string                                     `json:"access_id"`
	Token      OptString                                  `json:"token"`
	CustomerID OptString                                  `json:"customer_id"`
	CardID     OptString                                  `json:"card_id"`
	Method     OptPaymentDoCardWithout3DSecureMethod      `json:"method"`
	PayTimes   OptNilPaymentDoCardWithout3DSecurePayTimes `json:"pay_times"`
}

// GetPayType returns the value of PayType.
func (s *PaymentDoCardWithout3DSecure) GetPayType() PaymentDoCardWithout3DSecurePayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *PaymentDoCardWithout3DSecure) GetAccessID() string {
	return s.AccessID
}

// GetToken returns the value of Token.
func (s *PaymentDoCardWithout3DSecure) GetToken() OptString {
	return s.Token
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentDoCardWithout3DSecure) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *PaymentDoCardWithout3DSecure) GetCardID() OptString {
	return s.CardID
}

// GetMethod returns the value of Method.
func (s *PaymentDoCardWithout3DSecure) GetMethod() OptPaymentDoCardWithout3DSecureMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentDoCardWithout3DSecure) GetPayTimes() OptNilPaymentDoCardWithout3DSecurePayTimes {
	return s.PayTimes
}

// SetPayType sets the value of PayType.
func (s *PaymentDoCardWithout3DSecure) SetPayType(val PaymentDoCardWithout3DSecurePayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentDoCardWithout3DSecure) SetAccessID(val string) {
	s.AccessID = val
}

// SetToken sets the value of Token.
func (s *PaymentDoCardWithout3DSecure) SetToken(val OptString) {
	s.Token = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentDoCardWithout3DSecure) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *PaymentDoCardWithout3DSecure) SetCardID(val OptString) {
	s.CardID = val
}

// SetMethod sets the value of Method.
func (s *PaymentDoCardWithout3DSecure) SetMethod(val OptPaymentDoCardWithout3DSecureMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentDoCardWithout3DSecure) SetPayTimes(val OptNilPaymentDoCardWithout3DSecurePayTimes) {
	s.PayTimes = val
}

type PaymentDoCardWithout3DSecureMethod string

const (
	PaymentDoCardWithout3DSecureMethod1 PaymentDoCardWithout3DSecureMethod = "1"
	PaymentDoCardWithout3DSecureMethod2 PaymentDoCardWithout3DSecureMethod = "2"
	PaymentDoCardWithout3DSecureMethod5 PaymentDoCardWithout3DSecureMethod = "5"
)

// AllValues returns all PaymentDoCardWithout3DSecureMethod values.
func (PaymentDoCardWithout3DSecureMethod) AllValues() []PaymentDoCardWithout3DSecureMethod {
	return []PaymentDoCardWithout3DSecureMethod{
		PaymentDoCardWithout3DSecureMethod1,
		PaymentDoCardWithout3DSecureMethod2,
		PaymentDoCardWithout3DSecureMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWithout3DSecureMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWithout3DSecureMethod1:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecureMethod2:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecureMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWithout3DSecureMethod) UnmarshalText(data []byte) error {
	switch PaymentDoCardWithout3DSecureMethod(data) {
	case PaymentDoCardWithout3DSecureMethod1:
		*s = PaymentDoCardWithout3DSecureMethod1
		return nil
	case PaymentDoCardWithout3DSecureMethod2:
		*s = PaymentDoCardWithout3DSecureMethod2
		return nil
	case PaymentDoCardWithout3DSecureMethod5:
		*s = PaymentDoCardWithout3DSecureMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWithout3DSecurePayTimes string

const (
	PaymentDoCardWithout3DSecurePayTimes3  PaymentDoCardWithout3DSecurePayTimes = "3"
	PaymentDoCardWithout3DSecurePayTimes5  PaymentDoCardWithout3DSecurePayTimes = "5"
	PaymentDoCardWithout3DSecurePayTimes6  PaymentDoCardWithout3DSecurePayTimes = "6"
	PaymentDoCardWithout3DSecurePayTimes10 PaymentDoCardWithout3DSecurePayTimes = "10"
	PaymentDoCardWithout3DSecurePayTimes12 PaymentDoCardWithout3DSecurePayTimes = "12"
	PaymentDoCardWithout3DSecurePayTimes15 PaymentDoCardWithout3DSecurePayTimes = "15"
	PaymentDoCardWithout3DSecurePayTimes18 PaymentDoCardWithout3DSecurePayTimes = "18"
	PaymentDoCardWithout3DSecurePayTimes20 PaymentDoCardWithout3DSecurePayTimes = "20"
	PaymentDoCardWithout3DSecurePayTimes24 PaymentDoCardWithout3DSecurePayTimes = "24"
)

// AllValues returns all PaymentDoCardWithout3DSecurePayTimes values.
func (PaymentDoCardWithout3DSecurePayTimes) AllValues() []PaymentDoCardWithout3DSecurePayTimes {
	return []PaymentDoCardWithout3DSecurePayTimes{
		PaymentDoCardWithout3DSecurePayTimes3,
		PaymentDoCardWithout3DSecurePayTimes5,
		PaymentDoCardWithout3DSecurePayTimes6,
		PaymentDoCardWithout3DSecurePayTimes10,
		PaymentDoCardWithout3DSecurePayTimes12,
		PaymentDoCardWithout3DSecurePayTimes15,
		PaymentDoCardWithout3DSecurePayTimes18,
		PaymentDoCardWithout3DSecurePayTimes20,
		PaymentDoCardWithout3DSecurePayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWithout3DSecurePayTimes) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWithout3DSecurePayTimes3:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes5:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes6:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes10:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes12:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes15:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes18:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes20:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWithout3DSecurePayTimes) UnmarshalText(data []byte) error {
	switch PaymentDoCardWithout3DSecurePayTimes(data) {
	case PaymentDoCardWithout3DSecurePayTimes3:
		*s = PaymentDoCardWithout3DSecurePayTimes3
		return nil
	case PaymentDoCardWithout3DSecurePayTimes5:
		*s = PaymentDoCardWithout3DSecurePayTimes5
		return nil
	case PaymentDoCardWithout3DSecurePayTimes6:
		*s = PaymentDoCardWithout3DSecurePayTimes6
		return nil
	case PaymentDoCardWithout3DSecurePayTimes10:
		*s = PaymentDoCardWithout3DSecurePayTimes10
		return nil
	case PaymentDoCardWithout3DSecurePayTimes12:
		*s = PaymentDoCardWithout3DSecurePayTimes12
		return nil
	case PaymentDoCardWithout3DSecurePayTimes15:
		*s = PaymentDoCardWithout3DSecurePayTimes15
		return nil
	case PaymentDoCardWithout3DSecurePayTimes18:
		*s = PaymentDoCardWithout3DSecurePayTimes18
		return nil
	case PaymentDoCardWithout3DSecurePayTimes20:
		*s = PaymentDoCardWithout3DSecurePayTimes20
		return nil
	case PaymentDoCardWithout3DSecurePayTimes24:
		*s = PaymentDoCardWithout3DSecurePayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoCardWithout3DSecurePayType string

const (
	PaymentDoCardWithout3DSecurePayTypeCard        PaymentDoCardWithout3DSecurePayType = "Card"
	PaymentDoCardWithout3DSecurePayTypeDirectdebit PaymentDoCardWithout3DSecurePayType = "Directdebit"
)

// AllValues returns all PaymentDoCardWithout3DSecurePayType values.
func (PaymentDoCardWithout3DSecurePayType) AllValues() []PaymentDoCardWithout3DSecurePayType {
	return []PaymentDoCardWithout3DSecurePayType{
		PaymentDoCardWithout3DSecurePayTypeCard,
		PaymentDoCardWithout3DSecurePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoCardWithout3DSecurePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoCardWithout3DSecurePayTypeCard:
		return []byte(s), nil
	case PaymentDoCardWithout3DSecurePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoCardWithout3DSecurePayType) UnmarshalText(data []byte) error {
	switch PaymentDoCardWithout3DSecurePayType(data) {
	case PaymentDoCardWithout3DSecurePayTypeCard:
		*s = PaymentDoCardWithout3DSecurePayTypeCard
		return nil
	case PaymentDoCardWithout3DSecurePayTypeDirectdebit:
		*s = PaymentDoCardWithout3DSecurePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentDoPaypay
type PaymentDoPaypay struct {
	PayType      PaymentDoPaypayPayType         `json:"pay_type"`
	AccessID     string                         `json:"access_id"`
	CustomerID   OptString                      `json:"customer_id"`
	RedirectURL  string                         `json:"redirect_url"`
	RedirectType OptPaymentDoPaypayRedirectType `json:"redirect_type"`
	UserAgent    OptString                      `json:"user_agent"`
}

// GetPayType returns the value of PayType.
func (s *PaymentDoPaypay) GetPayType() PaymentDoPaypayPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *PaymentDoPaypay) GetAccessID() string {
	return s.AccessID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentDoPaypay) GetCustomerID() OptString {
	return s.CustomerID
}

// GetRedirectURL returns the value of RedirectURL.
func (s *PaymentDoPaypay) GetRedirectURL() string {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *PaymentDoPaypay) GetRedirectType() OptPaymentDoPaypayRedirectType {
	return s.RedirectType
}

// GetUserAgent returns the value of UserAgent.
func (s *PaymentDoPaypay) GetUserAgent() OptString {
	return s.UserAgent
}

// SetPayType sets the value of PayType.
func (s *PaymentDoPaypay) SetPayType(val PaymentDoPaypayPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentDoPaypay) SetAccessID(val string) {
	s.AccessID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentDoPaypay) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *PaymentDoPaypay) SetRedirectURL(val string) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *PaymentDoPaypay) SetRedirectType(val OptPaymentDoPaypayRedirectType) {
	s.RedirectType = val
}

// SetUserAgent sets the value of UserAgent.
func (s *PaymentDoPaypay) SetUserAgent(val OptString) {
	s.UserAgent = val
}

type PaymentDoPaypayPayType string

const (
	PaymentDoPaypayPayTypePaypay PaymentDoPaypayPayType = "Paypay"
)

// AllValues returns all PaymentDoPaypayPayType values.
func (PaymentDoPaypayPayType) AllValues() []PaymentDoPaypayPayType {
	return []PaymentDoPaypayPayType{
		PaymentDoPaypayPayTypePaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoPaypayPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoPaypayPayTypePaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoPaypayPayType) UnmarshalText(data []byte) error {
	switch PaymentDoPaypayPayType(data) {
	case PaymentDoPaypayPayTypePaypay:
		*s = PaymentDoPaypayPayTypePaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoPaypayRedirectType string

const (
	PaymentDoPaypayRedirectType1 PaymentDoPaypayRedirectType = "1"
	PaymentDoPaypayRedirectType2 PaymentDoPaypayRedirectType = "2"
)

// AllValues returns all PaymentDoPaypayRedirectType values.
func (PaymentDoPaypayRedirectType) AllValues() []PaymentDoPaypayRedirectType {
	return []PaymentDoPaypayRedirectType{
		PaymentDoPaypayRedirectType1,
		PaymentDoPaypayRedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoPaypayRedirectType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoPaypayRedirectType1:
		return []byte(s), nil
	case PaymentDoPaypayRedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoPaypayRedirectType) UnmarshalText(data []byte) error {
	switch PaymentDoPaypayRedirectType(data) {
	case PaymentDoPaypayRedirectType1:
		*s = PaymentDoPaypayRedirectType1
		return nil
	case PaymentDoPaypayRedirectType2:
		*s = PaymentDoPaypayRedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentDoPaypayResponse
type PaymentDoPaypayResponse struct {
	ShopID             OptString                                 `json:"shop_id"`
	ID                 OptString                                 `json:"id"`
	AccessID           OptString                                 `json:"access_id"`
	Amount             OptInt                                    `json:"amount"`
	Tax                OptInt                                    `json:"tax"`
	TotalAmount        OptInt                                    `json:"total_amount"`
	ClientField1       OptNilString                              `json:"client_field_1"`
	ClientField2       OptNilString                              `json:"client_field_2"`
	ClientField3       OptNilString                              `json:"client_field_3"`
	ProcessDate        OptString                                 `json:"process_date"`
	CustomerID         OptNilString                              `json:"customer_id"`
	CustomerGroupID    OptNilString                              `json:"customer_group_id"`
	ErrorCode          OptNilString                              `json:"error_code"`
	Created            OptNilString                              `json:"created"`
	Updated            OptNilString                              `json:"updated"`
	PayType            OptPaymentDoPaypayResponsePayType         `json:"pay_type"`
	JobCode            OptPaymentDoPaypayResponseJobCode         `json:"job_code"`
	Status             OptPaymentDoPaypayResponseStatus          `json:"status"`
	CodeURL            OptNilString                              `json:"code_url"`
	CodeExpiryDate     OptNilString                              `json:"code_expiry_date"`
	RedirectURL        OptNilString                              `json:"redirect_url"`
	RedirectType       OptNilPaymentDoPaypayResponseRedirectType `json:"redirect_type"`
	AuthMaxDate        OptNilString                              `json:"auth_max_date"`
	OrderDescription   OptNilString                              `json:"order_description"`
	CaptureDescription OptNilString                              `json:"capture_description"`
	UpdateDescription  OptNilString                              `json:"update_description"`
	CancelDescription  OptNilString                              `json:"cancel_description"`
	StoreID            OptNilString                              `json:"store_id"`
	CodeID             OptNilString                              `json:"code_id"`
	PaymentID          OptNilString                              `json:"payment_id"`
	PaypayResultCode   OptNilString                              `json:"paypay_result_code"`
	MerchantPaymentID  OptNilString                              `json:"merchant_payment_id"`
	MerchantCaptureID  OptNilString                              `json:"merchant_capture_id"`
	MerchantUpdateID   OptNilString                              `json:"merchant_update_id"`
	MerchantRefundID   OptNilString                              `json:"merchant_refund_id"`
	PaymentDate        OptNilString                              `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentDoPaypayResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentDoPaypayResponse) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *PaymentDoPaypayResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *PaymentDoPaypayResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentDoPaypayResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentDoPaypayResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentDoPaypayResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentDoPaypayResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentDoPaypayResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentDoPaypayResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentDoPaypayResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentDoPaypayResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentDoPaypayResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentDoPaypayResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentDoPaypayResponse) GetUpdated() OptNilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *PaymentDoPaypayResponse) GetPayType() OptPaymentDoPaypayResponsePayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *PaymentDoPaypayResponse) GetJobCode() OptPaymentDoPaypayResponseJobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *PaymentDoPaypayResponse) GetStatus() OptPaymentDoPaypayResponseStatus {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *PaymentDoPaypayResponse) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *PaymentDoPaypayResponse) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *PaymentDoPaypayResponse) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *PaymentDoPaypayResponse) GetRedirectType() OptNilPaymentDoPaypayResponseRedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentDoPaypayResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *PaymentDoPaypayResponse) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *PaymentDoPaypayResponse) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *PaymentDoPaypayResponse) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *PaymentDoPaypayResponse) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *PaymentDoPaypayResponse) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *PaymentDoPaypayResponse) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *PaymentDoPaypayResponse) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *PaymentDoPaypayResponse) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *PaymentDoPaypayResponse) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *PaymentDoPaypayResponse) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *PaymentDoPaypayResponse) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *PaymentDoPaypayResponse) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *PaymentDoPaypayResponse) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *PaymentDoPaypayResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentDoPaypayResponse) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentDoPaypayResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *PaymentDoPaypayResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentDoPaypayResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentDoPaypayResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentDoPaypayResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentDoPaypayResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentDoPaypayResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentDoPaypayResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentDoPaypayResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentDoPaypayResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentDoPaypayResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentDoPaypayResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentDoPaypayResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *PaymentDoPaypayResponse) SetPayType(val OptPaymentDoPaypayResponsePayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentDoPaypayResponse) SetJobCode(val OptPaymentDoPaypayResponseJobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *PaymentDoPaypayResponse) SetStatus(val OptPaymentDoPaypayResponseStatus) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *PaymentDoPaypayResponse) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *PaymentDoPaypayResponse) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *PaymentDoPaypayResponse) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *PaymentDoPaypayResponse) SetRedirectType(val OptNilPaymentDoPaypayResponseRedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentDoPaypayResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *PaymentDoPaypayResponse) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *PaymentDoPaypayResponse) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *PaymentDoPaypayResponse) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *PaymentDoPaypayResponse) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *PaymentDoPaypayResponse) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *PaymentDoPaypayResponse) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *PaymentDoPaypayResponse) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *PaymentDoPaypayResponse) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *PaymentDoPaypayResponse) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *PaymentDoPaypayResponse) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *PaymentDoPaypayResponse) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *PaymentDoPaypayResponse) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *PaymentDoPaypayResponse) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

type PaymentDoPaypayResponseJobCode string

const (
	PaymentDoPaypayResponseJobCodeAUTH    PaymentDoPaypayResponseJobCode = "AUTH"
	PaymentDoPaypayResponseJobCodeCAPTURE PaymentDoPaypayResponseJobCode = "CAPTURE"
)

// AllValues returns all PaymentDoPaypayResponseJobCode values.
func (PaymentDoPaypayResponseJobCode) AllValues() []PaymentDoPaypayResponseJobCode {
	return []PaymentDoPaypayResponseJobCode{
		PaymentDoPaypayResponseJobCodeAUTH,
		PaymentDoPaypayResponseJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoPaypayResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoPaypayResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentDoPaypayResponseJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoPaypayResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentDoPaypayResponseJobCode(data) {
	case PaymentDoPaypayResponseJobCodeAUTH:
		*s = PaymentDoPaypayResponseJobCodeAUTH
		return nil
	case PaymentDoPaypayResponseJobCodeCAPTURE:
		*s = PaymentDoPaypayResponseJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoPaypayResponsePayType string

const (
	PaymentDoPaypayResponsePayTypePaypay PaymentDoPaypayResponsePayType = "Paypay"
)

// AllValues returns all PaymentDoPaypayResponsePayType values.
func (PaymentDoPaypayResponsePayType) AllValues() []PaymentDoPaypayResponsePayType {
	return []PaymentDoPaypayResponsePayType{
		PaymentDoPaypayResponsePayTypePaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoPaypayResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoPaypayResponsePayTypePaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoPaypayResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentDoPaypayResponsePayType(data) {
	case PaymentDoPaypayResponsePayTypePaypay:
		*s = PaymentDoPaypayResponsePayTypePaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoPaypayResponseRedirectType string

const (
	PaymentDoPaypayResponseRedirectType1 PaymentDoPaypayResponseRedirectType = "1"
	PaymentDoPaypayResponseRedirectType2 PaymentDoPaypayResponseRedirectType = "2"
)

// AllValues returns all PaymentDoPaypayResponseRedirectType values.
func (PaymentDoPaypayResponseRedirectType) AllValues() []PaymentDoPaypayResponseRedirectType {
	return []PaymentDoPaypayResponseRedirectType{
		PaymentDoPaypayResponseRedirectType1,
		PaymentDoPaypayResponseRedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoPaypayResponseRedirectType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoPaypayResponseRedirectType1:
		return []byte(s), nil
	case PaymentDoPaypayResponseRedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoPaypayResponseRedirectType) UnmarshalText(data []byte) error {
	switch PaymentDoPaypayResponseRedirectType(data) {
	case PaymentDoPaypayResponseRedirectType1:
		*s = PaymentDoPaypayResponseRedirectType1
		return nil
	case PaymentDoPaypayResponseRedirectType2:
		*s = PaymentDoPaypayResponseRedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentDoPaypayResponseStatus string

const (
	PaymentDoPaypayResponseStatusUNPROCESSED             PaymentDoPaypayResponseStatus = "UNPROCESSED"
	PaymentDoPaypayResponseStatusAWAITINGCUSTOMERPAYMENT PaymentDoPaypayResponseStatus = "AWAITING_CUSTOMER_PAYMENT"
	PaymentDoPaypayResponseStatusAUTHORIZED              PaymentDoPaypayResponseStatus = "AUTHORIZED"
	PaymentDoPaypayResponseStatusCAPTURED                PaymentDoPaypayResponseStatus = "CAPTURED"
	PaymentDoPaypayResponseStatusCANCELED                PaymentDoPaypayResponseStatus = "CANCELED"
	PaymentDoPaypayResponseStatusEXPIRED                 PaymentDoPaypayResponseStatus = "EXPIRED"
)

// AllValues returns all PaymentDoPaypayResponseStatus values.
func (PaymentDoPaypayResponseStatus) AllValues() []PaymentDoPaypayResponseStatus {
	return []PaymentDoPaypayResponseStatus{
		PaymentDoPaypayResponseStatusUNPROCESSED,
		PaymentDoPaypayResponseStatusAWAITINGCUSTOMERPAYMENT,
		PaymentDoPaypayResponseStatusAUTHORIZED,
		PaymentDoPaypayResponseStatusCAPTURED,
		PaymentDoPaypayResponseStatusCANCELED,
		PaymentDoPaypayResponseStatusEXPIRED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentDoPaypayResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentDoPaypayResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentDoPaypayResponseStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case PaymentDoPaypayResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentDoPaypayResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentDoPaypayResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentDoPaypayResponseStatusEXPIRED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentDoPaypayResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentDoPaypayResponseStatus(data) {
	case PaymentDoPaypayResponseStatusUNPROCESSED:
		*s = PaymentDoPaypayResponseStatusUNPROCESSED
		return nil
	case PaymentDoPaypayResponseStatusAWAITINGCUSTOMERPAYMENT:
		*s = PaymentDoPaypayResponseStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case PaymentDoPaypayResponseStatusAUTHORIZED:
		*s = PaymentDoPaypayResponseStatusAUTHORIZED
		return nil
	case PaymentDoPaypayResponseStatusCAPTURED:
		*s = PaymentDoPaypayResponseStatusCAPTURED
		return nil
	case PaymentDoPaypayResponseStatusCANCELED:
		*s = PaymentDoPaypayResponseStatusCANCELED
		return nil
	case PaymentDoPaypayResponseStatusEXPIRED:
		*s = PaymentDoPaypayResponseStatusEXPIRED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentMethodCardResponse
type PaymentMethodCardResponse struct {
	ID                 string                                  `json:"id"`
	PayType            PaymentMethodCardResponsePayType        `json:"pay_type"`
	CustomerID         string                                  `json:"customer_id"`
	ProcessDate        OptString                               `json:"process_date"`
	RedirectURL        OptNilString                            `json:"redirect_url"`
	Status             OptPaymentMethodCardResponseStatus      `json:"status"`
	ReturnURL          OptNilString                            `json:"return_url"`
	ReturnURLOnFailure OptNilString                            `json:"return_url_on_failure"`
	DefaultFlag        OptPaymentMethodCardResponseDefaultFlag `json:"default_flag"`
	DeleteFlag         OptString                               `json:"delete_flag"`
	ClientField1       OptNilString                            `json:"client_field_1"`
	ClientField2       OptNilString                            `json:"client_field_2"`
	ClientField3       OptNilString                            `json:"client_field_3"`
	Created            OptString                               `json:"created"`
	Updated            OptString                               `json:"updated"`
	Card               OptPaymentMethodCardResponseCard        `json:"card"`
}

// GetID returns the value of ID.
func (s *PaymentMethodCardResponse) GetID() string {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentMethodCardResponse) GetPayType() PaymentMethodCardResponsePayType {
	return s.PayType
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentMethodCardResponse) GetCustomerID() string {
	return s.CustomerID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentMethodCardResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *PaymentMethodCardResponse) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetStatus returns the value of Status.
func (s *PaymentMethodCardResponse) GetStatus() OptPaymentMethodCardResponseStatus {
	return s.Status
}

// GetReturnURL returns the value of ReturnURL.
func (s *PaymentMethodCardResponse) GetReturnURL() OptNilString {
	return s.ReturnURL
}

// GetReturnURLOnFailure returns the value of ReturnURLOnFailure.
func (s *PaymentMethodCardResponse) GetReturnURLOnFailure() OptNilString {
	return s.ReturnURLOnFailure
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *PaymentMethodCardResponse) GetDefaultFlag() OptPaymentMethodCardResponseDefaultFlag {
	return s.DefaultFlag
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PaymentMethodCardResponse) GetDeleteFlag() OptString {
	return s.DeleteFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentMethodCardResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentMethodCardResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentMethodCardResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetCreated returns the value of Created.
func (s *PaymentMethodCardResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentMethodCardResponse) GetUpdated() OptString {
	return s.Updated
}

// GetCard returns the value of Card.
func (s *PaymentMethodCardResponse) GetCard() OptPaymentMethodCardResponseCard {
	return s.Card
}

// SetID sets the value of ID.
func (s *PaymentMethodCardResponse) SetID(val string) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentMethodCardResponse) SetPayType(val PaymentMethodCardResponsePayType) {
	s.PayType = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentMethodCardResponse) SetCustomerID(val string) {
	s.CustomerID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentMethodCardResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *PaymentMethodCardResponse) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetStatus sets the value of Status.
func (s *PaymentMethodCardResponse) SetStatus(val OptPaymentMethodCardResponseStatus) {
	s.Status = val
}

// SetReturnURL sets the value of ReturnURL.
func (s *PaymentMethodCardResponse) SetReturnURL(val OptNilString) {
	s.ReturnURL = val
}

// SetReturnURLOnFailure sets the value of ReturnURLOnFailure.
func (s *PaymentMethodCardResponse) SetReturnURLOnFailure(val OptNilString) {
	s.ReturnURLOnFailure = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *PaymentMethodCardResponse) SetDefaultFlag(val OptPaymentMethodCardResponseDefaultFlag) {
	s.DefaultFlag = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PaymentMethodCardResponse) SetDeleteFlag(val OptString) {
	s.DeleteFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentMethodCardResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentMethodCardResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentMethodCardResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetCreated sets the value of Created.
func (s *PaymentMethodCardResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentMethodCardResponse) SetUpdated(val OptString) {
	s.Updated = val
}

// SetCard sets the value of Card.
func (s *PaymentMethodCardResponse) SetCard(val OptPaymentMethodCardResponseCard) {
	s.Card = val
}

type PaymentMethodCardResponseCard struct {
	CardNo       OptString                                     `json:"card_no"`
	Expire       OptString                                     `json:"expire"`
	HolderName   OptString                                     `json:"holder_name"`
	CardNoHash   OptString                                     `json:"card_no_hash"`
	Type         OptPaymentMethodCardResponseCardType          `json:"type"`
	Brand        OptString                                     `json:"brand"`
	ErrorCode    OptNilString                                  `json:"error_code"`
	TdsType      OptNilPaymentMethodCardResponseCardTdsType    `json:"tds_type"`
	Tds2Type     OptNilPaymentMethodCardResponseCardTds2Type   `json:"tds2_type"`
	Tds2Status   OptNilPaymentMethodCardResponseCardTds2Status `json:"tds2_status"`
	MerchantName OptNilString                                  `json:"merchant_name"`
	AccessID     OptNilString                                  `json:"access_id"`
	Acs          OptNilString                                  `json:"acs"`
}

// GetCardNo returns the value of CardNo.
func (s *PaymentMethodCardResponseCard) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *PaymentMethodCardResponseCard) GetExpire() OptString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentMethodCardResponseCard) GetHolderName() OptString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentMethodCardResponseCard) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetType returns the value of Type.
func (s *PaymentMethodCardResponseCard) GetType() OptPaymentMethodCardResponseCardType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *PaymentMethodCardResponseCard) GetBrand() OptString {
	return s.Brand
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentMethodCardResponseCard) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetTdsType returns the value of TdsType.
func (s *PaymentMethodCardResponseCard) GetTdsType() OptNilPaymentMethodCardResponseCardTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentMethodCardResponseCard) GetTds2Type() OptNilPaymentMethodCardResponseCardTds2Type {
	return s.Tds2Type
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentMethodCardResponseCard) GetTds2Status() OptNilPaymentMethodCardResponseCardTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentMethodCardResponseCard) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetAccessID returns the value of AccessID.
func (s *PaymentMethodCardResponseCard) GetAccessID() OptNilString {
	return s.AccessID
}

// GetAcs returns the value of Acs.
func (s *PaymentMethodCardResponseCard) GetAcs() OptNilString {
	return s.Acs
}

// SetCardNo sets the value of CardNo.
func (s *PaymentMethodCardResponseCard) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *PaymentMethodCardResponseCard) SetExpire(val OptString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentMethodCardResponseCard) SetHolderName(val OptString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentMethodCardResponseCard) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetType sets the value of Type.
func (s *PaymentMethodCardResponseCard) SetType(val OptPaymentMethodCardResponseCardType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *PaymentMethodCardResponseCard) SetBrand(val OptString) {
	s.Brand = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentMethodCardResponseCard) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentMethodCardResponseCard) SetTdsType(val OptNilPaymentMethodCardResponseCardTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentMethodCardResponseCard) SetTds2Type(val OptNilPaymentMethodCardResponseCardTds2Type) {
	s.Tds2Type = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentMethodCardResponseCard) SetTds2Status(val OptNilPaymentMethodCardResponseCardTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentMethodCardResponseCard) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentMethodCardResponseCard) SetAccessID(val OptNilString) {
	s.AccessID = val
}

// SetAcs sets the value of Acs.
func (s *PaymentMethodCardResponseCard) SetAcs(val OptNilString) {
	s.Acs = val
}

type PaymentMethodCardResponseCardTds2Status string

const (
	PaymentMethodCardResponseCardTds2StatusAUTHENTICATING PaymentMethodCardResponseCardTds2Status = "AUTHENTICATING"
	PaymentMethodCardResponseCardTds2StatusCHALLENGE      PaymentMethodCardResponseCardTds2Status = "CHALLENGE"
	PaymentMethodCardResponseCardTds2StatusACTIVATED      PaymentMethodCardResponseCardTds2Status = "ACTIVATED"
	PaymentMethodCardResponseCardTds2StatusAUTHENTICATED  PaymentMethodCardResponseCardTds2Status = "AUTHENTICATED"
)

// AllValues returns all PaymentMethodCardResponseCardTds2Status values.
func (PaymentMethodCardResponseCardTds2Status) AllValues() []PaymentMethodCardResponseCardTds2Status {
	return []PaymentMethodCardResponseCardTds2Status{
		PaymentMethodCardResponseCardTds2StatusAUTHENTICATING,
		PaymentMethodCardResponseCardTds2StatusCHALLENGE,
		PaymentMethodCardResponseCardTds2StatusACTIVATED,
		PaymentMethodCardResponseCardTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardResponseCardTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardResponseCardTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case PaymentMethodCardResponseCardTds2StatusCHALLENGE:
		return []byte(s), nil
	case PaymentMethodCardResponseCardTds2StatusACTIVATED:
		return []byte(s), nil
	case PaymentMethodCardResponseCardTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardResponseCardTds2Status) UnmarshalText(data []byte) error {
	switch PaymentMethodCardResponseCardTds2Status(data) {
	case PaymentMethodCardResponseCardTds2StatusAUTHENTICATING:
		*s = PaymentMethodCardResponseCardTds2StatusAUTHENTICATING
		return nil
	case PaymentMethodCardResponseCardTds2StatusCHALLENGE:
		*s = PaymentMethodCardResponseCardTds2StatusCHALLENGE
		return nil
	case PaymentMethodCardResponseCardTds2StatusACTIVATED:
		*s = PaymentMethodCardResponseCardTds2StatusACTIVATED
		return nil
	case PaymentMethodCardResponseCardTds2StatusAUTHENTICATED:
		*s = PaymentMethodCardResponseCardTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardResponseCardTds2Type string

const (
	PaymentMethodCardResponseCardTds2Type2 PaymentMethodCardResponseCardTds2Type = "2"
	PaymentMethodCardResponseCardTds2Type3 PaymentMethodCardResponseCardTds2Type = "3"
)

// AllValues returns all PaymentMethodCardResponseCardTds2Type values.
func (PaymentMethodCardResponseCardTds2Type) AllValues() []PaymentMethodCardResponseCardTds2Type {
	return []PaymentMethodCardResponseCardTds2Type{
		PaymentMethodCardResponseCardTds2Type2,
		PaymentMethodCardResponseCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardResponseCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardResponseCardTds2Type2:
		return []byte(s), nil
	case PaymentMethodCardResponseCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardResponseCardTds2Type) UnmarshalText(data []byte) error {
	switch PaymentMethodCardResponseCardTds2Type(data) {
	case PaymentMethodCardResponseCardTds2Type2:
		*s = PaymentMethodCardResponseCardTds2Type2
		return nil
	case PaymentMethodCardResponseCardTds2Type3:
		*s = PaymentMethodCardResponseCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardResponseCardTdsType string

const (
	PaymentMethodCardResponseCardTdsType0 PaymentMethodCardResponseCardTdsType = "0"
	PaymentMethodCardResponseCardTdsType2 PaymentMethodCardResponseCardTdsType = "2"
)

// AllValues returns all PaymentMethodCardResponseCardTdsType values.
func (PaymentMethodCardResponseCardTdsType) AllValues() []PaymentMethodCardResponseCardTdsType {
	return []PaymentMethodCardResponseCardTdsType{
		PaymentMethodCardResponseCardTdsType0,
		PaymentMethodCardResponseCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardResponseCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardResponseCardTdsType0:
		return []byte(s), nil
	case PaymentMethodCardResponseCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardResponseCardTdsType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardResponseCardTdsType(data) {
	case PaymentMethodCardResponseCardTdsType0:
		*s = PaymentMethodCardResponseCardTdsType0
		return nil
	case PaymentMethodCardResponseCardTdsType2:
		*s = PaymentMethodCardResponseCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardResponseCardType string

const (
	PaymentMethodCardResponseCardType0 PaymentMethodCardResponseCardType = "0"
	PaymentMethodCardResponseCardType1 PaymentMethodCardResponseCardType = "1"
	PaymentMethodCardResponseCardType2 PaymentMethodCardResponseCardType = "2"
	PaymentMethodCardResponseCardType3 PaymentMethodCardResponseCardType = "3"
)

// AllValues returns all PaymentMethodCardResponseCardType values.
func (PaymentMethodCardResponseCardType) AllValues() []PaymentMethodCardResponseCardType {
	return []PaymentMethodCardResponseCardType{
		PaymentMethodCardResponseCardType0,
		PaymentMethodCardResponseCardType1,
		PaymentMethodCardResponseCardType2,
		PaymentMethodCardResponseCardType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardResponseCardType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardResponseCardType0:
		return []byte(s), nil
	case PaymentMethodCardResponseCardType1:
		return []byte(s), nil
	case PaymentMethodCardResponseCardType2:
		return []byte(s), nil
	case PaymentMethodCardResponseCardType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardResponseCardType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardResponseCardType(data) {
	case PaymentMethodCardResponseCardType0:
		*s = PaymentMethodCardResponseCardType0
		return nil
	case PaymentMethodCardResponseCardType1:
		*s = PaymentMethodCardResponseCardType1
		return nil
	case PaymentMethodCardResponseCardType2:
		*s = PaymentMethodCardResponseCardType2
		return nil
	case PaymentMethodCardResponseCardType3:
		*s = PaymentMethodCardResponseCardType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardResponseDefaultFlag string

const (
	PaymentMethodCardResponseDefaultFlag0 PaymentMethodCardResponseDefaultFlag = "0"
	PaymentMethodCardResponseDefaultFlag1 PaymentMethodCardResponseDefaultFlag = "1"
)

// AllValues returns all PaymentMethodCardResponseDefaultFlag values.
func (PaymentMethodCardResponseDefaultFlag) AllValues() []PaymentMethodCardResponseDefaultFlag {
	return []PaymentMethodCardResponseDefaultFlag{
		PaymentMethodCardResponseDefaultFlag0,
		PaymentMethodCardResponseDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardResponseDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardResponseDefaultFlag0:
		return []byte(s), nil
	case PaymentMethodCardResponseDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardResponseDefaultFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodCardResponseDefaultFlag(data) {
	case PaymentMethodCardResponseDefaultFlag0:
		*s = PaymentMethodCardResponseDefaultFlag0
		return nil
	case PaymentMethodCardResponseDefaultFlag1:
		*s = PaymentMethodCardResponseDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardResponsePayType string

const (
	PaymentMethodCardResponsePayTypeCard        PaymentMethodCardResponsePayType = "Card"
	PaymentMethodCardResponsePayTypeDirectdebit PaymentMethodCardResponsePayType = "Directdebit"
)

// AllValues returns all PaymentMethodCardResponsePayType values.
func (PaymentMethodCardResponsePayType) AllValues() []PaymentMethodCardResponsePayType {
	return []PaymentMethodCardResponsePayType{
		PaymentMethodCardResponsePayTypeCard,
		PaymentMethodCardResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardResponsePayTypeCard:
		return []byte(s), nil
	case PaymentMethodCardResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardResponsePayType(data) {
	case PaymentMethodCardResponsePayTypeCard:
		*s = PaymentMethodCardResponsePayTypeCard
		return nil
	case PaymentMethodCardResponsePayTypeDirectdebit:
		*s = PaymentMethodCardResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardResponseStatus string

const (
	PaymentMethodCardResponseStatusINACTIVATED            PaymentMethodCardResponseStatus = "INACTIVATED"
	PaymentMethodCardResponseStatusAWAITINGCUSTOMERACTION PaymentMethodCardResponseStatus = "AWAITING_CUSTOMER_ACTION"
	PaymentMethodCardResponseStatusACTIVATED              PaymentMethodCardResponseStatus = "ACTIVATED"
)

// AllValues returns all PaymentMethodCardResponseStatus values.
func (PaymentMethodCardResponseStatus) AllValues() []PaymentMethodCardResponseStatus {
	return []PaymentMethodCardResponseStatus{
		PaymentMethodCardResponseStatusINACTIVATED,
		PaymentMethodCardResponseStatusAWAITINGCUSTOMERACTION,
		PaymentMethodCardResponseStatusACTIVATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardResponseStatusINACTIVATED:
		return []byte(s), nil
	case PaymentMethodCardResponseStatusAWAITINGCUSTOMERACTION:
		return []byte(s), nil
	case PaymentMethodCardResponseStatusACTIVATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentMethodCardResponseStatus(data) {
	case PaymentMethodCardResponseStatusINACTIVATED:
		*s = PaymentMethodCardResponseStatusINACTIVATED
		return nil
	case PaymentMethodCardResponseStatusAWAITINGCUSTOMERACTION:
		*s = PaymentMethodCardResponseStatusAWAITINGCUSTOMERACTION
		return nil
	case PaymentMethodCardResponseStatusACTIVATED:
		*s = PaymentMethodCardResponseStatusACTIVATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentMethodCardWith3DSecure
type PaymentMethodCardWith3DSecure struct {
	PayType            PaymentMethodCardWith3DSecurePayType     `json:"pay_type"`
	ReturnURL          OptString                                `json:"return_url"`
	ReturnURLOnFailure OptString                                `json:"return_url_on_failure"`
	DefaultFlag        PaymentMethodCardWith3DSecureDefaultFlag `json:"default_flag"`
	ClientField1       OptNilString                             `json:"client_field_1"`
	ClientField2       OptNilString                             `json:"client_field_2"`
	ClientField3       OptNilString                             `json:"client_field_3"`
	Card               PaymentMethodCardWith3DSecureCard        `json:"card"`
}

// GetPayType returns the value of PayType.
func (s *PaymentMethodCardWith3DSecure) GetPayType() PaymentMethodCardWith3DSecurePayType {
	return s.PayType
}

// GetReturnURL returns the value of ReturnURL.
func (s *PaymentMethodCardWith3DSecure) GetReturnURL() OptString {
	return s.ReturnURL
}

// GetReturnURLOnFailure returns the value of ReturnURLOnFailure.
func (s *PaymentMethodCardWith3DSecure) GetReturnURLOnFailure() OptString {
	return s.ReturnURLOnFailure
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *PaymentMethodCardWith3DSecure) GetDefaultFlag() PaymentMethodCardWith3DSecureDefaultFlag {
	return s.DefaultFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentMethodCardWith3DSecure) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentMethodCardWith3DSecure) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentMethodCardWith3DSecure) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetCard returns the value of Card.
func (s *PaymentMethodCardWith3DSecure) GetCard() PaymentMethodCardWith3DSecureCard {
	return s.Card
}

// SetPayType sets the value of PayType.
func (s *PaymentMethodCardWith3DSecure) SetPayType(val PaymentMethodCardWith3DSecurePayType) {
	s.PayType = val
}

// SetReturnURL sets the value of ReturnURL.
func (s *PaymentMethodCardWith3DSecure) SetReturnURL(val OptString) {
	s.ReturnURL = val
}

// SetReturnURLOnFailure sets the value of ReturnURLOnFailure.
func (s *PaymentMethodCardWith3DSecure) SetReturnURLOnFailure(val OptString) {
	s.ReturnURLOnFailure = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *PaymentMethodCardWith3DSecure) SetDefaultFlag(val PaymentMethodCardWith3DSecureDefaultFlag) {
	s.DefaultFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentMethodCardWith3DSecure) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentMethodCardWith3DSecure) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentMethodCardWith3DSecure) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetCard sets the value of Card.
func (s *PaymentMethodCardWith3DSecure) SetCard(val PaymentMethodCardWith3DSecureCard) {
	s.Card = val
}

type PaymentMethodCardWith3DSecureCard struct {
	Token                       string                                                           `json:"token"`
	TdsType                     PaymentMethodCardWith3DSecureCardTdsType                         `json:"tds_type"`
	TdTenantName                OptNilString                                                     `json:"td_tenant_name"`
	Tds2Type                    OptNilPaymentMethodCardWith3DSecureCardTds2Type                  `json:"tds2_type"`
	Tds2ChAccChange             OptNilString                                                     `json:"tds2_ch_acc_change"`
	Tds2ChAccDate               OptNilString                                                     `json:"tds2_ch_acc_date"`
	Tds2ChAccPwChange           OptNilString                                                     `json:"tds2_ch_acc_pw_change"`
	Tds2NbPurchaseAccount       OptNilString                                                     `json:"tds2_nb_purchase_account"`
	Tds2PaymentAccAge           OptNilString                                                     `json:"tds2_payment_acc_age"`
	Tds2ProvisionAttemptsDay    OptNilString                                                     `json:"tds2_provision_attempts_day"`
	Tds2ShipAddressUsage        OptNilString                                                     `json:"tds2_ship_address_usage"`
	Tds2ShipNameInd             OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd           `json:"tds2_ship_name_ind"`
	Tds2SuspiciousAccActivity   OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity `json:"tds2_suspicious_acc_activity"`
	Tds2TxnActivityDay          OptNilString                                                     `json:"tds2_txn_activity_day"`
	Tds2TxnActivityYear         OptNilString                                                     `json:"tds2_txn_activity_year"`
	Tds2ThreeDsReqAuthData      OptNilString                                                     `json:"tds2_three_ds_req_auth_data"`
	Tds2ThreeDsReqAuthMethod    OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod  `json:"tds2_three_ds_req_auth_method"`
	Tds2ThreeDsReqAuthTimestamp OptNilString                                                     `json:"tds2_three_ds_req_auth_timestamp"`
	Tds2AddrMatch               OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch             `json:"tds2_addr_match"`
	Tds2BillAddrCity            OptNilString                                                     `json:"tds2_bill_addr_city"`
	Tds2BillAddrCountry         OptNilString                                                     `json:"tds2_bill_addr_country"`
	Tds2BillAddrLine1           OptNilString                                                     `json:"tds2_bill_addr_line1"`
	Tds2BillAddrLine2           OptNilString                                                     `json:"tds2_bill_addr_line2"`
	Tds2BillAddrLine3           OptNilString                                                     `json:"tds2_bill_addr_line3"`
	Tds2BillAddrPostalCode      OptNilString                                                     `json:"tds2_bill_addr_postal_code"`
	Tds2BillAddrState           OptNilString                                                     `json:"tds2_bill_addr_state"`
	Tds2Email                   OptNilString                                                     `json:"tds2_email"`
	Tds2HomePhoneCc             OptNilString                                                     `json:"tds2_home_phone_cc"`
	Tds2HomePhoneNo             OptNilString                                                     `json:"tds2_home_phone_no"`
	Tds2MobilePhoneCc           OptNilString                                                     `json:"tds2_mobile_phone_cc"`
	Tds2MobilePhoneNo           OptNilString                                                     `json:"tds2_mobile_phone_no"`
	Tds2WorkPhoneCc             OptNilString                                                     `json:"tds2_work_phone_cc"`
	Tds2WorkPhoneNo             OptNilString                                                     `json:"tds2_work_phone_no"`
	Tds2ShipAddrCity            OptNilString                                                     `json:"tds2_ship_addr_city"`
	Tds2ShipAddrCountry         OptNilString                                                     `json:"tds2_ship_addr_country"`
	Tds2ShipAddrLine1           OptNilString                                                     `json:"tds2_ship_addr_line1"`
	Tds2ShipAddrLine2           OptNilString                                                     `json:"tds2_ship_addr_line2"`
	Tds2ShipAddrLine3           OptNilString                                                     `json:"tds2_ship_addr_line3"`
	Tds2ShipAddrPostCode        OptNilString                                                     `json:"tds2_ship_addr_post_code"`
	Tds2ShipAddrState           OptNilString                                                     `json:"tds2_ship_addr_state"`
	Tds2DeliveryEmailAddress    OptNilString                                                     `json:"tds2_delivery_email_address"`
	Tds2DeliveryTimeframe       OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe     `json:"tds2_delivery_timeframe"`
	Tds2GiftCardAmount          OptNilString                                                     `json:"tds2_gift_card_amount"`
	Tds2GiftCardCount           OptNilString                                                     `json:"tds2_gift_card_count"`
	Tds2GiftCardCurr            OptNilString                                                     `json:"tds2_gift_card_curr"`
	Tds2PreOrderDate            OptNilString                                                     `json:"tds2_pre_order_date"`
	Tds2PreOrderPurchaseInd     OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd   `json:"tds2_pre_order_purchase_ind"`
	Tds2ReorderItemsInd         OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd       `json:"tds2_reorder_items_ind"`
	Tds2ShipInd                 OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd               `json:"tds2_ship_ind"`
	Tds2ReccurringExpiry        OptNilString                                                     `json:"tds2_reccurring_expiry"`
	Tds2ReccurringFrequncy      OptNilString                                                     `json:"tds2_reccurring_frequncy"`
}

// GetToken returns the value of Token.
func (s *PaymentMethodCardWith3DSecureCard) GetToken() string {
	return s.Token
}

// GetTdsType returns the value of TdsType.
func (s *PaymentMethodCardWith3DSecureCard) GetTdsType() PaymentMethodCardWith3DSecureCardTdsType {
	return s.TdsType
}

// GetTdTenantName returns the value of TdTenantName.
func (s *PaymentMethodCardWith3DSecureCard) GetTdTenantName() OptNilString {
	return s.TdTenantName
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2Type() OptNilPaymentMethodCardWith3DSecureCardTds2Type {
	return s.Tds2Type
}

// GetTds2ChAccChange returns the value of Tds2ChAccChange.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ChAccChange() OptNilString {
	return s.Tds2ChAccChange
}

// GetTds2ChAccDate returns the value of Tds2ChAccDate.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ChAccDate() OptNilString {
	return s.Tds2ChAccDate
}

// GetTds2ChAccPwChange returns the value of Tds2ChAccPwChange.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ChAccPwChange() OptNilString {
	return s.Tds2ChAccPwChange
}

// GetTds2NbPurchaseAccount returns the value of Tds2NbPurchaseAccount.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2NbPurchaseAccount() OptNilString {
	return s.Tds2NbPurchaseAccount
}

// GetTds2PaymentAccAge returns the value of Tds2PaymentAccAge.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2PaymentAccAge() OptNilString {
	return s.Tds2PaymentAccAge
}

// GetTds2ProvisionAttemptsDay returns the value of Tds2ProvisionAttemptsDay.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ProvisionAttemptsDay() OptNilString {
	return s.Tds2ProvisionAttemptsDay
}

// GetTds2ShipAddressUsage returns the value of Tds2ShipAddressUsage.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddressUsage() OptNilString {
	return s.Tds2ShipAddressUsage
}

// GetTds2ShipNameInd returns the value of Tds2ShipNameInd.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipNameInd() OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd {
	return s.Tds2ShipNameInd
}

// GetTds2SuspiciousAccActivity returns the value of Tds2SuspiciousAccActivity.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2SuspiciousAccActivity() OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity {
	return s.Tds2SuspiciousAccActivity
}

// GetTds2TxnActivityDay returns the value of Tds2TxnActivityDay.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2TxnActivityDay() OptNilString {
	return s.Tds2TxnActivityDay
}

// GetTds2TxnActivityYear returns the value of Tds2TxnActivityYear.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2TxnActivityYear() OptNilString {
	return s.Tds2TxnActivityYear
}

// GetTds2ThreeDsReqAuthData returns the value of Tds2ThreeDsReqAuthData.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ThreeDsReqAuthData() OptNilString {
	return s.Tds2ThreeDsReqAuthData
}

// GetTds2ThreeDsReqAuthMethod returns the value of Tds2ThreeDsReqAuthMethod.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ThreeDsReqAuthMethod() OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod {
	return s.Tds2ThreeDsReqAuthMethod
}

// GetTds2ThreeDsReqAuthTimestamp returns the value of Tds2ThreeDsReqAuthTimestamp.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ThreeDsReqAuthTimestamp() OptNilString {
	return s.Tds2ThreeDsReqAuthTimestamp
}

// GetTds2AddrMatch returns the value of Tds2AddrMatch.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2AddrMatch() OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch {
	return s.Tds2AddrMatch
}

// GetTds2BillAddrCity returns the value of Tds2BillAddrCity.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2BillAddrCity() OptNilString {
	return s.Tds2BillAddrCity
}

// GetTds2BillAddrCountry returns the value of Tds2BillAddrCountry.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2BillAddrCountry() OptNilString {
	return s.Tds2BillAddrCountry
}

// GetTds2BillAddrLine1 returns the value of Tds2BillAddrLine1.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2BillAddrLine1() OptNilString {
	return s.Tds2BillAddrLine1
}

// GetTds2BillAddrLine2 returns the value of Tds2BillAddrLine2.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2BillAddrLine2() OptNilString {
	return s.Tds2BillAddrLine2
}

// GetTds2BillAddrLine3 returns the value of Tds2BillAddrLine3.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2BillAddrLine3() OptNilString {
	return s.Tds2BillAddrLine3
}

// GetTds2BillAddrPostalCode returns the value of Tds2BillAddrPostalCode.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2BillAddrPostalCode() OptNilString {
	return s.Tds2BillAddrPostalCode
}

// GetTds2BillAddrState returns the value of Tds2BillAddrState.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2BillAddrState() OptNilString {
	return s.Tds2BillAddrState
}

// GetTds2Email returns the value of Tds2Email.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2Email() OptNilString {
	return s.Tds2Email
}

// GetTds2HomePhoneCc returns the value of Tds2HomePhoneCc.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2HomePhoneCc() OptNilString {
	return s.Tds2HomePhoneCc
}

// GetTds2HomePhoneNo returns the value of Tds2HomePhoneNo.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2HomePhoneNo() OptNilString {
	return s.Tds2HomePhoneNo
}

// GetTds2MobilePhoneCc returns the value of Tds2MobilePhoneCc.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2MobilePhoneCc() OptNilString {
	return s.Tds2MobilePhoneCc
}

// GetTds2MobilePhoneNo returns the value of Tds2MobilePhoneNo.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2MobilePhoneNo() OptNilString {
	return s.Tds2MobilePhoneNo
}

// GetTds2WorkPhoneCc returns the value of Tds2WorkPhoneCc.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2WorkPhoneCc() OptNilString {
	return s.Tds2WorkPhoneCc
}

// GetTds2WorkPhoneNo returns the value of Tds2WorkPhoneNo.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2WorkPhoneNo() OptNilString {
	return s.Tds2WorkPhoneNo
}

// GetTds2ShipAddrCity returns the value of Tds2ShipAddrCity.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddrCity() OptNilString {
	return s.Tds2ShipAddrCity
}

// GetTds2ShipAddrCountry returns the value of Tds2ShipAddrCountry.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddrCountry() OptNilString {
	return s.Tds2ShipAddrCountry
}

// GetTds2ShipAddrLine1 returns the value of Tds2ShipAddrLine1.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddrLine1() OptNilString {
	return s.Tds2ShipAddrLine1
}

// GetTds2ShipAddrLine2 returns the value of Tds2ShipAddrLine2.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddrLine2() OptNilString {
	return s.Tds2ShipAddrLine2
}

// GetTds2ShipAddrLine3 returns the value of Tds2ShipAddrLine3.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddrLine3() OptNilString {
	return s.Tds2ShipAddrLine3
}

// GetTds2ShipAddrPostCode returns the value of Tds2ShipAddrPostCode.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddrPostCode() OptNilString {
	return s.Tds2ShipAddrPostCode
}

// GetTds2ShipAddrState returns the value of Tds2ShipAddrState.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipAddrState() OptNilString {
	return s.Tds2ShipAddrState
}

// GetTds2DeliveryEmailAddress returns the value of Tds2DeliveryEmailAddress.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2DeliveryEmailAddress() OptNilString {
	return s.Tds2DeliveryEmailAddress
}

// GetTds2DeliveryTimeframe returns the value of Tds2DeliveryTimeframe.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2DeliveryTimeframe() OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe {
	return s.Tds2DeliveryTimeframe
}

// GetTds2GiftCardAmount returns the value of Tds2GiftCardAmount.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2GiftCardAmount() OptNilString {
	return s.Tds2GiftCardAmount
}

// GetTds2GiftCardCount returns the value of Tds2GiftCardCount.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2GiftCardCount() OptNilString {
	return s.Tds2GiftCardCount
}

// GetTds2GiftCardCurr returns the value of Tds2GiftCardCurr.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2GiftCardCurr() OptNilString {
	return s.Tds2GiftCardCurr
}

// GetTds2PreOrderDate returns the value of Tds2PreOrderDate.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2PreOrderDate() OptNilString {
	return s.Tds2PreOrderDate
}

// GetTds2PreOrderPurchaseInd returns the value of Tds2PreOrderPurchaseInd.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2PreOrderPurchaseInd() OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd {
	return s.Tds2PreOrderPurchaseInd
}

// GetTds2ReorderItemsInd returns the value of Tds2ReorderItemsInd.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ReorderItemsInd() OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd {
	return s.Tds2ReorderItemsInd
}

// GetTds2ShipInd returns the value of Tds2ShipInd.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ShipInd() OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd {
	return s.Tds2ShipInd
}

// GetTds2ReccurringExpiry returns the value of Tds2ReccurringExpiry.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ReccurringExpiry() OptNilString {
	return s.Tds2ReccurringExpiry
}

// GetTds2ReccurringFrequncy returns the value of Tds2ReccurringFrequncy.
func (s *PaymentMethodCardWith3DSecureCard) GetTds2ReccurringFrequncy() OptNilString {
	return s.Tds2ReccurringFrequncy
}

// SetToken sets the value of Token.
func (s *PaymentMethodCardWith3DSecureCard) SetToken(val string) {
	s.Token = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentMethodCardWith3DSecureCard) SetTdsType(val PaymentMethodCardWith3DSecureCardTdsType) {
	s.TdsType = val
}

// SetTdTenantName sets the value of TdTenantName.
func (s *PaymentMethodCardWith3DSecureCard) SetTdTenantName(val OptNilString) {
	s.TdTenantName = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2Type(val OptNilPaymentMethodCardWith3DSecureCardTds2Type) {
	s.Tds2Type = val
}

// SetTds2ChAccChange sets the value of Tds2ChAccChange.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ChAccChange(val OptNilString) {
	s.Tds2ChAccChange = val
}

// SetTds2ChAccDate sets the value of Tds2ChAccDate.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ChAccDate(val OptNilString) {
	s.Tds2ChAccDate = val
}

// SetTds2ChAccPwChange sets the value of Tds2ChAccPwChange.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ChAccPwChange(val OptNilString) {
	s.Tds2ChAccPwChange = val
}

// SetTds2NbPurchaseAccount sets the value of Tds2NbPurchaseAccount.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2NbPurchaseAccount(val OptNilString) {
	s.Tds2NbPurchaseAccount = val
}

// SetTds2PaymentAccAge sets the value of Tds2PaymentAccAge.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2PaymentAccAge(val OptNilString) {
	s.Tds2PaymentAccAge = val
}

// SetTds2ProvisionAttemptsDay sets the value of Tds2ProvisionAttemptsDay.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ProvisionAttemptsDay(val OptNilString) {
	s.Tds2ProvisionAttemptsDay = val
}

// SetTds2ShipAddressUsage sets the value of Tds2ShipAddressUsage.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddressUsage(val OptNilString) {
	s.Tds2ShipAddressUsage = val
}

// SetTds2ShipNameInd sets the value of Tds2ShipNameInd.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipNameInd(val OptNilPaymentMethodCardWith3DSecureCardTds2ShipNameInd) {
	s.Tds2ShipNameInd = val
}

// SetTds2SuspiciousAccActivity sets the value of Tds2SuspiciousAccActivity.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2SuspiciousAccActivity(val OptNilPaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) {
	s.Tds2SuspiciousAccActivity = val
}

// SetTds2TxnActivityDay sets the value of Tds2TxnActivityDay.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2TxnActivityDay(val OptNilString) {
	s.Tds2TxnActivityDay = val
}

// SetTds2TxnActivityYear sets the value of Tds2TxnActivityYear.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2TxnActivityYear(val OptNilString) {
	s.Tds2TxnActivityYear = val
}

// SetTds2ThreeDsReqAuthData sets the value of Tds2ThreeDsReqAuthData.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ThreeDsReqAuthData(val OptNilString) {
	s.Tds2ThreeDsReqAuthData = val
}

// SetTds2ThreeDsReqAuthMethod sets the value of Tds2ThreeDsReqAuthMethod.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ThreeDsReqAuthMethod(val OptNilPaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) {
	s.Tds2ThreeDsReqAuthMethod = val
}

// SetTds2ThreeDsReqAuthTimestamp sets the value of Tds2ThreeDsReqAuthTimestamp.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ThreeDsReqAuthTimestamp(val OptNilString) {
	s.Tds2ThreeDsReqAuthTimestamp = val
}

// SetTds2AddrMatch sets the value of Tds2AddrMatch.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2AddrMatch(val OptNilPaymentMethodCardWith3DSecureCardTds2AddrMatch) {
	s.Tds2AddrMatch = val
}

// SetTds2BillAddrCity sets the value of Tds2BillAddrCity.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2BillAddrCity(val OptNilString) {
	s.Tds2BillAddrCity = val
}

// SetTds2BillAddrCountry sets the value of Tds2BillAddrCountry.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2BillAddrCountry(val OptNilString) {
	s.Tds2BillAddrCountry = val
}

// SetTds2BillAddrLine1 sets the value of Tds2BillAddrLine1.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2BillAddrLine1(val OptNilString) {
	s.Tds2BillAddrLine1 = val
}

// SetTds2BillAddrLine2 sets the value of Tds2BillAddrLine2.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2BillAddrLine2(val OptNilString) {
	s.Tds2BillAddrLine2 = val
}

// SetTds2BillAddrLine3 sets the value of Tds2BillAddrLine3.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2BillAddrLine3(val OptNilString) {
	s.Tds2BillAddrLine3 = val
}

// SetTds2BillAddrPostalCode sets the value of Tds2BillAddrPostalCode.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2BillAddrPostalCode(val OptNilString) {
	s.Tds2BillAddrPostalCode = val
}

// SetTds2BillAddrState sets the value of Tds2BillAddrState.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2BillAddrState(val OptNilString) {
	s.Tds2BillAddrState = val
}

// SetTds2Email sets the value of Tds2Email.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2Email(val OptNilString) {
	s.Tds2Email = val
}

// SetTds2HomePhoneCc sets the value of Tds2HomePhoneCc.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2HomePhoneCc(val OptNilString) {
	s.Tds2HomePhoneCc = val
}

// SetTds2HomePhoneNo sets the value of Tds2HomePhoneNo.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2HomePhoneNo(val OptNilString) {
	s.Tds2HomePhoneNo = val
}

// SetTds2MobilePhoneCc sets the value of Tds2MobilePhoneCc.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2MobilePhoneCc(val OptNilString) {
	s.Tds2MobilePhoneCc = val
}

// SetTds2MobilePhoneNo sets the value of Tds2MobilePhoneNo.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2MobilePhoneNo(val OptNilString) {
	s.Tds2MobilePhoneNo = val
}

// SetTds2WorkPhoneCc sets the value of Tds2WorkPhoneCc.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2WorkPhoneCc(val OptNilString) {
	s.Tds2WorkPhoneCc = val
}

// SetTds2WorkPhoneNo sets the value of Tds2WorkPhoneNo.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2WorkPhoneNo(val OptNilString) {
	s.Tds2WorkPhoneNo = val
}

// SetTds2ShipAddrCity sets the value of Tds2ShipAddrCity.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddrCity(val OptNilString) {
	s.Tds2ShipAddrCity = val
}

// SetTds2ShipAddrCountry sets the value of Tds2ShipAddrCountry.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddrCountry(val OptNilString) {
	s.Tds2ShipAddrCountry = val
}

// SetTds2ShipAddrLine1 sets the value of Tds2ShipAddrLine1.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddrLine1(val OptNilString) {
	s.Tds2ShipAddrLine1 = val
}

// SetTds2ShipAddrLine2 sets the value of Tds2ShipAddrLine2.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddrLine2(val OptNilString) {
	s.Tds2ShipAddrLine2 = val
}

// SetTds2ShipAddrLine3 sets the value of Tds2ShipAddrLine3.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddrLine3(val OptNilString) {
	s.Tds2ShipAddrLine3 = val
}

// SetTds2ShipAddrPostCode sets the value of Tds2ShipAddrPostCode.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddrPostCode(val OptNilString) {
	s.Tds2ShipAddrPostCode = val
}

// SetTds2ShipAddrState sets the value of Tds2ShipAddrState.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipAddrState(val OptNilString) {
	s.Tds2ShipAddrState = val
}

// SetTds2DeliveryEmailAddress sets the value of Tds2DeliveryEmailAddress.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2DeliveryEmailAddress(val OptNilString) {
	s.Tds2DeliveryEmailAddress = val
}

// SetTds2DeliveryTimeframe sets the value of Tds2DeliveryTimeframe.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2DeliveryTimeframe(val OptNilPaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) {
	s.Tds2DeliveryTimeframe = val
}

// SetTds2GiftCardAmount sets the value of Tds2GiftCardAmount.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2GiftCardAmount(val OptNilString) {
	s.Tds2GiftCardAmount = val
}

// SetTds2GiftCardCount sets the value of Tds2GiftCardCount.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2GiftCardCount(val OptNilString) {
	s.Tds2GiftCardCount = val
}

// SetTds2GiftCardCurr sets the value of Tds2GiftCardCurr.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2GiftCardCurr(val OptNilString) {
	s.Tds2GiftCardCurr = val
}

// SetTds2PreOrderDate sets the value of Tds2PreOrderDate.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2PreOrderDate(val OptNilString) {
	s.Tds2PreOrderDate = val
}

// SetTds2PreOrderPurchaseInd sets the value of Tds2PreOrderPurchaseInd.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2PreOrderPurchaseInd(val OptNilPaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) {
	s.Tds2PreOrderPurchaseInd = val
}

// SetTds2ReorderItemsInd sets the value of Tds2ReorderItemsInd.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ReorderItemsInd(val OptNilPaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) {
	s.Tds2ReorderItemsInd = val
}

// SetTds2ShipInd sets the value of Tds2ShipInd.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ShipInd(val OptNilPaymentMethodCardWith3DSecureCardTds2ShipInd) {
	s.Tds2ShipInd = val
}

// SetTds2ReccurringExpiry sets the value of Tds2ReccurringExpiry.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ReccurringExpiry(val OptNilString) {
	s.Tds2ReccurringExpiry = val
}

// SetTds2ReccurringFrequncy sets the value of Tds2ReccurringFrequncy.
func (s *PaymentMethodCardWith3DSecureCard) SetTds2ReccurringFrequncy(val OptNilString) {
	s.Tds2ReccurringFrequncy = val
}

type PaymentMethodCardWith3DSecureCardTds2AddrMatch string

const (
	PaymentMethodCardWith3DSecureCardTds2AddrMatchY PaymentMethodCardWith3DSecureCardTds2AddrMatch = "Y"
	PaymentMethodCardWith3DSecureCardTds2AddrMatchN PaymentMethodCardWith3DSecureCardTds2AddrMatch = "N"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2AddrMatch values.
func (PaymentMethodCardWith3DSecureCardTds2AddrMatch) AllValues() []PaymentMethodCardWith3DSecureCardTds2AddrMatch {
	return []PaymentMethodCardWith3DSecureCardTds2AddrMatch{
		PaymentMethodCardWith3DSecureCardTds2AddrMatchY,
		PaymentMethodCardWith3DSecureCardTds2AddrMatchN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2AddrMatch) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2AddrMatchY:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2AddrMatchN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2AddrMatch) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2AddrMatch(data) {
	case PaymentMethodCardWith3DSecureCardTds2AddrMatchY:
		*s = PaymentMethodCardWith3DSecureCardTds2AddrMatchY
		return nil
	case PaymentMethodCardWith3DSecureCardTds2AddrMatchN:
		*s = PaymentMethodCardWith3DSecureCardTds2AddrMatchN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe string

const (
	PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe01 PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe = "01"
	PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe02 PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe = "02"
	PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe03 PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe = "03"
	PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe04 PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe = "04"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe values.
func (PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) AllValues() []PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe {
	return []PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe{
		PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe01,
		PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe02,
		PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe03,
		PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe04,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe01:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe02:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe03:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe04:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe(data) {
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe01:
		*s = PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe01
		return nil
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe02:
		*s = PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe02
		return nil
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe03:
		*s = PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe03
		return nil
	case PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe04:
		*s = PaymentMethodCardWith3DSecureCardTds2DeliveryTimeframe04
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd string

const (
	PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd01 PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd = "01"
	PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd02 PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd = "02"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd values.
func (PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) AllValues() []PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd {
	return []PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd{
		PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd01,
		PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd01:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd(data) {
	case PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd01:
		*s = PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd01
		return nil
	case PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd02:
		*s = PaymentMethodCardWith3DSecureCardTds2PreOrderPurchaseInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd string

const (
	PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd01 PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd = "01"
	PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd02 PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd = "02"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd values.
func (PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) AllValues() []PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd {
	return []PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd{
		PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd01,
		PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd01:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd(data) {
	case PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd01:
		*s = PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd01
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd02:
		*s = PaymentMethodCardWith3DSecureCardTds2ReorderItemsInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2ShipInd string

const (
	PaymentMethodCardWith3DSecureCardTds2ShipInd01 PaymentMethodCardWith3DSecureCardTds2ShipInd = "01"
	PaymentMethodCardWith3DSecureCardTds2ShipInd02 PaymentMethodCardWith3DSecureCardTds2ShipInd = "02"
	PaymentMethodCardWith3DSecureCardTds2ShipInd03 PaymentMethodCardWith3DSecureCardTds2ShipInd = "03"
	PaymentMethodCardWith3DSecureCardTds2ShipInd04 PaymentMethodCardWith3DSecureCardTds2ShipInd = "04"
	PaymentMethodCardWith3DSecureCardTds2ShipInd05 PaymentMethodCardWith3DSecureCardTds2ShipInd = "05"
	PaymentMethodCardWith3DSecureCardTds2ShipInd06 PaymentMethodCardWith3DSecureCardTds2ShipInd = "06"
	PaymentMethodCardWith3DSecureCardTds2ShipInd07 PaymentMethodCardWith3DSecureCardTds2ShipInd = "07"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2ShipInd values.
func (PaymentMethodCardWith3DSecureCardTds2ShipInd) AllValues() []PaymentMethodCardWith3DSecureCardTds2ShipInd {
	return []PaymentMethodCardWith3DSecureCardTds2ShipInd{
		PaymentMethodCardWith3DSecureCardTds2ShipInd01,
		PaymentMethodCardWith3DSecureCardTds2ShipInd02,
		PaymentMethodCardWith3DSecureCardTds2ShipInd03,
		PaymentMethodCardWith3DSecureCardTds2ShipInd04,
		PaymentMethodCardWith3DSecureCardTds2ShipInd05,
		PaymentMethodCardWith3DSecureCardTds2ShipInd06,
		PaymentMethodCardWith3DSecureCardTds2ShipInd07,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2ShipInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2ShipInd01:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd02:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd03:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd04:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd05:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd06:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd07:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2ShipInd) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2ShipInd(data) {
	case PaymentMethodCardWith3DSecureCardTds2ShipInd01:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipInd01
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd02:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipInd02
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd03:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipInd03
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd04:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipInd04
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd05:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipInd05
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd06:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipInd06
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ShipInd07:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipInd07
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2ShipNameInd string

const (
	PaymentMethodCardWith3DSecureCardTds2ShipNameInd01 PaymentMethodCardWith3DSecureCardTds2ShipNameInd = "01"
	PaymentMethodCardWith3DSecureCardTds2ShipNameInd02 PaymentMethodCardWith3DSecureCardTds2ShipNameInd = "02"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2ShipNameInd values.
func (PaymentMethodCardWith3DSecureCardTds2ShipNameInd) AllValues() []PaymentMethodCardWith3DSecureCardTds2ShipNameInd {
	return []PaymentMethodCardWith3DSecureCardTds2ShipNameInd{
		PaymentMethodCardWith3DSecureCardTds2ShipNameInd01,
		PaymentMethodCardWith3DSecureCardTds2ShipNameInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2ShipNameInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2ShipNameInd01:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ShipNameInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2ShipNameInd) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2ShipNameInd(data) {
	case PaymentMethodCardWith3DSecureCardTds2ShipNameInd01:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipNameInd01
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ShipNameInd02:
		*s = PaymentMethodCardWith3DSecureCardTds2ShipNameInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity string

const (
	PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity01 PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity = "01"
	PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity02 PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity = "02"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity values.
func (PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) AllValues() []PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity {
	return []PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity{
		PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity01,
		PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity01:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity(data) {
	case PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity01:
		*s = PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity01
		return nil
	case PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity02:
		*s = PaymentMethodCardWith3DSecureCardTds2SuspiciousAccActivity02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod string

const (
	PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod01 PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod = "01"
	PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod02 PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod = "02"
	PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod03 PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod = "03"
	PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod04 PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod = "04"
	PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod05 PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod = "05"
	PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod06 PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod = "06"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod values.
func (PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) AllValues() []PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod {
	return []PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod{
		PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod01,
		PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod02,
		PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod03,
		PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod04,
		PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod05,
		PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod06,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod01:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod02:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod03:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod04:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod05:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod06:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod(data) {
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod01:
		*s = PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod01
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod02:
		*s = PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod02
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod03:
		*s = PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod03
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod04:
		*s = PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod04
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod05:
		*s = PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod05
		return nil
	case PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod06:
		*s = PaymentMethodCardWith3DSecureCardTds2ThreeDsReqAuthMethod06
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTds2Type string

const (
	PaymentMethodCardWith3DSecureCardTds2Type2 PaymentMethodCardWith3DSecureCardTds2Type = "2"
	PaymentMethodCardWith3DSecureCardTds2Type3 PaymentMethodCardWith3DSecureCardTds2Type = "3"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTds2Type values.
func (PaymentMethodCardWith3DSecureCardTds2Type) AllValues() []PaymentMethodCardWith3DSecureCardTds2Type {
	return []PaymentMethodCardWith3DSecureCardTds2Type{
		PaymentMethodCardWith3DSecureCardTds2Type2,
		PaymentMethodCardWith3DSecureCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTds2Type2:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTds2Type) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTds2Type(data) {
	case PaymentMethodCardWith3DSecureCardTds2Type2:
		*s = PaymentMethodCardWith3DSecureCardTds2Type2
		return nil
	case PaymentMethodCardWith3DSecureCardTds2Type3:
		*s = PaymentMethodCardWith3DSecureCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureCardTdsType string

const (
	PaymentMethodCardWith3DSecureCardTdsType0 PaymentMethodCardWith3DSecureCardTdsType = "0"
	PaymentMethodCardWith3DSecureCardTdsType2 PaymentMethodCardWith3DSecureCardTdsType = "2"
)

// AllValues returns all PaymentMethodCardWith3DSecureCardTdsType values.
func (PaymentMethodCardWith3DSecureCardTdsType) AllValues() []PaymentMethodCardWith3DSecureCardTdsType {
	return []PaymentMethodCardWith3DSecureCardTdsType{
		PaymentMethodCardWith3DSecureCardTdsType0,
		PaymentMethodCardWith3DSecureCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureCardTdsType0:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureCardTdsType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureCardTdsType(data) {
	case PaymentMethodCardWith3DSecureCardTdsType0:
		*s = PaymentMethodCardWith3DSecureCardTdsType0
		return nil
	case PaymentMethodCardWith3DSecureCardTdsType2:
		*s = PaymentMethodCardWith3DSecureCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecureDefaultFlag string

const (
	PaymentMethodCardWith3DSecureDefaultFlag0 PaymentMethodCardWith3DSecureDefaultFlag = "0"
	PaymentMethodCardWith3DSecureDefaultFlag1 PaymentMethodCardWith3DSecureDefaultFlag = "1"
)

// AllValues returns all PaymentMethodCardWith3DSecureDefaultFlag values.
func (PaymentMethodCardWith3DSecureDefaultFlag) AllValues() []PaymentMethodCardWith3DSecureDefaultFlag {
	return []PaymentMethodCardWith3DSecureDefaultFlag{
		PaymentMethodCardWith3DSecureDefaultFlag0,
		PaymentMethodCardWith3DSecureDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecureDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecureDefaultFlag0:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecureDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecureDefaultFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecureDefaultFlag(data) {
	case PaymentMethodCardWith3DSecureDefaultFlag0:
		*s = PaymentMethodCardWith3DSecureDefaultFlag0
		return nil
	case PaymentMethodCardWith3DSecureDefaultFlag1:
		*s = PaymentMethodCardWith3DSecureDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWith3DSecurePayType string

const (
	PaymentMethodCardWith3DSecurePayTypeCard        PaymentMethodCardWith3DSecurePayType = "Card"
	PaymentMethodCardWith3DSecurePayTypeDirectdebit PaymentMethodCardWith3DSecurePayType = "Directdebit"
)

// AllValues returns all PaymentMethodCardWith3DSecurePayType values.
func (PaymentMethodCardWith3DSecurePayType) AllValues() []PaymentMethodCardWith3DSecurePayType {
	return []PaymentMethodCardWith3DSecurePayType{
		PaymentMethodCardWith3DSecurePayTypeCard,
		PaymentMethodCardWith3DSecurePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWith3DSecurePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWith3DSecurePayTypeCard:
		return []byte(s), nil
	case PaymentMethodCardWith3DSecurePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWith3DSecurePayType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWith3DSecurePayType(data) {
	case PaymentMethodCardWith3DSecurePayTypeCard:
		*s = PaymentMethodCardWith3DSecurePayTypeCard
		return nil
	case PaymentMethodCardWith3DSecurePayTypeDirectdebit:
		*s = PaymentMethodCardWith3DSecurePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentMethodCardWithout3DSecure
type PaymentMethodCardWithout3DSecure struct {
	PayType      PaymentMethodCardWithout3DSecurePayType     `json:"pay_type"`
	DefaultFlag  PaymentMethodCardWithout3DSecureDefaultFlag `json:"default_flag"`
	ClientField1 OptString                                   `json:"client_field_1"`
	ClientField2 OptString                                   `json:"client_field_2"`
	ClientField3 OptString                                   `json:"client_field_3"`
	Card         PaymentMethodCardWithout3DSecureCard        `json:"card"`
}

// GetPayType returns the value of PayType.
func (s *PaymentMethodCardWithout3DSecure) GetPayType() PaymentMethodCardWithout3DSecurePayType {
	return s.PayType
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *PaymentMethodCardWithout3DSecure) GetDefaultFlag() PaymentMethodCardWithout3DSecureDefaultFlag {
	return s.DefaultFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentMethodCardWithout3DSecure) GetClientField1() OptString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentMethodCardWithout3DSecure) GetClientField2() OptString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentMethodCardWithout3DSecure) GetClientField3() OptString {
	return s.ClientField3
}

// GetCard returns the value of Card.
func (s *PaymentMethodCardWithout3DSecure) GetCard() PaymentMethodCardWithout3DSecureCard {
	return s.Card
}

// SetPayType sets the value of PayType.
func (s *PaymentMethodCardWithout3DSecure) SetPayType(val PaymentMethodCardWithout3DSecurePayType) {
	s.PayType = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *PaymentMethodCardWithout3DSecure) SetDefaultFlag(val PaymentMethodCardWithout3DSecureDefaultFlag) {
	s.DefaultFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentMethodCardWithout3DSecure) SetClientField1(val OptString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentMethodCardWithout3DSecure) SetClientField2(val OptString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentMethodCardWithout3DSecure) SetClientField3(val OptString) {
	s.ClientField3 = val
}

// SetCard sets the value of Card.
func (s *PaymentMethodCardWithout3DSecure) SetCard(val PaymentMethodCardWithout3DSecureCard) {
	s.Card = val
}

type PaymentMethodCardWithout3DSecureCard struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *PaymentMethodCardWithout3DSecureCard) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *PaymentMethodCardWithout3DSecureCard) SetToken(val string) {
	s.Token = val
}

type PaymentMethodCardWithout3DSecureDefaultFlag string

const (
	PaymentMethodCardWithout3DSecureDefaultFlag0 PaymentMethodCardWithout3DSecureDefaultFlag = "0"
	PaymentMethodCardWithout3DSecureDefaultFlag1 PaymentMethodCardWithout3DSecureDefaultFlag = "1"
)

// AllValues returns all PaymentMethodCardWithout3DSecureDefaultFlag values.
func (PaymentMethodCardWithout3DSecureDefaultFlag) AllValues() []PaymentMethodCardWithout3DSecureDefaultFlag {
	return []PaymentMethodCardWithout3DSecureDefaultFlag{
		PaymentMethodCardWithout3DSecureDefaultFlag0,
		PaymentMethodCardWithout3DSecureDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWithout3DSecureDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWithout3DSecureDefaultFlag0:
		return []byte(s), nil
	case PaymentMethodCardWithout3DSecureDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWithout3DSecureDefaultFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWithout3DSecureDefaultFlag(data) {
	case PaymentMethodCardWithout3DSecureDefaultFlag0:
		*s = PaymentMethodCardWithout3DSecureDefaultFlag0
		return nil
	case PaymentMethodCardWithout3DSecureDefaultFlag1:
		*s = PaymentMethodCardWithout3DSecureDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodCardWithout3DSecurePayType string

const (
	PaymentMethodCardWithout3DSecurePayTypeCard        PaymentMethodCardWithout3DSecurePayType = "Card"
	PaymentMethodCardWithout3DSecurePayTypeDirectdebit PaymentMethodCardWithout3DSecurePayType = "Directdebit"
)

// AllValues returns all PaymentMethodCardWithout3DSecurePayType values.
func (PaymentMethodCardWithout3DSecurePayType) AllValues() []PaymentMethodCardWithout3DSecurePayType {
	return []PaymentMethodCardWithout3DSecurePayType{
		PaymentMethodCardWithout3DSecurePayTypeCard,
		PaymentMethodCardWithout3DSecurePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardWithout3DSecurePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardWithout3DSecurePayTypeCard:
		return []byte(s), nil
	case PaymentMethodCardWithout3DSecurePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardWithout3DSecurePayType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardWithout3DSecurePayType(data) {
	case PaymentMethodCardWithout3DSecurePayTypeCard:
		*s = PaymentMethodCardWithout3DSecurePayTypeCard
		return nil
	case PaymentMethodCardWithout3DSecurePayTypeDirectdebit:
		*s = PaymentMethodCardWithout3DSecurePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentMethodDirectDebit
type PaymentMethodDirectDebit struct {
	PayType      PaymentMethodDirectDebitPayType     `json:"pay_type"`
	DefaultFlag  PaymentMethodDirectDebitDefaultFlag `json:"default_flag"`
	ClientField1 OptString                           `json:"client_field_1"`
	ClientField2 OptString                           `json:"client_field_2"`
	ClientField3 OptString                           `json:"client_field_3"`
	Directdebit  PaymentMethodDirectDebitDirectdebit `json:"directdebit"`
}

// GetPayType returns the value of PayType.
func (s *PaymentMethodDirectDebit) GetPayType() PaymentMethodDirectDebitPayType {
	return s.PayType
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *PaymentMethodDirectDebit) GetDefaultFlag() PaymentMethodDirectDebitDefaultFlag {
	return s.DefaultFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentMethodDirectDebit) GetClientField1() OptString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentMethodDirectDebit) GetClientField2() OptString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentMethodDirectDebit) GetClientField3() OptString {
	return s.ClientField3
}

// GetDirectdebit returns the value of Directdebit.
func (s *PaymentMethodDirectDebit) GetDirectdebit() PaymentMethodDirectDebitDirectdebit {
	return s.Directdebit
}

// SetPayType sets the value of PayType.
func (s *PaymentMethodDirectDebit) SetPayType(val PaymentMethodDirectDebitPayType) {
	s.PayType = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *PaymentMethodDirectDebit) SetDefaultFlag(val PaymentMethodDirectDebitDefaultFlag) {
	s.DefaultFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentMethodDirectDebit) SetClientField1(val OptString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentMethodDirectDebit) SetClientField2(val OptString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentMethodDirectDebit) SetClientField3(val OptString) {
	s.ClientField3 = val
}

// SetDirectdebit sets the value of Directdebit.
func (s *PaymentMethodDirectDebit) SetDirectdebit(val PaymentMethodDirectDebitDirectdebit) {
	s.Directdebit = val
}

type PaymentMethodDirectDebitDefaultFlag string

const (
	PaymentMethodDirectDebitDefaultFlag0 PaymentMethodDirectDebitDefaultFlag = "0"
	PaymentMethodDirectDebitDefaultFlag1 PaymentMethodDirectDebitDefaultFlag = "1"
)

// AllValues returns all PaymentMethodDirectDebitDefaultFlag values.
func (PaymentMethodDirectDebitDefaultFlag) AllValues() []PaymentMethodDirectDebitDefaultFlag {
	return []PaymentMethodDirectDebitDefaultFlag{
		PaymentMethodDirectDebitDefaultFlag0,
		PaymentMethodDirectDebitDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitDefaultFlag0:
		return []byte(s), nil
	case PaymentMethodDirectDebitDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitDefaultFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitDefaultFlag(data) {
	case PaymentMethodDirectDebitDefaultFlag0:
		*s = PaymentMethodDirectDebitDefaultFlag0
		return nil
	case PaymentMethodDirectDebitDefaultFlag1:
		*s = PaymentMethodDirectDebitDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodDirectDebitDirectdebit struct {
	Token string `json:"token"`
}

// GetToken returns the value of Token.
func (s *PaymentMethodDirectDebitDirectdebit) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *PaymentMethodDirectDebitDirectdebit) SetToken(val string) {
	s.Token = val
}

type PaymentMethodDirectDebitPayType string

const (
	PaymentMethodDirectDebitPayTypeCard        PaymentMethodDirectDebitPayType = "Card"
	PaymentMethodDirectDebitPayTypeDirectdebit PaymentMethodDirectDebitPayType = "Directdebit"
)

// AllValues returns all PaymentMethodDirectDebitPayType values.
func (PaymentMethodDirectDebitPayType) AllValues() []PaymentMethodDirectDebitPayType {
	return []PaymentMethodDirectDebitPayType{
		PaymentMethodDirectDebitPayTypeCard,
		PaymentMethodDirectDebitPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitPayTypeCard:
		return []byte(s), nil
	case PaymentMethodDirectDebitPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitPayType) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitPayType(data) {
	case PaymentMethodDirectDebitPayTypeCard:
		*s = PaymentMethodDirectDebitPayTypeCard
		return nil
	case PaymentMethodDirectDebitPayTypeDirectdebit:
		*s = PaymentMethodDirectDebitPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentMethodDirectDebitResponse
type PaymentMethodDirectDebitResponse struct {
	ID                      OptString                                                  `json:"id"`
	PayType                 OptPaymentMethodDirectDebitResponsePayType                 `json:"pay_type"`
	CustomerID              OptString                                                  `json:"customer_id"`
	ProcessDate             OptString                                                  `json:"process_date"`
	RedirectURL             OptString                                                  `json:"redirect_url"`
	RedirectURLAccessedFlag OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag `json:"redirect_url_accessed_flag"`
	Status                  OptPaymentMethodDirectDebitResponseStatus                  `json:"status"`
	ReturnURL               OptString                                                  `json:"return_url"`
	DefaultFlag             OptString                                                  `json:"default_flag"`
	ClientField1            OptString                                                  `json:"client_field_1"`
	ClientField2            OptString                                                  `json:"client_field_2"`
	ClientField3            OptString                                                  `json:"client_field_3"`
	Created                 OptString                                                  `json:"created"`
	Updated                 OptString                                                  `json:"updated"`
	Directdebit             OptPaymentMethodDirectDebitResponseDirectdebit             `json:"directdebit"`
}

// GetID returns the value of ID.
func (s *PaymentMethodDirectDebitResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentMethodDirectDebitResponse) GetPayType() OptPaymentMethodDirectDebitResponsePayType {
	return s.PayType
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentMethodDirectDebitResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentMethodDirectDebitResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *PaymentMethodDirectDebitResponse) GetRedirectURL() OptString {
	return s.RedirectURL
}

// GetRedirectURLAccessedFlag returns the value of RedirectURLAccessedFlag.
func (s *PaymentMethodDirectDebitResponse) GetRedirectURLAccessedFlag() OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag {
	return s.RedirectURLAccessedFlag
}

// GetStatus returns the value of Status.
func (s *PaymentMethodDirectDebitResponse) GetStatus() OptPaymentMethodDirectDebitResponseStatus {
	return s.Status
}

// GetReturnURL returns the value of ReturnURL.
func (s *PaymentMethodDirectDebitResponse) GetReturnURL() OptString {
	return s.ReturnURL
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *PaymentMethodDirectDebitResponse) GetDefaultFlag() OptString {
	return s.DefaultFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentMethodDirectDebitResponse) GetClientField1() OptString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentMethodDirectDebitResponse) GetClientField2() OptString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentMethodDirectDebitResponse) GetClientField3() OptString {
	return s.ClientField3
}

// GetCreated returns the value of Created.
func (s *PaymentMethodDirectDebitResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentMethodDirectDebitResponse) GetUpdated() OptString {
	return s.Updated
}

// GetDirectdebit returns the value of Directdebit.
func (s *PaymentMethodDirectDebitResponse) GetDirectdebit() OptPaymentMethodDirectDebitResponseDirectdebit {
	return s.Directdebit
}

// SetID sets the value of ID.
func (s *PaymentMethodDirectDebitResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentMethodDirectDebitResponse) SetPayType(val OptPaymentMethodDirectDebitResponsePayType) {
	s.PayType = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentMethodDirectDebitResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentMethodDirectDebitResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *PaymentMethodDirectDebitResponse) SetRedirectURL(val OptString) {
	s.RedirectURL = val
}

// SetRedirectURLAccessedFlag sets the value of RedirectURLAccessedFlag.
func (s *PaymentMethodDirectDebitResponse) SetRedirectURLAccessedFlag(val OptPaymentMethodDirectDebitResponseRedirectURLAccessedFlag) {
	s.RedirectURLAccessedFlag = val
}

// SetStatus sets the value of Status.
func (s *PaymentMethodDirectDebitResponse) SetStatus(val OptPaymentMethodDirectDebitResponseStatus) {
	s.Status = val
}

// SetReturnURL sets the value of ReturnURL.
func (s *PaymentMethodDirectDebitResponse) SetReturnURL(val OptString) {
	s.ReturnURL = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *PaymentMethodDirectDebitResponse) SetDefaultFlag(val OptString) {
	s.DefaultFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentMethodDirectDebitResponse) SetClientField1(val OptString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentMethodDirectDebitResponse) SetClientField2(val OptString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentMethodDirectDebitResponse) SetClientField3(val OptString) {
	s.ClientField3 = val
}

// SetCreated sets the value of Created.
func (s *PaymentMethodDirectDebitResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentMethodDirectDebitResponse) SetUpdated(val OptString) {
	s.Updated = val
}

// SetDirectdebit sets the value of Directdebit.
func (s *PaymentMethodDirectDebitResponse) SetDirectdebit(val OptPaymentMethodDirectDebitResponseDirectdebit) {
	s.Directdebit = val
}

type PaymentMethodDirectDebitResponseDirectdebit struct {
	ApplicationType      OptPaymentMethodDirectDebitResponseDirectdebitApplicationType  `json:"application_type"`
	ExpectedBillableDate OptString                                                      `json:"expected_billable_date"`
	LastWithdrawalDate   OptString                                                      `json:"last_withdrawal_date"`
	LastResultCode       OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode   `json:"last_result_code"`
	BankType             OptPaymentMethodDirectDebitResponseDirectdebitBankType         `json:"bank_type"`
	BankCode             OptString                                                      `json:"bank_code"`
	BankName             OptString                                                      `json:"bank_name"`
	BranchCode           OptString                                                      `json:"branch_code"`
	BranchName           OptString                                                      `json:"branch_name"`
	AccountType          OptPaymentMethodDirectDebitResponseDirectdebitAccountType      `json:"account_type"`
	AccountNumber        OptString                                                      `json:"account_number"`
	PostalAccountNumber1 OptString                                                      `json:"postal_account_number_1"`
	PostalAccountNumber2 OptString                                                      `json:"postal_account_number_2"`
	AccountName          OptString                                                      `json:"account_name"`
	AccountNameKana      OptString                                                      `json:"account_name_kana"`
	PaperApplication     OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication `json:"paper_application"`
}

// GetApplicationType returns the value of ApplicationType.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetApplicationType() OptPaymentMethodDirectDebitResponseDirectdebitApplicationType {
	return s.ApplicationType
}

// GetExpectedBillableDate returns the value of ExpectedBillableDate.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetExpectedBillableDate() OptString {
	return s.ExpectedBillableDate
}

// GetLastWithdrawalDate returns the value of LastWithdrawalDate.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetLastWithdrawalDate() OptString {
	return s.LastWithdrawalDate
}

// GetLastResultCode returns the value of LastResultCode.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetLastResultCode() OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode {
	return s.LastResultCode
}

// GetBankType returns the value of BankType.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetBankType() OptPaymentMethodDirectDebitResponseDirectdebitBankType {
	return s.BankType
}

// GetBankCode returns the value of BankCode.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetBankCode() OptString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetBankName() OptString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetBranchName() OptString {
	return s.BranchName
}

// GetAccountType returns the value of AccountType.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetAccountType() OptPaymentMethodDirectDebitResponseDirectdebitAccountType {
	return s.AccountType
}

// GetAccountNumber returns the value of AccountNumber.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetPostalAccountNumber1 returns the value of PostalAccountNumber1.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetPostalAccountNumber1() OptString {
	return s.PostalAccountNumber1
}

// GetPostalAccountNumber2 returns the value of PostalAccountNumber2.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetPostalAccountNumber2() OptString {
	return s.PostalAccountNumber2
}

// GetAccountName returns the value of AccountName.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetAccountName() OptString {
	return s.AccountName
}

// GetAccountNameKana returns the value of AccountNameKana.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetAccountNameKana() OptString {
	return s.AccountNameKana
}

// GetPaperApplication returns the value of PaperApplication.
func (s *PaymentMethodDirectDebitResponseDirectdebit) GetPaperApplication() OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication {
	return s.PaperApplication
}

// SetApplicationType sets the value of ApplicationType.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetApplicationType(val OptPaymentMethodDirectDebitResponseDirectdebitApplicationType) {
	s.ApplicationType = val
}

// SetExpectedBillableDate sets the value of ExpectedBillableDate.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetExpectedBillableDate(val OptString) {
	s.ExpectedBillableDate = val
}

// SetLastWithdrawalDate sets the value of LastWithdrawalDate.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetLastWithdrawalDate(val OptString) {
	s.LastWithdrawalDate = val
}

// SetLastResultCode sets the value of LastResultCode.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetLastResultCode(val OptPaymentMethodDirectDebitResponseDirectdebitLastResultCode) {
	s.LastResultCode = val
}

// SetBankType sets the value of BankType.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetBankType(val OptPaymentMethodDirectDebitResponseDirectdebitBankType) {
	s.BankType = val
}

// SetBankCode sets the value of BankCode.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetBankName(val OptString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetAccountType sets the value of AccountType.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetAccountType(val OptPaymentMethodDirectDebitResponseDirectdebitAccountType) {
	s.AccountType = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetPostalAccountNumber1 sets the value of PostalAccountNumber1.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetPostalAccountNumber1(val OptString) {
	s.PostalAccountNumber1 = val
}

// SetPostalAccountNumber2 sets the value of PostalAccountNumber2.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetPostalAccountNumber2(val OptString) {
	s.PostalAccountNumber2 = val
}

// SetAccountName sets the value of AccountName.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetAccountName(val OptString) {
	s.AccountName = val
}

// SetAccountNameKana sets the value of AccountNameKana.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetAccountNameKana(val OptString) {
	s.AccountNameKana = val
}

// SetPaperApplication sets the value of PaperApplication.
func (s *PaymentMethodDirectDebitResponseDirectdebit) SetPaperApplication(val OptPaymentMethodDirectDebitResponseDirectdebitPaperApplication) {
	s.PaperApplication = val
}

type PaymentMethodDirectDebitResponseDirectdebitAccountType string

const (
	PaymentMethodDirectDebitResponseDirectdebitAccountType0 PaymentMethodDirectDebitResponseDirectdebitAccountType = "0"
	PaymentMethodDirectDebitResponseDirectdebitAccountType1 PaymentMethodDirectDebitResponseDirectdebitAccountType = "1"
)

// AllValues returns all PaymentMethodDirectDebitResponseDirectdebitAccountType values.
func (PaymentMethodDirectDebitResponseDirectdebitAccountType) AllValues() []PaymentMethodDirectDebitResponseDirectdebitAccountType {
	return []PaymentMethodDirectDebitResponseDirectdebitAccountType{
		PaymentMethodDirectDebitResponseDirectdebitAccountType0,
		PaymentMethodDirectDebitResponseDirectdebitAccountType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitResponseDirectdebitAccountType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitResponseDirectdebitAccountType0:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitAccountType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitResponseDirectdebitAccountType) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitResponseDirectdebitAccountType(data) {
	case PaymentMethodDirectDebitResponseDirectdebitAccountType0:
		*s = PaymentMethodDirectDebitResponseDirectdebitAccountType0
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitAccountType1:
		*s = PaymentMethodDirectDebitResponseDirectdebitAccountType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodDirectDebitResponseDirectdebitApplicationType string

const (
	PaymentMethodDirectDebitResponseDirectdebitApplicationTypeONLINE PaymentMethodDirectDebitResponseDirectdebitApplicationType = "ONLINE"
	PaymentMethodDirectDebitResponseDirectdebitApplicationTypePAPER  PaymentMethodDirectDebitResponseDirectdebitApplicationType = "PAPER"
)

// AllValues returns all PaymentMethodDirectDebitResponseDirectdebitApplicationType values.
func (PaymentMethodDirectDebitResponseDirectdebitApplicationType) AllValues() []PaymentMethodDirectDebitResponseDirectdebitApplicationType {
	return []PaymentMethodDirectDebitResponseDirectdebitApplicationType{
		PaymentMethodDirectDebitResponseDirectdebitApplicationTypeONLINE,
		PaymentMethodDirectDebitResponseDirectdebitApplicationTypePAPER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitResponseDirectdebitApplicationType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitResponseDirectdebitApplicationTypeONLINE:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitApplicationTypePAPER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitResponseDirectdebitApplicationType) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitResponseDirectdebitApplicationType(data) {
	case PaymentMethodDirectDebitResponseDirectdebitApplicationTypeONLINE:
		*s = PaymentMethodDirectDebitResponseDirectdebitApplicationTypeONLINE
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitApplicationTypePAPER:
		*s = PaymentMethodDirectDebitResponseDirectdebitApplicationTypePAPER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodDirectDebitResponseDirectdebitBankType string

const (
	PaymentMethodDirectDebitResponseDirectdebitBankType0 PaymentMethodDirectDebitResponseDirectdebitBankType = "0"
	PaymentMethodDirectDebitResponseDirectdebitBankType1 PaymentMethodDirectDebitResponseDirectdebitBankType = "1"
)

// AllValues returns all PaymentMethodDirectDebitResponseDirectdebitBankType values.
func (PaymentMethodDirectDebitResponseDirectdebitBankType) AllValues() []PaymentMethodDirectDebitResponseDirectdebitBankType {
	return []PaymentMethodDirectDebitResponseDirectdebitBankType{
		PaymentMethodDirectDebitResponseDirectdebitBankType0,
		PaymentMethodDirectDebitResponseDirectdebitBankType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitResponseDirectdebitBankType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitResponseDirectdebitBankType0:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitBankType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitResponseDirectdebitBankType) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitResponseDirectdebitBankType(data) {
	case PaymentMethodDirectDebitResponseDirectdebitBankType0:
		*s = PaymentMethodDirectDebitResponseDirectdebitBankType0
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitBankType1:
		*s = PaymentMethodDirectDebitResponseDirectdebitBankType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodDirectDebitResponseDirectdebitLastResultCode string

const (
	PaymentMethodDirectDebitResponseDirectdebitLastResultCode0 PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "0"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCode1 PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "1"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCode2 PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "2"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCode3 PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "3"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCode4 PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "4"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCode8 PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "8"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCode9 PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "9"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCodeE PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "E"
	PaymentMethodDirectDebitResponseDirectdebitLastResultCodeN PaymentMethodDirectDebitResponseDirectdebitLastResultCode = "N"
)

// AllValues returns all PaymentMethodDirectDebitResponseDirectdebitLastResultCode values.
func (PaymentMethodDirectDebitResponseDirectdebitLastResultCode) AllValues() []PaymentMethodDirectDebitResponseDirectdebitLastResultCode {
	return []PaymentMethodDirectDebitResponseDirectdebitLastResultCode{
		PaymentMethodDirectDebitResponseDirectdebitLastResultCode0,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCode1,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCode2,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCode3,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCode4,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCode8,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCode9,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCodeE,
		PaymentMethodDirectDebitResponseDirectdebitLastResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitResponseDirectdebitLastResultCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode0:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode1:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode2:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode3:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode4:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode8:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode9:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCodeE:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitResponseDirectdebitLastResultCode) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitResponseDirectdebitLastResultCode(data) {
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode0:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCode0
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode1:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCode1
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode2:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCode2
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode3:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCode3
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode4:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCode4
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode8:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCode8
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCode9:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCode9
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCodeE:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCodeE
		return nil
	case PaymentMethodDirectDebitResponseDirectdebitLastResultCodeN:
		*s = PaymentMethodDirectDebitResponseDirectdebitLastResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodDirectDebitResponseDirectdebitPaperApplication struct {
	PreregisteredDate       OptString `json:"preregistered_date"`
	RequestFormID           OptString `json:"request_form_id"`
	PaperFailureDescription OptString `json:"paper_failure_description"`
}

// GetPreregisteredDate returns the value of PreregisteredDate.
func (s *PaymentMethodDirectDebitResponseDirectdebitPaperApplication) GetPreregisteredDate() OptString {
	return s.PreregisteredDate
}

// GetRequestFormID returns the value of RequestFormID.
func (s *PaymentMethodDirectDebitResponseDirectdebitPaperApplication) GetRequestFormID() OptString {
	return s.RequestFormID
}

// GetPaperFailureDescription returns the value of PaperFailureDescription.
func (s *PaymentMethodDirectDebitResponseDirectdebitPaperApplication) GetPaperFailureDescription() OptString {
	return s.PaperFailureDescription
}

// SetPreregisteredDate sets the value of PreregisteredDate.
func (s *PaymentMethodDirectDebitResponseDirectdebitPaperApplication) SetPreregisteredDate(val OptString) {
	s.PreregisteredDate = val
}

// SetRequestFormID sets the value of RequestFormID.
func (s *PaymentMethodDirectDebitResponseDirectdebitPaperApplication) SetRequestFormID(val OptString) {
	s.RequestFormID = val
}

// SetPaperFailureDescription sets the value of PaperFailureDescription.
func (s *PaymentMethodDirectDebitResponseDirectdebitPaperApplication) SetPaperFailureDescription(val OptString) {
	s.PaperFailureDescription = val
}

type PaymentMethodDirectDebitResponsePayType string

const (
	PaymentMethodDirectDebitResponsePayTypeDirectdebit PaymentMethodDirectDebitResponsePayType = "Directdebit"
)

// AllValues returns all PaymentMethodDirectDebitResponsePayType values.
func (PaymentMethodDirectDebitResponsePayType) AllValues() []PaymentMethodDirectDebitResponsePayType {
	return []PaymentMethodDirectDebitResponsePayType{
		PaymentMethodDirectDebitResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitResponsePayType(data) {
	case PaymentMethodDirectDebitResponsePayTypeDirectdebit:
		*s = PaymentMethodDirectDebitResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodDirectDebitResponseRedirectURLAccessedFlag string

const (
	PaymentMethodDirectDebitResponseRedirectURLAccessedFlag0 PaymentMethodDirectDebitResponseRedirectURLAccessedFlag = "0"
	PaymentMethodDirectDebitResponseRedirectURLAccessedFlag1 PaymentMethodDirectDebitResponseRedirectURLAccessedFlag = "1"
)

// AllValues returns all PaymentMethodDirectDebitResponseRedirectURLAccessedFlag values.
func (PaymentMethodDirectDebitResponseRedirectURLAccessedFlag) AllValues() []PaymentMethodDirectDebitResponseRedirectURLAccessedFlag {
	return []PaymentMethodDirectDebitResponseRedirectURLAccessedFlag{
		PaymentMethodDirectDebitResponseRedirectURLAccessedFlag0,
		PaymentMethodDirectDebitResponseRedirectURLAccessedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitResponseRedirectURLAccessedFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitResponseRedirectURLAccessedFlag0:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseRedirectURLAccessedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitResponseRedirectURLAccessedFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitResponseRedirectURLAccessedFlag(data) {
	case PaymentMethodDirectDebitResponseRedirectURLAccessedFlag0:
		*s = PaymentMethodDirectDebitResponseRedirectURLAccessedFlag0
		return nil
	case PaymentMethodDirectDebitResponseRedirectURLAccessedFlag1:
		*s = PaymentMethodDirectDebitResponseRedirectURLAccessedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentMethodDirectDebitResponseStatus string

const (
	PaymentMethodDirectDebitResponseStatusINACTIVATED            PaymentMethodDirectDebitResponseStatus = "INACTIVATED"
	PaymentMethodDirectDebitResponseStatusAWAITINGCUSTOMERACTION PaymentMethodDirectDebitResponseStatus = "AWAITING_CUSTOMER_ACTION"
	PaymentMethodDirectDebitResponseStatusACTIVATED              PaymentMethodDirectDebitResponseStatus = "ACTIVATED"
	PaymentMethodDirectDebitResponseStatusFAILED                 PaymentMethodDirectDebitResponseStatus = "FAILED"
)

// AllValues returns all PaymentMethodDirectDebitResponseStatus values.
func (PaymentMethodDirectDebitResponseStatus) AllValues() []PaymentMethodDirectDebitResponseStatus {
	return []PaymentMethodDirectDebitResponseStatus{
		PaymentMethodDirectDebitResponseStatusINACTIVATED,
		PaymentMethodDirectDebitResponseStatusAWAITINGCUSTOMERACTION,
		PaymentMethodDirectDebitResponseStatusACTIVATED,
		PaymentMethodDirectDebitResponseStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectDebitResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectDebitResponseStatusINACTIVATED:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseStatusAWAITINGCUSTOMERACTION:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseStatusACTIVATED:
		return []byte(s), nil
	case PaymentMethodDirectDebitResponseStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectDebitResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectDebitResponseStatus(data) {
	case PaymentMethodDirectDebitResponseStatusINACTIVATED:
		*s = PaymentMethodDirectDebitResponseStatusINACTIVATED
		return nil
	case PaymentMethodDirectDebitResponseStatusAWAITINGCUSTOMERACTION:
		*s = PaymentMethodDirectDebitResponseStatusAWAITINGCUSTOMERACTION
		return nil
	case PaymentMethodDirectDebitResponseStatusACTIVATED:
		*s = PaymentMethodDirectDebitResponseStatusACTIVATED
		return nil
	case PaymentMethodDirectDebitResponseStatusFAILED:
		*s = PaymentMethodDirectDebitResponseStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentPaypay
type PaymentPaypay struct {
	PayType          PaymentPaypayPayType `json:"pay_type"`
	ID               OptString            `json:"id"`
	JobCode          PaymentPaypayJobCode `json:"job_code"`
	Amount           string               `json:"amount"`
	Tax              OptString            `json:"tax"`
	ClientField1     OptNilString         `json:"client_field_1"`
	ClientField2     OptNilString         `json:"client_field_2"`
	ClientField3     OptNilString         `json:"client_field_3"`
	OrderDescription OptNilString         `json:"order_description"`
}

// GetPayType returns the value of PayType.
func (s *PaymentPaypay) GetPayType() PaymentPaypayPayType {
	return s.PayType
}

// GetID returns the value of ID.
func (s *PaymentPaypay) GetID() OptString {
	return s.ID
}

// GetJobCode returns the value of JobCode.
func (s *PaymentPaypay) GetJobCode() PaymentPaypayJobCode {
	return s.JobCode
}

// GetAmount returns the value of Amount.
func (s *PaymentPaypay) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentPaypay) GetTax() OptString {
	return s.Tax
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentPaypay) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentPaypay) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentPaypay) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetOrderDescription returns the value of OrderDescription.
func (s *PaymentPaypay) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// SetPayType sets the value of PayType.
func (s *PaymentPaypay) SetPayType(val PaymentPaypayPayType) {
	s.PayType = val
}

// SetID sets the value of ID.
func (s *PaymentPaypay) SetID(val OptString) {
	s.ID = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentPaypay) SetJobCode(val PaymentPaypayJobCode) {
	s.JobCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentPaypay) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentPaypay) SetTax(val OptString) {
	s.Tax = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentPaypay) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentPaypay) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentPaypay) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *PaymentPaypay) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

type PaymentPaypayJobCode string

const (
	PaymentPaypayJobCodeAUTH    PaymentPaypayJobCode = "AUTH"
	PaymentPaypayJobCodeCAPTURE PaymentPaypayJobCode = "CAPTURE"
)

// AllValues returns all PaymentPaypayJobCode values.
func (PaymentPaypayJobCode) AllValues() []PaymentPaypayJobCode {
	return []PaymentPaypayJobCode{
		PaymentPaypayJobCodeAUTH,
		PaymentPaypayJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentPaypayJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentPaypayJobCodeAUTH:
		return []byte(s), nil
	case PaymentPaypayJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentPaypayJobCode) UnmarshalText(data []byte) error {
	switch PaymentPaypayJobCode(data) {
	case PaymentPaypayJobCodeAUTH:
		*s = PaymentPaypayJobCodeAUTH
		return nil
	case PaymentPaypayJobCodeCAPTURE:
		*s = PaymentPaypayJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentPaypayPayType string

const (
	PaymentPaypayPayTypePaypay PaymentPaypayPayType = "Paypay"
)

// AllValues returns all PaymentPaypayPayType values.
func (PaymentPaypayPayType) AllValues() []PaymentPaypayPayType {
	return []PaymentPaypayPayType{
		PaymentPaypayPayTypePaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentPaypayPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentPaypayPayTypePaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentPaypayPayType) UnmarshalText(data []byte) error {
	switch PaymentPaypayPayType(data) {
	case PaymentPaypayPayTypePaypay:
		*s = PaymentPaypayPayTypePaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/paymentPaypayResponse
type PaymentPaypayResponse struct {
	ShopID             OptString                               `json:"shop_id"`
	ID                 OptString                               `json:"id"`
	AccessID           OptString                               `json:"access_id"`
	Amount             OptInt                                  `json:"amount"`
	Tax                OptInt                                  `json:"tax"`
	TotalAmount        OptInt                                  `json:"total_amount"`
	ClientField1       OptNilString                            `json:"client_field_1"`
	ClientField2       OptNilString                            `json:"client_field_2"`
	ClientField3       OptNilString                            `json:"client_field_3"`
	ProcessDate        OptString                               `json:"process_date"`
	CustomerID         OptNilString                            `json:"customer_id"`
	CustomerGroupID    OptNilString                            `json:"customer_group_id"`
	ErrorCode          OptNilString                            `json:"error_code"`
	Created            OptNilString                            `json:"created"`
	Updated            OptNilString                            `json:"updated"`
	PayType            OptPaymentPaypayResponsePayType         `json:"pay_type"`
	JobCode            OptPaymentPaypayResponseJobCode         `json:"job_code"`
	Status             OptPaymentPaypayResponseStatus          `json:"status"`
	CodeURL            OptNilString                            `json:"code_url"`
	CodeExpiryDate     OptNilString                            `json:"code_expiry_date"`
	RedirectURL        OptNilString                            `json:"redirect_url"`
	RedirectType       OptNilPaymentPaypayResponseRedirectType `json:"redirect_type"`
	AuthMaxDate        OptNilString                            `json:"auth_max_date"`
	OrderDescription   OptNilString                            `json:"order_description"`
	CaptureDescription OptNilString                            `json:"capture_description"`
	UpdateDescription  OptNilString                            `json:"update_description"`
	CancelDescription  OptNilString                            `json:"cancel_description"`
	StoreID            OptNilString                            `json:"store_id"`
	CodeID             OptNilString                            `json:"code_id"`
	PaymentID          OptNilString                            `json:"payment_id"`
	PaypayResultCode   OptNilString                            `json:"paypay_result_code"`
	MerchantPaymentID  OptNilString                            `json:"merchant_payment_id"`
	MerchantCaptureID  OptNilString                            `json:"merchant_capture_id"`
	MerchantUpdateID   OptNilString                            `json:"merchant_update_id"`
	MerchantRevertID   OptNilString                            `json:"merchant_revert_id"`
	MerchantRefundID   OptNilString                            `json:"merchant_refund_id"`
	PaymentDate        OptNilString                            `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentPaypayResponse) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentPaypayResponse) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *PaymentPaypayResponse) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *PaymentPaypayResponse) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentPaypayResponse) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentPaypayResponse) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentPaypayResponse) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentPaypayResponse) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentPaypayResponse) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentPaypayResponse) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentPaypayResponse) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentPaypayResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentPaypayResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentPaypayResponse) GetCreated() OptNilString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentPaypayResponse) GetUpdated() OptNilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *PaymentPaypayResponse) GetPayType() OptPaymentPaypayResponsePayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *PaymentPaypayResponse) GetJobCode() OptPaymentPaypayResponseJobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *PaymentPaypayResponse) GetStatus() OptPaymentPaypayResponseStatus {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *PaymentPaypayResponse) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *PaymentPaypayResponse) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *PaymentPaypayResponse) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *PaymentPaypayResponse) GetRedirectType() OptNilPaymentPaypayResponseRedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentPaypayResponse) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *PaymentPaypayResponse) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *PaymentPaypayResponse) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *PaymentPaypayResponse) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *PaymentPaypayResponse) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *PaymentPaypayResponse) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *PaymentPaypayResponse) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *PaymentPaypayResponse) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *PaymentPaypayResponse) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *PaymentPaypayResponse) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *PaymentPaypayResponse) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *PaymentPaypayResponse) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRevertID returns the value of MerchantRevertID.
func (s *PaymentPaypayResponse) GetMerchantRevertID() OptNilString {
	return s.MerchantRevertID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *PaymentPaypayResponse) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *PaymentPaypayResponse) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *PaymentPaypayResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentPaypayResponse) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentPaypayResponse) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *PaymentPaypayResponse) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentPaypayResponse) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentPaypayResponse) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentPaypayResponse) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentPaypayResponse) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentPaypayResponse) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentPaypayResponse) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentPaypayResponse) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentPaypayResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentPaypayResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentPaypayResponse) SetCreated(val OptNilString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentPaypayResponse) SetUpdated(val OptNilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *PaymentPaypayResponse) SetPayType(val OptPaymentPaypayResponsePayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentPaypayResponse) SetJobCode(val OptPaymentPaypayResponseJobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *PaymentPaypayResponse) SetStatus(val OptPaymentPaypayResponseStatus) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *PaymentPaypayResponse) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *PaymentPaypayResponse) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *PaymentPaypayResponse) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *PaymentPaypayResponse) SetRedirectType(val OptNilPaymentPaypayResponseRedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentPaypayResponse) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *PaymentPaypayResponse) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *PaymentPaypayResponse) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *PaymentPaypayResponse) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *PaymentPaypayResponse) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *PaymentPaypayResponse) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *PaymentPaypayResponse) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *PaymentPaypayResponse) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *PaymentPaypayResponse) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *PaymentPaypayResponse) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *PaymentPaypayResponse) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *PaymentPaypayResponse) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRevertID sets the value of MerchantRevertID.
func (s *PaymentPaypayResponse) SetMerchantRevertID(val OptNilString) {
	s.MerchantRevertID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *PaymentPaypayResponse) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *PaymentPaypayResponse) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

type PaymentPaypayResponseJobCode string

const (
	PaymentPaypayResponseJobCodeAUTH    PaymentPaypayResponseJobCode = "AUTH"
	PaymentPaypayResponseJobCodeCAPTURE PaymentPaypayResponseJobCode = "CAPTURE"
)

// AllValues returns all PaymentPaypayResponseJobCode values.
func (PaymentPaypayResponseJobCode) AllValues() []PaymentPaypayResponseJobCode {
	return []PaymentPaypayResponseJobCode{
		PaymentPaypayResponseJobCodeAUTH,
		PaymentPaypayResponseJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentPaypayResponseJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentPaypayResponseJobCodeAUTH:
		return []byte(s), nil
	case PaymentPaypayResponseJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentPaypayResponseJobCode) UnmarshalText(data []byte) error {
	switch PaymentPaypayResponseJobCode(data) {
	case PaymentPaypayResponseJobCodeAUTH:
		*s = PaymentPaypayResponseJobCodeAUTH
		return nil
	case PaymentPaypayResponseJobCodeCAPTURE:
		*s = PaymentPaypayResponseJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentPaypayResponsePayType string

const (
	PaymentPaypayResponsePayTypePaypay PaymentPaypayResponsePayType = "Paypay"
)

// AllValues returns all PaymentPaypayResponsePayType values.
func (PaymentPaypayResponsePayType) AllValues() []PaymentPaypayResponsePayType {
	return []PaymentPaypayResponsePayType{
		PaymentPaypayResponsePayTypePaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentPaypayResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentPaypayResponsePayTypePaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentPaypayResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentPaypayResponsePayType(data) {
	case PaymentPaypayResponsePayTypePaypay:
		*s = PaymentPaypayResponsePayTypePaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentPaypayResponseRedirectType string

const (
	PaymentPaypayResponseRedirectType1 PaymentPaypayResponseRedirectType = "1"
	PaymentPaypayResponseRedirectType2 PaymentPaypayResponseRedirectType = "2"
)

// AllValues returns all PaymentPaypayResponseRedirectType values.
func (PaymentPaypayResponseRedirectType) AllValues() []PaymentPaypayResponseRedirectType {
	return []PaymentPaypayResponseRedirectType{
		PaymentPaypayResponseRedirectType1,
		PaymentPaypayResponseRedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentPaypayResponseRedirectType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentPaypayResponseRedirectType1:
		return []byte(s), nil
	case PaymentPaypayResponseRedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentPaypayResponseRedirectType) UnmarshalText(data []byte) error {
	switch PaymentPaypayResponseRedirectType(data) {
	case PaymentPaypayResponseRedirectType1:
		*s = PaymentPaypayResponseRedirectType1
		return nil
	case PaymentPaypayResponseRedirectType2:
		*s = PaymentPaypayResponseRedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentPaypayResponseStatus string

const (
	PaymentPaypayResponseStatusUNPROCESSED             PaymentPaypayResponseStatus = "UNPROCESSED"
	PaymentPaypayResponseStatusAWAITINGCUSTOMERPAYMENT PaymentPaypayResponseStatus = "AWAITING_CUSTOMER_PAYMENT"
	PaymentPaypayResponseStatusAUTHORIZED              PaymentPaypayResponseStatus = "AUTHORIZED"
	PaymentPaypayResponseStatusCAPTURED                PaymentPaypayResponseStatus = "CAPTURED"
	PaymentPaypayResponseStatusCANCELED                PaymentPaypayResponseStatus = "CANCELED"
	PaymentPaypayResponseStatusEXPIRED                 PaymentPaypayResponseStatus = "EXPIRED"
)

// AllValues returns all PaymentPaypayResponseStatus values.
func (PaymentPaypayResponseStatus) AllValues() []PaymentPaypayResponseStatus {
	return []PaymentPaypayResponseStatus{
		PaymentPaypayResponseStatusUNPROCESSED,
		PaymentPaypayResponseStatusAWAITINGCUSTOMERPAYMENT,
		PaymentPaypayResponseStatusAUTHORIZED,
		PaymentPaypayResponseStatusCAPTURED,
		PaymentPaypayResponseStatusCANCELED,
		PaymentPaypayResponseStatusEXPIRED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentPaypayResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentPaypayResponseStatusUNPROCESSED:
		return []byte(s), nil
	case PaymentPaypayResponseStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case PaymentPaypayResponseStatusAUTHORIZED:
		return []byte(s), nil
	case PaymentPaypayResponseStatusCAPTURED:
		return []byte(s), nil
	case PaymentPaypayResponseStatusCANCELED:
		return []byte(s), nil
	case PaymentPaypayResponseStatusEXPIRED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentPaypayResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentPaypayResponseStatus(data) {
	case PaymentPaypayResponseStatusUNPROCESSED:
		*s = PaymentPaypayResponseStatusUNPROCESSED
		return nil
	case PaymentPaypayResponseStatusAWAITINGCUSTOMERPAYMENT:
		*s = PaymentPaypayResponseStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case PaymentPaypayResponseStatusAUTHORIZED:
		*s = PaymentPaypayResponseStatusAUTHORIZED
		return nil
	case PaymentPaypayResponseStatusCAPTURED:
		*s = PaymentPaypayResponseStatusCAPTURED
		return nil
	case PaymentPaypayResponseStatusCANCELED:
		*s = PaymentPaypayResponseStatusCANCELED
		return nil
	case PaymentPaypayResponseStatusEXPIRED:
		*s = PaymentPaypayResponseStatusEXPIRED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentsGetBadRequest struct {
	Errors []PaymentsGetBadRequestErrorsItem `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *PaymentsGetBadRequest) GetErrors() []PaymentsGetBadRequestErrorsItem {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *PaymentsGetBadRequest) SetErrors(val []PaymentsGetBadRequestErrorsItem) {
	s.Errors = val
}

func (*PaymentsGetBadRequest) paymentsGetRes() {}

type PaymentsGetBadRequestErrorsItem struct {
	ErrorCode    OptString `json:"error_code"`
	ErrorMessage OptString `json:"error_message"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentsGetBadRequestErrorsItem) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *PaymentsGetBadRequestErrorsItem) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentsGetBadRequestErrorsItem) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *PaymentsGetBadRequestErrorsItem) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

type PaymentsGetOK struct {
	TotalCount   OptInt                  `json:"total_count"`
	LastPage     OptInt                  `json:"last_page"`
	CurrentPage  OptInt                  `json:"current_page"`
	Limit        OptInt                  `json:"limit"`
	LinkNext     OptNilString            `json:"link_next"`
	LinkPrevious OptNilString            `json:"link_previous"`
	List         []PaymentsGetOKListItem `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *PaymentsGetOK) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *PaymentsGetOK) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *PaymentsGetOK) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *PaymentsGetOK) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *PaymentsGetOK) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *PaymentsGetOK) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *PaymentsGetOK) GetList() []PaymentsGetOKListItem {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *PaymentsGetOK) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *PaymentsGetOK) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *PaymentsGetOK) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *PaymentsGetOK) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *PaymentsGetOK) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *PaymentsGetOK) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *PaymentsGetOK) SetList(val []PaymentsGetOKListItem) {
	s.List = val
}

func (*PaymentsGetOK) paymentsGetRes() {}

type PaymentsGetOKListItem struct {
	ShopID          OptString    `json:"shop_id"`
	ID              OptString    `json:"id"`
	PayType         OptString    `json:"pay_type"`
	Status          OptString    `json:"status"`
	AccessID        OptString    `json:"access_id"`
	ProcessDate     OptString    `json:"process_date"`
	JobCode         OptString    `json:"job_code"`
	ItemCode        OptString    `json:"item_code"`
	Amount          OptInt       `json:"amount"`
	Tax             OptInt       `json:"tax"`
	TotalAmount     OptInt       `json:"total_amount"`
	CustomerGroupID OptNilString `json:"customer_group_id"`
	CustomerID      OptNilString `json:"customer_id"`
	CardNo          OptNilString `json:"card_no"`
	CardID          OptNilString `json:"card_id"`
	Expire          OptNilString `json:"expire"`
	HolderName      OptNilString `json:"holder_name"`
	CardNoHash      OptNilString `json:"card_no_hash"`
	Method          OptNilString `json:"method"`
	PayTimes        OptNilString `json:"pay_times"`
	Forward         OptNilString `json:"forward"`
	Issuer          OptNilString `json:"issuer"`
	TransactionID   OptNilString `json:"transaction_id"`
	Approve         OptNilString `json:"approve"`
	AuthMaxDate     OptNilString `json:"auth_max_date"`
	ClientField1    OptNilString `json:"client_field_1"`
	ClientField2    OptNilString `json:"client_field_2"`
	ClientField3    OptNilString `json:"client_field_3"`
	TdsType         OptString    `json:"tds_type"`
	Tds2Type        OptNilString `json:"tds2_type"`
	Tds2RetURL      OptNilString `json:"tds2_ret_url"`
	Tds2Status      OptNilString `json:"tds2_status"`
	MerchantName    OptNilString `json:"merchant_name"`
	SendURL         OptNilString `json:"send_url"`
	SubscriptionID  OptNilString `json:"subscription_id"`
	Brand           OptString    `json:"brand"`
	ErrorCode       OptNilString `json:"error_code"`
	Created         OptString    `json:"created"`
	Updated         OptString    `json:"updated"`
}

// GetShopID returns the value of ShopID.
func (s *PaymentsGetOKListItem) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *PaymentsGetOKListItem) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentsGetOKListItem) GetPayType() OptString {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentsGetOKListItem) GetStatus() OptString {
	return s.Status
}

// GetAccessID returns the value of AccessID.
func (s *PaymentsGetOKListItem) GetAccessID() OptString {
	return s.AccessID
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentsGetOKListItem) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetJobCode returns the value of JobCode.
func (s *PaymentsGetOKListItem) GetJobCode() OptString {
	return s.JobCode
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentsGetOKListItem) GetItemCode() OptString {
	return s.ItemCode
}

// GetAmount returns the value of Amount.
func (s *PaymentsGetOKListItem) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentsGetOKListItem) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentsGetOKListItem) GetTotalAmount() OptInt {
	return s.TotalAmount
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PaymentsGetOKListItem) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentsGetOKListItem) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCardNo returns the value of CardNo.
func (s *PaymentsGetOKListItem) GetCardNo() OptNilString {
	return s.CardNo
}

// GetCardID returns the value of CardID.
func (s *PaymentsGetOKListItem) GetCardID() OptNilString {
	return s.CardID
}

// GetExpire returns the value of Expire.
func (s *PaymentsGetOKListItem) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentsGetOKListItem) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentsGetOKListItem) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *PaymentsGetOKListItem) GetMethod() OptNilString {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentsGetOKListItem) GetPayTimes() OptNilString {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *PaymentsGetOKListItem) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *PaymentsGetOKListItem) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *PaymentsGetOKListItem) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *PaymentsGetOKListItem) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *PaymentsGetOKListItem) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentsGetOKListItem) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentsGetOKListItem) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentsGetOKListItem) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetTdsType returns the value of TdsType.
func (s *PaymentsGetOKListItem) GetTdsType() OptString {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentsGetOKListItem) GetTds2Type() OptNilString {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *PaymentsGetOKListItem) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentsGetOKListItem) GetTds2Status() OptNilString {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentsGetOKListItem) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetSendURL returns the value of SendURL.
func (s *PaymentsGetOKListItem) GetSendURL() OptNilString {
	return s.SendURL
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *PaymentsGetOKListItem) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetBrand returns the value of Brand.
func (s *PaymentsGetOKListItem) GetBrand() OptString {
	return s.Brand
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentsGetOKListItem) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentsGetOKListItem) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentsGetOKListItem) GetUpdated() OptString {
	return s.Updated
}

// SetShopID sets the value of ShopID.
func (s *PaymentsGetOKListItem) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *PaymentsGetOKListItem) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentsGetOKListItem) SetPayType(val OptString) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentsGetOKListItem) SetStatus(val OptString) {
	s.Status = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentsGetOKListItem) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentsGetOKListItem) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentsGetOKListItem) SetJobCode(val OptString) {
	s.JobCode = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentsGetOKListItem) SetItemCode(val OptString) {
	s.ItemCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentsGetOKListItem) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentsGetOKListItem) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentsGetOKListItem) SetTotalAmount(val OptInt) {
	s.TotalAmount = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PaymentsGetOKListItem) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentsGetOKListItem) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCardNo sets the value of CardNo.
func (s *PaymentsGetOKListItem) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetCardID sets the value of CardID.
func (s *PaymentsGetOKListItem) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetExpire sets the value of Expire.
func (s *PaymentsGetOKListItem) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentsGetOKListItem) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentsGetOKListItem) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *PaymentsGetOKListItem) SetMethod(val OptNilString) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentsGetOKListItem) SetPayTimes(val OptNilString) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *PaymentsGetOKListItem) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *PaymentsGetOKListItem) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *PaymentsGetOKListItem) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *PaymentsGetOKListItem) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *PaymentsGetOKListItem) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentsGetOKListItem) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentsGetOKListItem) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentsGetOKListItem) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentsGetOKListItem) SetTdsType(val OptString) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentsGetOKListItem) SetTds2Type(val OptNilString) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *PaymentsGetOKListItem) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentsGetOKListItem) SetTds2Status(val OptNilString) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentsGetOKListItem) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetSendURL sets the value of SendURL.
func (s *PaymentsGetOKListItem) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *PaymentsGetOKListItem) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetBrand sets the value of Brand.
func (s *PaymentsGetOKListItem) SetBrand(val OptString) {
	s.Brand = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentsGetOKListItem) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentsGetOKListItem) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentsGetOKListItem) SetUpdated(val OptString) {
	s.Updated = val
}

// PaymentsIDAuthPutOK represents sum type.
type PaymentsIDAuthPutOK struct {
	Type                    PaymentsIDAuthPutOKType // switch on this field
	PaymentAuthCardResponse PaymentAuthCardResponse
}

// PaymentsIDAuthPutOKType is oneOf type of PaymentsIDAuthPutOK.
type PaymentsIDAuthPutOKType string

// Possible values for PaymentsIDAuthPutOKType.
const (
	PaymentAuthCardResponsePaymentsIDAuthPutOK PaymentsIDAuthPutOKType = "PaymentAuthCardResponse"
)

// IsPaymentAuthCardResponse reports whether PaymentsIDAuthPutOK is PaymentAuthCardResponse.
func (s PaymentsIDAuthPutOK) IsPaymentAuthCardResponse() bool {
	return s.Type == PaymentAuthCardResponsePaymentsIDAuthPutOK
}

// SetPaymentAuthCardResponse sets PaymentsIDAuthPutOK to PaymentAuthCardResponse.
func (s *PaymentsIDAuthPutOK) SetPaymentAuthCardResponse(v PaymentAuthCardResponse) {
	s.Type = PaymentAuthCardResponsePaymentsIDAuthPutOK
	s.PaymentAuthCardResponse = v
}

// GetPaymentAuthCardResponse returns PaymentAuthCardResponse and true boolean if PaymentsIDAuthPutOK is PaymentAuthCardResponse.
func (s PaymentsIDAuthPutOK) GetPaymentAuthCardResponse() (v PaymentAuthCardResponse, ok bool) {
	if !s.IsPaymentAuthCardResponse() {
		return v, false
	}
	return s.PaymentAuthCardResponse, true
}

// NewPaymentAuthCardResponsePaymentsIDAuthPutOK returns new PaymentsIDAuthPutOK from PaymentAuthCardResponse.
func NewPaymentAuthCardResponsePaymentsIDAuthPutOK(v PaymentAuthCardResponse) PaymentsIDAuthPutOK {
	var s PaymentsIDAuthPutOK
	s.SetPaymentAuthCardResponse(v)
	return s
}

func (*PaymentsIDAuthPutOK) paymentsIDAuthPutRes() {}

// PaymentsIDAuthPutReq represents sum type.
type PaymentsIDAuthPutReq struct {
	Type            PaymentsIDAuthPutReqType // switch on this field
	PaymentAuthCard PaymentAuthCard
}

// PaymentsIDAuthPutReqType is oneOf type of PaymentsIDAuthPutReq.
type PaymentsIDAuthPutReqType string

// Possible values for PaymentsIDAuthPutReqType.
const (
	PaymentAuthCardPaymentsIDAuthPutReq PaymentsIDAuthPutReqType = "PaymentAuthCard"
)

// IsPaymentAuthCard reports whether PaymentsIDAuthPutReq is PaymentAuthCard.
func (s PaymentsIDAuthPutReq) IsPaymentAuthCard() bool {
	return s.Type == PaymentAuthCardPaymentsIDAuthPutReq
}

// SetPaymentAuthCard sets PaymentsIDAuthPutReq to PaymentAuthCard.
func (s *PaymentsIDAuthPutReq) SetPaymentAuthCard(v PaymentAuthCard) {
	s.Type = PaymentAuthCardPaymentsIDAuthPutReq
	s.PaymentAuthCard = v
}

// GetPaymentAuthCard returns PaymentAuthCard and true boolean if PaymentsIDAuthPutReq is PaymentAuthCard.
func (s PaymentsIDAuthPutReq) GetPaymentAuthCard() (v PaymentAuthCard, ok bool) {
	if !s.IsPaymentAuthCard() {
		return v, false
	}
	return s.PaymentAuthCard, true
}

// NewPaymentAuthCardPaymentsIDAuthPutReq returns new PaymentsIDAuthPutReq from PaymentAuthCard.
func NewPaymentAuthCardPaymentsIDAuthPutReq(v PaymentAuthCard) PaymentsIDAuthPutReq {
	var s PaymentsIDAuthPutReq
	s.SetPaymentAuthCard(v)
	return s
}

// PaymentsIDCancelPutOK represents sum type.
type PaymentsIDCancelPutOK struct {
	Type                        PaymentsIDCancelPutOKType // switch on this field
	PaymentCancelCardResponse   PaymentCancelCardResponse
	PaymentCancelPaypayResponse PaymentCancelPaypayResponse
}

// PaymentsIDCancelPutOKType is oneOf type of PaymentsIDCancelPutOK.
type PaymentsIDCancelPutOKType string

// Possible values for PaymentsIDCancelPutOKType.
const (
	PaymentCancelCardResponsePaymentsIDCancelPutOK   PaymentsIDCancelPutOKType = "PaymentCancelCardResponse"
	PaymentCancelPaypayResponsePaymentsIDCancelPutOK PaymentsIDCancelPutOKType = "PaymentCancelPaypayResponse"
)

// IsPaymentCancelCardResponse reports whether PaymentsIDCancelPutOK is PaymentCancelCardResponse.
func (s PaymentsIDCancelPutOK) IsPaymentCancelCardResponse() bool {
	return s.Type == PaymentCancelCardResponsePaymentsIDCancelPutOK
}

// IsPaymentCancelPaypayResponse reports whether PaymentsIDCancelPutOK is PaymentCancelPaypayResponse.
func (s PaymentsIDCancelPutOK) IsPaymentCancelPaypayResponse() bool {
	return s.Type == PaymentCancelPaypayResponsePaymentsIDCancelPutOK
}

// SetPaymentCancelCardResponse sets PaymentsIDCancelPutOK to PaymentCancelCardResponse.
func (s *PaymentsIDCancelPutOK) SetPaymentCancelCardResponse(v PaymentCancelCardResponse) {
	s.Type = PaymentCancelCardResponsePaymentsIDCancelPutOK
	s.PaymentCancelCardResponse = v
}

// GetPaymentCancelCardResponse returns PaymentCancelCardResponse and true boolean if PaymentsIDCancelPutOK is PaymentCancelCardResponse.
func (s PaymentsIDCancelPutOK) GetPaymentCancelCardResponse() (v PaymentCancelCardResponse, ok bool) {
	if !s.IsPaymentCancelCardResponse() {
		return v, false
	}
	return s.PaymentCancelCardResponse, true
}

// NewPaymentCancelCardResponsePaymentsIDCancelPutOK returns new PaymentsIDCancelPutOK from PaymentCancelCardResponse.
func NewPaymentCancelCardResponsePaymentsIDCancelPutOK(v PaymentCancelCardResponse) PaymentsIDCancelPutOK {
	var s PaymentsIDCancelPutOK
	s.SetPaymentCancelCardResponse(v)
	return s
}

// SetPaymentCancelPaypayResponse sets PaymentsIDCancelPutOK to PaymentCancelPaypayResponse.
func (s *PaymentsIDCancelPutOK) SetPaymentCancelPaypayResponse(v PaymentCancelPaypayResponse) {
	s.Type = PaymentCancelPaypayResponsePaymentsIDCancelPutOK
	s.PaymentCancelPaypayResponse = v
}

// GetPaymentCancelPaypayResponse returns PaymentCancelPaypayResponse and true boolean if PaymentsIDCancelPutOK is PaymentCancelPaypayResponse.
func (s PaymentsIDCancelPutOK) GetPaymentCancelPaypayResponse() (v PaymentCancelPaypayResponse, ok bool) {
	if !s.IsPaymentCancelPaypayResponse() {
		return v, false
	}
	return s.PaymentCancelPaypayResponse, true
}

// NewPaymentCancelPaypayResponsePaymentsIDCancelPutOK returns new PaymentsIDCancelPutOK from PaymentCancelPaypayResponse.
func NewPaymentCancelPaypayResponsePaymentsIDCancelPutOK(v PaymentCancelPaypayResponse) PaymentsIDCancelPutOK {
	var s PaymentsIDCancelPutOK
	s.SetPaymentCancelPaypayResponse(v)
	return s
}

func (*PaymentsIDCancelPutOK) paymentsIDCancelPutRes() {}

// PaymentsIDCancelPutReq represents sum type.
type PaymentsIDCancelPutReq struct {
	Type                PaymentsIDCancelPutReqType // switch on this field
	PaymentCancelCard   PaymentCancelCard
	PaymentCancelPaypay PaymentCancelPaypay
}

// PaymentsIDCancelPutReqType is oneOf type of PaymentsIDCancelPutReq.
type PaymentsIDCancelPutReqType string

// Possible values for PaymentsIDCancelPutReqType.
const (
	PaymentCancelCardPaymentsIDCancelPutReq   PaymentsIDCancelPutReqType = "PaymentCancelCard"
	PaymentCancelPaypayPaymentsIDCancelPutReq PaymentsIDCancelPutReqType = "PaymentCancelPaypay"
)

// IsPaymentCancelCard reports whether PaymentsIDCancelPutReq is PaymentCancelCard.
func (s PaymentsIDCancelPutReq) IsPaymentCancelCard() bool {
	return s.Type == PaymentCancelCardPaymentsIDCancelPutReq
}

// IsPaymentCancelPaypay reports whether PaymentsIDCancelPutReq is PaymentCancelPaypay.
func (s PaymentsIDCancelPutReq) IsPaymentCancelPaypay() bool {
	return s.Type == PaymentCancelPaypayPaymentsIDCancelPutReq
}

// SetPaymentCancelCard sets PaymentsIDCancelPutReq to PaymentCancelCard.
func (s *PaymentsIDCancelPutReq) SetPaymentCancelCard(v PaymentCancelCard) {
	s.Type = PaymentCancelCardPaymentsIDCancelPutReq
	s.PaymentCancelCard = v
}

// GetPaymentCancelCard returns PaymentCancelCard and true boolean if PaymentsIDCancelPutReq is PaymentCancelCard.
func (s PaymentsIDCancelPutReq) GetPaymentCancelCard() (v PaymentCancelCard, ok bool) {
	if !s.IsPaymentCancelCard() {
		return v, false
	}
	return s.PaymentCancelCard, true
}

// NewPaymentCancelCardPaymentsIDCancelPutReq returns new PaymentsIDCancelPutReq from PaymentCancelCard.
func NewPaymentCancelCardPaymentsIDCancelPutReq(v PaymentCancelCard) PaymentsIDCancelPutReq {
	var s PaymentsIDCancelPutReq
	s.SetPaymentCancelCard(v)
	return s
}

// SetPaymentCancelPaypay sets PaymentsIDCancelPutReq to PaymentCancelPaypay.
func (s *PaymentsIDCancelPutReq) SetPaymentCancelPaypay(v PaymentCancelPaypay) {
	s.Type = PaymentCancelPaypayPaymentsIDCancelPutReq
	s.PaymentCancelPaypay = v
}

// GetPaymentCancelPaypay returns PaymentCancelPaypay and true boolean if PaymentsIDCancelPutReq is PaymentCancelPaypay.
func (s PaymentsIDCancelPutReq) GetPaymentCancelPaypay() (v PaymentCancelPaypay, ok bool) {
	if !s.IsPaymentCancelPaypay() {
		return v, false
	}
	return s.PaymentCancelPaypay, true
}

// NewPaymentCancelPaypayPaymentsIDCancelPutReq returns new PaymentsIDCancelPutReq from PaymentCancelPaypay.
func NewPaymentCancelPaypayPaymentsIDCancelPutReq(v PaymentCancelPaypay) PaymentsIDCancelPutReq {
	var s PaymentsIDCancelPutReq
	s.SetPaymentCancelPaypay(v)
	return s
}

// PaymentsIDCapturePutOK represents sum type.
type PaymentsIDCapturePutOK struct {
	Type                       PaymentsIDCapturePutOKType // switch on this field
	PaymentCaptureCardResponse PaymentCaptureCardResponse
}

// PaymentsIDCapturePutOKType is oneOf type of PaymentsIDCapturePutOK.
type PaymentsIDCapturePutOKType string

// Possible values for PaymentsIDCapturePutOKType.
const (
	PaymentCaptureCardResponsePaymentsIDCapturePutOK PaymentsIDCapturePutOKType = "PaymentCaptureCardResponse"
)

// IsPaymentCaptureCardResponse reports whether PaymentsIDCapturePutOK is PaymentCaptureCardResponse.
func (s PaymentsIDCapturePutOK) IsPaymentCaptureCardResponse() bool {
	return s.Type == PaymentCaptureCardResponsePaymentsIDCapturePutOK
}

// SetPaymentCaptureCardResponse sets PaymentsIDCapturePutOK to PaymentCaptureCardResponse.
func (s *PaymentsIDCapturePutOK) SetPaymentCaptureCardResponse(v PaymentCaptureCardResponse) {
	s.Type = PaymentCaptureCardResponsePaymentsIDCapturePutOK
	s.PaymentCaptureCardResponse = v
}

// GetPaymentCaptureCardResponse returns PaymentCaptureCardResponse and true boolean if PaymentsIDCapturePutOK is PaymentCaptureCardResponse.
func (s PaymentsIDCapturePutOK) GetPaymentCaptureCardResponse() (v PaymentCaptureCardResponse, ok bool) {
	if !s.IsPaymentCaptureCardResponse() {
		return v, false
	}
	return s.PaymentCaptureCardResponse, true
}

// NewPaymentCaptureCardResponsePaymentsIDCapturePutOK returns new PaymentsIDCapturePutOK from PaymentCaptureCardResponse.
func NewPaymentCaptureCardResponsePaymentsIDCapturePutOK(v PaymentCaptureCardResponse) PaymentsIDCapturePutOK {
	var s PaymentsIDCapturePutOK
	s.SetPaymentCaptureCardResponse(v)
	return s
}

func (*PaymentsIDCapturePutOK) paymentsIDCapturePutRes() {}

// PaymentsIDCapturePutReq represents sum type.
type PaymentsIDCapturePutReq struct {
	Type               PaymentsIDCapturePutReqType // switch on this field
	PaymentCaptureCard PaymentCaptureCard
}

// PaymentsIDCapturePutReqType is oneOf type of PaymentsIDCapturePutReq.
type PaymentsIDCapturePutReqType string

// Possible values for PaymentsIDCapturePutReqType.
const (
	PaymentCaptureCardPaymentsIDCapturePutReq PaymentsIDCapturePutReqType = "PaymentCaptureCard"
)

// IsPaymentCaptureCard reports whether PaymentsIDCapturePutReq is PaymentCaptureCard.
func (s PaymentsIDCapturePutReq) IsPaymentCaptureCard() bool {
	return s.Type == PaymentCaptureCardPaymentsIDCapturePutReq
}

// SetPaymentCaptureCard sets PaymentsIDCapturePutReq to PaymentCaptureCard.
func (s *PaymentsIDCapturePutReq) SetPaymentCaptureCard(v PaymentCaptureCard) {
	s.Type = PaymentCaptureCardPaymentsIDCapturePutReq
	s.PaymentCaptureCard = v
}

// GetPaymentCaptureCard returns PaymentCaptureCard and true boolean if PaymentsIDCapturePutReq is PaymentCaptureCard.
func (s PaymentsIDCapturePutReq) GetPaymentCaptureCard() (v PaymentCaptureCard, ok bool) {
	if !s.IsPaymentCaptureCard() {
		return v, false
	}
	return s.PaymentCaptureCard, true
}

// NewPaymentCaptureCardPaymentsIDCapturePutReq returns new PaymentsIDCapturePutReq from PaymentCaptureCard.
func NewPaymentCaptureCardPaymentsIDCapturePutReq(v PaymentCaptureCard) PaymentsIDCapturePutReq {
	var s PaymentsIDCapturePutReq
	s.SetPaymentCaptureCard(v)
	return s
}

// PaymentsIDGetOK represents sum type.
type PaymentsIDGetOK struct {
	Type                  PaymentsIDGetOKType // switch on this field
	PaymentCardResponse   PaymentCardResponse
	PaymentPaypayResponse PaymentPaypayResponse
}

// PaymentsIDGetOKType is oneOf type of PaymentsIDGetOK.
type PaymentsIDGetOKType string

// Possible values for PaymentsIDGetOKType.
const (
	PaymentCardResponsePaymentsIDGetOK   PaymentsIDGetOKType = "PaymentCardResponse"
	PaymentPaypayResponsePaymentsIDGetOK PaymentsIDGetOKType = "PaymentPaypayResponse"
)

// IsPaymentCardResponse reports whether PaymentsIDGetOK is PaymentCardResponse.
func (s PaymentsIDGetOK) IsPaymentCardResponse() bool {
	return s.Type == PaymentCardResponsePaymentsIDGetOK
}

// IsPaymentPaypayResponse reports whether PaymentsIDGetOK is PaymentPaypayResponse.
func (s PaymentsIDGetOK) IsPaymentPaypayResponse() bool {
	return s.Type == PaymentPaypayResponsePaymentsIDGetOK
}

// SetPaymentCardResponse sets PaymentsIDGetOK to PaymentCardResponse.
func (s *PaymentsIDGetOK) SetPaymentCardResponse(v PaymentCardResponse) {
	s.Type = PaymentCardResponsePaymentsIDGetOK
	s.PaymentCardResponse = v
}

// GetPaymentCardResponse returns PaymentCardResponse and true boolean if PaymentsIDGetOK is PaymentCardResponse.
func (s PaymentsIDGetOK) GetPaymentCardResponse() (v PaymentCardResponse, ok bool) {
	if !s.IsPaymentCardResponse() {
		return v, false
	}
	return s.PaymentCardResponse, true
}

// NewPaymentCardResponsePaymentsIDGetOK returns new PaymentsIDGetOK from PaymentCardResponse.
func NewPaymentCardResponsePaymentsIDGetOK(v PaymentCardResponse) PaymentsIDGetOK {
	var s PaymentsIDGetOK
	s.SetPaymentCardResponse(v)
	return s
}

// SetPaymentPaypayResponse sets PaymentsIDGetOK to PaymentPaypayResponse.
func (s *PaymentsIDGetOK) SetPaymentPaypayResponse(v PaymentPaypayResponse) {
	s.Type = PaymentPaypayResponsePaymentsIDGetOK
	s.PaymentPaypayResponse = v
}

// GetPaymentPaypayResponse returns PaymentPaypayResponse and true boolean if PaymentsIDGetOK is PaymentPaypayResponse.
func (s PaymentsIDGetOK) GetPaymentPaypayResponse() (v PaymentPaypayResponse, ok bool) {
	if !s.IsPaymentPaypayResponse() {
		return v, false
	}
	return s.PaymentPaypayResponse, true
}

// NewPaymentPaypayResponsePaymentsIDGetOK returns new PaymentsIDGetOK from PaymentPaypayResponse.
func NewPaymentPaypayResponsePaymentsIDGetOK(v PaymentPaypayResponse) PaymentsIDGetOK {
	var s PaymentsIDGetOK
	s.SetPaymentPaypayResponse(v)
	return s
}

func (*PaymentsIDGetOK) paymentsIDGetRes() {}

// PaymentsIDPutOK represents sum type.
type PaymentsIDPutOK struct {
	Type                    PaymentsIDPutOKType // switch on this field
	PaymentDoCardResponse   PaymentDoCardResponse
	PaymentDoPaypayResponse PaymentDoPaypayResponse
}

// PaymentsIDPutOKType is oneOf type of PaymentsIDPutOK.
type PaymentsIDPutOKType string

// Possible values for PaymentsIDPutOKType.
const (
	PaymentDoCardResponsePaymentsIDPutOK   PaymentsIDPutOKType = "PaymentDoCardResponse"
	PaymentDoPaypayResponsePaymentsIDPutOK PaymentsIDPutOKType = "PaymentDoPaypayResponse"
)

// IsPaymentDoCardResponse reports whether PaymentsIDPutOK is PaymentDoCardResponse.
func (s PaymentsIDPutOK) IsPaymentDoCardResponse() bool {
	return s.Type == PaymentDoCardResponsePaymentsIDPutOK
}

// IsPaymentDoPaypayResponse reports whether PaymentsIDPutOK is PaymentDoPaypayResponse.
func (s PaymentsIDPutOK) IsPaymentDoPaypayResponse() bool {
	return s.Type == PaymentDoPaypayResponsePaymentsIDPutOK
}

// SetPaymentDoCardResponse sets PaymentsIDPutOK to PaymentDoCardResponse.
func (s *PaymentsIDPutOK) SetPaymentDoCardResponse(v PaymentDoCardResponse) {
	s.Type = PaymentDoCardResponsePaymentsIDPutOK
	s.PaymentDoCardResponse = v
}

// GetPaymentDoCardResponse returns PaymentDoCardResponse and true boolean if PaymentsIDPutOK is PaymentDoCardResponse.
func (s PaymentsIDPutOK) GetPaymentDoCardResponse() (v PaymentDoCardResponse, ok bool) {
	if !s.IsPaymentDoCardResponse() {
		return v, false
	}
	return s.PaymentDoCardResponse, true
}

// NewPaymentDoCardResponsePaymentsIDPutOK returns new PaymentsIDPutOK from PaymentDoCardResponse.
func NewPaymentDoCardResponsePaymentsIDPutOK(v PaymentDoCardResponse) PaymentsIDPutOK {
	var s PaymentsIDPutOK
	s.SetPaymentDoCardResponse(v)
	return s
}

// SetPaymentDoPaypayResponse sets PaymentsIDPutOK to PaymentDoPaypayResponse.
func (s *PaymentsIDPutOK) SetPaymentDoPaypayResponse(v PaymentDoPaypayResponse) {
	s.Type = PaymentDoPaypayResponsePaymentsIDPutOK
	s.PaymentDoPaypayResponse = v
}

// GetPaymentDoPaypayResponse returns PaymentDoPaypayResponse and true boolean if PaymentsIDPutOK is PaymentDoPaypayResponse.
func (s PaymentsIDPutOK) GetPaymentDoPaypayResponse() (v PaymentDoPaypayResponse, ok bool) {
	if !s.IsPaymentDoPaypayResponse() {
		return v, false
	}
	return s.PaymentDoPaypayResponse, true
}

// NewPaymentDoPaypayResponsePaymentsIDPutOK returns new PaymentsIDPutOK from PaymentDoPaypayResponse.
func NewPaymentDoPaypayResponsePaymentsIDPutOK(v PaymentDoPaypayResponse) PaymentsIDPutOK {
	var s PaymentsIDPutOK
	s.SetPaymentDoPaypayResponse(v)
	return s
}

func (*PaymentsIDPutOK) paymentsIDPutRes() {}

// PaymentsIDPutReq represents sum type.
type PaymentsIDPutReq struct {
	Type                         PaymentsIDPutReqType // switch on this field
	PaymentDoCardWith3DSecure    PaymentDoCardWith3DSecure
	PaymentDoCardWithout3DSecure PaymentDoCardWithout3DSecure
	PaymentDoPaypay              PaymentDoPaypay
}

// PaymentsIDPutReqType is oneOf type of PaymentsIDPutReq.
type PaymentsIDPutReqType string

// Possible values for PaymentsIDPutReqType.
const (
	PaymentDoCardWith3DSecurePaymentsIDPutReq    PaymentsIDPutReqType = "PaymentDoCardWith3DSecure"
	PaymentDoCardWithout3DSecurePaymentsIDPutReq PaymentsIDPutReqType = "PaymentDoCardWithout3DSecure"
	PaymentDoPaypayPaymentsIDPutReq              PaymentsIDPutReqType = "PaymentDoPaypay"
)

// IsPaymentDoCardWith3DSecure reports whether PaymentsIDPutReq is PaymentDoCardWith3DSecure.
func (s PaymentsIDPutReq) IsPaymentDoCardWith3DSecure() bool {
	return s.Type == PaymentDoCardWith3DSecurePaymentsIDPutReq
}

// IsPaymentDoCardWithout3DSecure reports whether PaymentsIDPutReq is PaymentDoCardWithout3DSecure.
func (s PaymentsIDPutReq) IsPaymentDoCardWithout3DSecure() bool {
	return s.Type == PaymentDoCardWithout3DSecurePaymentsIDPutReq
}

// IsPaymentDoPaypay reports whether PaymentsIDPutReq is PaymentDoPaypay.
func (s PaymentsIDPutReq) IsPaymentDoPaypay() bool { return s.Type == PaymentDoPaypayPaymentsIDPutReq }

// SetPaymentDoCardWith3DSecure sets PaymentsIDPutReq to PaymentDoCardWith3DSecure.
func (s *PaymentsIDPutReq) SetPaymentDoCardWith3DSecure(v PaymentDoCardWith3DSecure) {
	s.Type = PaymentDoCardWith3DSecurePaymentsIDPutReq
	s.PaymentDoCardWith3DSecure = v
}

// GetPaymentDoCardWith3DSecure returns PaymentDoCardWith3DSecure and true boolean if PaymentsIDPutReq is PaymentDoCardWith3DSecure.
func (s PaymentsIDPutReq) GetPaymentDoCardWith3DSecure() (v PaymentDoCardWith3DSecure, ok bool) {
	if !s.IsPaymentDoCardWith3DSecure() {
		return v, false
	}
	return s.PaymentDoCardWith3DSecure, true
}

// NewPaymentDoCardWith3DSecurePaymentsIDPutReq returns new PaymentsIDPutReq from PaymentDoCardWith3DSecure.
func NewPaymentDoCardWith3DSecurePaymentsIDPutReq(v PaymentDoCardWith3DSecure) PaymentsIDPutReq {
	var s PaymentsIDPutReq
	s.SetPaymentDoCardWith3DSecure(v)
	return s
}

// SetPaymentDoCardWithout3DSecure sets PaymentsIDPutReq to PaymentDoCardWithout3DSecure.
func (s *PaymentsIDPutReq) SetPaymentDoCardWithout3DSecure(v PaymentDoCardWithout3DSecure) {
	s.Type = PaymentDoCardWithout3DSecurePaymentsIDPutReq
	s.PaymentDoCardWithout3DSecure = v
}

// GetPaymentDoCardWithout3DSecure returns PaymentDoCardWithout3DSecure and true boolean if PaymentsIDPutReq is PaymentDoCardWithout3DSecure.
func (s PaymentsIDPutReq) GetPaymentDoCardWithout3DSecure() (v PaymentDoCardWithout3DSecure, ok bool) {
	if !s.IsPaymentDoCardWithout3DSecure() {
		return v, false
	}
	return s.PaymentDoCardWithout3DSecure, true
}

// NewPaymentDoCardWithout3DSecurePaymentsIDPutReq returns new PaymentsIDPutReq from PaymentDoCardWithout3DSecure.
func NewPaymentDoCardWithout3DSecurePaymentsIDPutReq(v PaymentDoCardWithout3DSecure) PaymentsIDPutReq {
	var s PaymentsIDPutReq
	s.SetPaymentDoCardWithout3DSecure(v)
	return s
}

// SetPaymentDoPaypay sets PaymentsIDPutReq to PaymentDoPaypay.
func (s *PaymentsIDPutReq) SetPaymentDoPaypay(v PaymentDoPaypay) {
	s.Type = PaymentDoPaypayPaymentsIDPutReq
	s.PaymentDoPaypay = v
}

// GetPaymentDoPaypay returns PaymentDoPaypay and true boolean if PaymentsIDPutReq is PaymentDoPaypay.
func (s PaymentsIDPutReq) GetPaymentDoPaypay() (v PaymentDoPaypay, ok bool) {
	if !s.IsPaymentDoPaypay() {
		return v, false
	}
	return s.PaymentDoPaypay, true
}

// NewPaymentDoPaypayPaymentsIDPutReq returns new PaymentsIDPutReq from PaymentDoPaypay.
func NewPaymentDoPaypayPaymentsIDPutReq(v PaymentDoPaypay) PaymentsIDPutReq {
	var s PaymentsIDPutReq
	s.SetPaymentDoPaypay(v)
	return s
}

// PaymentsPostOK represents sum type.
type PaymentsPostOK struct {
	Type                       PaymentsPostOKType // switch on this field
	PaymentCardResponse        PaymentCardResponse
	PaymentDirectdebitResponse PaymentDirectdebitResponse
	PaymentPaypayResponse      PaymentPaypayResponse
}

// PaymentsPostOKType is oneOf type of PaymentsPostOK.
type PaymentsPostOKType string

// Possible values for PaymentsPostOKType.
const (
	PaymentCardResponsePaymentsPostOK        PaymentsPostOKType = "PaymentCardResponse"
	PaymentDirectdebitResponsePaymentsPostOK PaymentsPostOKType = "PaymentDirectdebitResponse"
	PaymentPaypayResponsePaymentsPostOK      PaymentsPostOKType = "PaymentPaypayResponse"
)

// IsPaymentCardResponse reports whether PaymentsPostOK is PaymentCardResponse.
func (s PaymentsPostOK) IsPaymentCardResponse() bool {
	return s.Type == PaymentCardResponsePaymentsPostOK
}

// IsPaymentDirectdebitResponse reports whether PaymentsPostOK is PaymentDirectdebitResponse.
func (s PaymentsPostOK) IsPaymentDirectdebitResponse() bool {
	return s.Type == PaymentDirectdebitResponsePaymentsPostOK
}

// IsPaymentPaypayResponse reports whether PaymentsPostOK is PaymentPaypayResponse.
func (s PaymentsPostOK) IsPaymentPaypayResponse() bool {
	return s.Type == PaymentPaypayResponsePaymentsPostOK
}

// SetPaymentCardResponse sets PaymentsPostOK to PaymentCardResponse.
func (s *PaymentsPostOK) SetPaymentCardResponse(v PaymentCardResponse) {
	s.Type = PaymentCardResponsePaymentsPostOK
	s.PaymentCardResponse = v
}

// GetPaymentCardResponse returns PaymentCardResponse and true boolean if PaymentsPostOK is PaymentCardResponse.
func (s PaymentsPostOK) GetPaymentCardResponse() (v PaymentCardResponse, ok bool) {
	if !s.IsPaymentCardResponse() {
		return v, false
	}
	return s.PaymentCardResponse, true
}

// NewPaymentCardResponsePaymentsPostOK returns new PaymentsPostOK from PaymentCardResponse.
func NewPaymentCardResponsePaymentsPostOK(v PaymentCardResponse) PaymentsPostOK {
	var s PaymentsPostOK
	s.SetPaymentCardResponse(v)
	return s
}

// SetPaymentDirectdebitResponse sets PaymentsPostOK to PaymentDirectdebitResponse.
func (s *PaymentsPostOK) SetPaymentDirectdebitResponse(v PaymentDirectdebitResponse) {
	s.Type = PaymentDirectdebitResponsePaymentsPostOK
	s.PaymentDirectdebitResponse = v
}

// GetPaymentDirectdebitResponse returns PaymentDirectdebitResponse and true boolean if PaymentsPostOK is PaymentDirectdebitResponse.
func (s PaymentsPostOK) GetPaymentDirectdebitResponse() (v PaymentDirectdebitResponse, ok bool) {
	if !s.IsPaymentDirectdebitResponse() {
		return v, false
	}
	return s.PaymentDirectdebitResponse, true
}

// NewPaymentDirectdebitResponsePaymentsPostOK returns new PaymentsPostOK from PaymentDirectdebitResponse.
func NewPaymentDirectdebitResponsePaymentsPostOK(v PaymentDirectdebitResponse) PaymentsPostOK {
	var s PaymentsPostOK
	s.SetPaymentDirectdebitResponse(v)
	return s
}

// SetPaymentPaypayResponse sets PaymentsPostOK to PaymentPaypayResponse.
func (s *PaymentsPostOK) SetPaymentPaypayResponse(v PaymentPaypayResponse) {
	s.Type = PaymentPaypayResponsePaymentsPostOK
	s.PaymentPaypayResponse = v
}

// GetPaymentPaypayResponse returns PaymentPaypayResponse and true boolean if PaymentsPostOK is PaymentPaypayResponse.
func (s PaymentsPostOK) GetPaymentPaypayResponse() (v PaymentPaypayResponse, ok bool) {
	if !s.IsPaymentPaypayResponse() {
		return v, false
	}
	return s.PaymentPaypayResponse, true
}

// NewPaymentPaypayResponsePaymentsPostOK returns new PaymentsPostOK from PaymentPaypayResponse.
func NewPaymentPaypayResponsePaymentsPostOK(v PaymentPaypayResponse) PaymentsPostOK {
	var s PaymentsPostOK
	s.SetPaymentPaypayResponse(v)
	return s
}

func (*PaymentsPostOK) paymentsPostRes() {}

// PaymentsPostReq represents sum type.
type PaymentsPostReq struct {
	Type               PaymentsPostReqType // switch on this field
	PaymentCard        PaymentCard
	PaymentDirectdebit PaymentDirectdebit
	PaymentPaypay      PaymentPaypay
}

// PaymentsPostReqType is oneOf type of PaymentsPostReq.
type PaymentsPostReqType string

// Possible values for PaymentsPostReqType.
const (
	PaymentCardPaymentsPostReq        PaymentsPostReqType = "PaymentCard"
	PaymentDirectdebitPaymentsPostReq PaymentsPostReqType = "PaymentDirectdebit"
	PaymentPaypayPaymentsPostReq      PaymentsPostReqType = "PaymentPaypay"
)

// IsPaymentCard reports whether PaymentsPostReq is PaymentCard.
func (s PaymentsPostReq) IsPaymentCard() bool { return s.Type == PaymentCardPaymentsPostReq }

// IsPaymentDirectdebit reports whether PaymentsPostReq is PaymentDirectdebit.
func (s PaymentsPostReq) IsPaymentDirectdebit() bool {
	return s.Type == PaymentDirectdebitPaymentsPostReq
}

// IsPaymentPaypay reports whether PaymentsPostReq is PaymentPaypay.
func (s PaymentsPostReq) IsPaymentPaypay() bool { return s.Type == PaymentPaypayPaymentsPostReq }

// SetPaymentCard sets PaymentsPostReq to PaymentCard.
func (s *PaymentsPostReq) SetPaymentCard(v PaymentCard) {
	s.Type = PaymentCardPaymentsPostReq
	s.PaymentCard = v
}

// GetPaymentCard returns PaymentCard and true boolean if PaymentsPostReq is PaymentCard.
func (s PaymentsPostReq) GetPaymentCard() (v PaymentCard, ok bool) {
	if !s.IsPaymentCard() {
		return v, false
	}
	return s.PaymentCard, true
}

// NewPaymentCardPaymentsPostReq returns new PaymentsPostReq from PaymentCard.
func NewPaymentCardPaymentsPostReq(v PaymentCard) PaymentsPostReq {
	var s PaymentsPostReq
	s.SetPaymentCard(v)
	return s
}

// SetPaymentDirectdebit sets PaymentsPostReq to PaymentDirectdebit.
func (s *PaymentsPostReq) SetPaymentDirectdebit(v PaymentDirectdebit) {
	s.Type = PaymentDirectdebitPaymentsPostReq
	s.PaymentDirectdebit = v
}

// GetPaymentDirectdebit returns PaymentDirectdebit and true boolean if PaymentsPostReq is PaymentDirectdebit.
func (s PaymentsPostReq) GetPaymentDirectdebit() (v PaymentDirectdebit, ok bool) {
	if !s.IsPaymentDirectdebit() {
		return v, false
	}
	return s.PaymentDirectdebit, true
}

// NewPaymentDirectdebitPaymentsPostReq returns new PaymentsPostReq from PaymentDirectdebit.
func NewPaymentDirectdebitPaymentsPostReq(v PaymentDirectdebit) PaymentsPostReq {
	var s PaymentsPostReq
	s.SetPaymentDirectdebit(v)
	return s
}

// SetPaymentPaypay sets PaymentsPostReq to PaymentPaypay.
func (s *PaymentsPostReq) SetPaymentPaypay(v PaymentPaypay) {
	s.Type = PaymentPaypayPaymentsPostReq
	s.PaymentPaypay = v
}

// GetPaymentPaypay returns PaymentPaypay and true boolean if PaymentsPostReq is PaymentPaypay.
func (s PaymentsPostReq) GetPaymentPaypay() (v PaymentPaypay, ok bool) {
	if !s.IsPaymentPaypay() {
		return v, false
	}
	return s.PaymentPaypay, true
}

// NewPaymentPaypayPaymentsPostReq returns new PaymentsPostReq from PaymentPaypay.
func NewPaymentPaypayPaymentsPostReq(v PaymentPaypay) PaymentsPostReq {
	var s PaymentsPostReq
	s.SetPaymentPaypay(v)
	return s
}
