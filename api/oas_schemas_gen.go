// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/AccountDetail
type AccountDetail struct {
	// 売上入金詳細 ID.
	DetailID OptInt `json:"detail_id"`
	// ショップID.
	ShopID        OptString                 `json:"shop_id"`
	TradeType     OptAccountDetailTradeType `json:"trade_type"`
	PaymentMethod OptAccountPaymentMethod   `json:"payment_method"`
	// 精算ID.
	AccountID OptInt `json:"account_id"`
	// オーダー（決済）ID.
	OrderID OptNilString `json:"order_id"`
	// 取引ID.
	AccessID OptNilString `json:"access_id"`
	// この取引による入金額（参考値）\
	// ※実際の入金額は全ての売上入金詳細の入金額の合算した後に計算される消費税金額によるため、この値は参考値となります。.
	DepositAmount OptNilInt `json:"deposit_amount"`
	// 利用金額.
	Amount OptNilInt `json:"amount"`
	// 税送料.
	Tax OptNilInt `json:"tax"`
	// Fincode 決済手数料（税抜）.
	FeeTotal OptNilInt `json:"fee_total"`
	// Fincode 決済手数料（税込）.
	FeeTotalTaxin OptNilInt `json:"fee_total_taxin"`
	// Fincode 決済手数料にかかる消費税.
	FeeProfitTax OptNilInt `json:"fee_profit_tax"`
	// Fincode 決済手数料のうち、課税対象金額.
	FeeProfit OptNilInt `json:"fee_profit"`
	// Fincode 決済手数料のうち、非課税対象金額.
	FeeCost OptNilInt `json:"fee_cost"`
	// Fincode 決済手数料率.
	FeeRateTotal OptNilFloat64 `json:"fee_rate_total"`
	// Fincode 決済手数料 最低手数料.
	FixedFee OptNilInt `json:"fixed_fee"`
	// Fincode手数料率 適用区分
	// - `0`: 料率。<br /><span class="smallText">この決済による売上に対し、fincode
	// 決済手数料率が適用されたことを示します。</span>
	// - `1`: 最低手数料。<br /><span
	// class="smallText">この決済による売上に対し、fincode
	// 決済最低手数料が適用されたことを示します。</span>.
	ApplyType OptNilAccountDetailApplyType `json:"apply_type"`
	// Fincode 振替口座 Web登録手数料（税抜）\
	// ※ 口座振替のみ.
	WebRegistrationFee OptNilInt `json:"web_registration_fee"`
	// Fincode 振替口座 Web登録手数料（税込）\
	// ※ 口座振替のみ.
	WebRegistrationFeeTaxin OptNilInt `json:"web_registration_fee_taxin"`
	// Fincode手数料 Web登録手数料消費税\
	// ※ 口座振替のみ.
	WebRegistrationFeeTax OptNilInt `json:"web_registration_fee_tax"`
	// プラットフォーム利用料（税抜）\
	// ※ テナントのみ.
	PlatformFee OptNilInt `json:"platform_fee"`
	// プラットフォーム利用料（税込）\
	// ※ テナントのみ.
	PlatformFeeTaxin OptNilInt `json:"platform_fee_taxin"`
	// プラットフォーム利用料率\
	// ※ テナントのみ.
	PlatformFeeRate OptNilFloat64 `json:"platform_fee_rate"`
	// プラットフォーム利用料率 最低手数料\
	// ※ テナントのみ.
	FixedFeeForPlatformFee OptNilInt `json:"fixed_fee_for_platform_fee"`
	// プラットフォーム利用料率 適用区分
	// - `0`: 料率。<br /><span
	// class="smallText">この決済による売上に対し、プラットフォーム利用料率が適用されたことを示します。</span>
	// - `1`: 最低手数料。<br /><span
	// class="smallText">この決済による売上に対し、プラットフォームが設定した最低利用料が適用されたことを示します。</span>
	// ※ テナントのみ.
	ApplyTypeForPlatformFee OptNilAccountDetailApplyTypeForPlatformFee `json:"apply_type_for_platform_fee"`
	// プラットフォームWeb登録利用料（税抜）\
	// ※ 口座振替のみ\
	// ※ テナントのみ.
	PlatformWebRegistrationFee OptNilInt `json:"platform_web_registration_fee"`
	// プラットフォームWeb登録利用料（税込）\
	// ※ 口座振替のみ\
	// ※ テナントのみ.
	PlatformWebRegistrationFeeTaxin OptNilInt `json:"platform_web_registration_fee_taxin"`
	// プラットフォームWeb登録利用料消費税\
	// ※ 口座振替のみ\
	// ※ テナントのみ.
	PlatformWebRegistrationFeeTax OptNilInt `json:"platform_web_registration_fee_tax"`
	// 取引の確定処理を行った日時 \
	// 形式： `yyyy/MM/dd HH:MM`.
	ProcessedDate OptNilString `json:"processed_date"`
	// 集計期間の開始日\
	// 形式： `yyyy/MM/dd HH:MM`.
	AggregateTermStart OptNilString `json:"aggregate_term_start"`
	// 集計期間の終了日\
	// 形式： `yyyy/MM/dd HH:MM`.
	AggregateTermEnd OptNilString `json:"aggregate_term_end"`
	Created          OptString    `json:"created"`
	Updated          *NilString   `json:"updated"`
}

// GetDetailID returns the value of DetailID.
func (s *AccountDetail) GetDetailID() OptInt {
	return s.DetailID
}

// GetShopID returns the value of ShopID.
func (s *AccountDetail) GetShopID() OptString {
	return s.ShopID
}

// GetTradeType returns the value of TradeType.
func (s *AccountDetail) GetTradeType() OptAccountDetailTradeType {
	return s.TradeType
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *AccountDetail) GetPaymentMethod() OptAccountPaymentMethod {
	return s.PaymentMethod
}

// GetAccountID returns the value of AccountID.
func (s *AccountDetail) GetAccountID() OptInt {
	return s.AccountID
}

// GetOrderID returns the value of OrderID.
func (s *AccountDetail) GetOrderID() OptNilString {
	return s.OrderID
}

// GetAccessID returns the value of AccessID.
func (s *AccountDetail) GetAccessID() OptNilString {
	return s.AccessID
}

// GetDepositAmount returns the value of DepositAmount.
func (s *AccountDetail) GetDepositAmount() OptNilInt {
	return s.DepositAmount
}

// GetAmount returns the value of Amount.
func (s *AccountDetail) GetAmount() OptNilInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *AccountDetail) GetTax() OptNilInt {
	return s.Tax
}

// GetFeeTotal returns the value of FeeTotal.
func (s *AccountDetail) GetFeeTotal() OptNilInt {
	return s.FeeTotal
}

// GetFeeTotalTaxin returns the value of FeeTotalTaxin.
func (s *AccountDetail) GetFeeTotalTaxin() OptNilInt {
	return s.FeeTotalTaxin
}

// GetFeeProfitTax returns the value of FeeProfitTax.
func (s *AccountDetail) GetFeeProfitTax() OptNilInt {
	return s.FeeProfitTax
}

// GetFeeProfit returns the value of FeeProfit.
func (s *AccountDetail) GetFeeProfit() OptNilInt {
	return s.FeeProfit
}

// GetFeeCost returns the value of FeeCost.
func (s *AccountDetail) GetFeeCost() OptNilInt {
	return s.FeeCost
}

// GetFeeRateTotal returns the value of FeeRateTotal.
func (s *AccountDetail) GetFeeRateTotal() OptNilFloat64 {
	return s.FeeRateTotal
}

// GetFixedFee returns the value of FixedFee.
func (s *AccountDetail) GetFixedFee() OptNilInt {
	return s.FixedFee
}

// GetApplyType returns the value of ApplyType.
func (s *AccountDetail) GetApplyType() OptNilAccountDetailApplyType {
	return s.ApplyType
}

// GetWebRegistrationFee returns the value of WebRegistrationFee.
func (s *AccountDetail) GetWebRegistrationFee() OptNilInt {
	return s.WebRegistrationFee
}

// GetWebRegistrationFeeTaxin returns the value of WebRegistrationFeeTaxin.
func (s *AccountDetail) GetWebRegistrationFeeTaxin() OptNilInt {
	return s.WebRegistrationFeeTaxin
}

// GetWebRegistrationFeeTax returns the value of WebRegistrationFeeTax.
func (s *AccountDetail) GetWebRegistrationFeeTax() OptNilInt {
	return s.WebRegistrationFeeTax
}

// GetPlatformFee returns the value of PlatformFee.
func (s *AccountDetail) GetPlatformFee() OptNilInt {
	return s.PlatformFee
}

// GetPlatformFeeTaxin returns the value of PlatformFeeTaxin.
func (s *AccountDetail) GetPlatformFeeTaxin() OptNilInt {
	return s.PlatformFeeTaxin
}

// GetPlatformFeeRate returns the value of PlatformFeeRate.
func (s *AccountDetail) GetPlatformFeeRate() OptNilFloat64 {
	return s.PlatformFeeRate
}

// GetFixedFeeForPlatformFee returns the value of FixedFeeForPlatformFee.
func (s *AccountDetail) GetFixedFeeForPlatformFee() OptNilInt {
	return s.FixedFeeForPlatformFee
}

// GetApplyTypeForPlatformFee returns the value of ApplyTypeForPlatformFee.
func (s *AccountDetail) GetApplyTypeForPlatformFee() OptNilAccountDetailApplyTypeForPlatformFee {
	return s.ApplyTypeForPlatformFee
}

// GetPlatformWebRegistrationFee returns the value of PlatformWebRegistrationFee.
func (s *AccountDetail) GetPlatformWebRegistrationFee() OptNilInt {
	return s.PlatformWebRegistrationFee
}

// GetPlatformWebRegistrationFeeTaxin returns the value of PlatformWebRegistrationFeeTaxin.
func (s *AccountDetail) GetPlatformWebRegistrationFeeTaxin() OptNilInt {
	return s.PlatformWebRegistrationFeeTaxin
}

// GetPlatformWebRegistrationFeeTax returns the value of PlatformWebRegistrationFeeTax.
func (s *AccountDetail) GetPlatformWebRegistrationFeeTax() OptNilInt {
	return s.PlatformWebRegistrationFeeTax
}

// GetProcessedDate returns the value of ProcessedDate.
func (s *AccountDetail) GetProcessedDate() OptNilString {
	return s.ProcessedDate
}

// GetAggregateTermStart returns the value of AggregateTermStart.
func (s *AccountDetail) GetAggregateTermStart() OptNilString {
	return s.AggregateTermStart
}

// GetAggregateTermEnd returns the value of AggregateTermEnd.
func (s *AccountDetail) GetAggregateTermEnd() OptNilString {
	return s.AggregateTermEnd
}

// GetCreated returns the value of Created.
func (s *AccountDetail) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AccountDetail) GetUpdated() *NilString {
	return s.Updated
}

// SetDetailID sets the value of DetailID.
func (s *AccountDetail) SetDetailID(val OptInt) {
	s.DetailID = val
}

// SetShopID sets the value of ShopID.
func (s *AccountDetail) SetShopID(val OptString) {
	s.ShopID = val
}

// SetTradeType sets the value of TradeType.
func (s *AccountDetail) SetTradeType(val OptAccountDetailTradeType) {
	s.TradeType = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *AccountDetail) SetPaymentMethod(val OptAccountPaymentMethod) {
	s.PaymentMethod = val
}

// SetAccountID sets the value of AccountID.
func (s *AccountDetail) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetOrderID sets the value of OrderID.
func (s *AccountDetail) SetOrderID(val OptNilString) {
	s.OrderID = val
}

// SetAccessID sets the value of AccessID.
func (s *AccountDetail) SetAccessID(val OptNilString) {
	s.AccessID = val
}

// SetDepositAmount sets the value of DepositAmount.
func (s *AccountDetail) SetDepositAmount(val OptNilInt) {
	s.DepositAmount = val
}

// SetAmount sets the value of Amount.
func (s *AccountDetail) SetAmount(val OptNilInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *AccountDetail) SetTax(val OptNilInt) {
	s.Tax = val
}

// SetFeeTotal sets the value of FeeTotal.
func (s *AccountDetail) SetFeeTotal(val OptNilInt) {
	s.FeeTotal = val
}

// SetFeeTotalTaxin sets the value of FeeTotalTaxin.
func (s *AccountDetail) SetFeeTotalTaxin(val OptNilInt) {
	s.FeeTotalTaxin = val
}

// SetFeeProfitTax sets the value of FeeProfitTax.
func (s *AccountDetail) SetFeeProfitTax(val OptNilInt) {
	s.FeeProfitTax = val
}

// SetFeeProfit sets the value of FeeProfit.
func (s *AccountDetail) SetFeeProfit(val OptNilInt) {
	s.FeeProfit = val
}

// SetFeeCost sets the value of FeeCost.
func (s *AccountDetail) SetFeeCost(val OptNilInt) {
	s.FeeCost = val
}

// SetFeeRateTotal sets the value of FeeRateTotal.
func (s *AccountDetail) SetFeeRateTotal(val OptNilFloat64) {
	s.FeeRateTotal = val
}

// SetFixedFee sets the value of FixedFee.
func (s *AccountDetail) SetFixedFee(val OptNilInt) {
	s.FixedFee = val
}

// SetApplyType sets the value of ApplyType.
func (s *AccountDetail) SetApplyType(val OptNilAccountDetailApplyType) {
	s.ApplyType = val
}

// SetWebRegistrationFee sets the value of WebRegistrationFee.
func (s *AccountDetail) SetWebRegistrationFee(val OptNilInt) {
	s.WebRegistrationFee = val
}

// SetWebRegistrationFeeTaxin sets the value of WebRegistrationFeeTaxin.
func (s *AccountDetail) SetWebRegistrationFeeTaxin(val OptNilInt) {
	s.WebRegistrationFeeTaxin = val
}

// SetWebRegistrationFeeTax sets the value of WebRegistrationFeeTax.
func (s *AccountDetail) SetWebRegistrationFeeTax(val OptNilInt) {
	s.WebRegistrationFeeTax = val
}

// SetPlatformFee sets the value of PlatformFee.
func (s *AccountDetail) SetPlatformFee(val OptNilInt) {
	s.PlatformFee = val
}

// SetPlatformFeeTaxin sets the value of PlatformFeeTaxin.
func (s *AccountDetail) SetPlatformFeeTaxin(val OptNilInt) {
	s.PlatformFeeTaxin = val
}

// SetPlatformFeeRate sets the value of PlatformFeeRate.
func (s *AccountDetail) SetPlatformFeeRate(val OptNilFloat64) {
	s.PlatformFeeRate = val
}

// SetFixedFeeForPlatformFee sets the value of FixedFeeForPlatformFee.
func (s *AccountDetail) SetFixedFeeForPlatformFee(val OptNilInt) {
	s.FixedFeeForPlatformFee = val
}

// SetApplyTypeForPlatformFee sets the value of ApplyTypeForPlatformFee.
func (s *AccountDetail) SetApplyTypeForPlatformFee(val OptNilAccountDetailApplyTypeForPlatformFee) {
	s.ApplyTypeForPlatformFee = val
}

// SetPlatformWebRegistrationFee sets the value of PlatformWebRegistrationFee.
func (s *AccountDetail) SetPlatformWebRegistrationFee(val OptNilInt) {
	s.PlatformWebRegistrationFee = val
}

// SetPlatformWebRegistrationFeeTaxin sets the value of PlatformWebRegistrationFeeTaxin.
func (s *AccountDetail) SetPlatformWebRegistrationFeeTaxin(val OptNilInt) {
	s.PlatformWebRegistrationFeeTaxin = val
}

// SetPlatformWebRegistrationFeeTax sets the value of PlatformWebRegistrationFeeTax.
func (s *AccountDetail) SetPlatformWebRegistrationFeeTax(val OptNilInt) {
	s.PlatformWebRegistrationFeeTax = val
}

// SetProcessedDate sets the value of ProcessedDate.
func (s *AccountDetail) SetProcessedDate(val OptNilString) {
	s.ProcessedDate = val
}

// SetAggregateTermStart sets the value of AggregateTermStart.
func (s *AccountDetail) SetAggregateTermStart(val OptNilString) {
	s.AggregateTermStart = val
}

// SetAggregateTermEnd sets the value of AggregateTermEnd.
func (s *AccountDetail) SetAggregateTermEnd(val OptNilString) {
	s.AggregateTermEnd = val
}

// SetCreated sets the value of Created.
func (s *AccountDetail) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AccountDetail) SetUpdated(val *NilString) {
	s.Updated = val
}

// Fincode手数料率 適用区分
// - `0`: 料率。<br /><span class="smallText">この決済による売上に対し、fincode
// 決済手数料率が適用されたことを示します。</span>
// - `1`: 最低手数料。<br /><span
// class="smallText">この決済による売上に対し、fincode
// 決済最低手数料が適用されたことを示します。</span>.
type AccountDetailApplyType int

const (
	AccountDetailApplyType0 AccountDetailApplyType = 0
	AccountDetailApplyType1 AccountDetailApplyType = 1
)

// AllValues returns all AccountDetailApplyType values.
func (AccountDetailApplyType) AllValues() []AccountDetailApplyType {
	return []AccountDetailApplyType{
		AccountDetailApplyType0,
		AccountDetailApplyType1,
	}
}

// プラットフォーム利用料率 適用区分
// - `0`: 料率。<br /><span
// class="smallText">この決済による売上に対し、プラットフォーム利用料率が適用されたことを示します。</span>
// - `1`: 最低手数料。<br /><span
// class="smallText">この決済による売上に対し、プラットフォームが設定した最低利用料が適用されたことを示します。</span>
// ※ テナントのみ.
type AccountDetailApplyTypeForPlatformFee int

const (
	AccountDetailApplyTypeForPlatformFee0 AccountDetailApplyTypeForPlatformFee = 0
	AccountDetailApplyTypeForPlatformFee1 AccountDetailApplyTypeForPlatformFee = 1
)

// AllValues returns all AccountDetailApplyTypeForPlatformFee values.
func (AccountDetailApplyTypeForPlatformFee) AllValues() []AccountDetailApplyTypeForPlatformFee {
	return []AccountDetailApplyTypeForPlatformFee{
		AccountDetailApplyTypeForPlatformFee0,
		AccountDetailApplyTypeForPlatformFee1,
	}
}

// Merged schema.
// Ref: #/components/schemas/AccountDetail.ListRetrieving.Response
type AccountDetailListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString    `json:"link_previous"`
	List         []AccountDetail `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *AccountDetailListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *AccountDetailListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *AccountDetailListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *AccountDetailListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *AccountDetailListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *AccountDetailListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *AccountDetailListRetrievingResponse) GetList() []AccountDetail {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *AccountDetailListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *AccountDetailListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *AccountDetailListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *AccountDetailListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *AccountDetailListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *AccountDetailListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *AccountDetailListRetrievingResponse) SetList(val []AccountDetail) {
	s.List = val
}

func (*AccountDetailListRetrievingResponse) retrieveAccountDetailListRes() {}

// 取引種別\
// 値によって、集計の際にこの売上入金明細の利用金額が加算されるか減算されるかが異なります。
// - `1`: 決済（加算）<br /><span
// class="smallText">この売上入金明細はある決済1件に対し発生したものであることを示します。</span>
// - `2`: 返金（減算）<br /><span
// class="smallText">この売上入金明細はある決済に対し発生したキャンセル1件に対し発生したものであることを示します。</span>
// - `3`: チャージバック（減算）<br /><span
// class="smallText">この売上入金明細はある決済に対し発生したチャージバック1件に対し発生したものであることを示します。</span>
// - `4`: 調整（加算）<br /><span
// class="smallText">この売上入金明細は何らかの理由で売上入金情報を調整するために発生したものであることを示します。減算のためマイナス値が返されることもあります。</span>
// - `5`: チャージバックの取消（加算）<br /><span
// class="smallText">この売上入金明細はある決済に対し発生したチャージバック1件が取り消されたとき発生したものであることを示します。</span>.
// Ref: #/components/schemas/AccountDetailTradeType
type AccountDetailTradeType int

const (
	AccountDetailTradeType1 AccountDetailTradeType = 1
	AccountDetailTradeType2 AccountDetailTradeType = 2
	AccountDetailTradeType3 AccountDetailTradeType = 3
	AccountDetailTradeType4 AccountDetailTradeType = 4
	AccountDetailTradeType5 AccountDetailTradeType = 5
)

// AllValues returns all AccountDetailTradeType values.
func (AccountDetailTradeType) AllValues() []AccountDetailTradeType {
	return []AccountDetailTradeType{
		AccountDetailTradeType1,
		AccountDetailTradeType2,
		AccountDetailTradeType3,
		AccountDetailTradeType4,
		AccountDetailTradeType5,
	}
}

type AccountIdSchema string

// Ref: #/components/schemas/AccountListItem
type AccountListItem struct {
	ID                       OptString                    `json:"id"`
	AccountID                OptInt                       `json:"account_id"`
	ShopID                   OptString                    `json:"shop_id"`
	ScheduledDepositDate     *NilString                   `json:"scheduled_deposit_date"`
	AggregateTermStart       *NilString                   `json:"aggregate_term_start"`
	AggregateTermEnd         *NilString                   `json:"aggregate_term_end"`
	DepositDate              *NilString                   `json:"deposit_date"`
	PaymentDeadline          *NilString                   `json:"payment_deadline"`
	PaymentCompletionDate    *NilString                   `json:"payment_completion_date"`
	StatusCode               OptAccountListItemStatusCode `json:"status_code"`
	Count                    *NilInt                      `json:"count"`
	BankTransferFee          *NilInt                      `json:"bank_transfer_fee"`
	TotalAmount              *NilInt                      `json:"total_amount"`
	FeeAmount                *NilInt                      `json:"fee_amount"`
	WebRegistrationFeeAmount *NilInt                      `json:"web_registration_fee_amount"`
	DepositAmount            *NilInt                      `json:"deposit_amount"`
	PlatformFeeAmount        *NilInt                      `json:"platform_fee_amount"`
	PlatformFeeTaxAmount     *NilInt                      `json:"platform_fee_tax_amount"`
	Created                  OptString                    `json:"created"`
	Updated                  *NilString                   `json:"updated"`
}

// GetID returns the value of ID.
func (s *AccountListItem) GetID() OptString {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *AccountListItem) GetAccountID() OptInt {
	return s.AccountID
}

// GetShopID returns the value of ShopID.
func (s *AccountListItem) GetShopID() OptString {
	return s.ShopID
}

// GetScheduledDepositDate returns the value of ScheduledDepositDate.
func (s *AccountListItem) GetScheduledDepositDate() *NilString {
	return s.ScheduledDepositDate
}

// GetAggregateTermStart returns the value of AggregateTermStart.
func (s *AccountListItem) GetAggregateTermStart() *NilString {
	return s.AggregateTermStart
}

// GetAggregateTermEnd returns the value of AggregateTermEnd.
func (s *AccountListItem) GetAggregateTermEnd() *NilString {
	return s.AggregateTermEnd
}

// GetDepositDate returns the value of DepositDate.
func (s *AccountListItem) GetDepositDate() *NilString {
	return s.DepositDate
}

// GetPaymentDeadline returns the value of PaymentDeadline.
func (s *AccountListItem) GetPaymentDeadline() *NilString {
	return s.PaymentDeadline
}

// GetPaymentCompletionDate returns the value of PaymentCompletionDate.
func (s *AccountListItem) GetPaymentCompletionDate() *NilString {
	return s.PaymentCompletionDate
}

// GetStatusCode returns the value of StatusCode.
func (s *AccountListItem) GetStatusCode() OptAccountListItemStatusCode {
	return s.StatusCode
}

// GetCount returns the value of Count.
func (s *AccountListItem) GetCount() *NilInt {
	return s.Count
}

// GetBankTransferFee returns the value of BankTransferFee.
func (s *AccountListItem) GetBankTransferFee() *NilInt {
	return s.BankTransferFee
}

// GetTotalAmount returns the value of TotalAmount.
func (s *AccountListItem) GetTotalAmount() *NilInt {
	return s.TotalAmount
}

// GetFeeAmount returns the value of FeeAmount.
func (s *AccountListItem) GetFeeAmount() *NilInt {
	return s.FeeAmount
}

// GetWebRegistrationFeeAmount returns the value of WebRegistrationFeeAmount.
func (s *AccountListItem) GetWebRegistrationFeeAmount() *NilInt {
	return s.WebRegistrationFeeAmount
}

// GetDepositAmount returns the value of DepositAmount.
func (s *AccountListItem) GetDepositAmount() *NilInt {
	return s.DepositAmount
}

// GetPlatformFeeAmount returns the value of PlatformFeeAmount.
func (s *AccountListItem) GetPlatformFeeAmount() *NilInt {
	return s.PlatformFeeAmount
}

// GetPlatformFeeTaxAmount returns the value of PlatformFeeTaxAmount.
func (s *AccountListItem) GetPlatformFeeTaxAmount() *NilInt {
	return s.PlatformFeeTaxAmount
}

// GetCreated returns the value of Created.
func (s *AccountListItem) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AccountListItem) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *AccountListItem) SetID(val OptString) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *AccountListItem) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetShopID sets the value of ShopID.
func (s *AccountListItem) SetShopID(val OptString) {
	s.ShopID = val
}

// SetScheduledDepositDate sets the value of ScheduledDepositDate.
func (s *AccountListItem) SetScheduledDepositDate(val *NilString) {
	s.ScheduledDepositDate = val
}

// SetAggregateTermStart sets the value of AggregateTermStart.
func (s *AccountListItem) SetAggregateTermStart(val *NilString) {
	s.AggregateTermStart = val
}

// SetAggregateTermEnd sets the value of AggregateTermEnd.
func (s *AccountListItem) SetAggregateTermEnd(val *NilString) {
	s.AggregateTermEnd = val
}

// SetDepositDate sets the value of DepositDate.
func (s *AccountListItem) SetDepositDate(val *NilString) {
	s.DepositDate = val
}

// SetPaymentDeadline sets the value of PaymentDeadline.
func (s *AccountListItem) SetPaymentDeadline(val *NilString) {
	s.PaymentDeadline = val
}

// SetPaymentCompletionDate sets the value of PaymentCompletionDate.
func (s *AccountListItem) SetPaymentCompletionDate(val *NilString) {
	s.PaymentCompletionDate = val
}

// SetStatusCode sets the value of StatusCode.
func (s *AccountListItem) SetStatusCode(val OptAccountListItemStatusCode) {
	s.StatusCode = val
}

// SetCount sets the value of Count.
func (s *AccountListItem) SetCount(val *NilInt) {
	s.Count = val
}

// SetBankTransferFee sets the value of BankTransferFee.
func (s *AccountListItem) SetBankTransferFee(val *NilInt) {
	s.BankTransferFee = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *AccountListItem) SetTotalAmount(val *NilInt) {
	s.TotalAmount = val
}

// SetFeeAmount sets the value of FeeAmount.
func (s *AccountListItem) SetFeeAmount(val *NilInt) {
	s.FeeAmount = val
}

// SetWebRegistrationFeeAmount sets the value of WebRegistrationFeeAmount.
func (s *AccountListItem) SetWebRegistrationFeeAmount(val *NilInt) {
	s.WebRegistrationFeeAmount = val
}

// SetDepositAmount sets the value of DepositAmount.
func (s *AccountListItem) SetDepositAmount(val *NilInt) {
	s.DepositAmount = val
}

// SetPlatformFeeAmount sets the value of PlatformFeeAmount.
func (s *AccountListItem) SetPlatformFeeAmount(val *NilInt) {
	s.PlatformFeeAmount = val
}

// SetPlatformFeeTaxAmount sets the value of PlatformFeeTaxAmount.
func (s *AccountListItem) SetPlatformFeeTaxAmount(val *NilInt) {
	s.PlatformFeeTaxAmount = val
}

// SetCreated sets the value of Created.
func (s *AccountListItem) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AccountListItem) SetUpdated(val *NilString) {
	s.Updated = val
}

// 入金ステータス
// - `3001`: 金額確定前<br /><span
// class="smallText">この集計期間中の売上入金に関してまだ集計中であり金額が確定していない状態。入金はされていません。</span>
// - `3002`: 金額確定済み<br /><span
// class="smallText">この集計期間中の売上入金の金額が確定した状態。入金はされていません。</span>
// - `3003`: 入金済み<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金が完了した状態。</span>
// - `3004`: 入金停止中<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金に際し何らかの懸念事項があり差し止めている状態。解消後fincodeはできるだけ早く入金を再試行します。</span>
// - `3005`: 入金エラー<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金に何らかの理由で失敗した状態。解消後fincodeはできるだけ早く入金を再試行します。</span>
// - `3006`: 請求中<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求している状態。</span>
// - `3007`: 請求エラー<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求が必要になったものの何らかのエラーにより失敗した状態。</span>
// - `3008`: 請求停止中<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求が必要になったものの何らかの理由により差し止めている状態。</span>
// - `3009`: 支払済み<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り発生したfincodeからショップへの請求に対する入金が確認できた状担。</span>
// - `3010`: 本人確認書類未確認<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金に際し本人確認書類の提出が確認できないため差し止めている状態。解消後fincodeはできるだけ早く入金を再試行します。</span>
// - `3011`: 精算済み<br /><span
// class="smallText">売上が0円のまま入金額が確定した状態。</span>
// - `3012`: 入金開始前<br /><span
// class="smallText">初回入金がまだ実施されていない状態。</span>
// - `3013`: 契約不成立<br /><span
// class="smallText">fincodeとの契約が不成立となった状態。</span>.
type AccountListItemStatusCode int

const (
	AccountListItemStatusCode3001 AccountListItemStatusCode = 3001
	AccountListItemStatusCode3002 AccountListItemStatusCode = 3002
	AccountListItemStatusCode3003 AccountListItemStatusCode = 3003
	AccountListItemStatusCode3004 AccountListItemStatusCode = 3004
	AccountListItemStatusCode3005 AccountListItemStatusCode = 3005
	AccountListItemStatusCode3006 AccountListItemStatusCode = 3006
	AccountListItemStatusCode3007 AccountListItemStatusCode = 3007
	AccountListItemStatusCode3008 AccountListItemStatusCode = 3008
	AccountListItemStatusCode3009 AccountListItemStatusCode = 3009
	AccountListItemStatusCode3010 AccountListItemStatusCode = 3010
	AccountListItemStatusCode3011 AccountListItemStatusCode = 3011
	AccountListItemStatusCode3012 AccountListItemStatusCode = 3012
	AccountListItemStatusCode3013 AccountListItemStatusCode = 3013
)

// AllValues returns all AccountListItemStatusCode values.
func (AccountListItemStatusCode) AllValues() []AccountListItemStatusCode {
	return []AccountListItemStatusCode{
		AccountListItemStatusCode3001,
		AccountListItemStatusCode3002,
		AccountListItemStatusCode3003,
		AccountListItemStatusCode3004,
		AccountListItemStatusCode3005,
		AccountListItemStatusCode3006,
		AccountListItemStatusCode3007,
		AccountListItemStatusCode3008,
		AccountListItemStatusCode3009,
		AccountListItemStatusCode3010,
		AccountListItemStatusCode3011,
		AccountListItemStatusCode3012,
		AccountListItemStatusCode3013,
	}
}

// Merged schema.
// Ref: #/components/schemas/Account.ListRetrieving.Response
type AccountListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString      `json:"link_previous"`
	List         []AccountListItem `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *AccountListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *AccountListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *AccountListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *AccountListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *AccountListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *AccountListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *AccountListRetrievingResponse) GetList() []AccountListItem {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *AccountListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *AccountListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *AccountListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *AccountListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *AccountListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *AccountListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *AccountListRetrievingResponse) SetList(val []AccountListItem) {
	s.List = val
}

func (*AccountListRetrievingResponse) retrieveAccountListRes() {}

// この売上入金明細に対応する決済で利用された決済手段
// - `VM`: カード決済（VISA / Mastercard）
// - `JA`: カード決済（JCB / American Express / Diners Club / Discover）
// - `KONBINI`: コンビニ決済
// - `Paypay`: PayPay決済
// - `ApplepayVM`: Apple Pay決済（VISA / Mastercard）
// - `ApplepayJA`: Apple Pay決済（JCB / American Express / Discover）
// - `Directdebit`: 口座振替.
// Ref: #/components/schemas/AccountPaymentMethod
type AccountPaymentMethod string

const (
	AccountPaymentMethodVM          AccountPaymentMethod = "VM"
	AccountPaymentMethodJA          AccountPaymentMethod = "JA"
	AccountPaymentMethodKONBINI     AccountPaymentMethod = "KONBINI"
	AccountPaymentMethodPayPay      AccountPaymentMethod = "PayPay"
	AccountPaymentMethodApplepayVM  AccountPaymentMethod = "ApplepayVM"
	AccountPaymentMethodApplepayJA  AccountPaymentMethod = "ApplepayJA"
	AccountPaymentMethodDirectdebit AccountPaymentMethod = "Directdebit"
)

// AllValues returns all AccountPaymentMethod values.
func (AccountPaymentMethod) AllValues() []AccountPaymentMethod {
	return []AccountPaymentMethod{
		AccountPaymentMethodVM,
		AccountPaymentMethodJA,
		AccountPaymentMethodKONBINI,
		AccountPaymentMethodPayPay,
		AccountPaymentMethodApplepayVM,
		AccountPaymentMethodApplepayJA,
		AccountPaymentMethodDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountPaymentMethod) MarshalText() ([]byte, error) {
	switch s {
	case AccountPaymentMethodVM:
		return []byte(s), nil
	case AccountPaymentMethodJA:
		return []byte(s), nil
	case AccountPaymentMethodKONBINI:
		return []byte(s), nil
	case AccountPaymentMethodPayPay:
		return []byte(s), nil
	case AccountPaymentMethodApplepayVM:
		return []byte(s), nil
	case AccountPaymentMethodApplepayJA:
		return []byte(s), nil
	case AccountPaymentMethodDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountPaymentMethod) UnmarshalText(data []byte) error {
	switch AccountPaymentMethod(data) {
	case AccountPaymentMethodVM:
		*s = AccountPaymentMethodVM
		return nil
	case AccountPaymentMethodJA:
		*s = AccountPaymentMethodJA
		return nil
	case AccountPaymentMethodKONBINI:
		*s = AccountPaymentMethodKONBINI
		return nil
	case AccountPaymentMethodPayPay:
		*s = AccountPaymentMethodPayPay
		return nil
	case AccountPaymentMethodApplepayVM:
		*s = AccountPaymentMethodApplepayVM
		return nil
	case AccountPaymentMethodApplepayJA:
		*s = AccountPaymentMethodApplepayJA
		return nil
	case AccountPaymentMethodDirectdebit:
		*s = AccountPaymentMethodDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Account.Retrieving.Response
type AccountRetrievingResponse struct {
	// 売上入金ID.
	ID OptString `json:"id"`
	// 精算ID.
	AccountID OptInt `json:"account_id"`
	// ショップID.
	ShopID OptString `json:"shop_id"`
	// 売上入金 入金額
	// ショップに入金される（入金が予定されている）売上金額です。\
	// 精算金額（`settlement_amount`）から振込手数料（`bank_transfer_fee`）を引いた金額に一致します。.
	DepositAmount OptNilInt `json:"deposit_amount"`
	// 売上入金 入金実績日\
	// 形式： `yyyy/MM/dd HH:MM`.
	DepositDate OptNilString `json:"deposit_date"`
	// 売上入金 入金予定日\
	// 形式： `yyyy/MM/dd HH:MM`.
	ScheduledDepositDate OptNilString `json:"scheduled_deposit_date"`
	// 売上入金 集計期間の開始日\
	// 形式： `yyyy/MM/dd HH:MM`.
	AggregateTermStart OptNilString `json:"aggregate_term_start"`
	// 売上入金 集計期間の終了日\
	// 形式： `yyyy/MM/dd HH:MM`.
	AggregateTermEnd OptNilString `json:"aggregate_term_end"`
	// （請求が発生した場合）支払期限日\
	// 形式： `yyyy/MM/dd HH:MM`.
	PaymentDeadline OptNilString `json:"payment_deadline"`
	// （請求が発生した場合）請求日\
	// 形式： `yyyy/MM/dd HH:MM`.
	PaymentCompletionDate OptNilString         `json:"payment_completion_date"`
	StatusCode            OptDepositStatusCode `json:"status_code"`
	// この売上入金に含まれる売上入金詳細の件数.
	Count OptNilInt `json:"count"`
	// この売上入金において精算の対象となった取引の総額。.
	SettlementAmount OptNilInt `json:"settlement_amount"`
	// 振込手数料.
	BankTransferFee OptNilInt `json:"bank_transfer_fee"`
	// この売上入金において精算の対象となった取引の総額。.
	TotalAmount OptNilInt `json:"total_amount"`
	// この売上入金において精算の対象となった取引にかかるfincodeへの手数料.
	FeeAmount OptNilInt `json:"fee_amount"`
	// この売上入金の精算期間中に発生した振替口座のWeb登録手数料\
	// ※ 口座振替のみ.
	WebRegistrationFeeAmount OptNilInt `json:"web_registration_fee_amount"`
	// この売上入金において精算の対象となった取引にかかるfincodeへの手数料にかかる消費税.
	TaxAmount OptNilInt `json:"tax_amount"`
	// この売上入金において精算の対象となった取引にかかるプラットフォーム利用料\
	// ※ テナントのみ.
	PlatformFeeAmount OptNilInt `json:"platform_fee_amount"`
	// この売上入金において精算の対象となった取引にかかるプラットフォーム利用料の消費税\
	// ※ テナントのみ.
	PlatformFeeTaxAmount OptNilInt `json:"platform_fee_tax_amount"`
	// 売上入金
	// 精算期間中に発生した、プラットフォームが設定した振替口座のWeb登録手数料\
	// ※ テナントのみ.
	PlatformWebRegistrationFeeAmount OptNilInt  `json:"platform_web_registration_fee_amount"`
	Created                          OptString  `json:"created"`
	Updated                          *NilString `json:"updated"`
	// 売上入金 入金先口座情報.
	DepositDestination OptAccountRetrievingResponseDepositDestination `json:"deposit_destination"`
}

// GetID returns the value of ID.
func (s *AccountRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *AccountRetrievingResponse) GetAccountID() OptInt {
	return s.AccountID
}

// GetShopID returns the value of ShopID.
func (s *AccountRetrievingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetDepositAmount returns the value of DepositAmount.
func (s *AccountRetrievingResponse) GetDepositAmount() OptNilInt {
	return s.DepositAmount
}

// GetDepositDate returns the value of DepositDate.
func (s *AccountRetrievingResponse) GetDepositDate() OptNilString {
	return s.DepositDate
}

// GetScheduledDepositDate returns the value of ScheduledDepositDate.
func (s *AccountRetrievingResponse) GetScheduledDepositDate() OptNilString {
	return s.ScheduledDepositDate
}

// GetAggregateTermStart returns the value of AggregateTermStart.
func (s *AccountRetrievingResponse) GetAggregateTermStart() OptNilString {
	return s.AggregateTermStart
}

// GetAggregateTermEnd returns the value of AggregateTermEnd.
func (s *AccountRetrievingResponse) GetAggregateTermEnd() OptNilString {
	return s.AggregateTermEnd
}

// GetPaymentDeadline returns the value of PaymentDeadline.
func (s *AccountRetrievingResponse) GetPaymentDeadline() OptNilString {
	return s.PaymentDeadline
}

// GetPaymentCompletionDate returns the value of PaymentCompletionDate.
func (s *AccountRetrievingResponse) GetPaymentCompletionDate() OptNilString {
	return s.PaymentCompletionDate
}

// GetStatusCode returns the value of StatusCode.
func (s *AccountRetrievingResponse) GetStatusCode() OptDepositStatusCode {
	return s.StatusCode
}

// GetCount returns the value of Count.
func (s *AccountRetrievingResponse) GetCount() OptNilInt {
	return s.Count
}

// GetSettlementAmount returns the value of SettlementAmount.
func (s *AccountRetrievingResponse) GetSettlementAmount() OptNilInt {
	return s.SettlementAmount
}

// GetBankTransferFee returns the value of BankTransferFee.
func (s *AccountRetrievingResponse) GetBankTransferFee() OptNilInt {
	return s.BankTransferFee
}

// GetTotalAmount returns the value of TotalAmount.
func (s *AccountRetrievingResponse) GetTotalAmount() OptNilInt {
	return s.TotalAmount
}

// GetFeeAmount returns the value of FeeAmount.
func (s *AccountRetrievingResponse) GetFeeAmount() OptNilInt {
	return s.FeeAmount
}

// GetWebRegistrationFeeAmount returns the value of WebRegistrationFeeAmount.
func (s *AccountRetrievingResponse) GetWebRegistrationFeeAmount() OptNilInt {
	return s.WebRegistrationFeeAmount
}

// GetTaxAmount returns the value of TaxAmount.
func (s *AccountRetrievingResponse) GetTaxAmount() OptNilInt {
	return s.TaxAmount
}

// GetPlatformFeeAmount returns the value of PlatformFeeAmount.
func (s *AccountRetrievingResponse) GetPlatformFeeAmount() OptNilInt {
	return s.PlatformFeeAmount
}

// GetPlatformFeeTaxAmount returns the value of PlatformFeeTaxAmount.
func (s *AccountRetrievingResponse) GetPlatformFeeTaxAmount() OptNilInt {
	return s.PlatformFeeTaxAmount
}

// GetPlatformWebRegistrationFeeAmount returns the value of PlatformWebRegistrationFeeAmount.
func (s *AccountRetrievingResponse) GetPlatformWebRegistrationFeeAmount() OptNilInt {
	return s.PlatformWebRegistrationFeeAmount
}

// GetCreated returns the value of Created.
func (s *AccountRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AccountRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// GetDepositDestination returns the value of DepositDestination.
func (s *AccountRetrievingResponse) GetDepositDestination() OptAccountRetrievingResponseDepositDestination {
	return s.DepositDestination
}

// SetID sets the value of ID.
func (s *AccountRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *AccountRetrievingResponse) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetShopID sets the value of ShopID.
func (s *AccountRetrievingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetDepositAmount sets the value of DepositAmount.
func (s *AccountRetrievingResponse) SetDepositAmount(val OptNilInt) {
	s.DepositAmount = val
}

// SetDepositDate sets the value of DepositDate.
func (s *AccountRetrievingResponse) SetDepositDate(val OptNilString) {
	s.DepositDate = val
}

// SetScheduledDepositDate sets the value of ScheduledDepositDate.
func (s *AccountRetrievingResponse) SetScheduledDepositDate(val OptNilString) {
	s.ScheduledDepositDate = val
}

// SetAggregateTermStart sets the value of AggregateTermStart.
func (s *AccountRetrievingResponse) SetAggregateTermStart(val OptNilString) {
	s.AggregateTermStart = val
}

// SetAggregateTermEnd sets the value of AggregateTermEnd.
func (s *AccountRetrievingResponse) SetAggregateTermEnd(val OptNilString) {
	s.AggregateTermEnd = val
}

// SetPaymentDeadline sets the value of PaymentDeadline.
func (s *AccountRetrievingResponse) SetPaymentDeadline(val OptNilString) {
	s.PaymentDeadline = val
}

// SetPaymentCompletionDate sets the value of PaymentCompletionDate.
func (s *AccountRetrievingResponse) SetPaymentCompletionDate(val OptNilString) {
	s.PaymentCompletionDate = val
}

// SetStatusCode sets the value of StatusCode.
func (s *AccountRetrievingResponse) SetStatusCode(val OptDepositStatusCode) {
	s.StatusCode = val
}

// SetCount sets the value of Count.
func (s *AccountRetrievingResponse) SetCount(val OptNilInt) {
	s.Count = val
}

// SetSettlementAmount sets the value of SettlementAmount.
func (s *AccountRetrievingResponse) SetSettlementAmount(val OptNilInt) {
	s.SettlementAmount = val
}

// SetBankTransferFee sets the value of BankTransferFee.
func (s *AccountRetrievingResponse) SetBankTransferFee(val OptNilInt) {
	s.BankTransferFee = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *AccountRetrievingResponse) SetTotalAmount(val OptNilInt) {
	s.TotalAmount = val
}

// SetFeeAmount sets the value of FeeAmount.
func (s *AccountRetrievingResponse) SetFeeAmount(val OptNilInt) {
	s.FeeAmount = val
}

// SetWebRegistrationFeeAmount sets the value of WebRegistrationFeeAmount.
func (s *AccountRetrievingResponse) SetWebRegistrationFeeAmount(val OptNilInt) {
	s.WebRegistrationFeeAmount = val
}

// SetTaxAmount sets the value of TaxAmount.
func (s *AccountRetrievingResponse) SetTaxAmount(val OptNilInt) {
	s.TaxAmount = val
}

// SetPlatformFeeAmount sets the value of PlatformFeeAmount.
func (s *AccountRetrievingResponse) SetPlatformFeeAmount(val OptNilInt) {
	s.PlatformFeeAmount = val
}

// SetPlatformFeeTaxAmount sets the value of PlatformFeeTaxAmount.
func (s *AccountRetrievingResponse) SetPlatformFeeTaxAmount(val OptNilInt) {
	s.PlatformFeeTaxAmount = val
}

// SetPlatformWebRegistrationFeeAmount sets the value of PlatformWebRegistrationFeeAmount.
func (s *AccountRetrievingResponse) SetPlatformWebRegistrationFeeAmount(val OptNilInt) {
	s.PlatformWebRegistrationFeeAmount = val
}

// SetCreated sets the value of Created.
func (s *AccountRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AccountRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetDepositDestination sets the value of DepositDestination.
func (s *AccountRetrievingResponse) SetDepositDestination(val OptAccountRetrievingResponseDepositDestination) {
	s.DepositDestination = val
}

func (*AccountRetrievingResponse) retrieveAccountRes() {}

type AccountRetrievingResponseDepositDestination struct {
	// 法人口座か
	// - `true`: 法人口座
	// - `false`: 個人口座.
	Corporate OptBool `json:"corporate"`
	// 入金先法人名.
	RecipientCorporateName OptString `json:"recipient_corporate_name"`
	// 入金先代表者氏名 姓.
	RecipientRepresntativeLastName OptString `json:"recipient_represntative_last_name"`
	// 入金先代表者氏名 名.
	RecipientRepresntativeFirstName OptString `json:"recipient_represntative_first_name"`
	// 入金先 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 入金先 金融機関名.
	BankName OptString `json:"bank_name"`
	// 入金先 金融機関名 カナ.
	BankNameKana OptString `json:"bank_name_kana"`
	// 入金先 支店コード.
	BranchCode OptString `json:"branch_code"`
	// 入金先 支店名.
	BranchName OptString `json:"branch_name"`
	// 入金先 支店名 カナ.
	BranchNameKana OptString `json:"branch_name_kana"`
	// 入金先 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind OptAccountRetrievingResponseDepositDestinationAccountKind `json:"account_kind"`
	// 入金先 口座番号.
	AccountNumber OptString `json:"account_number"`
	// 入金先 口座名義.
	AccountName OptString `json:"account_name"`
}

// GetCorporate returns the value of Corporate.
func (s *AccountRetrievingResponseDepositDestination) GetCorporate() OptBool {
	return s.Corporate
}

// GetRecipientCorporateName returns the value of RecipientCorporateName.
func (s *AccountRetrievingResponseDepositDestination) GetRecipientCorporateName() OptString {
	return s.RecipientCorporateName
}

// GetRecipientRepresntativeLastName returns the value of RecipientRepresntativeLastName.
func (s *AccountRetrievingResponseDepositDestination) GetRecipientRepresntativeLastName() OptString {
	return s.RecipientRepresntativeLastName
}

// GetRecipientRepresntativeFirstName returns the value of RecipientRepresntativeFirstName.
func (s *AccountRetrievingResponseDepositDestination) GetRecipientRepresntativeFirstName() OptString {
	return s.RecipientRepresntativeFirstName
}

// GetBankCode returns the value of BankCode.
func (s *AccountRetrievingResponseDepositDestination) GetBankCode() OptString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *AccountRetrievingResponseDepositDestination) GetBankName() OptString {
	return s.BankName
}

// GetBankNameKana returns the value of BankNameKana.
func (s *AccountRetrievingResponseDepositDestination) GetBankNameKana() OptString {
	return s.BankNameKana
}

// GetBranchCode returns the value of BranchCode.
func (s *AccountRetrievingResponseDepositDestination) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *AccountRetrievingResponseDepositDestination) GetBranchName() OptString {
	return s.BranchName
}

// GetBranchNameKana returns the value of BranchNameKana.
func (s *AccountRetrievingResponseDepositDestination) GetBranchNameKana() OptString {
	return s.BranchNameKana
}

// GetAccountKind returns the value of AccountKind.
func (s *AccountRetrievingResponseDepositDestination) GetAccountKind() OptAccountRetrievingResponseDepositDestinationAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *AccountRetrievingResponseDepositDestination) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *AccountRetrievingResponseDepositDestination) GetAccountName() OptString {
	return s.AccountName
}

// SetCorporate sets the value of Corporate.
func (s *AccountRetrievingResponseDepositDestination) SetCorporate(val OptBool) {
	s.Corporate = val
}

// SetRecipientCorporateName sets the value of RecipientCorporateName.
func (s *AccountRetrievingResponseDepositDestination) SetRecipientCorporateName(val OptString) {
	s.RecipientCorporateName = val
}

// SetRecipientRepresntativeLastName sets the value of RecipientRepresntativeLastName.
func (s *AccountRetrievingResponseDepositDestination) SetRecipientRepresntativeLastName(val OptString) {
	s.RecipientRepresntativeLastName = val
}

// SetRecipientRepresntativeFirstName sets the value of RecipientRepresntativeFirstName.
func (s *AccountRetrievingResponseDepositDestination) SetRecipientRepresntativeFirstName(val OptString) {
	s.RecipientRepresntativeFirstName = val
}

// SetBankCode sets the value of BankCode.
func (s *AccountRetrievingResponseDepositDestination) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *AccountRetrievingResponseDepositDestination) SetBankName(val OptString) {
	s.BankName = val
}

// SetBankNameKana sets the value of BankNameKana.
func (s *AccountRetrievingResponseDepositDestination) SetBankNameKana(val OptString) {
	s.BankNameKana = val
}

// SetBranchCode sets the value of BranchCode.
func (s *AccountRetrievingResponseDepositDestination) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *AccountRetrievingResponseDepositDestination) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetBranchNameKana sets the value of BranchNameKana.
func (s *AccountRetrievingResponseDepositDestination) SetBranchNameKana(val OptString) {
	s.BranchNameKana = val
}

// SetAccountKind sets the value of AccountKind.
func (s *AccountRetrievingResponseDepositDestination) SetAccountKind(val OptAccountRetrievingResponseDepositDestinationAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *AccountRetrievingResponseDepositDestination) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *AccountRetrievingResponseDepositDestination) SetAccountName(val OptString) {
	s.AccountName = val
}

// 入金先 口座種別
// - `0`: 普通
// - `1`: 当座.
type AccountRetrievingResponseDepositDestinationAccountKind string

const (
	AccountRetrievingResponseDepositDestinationAccountKind0 AccountRetrievingResponseDepositDestinationAccountKind = "0"
	AccountRetrievingResponseDepositDestinationAccountKind1 AccountRetrievingResponseDepositDestinationAccountKind = "1"
)

// AllValues returns all AccountRetrievingResponseDepositDestinationAccountKind values.
func (AccountRetrievingResponseDepositDestinationAccountKind) AllValues() []AccountRetrievingResponseDepositDestinationAccountKind {
	return []AccountRetrievingResponseDepositDestinationAccountKind{
		AccountRetrievingResponseDepositDestinationAccountKind0,
		AccountRetrievingResponseDepositDestinationAccountKind1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AccountRetrievingResponseDepositDestinationAccountKind) MarshalText() ([]byte, error) {
	switch s {
	case AccountRetrievingResponseDepositDestinationAccountKind0:
		return []byte(s), nil
	case AccountRetrievingResponseDepositDestinationAccountKind1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AccountRetrievingResponseDepositDestinationAccountKind) UnmarshalText(data []byte) error {
	switch AccountRetrievingResponseDepositDestinationAccountKind(data) {
	case AccountRetrievingResponseDepositDestinationAccountKind0:
		*s = AccountRetrievingResponseDepositDestinationAccountKind0
		return nil
	case AccountRetrievingResponseDepositDestinationAccountKind1:
		*s = AccountRetrievingResponseDepositDestinationAccountKind1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type AuthorizePaymentOK struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptAuthorizePaymentOKPayType `json:"pay_type"`
	JobCode OptAuthorizePaymentOKJobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status OptAuthorizePaymentOKStatus `json:"status"`
	// カードID\
	// この決済に使用されたカード情報のIDです。.
	CardID     OptNilString                     `json:"card_id"`
	Brand      OptNilAuthorizePaymentOKBrand    `json:"brand"`
	CardNo     OptNilString                     `json:"card_no"`
	Expire     OptNilString                     `json:"expire"`
	HolderName OptNilString                     `json:"holder_name"`
	CardNoHash OptNilString                     `json:"card_no_hash"`
	Method     OptAuthorizePaymentOKMethod      `json:"method"`
	PayTimes   OptNilAuthorizePaymentOKPayTimes `json:"pay_times"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString                       `json:"subscription_id"`
	TdsType        OptNilAuthorizePaymentOKTdsType    `json:"tds_type"`
	Tds2Type       OptNilAuthorizePaymentOKTds2Type   `json:"tds2_type"`
	Tds2RetURL     OptNilString                       `json:"tds2_ret_url"`
	Tds2Status     OptNilAuthorizePaymentOKTds2Status `json:"tds2_status"`
	MerchantName   OptNilString                       `json:"merchant_name"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetShopID returns the value of ShopID.
func (s *AuthorizePaymentOK) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *AuthorizePaymentOK) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *AuthorizePaymentOK) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *AuthorizePaymentOK) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *AuthorizePaymentOK) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *AuthorizePaymentOK) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *AuthorizePaymentOK) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *AuthorizePaymentOK) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *AuthorizePaymentOK) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *AuthorizePaymentOK) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *AuthorizePaymentOK) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *AuthorizePaymentOK) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *AuthorizePaymentOK) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *AuthorizePaymentOK) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *AuthorizePaymentOK) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *AuthorizePaymentOK) GetPayType() OptAuthorizePaymentOKPayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *AuthorizePaymentOK) GetJobCode() OptAuthorizePaymentOKJobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *AuthorizePaymentOK) GetStatus() OptAuthorizePaymentOKStatus {
	return s.Status
}

// GetCardID returns the value of CardID.
func (s *AuthorizePaymentOK) GetCardID() OptNilString {
	return s.CardID
}

// GetBrand returns the value of Brand.
func (s *AuthorizePaymentOK) GetBrand() OptNilAuthorizePaymentOKBrand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *AuthorizePaymentOK) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *AuthorizePaymentOK) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *AuthorizePaymentOK) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *AuthorizePaymentOK) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *AuthorizePaymentOK) GetMethod() OptAuthorizePaymentOKMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *AuthorizePaymentOK) GetPayTimes() OptNilAuthorizePaymentOKPayTimes {
	return s.PayTimes
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *AuthorizePaymentOK) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTdsType returns the value of TdsType.
func (s *AuthorizePaymentOK) GetTdsType() OptNilAuthorizePaymentOKTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *AuthorizePaymentOK) GetTds2Type() OptNilAuthorizePaymentOKTds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *AuthorizePaymentOK) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *AuthorizePaymentOK) GetTds2Status() OptNilAuthorizePaymentOKTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *AuthorizePaymentOK) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetForward returns the value of Forward.
func (s *AuthorizePaymentOK) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *AuthorizePaymentOK) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *AuthorizePaymentOK) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *AuthorizePaymentOK) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *AuthorizePaymentOK) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *AuthorizePaymentOK) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetShopID sets the value of ShopID.
func (s *AuthorizePaymentOK) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *AuthorizePaymentOK) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *AuthorizePaymentOK) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *AuthorizePaymentOK) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *AuthorizePaymentOK) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *AuthorizePaymentOK) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *AuthorizePaymentOK) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *AuthorizePaymentOK) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *AuthorizePaymentOK) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *AuthorizePaymentOK) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *AuthorizePaymentOK) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *AuthorizePaymentOK) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *AuthorizePaymentOK) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *AuthorizePaymentOK) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *AuthorizePaymentOK) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *AuthorizePaymentOK) SetPayType(val OptAuthorizePaymentOKPayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *AuthorizePaymentOK) SetJobCode(val OptAuthorizePaymentOKJobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *AuthorizePaymentOK) SetStatus(val OptAuthorizePaymentOKStatus) {
	s.Status = val
}

// SetCardID sets the value of CardID.
func (s *AuthorizePaymentOK) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetBrand sets the value of Brand.
func (s *AuthorizePaymentOK) SetBrand(val OptNilAuthorizePaymentOKBrand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *AuthorizePaymentOK) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *AuthorizePaymentOK) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *AuthorizePaymentOK) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *AuthorizePaymentOK) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *AuthorizePaymentOK) SetMethod(val OptAuthorizePaymentOKMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *AuthorizePaymentOK) SetPayTimes(val OptNilAuthorizePaymentOKPayTimes) {
	s.PayTimes = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *AuthorizePaymentOK) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTdsType sets the value of TdsType.
func (s *AuthorizePaymentOK) SetTdsType(val OptNilAuthorizePaymentOKTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *AuthorizePaymentOK) SetTds2Type(val OptNilAuthorizePaymentOKTds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *AuthorizePaymentOK) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *AuthorizePaymentOK) SetTds2Status(val OptNilAuthorizePaymentOKTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *AuthorizePaymentOK) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetForward sets the value of Forward.
func (s *AuthorizePaymentOK) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *AuthorizePaymentOK) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *AuthorizePaymentOK) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *AuthorizePaymentOK) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *AuthorizePaymentOK) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *AuthorizePaymentOK) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

func (*AuthorizePaymentOK) authorizePaymentRes() {}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type AuthorizePaymentOKBrand string

const (
	AuthorizePaymentOKBrandVISA     AuthorizePaymentOKBrand = "VISA"
	AuthorizePaymentOKBrandMASTER   AuthorizePaymentOKBrand = "MASTER"
	AuthorizePaymentOKBrandJCB      AuthorizePaymentOKBrand = "JCB"
	AuthorizePaymentOKBrandAMEX     AuthorizePaymentOKBrand = "AMEX"
	AuthorizePaymentOKBrandDINERS   AuthorizePaymentOKBrand = "DINERS"
	AuthorizePaymentOKBrandDISCOVER AuthorizePaymentOKBrand = "DISCOVER"
	AuthorizePaymentOKBrandEmpty    AuthorizePaymentOKBrand = ""
)

// AllValues returns all AuthorizePaymentOKBrand values.
func (AuthorizePaymentOKBrand) AllValues() []AuthorizePaymentOKBrand {
	return []AuthorizePaymentOKBrand{
		AuthorizePaymentOKBrandVISA,
		AuthorizePaymentOKBrandMASTER,
		AuthorizePaymentOKBrandJCB,
		AuthorizePaymentOKBrandAMEX,
		AuthorizePaymentOKBrandDINERS,
		AuthorizePaymentOKBrandDISCOVER,
		AuthorizePaymentOKBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKBrand) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKBrandVISA:
		return []byte(s), nil
	case AuthorizePaymentOKBrandMASTER:
		return []byte(s), nil
	case AuthorizePaymentOKBrandJCB:
		return []byte(s), nil
	case AuthorizePaymentOKBrandAMEX:
		return []byte(s), nil
	case AuthorizePaymentOKBrandDINERS:
		return []byte(s), nil
	case AuthorizePaymentOKBrandDISCOVER:
		return []byte(s), nil
	case AuthorizePaymentOKBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKBrand) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKBrand(data) {
	case AuthorizePaymentOKBrandVISA:
		*s = AuthorizePaymentOKBrandVISA
		return nil
	case AuthorizePaymentOKBrandMASTER:
		*s = AuthorizePaymentOKBrandMASTER
		return nil
	case AuthorizePaymentOKBrandJCB:
		*s = AuthorizePaymentOKBrandJCB
		return nil
	case AuthorizePaymentOKBrandAMEX:
		*s = AuthorizePaymentOKBrandAMEX
		return nil
	case AuthorizePaymentOKBrandDINERS:
		*s = AuthorizePaymentOKBrandDINERS
		return nil
	case AuthorizePaymentOKBrandDISCOVER:
		*s = AuthorizePaymentOKBrandDISCOVER
		return nil
	case AuthorizePaymentOKBrandEmpty:
		*s = AuthorizePaymentOKBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type AuthorizePaymentOKJobCode string

const (
	AuthorizePaymentOKJobCodeCHECK   AuthorizePaymentOKJobCode = "CHECK"
	AuthorizePaymentOKJobCodeAUTH    AuthorizePaymentOKJobCode = "AUTH"
	AuthorizePaymentOKJobCodeCAPTURE AuthorizePaymentOKJobCode = "CAPTURE"
)

// AllValues returns all AuthorizePaymentOKJobCode values.
func (AuthorizePaymentOKJobCode) AllValues() []AuthorizePaymentOKJobCode {
	return []AuthorizePaymentOKJobCode{
		AuthorizePaymentOKJobCodeCHECK,
		AuthorizePaymentOKJobCodeAUTH,
		AuthorizePaymentOKJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKJobCode) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKJobCodeCHECK:
		return []byte(s), nil
	case AuthorizePaymentOKJobCodeAUTH:
		return []byte(s), nil
	case AuthorizePaymentOKJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKJobCode) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKJobCode(data) {
	case AuthorizePaymentOKJobCodeCHECK:
		*s = AuthorizePaymentOKJobCodeCHECK
		return nil
	case AuthorizePaymentOKJobCodeAUTH:
		*s = AuthorizePaymentOKJobCodeAUTH
		return nil
	case AuthorizePaymentOKJobCodeCAPTURE:
		*s = AuthorizePaymentOKJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type AuthorizePaymentOKMethod string

const (
	AuthorizePaymentOKMethod1 AuthorizePaymentOKMethod = "1"
	AuthorizePaymentOKMethod2 AuthorizePaymentOKMethod = "2"
	AuthorizePaymentOKMethod5 AuthorizePaymentOKMethod = "5"
)

// AllValues returns all AuthorizePaymentOKMethod values.
func (AuthorizePaymentOKMethod) AllValues() []AuthorizePaymentOKMethod {
	return []AuthorizePaymentOKMethod{
		AuthorizePaymentOKMethod1,
		AuthorizePaymentOKMethod2,
		AuthorizePaymentOKMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKMethod) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKMethod1:
		return []byte(s), nil
	case AuthorizePaymentOKMethod2:
		return []byte(s), nil
	case AuthorizePaymentOKMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKMethod) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKMethod(data) {
	case AuthorizePaymentOKMethod1:
		*s = AuthorizePaymentOKMethod1
		return nil
	case AuthorizePaymentOKMethod2:
		*s = AuthorizePaymentOKMethod2
		return nil
	case AuthorizePaymentOKMethod5:
		*s = AuthorizePaymentOKMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type AuthorizePaymentOKPayTimes string

const (
	AuthorizePaymentOKPayTimes3  AuthorizePaymentOKPayTimes = "3"
	AuthorizePaymentOKPayTimes5  AuthorizePaymentOKPayTimes = "5"
	AuthorizePaymentOKPayTimes6  AuthorizePaymentOKPayTimes = "6"
	AuthorizePaymentOKPayTimes10 AuthorizePaymentOKPayTimes = "10"
	AuthorizePaymentOKPayTimes12 AuthorizePaymentOKPayTimes = "12"
	AuthorizePaymentOKPayTimes15 AuthorizePaymentOKPayTimes = "15"
	AuthorizePaymentOKPayTimes18 AuthorizePaymentOKPayTimes = "18"
	AuthorizePaymentOKPayTimes20 AuthorizePaymentOKPayTimes = "20"
	AuthorizePaymentOKPayTimes24 AuthorizePaymentOKPayTimes = "24"
)

// AllValues returns all AuthorizePaymentOKPayTimes values.
func (AuthorizePaymentOKPayTimes) AllValues() []AuthorizePaymentOKPayTimes {
	return []AuthorizePaymentOKPayTimes{
		AuthorizePaymentOKPayTimes3,
		AuthorizePaymentOKPayTimes5,
		AuthorizePaymentOKPayTimes6,
		AuthorizePaymentOKPayTimes10,
		AuthorizePaymentOKPayTimes12,
		AuthorizePaymentOKPayTimes15,
		AuthorizePaymentOKPayTimes18,
		AuthorizePaymentOKPayTimes20,
		AuthorizePaymentOKPayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKPayTimes) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKPayTimes3:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes5:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes6:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes10:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes12:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes15:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes18:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes20:
		return []byte(s), nil
	case AuthorizePaymentOKPayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKPayTimes) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKPayTimes(data) {
	case AuthorizePaymentOKPayTimes3:
		*s = AuthorizePaymentOKPayTimes3
		return nil
	case AuthorizePaymentOKPayTimes5:
		*s = AuthorizePaymentOKPayTimes5
		return nil
	case AuthorizePaymentOKPayTimes6:
		*s = AuthorizePaymentOKPayTimes6
		return nil
	case AuthorizePaymentOKPayTimes10:
		*s = AuthorizePaymentOKPayTimes10
		return nil
	case AuthorizePaymentOKPayTimes12:
		*s = AuthorizePaymentOKPayTimes12
		return nil
	case AuthorizePaymentOKPayTimes15:
		*s = AuthorizePaymentOKPayTimes15
		return nil
	case AuthorizePaymentOKPayTimes18:
		*s = AuthorizePaymentOKPayTimes18
		return nil
	case AuthorizePaymentOKPayTimes20:
		*s = AuthorizePaymentOKPayTimes20
		return nil
	case AuthorizePaymentOKPayTimes24:
		*s = AuthorizePaymentOKPayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type AuthorizePaymentOKPayType string

const (
	AuthorizePaymentOKPayTypeCard           AuthorizePaymentOKPayType = "Card"
	AuthorizePaymentOKPayTypeKonbini        AuthorizePaymentOKPayType = "Konbini"
	AuthorizePaymentOKPayTypePaypay         AuthorizePaymentOKPayType = "Paypay"
	AuthorizePaymentOKPayTypeApplepay       AuthorizePaymentOKPayType = "Applepay"
	AuthorizePaymentOKPayTypeDirectdebit    AuthorizePaymentOKPayType = "Directdebit"
	AuthorizePaymentOKPayTypeVirtualaccount AuthorizePaymentOKPayType = "Virtualaccount"
)

// AllValues returns all AuthorizePaymentOKPayType values.
func (AuthorizePaymentOKPayType) AllValues() []AuthorizePaymentOKPayType {
	return []AuthorizePaymentOKPayType{
		AuthorizePaymentOKPayTypeCard,
		AuthorizePaymentOKPayTypeKonbini,
		AuthorizePaymentOKPayTypePaypay,
		AuthorizePaymentOKPayTypeApplepay,
		AuthorizePaymentOKPayTypeDirectdebit,
		AuthorizePaymentOKPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKPayType) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKPayTypeCard:
		return []byte(s), nil
	case AuthorizePaymentOKPayTypeKonbini:
		return []byte(s), nil
	case AuthorizePaymentOKPayTypePaypay:
		return []byte(s), nil
	case AuthorizePaymentOKPayTypeApplepay:
		return []byte(s), nil
	case AuthorizePaymentOKPayTypeDirectdebit:
		return []byte(s), nil
	case AuthorizePaymentOKPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKPayType) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKPayType(data) {
	case AuthorizePaymentOKPayTypeCard:
		*s = AuthorizePaymentOKPayTypeCard
		return nil
	case AuthorizePaymentOKPayTypeKonbini:
		*s = AuthorizePaymentOKPayTypeKonbini
		return nil
	case AuthorizePaymentOKPayTypePaypay:
		*s = AuthorizePaymentOKPayTypePaypay
		return nil
	case AuthorizePaymentOKPayTypeApplepay:
		*s = AuthorizePaymentOKPayTypeApplepay
		return nil
	case AuthorizePaymentOKPayTypeDirectdebit:
		*s = AuthorizePaymentOKPayTypeDirectdebit
		return nil
	case AuthorizePaymentOKPayTypeVirtualaccount:
		*s = AuthorizePaymentOKPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type AuthorizePaymentOKStatus string

const (
	AuthorizePaymentOKStatusUNPROCESSED             AuthorizePaymentOKStatus = "UNPROCESSED"
	AuthorizePaymentOKStatusCHECKED                 AuthorizePaymentOKStatus = "CHECKED"
	AuthorizePaymentOKStatusAUTHORIZED              AuthorizePaymentOKStatus = "AUTHORIZED"
	AuthorizePaymentOKStatusAWAITINGCUSTOMERPAYMENT AuthorizePaymentOKStatus = "AWAITING_CUSTOMER_PAYMENT"
	AuthorizePaymentOKStatusAWAITINGPAYMENTAPPROVAL AuthorizePaymentOKStatus = "AWAITING_PAYMENT_APPROVAL"
	AuthorizePaymentOKStatusCAPTURED                AuthorizePaymentOKStatus = "CAPTURED"
	AuthorizePaymentOKStatusCANCELED                AuthorizePaymentOKStatus = "CANCELED"
	AuthorizePaymentOKStatusEXPIRED                 AuthorizePaymentOKStatus = "EXPIRED"
	AuthorizePaymentOKStatusAUTHENTICATED           AuthorizePaymentOKStatus = "AUTHENTICATED"
	AuthorizePaymentOKStatusFAILED                  AuthorizePaymentOKStatus = "FAILED"
)

// AllValues returns all AuthorizePaymentOKStatus values.
func (AuthorizePaymentOKStatus) AllValues() []AuthorizePaymentOKStatus {
	return []AuthorizePaymentOKStatus{
		AuthorizePaymentOKStatusUNPROCESSED,
		AuthorizePaymentOKStatusCHECKED,
		AuthorizePaymentOKStatusAUTHORIZED,
		AuthorizePaymentOKStatusAWAITINGCUSTOMERPAYMENT,
		AuthorizePaymentOKStatusAWAITINGPAYMENTAPPROVAL,
		AuthorizePaymentOKStatusCAPTURED,
		AuthorizePaymentOKStatusCANCELED,
		AuthorizePaymentOKStatusEXPIRED,
		AuthorizePaymentOKStatusAUTHENTICATED,
		AuthorizePaymentOKStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKStatusUNPROCESSED:
		return []byte(s), nil
	case AuthorizePaymentOKStatusCHECKED:
		return []byte(s), nil
	case AuthorizePaymentOKStatusAUTHORIZED:
		return []byte(s), nil
	case AuthorizePaymentOKStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case AuthorizePaymentOKStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case AuthorizePaymentOKStatusCAPTURED:
		return []byte(s), nil
	case AuthorizePaymentOKStatusCANCELED:
		return []byte(s), nil
	case AuthorizePaymentOKStatusEXPIRED:
		return []byte(s), nil
	case AuthorizePaymentOKStatusAUTHENTICATED:
		return []byte(s), nil
	case AuthorizePaymentOKStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKStatus) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKStatus(data) {
	case AuthorizePaymentOKStatusUNPROCESSED:
		*s = AuthorizePaymentOKStatusUNPROCESSED
		return nil
	case AuthorizePaymentOKStatusCHECKED:
		*s = AuthorizePaymentOKStatusCHECKED
		return nil
	case AuthorizePaymentOKStatusAUTHORIZED:
		*s = AuthorizePaymentOKStatusAUTHORIZED
		return nil
	case AuthorizePaymentOKStatusAWAITINGCUSTOMERPAYMENT:
		*s = AuthorizePaymentOKStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case AuthorizePaymentOKStatusAWAITINGPAYMENTAPPROVAL:
		*s = AuthorizePaymentOKStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case AuthorizePaymentOKStatusCAPTURED:
		*s = AuthorizePaymentOKStatusCAPTURED
		return nil
	case AuthorizePaymentOKStatusCANCELED:
		*s = AuthorizePaymentOKStatusCANCELED
		return nil
	case AuthorizePaymentOKStatusEXPIRED:
		*s = AuthorizePaymentOKStatusEXPIRED
		return nil
	case AuthorizePaymentOKStatusAUTHENTICATED:
		*s = AuthorizePaymentOKStatusAUTHENTICATED
		return nil
	case AuthorizePaymentOKStatusFAILED:
		*s = AuthorizePaymentOKStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0認証処理 ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: チャレンジ認証の実施が必要
// - `AUTHENTICATED`: 3Dセキュア認証処理が完了.
type AuthorizePaymentOKTds2Status string

const (
	AuthorizePaymentOKTds2StatusAUTHENTICATING AuthorizePaymentOKTds2Status = "AUTHENTICATING"
	AuthorizePaymentOKTds2StatusCHALLENGE      AuthorizePaymentOKTds2Status = "CHALLENGE"
	AuthorizePaymentOKTds2StatusAUTHENTICATED  AuthorizePaymentOKTds2Status = "AUTHENTICATED"
)

// AllValues returns all AuthorizePaymentOKTds2Status values.
func (AuthorizePaymentOKTds2Status) AllValues() []AuthorizePaymentOKTds2Status {
	return []AuthorizePaymentOKTds2Status{
		AuthorizePaymentOKTds2StatusAUTHENTICATING,
		AuthorizePaymentOKTds2StatusCHALLENGE,
		AuthorizePaymentOKTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case AuthorizePaymentOKTds2StatusCHALLENGE:
		return []byte(s), nil
	case AuthorizePaymentOKTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKTds2Status) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKTds2Status(data) {
	case AuthorizePaymentOKTds2StatusAUTHENTICATING:
		*s = AuthorizePaymentOKTds2StatusAUTHENTICATING
		return nil
	case AuthorizePaymentOKTds2StatusCHALLENGE:
		*s = AuthorizePaymentOKTds2StatusCHALLENGE
		return nil
	case AuthorizePaymentOKTds2StatusAUTHENTICATED:
		*s = AuthorizePaymentOKTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type AuthorizePaymentOKTds2Type string

const (
	AuthorizePaymentOKTds2Type2 AuthorizePaymentOKTds2Type = "2"
	AuthorizePaymentOKTds2Type3 AuthorizePaymentOKTds2Type = "3"
)

// AllValues returns all AuthorizePaymentOKTds2Type values.
func (AuthorizePaymentOKTds2Type) AllValues() []AuthorizePaymentOKTds2Type {
	return []AuthorizePaymentOKTds2Type{
		AuthorizePaymentOKTds2Type2,
		AuthorizePaymentOKTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKTds2Type2:
		return []byte(s), nil
	case AuthorizePaymentOKTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKTds2Type) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKTds2Type(data) {
	case AuthorizePaymentOKTds2Type2:
		*s = AuthorizePaymentOKTds2Type2
		return nil
	case AuthorizePaymentOKTds2Type3:
		*s = AuthorizePaymentOKTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type AuthorizePaymentOKTdsType string

const (
	AuthorizePaymentOKTdsType0 AuthorizePaymentOKTdsType = "0"
	AuthorizePaymentOKTdsType2 AuthorizePaymentOKTdsType = "2"
)

// AllValues returns all AuthorizePaymentOKTdsType values.
func (AuthorizePaymentOKTdsType) AllValues() []AuthorizePaymentOKTdsType {
	return []AuthorizePaymentOKTdsType{
		AuthorizePaymentOKTdsType0,
		AuthorizePaymentOKTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentOKTdsType) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentOKTdsType0:
		return []byte(s), nil
	case AuthorizePaymentOKTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentOKTdsType) UnmarshalText(data []byte) error {
	switch AuthorizePaymentOKTdsType(data) {
	case AuthorizePaymentOKTdsType0:
		*s = AuthorizePaymentOKTdsType0
		return nil
	case AuthorizePaymentOKTdsType2:
		*s = AuthorizePaymentOKTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type AuthorizePaymentReq struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType  AuthorizePaymentReqPayType `json:"pay_type"`
	AccessID string                     `json:"access_id"`
	// 支払方法
	// - `1`: 一括払い
	// - `2`: 分割払い
	// - `5`: リボ払い.
	Method AuthorizePaymentReqMethod `json:"method"`
	// （分割払いの場合）支払回数\
	// `CANCELED`ステータスの決済に対して指定ができます。\
	// \
	// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
	PayTimes OptNilAuthorizePaymentReqPayTimes `json:"pay_times"`
}

// GetPayType returns the value of PayType.
func (s *AuthorizePaymentReq) GetPayType() AuthorizePaymentReqPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *AuthorizePaymentReq) GetAccessID() string {
	return s.AccessID
}

// GetMethod returns the value of Method.
func (s *AuthorizePaymentReq) GetMethod() AuthorizePaymentReqMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *AuthorizePaymentReq) GetPayTimes() OptNilAuthorizePaymentReqPayTimes {
	return s.PayTimes
}

// SetPayType sets the value of PayType.
func (s *AuthorizePaymentReq) SetPayType(val AuthorizePaymentReqPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *AuthorizePaymentReq) SetAccessID(val string) {
	s.AccessID = val
}

// SetMethod sets the value of Method.
func (s *AuthorizePaymentReq) SetMethod(val AuthorizePaymentReqMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *AuthorizePaymentReq) SetPayTimes(val OptNilAuthorizePaymentReqPayTimes) {
	s.PayTimes = val
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type AuthorizePaymentReqMethod string

const (
	AuthorizePaymentReqMethod1 AuthorizePaymentReqMethod = "1"
	AuthorizePaymentReqMethod2 AuthorizePaymentReqMethod = "2"
	AuthorizePaymentReqMethod5 AuthorizePaymentReqMethod = "5"
)

// AllValues returns all AuthorizePaymentReqMethod values.
func (AuthorizePaymentReqMethod) AllValues() []AuthorizePaymentReqMethod {
	return []AuthorizePaymentReqMethod{
		AuthorizePaymentReqMethod1,
		AuthorizePaymentReqMethod2,
		AuthorizePaymentReqMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentReqMethod) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentReqMethod1:
		return []byte(s), nil
	case AuthorizePaymentReqMethod2:
		return []byte(s), nil
	case AuthorizePaymentReqMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentReqMethod) UnmarshalText(data []byte) error {
	switch AuthorizePaymentReqMethod(data) {
	case AuthorizePaymentReqMethod1:
		*s = AuthorizePaymentReqMethod1
		return nil
	case AuthorizePaymentReqMethod2:
		*s = AuthorizePaymentReqMethod2
		return nil
	case AuthorizePaymentReqMethod5:
		*s = AuthorizePaymentReqMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type AuthorizePaymentReqPayTimes string

const (
	AuthorizePaymentReqPayTimes3  AuthorizePaymentReqPayTimes = "3"
	AuthorizePaymentReqPayTimes5  AuthorizePaymentReqPayTimes = "5"
	AuthorizePaymentReqPayTimes6  AuthorizePaymentReqPayTimes = "6"
	AuthorizePaymentReqPayTimes10 AuthorizePaymentReqPayTimes = "10"
	AuthorizePaymentReqPayTimes12 AuthorizePaymentReqPayTimes = "12"
	AuthorizePaymentReqPayTimes15 AuthorizePaymentReqPayTimes = "15"
	AuthorizePaymentReqPayTimes18 AuthorizePaymentReqPayTimes = "18"
	AuthorizePaymentReqPayTimes20 AuthorizePaymentReqPayTimes = "20"
	AuthorizePaymentReqPayTimes24 AuthorizePaymentReqPayTimes = "24"
)

// AllValues returns all AuthorizePaymentReqPayTimes values.
func (AuthorizePaymentReqPayTimes) AllValues() []AuthorizePaymentReqPayTimes {
	return []AuthorizePaymentReqPayTimes{
		AuthorizePaymentReqPayTimes3,
		AuthorizePaymentReqPayTimes5,
		AuthorizePaymentReqPayTimes6,
		AuthorizePaymentReqPayTimes10,
		AuthorizePaymentReqPayTimes12,
		AuthorizePaymentReqPayTimes15,
		AuthorizePaymentReqPayTimes18,
		AuthorizePaymentReqPayTimes20,
		AuthorizePaymentReqPayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentReqPayTimes) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentReqPayTimes3:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes5:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes6:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes10:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes12:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes15:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes18:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes20:
		return []byte(s), nil
	case AuthorizePaymentReqPayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentReqPayTimes) UnmarshalText(data []byte) error {
	switch AuthorizePaymentReqPayTimes(data) {
	case AuthorizePaymentReqPayTimes3:
		*s = AuthorizePaymentReqPayTimes3
		return nil
	case AuthorizePaymentReqPayTimes5:
		*s = AuthorizePaymentReqPayTimes5
		return nil
	case AuthorizePaymentReqPayTimes6:
		*s = AuthorizePaymentReqPayTimes6
		return nil
	case AuthorizePaymentReqPayTimes10:
		*s = AuthorizePaymentReqPayTimes10
		return nil
	case AuthorizePaymentReqPayTimes12:
		*s = AuthorizePaymentReqPayTimes12
		return nil
	case AuthorizePaymentReqPayTimes15:
		*s = AuthorizePaymentReqPayTimes15
		return nil
	case AuthorizePaymentReqPayTimes18:
		*s = AuthorizePaymentReqPayTimes18
		return nil
	case AuthorizePaymentReqPayTimes20:
		*s = AuthorizePaymentReqPayTimes20
		return nil
	case AuthorizePaymentReqPayTimes24:
		*s = AuthorizePaymentReqPayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type AuthorizePaymentReqPayType string

const (
	AuthorizePaymentReqPayTypeCard           AuthorizePaymentReqPayType = "Card"
	AuthorizePaymentReqPayTypeKonbini        AuthorizePaymentReqPayType = "Konbini"
	AuthorizePaymentReqPayTypePaypay         AuthorizePaymentReqPayType = "Paypay"
	AuthorizePaymentReqPayTypeApplepay       AuthorizePaymentReqPayType = "Applepay"
	AuthorizePaymentReqPayTypeDirectdebit    AuthorizePaymentReqPayType = "Directdebit"
	AuthorizePaymentReqPayTypeVirtualaccount AuthorizePaymentReqPayType = "Virtualaccount"
)

// AllValues returns all AuthorizePaymentReqPayType values.
func (AuthorizePaymentReqPayType) AllValues() []AuthorizePaymentReqPayType {
	return []AuthorizePaymentReqPayType{
		AuthorizePaymentReqPayTypeCard,
		AuthorizePaymentReqPayTypeKonbini,
		AuthorizePaymentReqPayTypePaypay,
		AuthorizePaymentReqPayTypeApplepay,
		AuthorizePaymentReqPayTypeDirectdebit,
		AuthorizePaymentReqPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuthorizePaymentReqPayType) MarshalText() ([]byte, error) {
	switch s {
	case AuthorizePaymentReqPayTypeCard:
		return []byte(s), nil
	case AuthorizePaymentReqPayTypeKonbini:
		return []byte(s), nil
	case AuthorizePaymentReqPayTypePaypay:
		return []byte(s), nil
	case AuthorizePaymentReqPayTypeApplepay:
		return []byte(s), nil
	case AuthorizePaymentReqPayTypeDirectdebit:
		return []byte(s), nil
	case AuthorizePaymentReqPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuthorizePaymentReqPayType) UnmarshalText(data []byte) error {
	switch AuthorizePaymentReqPayType(data) {
	case AuthorizePaymentReqPayTypeCard:
		*s = AuthorizePaymentReqPayTypeCard
		return nil
	case AuthorizePaymentReqPayTypeKonbini:
		*s = AuthorizePaymentReqPayTypeKonbini
		return nil
	case AuthorizePaymentReqPayTypePaypay:
		*s = AuthorizePaymentReqPayTypePaypay
		return nil
	case AuthorizePaymentReqPayTypeApplepay:
		*s = AuthorizePaymentReqPayTypeApplepay
		return nil
	case AuthorizePaymentReqPayTypeDirectdebit:
		*s = AuthorizePaymentReqPayTypeDirectdebit
		return nil
	case AuthorizePaymentReqPayTypeVirtualaccount:
		*s = AuthorizePaymentReqPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CapturePaymentOK represents sum type.
type CapturePaymentOK struct {
	Type              CapturePaymentOKType // switch on this field
	CapturePaymentOK0 CapturePaymentOK0
	CapturePaymentOK1 CapturePaymentOK1
	CapturePaymentOK2 CapturePaymentOK2
}

// CapturePaymentOKType is oneOf type of CapturePaymentOK.
type CapturePaymentOKType string

// Possible values for CapturePaymentOKType.
const (
	CapturePaymentOK0CapturePaymentOK CapturePaymentOKType = "CapturePaymentOK0"
	CapturePaymentOK1CapturePaymentOK CapturePaymentOKType = "CapturePaymentOK1"
	CapturePaymentOK2CapturePaymentOK CapturePaymentOKType = "CapturePaymentOK2"
)

// IsCapturePaymentOK0 reports whether CapturePaymentOK is CapturePaymentOK0.
func (s CapturePaymentOK) IsCapturePaymentOK0() bool {
	return s.Type == CapturePaymentOK0CapturePaymentOK
}

// IsCapturePaymentOK1 reports whether CapturePaymentOK is CapturePaymentOK1.
func (s CapturePaymentOK) IsCapturePaymentOK1() bool {
	return s.Type == CapturePaymentOK1CapturePaymentOK
}

// IsCapturePaymentOK2 reports whether CapturePaymentOK is CapturePaymentOK2.
func (s CapturePaymentOK) IsCapturePaymentOK2() bool {
	return s.Type == CapturePaymentOK2CapturePaymentOK
}

// SetCapturePaymentOK0 sets CapturePaymentOK to CapturePaymentOK0.
func (s *CapturePaymentOK) SetCapturePaymentOK0(v CapturePaymentOK0) {
	s.Type = CapturePaymentOK0CapturePaymentOK
	s.CapturePaymentOK0 = v
}

// GetCapturePaymentOK0 returns CapturePaymentOK0 and true boolean if CapturePaymentOK is CapturePaymentOK0.
func (s CapturePaymentOK) GetCapturePaymentOK0() (v CapturePaymentOK0, ok bool) {
	if !s.IsCapturePaymentOK0() {
		return v, false
	}
	return s.CapturePaymentOK0, true
}

// NewCapturePaymentOK0CapturePaymentOK returns new CapturePaymentOK from CapturePaymentOK0.
func NewCapturePaymentOK0CapturePaymentOK(v CapturePaymentOK0) CapturePaymentOK {
	var s CapturePaymentOK
	s.SetCapturePaymentOK0(v)
	return s
}

// SetCapturePaymentOK1 sets CapturePaymentOK to CapturePaymentOK1.
func (s *CapturePaymentOK) SetCapturePaymentOK1(v CapturePaymentOK1) {
	s.Type = CapturePaymentOK1CapturePaymentOK
	s.CapturePaymentOK1 = v
}

// GetCapturePaymentOK1 returns CapturePaymentOK1 and true boolean if CapturePaymentOK is CapturePaymentOK1.
func (s CapturePaymentOK) GetCapturePaymentOK1() (v CapturePaymentOK1, ok bool) {
	if !s.IsCapturePaymentOK1() {
		return v, false
	}
	return s.CapturePaymentOK1, true
}

// NewCapturePaymentOK1CapturePaymentOK returns new CapturePaymentOK from CapturePaymentOK1.
func NewCapturePaymentOK1CapturePaymentOK(v CapturePaymentOK1) CapturePaymentOK {
	var s CapturePaymentOK
	s.SetCapturePaymentOK1(v)
	return s
}

// SetCapturePaymentOK2 sets CapturePaymentOK to CapturePaymentOK2.
func (s *CapturePaymentOK) SetCapturePaymentOK2(v CapturePaymentOK2) {
	s.Type = CapturePaymentOK2CapturePaymentOK
	s.CapturePaymentOK2 = v
}

// GetCapturePaymentOK2 returns CapturePaymentOK2 and true boolean if CapturePaymentOK is CapturePaymentOK2.
func (s CapturePaymentOK) GetCapturePaymentOK2() (v CapturePaymentOK2, ok bool) {
	if !s.IsCapturePaymentOK2() {
		return v, false
	}
	return s.CapturePaymentOK2, true
}

// NewCapturePaymentOK2CapturePaymentOK returns new CapturePaymentOK from CapturePaymentOK2.
func NewCapturePaymentOK2CapturePaymentOK(v CapturePaymentOK2) CapturePaymentOK {
	var s CapturePaymentOK
	s.SetCapturePaymentOK2(v)
	return s
}

func (*CapturePaymentOK) capturePaymentRes() {}

// Merged schema.
type CapturePaymentOK0 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptCapturePaymentOK0PayType `json:"pay_type"`
	JobCode OptCapturePaymentOK0JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status OptCapturePaymentOK0Status `json:"status"`
	// カードID\
	// この決済に使用されたカード情報のIDです。.
	CardID     OptNilString                    `json:"card_id"`
	Brand      OptNilCapturePaymentOK0Brand    `json:"brand"`
	CardNo     OptNilString                    `json:"card_no"`
	Expire     OptNilString                    `json:"expire"`
	HolderName OptNilString                    `json:"holder_name"`
	CardNoHash OptNilString                    `json:"card_no_hash"`
	Method     OptCapturePaymentOK0Method      `json:"method"`
	PayTimes   OptNilCapturePaymentOK0PayTimes `json:"pay_times"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString                      `json:"subscription_id"`
	TdsType        OptNilCapturePaymentOK0TdsType    `json:"tds_type"`
	Tds2Type       OptNilCapturePaymentOK0Tds2Type   `json:"tds2_type"`
	Tds2RetURL     OptNilString                      `json:"tds2_ret_url"`
	Tds2Status     OptNilCapturePaymentOK0Tds2Status `json:"tds2_status"`
	MerchantName   OptNilString                      `json:"merchant_name"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetShopID returns the value of ShopID.
func (s *CapturePaymentOK0) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CapturePaymentOK0) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CapturePaymentOK0) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CapturePaymentOK0) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CapturePaymentOK0) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CapturePaymentOK0) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CapturePaymentOK0) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CapturePaymentOK0) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CapturePaymentOK0) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CapturePaymentOK0) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CapturePaymentOK0) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CapturePaymentOK0) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CapturePaymentOK0) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CapturePaymentOK0) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CapturePaymentOK0) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CapturePaymentOK0) GetPayType() OptCapturePaymentOK0PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CapturePaymentOK0) GetJobCode() OptCapturePaymentOK0JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *CapturePaymentOK0) GetStatus() OptCapturePaymentOK0Status {
	return s.Status
}

// GetCardID returns the value of CardID.
func (s *CapturePaymentOK0) GetCardID() OptNilString {
	return s.CardID
}

// GetBrand returns the value of Brand.
func (s *CapturePaymentOK0) GetBrand() OptNilCapturePaymentOK0Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *CapturePaymentOK0) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CapturePaymentOK0) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CapturePaymentOK0) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CapturePaymentOK0) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *CapturePaymentOK0) GetMethod() OptCapturePaymentOK0Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *CapturePaymentOK0) GetPayTimes() OptNilCapturePaymentOK0PayTimes {
	return s.PayTimes
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *CapturePaymentOK0) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTdsType returns the value of TdsType.
func (s *CapturePaymentOK0) GetTdsType() OptNilCapturePaymentOK0TdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *CapturePaymentOK0) GetTds2Type() OptNilCapturePaymentOK0Tds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *CapturePaymentOK0) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *CapturePaymentOK0) GetTds2Status() OptNilCapturePaymentOK0Tds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *CapturePaymentOK0) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetForward returns the value of Forward.
func (s *CapturePaymentOK0) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *CapturePaymentOK0) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *CapturePaymentOK0) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *CapturePaymentOK0) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *CapturePaymentOK0) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *CapturePaymentOK0) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetShopID sets the value of ShopID.
func (s *CapturePaymentOK0) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CapturePaymentOK0) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CapturePaymentOK0) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CapturePaymentOK0) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CapturePaymentOK0) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CapturePaymentOK0) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CapturePaymentOK0) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CapturePaymentOK0) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CapturePaymentOK0) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CapturePaymentOK0) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CapturePaymentOK0) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CapturePaymentOK0) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CapturePaymentOK0) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CapturePaymentOK0) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CapturePaymentOK0) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CapturePaymentOK0) SetPayType(val OptCapturePaymentOK0PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CapturePaymentOK0) SetJobCode(val OptCapturePaymentOK0JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *CapturePaymentOK0) SetStatus(val OptCapturePaymentOK0Status) {
	s.Status = val
}

// SetCardID sets the value of CardID.
func (s *CapturePaymentOK0) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetBrand sets the value of Brand.
func (s *CapturePaymentOK0) SetBrand(val OptNilCapturePaymentOK0Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *CapturePaymentOK0) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CapturePaymentOK0) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CapturePaymentOK0) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CapturePaymentOK0) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *CapturePaymentOK0) SetMethod(val OptCapturePaymentOK0Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *CapturePaymentOK0) SetPayTimes(val OptNilCapturePaymentOK0PayTimes) {
	s.PayTimes = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *CapturePaymentOK0) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTdsType sets the value of TdsType.
func (s *CapturePaymentOK0) SetTdsType(val OptNilCapturePaymentOK0TdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CapturePaymentOK0) SetTds2Type(val OptNilCapturePaymentOK0Tds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *CapturePaymentOK0) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *CapturePaymentOK0) SetTds2Status(val OptNilCapturePaymentOK0Tds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *CapturePaymentOK0) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetForward sets the value of Forward.
func (s *CapturePaymentOK0) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *CapturePaymentOK0) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *CapturePaymentOK0) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *CapturePaymentOK0) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *CapturePaymentOK0) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *CapturePaymentOK0) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CapturePaymentOK0Brand string

const (
	CapturePaymentOK0BrandVISA     CapturePaymentOK0Brand = "VISA"
	CapturePaymentOK0BrandMASTER   CapturePaymentOK0Brand = "MASTER"
	CapturePaymentOK0BrandJCB      CapturePaymentOK0Brand = "JCB"
	CapturePaymentOK0BrandAMEX     CapturePaymentOK0Brand = "AMEX"
	CapturePaymentOK0BrandDINERS   CapturePaymentOK0Brand = "DINERS"
	CapturePaymentOK0BrandDISCOVER CapturePaymentOK0Brand = "DISCOVER"
	CapturePaymentOK0BrandEmpty    CapturePaymentOK0Brand = ""
)

// AllValues returns all CapturePaymentOK0Brand values.
func (CapturePaymentOK0Brand) AllValues() []CapturePaymentOK0Brand {
	return []CapturePaymentOK0Brand{
		CapturePaymentOK0BrandVISA,
		CapturePaymentOK0BrandMASTER,
		CapturePaymentOK0BrandJCB,
		CapturePaymentOK0BrandAMEX,
		CapturePaymentOK0BrandDINERS,
		CapturePaymentOK0BrandDISCOVER,
		CapturePaymentOK0BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0Brand) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0BrandVISA:
		return []byte(s), nil
	case CapturePaymentOK0BrandMASTER:
		return []byte(s), nil
	case CapturePaymentOK0BrandJCB:
		return []byte(s), nil
	case CapturePaymentOK0BrandAMEX:
		return []byte(s), nil
	case CapturePaymentOK0BrandDINERS:
		return []byte(s), nil
	case CapturePaymentOK0BrandDISCOVER:
		return []byte(s), nil
	case CapturePaymentOK0BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0Brand) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0Brand(data) {
	case CapturePaymentOK0BrandVISA:
		*s = CapturePaymentOK0BrandVISA
		return nil
	case CapturePaymentOK0BrandMASTER:
		*s = CapturePaymentOK0BrandMASTER
		return nil
	case CapturePaymentOK0BrandJCB:
		*s = CapturePaymentOK0BrandJCB
		return nil
	case CapturePaymentOK0BrandAMEX:
		*s = CapturePaymentOK0BrandAMEX
		return nil
	case CapturePaymentOK0BrandDINERS:
		*s = CapturePaymentOK0BrandDINERS
		return nil
	case CapturePaymentOK0BrandDISCOVER:
		*s = CapturePaymentOK0BrandDISCOVER
		return nil
	case CapturePaymentOK0BrandEmpty:
		*s = CapturePaymentOK0BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CapturePaymentOK0JobCode string

const (
	CapturePaymentOK0JobCodeCHECK   CapturePaymentOK0JobCode = "CHECK"
	CapturePaymentOK0JobCodeAUTH    CapturePaymentOK0JobCode = "AUTH"
	CapturePaymentOK0JobCodeCAPTURE CapturePaymentOK0JobCode = "CAPTURE"
)

// AllValues returns all CapturePaymentOK0JobCode values.
func (CapturePaymentOK0JobCode) AllValues() []CapturePaymentOK0JobCode {
	return []CapturePaymentOK0JobCode{
		CapturePaymentOK0JobCodeCHECK,
		CapturePaymentOK0JobCodeAUTH,
		CapturePaymentOK0JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0JobCodeCHECK:
		return []byte(s), nil
	case CapturePaymentOK0JobCodeAUTH:
		return []byte(s), nil
	case CapturePaymentOK0JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0JobCode) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0JobCode(data) {
	case CapturePaymentOK0JobCodeCHECK:
		*s = CapturePaymentOK0JobCodeCHECK
		return nil
	case CapturePaymentOK0JobCodeAUTH:
		*s = CapturePaymentOK0JobCodeAUTH
		return nil
	case CapturePaymentOK0JobCodeCAPTURE:
		*s = CapturePaymentOK0JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type CapturePaymentOK0Method string

const (
	CapturePaymentOK0Method1 CapturePaymentOK0Method = "1"
	CapturePaymentOK0Method2 CapturePaymentOK0Method = "2"
	CapturePaymentOK0Method5 CapturePaymentOK0Method = "5"
)

// AllValues returns all CapturePaymentOK0Method values.
func (CapturePaymentOK0Method) AllValues() []CapturePaymentOK0Method {
	return []CapturePaymentOK0Method{
		CapturePaymentOK0Method1,
		CapturePaymentOK0Method2,
		CapturePaymentOK0Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0Method) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0Method1:
		return []byte(s), nil
	case CapturePaymentOK0Method2:
		return []byte(s), nil
	case CapturePaymentOK0Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0Method) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0Method(data) {
	case CapturePaymentOK0Method1:
		*s = CapturePaymentOK0Method1
		return nil
	case CapturePaymentOK0Method2:
		*s = CapturePaymentOK0Method2
		return nil
	case CapturePaymentOK0Method5:
		*s = CapturePaymentOK0Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type CapturePaymentOK0PayTimes string

const (
	CapturePaymentOK0PayTimes3  CapturePaymentOK0PayTimes = "3"
	CapturePaymentOK0PayTimes5  CapturePaymentOK0PayTimes = "5"
	CapturePaymentOK0PayTimes6  CapturePaymentOK0PayTimes = "6"
	CapturePaymentOK0PayTimes10 CapturePaymentOK0PayTimes = "10"
	CapturePaymentOK0PayTimes12 CapturePaymentOK0PayTimes = "12"
	CapturePaymentOK0PayTimes15 CapturePaymentOK0PayTimes = "15"
	CapturePaymentOK0PayTimes18 CapturePaymentOK0PayTimes = "18"
	CapturePaymentOK0PayTimes20 CapturePaymentOK0PayTimes = "20"
	CapturePaymentOK0PayTimes24 CapturePaymentOK0PayTimes = "24"
)

// AllValues returns all CapturePaymentOK0PayTimes values.
func (CapturePaymentOK0PayTimes) AllValues() []CapturePaymentOK0PayTimes {
	return []CapturePaymentOK0PayTimes{
		CapturePaymentOK0PayTimes3,
		CapturePaymentOK0PayTimes5,
		CapturePaymentOK0PayTimes6,
		CapturePaymentOK0PayTimes10,
		CapturePaymentOK0PayTimes12,
		CapturePaymentOK0PayTimes15,
		CapturePaymentOK0PayTimes18,
		CapturePaymentOK0PayTimes20,
		CapturePaymentOK0PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0PayTimes3:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes5:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes6:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes10:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes12:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes15:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes18:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes20:
		return []byte(s), nil
	case CapturePaymentOK0PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0PayTimes) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0PayTimes(data) {
	case CapturePaymentOK0PayTimes3:
		*s = CapturePaymentOK0PayTimes3
		return nil
	case CapturePaymentOK0PayTimes5:
		*s = CapturePaymentOK0PayTimes5
		return nil
	case CapturePaymentOK0PayTimes6:
		*s = CapturePaymentOK0PayTimes6
		return nil
	case CapturePaymentOK0PayTimes10:
		*s = CapturePaymentOK0PayTimes10
		return nil
	case CapturePaymentOK0PayTimes12:
		*s = CapturePaymentOK0PayTimes12
		return nil
	case CapturePaymentOK0PayTimes15:
		*s = CapturePaymentOK0PayTimes15
		return nil
	case CapturePaymentOK0PayTimes18:
		*s = CapturePaymentOK0PayTimes18
		return nil
	case CapturePaymentOK0PayTimes20:
		*s = CapturePaymentOK0PayTimes20
		return nil
	case CapturePaymentOK0PayTimes24:
		*s = CapturePaymentOK0PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CapturePaymentOK0PayType string

const (
	CapturePaymentOK0PayTypeCard           CapturePaymentOK0PayType = "Card"
	CapturePaymentOK0PayTypeKonbini        CapturePaymentOK0PayType = "Konbini"
	CapturePaymentOK0PayTypePaypay         CapturePaymentOK0PayType = "Paypay"
	CapturePaymentOK0PayTypeApplepay       CapturePaymentOK0PayType = "Applepay"
	CapturePaymentOK0PayTypeDirectdebit    CapturePaymentOK0PayType = "Directdebit"
	CapturePaymentOK0PayTypeVirtualaccount CapturePaymentOK0PayType = "Virtualaccount"
)

// AllValues returns all CapturePaymentOK0PayType values.
func (CapturePaymentOK0PayType) AllValues() []CapturePaymentOK0PayType {
	return []CapturePaymentOK0PayType{
		CapturePaymentOK0PayTypeCard,
		CapturePaymentOK0PayTypeKonbini,
		CapturePaymentOK0PayTypePaypay,
		CapturePaymentOK0PayTypeApplepay,
		CapturePaymentOK0PayTypeDirectdebit,
		CapturePaymentOK0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0PayType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0PayTypeCard:
		return []byte(s), nil
	case CapturePaymentOK0PayTypeKonbini:
		return []byte(s), nil
	case CapturePaymentOK0PayTypePaypay:
		return []byte(s), nil
	case CapturePaymentOK0PayTypeApplepay:
		return []byte(s), nil
	case CapturePaymentOK0PayTypeDirectdebit:
		return []byte(s), nil
	case CapturePaymentOK0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0PayType) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0PayType(data) {
	case CapturePaymentOK0PayTypeCard:
		*s = CapturePaymentOK0PayTypeCard
		return nil
	case CapturePaymentOK0PayTypeKonbini:
		*s = CapturePaymentOK0PayTypeKonbini
		return nil
	case CapturePaymentOK0PayTypePaypay:
		*s = CapturePaymentOK0PayTypePaypay
		return nil
	case CapturePaymentOK0PayTypeApplepay:
		*s = CapturePaymentOK0PayTypeApplepay
		return nil
	case CapturePaymentOK0PayTypeDirectdebit:
		*s = CapturePaymentOK0PayTypeDirectdebit
		return nil
	case CapturePaymentOK0PayTypeVirtualaccount:
		*s = CapturePaymentOK0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CapturePaymentOK0Status string

const (
	CapturePaymentOK0StatusUNPROCESSED             CapturePaymentOK0Status = "UNPROCESSED"
	CapturePaymentOK0StatusCHECKED                 CapturePaymentOK0Status = "CHECKED"
	CapturePaymentOK0StatusAUTHORIZED              CapturePaymentOK0Status = "AUTHORIZED"
	CapturePaymentOK0StatusAWAITINGCUSTOMERPAYMENT CapturePaymentOK0Status = "AWAITING_CUSTOMER_PAYMENT"
	CapturePaymentOK0StatusAWAITINGPAYMENTAPPROVAL CapturePaymentOK0Status = "AWAITING_PAYMENT_APPROVAL"
	CapturePaymentOK0StatusCAPTURED                CapturePaymentOK0Status = "CAPTURED"
	CapturePaymentOK0StatusCANCELED                CapturePaymentOK0Status = "CANCELED"
	CapturePaymentOK0StatusEXPIRED                 CapturePaymentOK0Status = "EXPIRED"
	CapturePaymentOK0StatusAUTHENTICATED           CapturePaymentOK0Status = "AUTHENTICATED"
	CapturePaymentOK0StatusFAILED                  CapturePaymentOK0Status = "FAILED"
)

// AllValues returns all CapturePaymentOK0Status values.
func (CapturePaymentOK0Status) AllValues() []CapturePaymentOK0Status {
	return []CapturePaymentOK0Status{
		CapturePaymentOK0StatusUNPROCESSED,
		CapturePaymentOK0StatusCHECKED,
		CapturePaymentOK0StatusAUTHORIZED,
		CapturePaymentOK0StatusAWAITINGCUSTOMERPAYMENT,
		CapturePaymentOK0StatusAWAITINGPAYMENTAPPROVAL,
		CapturePaymentOK0StatusCAPTURED,
		CapturePaymentOK0StatusCANCELED,
		CapturePaymentOK0StatusEXPIRED,
		CapturePaymentOK0StatusAUTHENTICATED,
		CapturePaymentOK0StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0Status) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0StatusUNPROCESSED:
		return []byte(s), nil
	case CapturePaymentOK0StatusCHECKED:
		return []byte(s), nil
	case CapturePaymentOK0StatusAUTHORIZED:
		return []byte(s), nil
	case CapturePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CapturePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CapturePaymentOK0StatusCAPTURED:
		return []byte(s), nil
	case CapturePaymentOK0StatusCANCELED:
		return []byte(s), nil
	case CapturePaymentOK0StatusEXPIRED:
		return []byte(s), nil
	case CapturePaymentOK0StatusAUTHENTICATED:
		return []byte(s), nil
	case CapturePaymentOK0StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0Status) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0Status(data) {
	case CapturePaymentOK0StatusUNPROCESSED:
		*s = CapturePaymentOK0StatusUNPROCESSED
		return nil
	case CapturePaymentOK0StatusCHECKED:
		*s = CapturePaymentOK0StatusCHECKED
		return nil
	case CapturePaymentOK0StatusAUTHORIZED:
		*s = CapturePaymentOK0StatusAUTHORIZED
		return nil
	case CapturePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = CapturePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CapturePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = CapturePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CapturePaymentOK0StatusCAPTURED:
		*s = CapturePaymentOK0StatusCAPTURED
		return nil
	case CapturePaymentOK0StatusCANCELED:
		*s = CapturePaymentOK0StatusCANCELED
		return nil
	case CapturePaymentOK0StatusEXPIRED:
		*s = CapturePaymentOK0StatusEXPIRED
		return nil
	case CapturePaymentOK0StatusAUTHENTICATED:
		*s = CapturePaymentOK0StatusAUTHENTICATED
		return nil
	case CapturePaymentOK0StatusFAILED:
		*s = CapturePaymentOK0StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0認証処理 ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: チャレンジ認証の実施が必要
// - `AUTHENTICATED`: 3Dセキュア認証処理が完了.
type CapturePaymentOK0Tds2Status string

const (
	CapturePaymentOK0Tds2StatusAUTHENTICATING CapturePaymentOK0Tds2Status = "AUTHENTICATING"
	CapturePaymentOK0Tds2StatusCHALLENGE      CapturePaymentOK0Tds2Status = "CHALLENGE"
	CapturePaymentOK0Tds2StatusAUTHENTICATED  CapturePaymentOK0Tds2Status = "AUTHENTICATED"
)

// AllValues returns all CapturePaymentOK0Tds2Status values.
func (CapturePaymentOK0Tds2Status) AllValues() []CapturePaymentOK0Tds2Status {
	return []CapturePaymentOK0Tds2Status{
		CapturePaymentOK0Tds2StatusAUTHENTICATING,
		CapturePaymentOK0Tds2StatusCHALLENGE,
		CapturePaymentOK0Tds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0Tds2Status) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0Tds2StatusAUTHENTICATING:
		return []byte(s), nil
	case CapturePaymentOK0Tds2StatusCHALLENGE:
		return []byte(s), nil
	case CapturePaymentOK0Tds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0Tds2Status) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0Tds2Status(data) {
	case CapturePaymentOK0Tds2StatusAUTHENTICATING:
		*s = CapturePaymentOK0Tds2StatusAUTHENTICATING
		return nil
	case CapturePaymentOK0Tds2StatusCHALLENGE:
		*s = CapturePaymentOK0Tds2StatusCHALLENGE
		return nil
	case CapturePaymentOK0Tds2StatusAUTHENTICATED:
		*s = CapturePaymentOK0Tds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type CapturePaymentOK0Tds2Type string

const (
	CapturePaymentOK0Tds2Type2 CapturePaymentOK0Tds2Type = "2"
	CapturePaymentOK0Tds2Type3 CapturePaymentOK0Tds2Type = "3"
)

// AllValues returns all CapturePaymentOK0Tds2Type values.
func (CapturePaymentOK0Tds2Type) AllValues() []CapturePaymentOK0Tds2Type {
	return []CapturePaymentOK0Tds2Type{
		CapturePaymentOK0Tds2Type2,
		CapturePaymentOK0Tds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0Tds2Type) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0Tds2Type2:
		return []byte(s), nil
	case CapturePaymentOK0Tds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0Tds2Type) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0Tds2Type(data) {
	case CapturePaymentOK0Tds2Type2:
		*s = CapturePaymentOK0Tds2Type2
		return nil
	case CapturePaymentOK0Tds2Type3:
		*s = CapturePaymentOK0Tds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type CapturePaymentOK0TdsType string

const (
	CapturePaymentOK0TdsType0 CapturePaymentOK0TdsType = "0"
	CapturePaymentOK0TdsType2 CapturePaymentOK0TdsType = "2"
)

// AllValues returns all CapturePaymentOK0TdsType values.
func (CapturePaymentOK0TdsType) AllValues() []CapturePaymentOK0TdsType {
	return []CapturePaymentOK0TdsType{
		CapturePaymentOK0TdsType0,
		CapturePaymentOK0TdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK0TdsType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK0TdsType0:
		return []byte(s), nil
	case CapturePaymentOK0TdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK0TdsType) UnmarshalText(data []byte) error {
	switch CapturePaymentOK0TdsType(data) {
	case CapturePaymentOK0TdsType0:
		*s = CapturePaymentOK0TdsType0
		return nil
	case CapturePaymentOK0TdsType2:
		*s = CapturePaymentOK0TdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CapturePaymentOK1 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType OptCapturePaymentOK1PayType `json:"pay_type"`
	JobCode OptCapturePaymentOK1JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>.
	Status OptCapturePaymentOK1Status   `json:"status"`
	Brand  OptNilCapturePaymentOK1Brand `json:"brand"`
	// マスク済みカード番号。\
	// <span class="smallText">
	// 下4桁以外をマスクしたカード番号です。\
	// Apple
	// Payでは実際のカード番号ではなくデバイスアカウント番号と呼ばれる番号で決済が行われるため、このフィールドで返される値はデバイスアカウント番号をマスクしたものになります。\
	// </span>
	// 形式：`************1234`.
	CardNo     OptNilString                    `json:"card_no"`
	Expire     OptNilString                    `json:"expire"`
	HolderName OptNilString                    `json:"holder_name"`
	CardNoHash OptNilString                    `json:"card_no_hash"`
	Method     OptCapturePaymentOK1Method      `json:"method"`
	PayTimes   OptNilCapturePaymentOK1PayTimes `json:"pay_times"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
}

// GetShopID returns the value of ShopID.
func (s *CapturePaymentOK1) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CapturePaymentOK1) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CapturePaymentOK1) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CapturePaymentOK1) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CapturePaymentOK1) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CapturePaymentOK1) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CapturePaymentOK1) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CapturePaymentOK1) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CapturePaymentOK1) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CapturePaymentOK1) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CapturePaymentOK1) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CapturePaymentOK1) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CapturePaymentOK1) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CapturePaymentOK1) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CapturePaymentOK1) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CapturePaymentOK1) GetPayType() OptCapturePaymentOK1PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CapturePaymentOK1) GetJobCode() OptCapturePaymentOK1JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *CapturePaymentOK1) GetStatus() OptCapturePaymentOK1Status {
	return s.Status
}

// GetBrand returns the value of Brand.
func (s *CapturePaymentOK1) GetBrand() OptNilCapturePaymentOK1Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *CapturePaymentOK1) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CapturePaymentOK1) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CapturePaymentOK1) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CapturePaymentOK1) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *CapturePaymentOK1) GetMethod() OptCapturePaymentOK1Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *CapturePaymentOK1) GetPayTimes() OptNilCapturePaymentOK1PayTimes {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *CapturePaymentOK1) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *CapturePaymentOK1) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *CapturePaymentOK1) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *CapturePaymentOK1) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *CapturePaymentOK1) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *CapturePaymentOK1) GetItemCode() OptNilString {
	return s.ItemCode
}

// GetSendURL returns the value of SendURL.
func (s *CapturePaymentOK1) GetSendURL() OptNilString {
	return s.SendURL
}

// SetShopID sets the value of ShopID.
func (s *CapturePaymentOK1) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CapturePaymentOK1) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CapturePaymentOK1) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CapturePaymentOK1) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CapturePaymentOK1) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CapturePaymentOK1) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CapturePaymentOK1) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CapturePaymentOK1) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CapturePaymentOK1) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CapturePaymentOK1) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CapturePaymentOK1) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CapturePaymentOK1) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CapturePaymentOK1) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CapturePaymentOK1) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CapturePaymentOK1) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CapturePaymentOK1) SetPayType(val OptCapturePaymentOK1PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CapturePaymentOK1) SetJobCode(val OptCapturePaymentOK1JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *CapturePaymentOK1) SetStatus(val OptCapturePaymentOK1Status) {
	s.Status = val
}

// SetBrand sets the value of Brand.
func (s *CapturePaymentOK1) SetBrand(val OptNilCapturePaymentOK1Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *CapturePaymentOK1) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CapturePaymentOK1) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CapturePaymentOK1) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CapturePaymentOK1) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *CapturePaymentOK1) SetMethod(val OptCapturePaymentOK1Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *CapturePaymentOK1) SetPayTimes(val OptNilCapturePaymentOK1PayTimes) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *CapturePaymentOK1) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *CapturePaymentOK1) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *CapturePaymentOK1) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *CapturePaymentOK1) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *CapturePaymentOK1) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *CapturePaymentOK1) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// SetSendURL sets the value of SendURL.
func (s *CapturePaymentOK1) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CapturePaymentOK1Brand string

const (
	CapturePaymentOK1BrandVISA     CapturePaymentOK1Brand = "VISA"
	CapturePaymentOK1BrandMASTER   CapturePaymentOK1Brand = "MASTER"
	CapturePaymentOK1BrandJCB      CapturePaymentOK1Brand = "JCB"
	CapturePaymentOK1BrandAMEX     CapturePaymentOK1Brand = "AMEX"
	CapturePaymentOK1BrandDINERS   CapturePaymentOK1Brand = "DINERS"
	CapturePaymentOK1BrandDISCOVER CapturePaymentOK1Brand = "DISCOVER"
	CapturePaymentOK1BrandEmpty    CapturePaymentOK1Brand = ""
)

// AllValues returns all CapturePaymentOK1Brand values.
func (CapturePaymentOK1Brand) AllValues() []CapturePaymentOK1Brand {
	return []CapturePaymentOK1Brand{
		CapturePaymentOK1BrandVISA,
		CapturePaymentOK1BrandMASTER,
		CapturePaymentOK1BrandJCB,
		CapturePaymentOK1BrandAMEX,
		CapturePaymentOK1BrandDINERS,
		CapturePaymentOK1BrandDISCOVER,
		CapturePaymentOK1BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK1Brand) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK1BrandVISA:
		return []byte(s), nil
	case CapturePaymentOK1BrandMASTER:
		return []byte(s), nil
	case CapturePaymentOK1BrandJCB:
		return []byte(s), nil
	case CapturePaymentOK1BrandAMEX:
		return []byte(s), nil
	case CapturePaymentOK1BrandDINERS:
		return []byte(s), nil
	case CapturePaymentOK1BrandDISCOVER:
		return []byte(s), nil
	case CapturePaymentOK1BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK1Brand) UnmarshalText(data []byte) error {
	switch CapturePaymentOK1Brand(data) {
	case CapturePaymentOK1BrandVISA:
		*s = CapturePaymentOK1BrandVISA
		return nil
	case CapturePaymentOK1BrandMASTER:
		*s = CapturePaymentOK1BrandMASTER
		return nil
	case CapturePaymentOK1BrandJCB:
		*s = CapturePaymentOK1BrandJCB
		return nil
	case CapturePaymentOK1BrandAMEX:
		*s = CapturePaymentOK1BrandAMEX
		return nil
	case CapturePaymentOK1BrandDINERS:
		*s = CapturePaymentOK1BrandDINERS
		return nil
	case CapturePaymentOK1BrandDISCOVER:
		*s = CapturePaymentOK1BrandDISCOVER
		return nil
	case CapturePaymentOK1BrandEmpty:
		*s = CapturePaymentOK1BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CapturePaymentOK1JobCode string

const (
	CapturePaymentOK1JobCodeAUTH    CapturePaymentOK1JobCode = "AUTH"
	CapturePaymentOK1JobCodeCAPTURE CapturePaymentOK1JobCode = "CAPTURE"
)

// AllValues returns all CapturePaymentOK1JobCode values.
func (CapturePaymentOK1JobCode) AllValues() []CapturePaymentOK1JobCode {
	return []CapturePaymentOK1JobCode{
		CapturePaymentOK1JobCodeAUTH,
		CapturePaymentOK1JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK1JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK1JobCodeAUTH:
		return []byte(s), nil
	case CapturePaymentOK1JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK1JobCode) UnmarshalText(data []byte) error {
	switch CapturePaymentOK1JobCode(data) {
	case CapturePaymentOK1JobCodeAUTH:
		*s = CapturePaymentOK1JobCodeAUTH
		return nil
	case CapturePaymentOK1JobCodeCAPTURE:
		*s = CapturePaymentOK1JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type CapturePaymentOK1Method string

const (
	CapturePaymentOK1Method1 CapturePaymentOK1Method = "1"
	CapturePaymentOK1Method2 CapturePaymentOK1Method = "2"
	CapturePaymentOK1Method5 CapturePaymentOK1Method = "5"
)

// AllValues returns all CapturePaymentOK1Method values.
func (CapturePaymentOK1Method) AllValues() []CapturePaymentOK1Method {
	return []CapturePaymentOK1Method{
		CapturePaymentOK1Method1,
		CapturePaymentOK1Method2,
		CapturePaymentOK1Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK1Method) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK1Method1:
		return []byte(s), nil
	case CapturePaymentOK1Method2:
		return []byte(s), nil
	case CapturePaymentOK1Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK1Method) UnmarshalText(data []byte) error {
	switch CapturePaymentOK1Method(data) {
	case CapturePaymentOK1Method1:
		*s = CapturePaymentOK1Method1
		return nil
	case CapturePaymentOK1Method2:
		*s = CapturePaymentOK1Method2
		return nil
	case CapturePaymentOK1Method5:
		*s = CapturePaymentOK1Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type CapturePaymentOK1PayTimes string

const (
	CapturePaymentOK1PayTimes3  CapturePaymentOK1PayTimes = "3"
	CapturePaymentOK1PayTimes5  CapturePaymentOK1PayTimes = "5"
	CapturePaymentOK1PayTimes6  CapturePaymentOK1PayTimes = "6"
	CapturePaymentOK1PayTimes10 CapturePaymentOK1PayTimes = "10"
	CapturePaymentOK1PayTimes12 CapturePaymentOK1PayTimes = "12"
	CapturePaymentOK1PayTimes15 CapturePaymentOK1PayTimes = "15"
	CapturePaymentOK1PayTimes18 CapturePaymentOK1PayTimes = "18"
	CapturePaymentOK1PayTimes20 CapturePaymentOK1PayTimes = "20"
	CapturePaymentOK1PayTimes24 CapturePaymentOK1PayTimes = "24"
)

// AllValues returns all CapturePaymentOK1PayTimes values.
func (CapturePaymentOK1PayTimes) AllValues() []CapturePaymentOK1PayTimes {
	return []CapturePaymentOK1PayTimes{
		CapturePaymentOK1PayTimes3,
		CapturePaymentOK1PayTimes5,
		CapturePaymentOK1PayTimes6,
		CapturePaymentOK1PayTimes10,
		CapturePaymentOK1PayTimes12,
		CapturePaymentOK1PayTimes15,
		CapturePaymentOK1PayTimes18,
		CapturePaymentOK1PayTimes20,
		CapturePaymentOK1PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK1PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK1PayTimes3:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes5:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes6:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes10:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes12:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes15:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes18:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes20:
		return []byte(s), nil
	case CapturePaymentOK1PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK1PayTimes) UnmarshalText(data []byte) error {
	switch CapturePaymentOK1PayTimes(data) {
	case CapturePaymentOK1PayTimes3:
		*s = CapturePaymentOK1PayTimes3
		return nil
	case CapturePaymentOK1PayTimes5:
		*s = CapturePaymentOK1PayTimes5
		return nil
	case CapturePaymentOK1PayTimes6:
		*s = CapturePaymentOK1PayTimes6
		return nil
	case CapturePaymentOK1PayTimes10:
		*s = CapturePaymentOK1PayTimes10
		return nil
	case CapturePaymentOK1PayTimes12:
		*s = CapturePaymentOK1PayTimes12
		return nil
	case CapturePaymentOK1PayTimes15:
		*s = CapturePaymentOK1PayTimes15
		return nil
	case CapturePaymentOK1PayTimes18:
		*s = CapturePaymentOK1PayTimes18
		return nil
	case CapturePaymentOK1PayTimes20:
		*s = CapturePaymentOK1PayTimes20
		return nil
	case CapturePaymentOK1PayTimes24:
		*s = CapturePaymentOK1PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CapturePaymentOK1PayType string

const (
	CapturePaymentOK1PayTypeCard           CapturePaymentOK1PayType = "Card"
	CapturePaymentOK1PayTypeKonbini        CapturePaymentOK1PayType = "Konbini"
	CapturePaymentOK1PayTypePaypay         CapturePaymentOK1PayType = "Paypay"
	CapturePaymentOK1PayTypeApplepay       CapturePaymentOK1PayType = "Applepay"
	CapturePaymentOK1PayTypeDirectdebit    CapturePaymentOK1PayType = "Directdebit"
	CapturePaymentOK1PayTypeVirtualaccount CapturePaymentOK1PayType = "Virtualaccount"
)

// AllValues returns all CapturePaymentOK1PayType values.
func (CapturePaymentOK1PayType) AllValues() []CapturePaymentOK1PayType {
	return []CapturePaymentOK1PayType{
		CapturePaymentOK1PayTypeCard,
		CapturePaymentOK1PayTypeKonbini,
		CapturePaymentOK1PayTypePaypay,
		CapturePaymentOK1PayTypeApplepay,
		CapturePaymentOK1PayTypeDirectdebit,
		CapturePaymentOK1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK1PayType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK1PayTypeCard:
		return []byte(s), nil
	case CapturePaymentOK1PayTypeKonbini:
		return []byte(s), nil
	case CapturePaymentOK1PayTypePaypay:
		return []byte(s), nil
	case CapturePaymentOK1PayTypeApplepay:
		return []byte(s), nil
	case CapturePaymentOK1PayTypeDirectdebit:
		return []byte(s), nil
	case CapturePaymentOK1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK1PayType) UnmarshalText(data []byte) error {
	switch CapturePaymentOK1PayType(data) {
	case CapturePaymentOK1PayTypeCard:
		*s = CapturePaymentOK1PayTypeCard
		return nil
	case CapturePaymentOK1PayTypeKonbini:
		*s = CapturePaymentOK1PayTypeKonbini
		return nil
	case CapturePaymentOK1PayTypePaypay:
		*s = CapturePaymentOK1PayTypePaypay
		return nil
	case CapturePaymentOK1PayTypeApplepay:
		*s = CapturePaymentOK1PayTypeApplepay
		return nil
	case CapturePaymentOK1PayTypeDirectdebit:
		*s = CapturePaymentOK1PayTypeDirectdebit
		return nil
	case CapturePaymentOK1PayTypeVirtualaccount:
		*s = CapturePaymentOK1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CapturePaymentOK1Status string

const (
	CapturePaymentOK1StatusUNPROCESSED             CapturePaymentOK1Status = "UNPROCESSED"
	CapturePaymentOK1StatusCHECKED                 CapturePaymentOK1Status = "CHECKED"
	CapturePaymentOK1StatusAUTHORIZED              CapturePaymentOK1Status = "AUTHORIZED"
	CapturePaymentOK1StatusAWAITINGCUSTOMERPAYMENT CapturePaymentOK1Status = "AWAITING_CUSTOMER_PAYMENT"
	CapturePaymentOK1StatusAWAITINGPAYMENTAPPROVAL CapturePaymentOK1Status = "AWAITING_PAYMENT_APPROVAL"
	CapturePaymentOK1StatusCAPTURED                CapturePaymentOK1Status = "CAPTURED"
	CapturePaymentOK1StatusCANCELED                CapturePaymentOK1Status = "CANCELED"
	CapturePaymentOK1StatusEXPIRED                 CapturePaymentOK1Status = "EXPIRED"
	CapturePaymentOK1StatusAUTHENTICATED           CapturePaymentOK1Status = "AUTHENTICATED"
	CapturePaymentOK1StatusFAILED                  CapturePaymentOK1Status = "FAILED"
)

// AllValues returns all CapturePaymentOK1Status values.
func (CapturePaymentOK1Status) AllValues() []CapturePaymentOK1Status {
	return []CapturePaymentOK1Status{
		CapturePaymentOK1StatusUNPROCESSED,
		CapturePaymentOK1StatusCHECKED,
		CapturePaymentOK1StatusAUTHORIZED,
		CapturePaymentOK1StatusAWAITINGCUSTOMERPAYMENT,
		CapturePaymentOK1StatusAWAITINGPAYMENTAPPROVAL,
		CapturePaymentOK1StatusCAPTURED,
		CapturePaymentOK1StatusCANCELED,
		CapturePaymentOK1StatusEXPIRED,
		CapturePaymentOK1StatusAUTHENTICATED,
		CapturePaymentOK1StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK1Status) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK1StatusUNPROCESSED:
		return []byte(s), nil
	case CapturePaymentOK1StatusCHECKED:
		return []byte(s), nil
	case CapturePaymentOK1StatusAUTHORIZED:
		return []byte(s), nil
	case CapturePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CapturePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CapturePaymentOK1StatusCAPTURED:
		return []byte(s), nil
	case CapturePaymentOK1StatusCANCELED:
		return []byte(s), nil
	case CapturePaymentOK1StatusEXPIRED:
		return []byte(s), nil
	case CapturePaymentOK1StatusAUTHENTICATED:
		return []byte(s), nil
	case CapturePaymentOK1StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK1Status) UnmarshalText(data []byte) error {
	switch CapturePaymentOK1Status(data) {
	case CapturePaymentOK1StatusUNPROCESSED:
		*s = CapturePaymentOK1StatusUNPROCESSED
		return nil
	case CapturePaymentOK1StatusCHECKED:
		*s = CapturePaymentOK1StatusCHECKED
		return nil
	case CapturePaymentOK1StatusAUTHORIZED:
		*s = CapturePaymentOK1StatusAUTHORIZED
		return nil
	case CapturePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = CapturePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CapturePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = CapturePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CapturePaymentOK1StatusCAPTURED:
		*s = CapturePaymentOK1StatusCAPTURED
		return nil
	case CapturePaymentOK1StatusCANCELED:
		*s = CapturePaymentOK1StatusCANCELED
		return nil
	case CapturePaymentOK1StatusEXPIRED:
		*s = CapturePaymentOK1StatusEXPIRED
		return nil
	case CapturePaymentOK1StatusAUTHENTICATED:
		*s = CapturePaymentOK1StatusAUTHENTICATED
		return nil
	case CapturePaymentOK1StatusFAILED:
		*s = CapturePaymentOK1StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CapturePaymentOK2 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType OptCapturePaymentOK2PayType `json:"pay_type"`
	JobCode OptCapturePaymentOK2JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるPayPay上での取引承認を待っている状態。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptCapturePaymentOK2Status `json:"status"`
	// PayPay支払いURL\
	// 購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します。.
	CodeURL OptNilString `json:"code_url"`
	// 支払期限\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	CodeExpiryDate OptNilString `json:"code_expiry_date"`
	// リダイレクトURL\
	// 決済が完了した際にPayPayからリダイレクト先URL。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクト先種別\
	// `redirect_url`の種別
	// - `1`： Webページ／Webアプリケーション
	// - `2`： ネイティブアプリ.
	RedirectType OptNilCapturePaymentOK2RedirectType `json:"redirect_type"`
	// 仮売上期限\
	// 形式： `yyyy/MM/dd`.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 注文内容の説明\
	// 購入者のPayPayアプリ上で表示される注文内容の説明。.
	OrderDescription OptNilString `json:"order_description"`
	// 売上確定の説明\
	// 購入者のPayPayアプリ上で表示される売上確定の説明。.
	CaptureDescription OptNilString `json:"capture_description"`
	// 金額変更の説明\
	// 購入者のPayPayアプリ上で表示される金額変更の説明。.
	UpdateDescription OptNilString `json:"update_description"`
	// キャンセルの説明\
	// 購入者のPayPayアプリ上で表示されるキャンセルの説明。.
	CancelDescription OptNilString `json:"cancel_description"`
	// 店舗ID\
	// PayPayによって発行された店舗ID。.
	StoreID OptNilString `json:"store_id"`
	// PayPayの支払いコードID.
	CodeID OptNilString `json:"code_id"`
	// PayPay 決済ID.
	PaymentID OptNilString `json:"payment_id"`
	// PayPay処理結果コード.
	PaypayResultCode OptNilString `json:"paypay_result_code"`
	// PayPay トランザクションID.
	MerchantPaymentID OptNilString `json:"merchant_payment_id"`
	// PayPay 売上確定ID.
	MerchantCaptureID OptNilString `json:"merchant_capture_id"`
	// PayPay 金額変更ID.
	MerchantUpdateID OptNilString `json:"merchant_update_id"`
	// PayPay キャンセルID.
	MerchantRevertID OptNilString `json:"merchant_revert_id"`
	// PayPay 返金ID.
	MerchantRefundID OptNilString `json:"merchant_refund_id"`
	// 支払日時\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *CapturePaymentOK2) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CapturePaymentOK2) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CapturePaymentOK2) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CapturePaymentOK2) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CapturePaymentOK2) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CapturePaymentOK2) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CapturePaymentOK2) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CapturePaymentOK2) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CapturePaymentOK2) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CapturePaymentOK2) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CapturePaymentOK2) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CapturePaymentOK2) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CapturePaymentOK2) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CapturePaymentOK2) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CapturePaymentOK2) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CapturePaymentOK2) GetPayType() OptCapturePaymentOK2PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CapturePaymentOK2) GetJobCode() OptCapturePaymentOK2JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *CapturePaymentOK2) GetStatus() OptCapturePaymentOK2Status {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *CapturePaymentOK2) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *CapturePaymentOK2) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *CapturePaymentOK2) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *CapturePaymentOK2) GetRedirectType() OptNilCapturePaymentOK2RedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *CapturePaymentOK2) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *CapturePaymentOK2) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *CapturePaymentOK2) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *CapturePaymentOK2) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *CapturePaymentOK2) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *CapturePaymentOK2) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *CapturePaymentOK2) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *CapturePaymentOK2) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *CapturePaymentOK2) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *CapturePaymentOK2) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *CapturePaymentOK2) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *CapturePaymentOK2) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRevertID returns the value of MerchantRevertID.
func (s *CapturePaymentOK2) GetMerchantRevertID() OptNilString {
	return s.MerchantRevertID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *CapturePaymentOK2) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *CapturePaymentOK2) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *CapturePaymentOK2) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CapturePaymentOK2) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CapturePaymentOK2) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CapturePaymentOK2) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CapturePaymentOK2) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CapturePaymentOK2) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CapturePaymentOK2) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CapturePaymentOK2) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CapturePaymentOK2) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CapturePaymentOK2) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CapturePaymentOK2) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CapturePaymentOK2) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CapturePaymentOK2) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CapturePaymentOK2) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CapturePaymentOK2) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CapturePaymentOK2) SetPayType(val OptCapturePaymentOK2PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CapturePaymentOK2) SetJobCode(val OptCapturePaymentOK2JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *CapturePaymentOK2) SetStatus(val OptCapturePaymentOK2Status) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *CapturePaymentOK2) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *CapturePaymentOK2) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *CapturePaymentOK2) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *CapturePaymentOK2) SetRedirectType(val OptNilCapturePaymentOK2RedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *CapturePaymentOK2) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *CapturePaymentOK2) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *CapturePaymentOK2) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *CapturePaymentOK2) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *CapturePaymentOK2) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *CapturePaymentOK2) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *CapturePaymentOK2) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *CapturePaymentOK2) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *CapturePaymentOK2) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *CapturePaymentOK2) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *CapturePaymentOK2) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *CapturePaymentOK2) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRevertID sets the value of MerchantRevertID.
func (s *CapturePaymentOK2) SetMerchantRevertID(val OptNilString) {
	s.MerchantRevertID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *CapturePaymentOK2) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *CapturePaymentOK2) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CapturePaymentOK2JobCode string

const (
	CapturePaymentOK2JobCodeAUTH    CapturePaymentOK2JobCode = "AUTH"
	CapturePaymentOK2JobCodeCAPTURE CapturePaymentOK2JobCode = "CAPTURE"
)

// AllValues returns all CapturePaymentOK2JobCode values.
func (CapturePaymentOK2JobCode) AllValues() []CapturePaymentOK2JobCode {
	return []CapturePaymentOK2JobCode{
		CapturePaymentOK2JobCodeAUTH,
		CapturePaymentOK2JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK2JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK2JobCodeAUTH:
		return []byte(s), nil
	case CapturePaymentOK2JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK2JobCode) UnmarshalText(data []byte) error {
	switch CapturePaymentOK2JobCode(data) {
	case CapturePaymentOK2JobCodeAUTH:
		*s = CapturePaymentOK2JobCodeAUTH
		return nil
	case CapturePaymentOK2JobCodeCAPTURE:
		*s = CapturePaymentOK2JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CapturePaymentOK2PayType string

const (
	CapturePaymentOK2PayTypeCard           CapturePaymentOK2PayType = "Card"
	CapturePaymentOK2PayTypeKonbini        CapturePaymentOK2PayType = "Konbini"
	CapturePaymentOK2PayTypePaypay         CapturePaymentOK2PayType = "Paypay"
	CapturePaymentOK2PayTypeApplepay       CapturePaymentOK2PayType = "Applepay"
	CapturePaymentOK2PayTypeDirectdebit    CapturePaymentOK2PayType = "Directdebit"
	CapturePaymentOK2PayTypeVirtualaccount CapturePaymentOK2PayType = "Virtualaccount"
)

// AllValues returns all CapturePaymentOK2PayType values.
func (CapturePaymentOK2PayType) AllValues() []CapturePaymentOK2PayType {
	return []CapturePaymentOK2PayType{
		CapturePaymentOK2PayTypeCard,
		CapturePaymentOK2PayTypeKonbini,
		CapturePaymentOK2PayTypePaypay,
		CapturePaymentOK2PayTypeApplepay,
		CapturePaymentOK2PayTypeDirectdebit,
		CapturePaymentOK2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK2PayType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK2PayTypeCard:
		return []byte(s), nil
	case CapturePaymentOK2PayTypeKonbini:
		return []byte(s), nil
	case CapturePaymentOK2PayTypePaypay:
		return []byte(s), nil
	case CapturePaymentOK2PayTypeApplepay:
		return []byte(s), nil
	case CapturePaymentOK2PayTypeDirectdebit:
		return []byte(s), nil
	case CapturePaymentOK2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK2PayType) UnmarshalText(data []byte) error {
	switch CapturePaymentOK2PayType(data) {
	case CapturePaymentOK2PayTypeCard:
		*s = CapturePaymentOK2PayTypeCard
		return nil
	case CapturePaymentOK2PayTypeKonbini:
		*s = CapturePaymentOK2PayTypeKonbini
		return nil
	case CapturePaymentOK2PayTypePaypay:
		*s = CapturePaymentOK2PayTypePaypay
		return nil
	case CapturePaymentOK2PayTypeApplepay:
		*s = CapturePaymentOK2PayTypeApplepay
		return nil
	case CapturePaymentOK2PayTypeDirectdebit:
		*s = CapturePaymentOK2PayTypeDirectdebit
		return nil
	case CapturePaymentOK2PayTypeVirtualaccount:
		*s = CapturePaymentOK2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクト先種別\
// `redirect_url`の種別
// - `1`： Webページ／Webアプリケーション
// - `2`： ネイティブアプリ.
type CapturePaymentOK2RedirectType string

const (
	CapturePaymentOK2RedirectType1 CapturePaymentOK2RedirectType = "1"
	CapturePaymentOK2RedirectType2 CapturePaymentOK2RedirectType = "2"
)

// AllValues returns all CapturePaymentOK2RedirectType values.
func (CapturePaymentOK2RedirectType) AllValues() []CapturePaymentOK2RedirectType {
	return []CapturePaymentOK2RedirectType{
		CapturePaymentOK2RedirectType1,
		CapturePaymentOK2RedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK2RedirectType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK2RedirectType1:
		return []byte(s), nil
	case CapturePaymentOK2RedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK2RedirectType) UnmarshalText(data []byte) error {
	switch CapturePaymentOK2RedirectType(data) {
	case CapturePaymentOK2RedirectType1:
		*s = CapturePaymentOK2RedirectType1
		return nil
	case CapturePaymentOK2RedirectType2:
		*s = CapturePaymentOK2RedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CapturePaymentOK2Status string

const (
	CapturePaymentOK2StatusUNPROCESSED             CapturePaymentOK2Status = "UNPROCESSED"
	CapturePaymentOK2StatusCHECKED                 CapturePaymentOK2Status = "CHECKED"
	CapturePaymentOK2StatusAUTHORIZED              CapturePaymentOK2Status = "AUTHORIZED"
	CapturePaymentOK2StatusAWAITINGCUSTOMERPAYMENT CapturePaymentOK2Status = "AWAITING_CUSTOMER_PAYMENT"
	CapturePaymentOK2StatusAWAITINGPAYMENTAPPROVAL CapturePaymentOK2Status = "AWAITING_PAYMENT_APPROVAL"
	CapturePaymentOK2StatusCAPTURED                CapturePaymentOK2Status = "CAPTURED"
	CapturePaymentOK2StatusCANCELED                CapturePaymentOK2Status = "CANCELED"
	CapturePaymentOK2StatusEXPIRED                 CapturePaymentOK2Status = "EXPIRED"
	CapturePaymentOK2StatusAUTHENTICATED           CapturePaymentOK2Status = "AUTHENTICATED"
	CapturePaymentOK2StatusFAILED                  CapturePaymentOK2Status = "FAILED"
)

// AllValues returns all CapturePaymentOK2Status values.
func (CapturePaymentOK2Status) AllValues() []CapturePaymentOK2Status {
	return []CapturePaymentOK2Status{
		CapturePaymentOK2StatusUNPROCESSED,
		CapturePaymentOK2StatusCHECKED,
		CapturePaymentOK2StatusAUTHORIZED,
		CapturePaymentOK2StatusAWAITINGCUSTOMERPAYMENT,
		CapturePaymentOK2StatusAWAITINGPAYMENTAPPROVAL,
		CapturePaymentOK2StatusCAPTURED,
		CapturePaymentOK2StatusCANCELED,
		CapturePaymentOK2StatusEXPIRED,
		CapturePaymentOK2StatusAUTHENTICATED,
		CapturePaymentOK2StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentOK2Status) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentOK2StatusUNPROCESSED:
		return []byte(s), nil
	case CapturePaymentOK2StatusCHECKED:
		return []byte(s), nil
	case CapturePaymentOK2StatusAUTHORIZED:
		return []byte(s), nil
	case CapturePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CapturePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CapturePaymentOK2StatusCAPTURED:
		return []byte(s), nil
	case CapturePaymentOK2StatusCANCELED:
		return []byte(s), nil
	case CapturePaymentOK2StatusEXPIRED:
		return []byte(s), nil
	case CapturePaymentOK2StatusAUTHENTICATED:
		return []byte(s), nil
	case CapturePaymentOK2StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentOK2Status) UnmarshalText(data []byte) error {
	switch CapturePaymentOK2Status(data) {
	case CapturePaymentOK2StatusUNPROCESSED:
		*s = CapturePaymentOK2StatusUNPROCESSED
		return nil
	case CapturePaymentOK2StatusCHECKED:
		*s = CapturePaymentOK2StatusCHECKED
		return nil
	case CapturePaymentOK2StatusAUTHORIZED:
		*s = CapturePaymentOK2StatusAUTHORIZED
		return nil
	case CapturePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = CapturePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CapturePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = CapturePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CapturePaymentOK2StatusCAPTURED:
		*s = CapturePaymentOK2StatusCAPTURED
		return nil
	case CapturePaymentOK2StatusCANCELED:
		*s = CapturePaymentOK2StatusCANCELED
		return nil
	case CapturePaymentOK2StatusEXPIRED:
		*s = CapturePaymentOK2StatusEXPIRED
		return nil
	case CapturePaymentOK2StatusAUTHENTICATED:
		*s = CapturePaymentOK2StatusAUTHENTICATED
		return nil
	case CapturePaymentOK2StatusFAILED:
		*s = CapturePaymentOK2StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CapturePaymentReq represents sum type.
type CapturePaymentReq struct {
	Type               CapturePaymentReqType // switch on this field
	CapturePaymentReq0 CapturePaymentReq0
	CapturePaymentReq1 CapturePaymentReq1
	CapturePaymentReq2 CapturePaymentReq2
}

// CapturePaymentReqType is oneOf type of CapturePaymentReq.
type CapturePaymentReqType string

// Possible values for CapturePaymentReqType.
const (
	CapturePaymentReq0CapturePaymentReq CapturePaymentReqType = "CapturePaymentReq0"
	CapturePaymentReq1CapturePaymentReq CapturePaymentReqType = "CapturePaymentReq1"
	CapturePaymentReq2CapturePaymentReq CapturePaymentReqType = "CapturePaymentReq2"
)

// IsCapturePaymentReq0 reports whether CapturePaymentReq is CapturePaymentReq0.
func (s CapturePaymentReq) IsCapturePaymentReq0() bool {
	return s.Type == CapturePaymentReq0CapturePaymentReq
}

// IsCapturePaymentReq1 reports whether CapturePaymentReq is CapturePaymentReq1.
func (s CapturePaymentReq) IsCapturePaymentReq1() bool {
	return s.Type == CapturePaymentReq1CapturePaymentReq
}

// IsCapturePaymentReq2 reports whether CapturePaymentReq is CapturePaymentReq2.
func (s CapturePaymentReq) IsCapturePaymentReq2() bool {
	return s.Type == CapturePaymentReq2CapturePaymentReq
}

// SetCapturePaymentReq0 sets CapturePaymentReq to CapturePaymentReq0.
func (s *CapturePaymentReq) SetCapturePaymentReq0(v CapturePaymentReq0) {
	s.Type = CapturePaymentReq0CapturePaymentReq
	s.CapturePaymentReq0 = v
}

// GetCapturePaymentReq0 returns CapturePaymentReq0 and true boolean if CapturePaymentReq is CapturePaymentReq0.
func (s CapturePaymentReq) GetCapturePaymentReq0() (v CapturePaymentReq0, ok bool) {
	if !s.IsCapturePaymentReq0() {
		return v, false
	}
	return s.CapturePaymentReq0, true
}

// NewCapturePaymentReq0CapturePaymentReq returns new CapturePaymentReq from CapturePaymentReq0.
func NewCapturePaymentReq0CapturePaymentReq(v CapturePaymentReq0) CapturePaymentReq {
	var s CapturePaymentReq
	s.SetCapturePaymentReq0(v)
	return s
}

// SetCapturePaymentReq1 sets CapturePaymentReq to CapturePaymentReq1.
func (s *CapturePaymentReq) SetCapturePaymentReq1(v CapturePaymentReq1) {
	s.Type = CapturePaymentReq1CapturePaymentReq
	s.CapturePaymentReq1 = v
}

// GetCapturePaymentReq1 returns CapturePaymentReq1 and true boolean if CapturePaymentReq is CapturePaymentReq1.
func (s CapturePaymentReq) GetCapturePaymentReq1() (v CapturePaymentReq1, ok bool) {
	if !s.IsCapturePaymentReq1() {
		return v, false
	}
	return s.CapturePaymentReq1, true
}

// NewCapturePaymentReq1CapturePaymentReq returns new CapturePaymentReq from CapturePaymentReq1.
func NewCapturePaymentReq1CapturePaymentReq(v CapturePaymentReq1) CapturePaymentReq {
	var s CapturePaymentReq
	s.SetCapturePaymentReq1(v)
	return s
}

// SetCapturePaymentReq2 sets CapturePaymentReq to CapturePaymentReq2.
func (s *CapturePaymentReq) SetCapturePaymentReq2(v CapturePaymentReq2) {
	s.Type = CapturePaymentReq2CapturePaymentReq
	s.CapturePaymentReq2 = v
}

// GetCapturePaymentReq2 returns CapturePaymentReq2 and true boolean if CapturePaymentReq is CapturePaymentReq2.
func (s CapturePaymentReq) GetCapturePaymentReq2() (v CapturePaymentReq2, ok bool) {
	if !s.IsCapturePaymentReq2() {
		return v, false
	}
	return s.CapturePaymentReq2, true
}

// NewCapturePaymentReq2CapturePaymentReq returns new CapturePaymentReq from CapturePaymentReq2.
func NewCapturePaymentReq2CapturePaymentReq(v CapturePaymentReq2) CapturePaymentReq {
	var s CapturePaymentReq
	s.SetCapturePaymentReq2(v)
	return s
}

type CapturePaymentReq0 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType  CapturePaymentReq0PayType `json:"pay_type"`
	AccessID string                    `json:"access_id"`
	// 支払方法\
	// `CANCELED`ステータスの決済に対して指定ができます。
	// - `1`: 一括払い
	// - `2`: 分割払い
	// - `5`: リボ払い.
	Method OptCapturePaymentReq0Method `json:"method"`
	// （分割払いの場合）支払回数\
	// `CANCELED`ステータスの決済に対して指定ができます。\
	// \
	// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
	PayTimes OptNilCapturePaymentReq0PayTimes `json:"pay_times"`
}

// GetPayType returns the value of PayType.
func (s *CapturePaymentReq0) GetPayType() CapturePaymentReq0PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *CapturePaymentReq0) GetAccessID() string {
	return s.AccessID
}

// GetMethod returns the value of Method.
func (s *CapturePaymentReq0) GetMethod() OptCapturePaymentReq0Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *CapturePaymentReq0) GetPayTimes() OptNilCapturePaymentReq0PayTimes {
	return s.PayTimes
}

// SetPayType sets the value of PayType.
func (s *CapturePaymentReq0) SetPayType(val CapturePaymentReq0PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *CapturePaymentReq0) SetAccessID(val string) {
	s.AccessID = val
}

// SetMethod sets the value of Method.
func (s *CapturePaymentReq0) SetMethod(val OptCapturePaymentReq0Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *CapturePaymentReq0) SetPayTimes(val OptNilCapturePaymentReq0PayTimes) {
	s.PayTimes = val
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type CapturePaymentReq0Method string

const (
	CapturePaymentReq0Method1 CapturePaymentReq0Method = "1"
	CapturePaymentReq0Method2 CapturePaymentReq0Method = "2"
	CapturePaymentReq0Method5 CapturePaymentReq0Method = "5"
)

// AllValues returns all CapturePaymentReq0Method values.
func (CapturePaymentReq0Method) AllValues() []CapturePaymentReq0Method {
	return []CapturePaymentReq0Method{
		CapturePaymentReq0Method1,
		CapturePaymentReq0Method2,
		CapturePaymentReq0Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentReq0Method) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentReq0Method1:
		return []byte(s), nil
	case CapturePaymentReq0Method2:
		return []byte(s), nil
	case CapturePaymentReq0Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentReq0Method) UnmarshalText(data []byte) error {
	switch CapturePaymentReq0Method(data) {
	case CapturePaymentReq0Method1:
		*s = CapturePaymentReq0Method1
		return nil
	case CapturePaymentReq0Method2:
		*s = CapturePaymentReq0Method2
		return nil
	case CapturePaymentReq0Method5:
		*s = CapturePaymentReq0Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type CapturePaymentReq0PayTimes string

const (
	CapturePaymentReq0PayTimes3  CapturePaymentReq0PayTimes = "3"
	CapturePaymentReq0PayTimes5  CapturePaymentReq0PayTimes = "5"
	CapturePaymentReq0PayTimes6  CapturePaymentReq0PayTimes = "6"
	CapturePaymentReq0PayTimes10 CapturePaymentReq0PayTimes = "10"
	CapturePaymentReq0PayTimes12 CapturePaymentReq0PayTimes = "12"
	CapturePaymentReq0PayTimes15 CapturePaymentReq0PayTimes = "15"
	CapturePaymentReq0PayTimes18 CapturePaymentReq0PayTimes = "18"
	CapturePaymentReq0PayTimes20 CapturePaymentReq0PayTimes = "20"
	CapturePaymentReq0PayTimes24 CapturePaymentReq0PayTimes = "24"
)

// AllValues returns all CapturePaymentReq0PayTimes values.
func (CapturePaymentReq0PayTimes) AllValues() []CapturePaymentReq0PayTimes {
	return []CapturePaymentReq0PayTimes{
		CapturePaymentReq0PayTimes3,
		CapturePaymentReq0PayTimes5,
		CapturePaymentReq0PayTimes6,
		CapturePaymentReq0PayTimes10,
		CapturePaymentReq0PayTimes12,
		CapturePaymentReq0PayTimes15,
		CapturePaymentReq0PayTimes18,
		CapturePaymentReq0PayTimes20,
		CapturePaymentReq0PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentReq0PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentReq0PayTimes3:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes5:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes6:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes10:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes12:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes15:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes18:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes20:
		return []byte(s), nil
	case CapturePaymentReq0PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentReq0PayTimes) UnmarshalText(data []byte) error {
	switch CapturePaymentReq0PayTimes(data) {
	case CapturePaymentReq0PayTimes3:
		*s = CapturePaymentReq0PayTimes3
		return nil
	case CapturePaymentReq0PayTimes5:
		*s = CapturePaymentReq0PayTimes5
		return nil
	case CapturePaymentReq0PayTimes6:
		*s = CapturePaymentReq0PayTimes6
		return nil
	case CapturePaymentReq0PayTimes10:
		*s = CapturePaymentReq0PayTimes10
		return nil
	case CapturePaymentReq0PayTimes12:
		*s = CapturePaymentReq0PayTimes12
		return nil
	case CapturePaymentReq0PayTimes15:
		*s = CapturePaymentReq0PayTimes15
		return nil
	case CapturePaymentReq0PayTimes18:
		*s = CapturePaymentReq0PayTimes18
		return nil
	case CapturePaymentReq0PayTimes20:
		*s = CapturePaymentReq0PayTimes20
		return nil
	case CapturePaymentReq0PayTimes24:
		*s = CapturePaymentReq0PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CapturePaymentReq0PayType string

const (
	CapturePaymentReq0PayTypeCard           CapturePaymentReq0PayType = "Card"
	CapturePaymentReq0PayTypeKonbini        CapturePaymentReq0PayType = "Konbini"
	CapturePaymentReq0PayTypePaypay         CapturePaymentReq0PayType = "Paypay"
	CapturePaymentReq0PayTypeApplepay       CapturePaymentReq0PayType = "Applepay"
	CapturePaymentReq0PayTypeDirectdebit    CapturePaymentReq0PayType = "Directdebit"
	CapturePaymentReq0PayTypeVirtualaccount CapturePaymentReq0PayType = "Virtualaccount"
)

// AllValues returns all CapturePaymentReq0PayType values.
func (CapturePaymentReq0PayType) AllValues() []CapturePaymentReq0PayType {
	return []CapturePaymentReq0PayType{
		CapturePaymentReq0PayTypeCard,
		CapturePaymentReq0PayTypeKonbini,
		CapturePaymentReq0PayTypePaypay,
		CapturePaymentReq0PayTypeApplepay,
		CapturePaymentReq0PayTypeDirectdebit,
		CapturePaymentReq0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentReq0PayType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentReq0PayTypeCard:
		return []byte(s), nil
	case CapturePaymentReq0PayTypeKonbini:
		return []byte(s), nil
	case CapturePaymentReq0PayTypePaypay:
		return []byte(s), nil
	case CapturePaymentReq0PayTypeApplepay:
		return []byte(s), nil
	case CapturePaymentReq0PayTypeDirectdebit:
		return []byte(s), nil
	case CapturePaymentReq0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentReq0PayType) UnmarshalText(data []byte) error {
	switch CapturePaymentReq0PayType(data) {
	case CapturePaymentReq0PayTypeCard:
		*s = CapturePaymentReq0PayTypeCard
		return nil
	case CapturePaymentReq0PayTypeKonbini:
		*s = CapturePaymentReq0PayTypeKonbini
		return nil
	case CapturePaymentReq0PayTypePaypay:
		*s = CapturePaymentReq0PayTypePaypay
		return nil
	case CapturePaymentReq0PayTypeApplepay:
		*s = CapturePaymentReq0PayTypeApplepay
		return nil
	case CapturePaymentReq0PayTypeDirectdebit:
		*s = CapturePaymentReq0PayTypeDirectdebit
		return nil
	case CapturePaymentReq0PayTypeVirtualaccount:
		*s = CapturePaymentReq0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CapturePaymentReq1 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType  CapturePaymentReq1PayType `json:"pay_type"`
	AccessID string                    `json:"access_id"`
}

// GetPayType returns the value of PayType.
func (s *CapturePaymentReq1) GetPayType() CapturePaymentReq1PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *CapturePaymentReq1) GetAccessID() string {
	return s.AccessID
}

// SetPayType sets the value of PayType.
func (s *CapturePaymentReq1) SetPayType(val CapturePaymentReq1PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *CapturePaymentReq1) SetAccessID(val string) {
	s.AccessID = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CapturePaymentReq1PayType string

const (
	CapturePaymentReq1PayTypeCard           CapturePaymentReq1PayType = "Card"
	CapturePaymentReq1PayTypeKonbini        CapturePaymentReq1PayType = "Konbini"
	CapturePaymentReq1PayTypePaypay         CapturePaymentReq1PayType = "Paypay"
	CapturePaymentReq1PayTypeApplepay       CapturePaymentReq1PayType = "Applepay"
	CapturePaymentReq1PayTypeDirectdebit    CapturePaymentReq1PayType = "Directdebit"
	CapturePaymentReq1PayTypeVirtualaccount CapturePaymentReq1PayType = "Virtualaccount"
)

// AllValues returns all CapturePaymentReq1PayType values.
func (CapturePaymentReq1PayType) AllValues() []CapturePaymentReq1PayType {
	return []CapturePaymentReq1PayType{
		CapturePaymentReq1PayTypeCard,
		CapturePaymentReq1PayTypeKonbini,
		CapturePaymentReq1PayTypePaypay,
		CapturePaymentReq1PayTypeApplepay,
		CapturePaymentReq1PayTypeDirectdebit,
		CapturePaymentReq1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentReq1PayType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentReq1PayTypeCard:
		return []byte(s), nil
	case CapturePaymentReq1PayTypeKonbini:
		return []byte(s), nil
	case CapturePaymentReq1PayTypePaypay:
		return []byte(s), nil
	case CapturePaymentReq1PayTypeApplepay:
		return []byte(s), nil
	case CapturePaymentReq1PayTypeDirectdebit:
		return []byte(s), nil
	case CapturePaymentReq1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentReq1PayType) UnmarshalText(data []byte) error {
	switch CapturePaymentReq1PayType(data) {
	case CapturePaymentReq1PayTypeCard:
		*s = CapturePaymentReq1PayTypeCard
		return nil
	case CapturePaymentReq1PayTypeKonbini:
		*s = CapturePaymentReq1PayTypeKonbini
		return nil
	case CapturePaymentReq1PayTypePaypay:
		*s = CapturePaymentReq1PayTypePaypay
		return nil
	case CapturePaymentReq1PayTypeApplepay:
		*s = CapturePaymentReq1PayTypeApplepay
		return nil
	case CapturePaymentReq1PayTypeDirectdebit:
		*s = CapturePaymentReq1PayTypeDirectdebit
		return nil
	case CapturePaymentReq1PayTypeVirtualaccount:
		*s = CapturePaymentReq1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CapturePaymentReq2 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType            CapturePaymentReq2PayType `json:"pay_type"`
	AccessID           string                    `json:"access_id"`
	CaptureDescription *NilString                `json:"capture_description"`
}

// GetPayType returns the value of PayType.
func (s *CapturePaymentReq2) GetPayType() CapturePaymentReq2PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *CapturePaymentReq2) GetAccessID() string {
	return s.AccessID
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *CapturePaymentReq2) GetCaptureDescription() *NilString {
	return s.CaptureDescription
}

// SetPayType sets the value of PayType.
func (s *CapturePaymentReq2) SetPayType(val CapturePaymentReq2PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *CapturePaymentReq2) SetAccessID(val string) {
	s.AccessID = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *CapturePaymentReq2) SetCaptureDescription(val *NilString) {
	s.CaptureDescription = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CapturePaymentReq2PayType string

const (
	CapturePaymentReq2PayTypeCard           CapturePaymentReq2PayType = "Card"
	CapturePaymentReq2PayTypeKonbini        CapturePaymentReq2PayType = "Konbini"
	CapturePaymentReq2PayTypePaypay         CapturePaymentReq2PayType = "Paypay"
	CapturePaymentReq2PayTypeApplepay       CapturePaymentReq2PayType = "Applepay"
	CapturePaymentReq2PayTypeDirectdebit    CapturePaymentReq2PayType = "Directdebit"
	CapturePaymentReq2PayTypeVirtualaccount CapturePaymentReq2PayType = "Virtualaccount"
)

// AllValues returns all CapturePaymentReq2PayType values.
func (CapturePaymentReq2PayType) AllValues() []CapturePaymentReq2PayType {
	return []CapturePaymentReq2PayType{
		CapturePaymentReq2PayTypeCard,
		CapturePaymentReq2PayTypeKonbini,
		CapturePaymentReq2PayTypePaypay,
		CapturePaymentReq2PayTypeApplepay,
		CapturePaymentReq2PayTypeDirectdebit,
		CapturePaymentReq2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CapturePaymentReq2PayType) MarshalText() ([]byte, error) {
	switch s {
	case CapturePaymentReq2PayTypeCard:
		return []byte(s), nil
	case CapturePaymentReq2PayTypeKonbini:
		return []byte(s), nil
	case CapturePaymentReq2PayTypePaypay:
		return []byte(s), nil
	case CapturePaymentReq2PayTypeApplepay:
		return []byte(s), nil
	case CapturePaymentReq2PayTypeDirectdebit:
		return []byte(s), nil
	case CapturePaymentReq2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CapturePaymentReq2PayType) UnmarshalText(data []byte) error {
	switch CapturePaymentReq2PayType(data) {
	case CapturePaymentReq2PayTypeCard:
		*s = CapturePaymentReq2PayTypeCard
		return nil
	case CapturePaymentReq2PayTypeKonbini:
		*s = CapturePaymentReq2PayTypeKonbini
		return nil
	case CapturePaymentReq2PayTypePaypay:
		*s = CapturePaymentReq2PayTypePaypay
		return nil
	case CapturePaymentReq2PayTypeApplepay:
		*s = CapturePaymentReq2PayTypeApplepay
		return nil
	case CapturePaymentReq2PayTypeDirectdebit:
		*s = CapturePaymentReq2PayTypeDirectdebit
		return nil
	case CapturePaymentReq2PayTypeVirtualaccount:
		*s = CapturePaymentReq2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Card
type Card struct {
	// カードID.
	ID OptString `json:"id"`
	// 顧客ID\
	// このカードが紐づく顧客のID.
	CustomerID OptString `json:"customer_id"`
	// デフォルトフラグ。\
	// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
	// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
	// - `0`: デフォルトカードではない
	// - `1`: デフォルトカード.
	DefaultFlag OptCardDefaultFlag `json:"default_flag"`
	CardNo      OptString          `json:"card_no"`
	Expire      *NilString         `json:"expire"`
	HolderName  *NilString         `json:"holder_name"`
	Type        OptCardType        `json:"type"`
	Brand       OptCardBrand       `json:"brand"`
	CardNoHash  OptString          `json:"card_no_hash"`
	Created     OptString          `json:"created"`
	Updated     *NilString         `json:"updated"`
}

// GetID returns the value of ID.
func (s *Card) GetID() OptString {
	return s.ID
}

// GetCustomerID returns the value of CustomerID.
func (s *Card) GetCustomerID() OptString {
	return s.CustomerID
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *Card) GetDefaultFlag() OptCardDefaultFlag {
	return s.DefaultFlag
}

// GetCardNo returns the value of CardNo.
func (s *Card) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *Card) GetExpire() *NilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *Card) GetHolderName() *NilString {
	return s.HolderName
}

// GetType returns the value of Type.
func (s *Card) GetType() OptCardType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *Card) GetBrand() OptCardBrand {
	return s.Brand
}

// GetCardNoHash returns the value of CardNoHash.
func (s *Card) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetCreated returns the value of Created.
func (s *Card) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *Card) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *Card) SetID(val OptString) {
	s.ID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *Card) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *Card) SetDefaultFlag(val OptCardDefaultFlag) {
	s.DefaultFlag = val
}

// SetCardNo sets the value of CardNo.
func (s *Card) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *Card) SetExpire(val *NilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *Card) SetHolderName(val *NilString) {
	s.HolderName = val
}

// SetType sets the value of Type.
func (s *Card) SetType(val OptCardType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *Card) SetBrand(val OptCardBrand) {
	s.Brand = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *Card) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetCreated sets the value of Created.
func (s *Card) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *Card) SetUpdated(val *NilString) {
	s.Updated = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CardBrand string

const (
	CardBrandVISA     CardBrand = "VISA"
	CardBrandMASTER   CardBrand = "MASTER"
	CardBrandJCB      CardBrand = "JCB"
	CardBrandAMEX     CardBrand = "AMEX"
	CardBrandDINERS   CardBrand = "DINERS"
	CardBrandDISCOVER CardBrand = "DISCOVER"
	CardBrandEmpty    CardBrand = ""
)

// AllValues returns all CardBrand values.
func (CardBrand) AllValues() []CardBrand {
	return []CardBrand{
		CardBrandVISA,
		CardBrandMASTER,
		CardBrandJCB,
		CardBrandAMEX,
		CardBrandDINERS,
		CardBrandDISCOVER,
		CardBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardBrand) MarshalText() ([]byte, error) {
	switch s {
	case CardBrandVISA:
		return []byte(s), nil
	case CardBrandMASTER:
		return []byte(s), nil
	case CardBrandJCB:
		return []byte(s), nil
	case CardBrandAMEX:
		return []byte(s), nil
	case CardBrandDINERS:
		return []byte(s), nil
	case CardBrandDISCOVER:
		return []byte(s), nil
	case CardBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardBrand) UnmarshalText(data []byte) error {
	switch CardBrand(data) {
	case CardBrandVISA:
		*s = CardBrandVISA
		return nil
	case CardBrandMASTER:
		*s = CardBrandMASTER
		return nil
	case CardBrandJCB:
		*s = CardBrandJCB
		return nil
	case CardBrandAMEX:
		*s = CardBrandAMEX
		return nil
	case CardBrandDINERS:
		*s = CardBrandDINERS
		return nil
	case CardBrandDISCOVER:
		*s = CardBrandDISCOVER
		return nil
	case CardBrandEmpty:
		*s = CardBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type CardDefaultFlag string

const (
	CardDefaultFlag0 CardDefaultFlag = "0"
	CardDefaultFlag1 CardDefaultFlag = "1"
)

// AllValues returns all CardDefaultFlag values.
func (CardDefaultFlag) AllValues() []CardDefaultFlag {
	return []CardDefaultFlag{
		CardDefaultFlag0,
		CardDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CardDefaultFlag0:
		return []byte(s), nil
	case CardDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardDefaultFlag) UnmarshalText(data []byte) error {
	switch CardDefaultFlag(data) {
	case CardDefaultFlag0:
		*s = CardDefaultFlag0
		return nil
	case CardDefaultFlag1:
		*s = CardDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済URL上でカード決済を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする（デフォルト）
// - `CAPTURE`：即時売上.
// Ref: #/components/schemas/CardPaymentSessionJobCode
type CardPaymentSessionJobCode string

const (
	CardPaymentSessionJobCodeAUTH    CardPaymentSessionJobCode = "AUTH"
	CardPaymentSessionJobCodeCAPTURE CardPaymentSessionJobCode = "CAPTURE"
)

// AllValues returns all CardPaymentSessionJobCode values.
func (CardPaymentSessionJobCode) AllValues() []CardPaymentSessionJobCode {
	return []CardPaymentSessionJobCode{
		CardPaymentSessionJobCodeAUTH,
		CardPaymentSessionJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardPaymentSessionJobCode) MarshalText() ([]byte, error) {
	switch s {
	case CardPaymentSessionJobCodeAUTH:
		return []byte(s), nil
	case CardPaymentSessionJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardPaymentSessionJobCode) UnmarshalText(data []byte) error {
	switch CardPaymentSessionJobCode(data) {
	case CardPaymentSessionJobCodeAUTH:
		*s = CardPaymentSessionJobCodeAUTH
		return nil
	case CardPaymentSessionJobCodeCAPTURE:
		*s = CardPaymentSessionJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CardRegistrationSession.Creating.Request
type CardRegistrationSessionCreatingRequest struct {
	SuccessURL                *NilString                                                          `json:"success_url"`
	CancelURL                 *NilString                                                          `json:"cancel_url"`
	Expire                    OptString                                                           `json:"expire"`
	ShopServiceName           *NilString                                                          `json:"shop_service_name"`
	ReceiverMail              *NilString                                                          `json:"receiver_mail"`
	MailCustomerName          *NilString                                                          `json:"mail_customer_name"`
	GuideMailSendFlag         OptCardRegistrationSessionCreatingRequestGuideMailSendFlag          `json:"guide_mail_send_flag"`
	CompletionMailSendFlag    OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag     `json:"completion_mail_send_flag"`
	ShopMailTemplateID        *NilString                                                          `json:"shop_mail_template_id"`
	CustomerID                OptString                                                           `json:"customer_id"`
	CustomerName              *NilString                                                          `json:"customer_name"`
	TdTenantName              OptString                                                           `json:"td_tenant_name"`
	TdsType                   *NilCardRegistrationSessionCreatingRequestTdsType                   `json:"tds_type"`
	Tds2Type                  *NilCardRegistrationSessionCreatingRequestTds2Type                  `json:"tds2_type"`
	Tds2ChAccChange           *NilString                                                          `json:"tds2_ch_acc_change"`
	Tds2ChAccDate             *NilString                                                          `json:"tds2_ch_acc_date"`
	Tds2ChAccPwChange         *NilString                                                          `json:"tds2_ch_acc_pw_change"`
	Tds2NbPurchaseAccount     *NilString                                                          `json:"tds2_nb_purchase_account"`
	Tds2PaymentAccAge         *NilString                                                          `json:"tds2_payment_acc_age"`
	Tds2ProvisionAttemptsDay  *NilString                                                          `json:"tds2_provision_attempts_day"`
	Tds2ShipAddressUsage      *NilString                                                          `json:"tds2_ship_address_usage"`
	Tds2ShipNameInd           *NilCardRegistrationSessionCreatingRequestTds2ShipNameInd           `json:"tds2_ship_name_ind"`
	Tds2SuspiciousAccActivity *NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity `json:"tds2_suspicious_acc_activity"`
	Tds2TxnActivityDay        *NilString                                                          `json:"tds2_txn_activity_day"`
	Tds2TxnActivityYear       *NilString                                                          `json:"tds2_txn_activity_year"`
	Tds2ThreeDsReqAuthData    *NilString                                                          `json:"tds2_three_ds_req_auth_data"`
	Tds2ThreeDsReqAuthMethod  *NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod  `json:"tds2_three_ds_req_auth_method"`
	Tds2AddrMatch             *NilCardRegistrationSessionCreatingRequestTds2AddrMatch             `json:"tds2_addr_match"`
	Tds2BillAddrCountry       *NilString                                                          `json:"tds2_bill_addr_country"`
	Tds2BillAddrState         *NilString                                                          `json:"tds2_bill_addr_state"`
	Tds2BillAddrCity          *NilString                                                          `json:"tds2_bill_addr_city"`
	Tds2BillAddrLine1         *NilString                                                          `json:"tds2_bill_addr_line_1"`
	Tds2BillAddrLine2         *NilString                                                          `json:"tds2_bill_addr_line_2"`
	Tds2BillAddrLine3         OptString                                                           `json:"tds2_bill_addr_line_3"`
	Tds2BillAddrPostCode      *NilString                                                          `json:"tds2_bill_addr_post_code"`
	Tds2ShipAddrCountry       *NilString                                                          `json:"tds2_ship_addr_country"`
	Tds2ShipAddrState         *NilString                                                          `json:"tds2_ship_addr_state"`
	Tds2ShipAddrCity          *NilString                                                          `json:"tds2_ship_addr_city"`
	Tds2ShipAddrLine1         *NilString                                                          `json:"tds2_ship_addr_line_1"`
	Tds2ShipAddrLine2         *NilString                                                          `json:"tds2_ship_addr_line_2"`
	Tds2ShipAddrLine3         *NilString                                                          `json:"tds2_ship_addr_line_3"`
	Tds2ShipAddrPostCode      *NilString                                                          `json:"tds2_ship_addr_post_code"`
	Tds2ShipInd               *NilCardRegistrationSessionCreatingRequestTds2ShipInd               `json:"tds2_ship_ind"`
	Tds2DeliveryEmailAddress  *NilString                                                          `json:"tds2_delivery_email_address"`
	Tds2HomePhoneCc           *NilString                                                          `json:"tds2_home_phone_cc"`
	Tds2HomePhoneNo           *NilString                                                          `json:"tds2_home_phone_no"`
	Tds2MobilePhoneCc         *NilString                                                          `json:"tds2_mobile_phone_cc"`
	Tds2MobilePhoneNo         *NilString                                                          `json:"tds2_mobile_phone_no"`
	Tds2WorkPhoneCc           *NilString                                                          `json:"tds2_work_phone_cc"`
	Tds2WorkPhoneNo           *NilString                                                          `json:"tds2_work_phone_no"`
	Tds2DeliveryTimeframe     *NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe     `json:"tds2_delivery_timeframe"`
	Tds2PreOrderDate          *NilString                                                          `json:"tds2_pre_order_date"`
	Tds2PreOrderPurchaseInd   *NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd   `json:"tds2_pre_order_purchase_ind"`
	Tds2ReorderItemsInd       *NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd       `json:"tds2_reorder_items_ind"`
	Tds2RecurringExpiry       *NilString                                                          `json:"tds2_recurring_expiry"`
	Tds2RecurringFrequency    *NilString                                                          `json:"tds2_recurring_frequency"`
	Tds2GiftCardAmount        *NilString                                                          `json:"tds2_gift_card_amount"`
	Tds2GiftCardCount         *NilString                                                          `json:"tds2_gift_card_count"`
	Tds2GiftCardCurr          *NilString                                                          `json:"tds2_gift_card_curr"`
}

// GetSuccessURL returns the value of SuccessURL.
func (s *CardRegistrationSessionCreatingRequest) GetSuccessURL() *NilString {
	return s.SuccessURL
}

// GetCancelURL returns the value of CancelURL.
func (s *CardRegistrationSessionCreatingRequest) GetCancelURL() *NilString {
	return s.CancelURL
}

// GetExpire returns the value of Expire.
func (s *CardRegistrationSessionCreatingRequest) GetExpire() OptString {
	return s.Expire
}

// GetShopServiceName returns the value of ShopServiceName.
func (s *CardRegistrationSessionCreatingRequest) GetShopServiceName() *NilString {
	return s.ShopServiceName
}

// GetReceiverMail returns the value of ReceiverMail.
func (s *CardRegistrationSessionCreatingRequest) GetReceiverMail() *NilString {
	return s.ReceiverMail
}

// GetMailCustomerName returns the value of MailCustomerName.
func (s *CardRegistrationSessionCreatingRequest) GetMailCustomerName() *NilString {
	return s.MailCustomerName
}

// GetGuideMailSendFlag returns the value of GuideMailSendFlag.
func (s *CardRegistrationSessionCreatingRequest) GetGuideMailSendFlag() OptCardRegistrationSessionCreatingRequestGuideMailSendFlag {
	return s.GuideMailSendFlag
}

// GetCompletionMailSendFlag returns the value of CompletionMailSendFlag.
func (s *CardRegistrationSessionCreatingRequest) GetCompletionMailSendFlag() OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag {
	return s.CompletionMailSendFlag
}

// GetShopMailTemplateID returns the value of ShopMailTemplateID.
func (s *CardRegistrationSessionCreatingRequest) GetShopMailTemplateID() *NilString {
	return s.ShopMailTemplateID
}

// GetCustomerID returns the value of CustomerID.
func (s *CardRegistrationSessionCreatingRequest) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCustomerName returns the value of CustomerName.
func (s *CardRegistrationSessionCreatingRequest) GetCustomerName() *NilString {
	return s.CustomerName
}

// GetTdTenantName returns the value of TdTenantName.
func (s *CardRegistrationSessionCreatingRequest) GetTdTenantName() OptString {
	return s.TdTenantName
}

// GetTdsType returns the value of TdsType.
func (s *CardRegistrationSessionCreatingRequest) GetTdsType() *NilCardRegistrationSessionCreatingRequestTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *CardRegistrationSessionCreatingRequest) GetTds2Type() *NilCardRegistrationSessionCreatingRequestTds2Type {
	return s.Tds2Type
}

// GetTds2ChAccChange returns the value of Tds2ChAccChange.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ChAccChange() *NilString {
	return s.Tds2ChAccChange
}

// GetTds2ChAccDate returns the value of Tds2ChAccDate.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ChAccDate() *NilString {
	return s.Tds2ChAccDate
}

// GetTds2ChAccPwChange returns the value of Tds2ChAccPwChange.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ChAccPwChange() *NilString {
	return s.Tds2ChAccPwChange
}

// GetTds2NbPurchaseAccount returns the value of Tds2NbPurchaseAccount.
func (s *CardRegistrationSessionCreatingRequest) GetTds2NbPurchaseAccount() *NilString {
	return s.Tds2NbPurchaseAccount
}

// GetTds2PaymentAccAge returns the value of Tds2PaymentAccAge.
func (s *CardRegistrationSessionCreatingRequest) GetTds2PaymentAccAge() *NilString {
	return s.Tds2PaymentAccAge
}

// GetTds2ProvisionAttemptsDay returns the value of Tds2ProvisionAttemptsDay.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ProvisionAttemptsDay() *NilString {
	return s.Tds2ProvisionAttemptsDay
}

// GetTds2ShipAddressUsage returns the value of Tds2ShipAddressUsage.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddressUsage() *NilString {
	return s.Tds2ShipAddressUsage
}

// GetTds2ShipNameInd returns the value of Tds2ShipNameInd.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipNameInd() *NilCardRegistrationSessionCreatingRequestTds2ShipNameInd {
	return s.Tds2ShipNameInd
}

// GetTds2SuspiciousAccActivity returns the value of Tds2SuspiciousAccActivity.
func (s *CardRegistrationSessionCreatingRequest) GetTds2SuspiciousAccActivity() *NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity {
	return s.Tds2SuspiciousAccActivity
}

// GetTds2TxnActivityDay returns the value of Tds2TxnActivityDay.
func (s *CardRegistrationSessionCreatingRequest) GetTds2TxnActivityDay() *NilString {
	return s.Tds2TxnActivityDay
}

// GetTds2TxnActivityYear returns the value of Tds2TxnActivityYear.
func (s *CardRegistrationSessionCreatingRequest) GetTds2TxnActivityYear() *NilString {
	return s.Tds2TxnActivityYear
}

// GetTds2ThreeDsReqAuthData returns the value of Tds2ThreeDsReqAuthData.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ThreeDsReqAuthData() *NilString {
	return s.Tds2ThreeDsReqAuthData
}

// GetTds2ThreeDsReqAuthMethod returns the value of Tds2ThreeDsReqAuthMethod.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ThreeDsReqAuthMethod() *NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod {
	return s.Tds2ThreeDsReqAuthMethod
}

// GetTds2AddrMatch returns the value of Tds2AddrMatch.
func (s *CardRegistrationSessionCreatingRequest) GetTds2AddrMatch() *NilCardRegistrationSessionCreatingRequestTds2AddrMatch {
	return s.Tds2AddrMatch
}

// GetTds2BillAddrCountry returns the value of Tds2BillAddrCountry.
func (s *CardRegistrationSessionCreatingRequest) GetTds2BillAddrCountry() *NilString {
	return s.Tds2BillAddrCountry
}

// GetTds2BillAddrState returns the value of Tds2BillAddrState.
func (s *CardRegistrationSessionCreatingRequest) GetTds2BillAddrState() *NilString {
	return s.Tds2BillAddrState
}

// GetTds2BillAddrCity returns the value of Tds2BillAddrCity.
func (s *CardRegistrationSessionCreatingRequest) GetTds2BillAddrCity() *NilString {
	return s.Tds2BillAddrCity
}

// GetTds2BillAddrLine1 returns the value of Tds2BillAddrLine1.
func (s *CardRegistrationSessionCreatingRequest) GetTds2BillAddrLine1() *NilString {
	return s.Tds2BillAddrLine1
}

// GetTds2BillAddrLine2 returns the value of Tds2BillAddrLine2.
func (s *CardRegistrationSessionCreatingRequest) GetTds2BillAddrLine2() *NilString {
	return s.Tds2BillAddrLine2
}

// GetTds2BillAddrLine3 returns the value of Tds2BillAddrLine3.
func (s *CardRegistrationSessionCreatingRequest) GetTds2BillAddrLine3() OptString {
	return s.Tds2BillAddrLine3
}

// GetTds2BillAddrPostCode returns the value of Tds2BillAddrPostCode.
func (s *CardRegistrationSessionCreatingRequest) GetTds2BillAddrPostCode() *NilString {
	return s.Tds2BillAddrPostCode
}

// GetTds2ShipAddrCountry returns the value of Tds2ShipAddrCountry.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddrCountry() *NilString {
	return s.Tds2ShipAddrCountry
}

// GetTds2ShipAddrState returns the value of Tds2ShipAddrState.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddrState() *NilString {
	return s.Tds2ShipAddrState
}

// GetTds2ShipAddrCity returns the value of Tds2ShipAddrCity.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddrCity() *NilString {
	return s.Tds2ShipAddrCity
}

// GetTds2ShipAddrLine1 returns the value of Tds2ShipAddrLine1.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddrLine1() *NilString {
	return s.Tds2ShipAddrLine1
}

// GetTds2ShipAddrLine2 returns the value of Tds2ShipAddrLine2.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddrLine2() *NilString {
	return s.Tds2ShipAddrLine2
}

// GetTds2ShipAddrLine3 returns the value of Tds2ShipAddrLine3.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddrLine3() *NilString {
	return s.Tds2ShipAddrLine3
}

// GetTds2ShipAddrPostCode returns the value of Tds2ShipAddrPostCode.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipAddrPostCode() *NilString {
	return s.Tds2ShipAddrPostCode
}

// GetTds2ShipInd returns the value of Tds2ShipInd.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ShipInd() *NilCardRegistrationSessionCreatingRequestTds2ShipInd {
	return s.Tds2ShipInd
}

// GetTds2DeliveryEmailAddress returns the value of Tds2DeliveryEmailAddress.
func (s *CardRegistrationSessionCreatingRequest) GetTds2DeliveryEmailAddress() *NilString {
	return s.Tds2DeliveryEmailAddress
}

// GetTds2HomePhoneCc returns the value of Tds2HomePhoneCc.
func (s *CardRegistrationSessionCreatingRequest) GetTds2HomePhoneCc() *NilString {
	return s.Tds2HomePhoneCc
}

// GetTds2HomePhoneNo returns the value of Tds2HomePhoneNo.
func (s *CardRegistrationSessionCreatingRequest) GetTds2HomePhoneNo() *NilString {
	return s.Tds2HomePhoneNo
}

// GetTds2MobilePhoneCc returns the value of Tds2MobilePhoneCc.
func (s *CardRegistrationSessionCreatingRequest) GetTds2MobilePhoneCc() *NilString {
	return s.Tds2MobilePhoneCc
}

// GetTds2MobilePhoneNo returns the value of Tds2MobilePhoneNo.
func (s *CardRegistrationSessionCreatingRequest) GetTds2MobilePhoneNo() *NilString {
	return s.Tds2MobilePhoneNo
}

// GetTds2WorkPhoneCc returns the value of Tds2WorkPhoneCc.
func (s *CardRegistrationSessionCreatingRequest) GetTds2WorkPhoneCc() *NilString {
	return s.Tds2WorkPhoneCc
}

// GetTds2WorkPhoneNo returns the value of Tds2WorkPhoneNo.
func (s *CardRegistrationSessionCreatingRequest) GetTds2WorkPhoneNo() *NilString {
	return s.Tds2WorkPhoneNo
}

// GetTds2DeliveryTimeframe returns the value of Tds2DeliveryTimeframe.
func (s *CardRegistrationSessionCreatingRequest) GetTds2DeliveryTimeframe() *NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe {
	return s.Tds2DeliveryTimeframe
}

// GetTds2PreOrderDate returns the value of Tds2PreOrderDate.
func (s *CardRegistrationSessionCreatingRequest) GetTds2PreOrderDate() *NilString {
	return s.Tds2PreOrderDate
}

// GetTds2PreOrderPurchaseInd returns the value of Tds2PreOrderPurchaseInd.
func (s *CardRegistrationSessionCreatingRequest) GetTds2PreOrderPurchaseInd() *NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd {
	return s.Tds2PreOrderPurchaseInd
}

// GetTds2ReorderItemsInd returns the value of Tds2ReorderItemsInd.
func (s *CardRegistrationSessionCreatingRequest) GetTds2ReorderItemsInd() *NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd {
	return s.Tds2ReorderItemsInd
}

// GetTds2RecurringExpiry returns the value of Tds2RecurringExpiry.
func (s *CardRegistrationSessionCreatingRequest) GetTds2RecurringExpiry() *NilString {
	return s.Tds2RecurringExpiry
}

// GetTds2RecurringFrequency returns the value of Tds2RecurringFrequency.
func (s *CardRegistrationSessionCreatingRequest) GetTds2RecurringFrequency() *NilString {
	return s.Tds2RecurringFrequency
}

// GetTds2GiftCardAmount returns the value of Tds2GiftCardAmount.
func (s *CardRegistrationSessionCreatingRequest) GetTds2GiftCardAmount() *NilString {
	return s.Tds2GiftCardAmount
}

// GetTds2GiftCardCount returns the value of Tds2GiftCardCount.
func (s *CardRegistrationSessionCreatingRequest) GetTds2GiftCardCount() *NilString {
	return s.Tds2GiftCardCount
}

// GetTds2GiftCardCurr returns the value of Tds2GiftCardCurr.
func (s *CardRegistrationSessionCreatingRequest) GetTds2GiftCardCurr() *NilString {
	return s.Tds2GiftCardCurr
}

// SetSuccessURL sets the value of SuccessURL.
func (s *CardRegistrationSessionCreatingRequest) SetSuccessURL(val *NilString) {
	s.SuccessURL = val
}

// SetCancelURL sets the value of CancelURL.
func (s *CardRegistrationSessionCreatingRequest) SetCancelURL(val *NilString) {
	s.CancelURL = val
}

// SetExpire sets the value of Expire.
func (s *CardRegistrationSessionCreatingRequest) SetExpire(val OptString) {
	s.Expire = val
}

// SetShopServiceName sets the value of ShopServiceName.
func (s *CardRegistrationSessionCreatingRequest) SetShopServiceName(val *NilString) {
	s.ShopServiceName = val
}

// SetReceiverMail sets the value of ReceiverMail.
func (s *CardRegistrationSessionCreatingRequest) SetReceiverMail(val *NilString) {
	s.ReceiverMail = val
}

// SetMailCustomerName sets the value of MailCustomerName.
func (s *CardRegistrationSessionCreatingRequest) SetMailCustomerName(val *NilString) {
	s.MailCustomerName = val
}

// SetGuideMailSendFlag sets the value of GuideMailSendFlag.
func (s *CardRegistrationSessionCreatingRequest) SetGuideMailSendFlag(val OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) {
	s.GuideMailSendFlag = val
}

// SetCompletionMailSendFlag sets the value of CompletionMailSendFlag.
func (s *CardRegistrationSessionCreatingRequest) SetCompletionMailSendFlag(val OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) {
	s.CompletionMailSendFlag = val
}

// SetShopMailTemplateID sets the value of ShopMailTemplateID.
func (s *CardRegistrationSessionCreatingRequest) SetShopMailTemplateID(val *NilString) {
	s.ShopMailTemplateID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CardRegistrationSessionCreatingRequest) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCustomerName sets the value of CustomerName.
func (s *CardRegistrationSessionCreatingRequest) SetCustomerName(val *NilString) {
	s.CustomerName = val
}

// SetTdTenantName sets the value of TdTenantName.
func (s *CardRegistrationSessionCreatingRequest) SetTdTenantName(val OptString) {
	s.TdTenantName = val
}

// SetTdsType sets the value of TdsType.
func (s *CardRegistrationSessionCreatingRequest) SetTdsType(val *NilCardRegistrationSessionCreatingRequestTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CardRegistrationSessionCreatingRequest) SetTds2Type(val *NilCardRegistrationSessionCreatingRequestTds2Type) {
	s.Tds2Type = val
}

// SetTds2ChAccChange sets the value of Tds2ChAccChange.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ChAccChange(val *NilString) {
	s.Tds2ChAccChange = val
}

// SetTds2ChAccDate sets the value of Tds2ChAccDate.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ChAccDate(val *NilString) {
	s.Tds2ChAccDate = val
}

// SetTds2ChAccPwChange sets the value of Tds2ChAccPwChange.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ChAccPwChange(val *NilString) {
	s.Tds2ChAccPwChange = val
}

// SetTds2NbPurchaseAccount sets the value of Tds2NbPurchaseAccount.
func (s *CardRegistrationSessionCreatingRequest) SetTds2NbPurchaseAccount(val *NilString) {
	s.Tds2NbPurchaseAccount = val
}

// SetTds2PaymentAccAge sets the value of Tds2PaymentAccAge.
func (s *CardRegistrationSessionCreatingRequest) SetTds2PaymentAccAge(val *NilString) {
	s.Tds2PaymentAccAge = val
}

// SetTds2ProvisionAttemptsDay sets the value of Tds2ProvisionAttemptsDay.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ProvisionAttemptsDay(val *NilString) {
	s.Tds2ProvisionAttemptsDay = val
}

// SetTds2ShipAddressUsage sets the value of Tds2ShipAddressUsage.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddressUsage(val *NilString) {
	s.Tds2ShipAddressUsage = val
}

// SetTds2ShipNameInd sets the value of Tds2ShipNameInd.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipNameInd(val *NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) {
	s.Tds2ShipNameInd = val
}

// SetTds2SuspiciousAccActivity sets the value of Tds2SuspiciousAccActivity.
func (s *CardRegistrationSessionCreatingRequest) SetTds2SuspiciousAccActivity(val *NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) {
	s.Tds2SuspiciousAccActivity = val
}

// SetTds2TxnActivityDay sets the value of Tds2TxnActivityDay.
func (s *CardRegistrationSessionCreatingRequest) SetTds2TxnActivityDay(val *NilString) {
	s.Tds2TxnActivityDay = val
}

// SetTds2TxnActivityYear sets the value of Tds2TxnActivityYear.
func (s *CardRegistrationSessionCreatingRequest) SetTds2TxnActivityYear(val *NilString) {
	s.Tds2TxnActivityYear = val
}

// SetTds2ThreeDsReqAuthData sets the value of Tds2ThreeDsReqAuthData.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ThreeDsReqAuthData(val *NilString) {
	s.Tds2ThreeDsReqAuthData = val
}

// SetTds2ThreeDsReqAuthMethod sets the value of Tds2ThreeDsReqAuthMethod.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ThreeDsReqAuthMethod(val *NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) {
	s.Tds2ThreeDsReqAuthMethod = val
}

// SetTds2AddrMatch sets the value of Tds2AddrMatch.
func (s *CardRegistrationSessionCreatingRequest) SetTds2AddrMatch(val *NilCardRegistrationSessionCreatingRequestTds2AddrMatch) {
	s.Tds2AddrMatch = val
}

// SetTds2BillAddrCountry sets the value of Tds2BillAddrCountry.
func (s *CardRegistrationSessionCreatingRequest) SetTds2BillAddrCountry(val *NilString) {
	s.Tds2BillAddrCountry = val
}

// SetTds2BillAddrState sets the value of Tds2BillAddrState.
func (s *CardRegistrationSessionCreatingRequest) SetTds2BillAddrState(val *NilString) {
	s.Tds2BillAddrState = val
}

// SetTds2BillAddrCity sets the value of Tds2BillAddrCity.
func (s *CardRegistrationSessionCreatingRequest) SetTds2BillAddrCity(val *NilString) {
	s.Tds2BillAddrCity = val
}

// SetTds2BillAddrLine1 sets the value of Tds2BillAddrLine1.
func (s *CardRegistrationSessionCreatingRequest) SetTds2BillAddrLine1(val *NilString) {
	s.Tds2BillAddrLine1 = val
}

// SetTds2BillAddrLine2 sets the value of Tds2BillAddrLine2.
func (s *CardRegistrationSessionCreatingRequest) SetTds2BillAddrLine2(val *NilString) {
	s.Tds2BillAddrLine2 = val
}

// SetTds2BillAddrLine3 sets the value of Tds2BillAddrLine3.
func (s *CardRegistrationSessionCreatingRequest) SetTds2BillAddrLine3(val OptString) {
	s.Tds2BillAddrLine3 = val
}

// SetTds2BillAddrPostCode sets the value of Tds2BillAddrPostCode.
func (s *CardRegistrationSessionCreatingRequest) SetTds2BillAddrPostCode(val *NilString) {
	s.Tds2BillAddrPostCode = val
}

// SetTds2ShipAddrCountry sets the value of Tds2ShipAddrCountry.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddrCountry(val *NilString) {
	s.Tds2ShipAddrCountry = val
}

// SetTds2ShipAddrState sets the value of Tds2ShipAddrState.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddrState(val *NilString) {
	s.Tds2ShipAddrState = val
}

// SetTds2ShipAddrCity sets the value of Tds2ShipAddrCity.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddrCity(val *NilString) {
	s.Tds2ShipAddrCity = val
}

// SetTds2ShipAddrLine1 sets the value of Tds2ShipAddrLine1.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddrLine1(val *NilString) {
	s.Tds2ShipAddrLine1 = val
}

// SetTds2ShipAddrLine2 sets the value of Tds2ShipAddrLine2.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddrLine2(val *NilString) {
	s.Tds2ShipAddrLine2 = val
}

// SetTds2ShipAddrLine3 sets the value of Tds2ShipAddrLine3.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddrLine3(val *NilString) {
	s.Tds2ShipAddrLine3 = val
}

// SetTds2ShipAddrPostCode sets the value of Tds2ShipAddrPostCode.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipAddrPostCode(val *NilString) {
	s.Tds2ShipAddrPostCode = val
}

// SetTds2ShipInd sets the value of Tds2ShipInd.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ShipInd(val *NilCardRegistrationSessionCreatingRequestTds2ShipInd) {
	s.Tds2ShipInd = val
}

// SetTds2DeliveryEmailAddress sets the value of Tds2DeliveryEmailAddress.
func (s *CardRegistrationSessionCreatingRequest) SetTds2DeliveryEmailAddress(val *NilString) {
	s.Tds2DeliveryEmailAddress = val
}

// SetTds2HomePhoneCc sets the value of Tds2HomePhoneCc.
func (s *CardRegistrationSessionCreatingRequest) SetTds2HomePhoneCc(val *NilString) {
	s.Tds2HomePhoneCc = val
}

// SetTds2HomePhoneNo sets the value of Tds2HomePhoneNo.
func (s *CardRegistrationSessionCreatingRequest) SetTds2HomePhoneNo(val *NilString) {
	s.Tds2HomePhoneNo = val
}

// SetTds2MobilePhoneCc sets the value of Tds2MobilePhoneCc.
func (s *CardRegistrationSessionCreatingRequest) SetTds2MobilePhoneCc(val *NilString) {
	s.Tds2MobilePhoneCc = val
}

// SetTds2MobilePhoneNo sets the value of Tds2MobilePhoneNo.
func (s *CardRegistrationSessionCreatingRequest) SetTds2MobilePhoneNo(val *NilString) {
	s.Tds2MobilePhoneNo = val
}

// SetTds2WorkPhoneCc sets the value of Tds2WorkPhoneCc.
func (s *CardRegistrationSessionCreatingRequest) SetTds2WorkPhoneCc(val *NilString) {
	s.Tds2WorkPhoneCc = val
}

// SetTds2WorkPhoneNo sets the value of Tds2WorkPhoneNo.
func (s *CardRegistrationSessionCreatingRequest) SetTds2WorkPhoneNo(val *NilString) {
	s.Tds2WorkPhoneNo = val
}

// SetTds2DeliveryTimeframe sets the value of Tds2DeliveryTimeframe.
func (s *CardRegistrationSessionCreatingRequest) SetTds2DeliveryTimeframe(val *NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) {
	s.Tds2DeliveryTimeframe = val
}

// SetTds2PreOrderDate sets the value of Tds2PreOrderDate.
func (s *CardRegistrationSessionCreatingRequest) SetTds2PreOrderDate(val *NilString) {
	s.Tds2PreOrderDate = val
}

// SetTds2PreOrderPurchaseInd sets the value of Tds2PreOrderPurchaseInd.
func (s *CardRegistrationSessionCreatingRequest) SetTds2PreOrderPurchaseInd(val *NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) {
	s.Tds2PreOrderPurchaseInd = val
}

// SetTds2ReorderItemsInd sets the value of Tds2ReorderItemsInd.
func (s *CardRegistrationSessionCreatingRequest) SetTds2ReorderItemsInd(val *NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) {
	s.Tds2ReorderItemsInd = val
}

// SetTds2RecurringExpiry sets the value of Tds2RecurringExpiry.
func (s *CardRegistrationSessionCreatingRequest) SetTds2RecurringExpiry(val *NilString) {
	s.Tds2RecurringExpiry = val
}

// SetTds2RecurringFrequency sets the value of Tds2RecurringFrequency.
func (s *CardRegistrationSessionCreatingRequest) SetTds2RecurringFrequency(val *NilString) {
	s.Tds2RecurringFrequency = val
}

// SetTds2GiftCardAmount sets the value of Tds2GiftCardAmount.
func (s *CardRegistrationSessionCreatingRequest) SetTds2GiftCardAmount(val *NilString) {
	s.Tds2GiftCardAmount = val
}

// SetTds2GiftCardCount sets the value of Tds2GiftCardCount.
func (s *CardRegistrationSessionCreatingRequest) SetTds2GiftCardCount(val *NilString) {
	s.Tds2GiftCardCount = val
}

// SetTds2GiftCardCurr sets the value of Tds2GiftCardCurr.
func (s *CardRegistrationSessionCreatingRequest) SetTds2GiftCardCurr(val *NilString) {
	s.Tds2GiftCardCurr = val
}

// 完了メール 送信フラグ\
// 決済が完了した際にカード登録をしたユーザーに完了メールを送信するかどうかを示します。
// - `0`：送信しない（デフォルト）
// - `1`：送信する.
type CardRegistrationSessionCreatingRequestCompletionMailSendFlag string

const (
	CardRegistrationSessionCreatingRequestCompletionMailSendFlag0 CardRegistrationSessionCreatingRequestCompletionMailSendFlag = "0"
	CardRegistrationSessionCreatingRequestCompletionMailSendFlag1 CardRegistrationSessionCreatingRequestCompletionMailSendFlag = "1"
)

// AllValues returns all CardRegistrationSessionCreatingRequestCompletionMailSendFlag values.
func (CardRegistrationSessionCreatingRequestCompletionMailSendFlag) AllValues() []CardRegistrationSessionCreatingRequestCompletionMailSendFlag {
	return []CardRegistrationSessionCreatingRequestCompletionMailSendFlag{
		CardRegistrationSessionCreatingRequestCompletionMailSendFlag0,
		CardRegistrationSessionCreatingRequestCompletionMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestCompletionMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestCompletionMailSendFlag0:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestCompletionMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestCompletionMailSendFlag) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestCompletionMailSendFlag(data) {
	case CardRegistrationSessionCreatingRequestCompletionMailSendFlag0:
		*s = CardRegistrationSessionCreatingRequestCompletionMailSendFlag0
		return nil
	case CardRegistrationSessionCreatingRequestCompletionMailSendFlag1:
		*s = CardRegistrationSessionCreatingRequestCompletionMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// カード登録メール 送信フラグ\
// リダイレクト型カード登録URLをfincodeからのメール送信機能で送信したかどうかを示します。
// - `0`：送信しなかった（デフォルト）
// - `1`：送信した.
type CardRegistrationSessionCreatingRequestGuideMailSendFlag string

const (
	CardRegistrationSessionCreatingRequestGuideMailSendFlag0 CardRegistrationSessionCreatingRequestGuideMailSendFlag = "0"
	CardRegistrationSessionCreatingRequestGuideMailSendFlag1 CardRegistrationSessionCreatingRequestGuideMailSendFlag = "1"
)

// AllValues returns all CardRegistrationSessionCreatingRequestGuideMailSendFlag values.
func (CardRegistrationSessionCreatingRequestGuideMailSendFlag) AllValues() []CardRegistrationSessionCreatingRequestGuideMailSendFlag {
	return []CardRegistrationSessionCreatingRequestGuideMailSendFlag{
		CardRegistrationSessionCreatingRequestGuideMailSendFlag0,
		CardRegistrationSessionCreatingRequestGuideMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestGuideMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestGuideMailSendFlag0:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestGuideMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestGuideMailSendFlag) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestGuideMailSendFlag(data) {
	case CardRegistrationSessionCreatingRequestGuideMailSendFlag0:
		*s = CardRegistrationSessionCreatingRequestGuideMailSendFlag0
		return nil
	case CardRegistrationSessionCreatingRequestGuideMailSendFlag1:
		*s = CardRegistrationSessionCreatingRequestGuideMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 請求先住所と配送先住所が一致しているか否か
// - `Y`: 住所は一致している
// - `N`: 住所は一致していない.
type CardRegistrationSessionCreatingRequestTds2AddrMatch string

const (
	CardRegistrationSessionCreatingRequestTds2AddrMatchY CardRegistrationSessionCreatingRequestTds2AddrMatch = "Y"
	CardRegistrationSessionCreatingRequestTds2AddrMatchN CardRegistrationSessionCreatingRequestTds2AddrMatch = "N"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2AddrMatch values.
func (CardRegistrationSessionCreatingRequestTds2AddrMatch) AllValues() []CardRegistrationSessionCreatingRequestTds2AddrMatch {
	return []CardRegistrationSessionCreatingRequestTds2AddrMatch{
		CardRegistrationSessionCreatingRequestTds2AddrMatchY,
		CardRegistrationSessionCreatingRequestTds2AddrMatchN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2AddrMatch) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2AddrMatchY:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2AddrMatchN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2AddrMatch) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2AddrMatch(data) {
	case CardRegistrationSessionCreatingRequestTds2AddrMatchY:
		*s = CardRegistrationSessionCreatingRequestTds2AddrMatchY
		return nil
	case CardRegistrationSessionCreatingRequestTds2AddrMatchN:
		*s = CardRegistrationSessionCreatingRequestTds2AddrMatchN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品納品時間枠
// - `01`: 電子デリバリー
// - `02`: 当日出荷
// - `03`: 翌日出荷
// - `04`: 2日目以降の出荷.
type CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe string

const (
	CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe01 CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe = "01"
	CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe02 CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe = "02"
	CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe03 CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe = "03"
	CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe04 CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe = "04"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe values.
func (CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) AllValues() []CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe {
	return []CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe{
		CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe01,
		CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe02,
		CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe03,
		CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe04,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe01:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe02:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe03:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe04:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe(data) {
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe01:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe01
		return nil
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe02:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe02
		return nil
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe03:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe03
		return nil
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe04:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe04
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の販売時期情報
// - `01`: 発売済み商品
// - `02`: 先行予約商品.
type CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd string

const (
	CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd01 CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd = "01"
	CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd02 CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd = "02"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd values.
func (CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) AllValues() []CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd {
	return []CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd{
		CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd01,
		CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd01:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd(data) {
	case CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd01:
		*s = CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd01
		return nil
	case CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd02:
		*s = CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の注文が初回か再注文か
// - `01`: 初回注文
// - `02`: 再注文.
type CardRegistrationSessionCreatingRequestTds2ReorderItemsInd string

const (
	CardRegistrationSessionCreatingRequestTds2ReorderItemsInd01 CardRegistrationSessionCreatingRequestTds2ReorderItemsInd = "01"
	CardRegistrationSessionCreatingRequestTds2ReorderItemsInd02 CardRegistrationSessionCreatingRequestTds2ReorderItemsInd = "02"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2ReorderItemsInd values.
func (CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) AllValues() []CardRegistrationSessionCreatingRequestTds2ReorderItemsInd {
	return []CardRegistrationSessionCreatingRequestTds2ReorderItemsInd{
		CardRegistrationSessionCreatingRequestTds2ReorderItemsInd01,
		CardRegistrationSessionCreatingRequestTds2ReorderItemsInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2ReorderItemsInd01:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ReorderItemsInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2ReorderItemsInd(data) {
	case CardRegistrationSessionCreatingRequestTds2ReorderItemsInd01:
		*s = CardRegistrationSessionCreatingRequestTds2ReorderItemsInd01
		return nil
	case CardRegistrationSessionCreatingRequestTds2ReorderItemsInd02:
		*s = CardRegistrationSessionCreatingRequestTds2ReorderItemsInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 取引商品の配送方法
// - `01`: カード顧客の請求先住所に配送
// - `02`: 加盟店が保持している確認済み住所（請求先住所でない）に配送
// - `03`: カード顧客の請求先住所と異なる住所に配送
// - `04`: 店舗への配送（店舗の住所は配送先住所で指定）
// - `05`:
// デジタル商品（オンラインサービス、電子ギフトカードおよび償還コードを含む）
// - `06`: 配送なし（旅行およびイベントのチケット）
// - `07`:
// その他（ゲーム、配送されないデジタルサービス、電子メディアの購読料など）.
type CardRegistrationSessionCreatingRequestTds2ShipInd string

const (
	CardRegistrationSessionCreatingRequestTds2ShipInd01 CardRegistrationSessionCreatingRequestTds2ShipInd = "01"
	CardRegistrationSessionCreatingRequestTds2ShipInd02 CardRegistrationSessionCreatingRequestTds2ShipInd = "02"
	CardRegistrationSessionCreatingRequestTds2ShipInd03 CardRegistrationSessionCreatingRequestTds2ShipInd = "03"
	CardRegistrationSessionCreatingRequestTds2ShipInd04 CardRegistrationSessionCreatingRequestTds2ShipInd = "04"
	CardRegistrationSessionCreatingRequestTds2ShipInd05 CardRegistrationSessionCreatingRequestTds2ShipInd = "05"
	CardRegistrationSessionCreatingRequestTds2ShipInd06 CardRegistrationSessionCreatingRequestTds2ShipInd = "06"
	CardRegistrationSessionCreatingRequestTds2ShipInd07 CardRegistrationSessionCreatingRequestTds2ShipInd = "07"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2ShipInd values.
func (CardRegistrationSessionCreatingRequestTds2ShipInd) AllValues() []CardRegistrationSessionCreatingRequestTds2ShipInd {
	return []CardRegistrationSessionCreatingRequestTds2ShipInd{
		CardRegistrationSessionCreatingRequestTds2ShipInd01,
		CardRegistrationSessionCreatingRequestTds2ShipInd02,
		CardRegistrationSessionCreatingRequestTds2ShipInd03,
		CardRegistrationSessionCreatingRequestTds2ShipInd04,
		CardRegistrationSessionCreatingRequestTds2ShipInd05,
		CardRegistrationSessionCreatingRequestTds2ShipInd06,
		CardRegistrationSessionCreatingRequestTds2ShipInd07,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2ShipInd) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2ShipInd01:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd02:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd03:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd04:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd05:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd06:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd07:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ShipInd) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2ShipInd(data) {
	case CardRegistrationSessionCreatingRequestTds2ShipInd01:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd01
		return nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd02:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd02
		return nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd03:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd03
		return nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd04:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd04
		return nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd05:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd05
		return nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd06:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd06
		return nil
	case CardRegistrationSessionCreatingRequestTds2ShipInd07:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd07
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// カード顧客名と出荷先名が一致しているか否か\
// カード顧客の顧客名と登録に使用される配送先名の一致/不一致を設定
// - `01`: カード顧客名と出荷先名が一致
// - `02`: カード顧客名と出荷先名が不一致.
type CardRegistrationSessionCreatingRequestTds2ShipNameInd string

const (
	CardRegistrationSessionCreatingRequestTds2ShipNameInd01 CardRegistrationSessionCreatingRequestTds2ShipNameInd = "01"
	CardRegistrationSessionCreatingRequestTds2ShipNameInd02 CardRegistrationSessionCreatingRequestTds2ShipNameInd = "02"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2ShipNameInd values.
func (CardRegistrationSessionCreatingRequestTds2ShipNameInd) AllValues() []CardRegistrationSessionCreatingRequestTds2ShipNameInd {
	return []CardRegistrationSessionCreatingRequestTds2ShipNameInd{
		CardRegistrationSessionCreatingRequestTds2ShipNameInd01,
		CardRegistrationSessionCreatingRequestTds2ShipNameInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2ShipNameInd) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2ShipNameInd01:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ShipNameInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ShipNameInd) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2ShipNameInd(data) {
	case CardRegistrationSessionCreatingRequestTds2ShipNameInd01:
		*s = CardRegistrationSessionCreatingRequestTds2ShipNameInd01
		return nil
	case CardRegistrationSessionCreatingRequestTds2ShipNameInd02:
		*s = CardRegistrationSessionCreatingRequestTds2ShipNameInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// アカウントの不審行為情報\
// カード顧客で、不審な行動（過去の不正行為を含む）を加盟店様が発見したかどうかを設定
// - `01`: 不審な行動なし
// - `02`: 不審な行動あり.
type CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity string

const (
	CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity01 CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity = "01"
	CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity02 CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity = "02"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity values.
func (CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) AllValues() []CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity {
	return []CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity{
		CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity01,
		CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity01:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity(data) {
	case CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity01:
		*s = CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity01
		return nil
	case CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity02:
		*s = CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// ログイン方法\
// ログイン方法を設定する場合、ログイン証跡とログイン日時の設定が必要です。
// - `01`: 認証なし（ゲストとしてログイン）
// - `02`: 加盟店様自身の認証情報
// - `03`: SSO(シングルサインオン)
// - `04`: イシュアーの認証情報
// - `05`: サードパーティ認証
// - `06`: FIDO認証.
type CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod string

const (
	CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod01 CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod = "01"
	CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod02 CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod = "02"
	CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod03 CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod = "03"
	CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod04 CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod = "04"
	CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod05 CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod = "05"
	CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod06 CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod = "06"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod values.
func (CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) AllValues() []CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod {
	return []CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod{
		CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod01,
		CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod02,
		CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod03,
		CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod04,
		CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod05,
		CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod06,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod01:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod02:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod03:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod04:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod05:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod06:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod(data) {
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod01:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod01
		return nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod02:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod02
		return nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod03:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod03
		return nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod04:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod04
		return nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod05:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod05
		return nil
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod06:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod06
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type CardRegistrationSessionCreatingRequestTds2Type string

const (
	CardRegistrationSessionCreatingRequestTds2Type2 CardRegistrationSessionCreatingRequestTds2Type = "2"
	CardRegistrationSessionCreatingRequestTds2Type3 CardRegistrationSessionCreatingRequestTds2Type = "3"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTds2Type values.
func (CardRegistrationSessionCreatingRequestTds2Type) AllValues() []CardRegistrationSessionCreatingRequestTds2Type {
	return []CardRegistrationSessionCreatingRequestTds2Type{
		CardRegistrationSessionCreatingRequestTds2Type2,
		CardRegistrationSessionCreatingRequestTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTds2Type2:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2Type) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTds2Type(data) {
	case CardRegistrationSessionCreatingRequestTds2Type2:
		*s = CardRegistrationSessionCreatingRequestTds2Type2
		return nil
	case CardRegistrationSessionCreatingRequestTds2Type3:
		*s = CardRegistrationSessionCreatingRequestTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type CardRegistrationSessionCreatingRequestTdsType string

const (
	CardRegistrationSessionCreatingRequestTdsType0 CardRegistrationSessionCreatingRequestTdsType = "0"
	CardRegistrationSessionCreatingRequestTdsType2 CardRegistrationSessionCreatingRequestTdsType = "2"
)

// AllValues returns all CardRegistrationSessionCreatingRequestTdsType values.
func (CardRegistrationSessionCreatingRequestTdsType) AllValues() []CardRegistrationSessionCreatingRequestTdsType {
	return []CardRegistrationSessionCreatingRequestTdsType{
		CardRegistrationSessionCreatingRequestTdsType0,
		CardRegistrationSessionCreatingRequestTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingRequestTdsType) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingRequestTdsType0:
		return []byte(s), nil
	case CardRegistrationSessionCreatingRequestTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingRequestTdsType) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingRequestTdsType(data) {
	case CardRegistrationSessionCreatingRequestTdsType0:
		*s = CardRegistrationSessionCreatingRequestTdsType0
		return nil
	case CardRegistrationSessionCreatingRequestTdsType2:
		*s = CardRegistrationSessionCreatingRequestTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CardRegistrationSession.Creating.Response
type CardRegistrationSessionCreatingResponse struct {
	// リダイレクト型カード登録URL ID.
	ID OptString `json:"id"`
	// リダイレクト型カード登録URL\
	// カード登録を行うユーザーがこのURLにアクセスし、カード情報を登録することで登録手続きが完了します。.
	LinkURL OptString `json:"link_url"`
	// 成功時リダイレクトURL\
	// `link_url`上でカード登録に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。.
	SuccessURL OptNilString `json:"success_url"`
	// キャンセル時リダイレクトURL\
	// `link_url`上でカード登録がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。.
	CancelURL OptNilString                                     `json:"cancel_url"`
	Status    OptCardRegistrationSessionCreatingResponseStatus `json:"status"`
	// リダイレクト型カード登録URL 有効期限\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	Expire OptString `json:"expire"`
	// ショップ／サービス名\
	// カード登録URL上で表示されるショップおよびサービスの名称です。\
	// \
	// デフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。.
	ShopServiceName OptNilString `json:"shop_service_name"`
	// カード登録メール 送信フラグ\
	// リダイレクト型カード登録URLをfincodeからのメール送信機能で送信したかどうかを示します。
	// - `0`：送信しなかった（デフォルト）
	// - `1`：送信した.
	GuideMailSendFlag OptCardRegistrationSessionCreatingResponseGuideMailSendFlag `json:"guide_mail_send_flag"`
	// カード登録メール 送信先メールアドレス\
	// リダイレクト型カード登録URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。.
	ReceiverMail OptNilString `json:"receiver_mail"`
	// カード登録メール カード登録をするユーザーの名前\
	// リダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられるユーザーの名前です。\
	// \
	// fincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。.
	MailCustomerName OptNilString `json:"mail_customer_name"`
	// 完了メール 送信フラグ\
	// 決済が完了した際にカード登録をしたユーザーに完了メールを送信するかどうかを示します。
	// - `0`：送信しない（デフォルト）
	// - `1`：送信する.
	CompletionMailSendFlag OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag `json:"completion_mail_send_flag"`
	// メールテンプレートID\
	// メールテンプレートIDが設定されている場合、リダイレクト型カード登録URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\
	// \
	// fincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。.
	ShopMailTemplateID OptNilString `json:"shop_mail_template_id"`
	// 顧客ID\
	// カード登録URLによりカードが登録される顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
	// 顧客名.
	CustomerName OptNilString    `json:"customer_name"`
	TdsType      OptNilTdsType   `json:"tds_type"`
	TdTenantName OptTdTenantName `json:"td_tenant_name"`
	Tds2Type     OptNilTds2Type  `json:"tds2_type"`
	Created      OptString       `json:"created"`
	Updated      *NilString      `json:"updated"`
}

// GetID returns the value of ID.
func (s *CardRegistrationSessionCreatingResponse) GetID() OptString {
	return s.ID
}

// GetLinkURL returns the value of LinkURL.
func (s *CardRegistrationSessionCreatingResponse) GetLinkURL() OptString {
	return s.LinkURL
}

// GetSuccessURL returns the value of SuccessURL.
func (s *CardRegistrationSessionCreatingResponse) GetSuccessURL() OptNilString {
	return s.SuccessURL
}

// GetCancelURL returns the value of CancelURL.
func (s *CardRegistrationSessionCreatingResponse) GetCancelURL() OptNilString {
	return s.CancelURL
}

// GetStatus returns the value of Status.
func (s *CardRegistrationSessionCreatingResponse) GetStatus() OptCardRegistrationSessionCreatingResponseStatus {
	return s.Status
}

// GetExpire returns the value of Expire.
func (s *CardRegistrationSessionCreatingResponse) GetExpire() OptString {
	return s.Expire
}

// GetShopServiceName returns the value of ShopServiceName.
func (s *CardRegistrationSessionCreatingResponse) GetShopServiceName() OptNilString {
	return s.ShopServiceName
}

// GetGuideMailSendFlag returns the value of GuideMailSendFlag.
func (s *CardRegistrationSessionCreatingResponse) GetGuideMailSendFlag() OptCardRegistrationSessionCreatingResponseGuideMailSendFlag {
	return s.GuideMailSendFlag
}

// GetReceiverMail returns the value of ReceiverMail.
func (s *CardRegistrationSessionCreatingResponse) GetReceiverMail() OptNilString {
	return s.ReceiverMail
}

// GetMailCustomerName returns the value of MailCustomerName.
func (s *CardRegistrationSessionCreatingResponse) GetMailCustomerName() OptNilString {
	return s.MailCustomerName
}

// GetCompletionMailSendFlag returns the value of CompletionMailSendFlag.
func (s *CardRegistrationSessionCreatingResponse) GetCompletionMailSendFlag() OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag {
	return s.CompletionMailSendFlag
}

// GetShopMailTemplateID returns the value of ShopMailTemplateID.
func (s *CardRegistrationSessionCreatingResponse) GetShopMailTemplateID() OptNilString {
	return s.ShopMailTemplateID
}

// GetCustomerID returns the value of CustomerID.
func (s *CardRegistrationSessionCreatingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCustomerName returns the value of CustomerName.
func (s *CardRegistrationSessionCreatingResponse) GetCustomerName() OptNilString {
	return s.CustomerName
}

// GetTdsType returns the value of TdsType.
func (s *CardRegistrationSessionCreatingResponse) GetTdsType() OptNilTdsType {
	return s.TdsType
}

// GetTdTenantName returns the value of TdTenantName.
func (s *CardRegistrationSessionCreatingResponse) GetTdTenantName() OptTdTenantName {
	return s.TdTenantName
}

// GetTds2Type returns the value of Tds2Type.
func (s *CardRegistrationSessionCreatingResponse) GetTds2Type() OptNilTds2Type {
	return s.Tds2Type
}

// GetCreated returns the value of Created.
func (s *CardRegistrationSessionCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CardRegistrationSessionCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CardRegistrationSessionCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetLinkURL sets the value of LinkURL.
func (s *CardRegistrationSessionCreatingResponse) SetLinkURL(val OptString) {
	s.LinkURL = val
}

// SetSuccessURL sets the value of SuccessURL.
func (s *CardRegistrationSessionCreatingResponse) SetSuccessURL(val OptNilString) {
	s.SuccessURL = val
}

// SetCancelURL sets the value of CancelURL.
func (s *CardRegistrationSessionCreatingResponse) SetCancelURL(val OptNilString) {
	s.CancelURL = val
}

// SetStatus sets the value of Status.
func (s *CardRegistrationSessionCreatingResponse) SetStatus(val OptCardRegistrationSessionCreatingResponseStatus) {
	s.Status = val
}

// SetExpire sets the value of Expire.
func (s *CardRegistrationSessionCreatingResponse) SetExpire(val OptString) {
	s.Expire = val
}

// SetShopServiceName sets the value of ShopServiceName.
func (s *CardRegistrationSessionCreatingResponse) SetShopServiceName(val OptNilString) {
	s.ShopServiceName = val
}

// SetGuideMailSendFlag sets the value of GuideMailSendFlag.
func (s *CardRegistrationSessionCreatingResponse) SetGuideMailSendFlag(val OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) {
	s.GuideMailSendFlag = val
}

// SetReceiverMail sets the value of ReceiverMail.
func (s *CardRegistrationSessionCreatingResponse) SetReceiverMail(val OptNilString) {
	s.ReceiverMail = val
}

// SetMailCustomerName sets the value of MailCustomerName.
func (s *CardRegistrationSessionCreatingResponse) SetMailCustomerName(val OptNilString) {
	s.MailCustomerName = val
}

// SetCompletionMailSendFlag sets the value of CompletionMailSendFlag.
func (s *CardRegistrationSessionCreatingResponse) SetCompletionMailSendFlag(val OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) {
	s.CompletionMailSendFlag = val
}

// SetShopMailTemplateID sets the value of ShopMailTemplateID.
func (s *CardRegistrationSessionCreatingResponse) SetShopMailTemplateID(val OptNilString) {
	s.ShopMailTemplateID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CardRegistrationSessionCreatingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCustomerName sets the value of CustomerName.
func (s *CardRegistrationSessionCreatingResponse) SetCustomerName(val OptNilString) {
	s.CustomerName = val
}

// SetTdsType sets the value of TdsType.
func (s *CardRegistrationSessionCreatingResponse) SetTdsType(val OptNilTdsType) {
	s.TdsType = val
}

// SetTdTenantName sets the value of TdTenantName.
func (s *CardRegistrationSessionCreatingResponse) SetTdTenantName(val OptTdTenantName) {
	s.TdTenantName = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CardRegistrationSessionCreatingResponse) SetTds2Type(val OptNilTds2Type) {
	s.Tds2Type = val
}

// SetCreated sets the value of Created.
func (s *CardRegistrationSessionCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CardRegistrationSessionCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*CardRegistrationSessionCreatingResponse) createCardRegistrationSessionRes() {}

// 完了メール 送信フラグ\
// 決済が完了した際にカード登録をしたユーザーに完了メールを送信するかどうかを示します。
// - `0`：送信しない（デフォルト）
// - `1`：送信する.
type CardRegistrationSessionCreatingResponseCompletionMailSendFlag string

const (
	CardRegistrationSessionCreatingResponseCompletionMailSendFlag0 CardRegistrationSessionCreatingResponseCompletionMailSendFlag = "0"
	CardRegistrationSessionCreatingResponseCompletionMailSendFlag1 CardRegistrationSessionCreatingResponseCompletionMailSendFlag = "1"
)

// AllValues returns all CardRegistrationSessionCreatingResponseCompletionMailSendFlag values.
func (CardRegistrationSessionCreatingResponseCompletionMailSendFlag) AllValues() []CardRegistrationSessionCreatingResponseCompletionMailSendFlag {
	return []CardRegistrationSessionCreatingResponseCompletionMailSendFlag{
		CardRegistrationSessionCreatingResponseCompletionMailSendFlag0,
		CardRegistrationSessionCreatingResponseCompletionMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingResponseCompletionMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingResponseCompletionMailSendFlag0:
		return []byte(s), nil
	case CardRegistrationSessionCreatingResponseCompletionMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingResponseCompletionMailSendFlag) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingResponseCompletionMailSendFlag(data) {
	case CardRegistrationSessionCreatingResponseCompletionMailSendFlag0:
		*s = CardRegistrationSessionCreatingResponseCompletionMailSendFlag0
		return nil
	case CardRegistrationSessionCreatingResponseCompletionMailSendFlag1:
		*s = CardRegistrationSessionCreatingResponseCompletionMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// カード登録メール 送信フラグ\
// リダイレクト型カード登録URLをfincodeからのメール送信機能で送信したかどうかを示します。
// - `0`：送信しなかった（デフォルト）
// - `1`：送信した.
type CardRegistrationSessionCreatingResponseGuideMailSendFlag string

const (
	CardRegistrationSessionCreatingResponseGuideMailSendFlag0 CardRegistrationSessionCreatingResponseGuideMailSendFlag = "0"
	CardRegistrationSessionCreatingResponseGuideMailSendFlag1 CardRegistrationSessionCreatingResponseGuideMailSendFlag = "1"
)

// AllValues returns all CardRegistrationSessionCreatingResponseGuideMailSendFlag values.
func (CardRegistrationSessionCreatingResponseGuideMailSendFlag) AllValues() []CardRegistrationSessionCreatingResponseGuideMailSendFlag {
	return []CardRegistrationSessionCreatingResponseGuideMailSendFlag{
		CardRegistrationSessionCreatingResponseGuideMailSendFlag0,
		CardRegistrationSessionCreatingResponseGuideMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingResponseGuideMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingResponseGuideMailSendFlag0:
		return []byte(s), nil
	case CardRegistrationSessionCreatingResponseGuideMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingResponseGuideMailSendFlag) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingResponseGuideMailSendFlag(data) {
	case CardRegistrationSessionCreatingResponseGuideMailSendFlag0:
		*s = CardRegistrationSessionCreatingResponseGuideMailSendFlag0
		return nil
	case CardRegistrationSessionCreatingResponseGuideMailSendFlag1:
		*s = CardRegistrationSessionCreatingResponseGuideMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス\
// リダイレクト型カード登録URLのステータスを表します。
// - `CREATE`：カード登録URLが作成された状態.
type CardRegistrationSessionCreatingResponseStatus string

const (
	CardRegistrationSessionCreatingResponseStatusCREATE CardRegistrationSessionCreatingResponseStatus = "CREATE"
)

// AllValues returns all CardRegistrationSessionCreatingResponseStatus values.
func (CardRegistrationSessionCreatingResponseStatus) AllValues() []CardRegistrationSessionCreatingResponseStatus {
	return []CardRegistrationSessionCreatingResponseStatus{
		CardRegistrationSessionCreatingResponseStatusCREATE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardRegistrationSessionCreatingResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case CardRegistrationSessionCreatingResponseStatusCREATE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardRegistrationSessionCreatingResponseStatus) UnmarshalText(data []byte) error {
	switch CardRegistrationSessionCreatingResponseStatus(data) {
	case CardRegistrationSessionCreatingResponseStatusCREATE:
		*s = CardRegistrationSessionCreatingResponseStatusCREATE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// クレジットカード種別。
// - `0`: 不明（[テストカード](https://docs.fincode.
// jp/develop_support/test_resources)を含む）
// - `1`: デビットカード
// - `2`: プリペイドカード
// - `3`: クレジットカード.
type CardType string

const (
	CardType0 CardType = "0"
	CardType1 CardType = "1"
	CardType2 CardType = "2"
	CardType3 CardType = "3"
)

// AllValues returns all CardType values.
func (CardType) AllValues() []CardType {
	return []CardType{
		CardType0,
		CardType1,
		CardType2,
		CardType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CardType) MarshalText() ([]byte, error) {
	switch s {
	case CardType0:
		return []byte(s), nil
	case CardType1:
		return []byte(s), nil
	case CardType2:
		return []byte(s), nil
	case CardType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CardType) UnmarshalText(data []byte) error {
	switch CardType(data) {
	case CardType0:
		*s = CardType0
		return nil
	case CardType1:
		*s = CardType1
		return nil
	case CardType2:
		*s = CardType2
		return nil
	case CardType3:
		*s = CardType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ChangeAmountOfPaymentOK represents sum type.
type ChangeAmountOfPaymentOK struct {
	Type                     ChangeAmountOfPaymentOKType // switch on this field
	ChangeAmountOfPaymentOK0 ChangeAmountOfPaymentOK0
	ChangeAmountOfPaymentOK1 ChangeAmountOfPaymentOK1
	ChangeAmountOfPaymentOK2 ChangeAmountOfPaymentOK2
}

// ChangeAmountOfPaymentOKType is oneOf type of ChangeAmountOfPaymentOK.
type ChangeAmountOfPaymentOKType string

// Possible values for ChangeAmountOfPaymentOKType.
const (
	ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK ChangeAmountOfPaymentOKType = "ChangeAmountOfPaymentOK0"
	ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK ChangeAmountOfPaymentOKType = "ChangeAmountOfPaymentOK1"
	ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK ChangeAmountOfPaymentOKType = "ChangeAmountOfPaymentOK2"
)

// IsChangeAmountOfPaymentOK0 reports whether ChangeAmountOfPaymentOK is ChangeAmountOfPaymentOK0.
func (s ChangeAmountOfPaymentOK) IsChangeAmountOfPaymentOK0() bool {
	return s.Type == ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
}

// IsChangeAmountOfPaymentOK1 reports whether ChangeAmountOfPaymentOK is ChangeAmountOfPaymentOK1.
func (s ChangeAmountOfPaymentOK) IsChangeAmountOfPaymentOK1() bool {
	return s.Type == ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
}

// IsChangeAmountOfPaymentOK2 reports whether ChangeAmountOfPaymentOK is ChangeAmountOfPaymentOK2.
func (s ChangeAmountOfPaymentOK) IsChangeAmountOfPaymentOK2() bool {
	return s.Type == ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
}

// SetChangeAmountOfPaymentOK0 sets ChangeAmountOfPaymentOK to ChangeAmountOfPaymentOK0.
func (s *ChangeAmountOfPaymentOK) SetChangeAmountOfPaymentOK0(v ChangeAmountOfPaymentOK0) {
	s.Type = ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
	s.ChangeAmountOfPaymentOK0 = v
}

// GetChangeAmountOfPaymentOK0 returns ChangeAmountOfPaymentOK0 and true boolean if ChangeAmountOfPaymentOK is ChangeAmountOfPaymentOK0.
func (s ChangeAmountOfPaymentOK) GetChangeAmountOfPaymentOK0() (v ChangeAmountOfPaymentOK0, ok bool) {
	if !s.IsChangeAmountOfPaymentOK0() {
		return v, false
	}
	return s.ChangeAmountOfPaymentOK0, true
}

// NewChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK returns new ChangeAmountOfPaymentOK from ChangeAmountOfPaymentOK0.
func NewChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK(v ChangeAmountOfPaymentOK0) ChangeAmountOfPaymentOK {
	var s ChangeAmountOfPaymentOK
	s.SetChangeAmountOfPaymentOK0(v)
	return s
}

// SetChangeAmountOfPaymentOK1 sets ChangeAmountOfPaymentOK to ChangeAmountOfPaymentOK1.
func (s *ChangeAmountOfPaymentOK) SetChangeAmountOfPaymentOK1(v ChangeAmountOfPaymentOK1) {
	s.Type = ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
	s.ChangeAmountOfPaymentOK1 = v
}

// GetChangeAmountOfPaymentOK1 returns ChangeAmountOfPaymentOK1 and true boolean if ChangeAmountOfPaymentOK is ChangeAmountOfPaymentOK1.
func (s ChangeAmountOfPaymentOK) GetChangeAmountOfPaymentOK1() (v ChangeAmountOfPaymentOK1, ok bool) {
	if !s.IsChangeAmountOfPaymentOK1() {
		return v, false
	}
	return s.ChangeAmountOfPaymentOK1, true
}

// NewChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK returns new ChangeAmountOfPaymentOK from ChangeAmountOfPaymentOK1.
func NewChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK(v ChangeAmountOfPaymentOK1) ChangeAmountOfPaymentOK {
	var s ChangeAmountOfPaymentOK
	s.SetChangeAmountOfPaymentOK1(v)
	return s
}

// SetChangeAmountOfPaymentOK2 sets ChangeAmountOfPaymentOK to ChangeAmountOfPaymentOK2.
func (s *ChangeAmountOfPaymentOK) SetChangeAmountOfPaymentOK2(v ChangeAmountOfPaymentOK2) {
	s.Type = ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
	s.ChangeAmountOfPaymentOK2 = v
}

// GetChangeAmountOfPaymentOK2 returns ChangeAmountOfPaymentOK2 and true boolean if ChangeAmountOfPaymentOK is ChangeAmountOfPaymentOK2.
func (s ChangeAmountOfPaymentOK) GetChangeAmountOfPaymentOK2() (v ChangeAmountOfPaymentOK2, ok bool) {
	if !s.IsChangeAmountOfPaymentOK2() {
		return v, false
	}
	return s.ChangeAmountOfPaymentOK2, true
}

// NewChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK returns new ChangeAmountOfPaymentOK from ChangeAmountOfPaymentOK2.
func NewChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK(v ChangeAmountOfPaymentOK2) ChangeAmountOfPaymentOK {
	var s ChangeAmountOfPaymentOK
	s.SetChangeAmountOfPaymentOK2(v)
	return s
}

func (*ChangeAmountOfPaymentOK) changeAmountOfPaymentRes() {}

// Merged schema.
type ChangeAmountOfPaymentOK0 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptChangeAmountOfPaymentOK0PayType `json:"pay_type"`
	JobCode OptChangeAmountOfPaymentOK0JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status OptChangeAmountOfPaymentOK0Status `json:"status"`
	// カードID\
	// この決済に使用されたカード情報のIDです。.
	CardID     OptNilString                           `json:"card_id"`
	Brand      OptNilChangeAmountOfPaymentOK0Brand    `json:"brand"`
	CardNo     OptNilString                           `json:"card_no"`
	Expire     OptNilString                           `json:"expire"`
	HolderName OptNilString                           `json:"holder_name"`
	CardNoHash OptNilString                           `json:"card_no_hash"`
	Method     OptChangeAmountOfPaymentOK0Method      `json:"method"`
	PayTimes   OptNilChangeAmountOfPaymentOK0PayTimes `json:"pay_times"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString                             `json:"subscription_id"`
	TdsType        OptNilChangeAmountOfPaymentOK0TdsType    `json:"tds_type"`
	Tds2Type       OptNilChangeAmountOfPaymentOK0Tds2Type   `json:"tds2_type"`
	Tds2RetURL     OptNilString                             `json:"tds2_ret_url"`
	Tds2Status     OptNilChangeAmountOfPaymentOK0Tds2Status `json:"tds2_status"`
	MerchantName   OptNilString                             `json:"merchant_name"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetShopID returns the value of ShopID.
func (s *ChangeAmountOfPaymentOK0) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ChangeAmountOfPaymentOK0) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ChangeAmountOfPaymentOK0) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ChangeAmountOfPaymentOK0) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ChangeAmountOfPaymentOK0) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ChangeAmountOfPaymentOK0) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ChangeAmountOfPaymentOK0) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ChangeAmountOfPaymentOK0) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ChangeAmountOfPaymentOK0) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ChangeAmountOfPaymentOK0) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ChangeAmountOfPaymentOK0) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ChangeAmountOfPaymentOK0) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ChangeAmountOfPaymentOK0) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ChangeAmountOfPaymentOK0) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ChangeAmountOfPaymentOK0) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ChangeAmountOfPaymentOK0) GetPayType() OptChangeAmountOfPaymentOK0PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *ChangeAmountOfPaymentOK0) GetJobCode() OptChangeAmountOfPaymentOK0JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *ChangeAmountOfPaymentOK0) GetStatus() OptChangeAmountOfPaymentOK0Status {
	return s.Status
}

// GetCardID returns the value of CardID.
func (s *ChangeAmountOfPaymentOK0) GetCardID() OptNilString {
	return s.CardID
}

// GetBrand returns the value of Brand.
func (s *ChangeAmountOfPaymentOK0) GetBrand() OptNilChangeAmountOfPaymentOK0Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *ChangeAmountOfPaymentOK0) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *ChangeAmountOfPaymentOK0) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *ChangeAmountOfPaymentOK0) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *ChangeAmountOfPaymentOK0) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *ChangeAmountOfPaymentOK0) GetMethod() OptChangeAmountOfPaymentOK0Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *ChangeAmountOfPaymentOK0) GetPayTimes() OptNilChangeAmountOfPaymentOK0PayTimes {
	return s.PayTimes
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *ChangeAmountOfPaymentOK0) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTdsType returns the value of TdsType.
func (s *ChangeAmountOfPaymentOK0) GetTdsType() OptNilChangeAmountOfPaymentOK0TdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *ChangeAmountOfPaymentOK0) GetTds2Type() OptNilChangeAmountOfPaymentOK0Tds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *ChangeAmountOfPaymentOK0) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *ChangeAmountOfPaymentOK0) GetTds2Status() OptNilChangeAmountOfPaymentOK0Tds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *ChangeAmountOfPaymentOK0) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetForward returns the value of Forward.
func (s *ChangeAmountOfPaymentOK0) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *ChangeAmountOfPaymentOK0) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *ChangeAmountOfPaymentOK0) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *ChangeAmountOfPaymentOK0) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *ChangeAmountOfPaymentOK0) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *ChangeAmountOfPaymentOK0) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetShopID sets the value of ShopID.
func (s *ChangeAmountOfPaymentOK0) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ChangeAmountOfPaymentOK0) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ChangeAmountOfPaymentOK0) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ChangeAmountOfPaymentOK0) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ChangeAmountOfPaymentOK0) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ChangeAmountOfPaymentOK0) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ChangeAmountOfPaymentOK0) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ChangeAmountOfPaymentOK0) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ChangeAmountOfPaymentOK0) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ChangeAmountOfPaymentOK0) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ChangeAmountOfPaymentOK0) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ChangeAmountOfPaymentOK0) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ChangeAmountOfPaymentOK0) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ChangeAmountOfPaymentOK0) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ChangeAmountOfPaymentOK0) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ChangeAmountOfPaymentOK0) SetPayType(val OptChangeAmountOfPaymentOK0PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *ChangeAmountOfPaymentOK0) SetJobCode(val OptChangeAmountOfPaymentOK0JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *ChangeAmountOfPaymentOK0) SetStatus(val OptChangeAmountOfPaymentOK0Status) {
	s.Status = val
}

// SetCardID sets the value of CardID.
func (s *ChangeAmountOfPaymentOK0) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetBrand sets the value of Brand.
func (s *ChangeAmountOfPaymentOK0) SetBrand(val OptNilChangeAmountOfPaymentOK0Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *ChangeAmountOfPaymentOK0) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *ChangeAmountOfPaymentOK0) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *ChangeAmountOfPaymentOK0) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *ChangeAmountOfPaymentOK0) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *ChangeAmountOfPaymentOK0) SetMethod(val OptChangeAmountOfPaymentOK0Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *ChangeAmountOfPaymentOK0) SetPayTimes(val OptNilChangeAmountOfPaymentOK0PayTimes) {
	s.PayTimes = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *ChangeAmountOfPaymentOK0) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTdsType sets the value of TdsType.
func (s *ChangeAmountOfPaymentOK0) SetTdsType(val OptNilChangeAmountOfPaymentOK0TdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *ChangeAmountOfPaymentOK0) SetTds2Type(val OptNilChangeAmountOfPaymentOK0Tds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *ChangeAmountOfPaymentOK0) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *ChangeAmountOfPaymentOK0) SetTds2Status(val OptNilChangeAmountOfPaymentOK0Tds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *ChangeAmountOfPaymentOK0) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetForward sets the value of Forward.
func (s *ChangeAmountOfPaymentOK0) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *ChangeAmountOfPaymentOK0) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *ChangeAmountOfPaymentOK0) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *ChangeAmountOfPaymentOK0) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *ChangeAmountOfPaymentOK0) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *ChangeAmountOfPaymentOK0) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type ChangeAmountOfPaymentOK0Brand string

const (
	ChangeAmountOfPaymentOK0BrandVISA     ChangeAmountOfPaymentOK0Brand = "VISA"
	ChangeAmountOfPaymentOK0BrandMASTER   ChangeAmountOfPaymentOK0Brand = "MASTER"
	ChangeAmountOfPaymentOK0BrandJCB      ChangeAmountOfPaymentOK0Brand = "JCB"
	ChangeAmountOfPaymentOK0BrandAMEX     ChangeAmountOfPaymentOK0Brand = "AMEX"
	ChangeAmountOfPaymentOK0BrandDINERS   ChangeAmountOfPaymentOK0Brand = "DINERS"
	ChangeAmountOfPaymentOK0BrandDISCOVER ChangeAmountOfPaymentOK0Brand = "DISCOVER"
	ChangeAmountOfPaymentOK0BrandEmpty    ChangeAmountOfPaymentOK0Brand = ""
)

// AllValues returns all ChangeAmountOfPaymentOK0Brand values.
func (ChangeAmountOfPaymentOK0Brand) AllValues() []ChangeAmountOfPaymentOK0Brand {
	return []ChangeAmountOfPaymentOK0Brand{
		ChangeAmountOfPaymentOK0BrandVISA,
		ChangeAmountOfPaymentOK0BrandMASTER,
		ChangeAmountOfPaymentOK0BrandJCB,
		ChangeAmountOfPaymentOK0BrandAMEX,
		ChangeAmountOfPaymentOK0BrandDINERS,
		ChangeAmountOfPaymentOK0BrandDISCOVER,
		ChangeAmountOfPaymentOK0BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0Brand) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0BrandVISA:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0BrandMASTER:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0BrandJCB:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0BrandAMEX:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0BrandDINERS:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0BrandDISCOVER:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0Brand) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0Brand(data) {
	case ChangeAmountOfPaymentOK0BrandVISA:
		*s = ChangeAmountOfPaymentOK0BrandVISA
		return nil
	case ChangeAmountOfPaymentOK0BrandMASTER:
		*s = ChangeAmountOfPaymentOK0BrandMASTER
		return nil
	case ChangeAmountOfPaymentOK0BrandJCB:
		*s = ChangeAmountOfPaymentOK0BrandJCB
		return nil
	case ChangeAmountOfPaymentOK0BrandAMEX:
		*s = ChangeAmountOfPaymentOK0BrandAMEX
		return nil
	case ChangeAmountOfPaymentOK0BrandDINERS:
		*s = ChangeAmountOfPaymentOK0BrandDINERS
		return nil
	case ChangeAmountOfPaymentOK0BrandDISCOVER:
		*s = ChangeAmountOfPaymentOK0BrandDISCOVER
		return nil
	case ChangeAmountOfPaymentOK0BrandEmpty:
		*s = ChangeAmountOfPaymentOK0BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type ChangeAmountOfPaymentOK0JobCode string

const (
	ChangeAmountOfPaymentOK0JobCodeCHECK   ChangeAmountOfPaymentOK0JobCode = "CHECK"
	ChangeAmountOfPaymentOK0JobCodeAUTH    ChangeAmountOfPaymentOK0JobCode = "AUTH"
	ChangeAmountOfPaymentOK0JobCodeCAPTURE ChangeAmountOfPaymentOK0JobCode = "CAPTURE"
)

// AllValues returns all ChangeAmountOfPaymentOK0JobCode values.
func (ChangeAmountOfPaymentOK0JobCode) AllValues() []ChangeAmountOfPaymentOK0JobCode {
	return []ChangeAmountOfPaymentOK0JobCode{
		ChangeAmountOfPaymentOK0JobCodeCHECK,
		ChangeAmountOfPaymentOK0JobCodeAUTH,
		ChangeAmountOfPaymentOK0JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0JobCode) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0JobCodeCHECK:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0JobCodeAUTH:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0JobCode) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0JobCode(data) {
	case ChangeAmountOfPaymentOK0JobCodeCHECK:
		*s = ChangeAmountOfPaymentOK0JobCodeCHECK
		return nil
	case ChangeAmountOfPaymentOK0JobCodeAUTH:
		*s = ChangeAmountOfPaymentOK0JobCodeAUTH
		return nil
	case ChangeAmountOfPaymentOK0JobCodeCAPTURE:
		*s = ChangeAmountOfPaymentOK0JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type ChangeAmountOfPaymentOK0Method string

const (
	ChangeAmountOfPaymentOK0Method1 ChangeAmountOfPaymentOK0Method = "1"
	ChangeAmountOfPaymentOK0Method2 ChangeAmountOfPaymentOK0Method = "2"
	ChangeAmountOfPaymentOK0Method5 ChangeAmountOfPaymentOK0Method = "5"
)

// AllValues returns all ChangeAmountOfPaymentOK0Method values.
func (ChangeAmountOfPaymentOK0Method) AllValues() []ChangeAmountOfPaymentOK0Method {
	return []ChangeAmountOfPaymentOK0Method{
		ChangeAmountOfPaymentOK0Method1,
		ChangeAmountOfPaymentOK0Method2,
		ChangeAmountOfPaymentOK0Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0Method) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0Method1:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0Method2:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0Method) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0Method(data) {
	case ChangeAmountOfPaymentOK0Method1:
		*s = ChangeAmountOfPaymentOK0Method1
		return nil
	case ChangeAmountOfPaymentOK0Method2:
		*s = ChangeAmountOfPaymentOK0Method2
		return nil
	case ChangeAmountOfPaymentOK0Method5:
		*s = ChangeAmountOfPaymentOK0Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type ChangeAmountOfPaymentOK0PayTimes string

const (
	ChangeAmountOfPaymentOK0PayTimes3  ChangeAmountOfPaymentOK0PayTimes = "3"
	ChangeAmountOfPaymentOK0PayTimes5  ChangeAmountOfPaymentOK0PayTimes = "5"
	ChangeAmountOfPaymentOK0PayTimes6  ChangeAmountOfPaymentOK0PayTimes = "6"
	ChangeAmountOfPaymentOK0PayTimes10 ChangeAmountOfPaymentOK0PayTimes = "10"
	ChangeAmountOfPaymentOK0PayTimes12 ChangeAmountOfPaymentOK0PayTimes = "12"
	ChangeAmountOfPaymentOK0PayTimes15 ChangeAmountOfPaymentOK0PayTimes = "15"
	ChangeAmountOfPaymentOK0PayTimes18 ChangeAmountOfPaymentOK0PayTimes = "18"
	ChangeAmountOfPaymentOK0PayTimes20 ChangeAmountOfPaymentOK0PayTimes = "20"
	ChangeAmountOfPaymentOK0PayTimes24 ChangeAmountOfPaymentOK0PayTimes = "24"
)

// AllValues returns all ChangeAmountOfPaymentOK0PayTimes values.
func (ChangeAmountOfPaymentOK0PayTimes) AllValues() []ChangeAmountOfPaymentOK0PayTimes {
	return []ChangeAmountOfPaymentOK0PayTimes{
		ChangeAmountOfPaymentOK0PayTimes3,
		ChangeAmountOfPaymentOK0PayTimes5,
		ChangeAmountOfPaymentOK0PayTimes6,
		ChangeAmountOfPaymentOK0PayTimes10,
		ChangeAmountOfPaymentOK0PayTimes12,
		ChangeAmountOfPaymentOK0PayTimes15,
		ChangeAmountOfPaymentOK0PayTimes18,
		ChangeAmountOfPaymentOK0PayTimes20,
		ChangeAmountOfPaymentOK0PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0PayTimes3:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes5:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes6:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes10:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes12:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes15:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes18:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes20:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0PayTimes) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0PayTimes(data) {
	case ChangeAmountOfPaymentOK0PayTimes3:
		*s = ChangeAmountOfPaymentOK0PayTimes3
		return nil
	case ChangeAmountOfPaymentOK0PayTimes5:
		*s = ChangeAmountOfPaymentOK0PayTimes5
		return nil
	case ChangeAmountOfPaymentOK0PayTimes6:
		*s = ChangeAmountOfPaymentOK0PayTimes6
		return nil
	case ChangeAmountOfPaymentOK0PayTimes10:
		*s = ChangeAmountOfPaymentOK0PayTimes10
		return nil
	case ChangeAmountOfPaymentOK0PayTimes12:
		*s = ChangeAmountOfPaymentOK0PayTimes12
		return nil
	case ChangeAmountOfPaymentOK0PayTimes15:
		*s = ChangeAmountOfPaymentOK0PayTimes15
		return nil
	case ChangeAmountOfPaymentOK0PayTimes18:
		*s = ChangeAmountOfPaymentOK0PayTimes18
		return nil
	case ChangeAmountOfPaymentOK0PayTimes20:
		*s = ChangeAmountOfPaymentOK0PayTimes20
		return nil
	case ChangeAmountOfPaymentOK0PayTimes24:
		*s = ChangeAmountOfPaymentOK0PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ChangeAmountOfPaymentOK0PayType string

const (
	ChangeAmountOfPaymentOK0PayTypeCard           ChangeAmountOfPaymentOK0PayType = "Card"
	ChangeAmountOfPaymentOK0PayTypeKonbini        ChangeAmountOfPaymentOK0PayType = "Konbini"
	ChangeAmountOfPaymentOK0PayTypePaypay         ChangeAmountOfPaymentOK0PayType = "Paypay"
	ChangeAmountOfPaymentOK0PayTypeApplepay       ChangeAmountOfPaymentOK0PayType = "Applepay"
	ChangeAmountOfPaymentOK0PayTypeDirectdebit    ChangeAmountOfPaymentOK0PayType = "Directdebit"
	ChangeAmountOfPaymentOK0PayTypeVirtualaccount ChangeAmountOfPaymentOK0PayType = "Virtualaccount"
)

// AllValues returns all ChangeAmountOfPaymentOK0PayType values.
func (ChangeAmountOfPaymentOK0PayType) AllValues() []ChangeAmountOfPaymentOK0PayType {
	return []ChangeAmountOfPaymentOK0PayType{
		ChangeAmountOfPaymentOK0PayTypeCard,
		ChangeAmountOfPaymentOK0PayTypeKonbini,
		ChangeAmountOfPaymentOK0PayTypePaypay,
		ChangeAmountOfPaymentOK0PayTypeApplepay,
		ChangeAmountOfPaymentOK0PayTypeDirectdebit,
		ChangeAmountOfPaymentOK0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0PayType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0PayTypeCard:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTypeKonbini:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTypePaypay:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTypeApplepay:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTypeDirectdebit:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0PayType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0PayType(data) {
	case ChangeAmountOfPaymentOK0PayTypeCard:
		*s = ChangeAmountOfPaymentOK0PayTypeCard
		return nil
	case ChangeAmountOfPaymentOK0PayTypeKonbini:
		*s = ChangeAmountOfPaymentOK0PayTypeKonbini
		return nil
	case ChangeAmountOfPaymentOK0PayTypePaypay:
		*s = ChangeAmountOfPaymentOK0PayTypePaypay
		return nil
	case ChangeAmountOfPaymentOK0PayTypeApplepay:
		*s = ChangeAmountOfPaymentOK0PayTypeApplepay
		return nil
	case ChangeAmountOfPaymentOK0PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentOK0PayTypeDirectdebit
		return nil
	case ChangeAmountOfPaymentOK0PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentOK0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ChangeAmountOfPaymentOK0Status string

const (
	ChangeAmountOfPaymentOK0StatusUNPROCESSED             ChangeAmountOfPaymentOK0Status = "UNPROCESSED"
	ChangeAmountOfPaymentOK0StatusCHECKED                 ChangeAmountOfPaymentOK0Status = "CHECKED"
	ChangeAmountOfPaymentOK0StatusAUTHORIZED              ChangeAmountOfPaymentOK0Status = "AUTHORIZED"
	ChangeAmountOfPaymentOK0StatusAWAITINGCUSTOMERPAYMENT ChangeAmountOfPaymentOK0Status = "AWAITING_CUSTOMER_PAYMENT"
	ChangeAmountOfPaymentOK0StatusAWAITINGPAYMENTAPPROVAL ChangeAmountOfPaymentOK0Status = "AWAITING_PAYMENT_APPROVAL"
	ChangeAmountOfPaymentOK0StatusCAPTURED                ChangeAmountOfPaymentOK0Status = "CAPTURED"
	ChangeAmountOfPaymentOK0StatusCANCELED                ChangeAmountOfPaymentOK0Status = "CANCELED"
	ChangeAmountOfPaymentOK0StatusEXPIRED                 ChangeAmountOfPaymentOK0Status = "EXPIRED"
	ChangeAmountOfPaymentOK0StatusAUTHENTICATED           ChangeAmountOfPaymentOK0Status = "AUTHENTICATED"
	ChangeAmountOfPaymentOK0StatusFAILED                  ChangeAmountOfPaymentOK0Status = "FAILED"
)

// AllValues returns all ChangeAmountOfPaymentOK0Status values.
func (ChangeAmountOfPaymentOK0Status) AllValues() []ChangeAmountOfPaymentOK0Status {
	return []ChangeAmountOfPaymentOK0Status{
		ChangeAmountOfPaymentOK0StatusUNPROCESSED,
		ChangeAmountOfPaymentOK0StatusCHECKED,
		ChangeAmountOfPaymentOK0StatusAUTHORIZED,
		ChangeAmountOfPaymentOK0StatusAWAITINGCUSTOMERPAYMENT,
		ChangeAmountOfPaymentOK0StatusAWAITINGPAYMENTAPPROVAL,
		ChangeAmountOfPaymentOK0StatusCAPTURED,
		ChangeAmountOfPaymentOK0StatusCANCELED,
		ChangeAmountOfPaymentOK0StatusEXPIRED,
		ChangeAmountOfPaymentOK0StatusAUTHENTICATED,
		ChangeAmountOfPaymentOK0StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0Status) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0StatusUNPROCESSED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusCHECKED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusAUTHORIZED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusCAPTURED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusCANCELED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusEXPIRED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusAUTHENTICATED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0Status) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0Status(data) {
	case ChangeAmountOfPaymentOK0StatusUNPROCESSED:
		*s = ChangeAmountOfPaymentOK0StatusUNPROCESSED
		return nil
	case ChangeAmountOfPaymentOK0StatusCHECKED:
		*s = ChangeAmountOfPaymentOK0StatusCHECKED
		return nil
	case ChangeAmountOfPaymentOK0StatusAUTHORIZED:
		*s = ChangeAmountOfPaymentOK0StatusAUTHORIZED
		return nil
	case ChangeAmountOfPaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = ChangeAmountOfPaymentOK0StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ChangeAmountOfPaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = ChangeAmountOfPaymentOK0StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ChangeAmountOfPaymentOK0StatusCAPTURED:
		*s = ChangeAmountOfPaymentOK0StatusCAPTURED
		return nil
	case ChangeAmountOfPaymentOK0StatusCANCELED:
		*s = ChangeAmountOfPaymentOK0StatusCANCELED
		return nil
	case ChangeAmountOfPaymentOK0StatusEXPIRED:
		*s = ChangeAmountOfPaymentOK0StatusEXPIRED
		return nil
	case ChangeAmountOfPaymentOK0StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK0StatusAUTHENTICATED
		return nil
	case ChangeAmountOfPaymentOK0StatusFAILED:
		*s = ChangeAmountOfPaymentOK0StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0認証処理 ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: チャレンジ認証の実施が必要
// - `AUTHENTICATED`: 3Dセキュア認証処理が完了.
type ChangeAmountOfPaymentOK0Tds2Status string

const (
	ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATING ChangeAmountOfPaymentOK0Tds2Status = "AUTHENTICATING"
	ChangeAmountOfPaymentOK0Tds2StatusCHALLENGE      ChangeAmountOfPaymentOK0Tds2Status = "CHALLENGE"
	ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATED  ChangeAmountOfPaymentOK0Tds2Status = "AUTHENTICATED"
)

// AllValues returns all ChangeAmountOfPaymentOK0Tds2Status values.
func (ChangeAmountOfPaymentOK0Tds2Status) AllValues() []ChangeAmountOfPaymentOK0Tds2Status {
	return []ChangeAmountOfPaymentOK0Tds2Status{
		ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATING,
		ChangeAmountOfPaymentOK0Tds2StatusCHALLENGE,
		ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0Tds2Status) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATING:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0Tds2StatusCHALLENGE:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0Tds2Status) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0Tds2Status(data) {
	case ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATING:
		*s = ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATING
		return nil
	case ChangeAmountOfPaymentOK0Tds2StatusCHALLENGE:
		*s = ChangeAmountOfPaymentOK0Tds2StatusCHALLENGE
		return nil
	case ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type ChangeAmountOfPaymentOK0Tds2Type string

const (
	ChangeAmountOfPaymentOK0Tds2Type2 ChangeAmountOfPaymentOK0Tds2Type = "2"
	ChangeAmountOfPaymentOK0Tds2Type3 ChangeAmountOfPaymentOK0Tds2Type = "3"
)

// AllValues returns all ChangeAmountOfPaymentOK0Tds2Type values.
func (ChangeAmountOfPaymentOK0Tds2Type) AllValues() []ChangeAmountOfPaymentOK0Tds2Type {
	return []ChangeAmountOfPaymentOK0Tds2Type{
		ChangeAmountOfPaymentOK0Tds2Type2,
		ChangeAmountOfPaymentOK0Tds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0Tds2Type) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0Tds2Type2:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0Tds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0Tds2Type) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0Tds2Type(data) {
	case ChangeAmountOfPaymentOK0Tds2Type2:
		*s = ChangeAmountOfPaymentOK0Tds2Type2
		return nil
	case ChangeAmountOfPaymentOK0Tds2Type3:
		*s = ChangeAmountOfPaymentOK0Tds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type ChangeAmountOfPaymentOK0TdsType string

const (
	ChangeAmountOfPaymentOK0TdsType0 ChangeAmountOfPaymentOK0TdsType = "0"
	ChangeAmountOfPaymentOK0TdsType2 ChangeAmountOfPaymentOK0TdsType = "2"
)

// AllValues returns all ChangeAmountOfPaymentOK0TdsType values.
func (ChangeAmountOfPaymentOK0TdsType) AllValues() []ChangeAmountOfPaymentOK0TdsType {
	return []ChangeAmountOfPaymentOK0TdsType{
		ChangeAmountOfPaymentOK0TdsType0,
		ChangeAmountOfPaymentOK0TdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK0TdsType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK0TdsType0:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK0TdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK0TdsType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK0TdsType(data) {
	case ChangeAmountOfPaymentOK0TdsType0:
		*s = ChangeAmountOfPaymentOK0TdsType0
		return nil
	case ChangeAmountOfPaymentOK0TdsType2:
		*s = ChangeAmountOfPaymentOK0TdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ChangeAmountOfPaymentOK1 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType OptChangeAmountOfPaymentOK1PayType `json:"pay_type"`
	JobCode OptChangeAmountOfPaymentOK1JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるPayPay上での取引承認を待っている状態。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptChangeAmountOfPaymentOK1Status `json:"status"`
	// PayPay支払いURL\
	// 購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します。.
	CodeURL OptNilString `json:"code_url"`
	// 支払期限\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	CodeExpiryDate OptNilString `json:"code_expiry_date"`
	// リダイレクトURL\
	// 決済が完了した際にPayPayからリダイレクト先URL。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクト先種別\
	// `redirect_url`の種別
	// - `1`： Webページ／Webアプリケーション
	// - `2`： ネイティブアプリ.
	RedirectType OptNilChangeAmountOfPaymentOK1RedirectType `json:"redirect_type"`
	// 仮売上期限\
	// 形式： `yyyy/MM/dd`.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 注文内容の説明\
	// 購入者のPayPayアプリ上で表示される注文内容の説明。.
	OrderDescription OptNilString `json:"order_description"`
	// 売上確定の説明\
	// 購入者のPayPayアプリ上で表示される売上確定の説明。.
	CaptureDescription OptNilString `json:"capture_description"`
	// 金額変更の説明\
	// 購入者のPayPayアプリ上で表示される金額変更の説明。.
	UpdateDescription OptNilString `json:"update_description"`
	// キャンセルの説明\
	// 購入者のPayPayアプリ上で表示されるキャンセルの説明。.
	CancelDescription OptNilString `json:"cancel_description"`
	// 店舗ID\
	// PayPayによって発行された店舗ID。.
	StoreID OptNilString `json:"store_id"`
	// PayPayの支払いコードID.
	CodeID OptNilString `json:"code_id"`
	// PayPay 決済ID.
	PaymentID OptNilString `json:"payment_id"`
	// PayPay処理結果コード.
	PaypayResultCode OptNilString `json:"paypay_result_code"`
	// PayPay トランザクションID.
	MerchantPaymentID OptNilString `json:"merchant_payment_id"`
	// PayPay 売上確定ID.
	MerchantCaptureID OptNilString `json:"merchant_capture_id"`
	// PayPay 金額変更ID.
	MerchantUpdateID OptNilString `json:"merchant_update_id"`
	// PayPay キャンセルID.
	MerchantRevertID OptNilString `json:"merchant_revert_id"`
	// PayPay 返金ID.
	MerchantRefundID OptNilString `json:"merchant_refund_id"`
	// 支払日時\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *ChangeAmountOfPaymentOK1) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ChangeAmountOfPaymentOK1) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ChangeAmountOfPaymentOK1) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ChangeAmountOfPaymentOK1) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ChangeAmountOfPaymentOK1) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ChangeAmountOfPaymentOK1) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ChangeAmountOfPaymentOK1) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ChangeAmountOfPaymentOK1) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ChangeAmountOfPaymentOK1) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ChangeAmountOfPaymentOK1) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ChangeAmountOfPaymentOK1) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ChangeAmountOfPaymentOK1) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ChangeAmountOfPaymentOK1) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ChangeAmountOfPaymentOK1) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ChangeAmountOfPaymentOK1) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ChangeAmountOfPaymentOK1) GetPayType() OptChangeAmountOfPaymentOK1PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *ChangeAmountOfPaymentOK1) GetJobCode() OptChangeAmountOfPaymentOK1JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *ChangeAmountOfPaymentOK1) GetStatus() OptChangeAmountOfPaymentOK1Status {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *ChangeAmountOfPaymentOK1) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *ChangeAmountOfPaymentOK1) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *ChangeAmountOfPaymentOK1) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *ChangeAmountOfPaymentOK1) GetRedirectType() OptNilChangeAmountOfPaymentOK1RedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *ChangeAmountOfPaymentOK1) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *ChangeAmountOfPaymentOK1) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *ChangeAmountOfPaymentOK1) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *ChangeAmountOfPaymentOK1) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *ChangeAmountOfPaymentOK1) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *ChangeAmountOfPaymentOK1) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *ChangeAmountOfPaymentOK1) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *ChangeAmountOfPaymentOK1) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *ChangeAmountOfPaymentOK1) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *ChangeAmountOfPaymentOK1) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *ChangeAmountOfPaymentOK1) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *ChangeAmountOfPaymentOK1) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRevertID returns the value of MerchantRevertID.
func (s *ChangeAmountOfPaymentOK1) GetMerchantRevertID() OptNilString {
	return s.MerchantRevertID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *ChangeAmountOfPaymentOK1) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *ChangeAmountOfPaymentOK1) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *ChangeAmountOfPaymentOK1) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ChangeAmountOfPaymentOK1) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ChangeAmountOfPaymentOK1) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ChangeAmountOfPaymentOK1) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ChangeAmountOfPaymentOK1) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ChangeAmountOfPaymentOK1) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ChangeAmountOfPaymentOK1) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ChangeAmountOfPaymentOK1) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ChangeAmountOfPaymentOK1) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ChangeAmountOfPaymentOK1) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ChangeAmountOfPaymentOK1) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ChangeAmountOfPaymentOK1) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ChangeAmountOfPaymentOK1) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ChangeAmountOfPaymentOK1) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ChangeAmountOfPaymentOK1) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ChangeAmountOfPaymentOK1) SetPayType(val OptChangeAmountOfPaymentOK1PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *ChangeAmountOfPaymentOK1) SetJobCode(val OptChangeAmountOfPaymentOK1JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *ChangeAmountOfPaymentOK1) SetStatus(val OptChangeAmountOfPaymentOK1Status) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *ChangeAmountOfPaymentOK1) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *ChangeAmountOfPaymentOK1) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *ChangeAmountOfPaymentOK1) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *ChangeAmountOfPaymentOK1) SetRedirectType(val OptNilChangeAmountOfPaymentOK1RedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *ChangeAmountOfPaymentOK1) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *ChangeAmountOfPaymentOK1) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *ChangeAmountOfPaymentOK1) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *ChangeAmountOfPaymentOK1) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *ChangeAmountOfPaymentOK1) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *ChangeAmountOfPaymentOK1) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *ChangeAmountOfPaymentOK1) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *ChangeAmountOfPaymentOK1) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *ChangeAmountOfPaymentOK1) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *ChangeAmountOfPaymentOK1) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *ChangeAmountOfPaymentOK1) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *ChangeAmountOfPaymentOK1) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRevertID sets the value of MerchantRevertID.
func (s *ChangeAmountOfPaymentOK1) SetMerchantRevertID(val OptNilString) {
	s.MerchantRevertID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *ChangeAmountOfPaymentOK1) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *ChangeAmountOfPaymentOK1) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type ChangeAmountOfPaymentOK1JobCode string

const (
	ChangeAmountOfPaymentOK1JobCodeAUTH    ChangeAmountOfPaymentOK1JobCode = "AUTH"
	ChangeAmountOfPaymentOK1JobCodeCAPTURE ChangeAmountOfPaymentOK1JobCode = "CAPTURE"
)

// AllValues returns all ChangeAmountOfPaymentOK1JobCode values.
func (ChangeAmountOfPaymentOK1JobCode) AllValues() []ChangeAmountOfPaymentOK1JobCode {
	return []ChangeAmountOfPaymentOK1JobCode{
		ChangeAmountOfPaymentOK1JobCodeAUTH,
		ChangeAmountOfPaymentOK1JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK1JobCode) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK1JobCodeAUTH:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK1JobCode) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK1JobCode(data) {
	case ChangeAmountOfPaymentOK1JobCodeAUTH:
		*s = ChangeAmountOfPaymentOK1JobCodeAUTH
		return nil
	case ChangeAmountOfPaymentOK1JobCodeCAPTURE:
		*s = ChangeAmountOfPaymentOK1JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ChangeAmountOfPaymentOK1PayType string

const (
	ChangeAmountOfPaymentOK1PayTypeCard           ChangeAmountOfPaymentOK1PayType = "Card"
	ChangeAmountOfPaymentOK1PayTypeKonbini        ChangeAmountOfPaymentOK1PayType = "Konbini"
	ChangeAmountOfPaymentOK1PayTypePaypay         ChangeAmountOfPaymentOK1PayType = "Paypay"
	ChangeAmountOfPaymentOK1PayTypeApplepay       ChangeAmountOfPaymentOK1PayType = "Applepay"
	ChangeAmountOfPaymentOK1PayTypeDirectdebit    ChangeAmountOfPaymentOK1PayType = "Directdebit"
	ChangeAmountOfPaymentOK1PayTypeVirtualaccount ChangeAmountOfPaymentOK1PayType = "Virtualaccount"
)

// AllValues returns all ChangeAmountOfPaymentOK1PayType values.
func (ChangeAmountOfPaymentOK1PayType) AllValues() []ChangeAmountOfPaymentOK1PayType {
	return []ChangeAmountOfPaymentOK1PayType{
		ChangeAmountOfPaymentOK1PayTypeCard,
		ChangeAmountOfPaymentOK1PayTypeKonbini,
		ChangeAmountOfPaymentOK1PayTypePaypay,
		ChangeAmountOfPaymentOK1PayTypeApplepay,
		ChangeAmountOfPaymentOK1PayTypeDirectdebit,
		ChangeAmountOfPaymentOK1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK1PayType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK1PayTypeCard:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1PayTypeKonbini:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1PayTypePaypay:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1PayTypeApplepay:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1PayTypeDirectdebit:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK1PayType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK1PayType(data) {
	case ChangeAmountOfPaymentOK1PayTypeCard:
		*s = ChangeAmountOfPaymentOK1PayTypeCard
		return nil
	case ChangeAmountOfPaymentOK1PayTypeKonbini:
		*s = ChangeAmountOfPaymentOK1PayTypeKonbini
		return nil
	case ChangeAmountOfPaymentOK1PayTypePaypay:
		*s = ChangeAmountOfPaymentOK1PayTypePaypay
		return nil
	case ChangeAmountOfPaymentOK1PayTypeApplepay:
		*s = ChangeAmountOfPaymentOK1PayTypeApplepay
		return nil
	case ChangeAmountOfPaymentOK1PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentOK1PayTypeDirectdebit
		return nil
	case ChangeAmountOfPaymentOK1PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentOK1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクト先種別\
// `redirect_url`の種別
// - `1`： Webページ／Webアプリケーション
// - `2`： ネイティブアプリ.
type ChangeAmountOfPaymentOK1RedirectType string

const (
	ChangeAmountOfPaymentOK1RedirectType1 ChangeAmountOfPaymentOK1RedirectType = "1"
	ChangeAmountOfPaymentOK1RedirectType2 ChangeAmountOfPaymentOK1RedirectType = "2"
)

// AllValues returns all ChangeAmountOfPaymentOK1RedirectType values.
func (ChangeAmountOfPaymentOK1RedirectType) AllValues() []ChangeAmountOfPaymentOK1RedirectType {
	return []ChangeAmountOfPaymentOK1RedirectType{
		ChangeAmountOfPaymentOK1RedirectType1,
		ChangeAmountOfPaymentOK1RedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK1RedirectType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK1RedirectType1:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1RedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK1RedirectType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK1RedirectType(data) {
	case ChangeAmountOfPaymentOK1RedirectType1:
		*s = ChangeAmountOfPaymentOK1RedirectType1
		return nil
	case ChangeAmountOfPaymentOK1RedirectType2:
		*s = ChangeAmountOfPaymentOK1RedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ChangeAmountOfPaymentOK1Status string

const (
	ChangeAmountOfPaymentOK1StatusUNPROCESSED             ChangeAmountOfPaymentOK1Status = "UNPROCESSED"
	ChangeAmountOfPaymentOK1StatusCHECKED                 ChangeAmountOfPaymentOK1Status = "CHECKED"
	ChangeAmountOfPaymentOK1StatusAUTHORIZED              ChangeAmountOfPaymentOK1Status = "AUTHORIZED"
	ChangeAmountOfPaymentOK1StatusAWAITINGCUSTOMERPAYMENT ChangeAmountOfPaymentOK1Status = "AWAITING_CUSTOMER_PAYMENT"
	ChangeAmountOfPaymentOK1StatusAWAITINGPAYMENTAPPROVAL ChangeAmountOfPaymentOK1Status = "AWAITING_PAYMENT_APPROVAL"
	ChangeAmountOfPaymentOK1StatusCAPTURED                ChangeAmountOfPaymentOK1Status = "CAPTURED"
	ChangeAmountOfPaymentOK1StatusCANCELED                ChangeAmountOfPaymentOK1Status = "CANCELED"
	ChangeAmountOfPaymentOK1StatusEXPIRED                 ChangeAmountOfPaymentOK1Status = "EXPIRED"
	ChangeAmountOfPaymentOK1StatusAUTHENTICATED           ChangeAmountOfPaymentOK1Status = "AUTHENTICATED"
	ChangeAmountOfPaymentOK1StatusFAILED                  ChangeAmountOfPaymentOK1Status = "FAILED"
)

// AllValues returns all ChangeAmountOfPaymentOK1Status values.
func (ChangeAmountOfPaymentOK1Status) AllValues() []ChangeAmountOfPaymentOK1Status {
	return []ChangeAmountOfPaymentOK1Status{
		ChangeAmountOfPaymentOK1StatusUNPROCESSED,
		ChangeAmountOfPaymentOK1StatusCHECKED,
		ChangeAmountOfPaymentOK1StatusAUTHORIZED,
		ChangeAmountOfPaymentOK1StatusAWAITINGCUSTOMERPAYMENT,
		ChangeAmountOfPaymentOK1StatusAWAITINGPAYMENTAPPROVAL,
		ChangeAmountOfPaymentOK1StatusCAPTURED,
		ChangeAmountOfPaymentOK1StatusCANCELED,
		ChangeAmountOfPaymentOK1StatusEXPIRED,
		ChangeAmountOfPaymentOK1StatusAUTHENTICATED,
		ChangeAmountOfPaymentOK1StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK1Status) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK1StatusUNPROCESSED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusCHECKED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusAUTHORIZED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusCAPTURED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusCANCELED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusEXPIRED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusAUTHENTICATED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK1StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK1Status) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK1Status(data) {
	case ChangeAmountOfPaymentOK1StatusUNPROCESSED:
		*s = ChangeAmountOfPaymentOK1StatusUNPROCESSED
		return nil
	case ChangeAmountOfPaymentOK1StatusCHECKED:
		*s = ChangeAmountOfPaymentOK1StatusCHECKED
		return nil
	case ChangeAmountOfPaymentOK1StatusAUTHORIZED:
		*s = ChangeAmountOfPaymentOK1StatusAUTHORIZED
		return nil
	case ChangeAmountOfPaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = ChangeAmountOfPaymentOK1StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ChangeAmountOfPaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = ChangeAmountOfPaymentOK1StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ChangeAmountOfPaymentOK1StatusCAPTURED:
		*s = ChangeAmountOfPaymentOK1StatusCAPTURED
		return nil
	case ChangeAmountOfPaymentOK1StatusCANCELED:
		*s = ChangeAmountOfPaymentOK1StatusCANCELED
		return nil
	case ChangeAmountOfPaymentOK1StatusEXPIRED:
		*s = ChangeAmountOfPaymentOK1StatusEXPIRED
		return nil
	case ChangeAmountOfPaymentOK1StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK1StatusAUTHENTICATED
		return nil
	case ChangeAmountOfPaymentOK1StatusFAILED:
		*s = ChangeAmountOfPaymentOK1StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ChangeAmountOfPaymentOK2 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType OptChangeAmountOfPaymentOK2PayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">振替はまだ実行されていません。</span>
	// - `AWAITING_PAYMENT_APPROVAL`: 決済処理待ち<br /><span
	// class="smallText">fincodeおよび金融機関による振替処理を待っています。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">振替が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この振替はキャンセルされました。</span>
	// - `FAILED`: 請求失敗<br /><span
	// class="smallText">何らかの理由により振替に失敗しました。</span>.
	Status     OptChangeAmountOfPaymentOK2Status        `json:"status"`
	ResultCode OptNilChangeAmountOfPaymentOK2ResultCode `json:"result_code"`
	// 振替指定日\
	// 振替を行う日を指定します。下記の日付を指定できます。
	// - `yyyy/MM/05`: 5日
	// - `yyyy/MM/06`: 6日
	// - `yyyy/MM/23`: 23日
	// - `yyyy/MM/27`: 27日
	// 形式： `yyyy/MM/dd`\
	// 実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替日」の列で確認できます。.
	TargetDate OptNilString `json:"target_date"`
	// 引き落とし日\
	// 実際に購入者の口座から引き落としが行われた実績日です。\
	// \
	// 形式： `yyyy/MM/dd`.
	WithdrawalDate OptNilString `json:"withdrawal_date"`
	// 請求依頼受付期間 終了日\
	// 振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。.
	RequestAcceptEndDate OptNilString `json:"request_accept_end_date"`
	// 請求結果反映 予定日\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。.
	TransferReturnDate OptNilString `json:"transfer_return_date"`
	// 決済手段ID\
	// この決済に使用された決済手段のIDです。.
	PaymentMethodID OptNilString `json:"payment_method_id"`
	// 金融機関コード\
	// fincodeの口座振替に対応している金融機関のコードのリストは[Docs >
	// 利用可能な金融機関（口座振替）](https://docs.fincode.
	// jp/payment/directdebit/restriction)で参照できます。.
	BankCode OptNilString `json:"bank_code"`
	// 金融機関名.
	BankName OptNilString `json:"bank_name"`
	// 支店コード.
	BranchCode OptNilString `json:"branch_code"`
	// 支店名.
	BranchName OptNilString `json:"branch_name"`
	// ご利用明細表示内容
	// -
	// フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
	// - デフォルト： `ショップ名カナの先頭9文字`
	// ※ 利用可能な記号
	// - 半角：`.`、`(`、`)`、`–`
	// - 全角：`．`、`（`、`）`、`ー`.
	Remarks OptNilString `json:"remarks"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString `json:"subscription_id"`
}

// GetShopID returns the value of ShopID.
func (s *ChangeAmountOfPaymentOK2) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ChangeAmountOfPaymentOK2) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ChangeAmountOfPaymentOK2) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ChangeAmountOfPaymentOK2) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ChangeAmountOfPaymentOK2) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ChangeAmountOfPaymentOK2) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ChangeAmountOfPaymentOK2) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ChangeAmountOfPaymentOK2) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ChangeAmountOfPaymentOK2) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ChangeAmountOfPaymentOK2) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ChangeAmountOfPaymentOK2) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ChangeAmountOfPaymentOK2) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ChangeAmountOfPaymentOK2) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ChangeAmountOfPaymentOK2) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ChangeAmountOfPaymentOK2) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ChangeAmountOfPaymentOK2) GetPayType() OptChangeAmountOfPaymentOK2PayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *ChangeAmountOfPaymentOK2) GetStatus() OptChangeAmountOfPaymentOK2Status {
	return s.Status
}

// GetResultCode returns the value of ResultCode.
func (s *ChangeAmountOfPaymentOK2) GetResultCode() OptNilChangeAmountOfPaymentOK2ResultCode {
	return s.ResultCode
}

// GetTargetDate returns the value of TargetDate.
func (s *ChangeAmountOfPaymentOK2) GetTargetDate() OptNilString {
	return s.TargetDate
}

// GetWithdrawalDate returns the value of WithdrawalDate.
func (s *ChangeAmountOfPaymentOK2) GetWithdrawalDate() OptNilString {
	return s.WithdrawalDate
}

// GetRequestAcceptEndDate returns the value of RequestAcceptEndDate.
func (s *ChangeAmountOfPaymentOK2) GetRequestAcceptEndDate() OptNilString {
	return s.RequestAcceptEndDate
}

// GetTransferReturnDate returns the value of TransferReturnDate.
func (s *ChangeAmountOfPaymentOK2) GetTransferReturnDate() OptNilString {
	return s.TransferReturnDate
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *ChangeAmountOfPaymentOK2) GetPaymentMethodID() OptNilString {
	return s.PaymentMethodID
}

// GetBankCode returns the value of BankCode.
func (s *ChangeAmountOfPaymentOK2) GetBankCode() OptNilString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *ChangeAmountOfPaymentOK2) GetBankName() OptNilString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *ChangeAmountOfPaymentOK2) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *ChangeAmountOfPaymentOK2) GetBranchName() OptNilString {
	return s.BranchName
}

// GetRemarks returns the value of Remarks.
func (s *ChangeAmountOfPaymentOK2) GetRemarks() OptNilString {
	return s.Remarks
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *ChangeAmountOfPaymentOK2) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// SetShopID sets the value of ShopID.
func (s *ChangeAmountOfPaymentOK2) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ChangeAmountOfPaymentOK2) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ChangeAmountOfPaymentOK2) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ChangeAmountOfPaymentOK2) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ChangeAmountOfPaymentOK2) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ChangeAmountOfPaymentOK2) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ChangeAmountOfPaymentOK2) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ChangeAmountOfPaymentOK2) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ChangeAmountOfPaymentOK2) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ChangeAmountOfPaymentOK2) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ChangeAmountOfPaymentOK2) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ChangeAmountOfPaymentOK2) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ChangeAmountOfPaymentOK2) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ChangeAmountOfPaymentOK2) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ChangeAmountOfPaymentOK2) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ChangeAmountOfPaymentOK2) SetPayType(val OptChangeAmountOfPaymentOK2PayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *ChangeAmountOfPaymentOK2) SetStatus(val OptChangeAmountOfPaymentOK2Status) {
	s.Status = val
}

// SetResultCode sets the value of ResultCode.
func (s *ChangeAmountOfPaymentOK2) SetResultCode(val OptNilChangeAmountOfPaymentOK2ResultCode) {
	s.ResultCode = val
}

// SetTargetDate sets the value of TargetDate.
func (s *ChangeAmountOfPaymentOK2) SetTargetDate(val OptNilString) {
	s.TargetDate = val
}

// SetWithdrawalDate sets the value of WithdrawalDate.
func (s *ChangeAmountOfPaymentOK2) SetWithdrawalDate(val OptNilString) {
	s.WithdrawalDate = val
}

// SetRequestAcceptEndDate sets the value of RequestAcceptEndDate.
func (s *ChangeAmountOfPaymentOK2) SetRequestAcceptEndDate(val OptNilString) {
	s.RequestAcceptEndDate = val
}

// SetTransferReturnDate sets the value of TransferReturnDate.
func (s *ChangeAmountOfPaymentOK2) SetTransferReturnDate(val OptNilString) {
	s.TransferReturnDate = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *ChangeAmountOfPaymentOK2) SetPaymentMethodID(val OptNilString) {
	s.PaymentMethodID = val
}

// SetBankCode sets the value of BankCode.
func (s *ChangeAmountOfPaymentOK2) SetBankCode(val OptNilString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *ChangeAmountOfPaymentOK2) SetBankName(val OptNilString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ChangeAmountOfPaymentOK2) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *ChangeAmountOfPaymentOK2) SetBranchName(val OptNilString) {
	s.BranchName = val
}

// SetRemarks sets the value of Remarks.
func (s *ChangeAmountOfPaymentOK2) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *ChangeAmountOfPaymentOK2) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ChangeAmountOfPaymentOK2PayType string

const (
	ChangeAmountOfPaymentOK2PayTypeCard           ChangeAmountOfPaymentOK2PayType = "Card"
	ChangeAmountOfPaymentOK2PayTypeKonbini        ChangeAmountOfPaymentOK2PayType = "Konbini"
	ChangeAmountOfPaymentOK2PayTypePaypay         ChangeAmountOfPaymentOK2PayType = "Paypay"
	ChangeAmountOfPaymentOK2PayTypeApplepay       ChangeAmountOfPaymentOK2PayType = "Applepay"
	ChangeAmountOfPaymentOK2PayTypeDirectdebit    ChangeAmountOfPaymentOK2PayType = "Directdebit"
	ChangeAmountOfPaymentOK2PayTypeVirtualaccount ChangeAmountOfPaymentOK2PayType = "Virtualaccount"
)

// AllValues returns all ChangeAmountOfPaymentOK2PayType values.
func (ChangeAmountOfPaymentOK2PayType) AllValues() []ChangeAmountOfPaymentOK2PayType {
	return []ChangeAmountOfPaymentOK2PayType{
		ChangeAmountOfPaymentOK2PayTypeCard,
		ChangeAmountOfPaymentOK2PayTypeKonbini,
		ChangeAmountOfPaymentOK2PayTypePaypay,
		ChangeAmountOfPaymentOK2PayTypeApplepay,
		ChangeAmountOfPaymentOK2PayTypeDirectdebit,
		ChangeAmountOfPaymentOK2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK2PayType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK2PayTypeCard:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2PayTypeKonbini:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2PayTypePaypay:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2PayTypeApplepay:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2PayTypeDirectdebit:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK2PayType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK2PayType(data) {
	case ChangeAmountOfPaymentOK2PayTypeCard:
		*s = ChangeAmountOfPaymentOK2PayTypeCard
		return nil
	case ChangeAmountOfPaymentOK2PayTypeKonbini:
		*s = ChangeAmountOfPaymentOK2PayTypeKonbini
		return nil
	case ChangeAmountOfPaymentOK2PayTypePaypay:
		*s = ChangeAmountOfPaymentOK2PayTypePaypay
		return nil
	case ChangeAmountOfPaymentOK2PayTypeApplepay:
		*s = ChangeAmountOfPaymentOK2PayTypeApplepay
		return nil
	case ChangeAmountOfPaymentOK2PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentOK2PayTypeDirectdebit
		return nil
	case ChangeAmountOfPaymentOK2PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentOK2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 振替結果コード
// - `0`: 振替成功<br><span class="smallText">振替が成功しました。</span>
// - `1`: 残高不足（失敗）<br><span
// class="smallText">口座残高の不足により振替に失敗しました。</span>
// - `2`: 預金取引無し（失敗）<br><span
// class="smallText">指定した口座が存在しないなどの理由により振替に失敗しました。</span>
// - `3`: 購入者事由（失敗）<br><span
// class="smallText">購入者による振替取引の停止等により振替に失敗しました。</span>
// - `4`: 依頼書未着・不備（失敗）<br><span
// class="smallText">（依頼書登録）この決済に所定の期日までの口座振替依頼書の提出が確認出来なかったため振替に失敗しました。</span>
// - `8`: ショップ事由（失敗）<br><span
// class="smallText">ショップに起因する事由により振替に失敗しました。詳細はfincodeにお問い合わせください。</span>
// - `9 | E | N`: その他（失敗）<br><span
// class="smallText">その他の理由により振替に失敗しました（通常は発生しません）。詳細はfincodeにお問い合わせください。</span>
// [お問い合わせはこちらのフォームから](https://dashboard.fincode.
// jp/contact)いただけます。.
type ChangeAmountOfPaymentOK2ResultCode string

const (
	ChangeAmountOfPaymentOK2ResultCode0 ChangeAmountOfPaymentOK2ResultCode = "0"
	ChangeAmountOfPaymentOK2ResultCode1 ChangeAmountOfPaymentOK2ResultCode = "1"
	ChangeAmountOfPaymentOK2ResultCode2 ChangeAmountOfPaymentOK2ResultCode = "2"
	ChangeAmountOfPaymentOK2ResultCode3 ChangeAmountOfPaymentOK2ResultCode = "3"
	ChangeAmountOfPaymentOK2ResultCode4 ChangeAmountOfPaymentOK2ResultCode = "4"
	ChangeAmountOfPaymentOK2ResultCode8 ChangeAmountOfPaymentOK2ResultCode = "8"
	ChangeAmountOfPaymentOK2ResultCode9 ChangeAmountOfPaymentOK2ResultCode = "9"
	ChangeAmountOfPaymentOK2ResultCodeE ChangeAmountOfPaymentOK2ResultCode = "E"
	ChangeAmountOfPaymentOK2ResultCodeN ChangeAmountOfPaymentOK2ResultCode = "N"
)

// AllValues returns all ChangeAmountOfPaymentOK2ResultCode values.
func (ChangeAmountOfPaymentOK2ResultCode) AllValues() []ChangeAmountOfPaymentOK2ResultCode {
	return []ChangeAmountOfPaymentOK2ResultCode{
		ChangeAmountOfPaymentOK2ResultCode0,
		ChangeAmountOfPaymentOK2ResultCode1,
		ChangeAmountOfPaymentOK2ResultCode2,
		ChangeAmountOfPaymentOK2ResultCode3,
		ChangeAmountOfPaymentOK2ResultCode4,
		ChangeAmountOfPaymentOK2ResultCode8,
		ChangeAmountOfPaymentOK2ResultCode9,
		ChangeAmountOfPaymentOK2ResultCodeE,
		ChangeAmountOfPaymentOK2ResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK2ResultCode) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK2ResultCode0:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCode1:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCode2:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCode3:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCode4:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCode8:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCode9:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCodeE:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2ResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK2ResultCode) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK2ResultCode(data) {
	case ChangeAmountOfPaymentOK2ResultCode0:
		*s = ChangeAmountOfPaymentOK2ResultCode0
		return nil
	case ChangeAmountOfPaymentOK2ResultCode1:
		*s = ChangeAmountOfPaymentOK2ResultCode1
		return nil
	case ChangeAmountOfPaymentOK2ResultCode2:
		*s = ChangeAmountOfPaymentOK2ResultCode2
		return nil
	case ChangeAmountOfPaymentOK2ResultCode3:
		*s = ChangeAmountOfPaymentOK2ResultCode3
		return nil
	case ChangeAmountOfPaymentOK2ResultCode4:
		*s = ChangeAmountOfPaymentOK2ResultCode4
		return nil
	case ChangeAmountOfPaymentOK2ResultCode8:
		*s = ChangeAmountOfPaymentOK2ResultCode8
		return nil
	case ChangeAmountOfPaymentOK2ResultCode9:
		*s = ChangeAmountOfPaymentOK2ResultCode9
		return nil
	case ChangeAmountOfPaymentOK2ResultCodeE:
		*s = ChangeAmountOfPaymentOK2ResultCodeE
		return nil
	case ChangeAmountOfPaymentOK2ResultCodeN:
		*s = ChangeAmountOfPaymentOK2ResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ChangeAmountOfPaymentOK2Status string

const (
	ChangeAmountOfPaymentOK2StatusUNPROCESSED             ChangeAmountOfPaymentOK2Status = "UNPROCESSED"
	ChangeAmountOfPaymentOK2StatusCHECKED                 ChangeAmountOfPaymentOK2Status = "CHECKED"
	ChangeAmountOfPaymentOK2StatusAUTHORIZED              ChangeAmountOfPaymentOK2Status = "AUTHORIZED"
	ChangeAmountOfPaymentOK2StatusAWAITINGCUSTOMERPAYMENT ChangeAmountOfPaymentOK2Status = "AWAITING_CUSTOMER_PAYMENT"
	ChangeAmountOfPaymentOK2StatusAWAITINGPAYMENTAPPROVAL ChangeAmountOfPaymentOK2Status = "AWAITING_PAYMENT_APPROVAL"
	ChangeAmountOfPaymentOK2StatusCAPTURED                ChangeAmountOfPaymentOK2Status = "CAPTURED"
	ChangeAmountOfPaymentOK2StatusCANCELED                ChangeAmountOfPaymentOK2Status = "CANCELED"
	ChangeAmountOfPaymentOK2StatusEXPIRED                 ChangeAmountOfPaymentOK2Status = "EXPIRED"
	ChangeAmountOfPaymentOK2StatusAUTHENTICATED           ChangeAmountOfPaymentOK2Status = "AUTHENTICATED"
	ChangeAmountOfPaymentOK2StatusFAILED                  ChangeAmountOfPaymentOK2Status = "FAILED"
)

// AllValues returns all ChangeAmountOfPaymentOK2Status values.
func (ChangeAmountOfPaymentOK2Status) AllValues() []ChangeAmountOfPaymentOK2Status {
	return []ChangeAmountOfPaymentOK2Status{
		ChangeAmountOfPaymentOK2StatusUNPROCESSED,
		ChangeAmountOfPaymentOK2StatusCHECKED,
		ChangeAmountOfPaymentOK2StatusAUTHORIZED,
		ChangeAmountOfPaymentOK2StatusAWAITINGCUSTOMERPAYMENT,
		ChangeAmountOfPaymentOK2StatusAWAITINGPAYMENTAPPROVAL,
		ChangeAmountOfPaymentOK2StatusCAPTURED,
		ChangeAmountOfPaymentOK2StatusCANCELED,
		ChangeAmountOfPaymentOK2StatusEXPIRED,
		ChangeAmountOfPaymentOK2StatusAUTHENTICATED,
		ChangeAmountOfPaymentOK2StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentOK2Status) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentOK2StatusUNPROCESSED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusCHECKED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusAUTHORIZED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusCAPTURED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusCANCELED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusEXPIRED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusAUTHENTICATED:
		return []byte(s), nil
	case ChangeAmountOfPaymentOK2StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentOK2Status) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentOK2Status(data) {
	case ChangeAmountOfPaymentOK2StatusUNPROCESSED:
		*s = ChangeAmountOfPaymentOK2StatusUNPROCESSED
		return nil
	case ChangeAmountOfPaymentOK2StatusCHECKED:
		*s = ChangeAmountOfPaymentOK2StatusCHECKED
		return nil
	case ChangeAmountOfPaymentOK2StatusAUTHORIZED:
		*s = ChangeAmountOfPaymentOK2StatusAUTHORIZED
		return nil
	case ChangeAmountOfPaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = ChangeAmountOfPaymentOK2StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ChangeAmountOfPaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = ChangeAmountOfPaymentOK2StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ChangeAmountOfPaymentOK2StatusCAPTURED:
		*s = ChangeAmountOfPaymentOK2StatusCAPTURED
		return nil
	case ChangeAmountOfPaymentOK2StatusCANCELED:
		*s = ChangeAmountOfPaymentOK2StatusCANCELED
		return nil
	case ChangeAmountOfPaymentOK2StatusEXPIRED:
		*s = ChangeAmountOfPaymentOK2StatusEXPIRED
		return nil
	case ChangeAmountOfPaymentOK2StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK2StatusAUTHENTICATED
		return nil
	case ChangeAmountOfPaymentOK2StatusFAILED:
		*s = ChangeAmountOfPaymentOK2StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ChangeAmountOfPaymentReq represents sum type.
type ChangeAmountOfPaymentReq struct {
	Type                      ChangeAmountOfPaymentReqType // switch on this field
	ChangeAmountOfPaymentReq0 ChangeAmountOfPaymentReq0
	ChangeAmountOfPaymentReq1 ChangeAmountOfPaymentReq1
	ChangeAmountOfPaymentReq2 ChangeAmountOfPaymentReq2
}

// ChangeAmountOfPaymentReqType is oneOf type of ChangeAmountOfPaymentReq.
type ChangeAmountOfPaymentReqType string

// Possible values for ChangeAmountOfPaymentReqType.
const (
	ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq ChangeAmountOfPaymentReqType = "ChangeAmountOfPaymentReq0"
	ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq ChangeAmountOfPaymentReqType = "ChangeAmountOfPaymentReq1"
	ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq ChangeAmountOfPaymentReqType = "ChangeAmountOfPaymentReq2"
)

// IsChangeAmountOfPaymentReq0 reports whether ChangeAmountOfPaymentReq is ChangeAmountOfPaymentReq0.
func (s ChangeAmountOfPaymentReq) IsChangeAmountOfPaymentReq0() bool {
	return s.Type == ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq
}

// IsChangeAmountOfPaymentReq1 reports whether ChangeAmountOfPaymentReq is ChangeAmountOfPaymentReq1.
func (s ChangeAmountOfPaymentReq) IsChangeAmountOfPaymentReq1() bool {
	return s.Type == ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq
}

// IsChangeAmountOfPaymentReq2 reports whether ChangeAmountOfPaymentReq is ChangeAmountOfPaymentReq2.
func (s ChangeAmountOfPaymentReq) IsChangeAmountOfPaymentReq2() bool {
	return s.Type == ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq
}

// SetChangeAmountOfPaymentReq0 sets ChangeAmountOfPaymentReq to ChangeAmountOfPaymentReq0.
func (s *ChangeAmountOfPaymentReq) SetChangeAmountOfPaymentReq0(v ChangeAmountOfPaymentReq0) {
	s.Type = ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq
	s.ChangeAmountOfPaymentReq0 = v
}

// GetChangeAmountOfPaymentReq0 returns ChangeAmountOfPaymentReq0 and true boolean if ChangeAmountOfPaymentReq is ChangeAmountOfPaymentReq0.
func (s ChangeAmountOfPaymentReq) GetChangeAmountOfPaymentReq0() (v ChangeAmountOfPaymentReq0, ok bool) {
	if !s.IsChangeAmountOfPaymentReq0() {
		return v, false
	}
	return s.ChangeAmountOfPaymentReq0, true
}

// NewChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq returns new ChangeAmountOfPaymentReq from ChangeAmountOfPaymentReq0.
func NewChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq(v ChangeAmountOfPaymentReq0) ChangeAmountOfPaymentReq {
	var s ChangeAmountOfPaymentReq
	s.SetChangeAmountOfPaymentReq0(v)
	return s
}

// SetChangeAmountOfPaymentReq1 sets ChangeAmountOfPaymentReq to ChangeAmountOfPaymentReq1.
func (s *ChangeAmountOfPaymentReq) SetChangeAmountOfPaymentReq1(v ChangeAmountOfPaymentReq1) {
	s.Type = ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq
	s.ChangeAmountOfPaymentReq1 = v
}

// GetChangeAmountOfPaymentReq1 returns ChangeAmountOfPaymentReq1 and true boolean if ChangeAmountOfPaymentReq is ChangeAmountOfPaymentReq1.
func (s ChangeAmountOfPaymentReq) GetChangeAmountOfPaymentReq1() (v ChangeAmountOfPaymentReq1, ok bool) {
	if !s.IsChangeAmountOfPaymentReq1() {
		return v, false
	}
	return s.ChangeAmountOfPaymentReq1, true
}

// NewChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq returns new ChangeAmountOfPaymentReq from ChangeAmountOfPaymentReq1.
func NewChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq(v ChangeAmountOfPaymentReq1) ChangeAmountOfPaymentReq {
	var s ChangeAmountOfPaymentReq
	s.SetChangeAmountOfPaymentReq1(v)
	return s
}

// SetChangeAmountOfPaymentReq2 sets ChangeAmountOfPaymentReq to ChangeAmountOfPaymentReq2.
func (s *ChangeAmountOfPaymentReq) SetChangeAmountOfPaymentReq2(v ChangeAmountOfPaymentReq2) {
	s.Type = ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq
	s.ChangeAmountOfPaymentReq2 = v
}

// GetChangeAmountOfPaymentReq2 returns ChangeAmountOfPaymentReq2 and true boolean if ChangeAmountOfPaymentReq is ChangeAmountOfPaymentReq2.
func (s ChangeAmountOfPaymentReq) GetChangeAmountOfPaymentReq2() (v ChangeAmountOfPaymentReq2, ok bool) {
	if !s.IsChangeAmountOfPaymentReq2() {
		return v, false
	}
	return s.ChangeAmountOfPaymentReq2, true
}

// NewChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq returns new ChangeAmountOfPaymentReq from ChangeAmountOfPaymentReq2.
func NewChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq(v ChangeAmountOfPaymentReq2) ChangeAmountOfPaymentReq {
	var s ChangeAmountOfPaymentReq
	s.SetChangeAmountOfPaymentReq2(v)
	return s
}

type ChangeAmountOfPaymentReq0 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType  ChangeAmountOfPaymentReq0PayType `json:"pay_type"`
	AccessID string                           `json:"access_id"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/restriction).
	Amount string `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/restriction).
	Tax OptNilString `json:"tax"`
	// 取引種別\
	// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
	// - `CHECK`：有効性チェックのみ行う
	// - `AUTH`：仮売上にする
	// - `CAPTURE`：即時売上.
	JobCode ChangeAmountOfPaymentReq0JobCode `json:"job_code"`
}

// GetPayType returns the value of PayType.
func (s *ChangeAmountOfPaymentReq0) GetPayType() ChangeAmountOfPaymentReq0PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ChangeAmountOfPaymentReq0) GetAccessID() string {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ChangeAmountOfPaymentReq0) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ChangeAmountOfPaymentReq0) GetTax() OptNilString {
	return s.Tax
}

// GetJobCode returns the value of JobCode.
func (s *ChangeAmountOfPaymentReq0) GetJobCode() ChangeAmountOfPaymentReq0JobCode {
	return s.JobCode
}

// SetPayType sets the value of PayType.
func (s *ChangeAmountOfPaymentReq0) SetPayType(val ChangeAmountOfPaymentReq0PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ChangeAmountOfPaymentReq0) SetAccessID(val string) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ChangeAmountOfPaymentReq0) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ChangeAmountOfPaymentReq0) SetTax(val OptNilString) {
	s.Tax = val
}

// SetJobCode sets the value of JobCode.
func (s *ChangeAmountOfPaymentReq0) SetJobCode(val ChangeAmountOfPaymentReq0JobCode) {
	s.JobCode = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type ChangeAmountOfPaymentReq0JobCode string

const (
	ChangeAmountOfPaymentReq0JobCodeCHECK   ChangeAmountOfPaymentReq0JobCode = "CHECK"
	ChangeAmountOfPaymentReq0JobCodeAUTH    ChangeAmountOfPaymentReq0JobCode = "AUTH"
	ChangeAmountOfPaymentReq0JobCodeCAPTURE ChangeAmountOfPaymentReq0JobCode = "CAPTURE"
)

// AllValues returns all ChangeAmountOfPaymentReq0JobCode values.
func (ChangeAmountOfPaymentReq0JobCode) AllValues() []ChangeAmountOfPaymentReq0JobCode {
	return []ChangeAmountOfPaymentReq0JobCode{
		ChangeAmountOfPaymentReq0JobCodeCHECK,
		ChangeAmountOfPaymentReq0JobCodeAUTH,
		ChangeAmountOfPaymentReq0JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentReq0JobCode) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentReq0JobCodeCHECK:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq0JobCodeAUTH:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq0JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentReq0JobCode) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentReq0JobCode(data) {
	case ChangeAmountOfPaymentReq0JobCodeCHECK:
		*s = ChangeAmountOfPaymentReq0JobCodeCHECK
		return nil
	case ChangeAmountOfPaymentReq0JobCodeAUTH:
		*s = ChangeAmountOfPaymentReq0JobCodeAUTH
		return nil
	case ChangeAmountOfPaymentReq0JobCodeCAPTURE:
		*s = ChangeAmountOfPaymentReq0JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ChangeAmountOfPaymentReq0PayType string

const (
	ChangeAmountOfPaymentReq0PayTypeCard           ChangeAmountOfPaymentReq0PayType = "Card"
	ChangeAmountOfPaymentReq0PayTypeKonbini        ChangeAmountOfPaymentReq0PayType = "Konbini"
	ChangeAmountOfPaymentReq0PayTypePaypay         ChangeAmountOfPaymentReq0PayType = "Paypay"
	ChangeAmountOfPaymentReq0PayTypeApplepay       ChangeAmountOfPaymentReq0PayType = "Applepay"
	ChangeAmountOfPaymentReq0PayTypeDirectdebit    ChangeAmountOfPaymentReq0PayType = "Directdebit"
	ChangeAmountOfPaymentReq0PayTypeVirtualaccount ChangeAmountOfPaymentReq0PayType = "Virtualaccount"
)

// AllValues returns all ChangeAmountOfPaymentReq0PayType values.
func (ChangeAmountOfPaymentReq0PayType) AllValues() []ChangeAmountOfPaymentReq0PayType {
	return []ChangeAmountOfPaymentReq0PayType{
		ChangeAmountOfPaymentReq0PayTypeCard,
		ChangeAmountOfPaymentReq0PayTypeKonbini,
		ChangeAmountOfPaymentReq0PayTypePaypay,
		ChangeAmountOfPaymentReq0PayTypeApplepay,
		ChangeAmountOfPaymentReq0PayTypeDirectdebit,
		ChangeAmountOfPaymentReq0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentReq0PayType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentReq0PayTypeCard:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq0PayTypeKonbini:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq0PayTypePaypay:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq0PayTypeApplepay:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq0PayTypeDirectdebit:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentReq0PayType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentReq0PayType(data) {
	case ChangeAmountOfPaymentReq0PayTypeCard:
		*s = ChangeAmountOfPaymentReq0PayTypeCard
		return nil
	case ChangeAmountOfPaymentReq0PayTypeKonbini:
		*s = ChangeAmountOfPaymentReq0PayTypeKonbini
		return nil
	case ChangeAmountOfPaymentReq0PayTypePaypay:
		*s = ChangeAmountOfPaymentReq0PayTypePaypay
		return nil
	case ChangeAmountOfPaymentReq0PayTypeApplepay:
		*s = ChangeAmountOfPaymentReq0PayTypeApplepay
		return nil
	case ChangeAmountOfPaymentReq0PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentReq0PayTypeDirectdebit
		return nil
	case ChangeAmountOfPaymentReq0PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentReq0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChangeAmountOfPaymentReq1 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType  ChangeAmountOfPaymentReq1PayType `json:"pay_type"`
	AccessID string                           `json:"access_id"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [PayPay > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/paypay/restriction).
	Amount string `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [PayPay > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/paypay/restriction).
	Tax               OptNilString `json:"tax"`
	UpdateDescription *NilString   `json:"update_description"`
}

// GetPayType returns the value of PayType.
func (s *ChangeAmountOfPaymentReq1) GetPayType() ChangeAmountOfPaymentReq1PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ChangeAmountOfPaymentReq1) GetAccessID() string {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ChangeAmountOfPaymentReq1) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ChangeAmountOfPaymentReq1) GetTax() OptNilString {
	return s.Tax
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *ChangeAmountOfPaymentReq1) GetUpdateDescription() *NilString {
	return s.UpdateDescription
}

// SetPayType sets the value of PayType.
func (s *ChangeAmountOfPaymentReq1) SetPayType(val ChangeAmountOfPaymentReq1PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ChangeAmountOfPaymentReq1) SetAccessID(val string) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ChangeAmountOfPaymentReq1) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ChangeAmountOfPaymentReq1) SetTax(val OptNilString) {
	s.Tax = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *ChangeAmountOfPaymentReq1) SetUpdateDescription(val *NilString) {
	s.UpdateDescription = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ChangeAmountOfPaymentReq1PayType string

const (
	ChangeAmountOfPaymentReq1PayTypeCard           ChangeAmountOfPaymentReq1PayType = "Card"
	ChangeAmountOfPaymentReq1PayTypeKonbini        ChangeAmountOfPaymentReq1PayType = "Konbini"
	ChangeAmountOfPaymentReq1PayTypePaypay         ChangeAmountOfPaymentReq1PayType = "Paypay"
	ChangeAmountOfPaymentReq1PayTypeApplepay       ChangeAmountOfPaymentReq1PayType = "Applepay"
	ChangeAmountOfPaymentReq1PayTypeDirectdebit    ChangeAmountOfPaymentReq1PayType = "Directdebit"
	ChangeAmountOfPaymentReq1PayTypeVirtualaccount ChangeAmountOfPaymentReq1PayType = "Virtualaccount"
)

// AllValues returns all ChangeAmountOfPaymentReq1PayType values.
func (ChangeAmountOfPaymentReq1PayType) AllValues() []ChangeAmountOfPaymentReq1PayType {
	return []ChangeAmountOfPaymentReq1PayType{
		ChangeAmountOfPaymentReq1PayTypeCard,
		ChangeAmountOfPaymentReq1PayTypeKonbini,
		ChangeAmountOfPaymentReq1PayTypePaypay,
		ChangeAmountOfPaymentReq1PayTypeApplepay,
		ChangeAmountOfPaymentReq1PayTypeDirectdebit,
		ChangeAmountOfPaymentReq1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentReq1PayType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentReq1PayTypeCard:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq1PayTypeKonbini:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq1PayTypePaypay:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq1PayTypeApplepay:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq1PayTypeDirectdebit:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentReq1PayType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentReq1PayType(data) {
	case ChangeAmountOfPaymentReq1PayTypeCard:
		*s = ChangeAmountOfPaymentReq1PayTypeCard
		return nil
	case ChangeAmountOfPaymentReq1PayTypeKonbini:
		*s = ChangeAmountOfPaymentReq1PayTypeKonbini
		return nil
	case ChangeAmountOfPaymentReq1PayTypePaypay:
		*s = ChangeAmountOfPaymentReq1PayTypePaypay
		return nil
	case ChangeAmountOfPaymentReq1PayTypeApplepay:
		*s = ChangeAmountOfPaymentReq1PayTypeApplepay
		return nil
	case ChangeAmountOfPaymentReq1PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentReq1PayTypeDirectdebit
		return nil
	case ChangeAmountOfPaymentReq1PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentReq1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChangeAmountOfPaymentReq2 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType  ChangeAmountOfPaymentReq2PayType `json:"pay_type"`
	AccessID string                           `json:"access_id"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [口座振替 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/directdebit/restriction).
	Amount string `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [口座振替 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/directdebit/restriction).
	Tax OptNilString `json:"tax"`
}

// GetPayType returns the value of PayType.
func (s *ChangeAmountOfPaymentReq2) GetPayType() ChangeAmountOfPaymentReq2PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ChangeAmountOfPaymentReq2) GetAccessID() string {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ChangeAmountOfPaymentReq2) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ChangeAmountOfPaymentReq2) GetTax() OptNilString {
	return s.Tax
}

// SetPayType sets the value of PayType.
func (s *ChangeAmountOfPaymentReq2) SetPayType(val ChangeAmountOfPaymentReq2PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ChangeAmountOfPaymentReq2) SetAccessID(val string) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ChangeAmountOfPaymentReq2) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ChangeAmountOfPaymentReq2) SetTax(val OptNilString) {
	s.Tax = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ChangeAmountOfPaymentReq2PayType string

const (
	ChangeAmountOfPaymentReq2PayTypeCard           ChangeAmountOfPaymentReq2PayType = "Card"
	ChangeAmountOfPaymentReq2PayTypeKonbini        ChangeAmountOfPaymentReq2PayType = "Konbini"
	ChangeAmountOfPaymentReq2PayTypePaypay         ChangeAmountOfPaymentReq2PayType = "Paypay"
	ChangeAmountOfPaymentReq2PayTypeApplepay       ChangeAmountOfPaymentReq2PayType = "Applepay"
	ChangeAmountOfPaymentReq2PayTypeDirectdebit    ChangeAmountOfPaymentReq2PayType = "Directdebit"
	ChangeAmountOfPaymentReq2PayTypeVirtualaccount ChangeAmountOfPaymentReq2PayType = "Virtualaccount"
)

// AllValues returns all ChangeAmountOfPaymentReq2PayType values.
func (ChangeAmountOfPaymentReq2PayType) AllValues() []ChangeAmountOfPaymentReq2PayType {
	return []ChangeAmountOfPaymentReq2PayType{
		ChangeAmountOfPaymentReq2PayTypeCard,
		ChangeAmountOfPaymentReq2PayTypeKonbini,
		ChangeAmountOfPaymentReq2PayTypePaypay,
		ChangeAmountOfPaymentReq2PayTypeApplepay,
		ChangeAmountOfPaymentReq2PayTypeDirectdebit,
		ChangeAmountOfPaymentReq2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChangeAmountOfPaymentReq2PayType) MarshalText() ([]byte, error) {
	switch s {
	case ChangeAmountOfPaymentReq2PayTypeCard:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq2PayTypeKonbini:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq2PayTypePaypay:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq2PayTypeApplepay:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq2PayTypeDirectdebit:
		return []byte(s), nil
	case ChangeAmountOfPaymentReq2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChangeAmountOfPaymentReq2PayType) UnmarshalText(data []byte) error {
	switch ChangeAmountOfPaymentReq2PayType(data) {
	case ChangeAmountOfPaymentReq2PayTypeCard:
		*s = ChangeAmountOfPaymentReq2PayTypeCard
		return nil
	case ChangeAmountOfPaymentReq2PayTypeKonbini:
		*s = ChangeAmountOfPaymentReq2PayTypeKonbini
		return nil
	case ChangeAmountOfPaymentReq2PayTypePaypay:
		*s = ChangeAmountOfPaymentReq2PayTypePaypay
		return nil
	case ChangeAmountOfPaymentReq2PayTypeApplepay:
		*s = ChangeAmountOfPaymentReq2PayTypeApplepay
		return nil
	case ChangeAmountOfPaymentReq2PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentReq2PayTypeDirectdebit
		return nil
	case ChangeAmountOfPaymentReq2PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentReq2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ContentInfo.V2
type ContentInfoV2 struct {
	// 商材1 名称.
	Content1Name OptString `json:"content1_name"`
	// 商材1 説明.
	Content1Description OptString `json:"content1_description"`
	// 商材1 単価.
	Content1UnitPrice OptInt `json:"content1_unit_price"`
	// 商材2 名称.
	Content2Name OptString `json:"content2_name"`
	// 商材2 説明.
	Content2Description OptString `json:"content2_description"`
	// 商材2 単価.
	Content2UnitPrice OptInt `json:"content2_unit_price"`
	// 商材3 名称.
	Content3Name OptString `json:"content3_name"`
	// 商材3 説明.
	Content3Description OptString `json:"content3_description"`
	// 商材3 単価.
	Content3UnitPrice OptInt `json:"content3_unit_price"`
}

// GetContent1Name returns the value of Content1Name.
func (s *ContentInfoV2) GetContent1Name() OptString {
	return s.Content1Name
}

// GetContent1Description returns the value of Content1Description.
func (s *ContentInfoV2) GetContent1Description() OptString {
	return s.Content1Description
}

// GetContent1UnitPrice returns the value of Content1UnitPrice.
func (s *ContentInfoV2) GetContent1UnitPrice() OptInt {
	return s.Content1UnitPrice
}

// GetContent2Name returns the value of Content2Name.
func (s *ContentInfoV2) GetContent2Name() OptString {
	return s.Content2Name
}

// GetContent2Description returns the value of Content2Description.
func (s *ContentInfoV2) GetContent2Description() OptString {
	return s.Content2Description
}

// GetContent2UnitPrice returns the value of Content2UnitPrice.
func (s *ContentInfoV2) GetContent2UnitPrice() OptInt {
	return s.Content2UnitPrice
}

// GetContent3Name returns the value of Content3Name.
func (s *ContentInfoV2) GetContent3Name() OptString {
	return s.Content3Name
}

// GetContent3Description returns the value of Content3Description.
func (s *ContentInfoV2) GetContent3Description() OptString {
	return s.Content3Description
}

// GetContent3UnitPrice returns the value of Content3UnitPrice.
func (s *ContentInfoV2) GetContent3UnitPrice() OptInt {
	return s.Content3UnitPrice
}

// SetContent1Name sets the value of Content1Name.
func (s *ContentInfoV2) SetContent1Name(val OptString) {
	s.Content1Name = val
}

// SetContent1Description sets the value of Content1Description.
func (s *ContentInfoV2) SetContent1Description(val OptString) {
	s.Content1Description = val
}

// SetContent1UnitPrice sets the value of Content1UnitPrice.
func (s *ContentInfoV2) SetContent1UnitPrice(val OptInt) {
	s.Content1UnitPrice = val
}

// SetContent2Name sets the value of Content2Name.
func (s *ContentInfoV2) SetContent2Name(val OptString) {
	s.Content2Name = val
}

// SetContent2Description sets the value of Content2Description.
func (s *ContentInfoV2) SetContent2Description(val OptString) {
	s.Content2Description = val
}

// SetContent2UnitPrice sets the value of Content2UnitPrice.
func (s *ContentInfoV2) SetContent2UnitPrice(val OptInt) {
	s.Content2UnitPrice = val
}

// SetContent3Name sets the value of Content3Name.
func (s *ContentInfoV2) SetContent3Name(val OptString) {
	s.Content3Name = val
}

// SetContent3Description sets the value of Content3Description.
func (s *ContentInfoV2) SetContent3Description(val OptString) {
	s.Content3Description = val
}

// SetContent3UnitPrice sets the value of Content3UnitPrice.
func (s *ContentInfoV2) SetContent3UnitPrice(val OptInt) {
	s.Content3UnitPrice = val
}

// Ref: #/components/schemas/Contracts.Retrieving.Response
type ContractsRetrievingResponse struct {
	// ショップID（テナント）.
	ShopID     OptString                                 `json:"shop_id"`
	PlatformID OptString                                 `json:"platform_id"`
	ShopType   OptNilContractsRetrievingResponseShopType `json:"shop_type"`
	StatusCode OptContractsRetrievingResponseStatusCode  `json:"status_code"`
	// 審査情報\
	// \
	// 決済事業者ごとの審査状況を配列に格納しています。\
	// ある決済手段について審査が開始されていない場合、その決済手段に対応する`examination_master_id`をもつオブジェクトは配列中に存在しません。.
	Examination []ContractsRetrievingResponseExaminationItem `json:"examination"`
	// 利用可能モード
	// - 201: テスト環境のみ利用可能
	// - 202: 本番環境利用可能.
	AvailableStatusCode OptContractsRetrievingResponseAvailableStatusCode `json:"available_status_code"`
	// ショップを作成したユーザーの登録日
	// 形式：`yyyy/MM/dd`.
	CreateDate OptString `json:"create_date"`
	// 本番環境申請日
	// 形式：`yyyy/MM/dd`.
	ContractedAt OptNilString `json:"contracted_at"`
	// 初回登録完了日
	// 形式：`yyyy/MM/dd`.
	StartChargingAt OptNilString `json:"start_charging_at"`
	// 解約日
	// 形式：`yyyy/MM/dd`.
	ExpiredAt OptNilString `json:"expired_at"`
	// 売上入金 可否ステータス
	// - `501`: 入金に必要な手続きが未完了
	// - `502`: 入金可能
	// - `503`: 入金保留.
	SalesDepositStatusCode OptNilContractsRetrievingResponseSalesDepositStatusCode `json:"sales_deposit_status_code"`
	// 売上入金 可否ステータス 更新日
	// 形式：`yyyy/MM/dd`.
	SalesDepositStatusUpdatedDate OptNilString `json:"sales_deposit_status_updated_date"`
	// 契約不成立日
	// 形式：`yyyy/MM/dd`.
	DeniedAt OptNilString `json:"denied_at"`
	// 請求停止フラグ.
	SuspendedBilling OptNilBool `json:"suspended_billing"`
	// 請求停止フラグ 更新日
	// 形式：`yyyy/MM/dd`.
	SuspendedBillingDate OptNilString `json:"suspended_billing_date"`
	// 入金停止フラグ.
	SuspendedPayment OptNilBool `json:"suspended_payment"`
	// 入金停止フラグ 更新日
	// 形式：`yyyy/MM/dd`.
	SuspendedPaymentDate OptNilString `json:"suspended_payment_date"`
	// サービス停止フラグ.
	SuspendedService OptNilBool `json:"suspended_service"`
	// サービス停止フラグ 更新日
	// 形式：`yyyy/MM/dd`.
	SuspendedServiceDate OptNilString `json:"suspended_service_date"`
	// 即時利用停止フラグ.
	SuspededImmediateUse OptNilBool `json:"suspeded_immediate_use"`
	// 即時利用停止フラグ 更新日
	// 形式：`yyyy/MM/dd`.
	SuspendedImmediateUseDate OptNilString `json:"suspended_immediate_use_date"`
	// 停止・解約 備考.
	StopCancelaltionMemo OptNilString `json:"stop_cancelaltion_memo"`
	// 特記事項（債権債務）.
	ObligationsNotice OptNilString `json:"obligations_notice"`
	// ショップ名（ユーザー用）.
	UserShopName OptNilString `json:"user_shop_name"`
	// 登録メールアドレス.
	RegisterMail OptNilString `json:"register_mail"`
	// プラットフォームの代表ショップか
	// - true: 代表ショップ
	// - false: 代表ショップではない.
	PlatformReprentativeShop OptNilBool                                        `json:"platform_reprentative_shop"`
	SharedCustomerFlag       *NilContractsRetrievingResponseSharedCustomerFlag `json:"shared_customer_flag"`
	// 契約情報.
	ContractDetail OptContractsRetrievingResponseContractDetail `json:"contract_detail"`
	// 入金先口座.
	ContractBankAccount OptContractsRetrievingResponseContractBankAccount `json:"contract_bank_account"`
	// バーチャル口座情報\
	// \
	// このショップに関してfincodeへの支払いが売上入金額を上回った場合、この口座に所定の期日までに入金を行う必要があります。.
	ContractVirtualBank OptContractsRetrievingResponseContractVirtualBank `json:"contract_virtual_bank"`
	// カード決済 仕向け先のリスト.
	ContractCardDestination []ContractsRetrievingResponseContractCardDestinationItem `json:"contract_card_destination"`
	// カード決済 設定\
	// \
	// 3Dセキュアが有効かどうか・審査の結果、3Dセキュアの利用が必須となったかどうか・分割払い／リボ払い利用ができるかどうかなどの情報が含まれます。.
	CreditCardSetting OptContractsRetrievingResponseCreditCardSetting `json:"credit_card_setting"`
	// 登記簿上の法人情報.
	OfficialRegisteredCorporateInfo OptContractsRetrievingResponseOfficialRegisteredCorporateInfo `json:"official_registered_corporate_info"`
}

// GetShopID returns the value of ShopID.
func (s *ContractsRetrievingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPlatformID returns the value of PlatformID.
func (s *ContractsRetrievingResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetShopType returns the value of ShopType.
func (s *ContractsRetrievingResponse) GetShopType() OptNilContractsRetrievingResponseShopType {
	return s.ShopType
}

// GetStatusCode returns the value of StatusCode.
func (s *ContractsRetrievingResponse) GetStatusCode() OptContractsRetrievingResponseStatusCode {
	return s.StatusCode
}

// GetExamination returns the value of Examination.
func (s *ContractsRetrievingResponse) GetExamination() []ContractsRetrievingResponseExaminationItem {
	return s.Examination
}

// GetAvailableStatusCode returns the value of AvailableStatusCode.
func (s *ContractsRetrievingResponse) GetAvailableStatusCode() OptContractsRetrievingResponseAvailableStatusCode {
	return s.AvailableStatusCode
}

// GetCreateDate returns the value of CreateDate.
func (s *ContractsRetrievingResponse) GetCreateDate() OptString {
	return s.CreateDate
}

// GetContractedAt returns the value of ContractedAt.
func (s *ContractsRetrievingResponse) GetContractedAt() OptNilString {
	return s.ContractedAt
}

// GetStartChargingAt returns the value of StartChargingAt.
func (s *ContractsRetrievingResponse) GetStartChargingAt() OptNilString {
	return s.StartChargingAt
}

// GetExpiredAt returns the value of ExpiredAt.
func (s *ContractsRetrievingResponse) GetExpiredAt() OptNilString {
	return s.ExpiredAt
}

// GetSalesDepositStatusCode returns the value of SalesDepositStatusCode.
func (s *ContractsRetrievingResponse) GetSalesDepositStatusCode() OptNilContractsRetrievingResponseSalesDepositStatusCode {
	return s.SalesDepositStatusCode
}

// GetSalesDepositStatusUpdatedDate returns the value of SalesDepositStatusUpdatedDate.
func (s *ContractsRetrievingResponse) GetSalesDepositStatusUpdatedDate() OptNilString {
	return s.SalesDepositStatusUpdatedDate
}

// GetDeniedAt returns the value of DeniedAt.
func (s *ContractsRetrievingResponse) GetDeniedAt() OptNilString {
	return s.DeniedAt
}

// GetSuspendedBilling returns the value of SuspendedBilling.
func (s *ContractsRetrievingResponse) GetSuspendedBilling() OptNilBool {
	return s.SuspendedBilling
}

// GetSuspendedBillingDate returns the value of SuspendedBillingDate.
func (s *ContractsRetrievingResponse) GetSuspendedBillingDate() OptNilString {
	return s.SuspendedBillingDate
}

// GetSuspendedPayment returns the value of SuspendedPayment.
func (s *ContractsRetrievingResponse) GetSuspendedPayment() OptNilBool {
	return s.SuspendedPayment
}

// GetSuspendedPaymentDate returns the value of SuspendedPaymentDate.
func (s *ContractsRetrievingResponse) GetSuspendedPaymentDate() OptNilString {
	return s.SuspendedPaymentDate
}

// GetSuspendedService returns the value of SuspendedService.
func (s *ContractsRetrievingResponse) GetSuspendedService() OptNilBool {
	return s.SuspendedService
}

// GetSuspendedServiceDate returns the value of SuspendedServiceDate.
func (s *ContractsRetrievingResponse) GetSuspendedServiceDate() OptNilString {
	return s.SuspendedServiceDate
}

// GetSuspededImmediateUse returns the value of SuspededImmediateUse.
func (s *ContractsRetrievingResponse) GetSuspededImmediateUse() OptNilBool {
	return s.SuspededImmediateUse
}

// GetSuspendedImmediateUseDate returns the value of SuspendedImmediateUseDate.
func (s *ContractsRetrievingResponse) GetSuspendedImmediateUseDate() OptNilString {
	return s.SuspendedImmediateUseDate
}

// GetStopCancelaltionMemo returns the value of StopCancelaltionMemo.
func (s *ContractsRetrievingResponse) GetStopCancelaltionMemo() OptNilString {
	return s.StopCancelaltionMemo
}

// GetObligationsNotice returns the value of ObligationsNotice.
func (s *ContractsRetrievingResponse) GetObligationsNotice() OptNilString {
	return s.ObligationsNotice
}

// GetUserShopName returns the value of UserShopName.
func (s *ContractsRetrievingResponse) GetUserShopName() OptNilString {
	return s.UserShopName
}

// GetRegisterMail returns the value of RegisterMail.
func (s *ContractsRetrievingResponse) GetRegisterMail() OptNilString {
	return s.RegisterMail
}

// GetPlatformReprentativeShop returns the value of PlatformReprentativeShop.
func (s *ContractsRetrievingResponse) GetPlatformReprentativeShop() OptNilBool {
	return s.PlatformReprentativeShop
}

// GetSharedCustomerFlag returns the value of SharedCustomerFlag.
func (s *ContractsRetrievingResponse) GetSharedCustomerFlag() *NilContractsRetrievingResponseSharedCustomerFlag {
	return s.SharedCustomerFlag
}

// GetContractDetail returns the value of ContractDetail.
func (s *ContractsRetrievingResponse) GetContractDetail() OptContractsRetrievingResponseContractDetail {
	return s.ContractDetail
}

// GetContractBankAccount returns the value of ContractBankAccount.
func (s *ContractsRetrievingResponse) GetContractBankAccount() OptContractsRetrievingResponseContractBankAccount {
	return s.ContractBankAccount
}

// GetContractVirtualBank returns the value of ContractVirtualBank.
func (s *ContractsRetrievingResponse) GetContractVirtualBank() OptContractsRetrievingResponseContractVirtualBank {
	return s.ContractVirtualBank
}

// GetContractCardDestination returns the value of ContractCardDestination.
func (s *ContractsRetrievingResponse) GetContractCardDestination() []ContractsRetrievingResponseContractCardDestinationItem {
	return s.ContractCardDestination
}

// GetCreditCardSetting returns the value of CreditCardSetting.
func (s *ContractsRetrievingResponse) GetCreditCardSetting() OptContractsRetrievingResponseCreditCardSetting {
	return s.CreditCardSetting
}

// GetOfficialRegisteredCorporateInfo returns the value of OfficialRegisteredCorporateInfo.
func (s *ContractsRetrievingResponse) GetOfficialRegisteredCorporateInfo() OptContractsRetrievingResponseOfficialRegisteredCorporateInfo {
	return s.OfficialRegisteredCorporateInfo
}

// SetShopID sets the value of ShopID.
func (s *ContractsRetrievingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPlatformID sets the value of PlatformID.
func (s *ContractsRetrievingResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetShopType sets the value of ShopType.
func (s *ContractsRetrievingResponse) SetShopType(val OptNilContractsRetrievingResponseShopType) {
	s.ShopType = val
}

// SetStatusCode sets the value of StatusCode.
func (s *ContractsRetrievingResponse) SetStatusCode(val OptContractsRetrievingResponseStatusCode) {
	s.StatusCode = val
}

// SetExamination sets the value of Examination.
func (s *ContractsRetrievingResponse) SetExamination(val []ContractsRetrievingResponseExaminationItem) {
	s.Examination = val
}

// SetAvailableStatusCode sets the value of AvailableStatusCode.
func (s *ContractsRetrievingResponse) SetAvailableStatusCode(val OptContractsRetrievingResponseAvailableStatusCode) {
	s.AvailableStatusCode = val
}

// SetCreateDate sets the value of CreateDate.
func (s *ContractsRetrievingResponse) SetCreateDate(val OptString) {
	s.CreateDate = val
}

// SetContractedAt sets the value of ContractedAt.
func (s *ContractsRetrievingResponse) SetContractedAt(val OptNilString) {
	s.ContractedAt = val
}

// SetStartChargingAt sets the value of StartChargingAt.
func (s *ContractsRetrievingResponse) SetStartChargingAt(val OptNilString) {
	s.StartChargingAt = val
}

// SetExpiredAt sets the value of ExpiredAt.
func (s *ContractsRetrievingResponse) SetExpiredAt(val OptNilString) {
	s.ExpiredAt = val
}

// SetSalesDepositStatusCode sets the value of SalesDepositStatusCode.
func (s *ContractsRetrievingResponse) SetSalesDepositStatusCode(val OptNilContractsRetrievingResponseSalesDepositStatusCode) {
	s.SalesDepositStatusCode = val
}

// SetSalesDepositStatusUpdatedDate sets the value of SalesDepositStatusUpdatedDate.
func (s *ContractsRetrievingResponse) SetSalesDepositStatusUpdatedDate(val OptNilString) {
	s.SalesDepositStatusUpdatedDate = val
}

// SetDeniedAt sets the value of DeniedAt.
func (s *ContractsRetrievingResponse) SetDeniedAt(val OptNilString) {
	s.DeniedAt = val
}

// SetSuspendedBilling sets the value of SuspendedBilling.
func (s *ContractsRetrievingResponse) SetSuspendedBilling(val OptNilBool) {
	s.SuspendedBilling = val
}

// SetSuspendedBillingDate sets the value of SuspendedBillingDate.
func (s *ContractsRetrievingResponse) SetSuspendedBillingDate(val OptNilString) {
	s.SuspendedBillingDate = val
}

// SetSuspendedPayment sets the value of SuspendedPayment.
func (s *ContractsRetrievingResponse) SetSuspendedPayment(val OptNilBool) {
	s.SuspendedPayment = val
}

// SetSuspendedPaymentDate sets the value of SuspendedPaymentDate.
func (s *ContractsRetrievingResponse) SetSuspendedPaymentDate(val OptNilString) {
	s.SuspendedPaymentDate = val
}

// SetSuspendedService sets the value of SuspendedService.
func (s *ContractsRetrievingResponse) SetSuspendedService(val OptNilBool) {
	s.SuspendedService = val
}

// SetSuspendedServiceDate sets the value of SuspendedServiceDate.
func (s *ContractsRetrievingResponse) SetSuspendedServiceDate(val OptNilString) {
	s.SuspendedServiceDate = val
}

// SetSuspededImmediateUse sets the value of SuspededImmediateUse.
func (s *ContractsRetrievingResponse) SetSuspededImmediateUse(val OptNilBool) {
	s.SuspededImmediateUse = val
}

// SetSuspendedImmediateUseDate sets the value of SuspendedImmediateUseDate.
func (s *ContractsRetrievingResponse) SetSuspendedImmediateUseDate(val OptNilString) {
	s.SuspendedImmediateUseDate = val
}

// SetStopCancelaltionMemo sets the value of StopCancelaltionMemo.
func (s *ContractsRetrievingResponse) SetStopCancelaltionMemo(val OptNilString) {
	s.StopCancelaltionMemo = val
}

// SetObligationsNotice sets the value of ObligationsNotice.
func (s *ContractsRetrievingResponse) SetObligationsNotice(val OptNilString) {
	s.ObligationsNotice = val
}

// SetUserShopName sets the value of UserShopName.
func (s *ContractsRetrievingResponse) SetUserShopName(val OptNilString) {
	s.UserShopName = val
}

// SetRegisterMail sets the value of RegisterMail.
func (s *ContractsRetrievingResponse) SetRegisterMail(val OptNilString) {
	s.RegisterMail = val
}

// SetPlatformReprentativeShop sets the value of PlatformReprentativeShop.
func (s *ContractsRetrievingResponse) SetPlatformReprentativeShop(val OptNilBool) {
	s.PlatformReprentativeShop = val
}

// SetSharedCustomerFlag sets the value of SharedCustomerFlag.
func (s *ContractsRetrievingResponse) SetSharedCustomerFlag(val *NilContractsRetrievingResponseSharedCustomerFlag) {
	s.SharedCustomerFlag = val
}

// SetContractDetail sets the value of ContractDetail.
func (s *ContractsRetrievingResponse) SetContractDetail(val OptContractsRetrievingResponseContractDetail) {
	s.ContractDetail = val
}

// SetContractBankAccount sets the value of ContractBankAccount.
func (s *ContractsRetrievingResponse) SetContractBankAccount(val OptContractsRetrievingResponseContractBankAccount) {
	s.ContractBankAccount = val
}

// SetContractVirtualBank sets the value of ContractVirtualBank.
func (s *ContractsRetrievingResponse) SetContractVirtualBank(val OptContractsRetrievingResponseContractVirtualBank) {
	s.ContractVirtualBank = val
}

// SetContractCardDestination sets the value of ContractCardDestination.
func (s *ContractsRetrievingResponse) SetContractCardDestination(val []ContractsRetrievingResponseContractCardDestinationItem) {
	s.ContractCardDestination = val
}

// SetCreditCardSetting sets the value of CreditCardSetting.
func (s *ContractsRetrievingResponse) SetCreditCardSetting(val OptContractsRetrievingResponseCreditCardSetting) {
	s.CreditCardSetting = val
}

// SetOfficialRegisteredCorporateInfo sets the value of OfficialRegisteredCorporateInfo.
func (s *ContractsRetrievingResponse) SetOfficialRegisteredCorporateInfo(val OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) {
	s.OfficialRegisteredCorporateInfo = val
}

func (*ContractsRetrievingResponse) retrieveTenantContractRes() {}

// 利用可能モード
// - 201: テスト環境のみ利用可能
// - 202: 本番環境利用可能.
type ContractsRetrievingResponseAvailableStatusCode int

const (
	ContractsRetrievingResponseAvailableStatusCode201 ContractsRetrievingResponseAvailableStatusCode = 201
	ContractsRetrievingResponseAvailableStatusCode202 ContractsRetrievingResponseAvailableStatusCode = 202
)

// AllValues returns all ContractsRetrievingResponseAvailableStatusCode values.
func (ContractsRetrievingResponseAvailableStatusCode) AllValues() []ContractsRetrievingResponseAvailableStatusCode {
	return []ContractsRetrievingResponseAvailableStatusCode{
		ContractsRetrievingResponseAvailableStatusCode201,
		ContractsRetrievingResponseAvailableStatusCode202,
	}
}

type ContractsRetrievingResponseContractBankAccount struct {
	// 銀行名.
	BankName OptString `json:"bank_name"`
	// 銀行名（カナ）.
	BankNameKana OptString `json:"bank_name_kana"`
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode OptString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 支店名（カナ）.
	BranchNameKana OptString `json:"branch_name_kana"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind OptContractsRetrievingResponseContractBankAccountAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber OptString `json:"account_number"`
	// 口座名義（カタカナ）.
	AccountName OptString `json:"account_name"`
}

// GetBankName returns the value of BankName.
func (s *ContractsRetrievingResponseContractBankAccount) GetBankName() OptString {
	return s.BankName
}

// GetBankNameKana returns the value of BankNameKana.
func (s *ContractsRetrievingResponseContractBankAccount) GetBankNameKana() OptString {
	return s.BankNameKana
}

// GetBankCode returns the value of BankCode.
func (s *ContractsRetrievingResponseContractBankAccount) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ContractsRetrievingResponseContractBankAccount) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *ContractsRetrievingResponseContractBankAccount) GetBranchName() OptString {
	return s.BranchName
}

// GetBranchNameKana returns the value of BranchNameKana.
func (s *ContractsRetrievingResponseContractBankAccount) GetBranchNameKana() OptString {
	return s.BranchNameKana
}

// GetAccountKind returns the value of AccountKind.
func (s *ContractsRetrievingResponseContractBankAccount) GetAccountKind() OptContractsRetrievingResponseContractBankAccountAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ContractsRetrievingResponseContractBankAccount) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ContractsRetrievingResponseContractBankAccount) GetAccountName() OptString {
	return s.AccountName
}

// SetBankName sets the value of BankName.
func (s *ContractsRetrievingResponseContractBankAccount) SetBankName(val OptString) {
	s.BankName = val
}

// SetBankNameKana sets the value of BankNameKana.
func (s *ContractsRetrievingResponseContractBankAccount) SetBankNameKana(val OptString) {
	s.BankNameKana = val
}

// SetBankCode sets the value of BankCode.
func (s *ContractsRetrievingResponseContractBankAccount) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ContractsRetrievingResponseContractBankAccount) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *ContractsRetrievingResponseContractBankAccount) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetBranchNameKana sets the value of BranchNameKana.
func (s *ContractsRetrievingResponseContractBankAccount) SetBranchNameKana(val OptString) {
	s.BranchNameKana = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ContractsRetrievingResponseContractBankAccount) SetAccountKind(val OptContractsRetrievingResponseContractBankAccountAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ContractsRetrievingResponseContractBankAccount) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ContractsRetrievingResponseContractBankAccount) SetAccountName(val OptString) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ContractsRetrievingResponseContractBankAccountAccountKind float64

const (
	ContractsRetrievingResponseContractBankAccountAccountKind0 ContractsRetrievingResponseContractBankAccountAccountKind = 0
	ContractsRetrievingResponseContractBankAccountAccountKind1 ContractsRetrievingResponseContractBankAccountAccountKind = 1
)

// AllValues returns all ContractsRetrievingResponseContractBankAccountAccountKind values.
func (ContractsRetrievingResponseContractBankAccountAccountKind) AllValues() []ContractsRetrievingResponseContractBankAccountAccountKind {
	return []ContractsRetrievingResponseContractBankAccountAccountKind{
		ContractsRetrievingResponseContractBankAccountAccountKind0,
		ContractsRetrievingResponseContractBankAccountAccountKind1,
	}
}

type ContractsRetrievingResponseContractCardDestinationItem struct {
	// カードマスタID.
	ContractCardInfoMasterID OptNilInt                                                                       `json:"contract_card_info_master_id"`
	ExaminationMasterID      OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID `json:"examination_master_id"`
	// 仕向け先.
	Destination OptNilString `json:"destination"`
	// 仕向け先種別.
	DestinationType OptNilFloat64 `json:"destination_type"`
}

// GetContractCardInfoMasterID returns the value of ContractCardInfoMasterID.
func (s *ContractsRetrievingResponseContractCardDestinationItem) GetContractCardInfoMasterID() OptNilInt {
	return s.ContractCardInfoMasterID
}

// GetExaminationMasterID returns the value of ExaminationMasterID.
func (s *ContractsRetrievingResponseContractCardDestinationItem) GetExaminationMasterID() OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID {
	return s.ExaminationMasterID
}

// GetDestination returns the value of Destination.
func (s *ContractsRetrievingResponseContractCardDestinationItem) GetDestination() OptNilString {
	return s.Destination
}

// GetDestinationType returns the value of DestinationType.
func (s *ContractsRetrievingResponseContractCardDestinationItem) GetDestinationType() OptNilFloat64 {
	return s.DestinationType
}

// SetContractCardInfoMasterID sets the value of ContractCardInfoMasterID.
func (s *ContractsRetrievingResponseContractCardDestinationItem) SetContractCardInfoMasterID(val OptNilInt) {
	s.ContractCardInfoMasterID = val
}

// SetExaminationMasterID sets the value of ExaminationMasterID.
func (s *ContractsRetrievingResponseContractCardDestinationItem) SetExaminationMasterID(val OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) {
	s.ExaminationMasterID = val
}

// SetDestination sets the value of Destination.
func (s *ContractsRetrievingResponseContractCardDestinationItem) SetDestination(val OptNilString) {
	s.Destination = val
}

// SetDestinationType sets the value of DestinationType.
func (s *ContractsRetrievingResponseContractCardDestinationItem) SetDestinationType(val OptNilFloat64) {
	s.DestinationType = val
}

// 審査種別マスタID。\
// プラットフォーム料率の適用対象とする決済手段の種別を表します。
// - `vm`: カード決済（VISA / Mastercard）
// - `jad`: カード決済（JCB / American Express / Diners Club / Discover）
// - `applepay_vm`: Apple Pay（VISA / Mastercard）
// - `applepay_jad`: Apple Pay（JCB / American Express / Diners Club / Discover）
// - `konbini`: コンビニ決済
// - `paypay`: PayPay
// - `directdebit`: 口座振替.
type ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID string

const (
	ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDVM          ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID = "vm"
	ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDJad         ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID = "jad"
	ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayVM  ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID = "applepay_vm"
	ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayJad ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID = "applepay_jad"
	ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDKonbini     ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID = "konbini"
	ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDPaypay      ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID = "paypay"
	ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDDirectdebit ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID = "directdebit"
)

// AllValues returns all ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID values.
func (ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) AllValues() []ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID {
	return []ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID{
		ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDVM,
		ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDJad,
		ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayVM,
		ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayJad,
		ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDKonbini,
		ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDPaypay,
		ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) MarshalText() ([]byte, error) {
	switch s {
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDVM:
		return []byte(s), nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDJad:
		return []byte(s), nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayVM:
		return []byte(s), nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayJad:
		return []byte(s), nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDKonbini:
		return []byte(s), nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDPaypay:
		return []byte(s), nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) UnmarshalText(data []byte) error {
	switch ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID(data) {
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDVM:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDVM
		return nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDJad:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDJad
		return nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayVM:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayVM
		return nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayJad:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayJad
		return nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDKonbini:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDKonbini
		return nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDPaypay:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDPaypay
		return nil
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDDirectdebit:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ContractsRetrievingResponseContractDetail struct {
	// 事業形態
	// - `true`: 法人
	// - `false`: 個人事業主.
	Corporate                             OptNilBool                                                        `json:"corporate"`
	CorporateNumber                       *NilString                                                        `json:"corporate_number"`
	CorporateName                         OptString                                                         `json:"corporate_name"`
	CorporateNameKana                     OptString                                                         `json:"corporate_name_kana"`
	Hp                                    *NilString                                                        `json:"hp"`
	Capital                               *NilFloat64                                                       `json:"capital"`
	EstablishedAt                         *NilString                                                        `json:"established_at"`
	YearlySales                           *NilFloat64                                                       `json:"yearly_sales"`
	BusinessDetails                       *NilString                                                        `json:"business_details"`
	CompanyPostalCode                     *NilString                                                        `json:"company_postal_code"`
	CompanyPrefecture                     *NilString                                                        `json:"company_prefecture"`
	CompanyPrefectureKana                 *NilString                                                        `json:"company_prefecture_kana"`
	CompanyAddressMunicipality            *NilString                                                        `json:"company_address_municipality"`
	CompanyAddressMunicipalityKana        *NilString                                                        `json:"company_address_municipality_kana"`
	CompanyAddressSection                 *NilString                                                        `json:"company_address_section"`
	CompanyAddressSectionKana             *NilString                                                        `json:"company_address_section_kana"`
	CompanyAddressChrome                  *NilString                                                        `json:"company_address_chrome"`
	CompanyAddressChromeKana              *NilString                                                        `json:"company_address_chrome_kana"`
	CompanyAddressBuildingName            *NilString                                                        `json:"company_address_building_name"`
	CompanyAddressBuildingNameKana        *NilString                                                        `json:"company_address_building_name_kana"`
	CompanyTel                            *NilString                                                        `json:"company_tel"`
	RepresentativeLastName                *NilString                                                        `json:"representative_last_name"`
	RepresentativeLastNameKana            *NilString                                                        `json:"representative_last_name_kana"`
	RepresentativeFirstName               *NilString                                                        `json:"representative_first_name"`
	RepresentativeFirstNameKana           *NilString                                                        `json:"representative_first_name_kana"`
	RepresentativeBirthday                *NilString                                                        `json:"representative_birthday"`
	RepresentativeGender                  *NilContractsRetrievingResponseContractDetailRepresentativeGender `json:"representative_gender"`
	RepresentativePostalCode              *NilString                                                        `json:"representative_postal_code"`
	RepresentativePrefecture              *NilString                                                        `json:"representative_prefecture"`
	RepresentativePrefectureKana          *NilString                                                        `json:"representative_prefecture_kana"`
	RepresentativeAddressMunicipality     *NilString                                                        `json:"representative_address_municipality"`
	RepresentativeAddressMunicipalityKana *NilString                                                        `json:"representative_address_municipality_kana"`
	RepresentativeAddressSection          *NilString                                                        `json:"representative_address_section"`
	RepresentativeAddressSectionKana      *NilString                                                        `json:"representative_address_section_kana"`
	RepresentativeAddressChrome           *NilString                                                        `json:"representative_address_chrome"`
	RepresentativeAddressChromeKana       *NilString                                                        `json:"representative_address_chrome_kana"`
	RepresentativeTel                     *NilString                                                        `json:"representative_tel"`
	Staff1LastName                        *NilString                                                        `json:"staff1_last_name"`
	Staff1LastNameKana                    *NilString                                                        `json:"staff1_last_name_kana"`
	Staff1FirstName                       *NilString                                                        `json:"staff1_first_name"`
	Staff1FirstNameKana                   *NilString                                                        `json:"staff1_first_name_kana"`
	Staff1Tel                             *NilString                                                        `json:"staff1_tel"`
	Staff1Mail                            *NilString                                                        `json:"staff1_mail"`
	Staff2LastName                        *NilString                                                        `json:"staff2_last_name"`
	Staff2LastNameKana                    *NilString                                                        `json:"staff2_last_name_kana"`
	Staff2FirstName                       *NilString                                                        `json:"staff2_first_name"`
	Staff2FirstNameKana                   *NilString                                                        `json:"staff2_first_name_kana"`
	Staff2Tel                             *NilString                                                        `json:"staff2_tel"`
	Staff2Mail                            *NilString                                                        `json:"staff2_mail"`
	UsedOnApp                             *NilBool                                                          `json:"used_on_app"`
	UsedOnWeb                             *NilBool                                                          `json:"used_on_web"`
	// その他の箇所での利用有無\
	// \
	// Webアプリケーションやネイティブアプリ上でない箇所で利用があるかどうか
	// - `true`: Webアプリ／ネイティブアプリでない箇所でfincodeを使用する.
	UsedOnOther OptNilBool `json:"used_on_other"`
	// Webサイトの公開状況\
	// \
	// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
	// - `0`: fincode審査チームがサイトを閲覧可能
	// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
	// - `2`: fincode審査チームがサイトを閲覧不可能.
	SiteExisting   OptContractsRetrievingResponseContractDetailSiteExisting `json:"site_existing"`
	URL            *NilString                                               `json:"url"`
	SiteCredential *NilString                                               `json:"site_credential"`
	ShopName       OptString                                                `json:"shop_name"`
	ShopNameKana   OptString                                                `json:"shop_name_kana"`
	ShopNameEn     OptString                                                `json:"shop_name_en"`
	// プラットフォーム名.
	PlatformName           OptNilString `json:"platform_name"`
	SupportTel             *NilString   `json:"support_tel"`
	SupportMail            *NilString   `json:"support_mail"`
	ProvidesProduct        *NilBool     `json:"provides_product"`
	ProvidesService        *NilBool     `json:"provides_service"`
	ProvidesDigitalContent *NilBool     `json:"provides_digital_content"`
	Prepaid                *NilBool     `json:"prepaid"`
	UnitPrice              *NilFloat64  `json:"unit_price"`
	// 取扱商材カテゴリID.
	ContentCategoryMasterID OptNilFloat64                                     `json:"content_category_master_id"`
	ContentDescription      *NilString                                        `json:"content_description"`
	ExpiretionDateOfPoint   *NilString                                        `json:"expiretion_date_of_point"`
	UsageOfPoint            *NilString                                        `json:"usage_of_point"`
	LostTrial               *NilBool                                          `json:"lost_trial"`
	DealsInsecureContent    *NilBool                                          `json:"deals_insecure_content"`
	DealsLongApplyContent   *NilBool                                          `json:"deals_long_apply_content"`
	PayBy                   OptContractsRetrievingResponseContractDetailPayBy `json:"pay_by"`
}

// GetCorporate returns the value of Corporate.
func (s *ContractsRetrievingResponseContractDetail) GetCorporate() OptNilBool {
	return s.Corporate
}

// GetCorporateNumber returns the value of CorporateNumber.
func (s *ContractsRetrievingResponseContractDetail) GetCorporateNumber() *NilString {
	return s.CorporateNumber
}

// GetCorporateName returns the value of CorporateName.
func (s *ContractsRetrievingResponseContractDetail) GetCorporateName() OptString {
	return s.CorporateName
}

// GetCorporateNameKana returns the value of CorporateNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetCorporateNameKana() OptString {
	return s.CorporateNameKana
}

// GetHp returns the value of Hp.
func (s *ContractsRetrievingResponseContractDetail) GetHp() *NilString {
	return s.Hp
}

// GetCapital returns the value of Capital.
func (s *ContractsRetrievingResponseContractDetail) GetCapital() *NilFloat64 {
	return s.Capital
}

// GetEstablishedAt returns the value of EstablishedAt.
func (s *ContractsRetrievingResponseContractDetail) GetEstablishedAt() *NilString {
	return s.EstablishedAt
}

// GetYearlySales returns the value of YearlySales.
func (s *ContractsRetrievingResponseContractDetail) GetYearlySales() *NilFloat64 {
	return s.YearlySales
}

// GetBusinessDetails returns the value of BusinessDetails.
func (s *ContractsRetrievingResponseContractDetail) GetBusinessDetails() *NilString {
	return s.BusinessDetails
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyPostalCode() *NilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyPrefecture() *NilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyPrefectureKana() *NilString {
	return s.CompanyPrefectureKana
}

// GetCompanyAddressMunicipality returns the value of CompanyAddressMunicipality.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressMunicipality() *NilString {
	return s.CompanyAddressMunicipality
}

// GetCompanyAddressMunicipalityKana returns the value of CompanyAddressMunicipalityKana.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressMunicipalityKana() *NilString {
	return s.CompanyAddressMunicipalityKana
}

// GetCompanyAddressSection returns the value of CompanyAddressSection.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressSection() *NilString {
	return s.CompanyAddressSection
}

// GetCompanyAddressSectionKana returns the value of CompanyAddressSectionKana.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressSectionKana() *NilString {
	return s.CompanyAddressSectionKana
}

// GetCompanyAddressChrome returns the value of CompanyAddressChrome.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressChrome() *NilString {
	return s.CompanyAddressChrome
}

// GetCompanyAddressChromeKana returns the value of CompanyAddressChromeKana.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressChromeKana() *NilString {
	return s.CompanyAddressChromeKana
}

// GetCompanyAddressBuildingName returns the value of CompanyAddressBuildingName.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressBuildingName() *NilString {
	return s.CompanyAddressBuildingName
}

// GetCompanyAddressBuildingNameKana returns the value of CompanyAddressBuildingNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyAddressBuildingNameKana() *NilString {
	return s.CompanyAddressBuildingNameKana
}

// GetCompanyTel returns the value of CompanyTel.
func (s *ContractsRetrievingResponseContractDetail) GetCompanyTel() *NilString {
	return s.CompanyTel
}

// GetRepresentativeLastName returns the value of RepresentativeLastName.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeLastName() *NilString {
	return s.RepresentativeLastName
}

// GetRepresentativeLastNameKana returns the value of RepresentativeLastNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeLastNameKana() *NilString {
	return s.RepresentativeLastNameKana
}

// GetRepresentativeFirstName returns the value of RepresentativeFirstName.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeFirstName() *NilString {
	return s.RepresentativeFirstName
}

// GetRepresentativeFirstNameKana returns the value of RepresentativeFirstNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeFirstNameKana() *NilString {
	return s.RepresentativeFirstNameKana
}

// GetRepresentativeBirthday returns the value of RepresentativeBirthday.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeBirthday() *NilString {
	return s.RepresentativeBirthday
}

// GetRepresentativeGender returns the value of RepresentativeGender.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeGender() *NilContractsRetrievingResponseContractDetailRepresentativeGender {
	return s.RepresentativeGender
}

// GetRepresentativePostalCode returns the value of RepresentativePostalCode.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativePostalCode() *NilString {
	return s.RepresentativePostalCode
}

// GetRepresentativePrefecture returns the value of RepresentativePrefecture.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativePrefecture() *NilString {
	return s.RepresentativePrefecture
}

// GetRepresentativePrefectureKana returns the value of RepresentativePrefectureKana.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativePrefectureKana() *NilString {
	return s.RepresentativePrefectureKana
}

// GetRepresentativeAddressMunicipality returns the value of RepresentativeAddressMunicipality.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeAddressMunicipality() *NilString {
	return s.RepresentativeAddressMunicipality
}

// GetRepresentativeAddressMunicipalityKana returns the value of RepresentativeAddressMunicipalityKana.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeAddressMunicipalityKana() *NilString {
	return s.RepresentativeAddressMunicipalityKana
}

// GetRepresentativeAddressSection returns the value of RepresentativeAddressSection.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeAddressSection() *NilString {
	return s.RepresentativeAddressSection
}

// GetRepresentativeAddressSectionKana returns the value of RepresentativeAddressSectionKana.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeAddressSectionKana() *NilString {
	return s.RepresentativeAddressSectionKana
}

// GetRepresentativeAddressChrome returns the value of RepresentativeAddressChrome.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeAddressChrome() *NilString {
	return s.RepresentativeAddressChrome
}

// GetRepresentativeAddressChromeKana returns the value of RepresentativeAddressChromeKana.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeAddressChromeKana() *NilString {
	return s.RepresentativeAddressChromeKana
}

// GetRepresentativeTel returns the value of RepresentativeTel.
func (s *ContractsRetrievingResponseContractDetail) GetRepresentativeTel() *NilString {
	return s.RepresentativeTel
}

// GetStaff1LastName returns the value of Staff1LastName.
func (s *ContractsRetrievingResponseContractDetail) GetStaff1LastName() *NilString {
	return s.Staff1LastName
}

// GetStaff1LastNameKana returns the value of Staff1LastNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetStaff1LastNameKana() *NilString {
	return s.Staff1LastNameKana
}

// GetStaff1FirstName returns the value of Staff1FirstName.
func (s *ContractsRetrievingResponseContractDetail) GetStaff1FirstName() *NilString {
	return s.Staff1FirstName
}

// GetStaff1FirstNameKana returns the value of Staff1FirstNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetStaff1FirstNameKana() *NilString {
	return s.Staff1FirstNameKana
}

// GetStaff1Tel returns the value of Staff1Tel.
func (s *ContractsRetrievingResponseContractDetail) GetStaff1Tel() *NilString {
	return s.Staff1Tel
}

// GetStaff1Mail returns the value of Staff1Mail.
func (s *ContractsRetrievingResponseContractDetail) GetStaff1Mail() *NilString {
	return s.Staff1Mail
}

// GetStaff2LastName returns the value of Staff2LastName.
func (s *ContractsRetrievingResponseContractDetail) GetStaff2LastName() *NilString {
	return s.Staff2LastName
}

// GetStaff2LastNameKana returns the value of Staff2LastNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetStaff2LastNameKana() *NilString {
	return s.Staff2LastNameKana
}

// GetStaff2FirstName returns the value of Staff2FirstName.
func (s *ContractsRetrievingResponseContractDetail) GetStaff2FirstName() *NilString {
	return s.Staff2FirstName
}

// GetStaff2FirstNameKana returns the value of Staff2FirstNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetStaff2FirstNameKana() *NilString {
	return s.Staff2FirstNameKana
}

// GetStaff2Tel returns the value of Staff2Tel.
func (s *ContractsRetrievingResponseContractDetail) GetStaff2Tel() *NilString {
	return s.Staff2Tel
}

// GetStaff2Mail returns the value of Staff2Mail.
func (s *ContractsRetrievingResponseContractDetail) GetStaff2Mail() *NilString {
	return s.Staff2Mail
}

// GetUsedOnApp returns the value of UsedOnApp.
func (s *ContractsRetrievingResponseContractDetail) GetUsedOnApp() *NilBool {
	return s.UsedOnApp
}

// GetUsedOnWeb returns the value of UsedOnWeb.
func (s *ContractsRetrievingResponseContractDetail) GetUsedOnWeb() *NilBool {
	return s.UsedOnWeb
}

// GetUsedOnOther returns the value of UsedOnOther.
func (s *ContractsRetrievingResponseContractDetail) GetUsedOnOther() OptNilBool {
	return s.UsedOnOther
}

// GetSiteExisting returns the value of SiteExisting.
func (s *ContractsRetrievingResponseContractDetail) GetSiteExisting() OptContractsRetrievingResponseContractDetailSiteExisting {
	return s.SiteExisting
}

// GetURL returns the value of URL.
func (s *ContractsRetrievingResponseContractDetail) GetURL() *NilString {
	return s.URL
}

// GetSiteCredential returns the value of SiteCredential.
func (s *ContractsRetrievingResponseContractDetail) GetSiteCredential() *NilString {
	return s.SiteCredential
}

// GetShopName returns the value of ShopName.
func (s *ContractsRetrievingResponseContractDetail) GetShopName() OptString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *ContractsRetrievingResponseContractDetail) GetShopNameKana() OptString {
	return s.ShopNameKana
}

// GetShopNameEn returns the value of ShopNameEn.
func (s *ContractsRetrievingResponseContractDetail) GetShopNameEn() OptString {
	return s.ShopNameEn
}

// GetPlatformName returns the value of PlatformName.
func (s *ContractsRetrievingResponseContractDetail) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSupportTel returns the value of SupportTel.
func (s *ContractsRetrievingResponseContractDetail) GetSupportTel() *NilString {
	return s.SupportTel
}

// GetSupportMail returns the value of SupportMail.
func (s *ContractsRetrievingResponseContractDetail) GetSupportMail() *NilString {
	return s.SupportMail
}

// GetProvidesProduct returns the value of ProvidesProduct.
func (s *ContractsRetrievingResponseContractDetail) GetProvidesProduct() *NilBool {
	return s.ProvidesProduct
}

// GetProvidesService returns the value of ProvidesService.
func (s *ContractsRetrievingResponseContractDetail) GetProvidesService() *NilBool {
	return s.ProvidesService
}

// GetProvidesDigitalContent returns the value of ProvidesDigitalContent.
func (s *ContractsRetrievingResponseContractDetail) GetProvidesDigitalContent() *NilBool {
	return s.ProvidesDigitalContent
}

// GetPrepaid returns the value of Prepaid.
func (s *ContractsRetrievingResponseContractDetail) GetPrepaid() *NilBool {
	return s.Prepaid
}

// GetUnitPrice returns the value of UnitPrice.
func (s *ContractsRetrievingResponseContractDetail) GetUnitPrice() *NilFloat64 {
	return s.UnitPrice
}

// GetContentCategoryMasterID returns the value of ContentCategoryMasterID.
func (s *ContractsRetrievingResponseContractDetail) GetContentCategoryMasterID() OptNilFloat64 {
	return s.ContentCategoryMasterID
}

// GetContentDescription returns the value of ContentDescription.
func (s *ContractsRetrievingResponseContractDetail) GetContentDescription() *NilString {
	return s.ContentDescription
}

// GetExpiretionDateOfPoint returns the value of ExpiretionDateOfPoint.
func (s *ContractsRetrievingResponseContractDetail) GetExpiretionDateOfPoint() *NilString {
	return s.ExpiretionDateOfPoint
}

// GetUsageOfPoint returns the value of UsageOfPoint.
func (s *ContractsRetrievingResponseContractDetail) GetUsageOfPoint() *NilString {
	return s.UsageOfPoint
}

// GetLostTrial returns the value of LostTrial.
func (s *ContractsRetrievingResponseContractDetail) GetLostTrial() *NilBool {
	return s.LostTrial
}

// GetDealsInsecureContent returns the value of DealsInsecureContent.
func (s *ContractsRetrievingResponseContractDetail) GetDealsInsecureContent() *NilBool {
	return s.DealsInsecureContent
}

// GetDealsLongApplyContent returns the value of DealsLongApplyContent.
func (s *ContractsRetrievingResponseContractDetail) GetDealsLongApplyContent() *NilBool {
	return s.DealsLongApplyContent
}

// GetPayBy returns the value of PayBy.
func (s *ContractsRetrievingResponseContractDetail) GetPayBy() OptContractsRetrievingResponseContractDetailPayBy {
	return s.PayBy
}

// SetCorporate sets the value of Corporate.
func (s *ContractsRetrievingResponseContractDetail) SetCorporate(val OptNilBool) {
	s.Corporate = val
}

// SetCorporateNumber sets the value of CorporateNumber.
func (s *ContractsRetrievingResponseContractDetail) SetCorporateNumber(val *NilString) {
	s.CorporateNumber = val
}

// SetCorporateName sets the value of CorporateName.
func (s *ContractsRetrievingResponseContractDetail) SetCorporateName(val OptString) {
	s.CorporateName = val
}

// SetCorporateNameKana sets the value of CorporateNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetCorporateNameKana(val OptString) {
	s.CorporateNameKana = val
}

// SetHp sets the value of Hp.
func (s *ContractsRetrievingResponseContractDetail) SetHp(val *NilString) {
	s.Hp = val
}

// SetCapital sets the value of Capital.
func (s *ContractsRetrievingResponseContractDetail) SetCapital(val *NilFloat64) {
	s.Capital = val
}

// SetEstablishedAt sets the value of EstablishedAt.
func (s *ContractsRetrievingResponseContractDetail) SetEstablishedAt(val *NilString) {
	s.EstablishedAt = val
}

// SetYearlySales sets the value of YearlySales.
func (s *ContractsRetrievingResponseContractDetail) SetYearlySales(val *NilFloat64) {
	s.YearlySales = val
}

// SetBusinessDetails sets the value of BusinessDetails.
func (s *ContractsRetrievingResponseContractDetail) SetBusinessDetails(val *NilString) {
	s.BusinessDetails = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyPostalCode(val *NilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyPrefecture(val *NilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyPrefectureKana(val *NilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyAddressMunicipality sets the value of CompanyAddressMunicipality.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressMunicipality(val *NilString) {
	s.CompanyAddressMunicipality = val
}

// SetCompanyAddressMunicipalityKana sets the value of CompanyAddressMunicipalityKana.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressMunicipalityKana(val *NilString) {
	s.CompanyAddressMunicipalityKana = val
}

// SetCompanyAddressSection sets the value of CompanyAddressSection.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressSection(val *NilString) {
	s.CompanyAddressSection = val
}

// SetCompanyAddressSectionKana sets the value of CompanyAddressSectionKana.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressSectionKana(val *NilString) {
	s.CompanyAddressSectionKana = val
}

// SetCompanyAddressChrome sets the value of CompanyAddressChrome.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressChrome(val *NilString) {
	s.CompanyAddressChrome = val
}

// SetCompanyAddressChromeKana sets the value of CompanyAddressChromeKana.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressChromeKana(val *NilString) {
	s.CompanyAddressChromeKana = val
}

// SetCompanyAddressBuildingName sets the value of CompanyAddressBuildingName.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressBuildingName(val *NilString) {
	s.CompanyAddressBuildingName = val
}

// SetCompanyAddressBuildingNameKana sets the value of CompanyAddressBuildingNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyAddressBuildingNameKana(val *NilString) {
	s.CompanyAddressBuildingNameKana = val
}

// SetCompanyTel sets the value of CompanyTel.
func (s *ContractsRetrievingResponseContractDetail) SetCompanyTel(val *NilString) {
	s.CompanyTel = val
}

// SetRepresentativeLastName sets the value of RepresentativeLastName.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeLastName(val *NilString) {
	s.RepresentativeLastName = val
}

// SetRepresentativeLastNameKana sets the value of RepresentativeLastNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeLastNameKana(val *NilString) {
	s.RepresentativeLastNameKana = val
}

// SetRepresentativeFirstName sets the value of RepresentativeFirstName.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeFirstName(val *NilString) {
	s.RepresentativeFirstName = val
}

// SetRepresentativeFirstNameKana sets the value of RepresentativeFirstNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeFirstNameKana(val *NilString) {
	s.RepresentativeFirstNameKana = val
}

// SetRepresentativeBirthday sets the value of RepresentativeBirthday.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeBirthday(val *NilString) {
	s.RepresentativeBirthday = val
}

// SetRepresentativeGender sets the value of RepresentativeGender.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeGender(val *NilContractsRetrievingResponseContractDetailRepresentativeGender) {
	s.RepresentativeGender = val
}

// SetRepresentativePostalCode sets the value of RepresentativePostalCode.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativePostalCode(val *NilString) {
	s.RepresentativePostalCode = val
}

// SetRepresentativePrefecture sets the value of RepresentativePrefecture.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativePrefecture(val *NilString) {
	s.RepresentativePrefecture = val
}

// SetRepresentativePrefectureKana sets the value of RepresentativePrefectureKana.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativePrefectureKana(val *NilString) {
	s.RepresentativePrefectureKana = val
}

// SetRepresentativeAddressMunicipality sets the value of RepresentativeAddressMunicipality.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeAddressMunicipality(val *NilString) {
	s.RepresentativeAddressMunicipality = val
}

// SetRepresentativeAddressMunicipalityKana sets the value of RepresentativeAddressMunicipalityKana.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeAddressMunicipalityKana(val *NilString) {
	s.RepresentativeAddressMunicipalityKana = val
}

// SetRepresentativeAddressSection sets the value of RepresentativeAddressSection.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeAddressSection(val *NilString) {
	s.RepresentativeAddressSection = val
}

// SetRepresentativeAddressSectionKana sets the value of RepresentativeAddressSectionKana.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeAddressSectionKana(val *NilString) {
	s.RepresentativeAddressSectionKana = val
}

// SetRepresentativeAddressChrome sets the value of RepresentativeAddressChrome.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeAddressChrome(val *NilString) {
	s.RepresentativeAddressChrome = val
}

// SetRepresentativeAddressChromeKana sets the value of RepresentativeAddressChromeKana.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeAddressChromeKana(val *NilString) {
	s.RepresentativeAddressChromeKana = val
}

// SetRepresentativeTel sets the value of RepresentativeTel.
func (s *ContractsRetrievingResponseContractDetail) SetRepresentativeTel(val *NilString) {
	s.RepresentativeTel = val
}

// SetStaff1LastName sets the value of Staff1LastName.
func (s *ContractsRetrievingResponseContractDetail) SetStaff1LastName(val *NilString) {
	s.Staff1LastName = val
}

// SetStaff1LastNameKana sets the value of Staff1LastNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetStaff1LastNameKana(val *NilString) {
	s.Staff1LastNameKana = val
}

// SetStaff1FirstName sets the value of Staff1FirstName.
func (s *ContractsRetrievingResponseContractDetail) SetStaff1FirstName(val *NilString) {
	s.Staff1FirstName = val
}

// SetStaff1FirstNameKana sets the value of Staff1FirstNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetStaff1FirstNameKana(val *NilString) {
	s.Staff1FirstNameKana = val
}

// SetStaff1Tel sets the value of Staff1Tel.
func (s *ContractsRetrievingResponseContractDetail) SetStaff1Tel(val *NilString) {
	s.Staff1Tel = val
}

// SetStaff1Mail sets the value of Staff1Mail.
func (s *ContractsRetrievingResponseContractDetail) SetStaff1Mail(val *NilString) {
	s.Staff1Mail = val
}

// SetStaff2LastName sets the value of Staff2LastName.
func (s *ContractsRetrievingResponseContractDetail) SetStaff2LastName(val *NilString) {
	s.Staff2LastName = val
}

// SetStaff2LastNameKana sets the value of Staff2LastNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetStaff2LastNameKana(val *NilString) {
	s.Staff2LastNameKana = val
}

// SetStaff2FirstName sets the value of Staff2FirstName.
func (s *ContractsRetrievingResponseContractDetail) SetStaff2FirstName(val *NilString) {
	s.Staff2FirstName = val
}

// SetStaff2FirstNameKana sets the value of Staff2FirstNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetStaff2FirstNameKana(val *NilString) {
	s.Staff2FirstNameKana = val
}

// SetStaff2Tel sets the value of Staff2Tel.
func (s *ContractsRetrievingResponseContractDetail) SetStaff2Tel(val *NilString) {
	s.Staff2Tel = val
}

// SetStaff2Mail sets the value of Staff2Mail.
func (s *ContractsRetrievingResponseContractDetail) SetStaff2Mail(val *NilString) {
	s.Staff2Mail = val
}

// SetUsedOnApp sets the value of UsedOnApp.
func (s *ContractsRetrievingResponseContractDetail) SetUsedOnApp(val *NilBool) {
	s.UsedOnApp = val
}

// SetUsedOnWeb sets the value of UsedOnWeb.
func (s *ContractsRetrievingResponseContractDetail) SetUsedOnWeb(val *NilBool) {
	s.UsedOnWeb = val
}

// SetUsedOnOther sets the value of UsedOnOther.
func (s *ContractsRetrievingResponseContractDetail) SetUsedOnOther(val OptNilBool) {
	s.UsedOnOther = val
}

// SetSiteExisting sets the value of SiteExisting.
func (s *ContractsRetrievingResponseContractDetail) SetSiteExisting(val OptContractsRetrievingResponseContractDetailSiteExisting) {
	s.SiteExisting = val
}

// SetURL sets the value of URL.
func (s *ContractsRetrievingResponseContractDetail) SetURL(val *NilString) {
	s.URL = val
}

// SetSiteCredential sets the value of SiteCredential.
func (s *ContractsRetrievingResponseContractDetail) SetSiteCredential(val *NilString) {
	s.SiteCredential = val
}

// SetShopName sets the value of ShopName.
func (s *ContractsRetrievingResponseContractDetail) SetShopName(val OptString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *ContractsRetrievingResponseContractDetail) SetShopNameKana(val OptString) {
	s.ShopNameKana = val
}

// SetShopNameEn sets the value of ShopNameEn.
func (s *ContractsRetrievingResponseContractDetail) SetShopNameEn(val OptString) {
	s.ShopNameEn = val
}

// SetPlatformName sets the value of PlatformName.
func (s *ContractsRetrievingResponseContractDetail) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSupportTel sets the value of SupportTel.
func (s *ContractsRetrievingResponseContractDetail) SetSupportTel(val *NilString) {
	s.SupportTel = val
}

// SetSupportMail sets the value of SupportMail.
func (s *ContractsRetrievingResponseContractDetail) SetSupportMail(val *NilString) {
	s.SupportMail = val
}

// SetProvidesProduct sets the value of ProvidesProduct.
func (s *ContractsRetrievingResponseContractDetail) SetProvidesProduct(val *NilBool) {
	s.ProvidesProduct = val
}

// SetProvidesService sets the value of ProvidesService.
func (s *ContractsRetrievingResponseContractDetail) SetProvidesService(val *NilBool) {
	s.ProvidesService = val
}

// SetProvidesDigitalContent sets the value of ProvidesDigitalContent.
func (s *ContractsRetrievingResponseContractDetail) SetProvidesDigitalContent(val *NilBool) {
	s.ProvidesDigitalContent = val
}

// SetPrepaid sets the value of Prepaid.
func (s *ContractsRetrievingResponseContractDetail) SetPrepaid(val *NilBool) {
	s.Prepaid = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *ContractsRetrievingResponseContractDetail) SetUnitPrice(val *NilFloat64) {
	s.UnitPrice = val
}

// SetContentCategoryMasterID sets the value of ContentCategoryMasterID.
func (s *ContractsRetrievingResponseContractDetail) SetContentCategoryMasterID(val OptNilFloat64) {
	s.ContentCategoryMasterID = val
}

// SetContentDescription sets the value of ContentDescription.
func (s *ContractsRetrievingResponseContractDetail) SetContentDescription(val *NilString) {
	s.ContentDescription = val
}

// SetExpiretionDateOfPoint sets the value of ExpiretionDateOfPoint.
func (s *ContractsRetrievingResponseContractDetail) SetExpiretionDateOfPoint(val *NilString) {
	s.ExpiretionDateOfPoint = val
}

// SetUsageOfPoint sets the value of UsageOfPoint.
func (s *ContractsRetrievingResponseContractDetail) SetUsageOfPoint(val *NilString) {
	s.UsageOfPoint = val
}

// SetLostTrial sets the value of LostTrial.
func (s *ContractsRetrievingResponseContractDetail) SetLostTrial(val *NilBool) {
	s.LostTrial = val
}

// SetDealsInsecureContent sets the value of DealsInsecureContent.
func (s *ContractsRetrievingResponseContractDetail) SetDealsInsecureContent(val *NilBool) {
	s.DealsInsecureContent = val
}

// SetDealsLongApplyContent sets the value of DealsLongApplyContent.
func (s *ContractsRetrievingResponseContractDetail) SetDealsLongApplyContent(val *NilBool) {
	s.DealsLongApplyContent = val
}

// SetPayBy sets the value of PayBy.
func (s *ContractsRetrievingResponseContractDetail) SetPayBy(val OptContractsRetrievingResponseContractDetailPayBy) {
	s.PayBy = val
}

// 支払い方法\
// \
// キャンセル金額の超過などによりfincodeへの支払が発生した場合の支払い方法
// - `0`: クレジットカード
// - `1`: 銀行口座.
type ContractsRetrievingResponseContractDetailPayBy float64

const (
	ContractsRetrievingResponseContractDetailPayBy0 ContractsRetrievingResponseContractDetailPayBy = 0
	ContractsRetrievingResponseContractDetailPayBy1 ContractsRetrievingResponseContractDetailPayBy = 1
)

// AllValues returns all ContractsRetrievingResponseContractDetailPayBy values.
func (ContractsRetrievingResponseContractDetailPayBy) AllValues() []ContractsRetrievingResponseContractDetailPayBy {
	return []ContractsRetrievingResponseContractDetailPayBy{
		ContractsRetrievingResponseContractDetailPayBy0,
		ContractsRetrievingResponseContractDetailPayBy1,
	}
}

// 代表者 性別
// - `0`: 男性
// - `1`: 女性.
type ContractsRetrievingResponseContractDetailRepresentativeGender int

const (
	ContractsRetrievingResponseContractDetailRepresentativeGender0 ContractsRetrievingResponseContractDetailRepresentativeGender = 0
	ContractsRetrievingResponseContractDetailRepresentativeGender1 ContractsRetrievingResponseContractDetailRepresentativeGender = 1
)

// AllValues returns all ContractsRetrievingResponseContractDetailRepresentativeGender values.
func (ContractsRetrievingResponseContractDetailRepresentativeGender) AllValues() []ContractsRetrievingResponseContractDetailRepresentativeGender {
	return []ContractsRetrievingResponseContractDetailRepresentativeGender{
		ContractsRetrievingResponseContractDetailRepresentativeGender0,
		ContractsRetrievingResponseContractDetailRepresentativeGender1,
	}
}

// Webサイトの公開状況\
// \
// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
// - `0`: fincode審査チームがサイトを閲覧可能
// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
// - `2`: fincode審査チームがサイトを閲覧不可能.
type ContractsRetrievingResponseContractDetailSiteExisting float64

const (
	ContractsRetrievingResponseContractDetailSiteExisting0 ContractsRetrievingResponseContractDetailSiteExisting = 0
	ContractsRetrievingResponseContractDetailSiteExisting1 ContractsRetrievingResponseContractDetailSiteExisting = 1
	ContractsRetrievingResponseContractDetailSiteExisting2 ContractsRetrievingResponseContractDetailSiteExisting = 2
)

// AllValues returns all ContractsRetrievingResponseContractDetailSiteExisting values.
func (ContractsRetrievingResponseContractDetailSiteExisting) AllValues() []ContractsRetrievingResponseContractDetailSiteExisting {
	return []ContractsRetrievingResponseContractDetailSiteExisting{
		ContractsRetrievingResponseContractDetailSiteExisting0,
		ContractsRetrievingResponseContractDetailSiteExisting1,
		ContractsRetrievingResponseContractDetailSiteExisting2,
	}
}

type ContractsRetrievingResponseContractVirtualBank struct {
	// 銀行名.
	BankName OptString `json:"bank_name"`
	// 銀行名（カナ）.
	BankNameKana OptString `json:"bank_name_kana"`
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode OptString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 支店名（カナ）.
	BranchNameKana OptString `json:"branch_name_kana"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind OptContractsRetrievingResponseContractVirtualBankAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber OptString `json:"account_number"`
	// 口座名義（カタカナ）.
	AccountName OptString `json:"account_name"`
}

// GetBankName returns the value of BankName.
func (s *ContractsRetrievingResponseContractVirtualBank) GetBankName() OptString {
	return s.BankName
}

// GetBankNameKana returns the value of BankNameKana.
func (s *ContractsRetrievingResponseContractVirtualBank) GetBankNameKana() OptString {
	return s.BankNameKana
}

// GetBankCode returns the value of BankCode.
func (s *ContractsRetrievingResponseContractVirtualBank) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ContractsRetrievingResponseContractVirtualBank) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *ContractsRetrievingResponseContractVirtualBank) GetBranchName() OptString {
	return s.BranchName
}

// GetBranchNameKana returns the value of BranchNameKana.
func (s *ContractsRetrievingResponseContractVirtualBank) GetBranchNameKana() OptString {
	return s.BranchNameKana
}

// GetAccountKind returns the value of AccountKind.
func (s *ContractsRetrievingResponseContractVirtualBank) GetAccountKind() OptContractsRetrievingResponseContractVirtualBankAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ContractsRetrievingResponseContractVirtualBank) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ContractsRetrievingResponseContractVirtualBank) GetAccountName() OptString {
	return s.AccountName
}

// SetBankName sets the value of BankName.
func (s *ContractsRetrievingResponseContractVirtualBank) SetBankName(val OptString) {
	s.BankName = val
}

// SetBankNameKana sets the value of BankNameKana.
func (s *ContractsRetrievingResponseContractVirtualBank) SetBankNameKana(val OptString) {
	s.BankNameKana = val
}

// SetBankCode sets the value of BankCode.
func (s *ContractsRetrievingResponseContractVirtualBank) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ContractsRetrievingResponseContractVirtualBank) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *ContractsRetrievingResponseContractVirtualBank) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetBranchNameKana sets the value of BranchNameKana.
func (s *ContractsRetrievingResponseContractVirtualBank) SetBranchNameKana(val OptString) {
	s.BranchNameKana = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ContractsRetrievingResponseContractVirtualBank) SetAccountKind(val OptContractsRetrievingResponseContractVirtualBankAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ContractsRetrievingResponseContractVirtualBank) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ContractsRetrievingResponseContractVirtualBank) SetAccountName(val OptString) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ContractsRetrievingResponseContractVirtualBankAccountKind float64

const (
	ContractsRetrievingResponseContractVirtualBankAccountKind0 ContractsRetrievingResponseContractVirtualBankAccountKind = 0
	ContractsRetrievingResponseContractVirtualBankAccountKind1 ContractsRetrievingResponseContractVirtualBankAccountKind = 1
)

// AllValues returns all ContractsRetrievingResponseContractVirtualBankAccountKind values.
func (ContractsRetrievingResponseContractVirtualBankAccountKind) AllValues() []ContractsRetrievingResponseContractVirtualBankAccountKind {
	return []ContractsRetrievingResponseContractVirtualBankAccountKind{
		ContractsRetrievingResponseContractVirtualBankAccountKind0,
		ContractsRetrievingResponseContractVirtualBankAccountKind1,
	}
}

type ContractsRetrievingResponseCreditCardSetting struct {
	// （VISA／Mastercard）3Dセキュア認証が有効かどうか
	// - `true`: 3Dセキュア認証が有効
	// - `false`: 3Dセキュア認証が無効.
	VMTdsAvailable OptNilBool `json:"vm_tds_available"`
	// （VISA／Mastercard）3Dセキュア認証の利用が必須かどうか
	// - `true`: 3Dセキュア認証の使用が必須
	// - `false`: 3Dセキュア認証の使用が任意.
	VMTdsRequired OptNilBool `json:"vm_tds_required"`
	// （JCB／AMEX）3Dセキュア認証が有効かどうか
	// - `true`: 3Dセキュア認証が有効
	// - `false`: 3Dセキュア認証が無効.
	JaTdsAvailable OptNilBool `json:"ja_tds_available"`
	// （JCB／AMEX）3Dセキュア認証の利用が必須かどうか
	// - `true`: 3Dセキュア認証の使用が必須
	// - `false`: 3Dセキュア認証の使用が任意.
	JaTdsRequired OptNilBool `json:"ja_tds_required"`
	// 分割払い／リボ払いが利用可能かどうか
	// - `true`: 利用可能
	// - `false`: 利用不可.
	InstallPaymentAvailable OptNilBool `json:"install_payment_available"`
}

// GetVMTdsAvailable returns the value of VMTdsAvailable.
func (s *ContractsRetrievingResponseCreditCardSetting) GetVMTdsAvailable() OptNilBool {
	return s.VMTdsAvailable
}

// GetVMTdsRequired returns the value of VMTdsRequired.
func (s *ContractsRetrievingResponseCreditCardSetting) GetVMTdsRequired() OptNilBool {
	return s.VMTdsRequired
}

// GetJaTdsAvailable returns the value of JaTdsAvailable.
func (s *ContractsRetrievingResponseCreditCardSetting) GetJaTdsAvailable() OptNilBool {
	return s.JaTdsAvailable
}

// GetJaTdsRequired returns the value of JaTdsRequired.
func (s *ContractsRetrievingResponseCreditCardSetting) GetJaTdsRequired() OptNilBool {
	return s.JaTdsRequired
}

// GetInstallPaymentAvailable returns the value of InstallPaymentAvailable.
func (s *ContractsRetrievingResponseCreditCardSetting) GetInstallPaymentAvailable() OptNilBool {
	return s.InstallPaymentAvailable
}

// SetVMTdsAvailable sets the value of VMTdsAvailable.
func (s *ContractsRetrievingResponseCreditCardSetting) SetVMTdsAvailable(val OptNilBool) {
	s.VMTdsAvailable = val
}

// SetVMTdsRequired sets the value of VMTdsRequired.
func (s *ContractsRetrievingResponseCreditCardSetting) SetVMTdsRequired(val OptNilBool) {
	s.VMTdsRequired = val
}

// SetJaTdsAvailable sets the value of JaTdsAvailable.
func (s *ContractsRetrievingResponseCreditCardSetting) SetJaTdsAvailable(val OptNilBool) {
	s.JaTdsAvailable = val
}

// SetJaTdsRequired sets the value of JaTdsRequired.
func (s *ContractsRetrievingResponseCreditCardSetting) SetJaTdsRequired(val OptNilBool) {
	s.JaTdsRequired = val
}

// SetInstallPaymentAvailable sets the value of InstallPaymentAvailable.
func (s *ContractsRetrievingResponseCreditCardSetting) SetInstallPaymentAvailable(val OptNilBool) {
	s.InstallPaymentAvailable = val
}

type ContractsRetrievingResponseExaminationItem struct {
	ExaminationMasterID OptContractsRetrievingResponseExaminationItemExaminationMasterID `json:"examination_master_id"`
	StatusCode          OptContractsRetrievingResponseExaminationItemStatusCode          `json:"status_code"`
	// 加盟店番号.
	MemberCode OptNilString `json:"member_code"`
	// 3Dセキュア認証利用可否
	// - `true`: 利用可
	// - `false`: 利用不可.
	TdsAvailable OptNilBool `json:"tds_available"`
	// 分割払い利用可否
	// - `true`: 利用可
	// - `false`: 利用不可.
	InstallmentsPaymentAvailable OptNilBool `json:"installments_payment_available"`
	// MCC 1.
	Mcc1 OptNilString `json:"mcc_1"`
	// MCC 2.
	Mcc2 OptNilString `json:"mcc_2"`
	// PayPay 加盟店番号.
	PaypayMid OptNilString `json:"paypay_mid"`
	// PayPay 店舗ID.
	PaypayStoreID OptNilString `json:"paypay_store_id"`
	// PAYSLE 企業コード.
	PaysleMerchantCode OptNilString `json:"paysle_merchant_code"`
	// PAYSLE ログイン企業ID.
	PaysleUserID OptNilString `json:"paysle_user_id"`
	// PAYSLE システム接続パスワード.
	PaysleUserPassword OptNilString `json:"paysle_user_password"`
	// 利用開始日\
	// 形式：`yyyy/MM/dd`.
	CutOverAt OptNilString `json:"cut_over_at"`
}

// GetExaminationMasterID returns the value of ExaminationMasterID.
func (s *ContractsRetrievingResponseExaminationItem) GetExaminationMasterID() OptContractsRetrievingResponseExaminationItemExaminationMasterID {
	return s.ExaminationMasterID
}

// GetStatusCode returns the value of StatusCode.
func (s *ContractsRetrievingResponseExaminationItem) GetStatusCode() OptContractsRetrievingResponseExaminationItemStatusCode {
	return s.StatusCode
}

// GetMemberCode returns the value of MemberCode.
func (s *ContractsRetrievingResponseExaminationItem) GetMemberCode() OptNilString {
	return s.MemberCode
}

// GetTdsAvailable returns the value of TdsAvailable.
func (s *ContractsRetrievingResponseExaminationItem) GetTdsAvailable() OptNilBool {
	return s.TdsAvailable
}

// GetInstallmentsPaymentAvailable returns the value of InstallmentsPaymentAvailable.
func (s *ContractsRetrievingResponseExaminationItem) GetInstallmentsPaymentAvailable() OptNilBool {
	return s.InstallmentsPaymentAvailable
}

// GetMcc1 returns the value of Mcc1.
func (s *ContractsRetrievingResponseExaminationItem) GetMcc1() OptNilString {
	return s.Mcc1
}

// GetMcc2 returns the value of Mcc2.
func (s *ContractsRetrievingResponseExaminationItem) GetMcc2() OptNilString {
	return s.Mcc2
}

// GetPaypayMid returns the value of PaypayMid.
func (s *ContractsRetrievingResponseExaminationItem) GetPaypayMid() OptNilString {
	return s.PaypayMid
}

// GetPaypayStoreID returns the value of PaypayStoreID.
func (s *ContractsRetrievingResponseExaminationItem) GetPaypayStoreID() OptNilString {
	return s.PaypayStoreID
}

// GetPaysleMerchantCode returns the value of PaysleMerchantCode.
func (s *ContractsRetrievingResponseExaminationItem) GetPaysleMerchantCode() OptNilString {
	return s.PaysleMerchantCode
}

// GetPaysleUserID returns the value of PaysleUserID.
func (s *ContractsRetrievingResponseExaminationItem) GetPaysleUserID() OptNilString {
	return s.PaysleUserID
}

// GetPaysleUserPassword returns the value of PaysleUserPassword.
func (s *ContractsRetrievingResponseExaminationItem) GetPaysleUserPassword() OptNilString {
	return s.PaysleUserPassword
}

// GetCutOverAt returns the value of CutOverAt.
func (s *ContractsRetrievingResponseExaminationItem) GetCutOverAt() OptNilString {
	return s.CutOverAt
}

// SetExaminationMasterID sets the value of ExaminationMasterID.
func (s *ContractsRetrievingResponseExaminationItem) SetExaminationMasterID(val OptContractsRetrievingResponseExaminationItemExaminationMasterID) {
	s.ExaminationMasterID = val
}

// SetStatusCode sets the value of StatusCode.
func (s *ContractsRetrievingResponseExaminationItem) SetStatusCode(val OptContractsRetrievingResponseExaminationItemStatusCode) {
	s.StatusCode = val
}

// SetMemberCode sets the value of MemberCode.
func (s *ContractsRetrievingResponseExaminationItem) SetMemberCode(val OptNilString) {
	s.MemberCode = val
}

// SetTdsAvailable sets the value of TdsAvailable.
func (s *ContractsRetrievingResponseExaminationItem) SetTdsAvailable(val OptNilBool) {
	s.TdsAvailable = val
}

// SetInstallmentsPaymentAvailable sets the value of InstallmentsPaymentAvailable.
func (s *ContractsRetrievingResponseExaminationItem) SetInstallmentsPaymentAvailable(val OptNilBool) {
	s.InstallmentsPaymentAvailable = val
}

// SetMcc1 sets the value of Mcc1.
func (s *ContractsRetrievingResponseExaminationItem) SetMcc1(val OptNilString) {
	s.Mcc1 = val
}

// SetMcc2 sets the value of Mcc2.
func (s *ContractsRetrievingResponseExaminationItem) SetMcc2(val OptNilString) {
	s.Mcc2 = val
}

// SetPaypayMid sets the value of PaypayMid.
func (s *ContractsRetrievingResponseExaminationItem) SetPaypayMid(val OptNilString) {
	s.PaypayMid = val
}

// SetPaypayStoreID sets the value of PaypayStoreID.
func (s *ContractsRetrievingResponseExaminationItem) SetPaypayStoreID(val OptNilString) {
	s.PaypayStoreID = val
}

// SetPaysleMerchantCode sets the value of PaysleMerchantCode.
func (s *ContractsRetrievingResponseExaminationItem) SetPaysleMerchantCode(val OptNilString) {
	s.PaysleMerchantCode = val
}

// SetPaysleUserID sets the value of PaysleUserID.
func (s *ContractsRetrievingResponseExaminationItem) SetPaysleUserID(val OptNilString) {
	s.PaysleUserID = val
}

// SetPaysleUserPassword sets the value of PaysleUserPassword.
func (s *ContractsRetrievingResponseExaminationItem) SetPaysleUserPassword(val OptNilString) {
	s.PaysleUserPassword = val
}

// SetCutOverAt sets the value of CutOverAt.
func (s *ContractsRetrievingResponseExaminationItem) SetCutOverAt(val OptNilString) {
	s.CutOverAt = val
}

// 審査種別マスタID。\
// プラットフォーム料率の適用対象とする決済手段の種別を表します。
// - `vm`: カード決済（VISA / Mastercard）
// - `jad`: カード決済（JCB / American Express / Diners Club / Discover）
// - `applepay_vm`: Apple Pay（VISA / Mastercard）
// - `applepay_jad`: Apple Pay（JCB / American Express / Diners Club / Discover）
// - `konbini`: コンビニ決済
// - `paypay`: PayPay
// - `directdebit`: 口座振替.
type ContractsRetrievingResponseExaminationItemExaminationMasterID string

const (
	ContractsRetrievingResponseExaminationItemExaminationMasterIDVM          ContractsRetrievingResponseExaminationItemExaminationMasterID = "vm"
	ContractsRetrievingResponseExaminationItemExaminationMasterIDJad         ContractsRetrievingResponseExaminationItemExaminationMasterID = "jad"
	ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayVM  ContractsRetrievingResponseExaminationItemExaminationMasterID = "applepay_vm"
	ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayJad ContractsRetrievingResponseExaminationItemExaminationMasterID = "applepay_jad"
	ContractsRetrievingResponseExaminationItemExaminationMasterIDKonbini     ContractsRetrievingResponseExaminationItemExaminationMasterID = "konbini"
	ContractsRetrievingResponseExaminationItemExaminationMasterIDPaypay      ContractsRetrievingResponseExaminationItemExaminationMasterID = "paypay"
	ContractsRetrievingResponseExaminationItemExaminationMasterIDDirectdebit ContractsRetrievingResponseExaminationItemExaminationMasterID = "directdebit"
)

// AllValues returns all ContractsRetrievingResponseExaminationItemExaminationMasterID values.
func (ContractsRetrievingResponseExaminationItemExaminationMasterID) AllValues() []ContractsRetrievingResponseExaminationItemExaminationMasterID {
	return []ContractsRetrievingResponseExaminationItemExaminationMasterID{
		ContractsRetrievingResponseExaminationItemExaminationMasterIDVM,
		ContractsRetrievingResponseExaminationItemExaminationMasterIDJad,
		ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayVM,
		ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayJad,
		ContractsRetrievingResponseExaminationItemExaminationMasterIDKonbini,
		ContractsRetrievingResponseExaminationItemExaminationMasterIDPaypay,
		ContractsRetrievingResponseExaminationItemExaminationMasterIDDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContractsRetrievingResponseExaminationItemExaminationMasterID) MarshalText() ([]byte, error) {
	switch s {
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDVM:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDJad:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayVM:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayJad:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDKonbini:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDPaypay:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContractsRetrievingResponseExaminationItemExaminationMasterID) UnmarshalText(data []byte) error {
	switch ContractsRetrievingResponseExaminationItemExaminationMasterID(data) {
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDVM:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDVM
		return nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDJad:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDJad
		return nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayVM:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayVM
		return nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayJad:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayJad
		return nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDKonbini:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDKonbini
		return nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDPaypay:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDPaypay
		return nil
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDDirectdebit:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 審査ステータス
// - `1`: 審査中<br /><span
// class="smallText">まだこの決済手段による決済を受け付けることはできません。</span>
// - `2`: 審査OK<br /><span
// class="smallText">この決済手段による決済を受け付けることができます。</span>
// - `3`: 審査NG<br /><span
// class="smallText">この決済手段による決済を受け付けることはできません。</span>.
type ContractsRetrievingResponseExaminationItemStatusCode string

const (
	ContractsRetrievingResponseExaminationItemStatusCode1 ContractsRetrievingResponseExaminationItemStatusCode = "1"
	ContractsRetrievingResponseExaminationItemStatusCode2 ContractsRetrievingResponseExaminationItemStatusCode = "2"
	ContractsRetrievingResponseExaminationItemStatusCode3 ContractsRetrievingResponseExaminationItemStatusCode = "3"
)

// AllValues returns all ContractsRetrievingResponseExaminationItemStatusCode values.
func (ContractsRetrievingResponseExaminationItemStatusCode) AllValues() []ContractsRetrievingResponseExaminationItemStatusCode {
	return []ContractsRetrievingResponseExaminationItemStatusCode{
		ContractsRetrievingResponseExaminationItemStatusCode1,
		ContractsRetrievingResponseExaminationItemStatusCode2,
		ContractsRetrievingResponseExaminationItemStatusCode3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContractsRetrievingResponseExaminationItemStatusCode) MarshalText() ([]byte, error) {
	switch s {
	case ContractsRetrievingResponseExaminationItemStatusCode1:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemStatusCode2:
		return []byte(s), nil
	case ContractsRetrievingResponseExaminationItemStatusCode3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContractsRetrievingResponseExaminationItemStatusCode) UnmarshalText(data []byte) error {
	switch ContractsRetrievingResponseExaminationItemStatusCode(data) {
	case ContractsRetrievingResponseExaminationItemStatusCode1:
		*s = ContractsRetrievingResponseExaminationItemStatusCode1
		return nil
	case ContractsRetrievingResponseExaminationItemStatusCode2:
		*s = ContractsRetrievingResponseExaminationItemStatusCode2
		return nil
	case ContractsRetrievingResponseExaminationItemStatusCode3:
		*s = ContractsRetrievingResponseExaminationItemStatusCode3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ContractsRetrievingResponseOfficialRegisteredCorporateInfo struct {
	// 法人名.
	CompanyName OptNilString `json:"company_name"`
	// 法人名（カナ）.
	CompanyNameKana OptNilString `json:"company_name_kana"`
	// 法人種別（国税庁既定のコード定義に準拠）.
	CompanyKind OptNilString `json:"company_kind"`
	// 会社情報 郵便番号.
	CompanyPostalCode OptNilString `json:"company_postal_code"`
	// 会社情報 都道府県コード.
	CompanyPrefectureCode OptNilString `json:"company_prefecture_code"`
	// 会社情報 市区町村コード.
	CompanyCityCode OptNilString `json:"company_city_code"`
	// 会社情報 都道府県.
	CompanyPrefecture OptNilString `json:"company_prefecture"`
	// 会社情報 都道府県（カナ）.
	CompanyPrefectureKana OptNilString `json:"company_prefecture_kana"`
	// 会社情報 市区町村.
	CompanyCity OptNilString `json:"company_city"`
	// 会社情報 市区町村（カナ）.
	CompanyCityKana OptNilString `json:"company_city_kana"`
	// 会社情報 町域・丁目・番地.
	CompanyStreet OptNilString `json:"company_street"`
	// 会社情報 町域・丁目・番地（カナ）.
	CompanyStreetKana OptNilString `json:"company_street_kana"`
}

// GetCompanyName returns the value of CompanyName.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyName() OptNilString {
	return s.CompanyName
}

// GetCompanyNameKana returns the value of CompanyNameKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyNameKana() OptNilString {
	return s.CompanyNameKana
}

// GetCompanyKind returns the value of CompanyKind.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyKind() OptNilString {
	return s.CompanyKind
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyPostalCode() OptNilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefectureCode returns the value of CompanyPrefectureCode.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyPrefectureCode() OptNilString {
	return s.CompanyPrefectureCode
}

// GetCompanyCityCode returns the value of CompanyCityCode.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyCityCode() OptNilString {
	return s.CompanyCityCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyPrefecture() OptNilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyPrefectureKana() OptNilString {
	return s.CompanyPrefectureKana
}

// GetCompanyCity returns the value of CompanyCity.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyCity() OptNilString {
	return s.CompanyCity
}

// GetCompanyCityKana returns the value of CompanyCityKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyCityKana() OptNilString {
	return s.CompanyCityKana
}

// GetCompanyStreet returns the value of CompanyStreet.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyStreet() OptNilString {
	return s.CompanyStreet
}

// GetCompanyStreetKana returns the value of CompanyStreetKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) GetCompanyStreetKana() OptNilString {
	return s.CompanyStreetKana
}

// SetCompanyName sets the value of CompanyName.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyName(val OptNilString) {
	s.CompanyName = val
}

// SetCompanyNameKana sets the value of CompanyNameKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyNameKana(val OptNilString) {
	s.CompanyNameKana = val
}

// SetCompanyKind sets the value of CompanyKind.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyKind(val OptNilString) {
	s.CompanyKind = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyPostalCode(val OptNilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefectureCode sets the value of CompanyPrefectureCode.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyPrefectureCode(val OptNilString) {
	s.CompanyPrefectureCode = val
}

// SetCompanyCityCode sets the value of CompanyCityCode.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyCityCode(val OptNilString) {
	s.CompanyCityCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyPrefecture(val OptNilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyPrefectureKana(val OptNilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyCity sets the value of CompanyCity.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyCity(val OptNilString) {
	s.CompanyCity = val
}

// SetCompanyCityKana sets the value of CompanyCityKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyCityKana(val OptNilString) {
	s.CompanyCityKana = val
}

// SetCompanyStreet sets the value of CompanyStreet.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyStreet(val OptNilString) {
	s.CompanyStreet = val
}

// SetCompanyStreetKana sets the value of CompanyStreetKana.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetCompanyStreetKana(val OptNilString) {
	s.CompanyStreetKana = val
}

// 売上入金 可否ステータス
// - `501`: 入金に必要な手続きが未完了
// - `502`: 入金可能
// - `503`: 入金保留.
type ContractsRetrievingResponseSalesDepositStatusCode int

const (
	ContractsRetrievingResponseSalesDepositStatusCode501 ContractsRetrievingResponseSalesDepositStatusCode = 501
	ContractsRetrievingResponseSalesDepositStatusCode502 ContractsRetrievingResponseSalesDepositStatusCode = 502
	ContractsRetrievingResponseSalesDepositStatusCode503 ContractsRetrievingResponseSalesDepositStatusCode = 503
)

// AllValues returns all ContractsRetrievingResponseSalesDepositStatusCode values.
func (ContractsRetrievingResponseSalesDepositStatusCode) AllValues() []ContractsRetrievingResponseSalesDepositStatusCode {
	return []ContractsRetrievingResponseSalesDepositStatusCode{
		ContractsRetrievingResponseSalesDepositStatusCode501,
		ContractsRetrievingResponseSalesDepositStatusCode502,
		ContractsRetrievingResponseSalesDepositStatusCode503,
	}
}

// 顧客情報共有フラグ
// - `0`: 顧客情報を共有しない<br /><span
// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
// - `1`: 顧客情報を共有する<br /><span
// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
type ContractsRetrievingResponseSharedCustomerFlag string

const (
	ContractsRetrievingResponseSharedCustomerFlag0 ContractsRetrievingResponseSharedCustomerFlag = "0"
	ContractsRetrievingResponseSharedCustomerFlag1 ContractsRetrievingResponseSharedCustomerFlag = "1"
)

// AllValues returns all ContractsRetrievingResponseSharedCustomerFlag values.
func (ContractsRetrievingResponseSharedCustomerFlag) AllValues() []ContractsRetrievingResponseSharedCustomerFlag {
	return []ContractsRetrievingResponseSharedCustomerFlag{
		ContractsRetrievingResponseSharedCustomerFlag0,
		ContractsRetrievingResponseSharedCustomerFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContractsRetrievingResponseSharedCustomerFlag) MarshalText() ([]byte, error) {
	switch s {
	case ContractsRetrievingResponseSharedCustomerFlag0:
		return []byte(s), nil
	case ContractsRetrievingResponseSharedCustomerFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContractsRetrievingResponseSharedCustomerFlag) UnmarshalText(data []byte) error {
	switch ContractsRetrievingResponseSharedCustomerFlag(data) {
	case ContractsRetrievingResponseSharedCustomerFlag0:
		*s = ContractsRetrievingResponseSharedCustomerFlag0
		return nil
	case ContractsRetrievingResponseSharedCustomerFlag1:
		*s = ContractsRetrievingResponseSharedCustomerFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type ContractsRetrievingResponseShopType string

const (
	ContractsRetrievingResponseShopTypePlatform ContractsRetrievingResponseShopType = "platform"
	ContractsRetrievingResponseShopTypeTenant   ContractsRetrievingResponseShopType = "tenant"
)

// AllValues returns all ContractsRetrievingResponseShopType values.
func (ContractsRetrievingResponseShopType) AllValues() []ContractsRetrievingResponseShopType {
	return []ContractsRetrievingResponseShopType{
		ContractsRetrievingResponseShopTypePlatform,
		ContractsRetrievingResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContractsRetrievingResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case ContractsRetrievingResponseShopTypePlatform:
		return []byte(s), nil
	case ContractsRetrievingResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContractsRetrievingResponseShopType) UnmarshalText(data []byte) error {
	switch ContractsRetrievingResponseShopType(data) {
	case ContractsRetrievingResponseShopTypePlatform:
		*s = ContractsRetrievingResponseShopTypePlatform
		return nil
	case ContractsRetrievingResponseShopTypeTenant:
		*s = ContractsRetrievingResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 契約ステータス\
// \
// fincodeとそのショップの運営事業者の契約のステータスを表します。
// - `101`: 未契約<br /><span
// class="smallText">まだfincodeの本番環境申請の提出が完了していない状態です。</span>
// - `102`: 利用審査中<br /><span
// class="smallText">fincodeの本番環境申請の提出が完了し、利用審査中の状態です。</span>
// - `103`: 利用審査中（VISA/Mastercard利用可）<br /><span
// class="smallText">即時利用によりVISA/Mastercardブランドの決済受付が可能な状態です。審査は継続して行われます。</span>
// - `105`: 解約済
// - `106`: 契約不成立<br /><span
// class="smallText">審査の結果、fincodeの利用が不可となった状態です。</span>
// - `107`: 稼働中<br /><span
// class="smallText">fincodeの本番環境申請が完了し、クレジットカード決済の受付が可能な状態です。</span>.
type ContractsRetrievingResponseStatusCode string

const (
	ContractsRetrievingResponseStatusCode101 ContractsRetrievingResponseStatusCode = "101"
	ContractsRetrievingResponseStatusCode102 ContractsRetrievingResponseStatusCode = "102"
	ContractsRetrievingResponseStatusCode103 ContractsRetrievingResponseStatusCode = "103"
	ContractsRetrievingResponseStatusCode105 ContractsRetrievingResponseStatusCode = "105"
	ContractsRetrievingResponseStatusCode106 ContractsRetrievingResponseStatusCode = "106"
	ContractsRetrievingResponseStatusCode107 ContractsRetrievingResponseStatusCode = "107"
)

// AllValues returns all ContractsRetrievingResponseStatusCode values.
func (ContractsRetrievingResponseStatusCode) AllValues() []ContractsRetrievingResponseStatusCode {
	return []ContractsRetrievingResponseStatusCode{
		ContractsRetrievingResponseStatusCode101,
		ContractsRetrievingResponseStatusCode102,
		ContractsRetrievingResponseStatusCode103,
		ContractsRetrievingResponseStatusCode105,
		ContractsRetrievingResponseStatusCode106,
		ContractsRetrievingResponseStatusCode107,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContractsRetrievingResponseStatusCode) MarshalText() ([]byte, error) {
	switch s {
	case ContractsRetrievingResponseStatusCode101:
		return []byte(s), nil
	case ContractsRetrievingResponseStatusCode102:
		return []byte(s), nil
	case ContractsRetrievingResponseStatusCode103:
		return []byte(s), nil
	case ContractsRetrievingResponseStatusCode105:
		return []byte(s), nil
	case ContractsRetrievingResponseStatusCode106:
		return []byte(s), nil
	case ContractsRetrievingResponseStatusCode107:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContractsRetrievingResponseStatusCode) UnmarshalText(data []byte) error {
	switch ContractsRetrievingResponseStatusCode(data) {
	case ContractsRetrievingResponseStatusCode101:
		*s = ContractsRetrievingResponseStatusCode101
		return nil
	case ContractsRetrievingResponseStatusCode102:
		*s = ContractsRetrievingResponseStatusCode102
		return nil
	case ContractsRetrievingResponseStatusCode103:
		*s = ContractsRetrievingResponseStatusCode103
		return nil
	case ContractsRetrievingResponseStatusCode105:
		*s = ContractsRetrievingResponseStatusCode105
		return nil
	case ContractsRetrievingResponseStatusCode106:
		*s = ContractsRetrievingResponseStatusCode106
		return nil
	case ContractsRetrievingResponseStatusCode107:
		*s = ContractsRetrievingResponseStatusCode107
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（一括決済に対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード.
type CreatePaymentBulkPayType string

const (
	CreatePaymentBulkPayTypeCard CreatePaymentBulkPayType = "Card"
)

// AllValues returns all CreatePaymentBulkPayType values.
func (CreatePaymentBulkPayType) AllValues() []CreatePaymentBulkPayType {
	return []CreatePaymentBulkPayType{
		CreatePaymentBulkPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentBulkPayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentBulkPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentBulkPayType) UnmarshalText(data []byte) error {
	switch CreatePaymentBulkPayType(data) {
	case CreatePaymentBulkPayTypeCard:
		*s = CreatePaymentBulkPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreatePaymentOK represents sum type.
type CreatePaymentOK struct {
	Type             CreatePaymentOKType // switch on this field
	CreatePaymentOK0 CreatePaymentOK0
	CreatePaymentOK1 CreatePaymentOK1
	CreatePaymentOK2 CreatePaymentOK2
	CreatePaymentOK3 CreatePaymentOK3
	CreatePaymentOK4 CreatePaymentOK4
}

// CreatePaymentOKType is oneOf type of CreatePaymentOK.
type CreatePaymentOKType string

// Possible values for CreatePaymentOKType.
const (
	CreatePaymentOK0CreatePaymentOK CreatePaymentOKType = "CreatePaymentOK0"
	CreatePaymentOK1CreatePaymentOK CreatePaymentOKType = "CreatePaymentOK1"
	CreatePaymentOK2CreatePaymentOK CreatePaymentOKType = "CreatePaymentOK2"
	CreatePaymentOK3CreatePaymentOK CreatePaymentOKType = "CreatePaymentOK3"
	CreatePaymentOK4CreatePaymentOK CreatePaymentOKType = "CreatePaymentOK4"
)

// IsCreatePaymentOK0 reports whether CreatePaymentOK is CreatePaymentOK0.
func (s CreatePaymentOK) IsCreatePaymentOK0() bool { return s.Type == CreatePaymentOK0CreatePaymentOK }

// IsCreatePaymentOK1 reports whether CreatePaymentOK is CreatePaymentOK1.
func (s CreatePaymentOK) IsCreatePaymentOK1() bool { return s.Type == CreatePaymentOK1CreatePaymentOK }

// IsCreatePaymentOK2 reports whether CreatePaymentOK is CreatePaymentOK2.
func (s CreatePaymentOK) IsCreatePaymentOK2() bool { return s.Type == CreatePaymentOK2CreatePaymentOK }

// IsCreatePaymentOK3 reports whether CreatePaymentOK is CreatePaymentOK3.
func (s CreatePaymentOK) IsCreatePaymentOK3() bool { return s.Type == CreatePaymentOK3CreatePaymentOK }

// IsCreatePaymentOK4 reports whether CreatePaymentOK is CreatePaymentOK4.
func (s CreatePaymentOK) IsCreatePaymentOK4() bool { return s.Type == CreatePaymentOK4CreatePaymentOK }

// SetCreatePaymentOK0 sets CreatePaymentOK to CreatePaymentOK0.
func (s *CreatePaymentOK) SetCreatePaymentOK0(v CreatePaymentOK0) {
	s.Type = CreatePaymentOK0CreatePaymentOK
	s.CreatePaymentOK0 = v
}

// GetCreatePaymentOK0 returns CreatePaymentOK0 and true boolean if CreatePaymentOK is CreatePaymentOK0.
func (s CreatePaymentOK) GetCreatePaymentOK0() (v CreatePaymentOK0, ok bool) {
	if !s.IsCreatePaymentOK0() {
		return v, false
	}
	return s.CreatePaymentOK0, true
}

// NewCreatePaymentOK0CreatePaymentOK returns new CreatePaymentOK from CreatePaymentOK0.
func NewCreatePaymentOK0CreatePaymentOK(v CreatePaymentOK0) CreatePaymentOK {
	var s CreatePaymentOK
	s.SetCreatePaymentOK0(v)
	return s
}

// SetCreatePaymentOK1 sets CreatePaymentOK to CreatePaymentOK1.
func (s *CreatePaymentOK) SetCreatePaymentOK1(v CreatePaymentOK1) {
	s.Type = CreatePaymentOK1CreatePaymentOK
	s.CreatePaymentOK1 = v
}

// GetCreatePaymentOK1 returns CreatePaymentOK1 and true boolean if CreatePaymentOK is CreatePaymentOK1.
func (s CreatePaymentOK) GetCreatePaymentOK1() (v CreatePaymentOK1, ok bool) {
	if !s.IsCreatePaymentOK1() {
		return v, false
	}
	return s.CreatePaymentOK1, true
}

// NewCreatePaymentOK1CreatePaymentOK returns new CreatePaymentOK from CreatePaymentOK1.
func NewCreatePaymentOK1CreatePaymentOK(v CreatePaymentOK1) CreatePaymentOK {
	var s CreatePaymentOK
	s.SetCreatePaymentOK1(v)
	return s
}

// SetCreatePaymentOK2 sets CreatePaymentOK to CreatePaymentOK2.
func (s *CreatePaymentOK) SetCreatePaymentOK2(v CreatePaymentOK2) {
	s.Type = CreatePaymentOK2CreatePaymentOK
	s.CreatePaymentOK2 = v
}

// GetCreatePaymentOK2 returns CreatePaymentOK2 and true boolean if CreatePaymentOK is CreatePaymentOK2.
func (s CreatePaymentOK) GetCreatePaymentOK2() (v CreatePaymentOK2, ok bool) {
	if !s.IsCreatePaymentOK2() {
		return v, false
	}
	return s.CreatePaymentOK2, true
}

// NewCreatePaymentOK2CreatePaymentOK returns new CreatePaymentOK from CreatePaymentOK2.
func NewCreatePaymentOK2CreatePaymentOK(v CreatePaymentOK2) CreatePaymentOK {
	var s CreatePaymentOK
	s.SetCreatePaymentOK2(v)
	return s
}

// SetCreatePaymentOK3 sets CreatePaymentOK to CreatePaymentOK3.
func (s *CreatePaymentOK) SetCreatePaymentOK3(v CreatePaymentOK3) {
	s.Type = CreatePaymentOK3CreatePaymentOK
	s.CreatePaymentOK3 = v
}

// GetCreatePaymentOK3 returns CreatePaymentOK3 and true boolean if CreatePaymentOK is CreatePaymentOK3.
func (s CreatePaymentOK) GetCreatePaymentOK3() (v CreatePaymentOK3, ok bool) {
	if !s.IsCreatePaymentOK3() {
		return v, false
	}
	return s.CreatePaymentOK3, true
}

// NewCreatePaymentOK3CreatePaymentOK returns new CreatePaymentOK from CreatePaymentOK3.
func NewCreatePaymentOK3CreatePaymentOK(v CreatePaymentOK3) CreatePaymentOK {
	var s CreatePaymentOK
	s.SetCreatePaymentOK3(v)
	return s
}

// SetCreatePaymentOK4 sets CreatePaymentOK to CreatePaymentOK4.
func (s *CreatePaymentOK) SetCreatePaymentOK4(v CreatePaymentOK4) {
	s.Type = CreatePaymentOK4CreatePaymentOK
	s.CreatePaymentOK4 = v
}

// GetCreatePaymentOK4 returns CreatePaymentOK4 and true boolean if CreatePaymentOK is CreatePaymentOK4.
func (s CreatePaymentOK) GetCreatePaymentOK4() (v CreatePaymentOK4, ok bool) {
	if !s.IsCreatePaymentOK4() {
		return v, false
	}
	return s.CreatePaymentOK4, true
}

// NewCreatePaymentOK4CreatePaymentOK returns new CreatePaymentOK from CreatePaymentOK4.
func NewCreatePaymentOK4CreatePaymentOK(v CreatePaymentOK4) CreatePaymentOK {
	var s CreatePaymentOK
	s.SetCreatePaymentOK4(v)
	return s
}

func (*CreatePaymentOK) createPaymentRes() {}

// Merged schema.
type CreatePaymentOK0 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptCreatePaymentOK0PayType `json:"pay_type"`
	JobCode OptCreatePaymentOK0JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status OptCreatePaymentOK0Status `json:"status"`
	// カードID\
	// この決済に使用されたカード情報のIDです。.
	CardID     OptNilString                   `json:"card_id"`
	Brand      OptNilCreatePaymentOK0Brand    `json:"brand"`
	CardNo     OptNilString                   `json:"card_no"`
	Expire     OptNilString                   `json:"expire"`
	HolderName OptNilString                   `json:"holder_name"`
	CardNoHash OptNilString                   `json:"card_no_hash"`
	Method     OptCreatePaymentOK0Method      `json:"method"`
	PayTimes   OptNilCreatePaymentOK0PayTimes `json:"pay_times"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString                     `json:"subscription_id"`
	TdsType        OptNilCreatePaymentOK0TdsType    `json:"tds_type"`
	Tds2Type       OptNilCreatePaymentOK0Tds2Type   `json:"tds2_type"`
	Tds2RetURL     OptNilString                     `json:"tds2_ret_url"`
	Tds2Status     OptNilCreatePaymentOK0Tds2Status `json:"tds2_status"`
	MerchantName   OptNilString                     `json:"merchant_name"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetShopID returns the value of ShopID.
func (s *CreatePaymentOK0) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CreatePaymentOK0) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CreatePaymentOK0) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentOK0) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentOK0) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CreatePaymentOK0) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentOK0) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentOK0) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentOK0) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CreatePaymentOK0) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CreatePaymentOK0) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CreatePaymentOK0) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CreatePaymentOK0) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CreatePaymentOK0) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreatePaymentOK0) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentOK0) GetPayType() OptCreatePaymentOK0PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CreatePaymentOK0) GetJobCode() OptCreatePaymentOK0JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *CreatePaymentOK0) GetStatus() OptCreatePaymentOK0Status {
	return s.Status
}

// GetCardID returns the value of CardID.
func (s *CreatePaymentOK0) GetCardID() OptNilString {
	return s.CardID
}

// GetBrand returns the value of Brand.
func (s *CreatePaymentOK0) GetBrand() OptNilCreatePaymentOK0Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *CreatePaymentOK0) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CreatePaymentOK0) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CreatePaymentOK0) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CreatePaymentOK0) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *CreatePaymentOK0) GetMethod() OptCreatePaymentOK0Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *CreatePaymentOK0) GetPayTimes() OptNilCreatePaymentOK0PayTimes {
	return s.PayTimes
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *CreatePaymentOK0) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTdsType returns the value of TdsType.
func (s *CreatePaymentOK0) GetTdsType() OptNilCreatePaymentOK0TdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *CreatePaymentOK0) GetTds2Type() OptNilCreatePaymentOK0Tds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *CreatePaymentOK0) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *CreatePaymentOK0) GetTds2Status() OptNilCreatePaymentOK0Tds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *CreatePaymentOK0) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetForward returns the value of Forward.
func (s *CreatePaymentOK0) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *CreatePaymentOK0) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *CreatePaymentOK0) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *CreatePaymentOK0) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *CreatePaymentOK0) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *CreatePaymentOK0) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetShopID sets the value of ShopID.
func (s *CreatePaymentOK0) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CreatePaymentOK0) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CreatePaymentOK0) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentOK0) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentOK0) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CreatePaymentOK0) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentOK0) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentOK0) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentOK0) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CreatePaymentOK0) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CreatePaymentOK0) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CreatePaymentOK0) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CreatePaymentOK0) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CreatePaymentOK0) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreatePaymentOK0) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentOK0) SetPayType(val OptCreatePaymentOK0PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CreatePaymentOK0) SetJobCode(val OptCreatePaymentOK0JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *CreatePaymentOK0) SetStatus(val OptCreatePaymentOK0Status) {
	s.Status = val
}

// SetCardID sets the value of CardID.
func (s *CreatePaymentOK0) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetBrand sets the value of Brand.
func (s *CreatePaymentOK0) SetBrand(val OptNilCreatePaymentOK0Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *CreatePaymentOK0) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CreatePaymentOK0) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CreatePaymentOK0) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CreatePaymentOK0) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *CreatePaymentOK0) SetMethod(val OptCreatePaymentOK0Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *CreatePaymentOK0) SetPayTimes(val OptNilCreatePaymentOK0PayTimes) {
	s.PayTimes = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *CreatePaymentOK0) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTdsType sets the value of TdsType.
func (s *CreatePaymentOK0) SetTdsType(val OptNilCreatePaymentOK0TdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CreatePaymentOK0) SetTds2Type(val OptNilCreatePaymentOK0Tds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *CreatePaymentOK0) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *CreatePaymentOK0) SetTds2Status(val OptNilCreatePaymentOK0Tds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *CreatePaymentOK0) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetForward sets the value of Forward.
func (s *CreatePaymentOK0) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *CreatePaymentOK0) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *CreatePaymentOK0) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *CreatePaymentOK0) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *CreatePaymentOK0) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *CreatePaymentOK0) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CreatePaymentOK0Brand string

const (
	CreatePaymentOK0BrandVISA     CreatePaymentOK0Brand = "VISA"
	CreatePaymentOK0BrandMASTER   CreatePaymentOK0Brand = "MASTER"
	CreatePaymentOK0BrandJCB      CreatePaymentOK0Brand = "JCB"
	CreatePaymentOK0BrandAMEX     CreatePaymentOK0Brand = "AMEX"
	CreatePaymentOK0BrandDINERS   CreatePaymentOK0Brand = "DINERS"
	CreatePaymentOK0BrandDISCOVER CreatePaymentOK0Brand = "DISCOVER"
	CreatePaymentOK0BrandEmpty    CreatePaymentOK0Brand = ""
)

// AllValues returns all CreatePaymentOK0Brand values.
func (CreatePaymentOK0Brand) AllValues() []CreatePaymentOK0Brand {
	return []CreatePaymentOK0Brand{
		CreatePaymentOK0BrandVISA,
		CreatePaymentOK0BrandMASTER,
		CreatePaymentOK0BrandJCB,
		CreatePaymentOK0BrandAMEX,
		CreatePaymentOK0BrandDINERS,
		CreatePaymentOK0BrandDISCOVER,
		CreatePaymentOK0BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0Brand) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0BrandVISA:
		return []byte(s), nil
	case CreatePaymentOK0BrandMASTER:
		return []byte(s), nil
	case CreatePaymentOK0BrandJCB:
		return []byte(s), nil
	case CreatePaymentOK0BrandAMEX:
		return []byte(s), nil
	case CreatePaymentOK0BrandDINERS:
		return []byte(s), nil
	case CreatePaymentOK0BrandDISCOVER:
		return []byte(s), nil
	case CreatePaymentOK0BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0Brand) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0Brand(data) {
	case CreatePaymentOK0BrandVISA:
		*s = CreatePaymentOK0BrandVISA
		return nil
	case CreatePaymentOK0BrandMASTER:
		*s = CreatePaymentOK0BrandMASTER
		return nil
	case CreatePaymentOK0BrandJCB:
		*s = CreatePaymentOK0BrandJCB
		return nil
	case CreatePaymentOK0BrandAMEX:
		*s = CreatePaymentOK0BrandAMEX
		return nil
	case CreatePaymentOK0BrandDINERS:
		*s = CreatePaymentOK0BrandDINERS
		return nil
	case CreatePaymentOK0BrandDISCOVER:
		*s = CreatePaymentOK0BrandDISCOVER
		return nil
	case CreatePaymentOK0BrandEmpty:
		*s = CreatePaymentOK0BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CreatePaymentOK0JobCode string

const (
	CreatePaymentOK0JobCodeCHECK   CreatePaymentOK0JobCode = "CHECK"
	CreatePaymentOK0JobCodeAUTH    CreatePaymentOK0JobCode = "AUTH"
	CreatePaymentOK0JobCodeCAPTURE CreatePaymentOK0JobCode = "CAPTURE"
)

// AllValues returns all CreatePaymentOK0JobCode values.
func (CreatePaymentOK0JobCode) AllValues() []CreatePaymentOK0JobCode {
	return []CreatePaymentOK0JobCode{
		CreatePaymentOK0JobCodeCHECK,
		CreatePaymentOK0JobCodeAUTH,
		CreatePaymentOK0JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0JobCodeCHECK:
		return []byte(s), nil
	case CreatePaymentOK0JobCodeAUTH:
		return []byte(s), nil
	case CreatePaymentOK0JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0JobCode) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0JobCode(data) {
	case CreatePaymentOK0JobCodeCHECK:
		*s = CreatePaymentOK0JobCodeCHECK
		return nil
	case CreatePaymentOK0JobCodeAUTH:
		*s = CreatePaymentOK0JobCodeAUTH
		return nil
	case CreatePaymentOK0JobCodeCAPTURE:
		*s = CreatePaymentOK0JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type CreatePaymentOK0Method string

const (
	CreatePaymentOK0Method1 CreatePaymentOK0Method = "1"
	CreatePaymentOK0Method2 CreatePaymentOK0Method = "2"
	CreatePaymentOK0Method5 CreatePaymentOK0Method = "5"
)

// AllValues returns all CreatePaymentOK0Method values.
func (CreatePaymentOK0Method) AllValues() []CreatePaymentOK0Method {
	return []CreatePaymentOK0Method{
		CreatePaymentOK0Method1,
		CreatePaymentOK0Method2,
		CreatePaymentOK0Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0Method) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0Method1:
		return []byte(s), nil
	case CreatePaymentOK0Method2:
		return []byte(s), nil
	case CreatePaymentOK0Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0Method) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0Method(data) {
	case CreatePaymentOK0Method1:
		*s = CreatePaymentOK0Method1
		return nil
	case CreatePaymentOK0Method2:
		*s = CreatePaymentOK0Method2
		return nil
	case CreatePaymentOK0Method5:
		*s = CreatePaymentOK0Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type CreatePaymentOK0PayTimes string

const (
	CreatePaymentOK0PayTimes3  CreatePaymentOK0PayTimes = "3"
	CreatePaymentOK0PayTimes5  CreatePaymentOK0PayTimes = "5"
	CreatePaymentOK0PayTimes6  CreatePaymentOK0PayTimes = "6"
	CreatePaymentOK0PayTimes10 CreatePaymentOK0PayTimes = "10"
	CreatePaymentOK0PayTimes12 CreatePaymentOK0PayTimes = "12"
	CreatePaymentOK0PayTimes15 CreatePaymentOK0PayTimes = "15"
	CreatePaymentOK0PayTimes18 CreatePaymentOK0PayTimes = "18"
	CreatePaymentOK0PayTimes20 CreatePaymentOK0PayTimes = "20"
	CreatePaymentOK0PayTimes24 CreatePaymentOK0PayTimes = "24"
)

// AllValues returns all CreatePaymentOK0PayTimes values.
func (CreatePaymentOK0PayTimes) AllValues() []CreatePaymentOK0PayTimes {
	return []CreatePaymentOK0PayTimes{
		CreatePaymentOK0PayTimes3,
		CreatePaymentOK0PayTimes5,
		CreatePaymentOK0PayTimes6,
		CreatePaymentOK0PayTimes10,
		CreatePaymentOK0PayTimes12,
		CreatePaymentOK0PayTimes15,
		CreatePaymentOK0PayTimes18,
		CreatePaymentOK0PayTimes20,
		CreatePaymentOK0PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0PayTimes3:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes5:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes6:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes10:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes12:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes15:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes18:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes20:
		return []byte(s), nil
	case CreatePaymentOK0PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0PayTimes) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0PayTimes(data) {
	case CreatePaymentOK0PayTimes3:
		*s = CreatePaymentOK0PayTimes3
		return nil
	case CreatePaymentOK0PayTimes5:
		*s = CreatePaymentOK0PayTimes5
		return nil
	case CreatePaymentOK0PayTimes6:
		*s = CreatePaymentOK0PayTimes6
		return nil
	case CreatePaymentOK0PayTimes10:
		*s = CreatePaymentOK0PayTimes10
		return nil
	case CreatePaymentOK0PayTimes12:
		*s = CreatePaymentOK0PayTimes12
		return nil
	case CreatePaymentOK0PayTimes15:
		*s = CreatePaymentOK0PayTimes15
		return nil
	case CreatePaymentOK0PayTimes18:
		*s = CreatePaymentOK0PayTimes18
		return nil
	case CreatePaymentOK0PayTimes20:
		*s = CreatePaymentOK0PayTimes20
		return nil
	case CreatePaymentOK0PayTimes24:
		*s = CreatePaymentOK0PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentOK0PayType string

const (
	CreatePaymentOK0PayTypeCard           CreatePaymentOK0PayType = "Card"
	CreatePaymentOK0PayTypeKonbini        CreatePaymentOK0PayType = "Konbini"
	CreatePaymentOK0PayTypePaypay         CreatePaymentOK0PayType = "Paypay"
	CreatePaymentOK0PayTypeApplepay       CreatePaymentOK0PayType = "Applepay"
	CreatePaymentOK0PayTypeDirectdebit    CreatePaymentOK0PayType = "Directdebit"
	CreatePaymentOK0PayTypeVirtualaccount CreatePaymentOK0PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentOK0PayType values.
func (CreatePaymentOK0PayType) AllValues() []CreatePaymentOK0PayType {
	return []CreatePaymentOK0PayType{
		CreatePaymentOK0PayTypeCard,
		CreatePaymentOK0PayTypeKonbini,
		CreatePaymentOK0PayTypePaypay,
		CreatePaymentOK0PayTypeApplepay,
		CreatePaymentOK0PayTypeDirectdebit,
		CreatePaymentOK0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0PayTypeCard:
		return []byte(s), nil
	case CreatePaymentOK0PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentOK0PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentOK0PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentOK0PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentOK0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0PayType(data) {
	case CreatePaymentOK0PayTypeCard:
		*s = CreatePaymentOK0PayTypeCard
		return nil
	case CreatePaymentOK0PayTypeKonbini:
		*s = CreatePaymentOK0PayTypeKonbini
		return nil
	case CreatePaymentOK0PayTypePaypay:
		*s = CreatePaymentOK0PayTypePaypay
		return nil
	case CreatePaymentOK0PayTypeApplepay:
		*s = CreatePaymentOK0PayTypeApplepay
		return nil
	case CreatePaymentOK0PayTypeDirectdebit:
		*s = CreatePaymentOK0PayTypeDirectdebit
		return nil
	case CreatePaymentOK0PayTypeVirtualaccount:
		*s = CreatePaymentOK0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CreatePaymentOK0Status string

const (
	CreatePaymentOK0StatusUNPROCESSED             CreatePaymentOK0Status = "UNPROCESSED"
	CreatePaymentOK0StatusCHECKED                 CreatePaymentOK0Status = "CHECKED"
	CreatePaymentOK0StatusAUTHORIZED              CreatePaymentOK0Status = "AUTHORIZED"
	CreatePaymentOK0StatusAWAITINGCUSTOMERPAYMENT CreatePaymentOK0Status = "AWAITING_CUSTOMER_PAYMENT"
	CreatePaymentOK0StatusAWAITINGPAYMENTAPPROVAL CreatePaymentOK0Status = "AWAITING_PAYMENT_APPROVAL"
	CreatePaymentOK0StatusCAPTURED                CreatePaymentOK0Status = "CAPTURED"
	CreatePaymentOK0StatusCANCELED                CreatePaymentOK0Status = "CANCELED"
	CreatePaymentOK0StatusEXPIRED                 CreatePaymentOK0Status = "EXPIRED"
	CreatePaymentOK0StatusAUTHENTICATED           CreatePaymentOK0Status = "AUTHENTICATED"
	CreatePaymentOK0StatusFAILED                  CreatePaymentOK0Status = "FAILED"
)

// AllValues returns all CreatePaymentOK0Status values.
func (CreatePaymentOK0Status) AllValues() []CreatePaymentOK0Status {
	return []CreatePaymentOK0Status{
		CreatePaymentOK0StatusUNPROCESSED,
		CreatePaymentOK0StatusCHECKED,
		CreatePaymentOK0StatusAUTHORIZED,
		CreatePaymentOK0StatusAWAITINGCUSTOMERPAYMENT,
		CreatePaymentOK0StatusAWAITINGPAYMENTAPPROVAL,
		CreatePaymentOK0StatusCAPTURED,
		CreatePaymentOK0StatusCANCELED,
		CreatePaymentOK0StatusEXPIRED,
		CreatePaymentOK0StatusAUTHENTICATED,
		CreatePaymentOK0StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0Status) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0StatusUNPROCESSED:
		return []byte(s), nil
	case CreatePaymentOK0StatusCHECKED:
		return []byte(s), nil
	case CreatePaymentOK0StatusAUTHORIZED:
		return []byte(s), nil
	case CreatePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CreatePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CreatePaymentOK0StatusCAPTURED:
		return []byte(s), nil
	case CreatePaymentOK0StatusCANCELED:
		return []byte(s), nil
	case CreatePaymentOK0StatusEXPIRED:
		return []byte(s), nil
	case CreatePaymentOK0StatusAUTHENTICATED:
		return []byte(s), nil
	case CreatePaymentOK0StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0Status) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0Status(data) {
	case CreatePaymentOK0StatusUNPROCESSED:
		*s = CreatePaymentOK0StatusUNPROCESSED
		return nil
	case CreatePaymentOK0StatusCHECKED:
		*s = CreatePaymentOK0StatusCHECKED
		return nil
	case CreatePaymentOK0StatusAUTHORIZED:
		*s = CreatePaymentOK0StatusAUTHORIZED
		return nil
	case CreatePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CreatePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CreatePaymentOK0StatusCAPTURED:
		*s = CreatePaymentOK0StatusCAPTURED
		return nil
	case CreatePaymentOK0StatusCANCELED:
		*s = CreatePaymentOK0StatusCANCELED
		return nil
	case CreatePaymentOK0StatusEXPIRED:
		*s = CreatePaymentOK0StatusEXPIRED
		return nil
	case CreatePaymentOK0StatusAUTHENTICATED:
		*s = CreatePaymentOK0StatusAUTHENTICATED
		return nil
	case CreatePaymentOK0StatusFAILED:
		*s = CreatePaymentOK0StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0認証処理 ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: チャレンジ認証の実施が必要
// - `AUTHENTICATED`: 3Dセキュア認証処理が完了.
type CreatePaymentOK0Tds2Status string

const (
	CreatePaymentOK0Tds2StatusAUTHENTICATING CreatePaymentOK0Tds2Status = "AUTHENTICATING"
	CreatePaymentOK0Tds2StatusCHALLENGE      CreatePaymentOK0Tds2Status = "CHALLENGE"
	CreatePaymentOK0Tds2StatusAUTHENTICATED  CreatePaymentOK0Tds2Status = "AUTHENTICATED"
)

// AllValues returns all CreatePaymentOK0Tds2Status values.
func (CreatePaymentOK0Tds2Status) AllValues() []CreatePaymentOK0Tds2Status {
	return []CreatePaymentOK0Tds2Status{
		CreatePaymentOK0Tds2StatusAUTHENTICATING,
		CreatePaymentOK0Tds2StatusCHALLENGE,
		CreatePaymentOK0Tds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0Tds2Status) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0Tds2StatusAUTHENTICATING:
		return []byte(s), nil
	case CreatePaymentOK0Tds2StatusCHALLENGE:
		return []byte(s), nil
	case CreatePaymentOK0Tds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0Tds2Status) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0Tds2Status(data) {
	case CreatePaymentOK0Tds2StatusAUTHENTICATING:
		*s = CreatePaymentOK0Tds2StatusAUTHENTICATING
		return nil
	case CreatePaymentOK0Tds2StatusCHALLENGE:
		*s = CreatePaymentOK0Tds2StatusCHALLENGE
		return nil
	case CreatePaymentOK0Tds2StatusAUTHENTICATED:
		*s = CreatePaymentOK0Tds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type CreatePaymentOK0Tds2Type string

const (
	CreatePaymentOK0Tds2Type2 CreatePaymentOK0Tds2Type = "2"
	CreatePaymentOK0Tds2Type3 CreatePaymentOK0Tds2Type = "3"
)

// AllValues returns all CreatePaymentOK0Tds2Type values.
func (CreatePaymentOK0Tds2Type) AllValues() []CreatePaymentOK0Tds2Type {
	return []CreatePaymentOK0Tds2Type{
		CreatePaymentOK0Tds2Type2,
		CreatePaymentOK0Tds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0Tds2Type) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0Tds2Type2:
		return []byte(s), nil
	case CreatePaymentOK0Tds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0Tds2Type) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0Tds2Type(data) {
	case CreatePaymentOK0Tds2Type2:
		*s = CreatePaymentOK0Tds2Type2
		return nil
	case CreatePaymentOK0Tds2Type3:
		*s = CreatePaymentOK0Tds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type CreatePaymentOK0TdsType string

const (
	CreatePaymentOK0TdsType0 CreatePaymentOK0TdsType = "0"
	CreatePaymentOK0TdsType2 CreatePaymentOK0TdsType = "2"
)

// AllValues returns all CreatePaymentOK0TdsType values.
func (CreatePaymentOK0TdsType) AllValues() []CreatePaymentOK0TdsType {
	return []CreatePaymentOK0TdsType{
		CreatePaymentOK0TdsType0,
		CreatePaymentOK0TdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK0TdsType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK0TdsType0:
		return []byte(s), nil
	case CreatePaymentOK0TdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK0TdsType) UnmarshalText(data []byte) error {
	switch CreatePaymentOK0TdsType(data) {
	case CreatePaymentOK0TdsType0:
		*s = CreatePaymentOK0TdsType0
		return nil
	case CreatePaymentOK0TdsType2:
		*s = CreatePaymentOK0TdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CreatePaymentOK1 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType OptCreatePaymentOK1PayType `json:"pay_type"`
	JobCode OptCreatePaymentOK1JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>.
	Status OptCreatePaymentOK1Status   `json:"status"`
	Brand  OptNilCreatePaymentOK1Brand `json:"brand"`
	// マスク済みカード番号。\
	// <span class="smallText">
	// 下4桁以外をマスクしたカード番号です。\
	// Apple
	// Payでは実際のカード番号ではなくデバイスアカウント番号と呼ばれる番号で決済が行われるため、このフィールドで返される値はデバイスアカウント番号をマスクしたものになります。\
	// </span>
	// 形式：`************1234`.
	CardNo     OptNilString                   `json:"card_no"`
	Expire     OptNilString                   `json:"expire"`
	HolderName OptNilString                   `json:"holder_name"`
	CardNoHash OptNilString                   `json:"card_no_hash"`
	Method     OptCreatePaymentOK1Method      `json:"method"`
	PayTimes   OptNilCreatePaymentOK1PayTimes `json:"pay_times"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
}

// GetShopID returns the value of ShopID.
func (s *CreatePaymentOK1) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CreatePaymentOK1) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CreatePaymentOK1) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentOK1) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentOK1) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CreatePaymentOK1) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentOK1) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentOK1) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentOK1) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CreatePaymentOK1) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CreatePaymentOK1) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CreatePaymentOK1) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CreatePaymentOK1) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CreatePaymentOK1) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreatePaymentOK1) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentOK1) GetPayType() OptCreatePaymentOK1PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CreatePaymentOK1) GetJobCode() OptCreatePaymentOK1JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *CreatePaymentOK1) GetStatus() OptCreatePaymentOK1Status {
	return s.Status
}

// GetBrand returns the value of Brand.
func (s *CreatePaymentOK1) GetBrand() OptNilCreatePaymentOK1Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *CreatePaymentOK1) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CreatePaymentOK1) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CreatePaymentOK1) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CreatePaymentOK1) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *CreatePaymentOK1) GetMethod() OptCreatePaymentOK1Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *CreatePaymentOK1) GetPayTimes() OptNilCreatePaymentOK1PayTimes {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *CreatePaymentOK1) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *CreatePaymentOK1) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *CreatePaymentOK1) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *CreatePaymentOK1) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *CreatePaymentOK1) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *CreatePaymentOK1) GetItemCode() OptNilString {
	return s.ItemCode
}

// GetSendURL returns the value of SendURL.
func (s *CreatePaymentOK1) GetSendURL() OptNilString {
	return s.SendURL
}

// SetShopID sets the value of ShopID.
func (s *CreatePaymentOK1) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CreatePaymentOK1) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CreatePaymentOK1) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentOK1) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentOK1) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CreatePaymentOK1) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentOK1) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentOK1) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentOK1) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CreatePaymentOK1) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CreatePaymentOK1) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CreatePaymentOK1) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CreatePaymentOK1) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CreatePaymentOK1) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreatePaymentOK1) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentOK1) SetPayType(val OptCreatePaymentOK1PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CreatePaymentOK1) SetJobCode(val OptCreatePaymentOK1JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *CreatePaymentOK1) SetStatus(val OptCreatePaymentOK1Status) {
	s.Status = val
}

// SetBrand sets the value of Brand.
func (s *CreatePaymentOK1) SetBrand(val OptNilCreatePaymentOK1Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *CreatePaymentOK1) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CreatePaymentOK1) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CreatePaymentOK1) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CreatePaymentOK1) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *CreatePaymentOK1) SetMethod(val OptCreatePaymentOK1Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *CreatePaymentOK1) SetPayTimes(val OptNilCreatePaymentOK1PayTimes) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *CreatePaymentOK1) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *CreatePaymentOK1) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *CreatePaymentOK1) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *CreatePaymentOK1) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *CreatePaymentOK1) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *CreatePaymentOK1) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// SetSendURL sets the value of SendURL.
func (s *CreatePaymentOK1) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CreatePaymentOK1Brand string

const (
	CreatePaymentOK1BrandVISA     CreatePaymentOK1Brand = "VISA"
	CreatePaymentOK1BrandMASTER   CreatePaymentOK1Brand = "MASTER"
	CreatePaymentOK1BrandJCB      CreatePaymentOK1Brand = "JCB"
	CreatePaymentOK1BrandAMEX     CreatePaymentOK1Brand = "AMEX"
	CreatePaymentOK1BrandDINERS   CreatePaymentOK1Brand = "DINERS"
	CreatePaymentOK1BrandDISCOVER CreatePaymentOK1Brand = "DISCOVER"
	CreatePaymentOK1BrandEmpty    CreatePaymentOK1Brand = ""
)

// AllValues returns all CreatePaymentOK1Brand values.
func (CreatePaymentOK1Brand) AllValues() []CreatePaymentOK1Brand {
	return []CreatePaymentOK1Brand{
		CreatePaymentOK1BrandVISA,
		CreatePaymentOK1BrandMASTER,
		CreatePaymentOK1BrandJCB,
		CreatePaymentOK1BrandAMEX,
		CreatePaymentOK1BrandDINERS,
		CreatePaymentOK1BrandDISCOVER,
		CreatePaymentOK1BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK1Brand) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK1BrandVISA:
		return []byte(s), nil
	case CreatePaymentOK1BrandMASTER:
		return []byte(s), nil
	case CreatePaymentOK1BrandJCB:
		return []byte(s), nil
	case CreatePaymentOK1BrandAMEX:
		return []byte(s), nil
	case CreatePaymentOK1BrandDINERS:
		return []byte(s), nil
	case CreatePaymentOK1BrandDISCOVER:
		return []byte(s), nil
	case CreatePaymentOK1BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK1Brand) UnmarshalText(data []byte) error {
	switch CreatePaymentOK1Brand(data) {
	case CreatePaymentOK1BrandVISA:
		*s = CreatePaymentOK1BrandVISA
		return nil
	case CreatePaymentOK1BrandMASTER:
		*s = CreatePaymentOK1BrandMASTER
		return nil
	case CreatePaymentOK1BrandJCB:
		*s = CreatePaymentOK1BrandJCB
		return nil
	case CreatePaymentOK1BrandAMEX:
		*s = CreatePaymentOK1BrandAMEX
		return nil
	case CreatePaymentOK1BrandDINERS:
		*s = CreatePaymentOK1BrandDINERS
		return nil
	case CreatePaymentOK1BrandDISCOVER:
		*s = CreatePaymentOK1BrandDISCOVER
		return nil
	case CreatePaymentOK1BrandEmpty:
		*s = CreatePaymentOK1BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CreatePaymentOK1JobCode string

const (
	CreatePaymentOK1JobCodeAUTH    CreatePaymentOK1JobCode = "AUTH"
	CreatePaymentOK1JobCodeCAPTURE CreatePaymentOK1JobCode = "CAPTURE"
)

// AllValues returns all CreatePaymentOK1JobCode values.
func (CreatePaymentOK1JobCode) AllValues() []CreatePaymentOK1JobCode {
	return []CreatePaymentOK1JobCode{
		CreatePaymentOK1JobCodeAUTH,
		CreatePaymentOK1JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK1JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK1JobCodeAUTH:
		return []byte(s), nil
	case CreatePaymentOK1JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK1JobCode) UnmarshalText(data []byte) error {
	switch CreatePaymentOK1JobCode(data) {
	case CreatePaymentOK1JobCodeAUTH:
		*s = CreatePaymentOK1JobCodeAUTH
		return nil
	case CreatePaymentOK1JobCodeCAPTURE:
		*s = CreatePaymentOK1JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type CreatePaymentOK1Method string

const (
	CreatePaymentOK1Method1 CreatePaymentOK1Method = "1"
	CreatePaymentOK1Method2 CreatePaymentOK1Method = "2"
	CreatePaymentOK1Method5 CreatePaymentOK1Method = "5"
)

// AllValues returns all CreatePaymentOK1Method values.
func (CreatePaymentOK1Method) AllValues() []CreatePaymentOK1Method {
	return []CreatePaymentOK1Method{
		CreatePaymentOK1Method1,
		CreatePaymentOK1Method2,
		CreatePaymentOK1Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK1Method) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK1Method1:
		return []byte(s), nil
	case CreatePaymentOK1Method2:
		return []byte(s), nil
	case CreatePaymentOK1Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK1Method) UnmarshalText(data []byte) error {
	switch CreatePaymentOK1Method(data) {
	case CreatePaymentOK1Method1:
		*s = CreatePaymentOK1Method1
		return nil
	case CreatePaymentOK1Method2:
		*s = CreatePaymentOK1Method2
		return nil
	case CreatePaymentOK1Method5:
		*s = CreatePaymentOK1Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type CreatePaymentOK1PayTimes string

const (
	CreatePaymentOK1PayTimes3  CreatePaymentOK1PayTimes = "3"
	CreatePaymentOK1PayTimes5  CreatePaymentOK1PayTimes = "5"
	CreatePaymentOK1PayTimes6  CreatePaymentOK1PayTimes = "6"
	CreatePaymentOK1PayTimes10 CreatePaymentOK1PayTimes = "10"
	CreatePaymentOK1PayTimes12 CreatePaymentOK1PayTimes = "12"
	CreatePaymentOK1PayTimes15 CreatePaymentOK1PayTimes = "15"
	CreatePaymentOK1PayTimes18 CreatePaymentOK1PayTimes = "18"
	CreatePaymentOK1PayTimes20 CreatePaymentOK1PayTimes = "20"
	CreatePaymentOK1PayTimes24 CreatePaymentOK1PayTimes = "24"
)

// AllValues returns all CreatePaymentOK1PayTimes values.
func (CreatePaymentOK1PayTimes) AllValues() []CreatePaymentOK1PayTimes {
	return []CreatePaymentOK1PayTimes{
		CreatePaymentOK1PayTimes3,
		CreatePaymentOK1PayTimes5,
		CreatePaymentOK1PayTimes6,
		CreatePaymentOK1PayTimes10,
		CreatePaymentOK1PayTimes12,
		CreatePaymentOK1PayTimes15,
		CreatePaymentOK1PayTimes18,
		CreatePaymentOK1PayTimes20,
		CreatePaymentOK1PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK1PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK1PayTimes3:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes5:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes6:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes10:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes12:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes15:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes18:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes20:
		return []byte(s), nil
	case CreatePaymentOK1PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK1PayTimes) UnmarshalText(data []byte) error {
	switch CreatePaymentOK1PayTimes(data) {
	case CreatePaymentOK1PayTimes3:
		*s = CreatePaymentOK1PayTimes3
		return nil
	case CreatePaymentOK1PayTimes5:
		*s = CreatePaymentOK1PayTimes5
		return nil
	case CreatePaymentOK1PayTimes6:
		*s = CreatePaymentOK1PayTimes6
		return nil
	case CreatePaymentOK1PayTimes10:
		*s = CreatePaymentOK1PayTimes10
		return nil
	case CreatePaymentOK1PayTimes12:
		*s = CreatePaymentOK1PayTimes12
		return nil
	case CreatePaymentOK1PayTimes15:
		*s = CreatePaymentOK1PayTimes15
		return nil
	case CreatePaymentOK1PayTimes18:
		*s = CreatePaymentOK1PayTimes18
		return nil
	case CreatePaymentOK1PayTimes20:
		*s = CreatePaymentOK1PayTimes20
		return nil
	case CreatePaymentOK1PayTimes24:
		*s = CreatePaymentOK1PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentOK1PayType string

const (
	CreatePaymentOK1PayTypeCard           CreatePaymentOK1PayType = "Card"
	CreatePaymentOK1PayTypeKonbini        CreatePaymentOK1PayType = "Konbini"
	CreatePaymentOK1PayTypePaypay         CreatePaymentOK1PayType = "Paypay"
	CreatePaymentOK1PayTypeApplepay       CreatePaymentOK1PayType = "Applepay"
	CreatePaymentOK1PayTypeDirectdebit    CreatePaymentOK1PayType = "Directdebit"
	CreatePaymentOK1PayTypeVirtualaccount CreatePaymentOK1PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentOK1PayType values.
func (CreatePaymentOK1PayType) AllValues() []CreatePaymentOK1PayType {
	return []CreatePaymentOK1PayType{
		CreatePaymentOK1PayTypeCard,
		CreatePaymentOK1PayTypeKonbini,
		CreatePaymentOK1PayTypePaypay,
		CreatePaymentOK1PayTypeApplepay,
		CreatePaymentOK1PayTypeDirectdebit,
		CreatePaymentOK1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK1PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK1PayTypeCard:
		return []byte(s), nil
	case CreatePaymentOK1PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentOK1PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentOK1PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentOK1PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentOK1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK1PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentOK1PayType(data) {
	case CreatePaymentOK1PayTypeCard:
		*s = CreatePaymentOK1PayTypeCard
		return nil
	case CreatePaymentOK1PayTypeKonbini:
		*s = CreatePaymentOK1PayTypeKonbini
		return nil
	case CreatePaymentOK1PayTypePaypay:
		*s = CreatePaymentOK1PayTypePaypay
		return nil
	case CreatePaymentOK1PayTypeApplepay:
		*s = CreatePaymentOK1PayTypeApplepay
		return nil
	case CreatePaymentOK1PayTypeDirectdebit:
		*s = CreatePaymentOK1PayTypeDirectdebit
		return nil
	case CreatePaymentOK1PayTypeVirtualaccount:
		*s = CreatePaymentOK1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CreatePaymentOK1Status string

const (
	CreatePaymentOK1StatusUNPROCESSED             CreatePaymentOK1Status = "UNPROCESSED"
	CreatePaymentOK1StatusCHECKED                 CreatePaymentOK1Status = "CHECKED"
	CreatePaymentOK1StatusAUTHORIZED              CreatePaymentOK1Status = "AUTHORIZED"
	CreatePaymentOK1StatusAWAITINGCUSTOMERPAYMENT CreatePaymentOK1Status = "AWAITING_CUSTOMER_PAYMENT"
	CreatePaymentOK1StatusAWAITINGPAYMENTAPPROVAL CreatePaymentOK1Status = "AWAITING_PAYMENT_APPROVAL"
	CreatePaymentOK1StatusCAPTURED                CreatePaymentOK1Status = "CAPTURED"
	CreatePaymentOK1StatusCANCELED                CreatePaymentOK1Status = "CANCELED"
	CreatePaymentOK1StatusEXPIRED                 CreatePaymentOK1Status = "EXPIRED"
	CreatePaymentOK1StatusAUTHENTICATED           CreatePaymentOK1Status = "AUTHENTICATED"
	CreatePaymentOK1StatusFAILED                  CreatePaymentOK1Status = "FAILED"
)

// AllValues returns all CreatePaymentOK1Status values.
func (CreatePaymentOK1Status) AllValues() []CreatePaymentOK1Status {
	return []CreatePaymentOK1Status{
		CreatePaymentOK1StatusUNPROCESSED,
		CreatePaymentOK1StatusCHECKED,
		CreatePaymentOK1StatusAUTHORIZED,
		CreatePaymentOK1StatusAWAITINGCUSTOMERPAYMENT,
		CreatePaymentOK1StatusAWAITINGPAYMENTAPPROVAL,
		CreatePaymentOK1StatusCAPTURED,
		CreatePaymentOK1StatusCANCELED,
		CreatePaymentOK1StatusEXPIRED,
		CreatePaymentOK1StatusAUTHENTICATED,
		CreatePaymentOK1StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK1Status) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK1StatusUNPROCESSED:
		return []byte(s), nil
	case CreatePaymentOK1StatusCHECKED:
		return []byte(s), nil
	case CreatePaymentOK1StatusAUTHORIZED:
		return []byte(s), nil
	case CreatePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CreatePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CreatePaymentOK1StatusCAPTURED:
		return []byte(s), nil
	case CreatePaymentOK1StatusCANCELED:
		return []byte(s), nil
	case CreatePaymentOK1StatusEXPIRED:
		return []byte(s), nil
	case CreatePaymentOK1StatusAUTHENTICATED:
		return []byte(s), nil
	case CreatePaymentOK1StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK1Status) UnmarshalText(data []byte) error {
	switch CreatePaymentOK1Status(data) {
	case CreatePaymentOK1StatusUNPROCESSED:
		*s = CreatePaymentOK1StatusUNPROCESSED
		return nil
	case CreatePaymentOK1StatusCHECKED:
		*s = CreatePaymentOK1StatusCHECKED
		return nil
	case CreatePaymentOK1StatusAUTHORIZED:
		*s = CreatePaymentOK1StatusAUTHORIZED
		return nil
	case CreatePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CreatePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CreatePaymentOK1StatusCAPTURED:
		*s = CreatePaymentOK1StatusCAPTURED
		return nil
	case CreatePaymentOK1StatusCANCELED:
		*s = CreatePaymentOK1StatusCANCELED
		return nil
	case CreatePaymentOK1StatusEXPIRED:
		*s = CreatePaymentOK1StatusEXPIRED
		return nil
	case CreatePaymentOK1StatusAUTHENTICATED:
		*s = CreatePaymentOK1StatusAUTHENTICATED
		return nil
	case CreatePaymentOK1StatusFAILED:
		*s = CreatePaymentOK1StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CreatePaymentOK2 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType OptCreatePaymentOK2PayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるコンビニ店頭レジでの払い込みを待っている状態。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptCreatePaymentOK2Status `json:"status"`
	// 支払い期限日数\
	// この決済の支払い期限日数です。`"0"`日から`"14"`日まで指定できます。
	// -
	// `"0"`を指定すると決済を作成した当日に限り支払いが可能な決済が作成されます。
	// - デフォルト：`"2"`.
	PaymentTermDay OptNilString `json:"payment_term_day"`
	// 支払い期限日時\
	// コンビニ決済の支払い期限日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentTerm OptNilString `json:"payment_term"`
	// 支払日時\
	// コンビニ店頭で購入者が支払いを行った日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
	// バーコード画像 Base64エンコード済み画像データ\
	// コンビニ店頭での支払いに使用するバーコード画像のBase64エンコード済みデータです。このデータをデコードして表示します。\
	// バーコード画像はレギュレーションに従って表示する必要があります。詳細は[Docs > レギュレーションと注意事項](https://docs.fincode.jp/payment/konbini/note)から参照できます。.
	Barcode OptNilString `json:"barcode"`
	// バーコード画像 フォーマット\
	// 発行されたバーコード画像（`barcode`）のフォーマットです。.
	BarcodeFormat OptNilCreatePaymentOK2BarcodeFormat `json:"barcode_format"`
	// バーコード画像 横幅（px）\
	// 発行されたバーコード画像（`barcode`）の横幅です。.
	BarcodeWidth OptNilString `json:"barcode_width"`
	// バーコード画像 縦幅（px）\
	// 発行されたバーコード画像（`barcode`）の縦幅です。.
	BarcodeHeight OptNilString `json:"barcode_height"`
	// 多重支払フラグ\
	// この決済に対して複数回支払いが行われた場合`1`になります。
	// - `0`: 0回、または1回の支払いが行われた
	// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
	OverpaymentFlag OptCreatePaymentOK2OverpaymentFlag `json:"overpayment_flag"`
	// キャンセル後支払フラグ\
	// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
	// - `0`: キャンセル後支払は行われていない
	// - `1`: キャンセル後、購入者による支払いが行われた.
	CancelOverpaymentFlag OptCreatePaymentOK2CancelOverpaymentFlag `json:"cancel_overpayment_flag"`
	KonbiniCode           OptNilCreatePaymentOK2KonbiniCode        `json:"konbini_code"`
	// コンビニ店舗コード\
	// コンビニ事業者ごとに独自体系の店舗コードです。.
	KonbiniStoreCode jx.Raw       `json:"konbini_store_code"`
	DeviceName       OptNilString `json:"device_name"`
	// OSバージョン.
	OsVersion jx.Raw       `json:"os_version"`
	WinWidth  OptNilString `json:"win_width"`
	WinHeight OptNilString `json:"win_height"`
	// 画面横幅のDPI.
	Xdpi jx.Raw `json:"xdpi"`
	// 画面縦幅のDPI.
	Ydpi   jx.Raw                    `json:"ydpi"`
	Result OptCreatePaymentOK2Result `json:"result"`
	// 注文管理ID.
	OrderSerial OptNilString `json:"order_serial"`
	// 請求ID.
	InvoiceID OptNilString `json:"invoice_id"`
}

// GetShopID returns the value of ShopID.
func (s *CreatePaymentOK2) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CreatePaymentOK2) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CreatePaymentOK2) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentOK2) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentOK2) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CreatePaymentOK2) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentOK2) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentOK2) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentOK2) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CreatePaymentOK2) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CreatePaymentOK2) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CreatePaymentOK2) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CreatePaymentOK2) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CreatePaymentOK2) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreatePaymentOK2) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentOK2) GetPayType() OptCreatePaymentOK2PayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *CreatePaymentOK2) GetStatus() OptCreatePaymentOK2Status {
	return s.Status
}

// GetPaymentTermDay returns the value of PaymentTermDay.
func (s *CreatePaymentOK2) GetPaymentTermDay() OptNilString {
	return s.PaymentTermDay
}

// GetPaymentTerm returns the value of PaymentTerm.
func (s *CreatePaymentOK2) GetPaymentTerm() OptNilString {
	return s.PaymentTerm
}

// GetPaymentDate returns the value of PaymentDate.
func (s *CreatePaymentOK2) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// GetBarcode returns the value of Barcode.
func (s *CreatePaymentOK2) GetBarcode() OptNilString {
	return s.Barcode
}

// GetBarcodeFormat returns the value of BarcodeFormat.
func (s *CreatePaymentOK2) GetBarcodeFormat() OptNilCreatePaymentOK2BarcodeFormat {
	return s.BarcodeFormat
}

// GetBarcodeWidth returns the value of BarcodeWidth.
func (s *CreatePaymentOK2) GetBarcodeWidth() OptNilString {
	return s.BarcodeWidth
}

// GetBarcodeHeight returns the value of BarcodeHeight.
func (s *CreatePaymentOK2) GetBarcodeHeight() OptNilString {
	return s.BarcodeHeight
}

// GetOverpaymentFlag returns the value of OverpaymentFlag.
func (s *CreatePaymentOK2) GetOverpaymentFlag() OptCreatePaymentOK2OverpaymentFlag {
	return s.OverpaymentFlag
}

// GetCancelOverpaymentFlag returns the value of CancelOverpaymentFlag.
func (s *CreatePaymentOK2) GetCancelOverpaymentFlag() OptCreatePaymentOK2CancelOverpaymentFlag {
	return s.CancelOverpaymentFlag
}

// GetKonbiniCode returns the value of KonbiniCode.
func (s *CreatePaymentOK2) GetKonbiniCode() OptNilCreatePaymentOK2KonbiniCode {
	return s.KonbiniCode
}

// GetKonbiniStoreCode returns the value of KonbiniStoreCode.
func (s *CreatePaymentOK2) GetKonbiniStoreCode() jx.Raw {
	return s.KonbiniStoreCode
}

// GetDeviceName returns the value of DeviceName.
func (s *CreatePaymentOK2) GetDeviceName() OptNilString {
	return s.DeviceName
}

// GetOsVersion returns the value of OsVersion.
func (s *CreatePaymentOK2) GetOsVersion() jx.Raw {
	return s.OsVersion
}

// GetWinWidth returns the value of WinWidth.
func (s *CreatePaymentOK2) GetWinWidth() OptNilString {
	return s.WinWidth
}

// GetWinHeight returns the value of WinHeight.
func (s *CreatePaymentOK2) GetWinHeight() OptNilString {
	return s.WinHeight
}

// GetXdpi returns the value of Xdpi.
func (s *CreatePaymentOK2) GetXdpi() jx.Raw {
	return s.Xdpi
}

// GetYdpi returns the value of Ydpi.
func (s *CreatePaymentOK2) GetYdpi() jx.Raw {
	return s.Ydpi
}

// GetResult returns the value of Result.
func (s *CreatePaymentOK2) GetResult() OptCreatePaymentOK2Result {
	return s.Result
}

// GetOrderSerial returns the value of OrderSerial.
func (s *CreatePaymentOK2) GetOrderSerial() OptNilString {
	return s.OrderSerial
}

// GetInvoiceID returns the value of InvoiceID.
func (s *CreatePaymentOK2) GetInvoiceID() OptNilString {
	return s.InvoiceID
}

// SetShopID sets the value of ShopID.
func (s *CreatePaymentOK2) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CreatePaymentOK2) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CreatePaymentOK2) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentOK2) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentOK2) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CreatePaymentOK2) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentOK2) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentOK2) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentOK2) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CreatePaymentOK2) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CreatePaymentOK2) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CreatePaymentOK2) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CreatePaymentOK2) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CreatePaymentOK2) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreatePaymentOK2) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentOK2) SetPayType(val OptCreatePaymentOK2PayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *CreatePaymentOK2) SetStatus(val OptCreatePaymentOK2Status) {
	s.Status = val
}

// SetPaymentTermDay sets the value of PaymentTermDay.
func (s *CreatePaymentOK2) SetPaymentTermDay(val OptNilString) {
	s.PaymentTermDay = val
}

// SetPaymentTerm sets the value of PaymentTerm.
func (s *CreatePaymentOK2) SetPaymentTerm(val OptNilString) {
	s.PaymentTerm = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *CreatePaymentOK2) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// SetBarcode sets the value of Barcode.
func (s *CreatePaymentOK2) SetBarcode(val OptNilString) {
	s.Barcode = val
}

// SetBarcodeFormat sets the value of BarcodeFormat.
func (s *CreatePaymentOK2) SetBarcodeFormat(val OptNilCreatePaymentOK2BarcodeFormat) {
	s.BarcodeFormat = val
}

// SetBarcodeWidth sets the value of BarcodeWidth.
func (s *CreatePaymentOK2) SetBarcodeWidth(val OptNilString) {
	s.BarcodeWidth = val
}

// SetBarcodeHeight sets the value of BarcodeHeight.
func (s *CreatePaymentOK2) SetBarcodeHeight(val OptNilString) {
	s.BarcodeHeight = val
}

// SetOverpaymentFlag sets the value of OverpaymentFlag.
func (s *CreatePaymentOK2) SetOverpaymentFlag(val OptCreatePaymentOK2OverpaymentFlag) {
	s.OverpaymentFlag = val
}

// SetCancelOverpaymentFlag sets the value of CancelOverpaymentFlag.
func (s *CreatePaymentOK2) SetCancelOverpaymentFlag(val OptCreatePaymentOK2CancelOverpaymentFlag) {
	s.CancelOverpaymentFlag = val
}

// SetKonbiniCode sets the value of KonbiniCode.
func (s *CreatePaymentOK2) SetKonbiniCode(val OptNilCreatePaymentOK2KonbiniCode) {
	s.KonbiniCode = val
}

// SetKonbiniStoreCode sets the value of KonbiniStoreCode.
func (s *CreatePaymentOK2) SetKonbiniStoreCode(val jx.Raw) {
	s.KonbiniStoreCode = val
}

// SetDeviceName sets the value of DeviceName.
func (s *CreatePaymentOK2) SetDeviceName(val OptNilString) {
	s.DeviceName = val
}

// SetOsVersion sets the value of OsVersion.
func (s *CreatePaymentOK2) SetOsVersion(val jx.Raw) {
	s.OsVersion = val
}

// SetWinWidth sets the value of WinWidth.
func (s *CreatePaymentOK2) SetWinWidth(val OptNilString) {
	s.WinWidth = val
}

// SetWinHeight sets the value of WinHeight.
func (s *CreatePaymentOK2) SetWinHeight(val OptNilString) {
	s.WinHeight = val
}

// SetXdpi sets the value of Xdpi.
func (s *CreatePaymentOK2) SetXdpi(val jx.Raw) {
	s.Xdpi = val
}

// SetYdpi sets the value of Ydpi.
func (s *CreatePaymentOK2) SetYdpi(val jx.Raw) {
	s.Ydpi = val
}

// SetResult sets the value of Result.
func (s *CreatePaymentOK2) SetResult(val OptCreatePaymentOK2Result) {
	s.Result = val
}

// SetOrderSerial sets the value of OrderSerial.
func (s *CreatePaymentOK2) SetOrderSerial(val OptNilString) {
	s.OrderSerial = val
}

// SetInvoiceID sets the value of InvoiceID.
func (s *CreatePaymentOK2) SetInvoiceID(val OptNilString) {
	s.InvoiceID = val
}

// バーコード画像 フォーマット\
// 発行されたバーコード画像（`barcode`）のフォーマットです。.
type CreatePaymentOK2BarcodeFormat string

const (
	CreatePaymentOK2BarcodeFormatJPG CreatePaymentOK2BarcodeFormat = "jpg"
	CreatePaymentOK2BarcodeFormatPNG CreatePaymentOK2BarcodeFormat = "png"
	CreatePaymentOK2BarcodeFormatBmp CreatePaymentOK2BarcodeFormat = "bmp"
)

// AllValues returns all CreatePaymentOK2BarcodeFormat values.
func (CreatePaymentOK2BarcodeFormat) AllValues() []CreatePaymentOK2BarcodeFormat {
	return []CreatePaymentOK2BarcodeFormat{
		CreatePaymentOK2BarcodeFormatJPG,
		CreatePaymentOK2BarcodeFormatPNG,
		CreatePaymentOK2BarcodeFormatBmp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK2BarcodeFormat) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK2BarcodeFormatJPG:
		return []byte(s), nil
	case CreatePaymentOK2BarcodeFormatPNG:
		return []byte(s), nil
	case CreatePaymentOK2BarcodeFormatBmp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK2BarcodeFormat) UnmarshalText(data []byte) error {
	switch CreatePaymentOK2BarcodeFormat(data) {
	case CreatePaymentOK2BarcodeFormatJPG:
		*s = CreatePaymentOK2BarcodeFormatJPG
		return nil
	case CreatePaymentOK2BarcodeFormatPNG:
		*s = CreatePaymentOK2BarcodeFormatPNG
		return nil
	case CreatePaymentOK2BarcodeFormatBmp:
		*s = CreatePaymentOK2BarcodeFormatBmp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// キャンセル後支払フラグ\
// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
// - `0`: キャンセル後支払は行われていない
// - `1`: キャンセル後、購入者による支払いが行われた.
type CreatePaymentOK2CancelOverpaymentFlag string

const (
	CreatePaymentOK2CancelOverpaymentFlag0 CreatePaymentOK2CancelOverpaymentFlag = "0"
	CreatePaymentOK2CancelOverpaymentFlag1 CreatePaymentOK2CancelOverpaymentFlag = "1"
)

// AllValues returns all CreatePaymentOK2CancelOverpaymentFlag values.
func (CreatePaymentOK2CancelOverpaymentFlag) AllValues() []CreatePaymentOK2CancelOverpaymentFlag {
	return []CreatePaymentOK2CancelOverpaymentFlag{
		CreatePaymentOK2CancelOverpaymentFlag0,
		CreatePaymentOK2CancelOverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK2CancelOverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK2CancelOverpaymentFlag0:
		return []byte(s), nil
	case CreatePaymentOK2CancelOverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK2CancelOverpaymentFlag) UnmarshalText(data []byte) error {
	switch CreatePaymentOK2CancelOverpaymentFlag(data) {
	case CreatePaymentOK2CancelOverpaymentFlag0:
		*s = CreatePaymentOK2CancelOverpaymentFlag0
		return nil
	case CreatePaymentOK2CancelOverpaymentFlag1:
		*s = CreatePaymentOK2CancelOverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者コード\
// 購入者が払い込みを行ったコンビニ事業者をあらわすコード。
// - `00010`: セブン-イレブン
// - `00020`: ローソン
// - `00030`: ファミリーマート
// - `00080`: ミニストップ
// - `00760`: セイコーマート.
type CreatePaymentOK2KonbiniCode string

const (
	CreatePaymentOK2KonbiniCode00010 CreatePaymentOK2KonbiniCode = "00010"
	CreatePaymentOK2KonbiniCode00020 CreatePaymentOK2KonbiniCode = "00020"
	CreatePaymentOK2KonbiniCode00030 CreatePaymentOK2KonbiniCode = "00030"
	CreatePaymentOK2KonbiniCode00080 CreatePaymentOK2KonbiniCode = "00080"
	CreatePaymentOK2KonbiniCode00760 CreatePaymentOK2KonbiniCode = "00760"
)

// AllValues returns all CreatePaymentOK2KonbiniCode values.
func (CreatePaymentOK2KonbiniCode) AllValues() []CreatePaymentOK2KonbiniCode {
	return []CreatePaymentOK2KonbiniCode{
		CreatePaymentOK2KonbiniCode00010,
		CreatePaymentOK2KonbiniCode00020,
		CreatePaymentOK2KonbiniCode00030,
		CreatePaymentOK2KonbiniCode00080,
		CreatePaymentOK2KonbiniCode00760,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK2KonbiniCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK2KonbiniCode00010:
		return []byte(s), nil
	case CreatePaymentOK2KonbiniCode00020:
		return []byte(s), nil
	case CreatePaymentOK2KonbiniCode00030:
		return []byte(s), nil
	case CreatePaymentOK2KonbiniCode00080:
		return []byte(s), nil
	case CreatePaymentOK2KonbiniCode00760:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK2KonbiniCode) UnmarshalText(data []byte) error {
	switch CreatePaymentOK2KonbiniCode(data) {
	case CreatePaymentOK2KonbiniCode00010:
		*s = CreatePaymentOK2KonbiniCode00010
		return nil
	case CreatePaymentOK2KonbiniCode00020:
		*s = CreatePaymentOK2KonbiniCode00020
		return nil
	case CreatePaymentOK2KonbiniCode00030:
		*s = CreatePaymentOK2KonbiniCode00030
		return nil
	case CreatePaymentOK2KonbiniCode00080:
		*s = CreatePaymentOK2KonbiniCode00080
		return nil
	case CreatePaymentOK2KonbiniCode00760:
		*s = CreatePaymentOK2KonbiniCode00760
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 多重支払フラグ\
// この決済に対して複数回支払いが行われた場合`1`になります。
// - `0`: 0回、または1回の支払いが行われた
// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
type CreatePaymentOK2OverpaymentFlag string

const (
	CreatePaymentOK2OverpaymentFlag0 CreatePaymentOK2OverpaymentFlag = "0"
	CreatePaymentOK2OverpaymentFlag1 CreatePaymentOK2OverpaymentFlag = "1"
)

// AllValues returns all CreatePaymentOK2OverpaymentFlag values.
func (CreatePaymentOK2OverpaymentFlag) AllValues() []CreatePaymentOK2OverpaymentFlag {
	return []CreatePaymentOK2OverpaymentFlag{
		CreatePaymentOK2OverpaymentFlag0,
		CreatePaymentOK2OverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK2OverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK2OverpaymentFlag0:
		return []byte(s), nil
	case CreatePaymentOK2OverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK2OverpaymentFlag) UnmarshalText(data []byte) error {
	switch CreatePaymentOK2OverpaymentFlag(data) {
	case CreatePaymentOK2OverpaymentFlag0:
		*s = CreatePaymentOK2OverpaymentFlag0
		return nil
	case CreatePaymentOK2OverpaymentFlag1:
		*s = CreatePaymentOK2OverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentOK2PayType string

const (
	CreatePaymentOK2PayTypeCard           CreatePaymentOK2PayType = "Card"
	CreatePaymentOK2PayTypeKonbini        CreatePaymentOK2PayType = "Konbini"
	CreatePaymentOK2PayTypePaypay         CreatePaymentOK2PayType = "Paypay"
	CreatePaymentOK2PayTypeApplepay       CreatePaymentOK2PayType = "Applepay"
	CreatePaymentOK2PayTypeDirectdebit    CreatePaymentOK2PayType = "Directdebit"
	CreatePaymentOK2PayTypeVirtualaccount CreatePaymentOK2PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentOK2PayType values.
func (CreatePaymentOK2PayType) AllValues() []CreatePaymentOK2PayType {
	return []CreatePaymentOK2PayType{
		CreatePaymentOK2PayTypeCard,
		CreatePaymentOK2PayTypeKonbini,
		CreatePaymentOK2PayTypePaypay,
		CreatePaymentOK2PayTypeApplepay,
		CreatePaymentOK2PayTypeDirectdebit,
		CreatePaymentOK2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK2PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK2PayTypeCard:
		return []byte(s), nil
	case CreatePaymentOK2PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentOK2PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentOK2PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentOK2PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentOK2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK2PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentOK2PayType(data) {
	case CreatePaymentOK2PayTypeCard:
		*s = CreatePaymentOK2PayTypeCard
		return nil
	case CreatePaymentOK2PayTypeKonbini:
		*s = CreatePaymentOK2PayTypeKonbini
		return nil
	case CreatePaymentOK2PayTypePaypay:
		*s = CreatePaymentOK2PayTypePaypay
		return nil
	case CreatePaymentOK2PayTypeApplepay:
		*s = CreatePaymentOK2PayTypeApplepay
		return nil
	case CreatePaymentOK2PayTypeDirectdebit:
		*s = CreatePaymentOK2PayTypeDirectdebit
		return nil
	case CreatePaymentOK2PayTypeVirtualaccount:
		*s = CreatePaymentOK2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者の決済処理結果コード
// - `000`: 正常終了
// - `001`: 認証失敗
// - `002`:
// 注文登録には成功したものの端末情報が確認できなかったためバーコード画像の発行なし
// - `003`: 必須項目の不備によるエラー
// - `004`: バーコードデータ内の識別子が不正
// - `005`: バーコードデータ内のメーカーコードが不正
// - `006`: バーコードデータ内の企業識別コードが不正
// - `007`: 支払い期限日時を超過している、または形式が不正
// - `008`: 支払い金額が上限もしくは下限を超えている
// - `009`: 全体チェックデジットが不正
// - `010`: その他の理由によりバーコード画像の発行に失敗
// - `011`: 印紙フラグ（内部データ）不正
// - `012`: 端末情報の指定値の桁数不正
// - `013`: 既に同一のバーコードが登録済み
// - `900`: 予期せぬエラー.
type CreatePaymentOK2Result string

const (
	CreatePaymentOK2Result000 CreatePaymentOK2Result = "000"
	CreatePaymentOK2Result001 CreatePaymentOK2Result = "001"
	CreatePaymentOK2Result002 CreatePaymentOK2Result = "002"
	CreatePaymentOK2Result003 CreatePaymentOK2Result = "003"
	CreatePaymentOK2Result004 CreatePaymentOK2Result = "004"
	CreatePaymentOK2Result005 CreatePaymentOK2Result = "005"
	CreatePaymentOK2Result006 CreatePaymentOK2Result = "006"
	CreatePaymentOK2Result007 CreatePaymentOK2Result = "007"
	CreatePaymentOK2Result008 CreatePaymentOK2Result = "008"
	CreatePaymentOK2Result009 CreatePaymentOK2Result = "009"
	CreatePaymentOK2Result010 CreatePaymentOK2Result = "010"
	CreatePaymentOK2Result011 CreatePaymentOK2Result = "011"
	CreatePaymentOK2Result012 CreatePaymentOK2Result = "012"
	CreatePaymentOK2Result013 CreatePaymentOK2Result = "013"
	CreatePaymentOK2Result900 CreatePaymentOK2Result = "900"
)

// AllValues returns all CreatePaymentOK2Result values.
func (CreatePaymentOK2Result) AllValues() []CreatePaymentOK2Result {
	return []CreatePaymentOK2Result{
		CreatePaymentOK2Result000,
		CreatePaymentOK2Result001,
		CreatePaymentOK2Result002,
		CreatePaymentOK2Result003,
		CreatePaymentOK2Result004,
		CreatePaymentOK2Result005,
		CreatePaymentOK2Result006,
		CreatePaymentOK2Result007,
		CreatePaymentOK2Result008,
		CreatePaymentOK2Result009,
		CreatePaymentOK2Result010,
		CreatePaymentOK2Result011,
		CreatePaymentOK2Result012,
		CreatePaymentOK2Result013,
		CreatePaymentOK2Result900,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK2Result) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK2Result000:
		return []byte(s), nil
	case CreatePaymentOK2Result001:
		return []byte(s), nil
	case CreatePaymentOK2Result002:
		return []byte(s), nil
	case CreatePaymentOK2Result003:
		return []byte(s), nil
	case CreatePaymentOK2Result004:
		return []byte(s), nil
	case CreatePaymentOK2Result005:
		return []byte(s), nil
	case CreatePaymentOK2Result006:
		return []byte(s), nil
	case CreatePaymentOK2Result007:
		return []byte(s), nil
	case CreatePaymentOK2Result008:
		return []byte(s), nil
	case CreatePaymentOK2Result009:
		return []byte(s), nil
	case CreatePaymentOK2Result010:
		return []byte(s), nil
	case CreatePaymentOK2Result011:
		return []byte(s), nil
	case CreatePaymentOK2Result012:
		return []byte(s), nil
	case CreatePaymentOK2Result013:
		return []byte(s), nil
	case CreatePaymentOK2Result900:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK2Result) UnmarshalText(data []byte) error {
	switch CreatePaymentOK2Result(data) {
	case CreatePaymentOK2Result000:
		*s = CreatePaymentOK2Result000
		return nil
	case CreatePaymentOK2Result001:
		*s = CreatePaymentOK2Result001
		return nil
	case CreatePaymentOK2Result002:
		*s = CreatePaymentOK2Result002
		return nil
	case CreatePaymentOK2Result003:
		*s = CreatePaymentOK2Result003
		return nil
	case CreatePaymentOK2Result004:
		*s = CreatePaymentOK2Result004
		return nil
	case CreatePaymentOK2Result005:
		*s = CreatePaymentOK2Result005
		return nil
	case CreatePaymentOK2Result006:
		*s = CreatePaymentOK2Result006
		return nil
	case CreatePaymentOK2Result007:
		*s = CreatePaymentOK2Result007
		return nil
	case CreatePaymentOK2Result008:
		*s = CreatePaymentOK2Result008
		return nil
	case CreatePaymentOK2Result009:
		*s = CreatePaymentOK2Result009
		return nil
	case CreatePaymentOK2Result010:
		*s = CreatePaymentOK2Result010
		return nil
	case CreatePaymentOK2Result011:
		*s = CreatePaymentOK2Result011
		return nil
	case CreatePaymentOK2Result012:
		*s = CreatePaymentOK2Result012
		return nil
	case CreatePaymentOK2Result013:
		*s = CreatePaymentOK2Result013
		return nil
	case CreatePaymentOK2Result900:
		*s = CreatePaymentOK2Result900
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CreatePaymentOK2Status string

const (
	CreatePaymentOK2StatusUNPROCESSED             CreatePaymentOK2Status = "UNPROCESSED"
	CreatePaymentOK2StatusCHECKED                 CreatePaymentOK2Status = "CHECKED"
	CreatePaymentOK2StatusAUTHORIZED              CreatePaymentOK2Status = "AUTHORIZED"
	CreatePaymentOK2StatusAWAITINGCUSTOMERPAYMENT CreatePaymentOK2Status = "AWAITING_CUSTOMER_PAYMENT"
	CreatePaymentOK2StatusAWAITINGPAYMENTAPPROVAL CreatePaymentOK2Status = "AWAITING_PAYMENT_APPROVAL"
	CreatePaymentOK2StatusCAPTURED                CreatePaymentOK2Status = "CAPTURED"
	CreatePaymentOK2StatusCANCELED                CreatePaymentOK2Status = "CANCELED"
	CreatePaymentOK2StatusEXPIRED                 CreatePaymentOK2Status = "EXPIRED"
	CreatePaymentOK2StatusAUTHENTICATED           CreatePaymentOK2Status = "AUTHENTICATED"
	CreatePaymentOK2StatusFAILED                  CreatePaymentOK2Status = "FAILED"
)

// AllValues returns all CreatePaymentOK2Status values.
func (CreatePaymentOK2Status) AllValues() []CreatePaymentOK2Status {
	return []CreatePaymentOK2Status{
		CreatePaymentOK2StatusUNPROCESSED,
		CreatePaymentOK2StatusCHECKED,
		CreatePaymentOK2StatusAUTHORIZED,
		CreatePaymentOK2StatusAWAITINGCUSTOMERPAYMENT,
		CreatePaymentOK2StatusAWAITINGPAYMENTAPPROVAL,
		CreatePaymentOK2StatusCAPTURED,
		CreatePaymentOK2StatusCANCELED,
		CreatePaymentOK2StatusEXPIRED,
		CreatePaymentOK2StatusAUTHENTICATED,
		CreatePaymentOK2StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK2Status) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK2StatusUNPROCESSED:
		return []byte(s), nil
	case CreatePaymentOK2StatusCHECKED:
		return []byte(s), nil
	case CreatePaymentOK2StatusAUTHORIZED:
		return []byte(s), nil
	case CreatePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CreatePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CreatePaymentOK2StatusCAPTURED:
		return []byte(s), nil
	case CreatePaymentOK2StatusCANCELED:
		return []byte(s), nil
	case CreatePaymentOK2StatusEXPIRED:
		return []byte(s), nil
	case CreatePaymentOK2StatusAUTHENTICATED:
		return []byte(s), nil
	case CreatePaymentOK2StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK2Status) UnmarshalText(data []byte) error {
	switch CreatePaymentOK2Status(data) {
	case CreatePaymentOK2StatusUNPROCESSED:
		*s = CreatePaymentOK2StatusUNPROCESSED
		return nil
	case CreatePaymentOK2StatusCHECKED:
		*s = CreatePaymentOK2StatusCHECKED
		return nil
	case CreatePaymentOK2StatusAUTHORIZED:
		*s = CreatePaymentOK2StatusAUTHORIZED
		return nil
	case CreatePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CreatePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CreatePaymentOK2StatusCAPTURED:
		*s = CreatePaymentOK2StatusCAPTURED
		return nil
	case CreatePaymentOK2StatusCANCELED:
		*s = CreatePaymentOK2StatusCANCELED
		return nil
	case CreatePaymentOK2StatusEXPIRED:
		*s = CreatePaymentOK2StatusEXPIRED
		return nil
	case CreatePaymentOK2StatusAUTHENTICATED:
		*s = CreatePaymentOK2StatusAUTHENTICATED
		return nil
	case CreatePaymentOK2StatusFAILED:
		*s = CreatePaymentOK2StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CreatePaymentOK3 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType OptCreatePaymentOK3PayType `json:"pay_type"`
	JobCode OptCreatePaymentOK3JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるPayPay上での取引承認を待っている状態。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptCreatePaymentOK3Status `json:"status"`
	// PayPay支払いURL\
	// 購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します。.
	CodeURL OptNilString `json:"code_url"`
	// 支払期限\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	CodeExpiryDate OptNilString `json:"code_expiry_date"`
	// リダイレクトURL\
	// 決済が完了した際にPayPayからリダイレクト先URL。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクト先種別\
	// `redirect_url`の種別
	// - `1`： Webページ／Webアプリケーション
	// - `2`： ネイティブアプリ.
	RedirectType OptNilCreatePaymentOK3RedirectType `json:"redirect_type"`
	// 仮売上期限\
	// 形式： `yyyy/MM/dd`.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 注文内容の説明\
	// 購入者のPayPayアプリ上で表示される注文内容の説明。.
	OrderDescription OptNilString `json:"order_description"`
	// 売上確定の説明\
	// 購入者のPayPayアプリ上で表示される売上確定の説明。.
	CaptureDescription OptNilString `json:"capture_description"`
	// 金額変更の説明\
	// 購入者のPayPayアプリ上で表示される金額変更の説明。.
	UpdateDescription OptNilString `json:"update_description"`
	// キャンセルの説明\
	// 購入者のPayPayアプリ上で表示されるキャンセルの説明。.
	CancelDescription OptNilString `json:"cancel_description"`
	// 店舗ID\
	// PayPayによって発行された店舗ID。.
	StoreID OptNilString `json:"store_id"`
	// PayPayの支払いコードID.
	CodeID OptNilString `json:"code_id"`
	// PayPay 決済ID.
	PaymentID OptNilString `json:"payment_id"`
	// PayPay処理結果コード.
	PaypayResultCode OptNilString `json:"paypay_result_code"`
	// PayPay トランザクションID.
	MerchantPaymentID OptNilString `json:"merchant_payment_id"`
	// PayPay 売上確定ID.
	MerchantCaptureID OptNilString `json:"merchant_capture_id"`
	// PayPay 金額変更ID.
	MerchantUpdateID OptNilString `json:"merchant_update_id"`
	// PayPay キャンセルID.
	MerchantRevertID OptNilString `json:"merchant_revert_id"`
	// PayPay 返金ID.
	MerchantRefundID OptNilString `json:"merchant_refund_id"`
	// 支払日時\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *CreatePaymentOK3) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CreatePaymentOK3) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CreatePaymentOK3) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentOK3) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentOK3) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CreatePaymentOK3) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentOK3) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentOK3) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentOK3) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CreatePaymentOK3) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CreatePaymentOK3) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CreatePaymentOK3) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CreatePaymentOK3) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CreatePaymentOK3) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreatePaymentOK3) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentOK3) GetPayType() OptCreatePaymentOK3PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CreatePaymentOK3) GetJobCode() OptCreatePaymentOK3JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *CreatePaymentOK3) GetStatus() OptCreatePaymentOK3Status {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *CreatePaymentOK3) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *CreatePaymentOK3) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *CreatePaymentOK3) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *CreatePaymentOK3) GetRedirectType() OptNilCreatePaymentOK3RedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *CreatePaymentOK3) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *CreatePaymentOK3) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *CreatePaymentOK3) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *CreatePaymentOK3) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *CreatePaymentOK3) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *CreatePaymentOK3) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *CreatePaymentOK3) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *CreatePaymentOK3) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *CreatePaymentOK3) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *CreatePaymentOK3) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *CreatePaymentOK3) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *CreatePaymentOK3) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRevertID returns the value of MerchantRevertID.
func (s *CreatePaymentOK3) GetMerchantRevertID() OptNilString {
	return s.MerchantRevertID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *CreatePaymentOK3) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *CreatePaymentOK3) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *CreatePaymentOK3) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CreatePaymentOK3) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CreatePaymentOK3) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentOK3) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentOK3) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CreatePaymentOK3) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentOK3) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentOK3) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentOK3) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CreatePaymentOK3) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CreatePaymentOK3) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CreatePaymentOK3) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CreatePaymentOK3) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CreatePaymentOK3) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreatePaymentOK3) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentOK3) SetPayType(val OptCreatePaymentOK3PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CreatePaymentOK3) SetJobCode(val OptCreatePaymentOK3JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *CreatePaymentOK3) SetStatus(val OptCreatePaymentOK3Status) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *CreatePaymentOK3) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *CreatePaymentOK3) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *CreatePaymentOK3) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *CreatePaymentOK3) SetRedirectType(val OptNilCreatePaymentOK3RedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *CreatePaymentOK3) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *CreatePaymentOK3) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *CreatePaymentOK3) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *CreatePaymentOK3) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *CreatePaymentOK3) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *CreatePaymentOK3) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *CreatePaymentOK3) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *CreatePaymentOK3) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *CreatePaymentOK3) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *CreatePaymentOK3) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *CreatePaymentOK3) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *CreatePaymentOK3) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRevertID sets the value of MerchantRevertID.
func (s *CreatePaymentOK3) SetMerchantRevertID(val OptNilString) {
	s.MerchantRevertID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *CreatePaymentOK3) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *CreatePaymentOK3) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CreatePaymentOK3JobCode string

const (
	CreatePaymentOK3JobCodeAUTH    CreatePaymentOK3JobCode = "AUTH"
	CreatePaymentOK3JobCodeCAPTURE CreatePaymentOK3JobCode = "CAPTURE"
)

// AllValues returns all CreatePaymentOK3JobCode values.
func (CreatePaymentOK3JobCode) AllValues() []CreatePaymentOK3JobCode {
	return []CreatePaymentOK3JobCode{
		CreatePaymentOK3JobCodeAUTH,
		CreatePaymentOK3JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK3JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK3JobCodeAUTH:
		return []byte(s), nil
	case CreatePaymentOK3JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK3JobCode) UnmarshalText(data []byte) error {
	switch CreatePaymentOK3JobCode(data) {
	case CreatePaymentOK3JobCodeAUTH:
		*s = CreatePaymentOK3JobCodeAUTH
		return nil
	case CreatePaymentOK3JobCodeCAPTURE:
		*s = CreatePaymentOK3JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentOK3PayType string

const (
	CreatePaymentOK3PayTypeCard           CreatePaymentOK3PayType = "Card"
	CreatePaymentOK3PayTypeKonbini        CreatePaymentOK3PayType = "Konbini"
	CreatePaymentOK3PayTypePaypay         CreatePaymentOK3PayType = "Paypay"
	CreatePaymentOK3PayTypeApplepay       CreatePaymentOK3PayType = "Applepay"
	CreatePaymentOK3PayTypeDirectdebit    CreatePaymentOK3PayType = "Directdebit"
	CreatePaymentOK3PayTypeVirtualaccount CreatePaymentOK3PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentOK3PayType values.
func (CreatePaymentOK3PayType) AllValues() []CreatePaymentOK3PayType {
	return []CreatePaymentOK3PayType{
		CreatePaymentOK3PayTypeCard,
		CreatePaymentOK3PayTypeKonbini,
		CreatePaymentOK3PayTypePaypay,
		CreatePaymentOK3PayTypeApplepay,
		CreatePaymentOK3PayTypeDirectdebit,
		CreatePaymentOK3PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK3PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK3PayTypeCard:
		return []byte(s), nil
	case CreatePaymentOK3PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentOK3PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentOK3PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentOK3PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentOK3PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK3PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentOK3PayType(data) {
	case CreatePaymentOK3PayTypeCard:
		*s = CreatePaymentOK3PayTypeCard
		return nil
	case CreatePaymentOK3PayTypeKonbini:
		*s = CreatePaymentOK3PayTypeKonbini
		return nil
	case CreatePaymentOK3PayTypePaypay:
		*s = CreatePaymentOK3PayTypePaypay
		return nil
	case CreatePaymentOK3PayTypeApplepay:
		*s = CreatePaymentOK3PayTypeApplepay
		return nil
	case CreatePaymentOK3PayTypeDirectdebit:
		*s = CreatePaymentOK3PayTypeDirectdebit
		return nil
	case CreatePaymentOK3PayTypeVirtualaccount:
		*s = CreatePaymentOK3PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクト先種別\
// `redirect_url`の種別
// - `1`： Webページ／Webアプリケーション
// - `2`： ネイティブアプリ.
type CreatePaymentOK3RedirectType string

const (
	CreatePaymentOK3RedirectType1 CreatePaymentOK3RedirectType = "1"
	CreatePaymentOK3RedirectType2 CreatePaymentOK3RedirectType = "2"
)

// AllValues returns all CreatePaymentOK3RedirectType values.
func (CreatePaymentOK3RedirectType) AllValues() []CreatePaymentOK3RedirectType {
	return []CreatePaymentOK3RedirectType{
		CreatePaymentOK3RedirectType1,
		CreatePaymentOK3RedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK3RedirectType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK3RedirectType1:
		return []byte(s), nil
	case CreatePaymentOK3RedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK3RedirectType) UnmarshalText(data []byte) error {
	switch CreatePaymentOK3RedirectType(data) {
	case CreatePaymentOK3RedirectType1:
		*s = CreatePaymentOK3RedirectType1
		return nil
	case CreatePaymentOK3RedirectType2:
		*s = CreatePaymentOK3RedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CreatePaymentOK3Status string

const (
	CreatePaymentOK3StatusUNPROCESSED             CreatePaymentOK3Status = "UNPROCESSED"
	CreatePaymentOK3StatusCHECKED                 CreatePaymentOK3Status = "CHECKED"
	CreatePaymentOK3StatusAUTHORIZED              CreatePaymentOK3Status = "AUTHORIZED"
	CreatePaymentOK3StatusAWAITINGCUSTOMERPAYMENT CreatePaymentOK3Status = "AWAITING_CUSTOMER_PAYMENT"
	CreatePaymentOK3StatusAWAITINGPAYMENTAPPROVAL CreatePaymentOK3Status = "AWAITING_PAYMENT_APPROVAL"
	CreatePaymentOK3StatusCAPTURED                CreatePaymentOK3Status = "CAPTURED"
	CreatePaymentOK3StatusCANCELED                CreatePaymentOK3Status = "CANCELED"
	CreatePaymentOK3StatusEXPIRED                 CreatePaymentOK3Status = "EXPIRED"
	CreatePaymentOK3StatusAUTHENTICATED           CreatePaymentOK3Status = "AUTHENTICATED"
	CreatePaymentOK3StatusFAILED                  CreatePaymentOK3Status = "FAILED"
)

// AllValues returns all CreatePaymentOK3Status values.
func (CreatePaymentOK3Status) AllValues() []CreatePaymentOK3Status {
	return []CreatePaymentOK3Status{
		CreatePaymentOK3StatusUNPROCESSED,
		CreatePaymentOK3StatusCHECKED,
		CreatePaymentOK3StatusAUTHORIZED,
		CreatePaymentOK3StatusAWAITINGCUSTOMERPAYMENT,
		CreatePaymentOK3StatusAWAITINGPAYMENTAPPROVAL,
		CreatePaymentOK3StatusCAPTURED,
		CreatePaymentOK3StatusCANCELED,
		CreatePaymentOK3StatusEXPIRED,
		CreatePaymentOK3StatusAUTHENTICATED,
		CreatePaymentOK3StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK3Status) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK3StatusUNPROCESSED:
		return []byte(s), nil
	case CreatePaymentOK3StatusCHECKED:
		return []byte(s), nil
	case CreatePaymentOK3StatusAUTHORIZED:
		return []byte(s), nil
	case CreatePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CreatePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CreatePaymentOK3StatusCAPTURED:
		return []byte(s), nil
	case CreatePaymentOK3StatusCANCELED:
		return []byte(s), nil
	case CreatePaymentOK3StatusEXPIRED:
		return []byte(s), nil
	case CreatePaymentOK3StatusAUTHENTICATED:
		return []byte(s), nil
	case CreatePaymentOK3StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK3Status) UnmarshalText(data []byte) error {
	switch CreatePaymentOK3Status(data) {
	case CreatePaymentOK3StatusUNPROCESSED:
		*s = CreatePaymentOK3StatusUNPROCESSED
		return nil
	case CreatePaymentOK3StatusCHECKED:
		*s = CreatePaymentOK3StatusCHECKED
		return nil
	case CreatePaymentOK3StatusAUTHORIZED:
		*s = CreatePaymentOK3StatusAUTHORIZED
		return nil
	case CreatePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK3StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CreatePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK3StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CreatePaymentOK3StatusCAPTURED:
		*s = CreatePaymentOK3StatusCAPTURED
		return nil
	case CreatePaymentOK3StatusCANCELED:
		*s = CreatePaymentOK3StatusCANCELED
		return nil
	case CreatePaymentOK3StatusEXPIRED:
		*s = CreatePaymentOK3StatusEXPIRED
		return nil
	case CreatePaymentOK3StatusAUTHENTICATED:
		*s = CreatePaymentOK3StatusAUTHENTICATED
		return nil
	case CreatePaymentOK3StatusFAILED:
		*s = CreatePaymentOK3StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CreatePaymentOK4 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType OptCreatePaymentOK4PayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">振替はまだ実行されていません。</span>
	// - `AWAITING_PAYMENT_APPROVAL`: 決済処理待ち<br /><span
	// class="smallText">fincodeおよび金融機関による振替処理を待っています。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">振替が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この振替はキャンセルされました。</span>
	// - `FAILED`: 請求失敗<br /><span
	// class="smallText">何らかの理由により振替に失敗しました。</span>.
	Status     OptCreatePaymentOK4Status        `json:"status"`
	ResultCode OptNilCreatePaymentOK4ResultCode `json:"result_code"`
	// 振替指定日\
	// 振替を行う日を指定します。下記の日付を指定できます。
	// - `yyyy/MM/05`: 5日
	// - `yyyy/MM/06`: 6日
	// - `yyyy/MM/23`: 23日
	// - `yyyy/MM/27`: 27日
	// 形式： `yyyy/MM/dd`\
	// 実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替日」の列で確認できます。.
	TargetDate OptNilString `json:"target_date"`
	// 引き落とし日\
	// 実際に購入者の口座から引き落としが行われた実績日です。\
	// \
	// 形式： `yyyy/MM/dd`.
	WithdrawalDate OptNilString `json:"withdrawal_date"`
	// 請求依頼受付期間 終了日\
	// 振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。.
	RequestAcceptEndDate OptNilString `json:"request_accept_end_date"`
	// 請求結果反映 予定日\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。.
	TransferReturnDate OptNilString `json:"transfer_return_date"`
	// 決済手段ID\
	// この決済に使用された決済手段のIDです。.
	PaymentMethodID OptNilString `json:"payment_method_id"`
	// 金融機関コード\
	// fincodeの口座振替に対応している金融機関のコードのリストは[Docs >
	// 利用可能な金融機関（口座振替）](https://docs.fincode.
	// jp/payment/directdebit/restriction)で参照できます。.
	BankCode OptNilString `json:"bank_code"`
	// 金融機関名.
	BankName OptNilString `json:"bank_name"`
	// 支店コード.
	BranchCode OptNilString `json:"branch_code"`
	// 支店名.
	BranchName OptNilString `json:"branch_name"`
	// ご利用明細表示内容
	// -
	// フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
	// - デフォルト： `ショップ名カナの先頭9文字`
	// ※ 利用可能な記号
	// - 半角：`.`、`(`、`)`、`–`
	// - 全角：`．`、`（`、`）`、`ー`.
	Remarks OptNilString `json:"remarks"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString `json:"subscription_id"`
}

// GetShopID returns the value of ShopID.
func (s *CreatePaymentOK4) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *CreatePaymentOK4) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *CreatePaymentOK4) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentOK4) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentOK4) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *CreatePaymentOK4) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentOK4) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentOK4) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentOK4) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *CreatePaymentOK4) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *CreatePaymentOK4) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *CreatePaymentOK4) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *CreatePaymentOK4) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *CreatePaymentOK4) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CreatePaymentOK4) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentOK4) GetPayType() OptCreatePaymentOK4PayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *CreatePaymentOK4) GetStatus() OptCreatePaymentOK4Status {
	return s.Status
}

// GetResultCode returns the value of ResultCode.
func (s *CreatePaymentOK4) GetResultCode() OptNilCreatePaymentOK4ResultCode {
	return s.ResultCode
}

// GetTargetDate returns the value of TargetDate.
func (s *CreatePaymentOK4) GetTargetDate() OptNilString {
	return s.TargetDate
}

// GetWithdrawalDate returns the value of WithdrawalDate.
func (s *CreatePaymentOK4) GetWithdrawalDate() OptNilString {
	return s.WithdrawalDate
}

// GetRequestAcceptEndDate returns the value of RequestAcceptEndDate.
func (s *CreatePaymentOK4) GetRequestAcceptEndDate() OptNilString {
	return s.RequestAcceptEndDate
}

// GetTransferReturnDate returns the value of TransferReturnDate.
func (s *CreatePaymentOK4) GetTransferReturnDate() OptNilString {
	return s.TransferReturnDate
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *CreatePaymentOK4) GetPaymentMethodID() OptNilString {
	return s.PaymentMethodID
}

// GetBankCode returns the value of BankCode.
func (s *CreatePaymentOK4) GetBankCode() OptNilString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *CreatePaymentOK4) GetBankName() OptNilString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *CreatePaymentOK4) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *CreatePaymentOK4) GetBranchName() OptNilString {
	return s.BranchName
}

// GetRemarks returns the value of Remarks.
func (s *CreatePaymentOK4) GetRemarks() OptNilString {
	return s.Remarks
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *CreatePaymentOK4) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// SetShopID sets the value of ShopID.
func (s *CreatePaymentOK4) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *CreatePaymentOK4) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *CreatePaymentOK4) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentOK4) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentOK4) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *CreatePaymentOK4) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentOK4) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentOK4) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentOK4) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CreatePaymentOK4) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CreatePaymentOK4) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *CreatePaymentOK4) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *CreatePaymentOK4) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *CreatePaymentOK4) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CreatePaymentOK4) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentOK4) SetPayType(val OptCreatePaymentOK4PayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *CreatePaymentOK4) SetStatus(val OptCreatePaymentOK4Status) {
	s.Status = val
}

// SetResultCode sets the value of ResultCode.
func (s *CreatePaymentOK4) SetResultCode(val OptNilCreatePaymentOK4ResultCode) {
	s.ResultCode = val
}

// SetTargetDate sets the value of TargetDate.
func (s *CreatePaymentOK4) SetTargetDate(val OptNilString) {
	s.TargetDate = val
}

// SetWithdrawalDate sets the value of WithdrawalDate.
func (s *CreatePaymentOK4) SetWithdrawalDate(val OptNilString) {
	s.WithdrawalDate = val
}

// SetRequestAcceptEndDate sets the value of RequestAcceptEndDate.
func (s *CreatePaymentOK4) SetRequestAcceptEndDate(val OptNilString) {
	s.RequestAcceptEndDate = val
}

// SetTransferReturnDate sets the value of TransferReturnDate.
func (s *CreatePaymentOK4) SetTransferReturnDate(val OptNilString) {
	s.TransferReturnDate = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *CreatePaymentOK4) SetPaymentMethodID(val OptNilString) {
	s.PaymentMethodID = val
}

// SetBankCode sets the value of BankCode.
func (s *CreatePaymentOK4) SetBankCode(val OptNilString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *CreatePaymentOK4) SetBankName(val OptNilString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *CreatePaymentOK4) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *CreatePaymentOK4) SetBranchName(val OptNilString) {
	s.BranchName = val
}

// SetRemarks sets the value of Remarks.
func (s *CreatePaymentOK4) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *CreatePaymentOK4) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentOK4PayType string

const (
	CreatePaymentOK4PayTypeCard           CreatePaymentOK4PayType = "Card"
	CreatePaymentOK4PayTypeKonbini        CreatePaymentOK4PayType = "Konbini"
	CreatePaymentOK4PayTypePaypay         CreatePaymentOK4PayType = "Paypay"
	CreatePaymentOK4PayTypeApplepay       CreatePaymentOK4PayType = "Applepay"
	CreatePaymentOK4PayTypeDirectdebit    CreatePaymentOK4PayType = "Directdebit"
	CreatePaymentOK4PayTypeVirtualaccount CreatePaymentOK4PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentOK4PayType values.
func (CreatePaymentOK4PayType) AllValues() []CreatePaymentOK4PayType {
	return []CreatePaymentOK4PayType{
		CreatePaymentOK4PayTypeCard,
		CreatePaymentOK4PayTypeKonbini,
		CreatePaymentOK4PayTypePaypay,
		CreatePaymentOK4PayTypeApplepay,
		CreatePaymentOK4PayTypeDirectdebit,
		CreatePaymentOK4PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK4PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK4PayTypeCard:
		return []byte(s), nil
	case CreatePaymentOK4PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentOK4PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentOK4PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentOK4PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentOK4PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK4PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentOK4PayType(data) {
	case CreatePaymentOK4PayTypeCard:
		*s = CreatePaymentOK4PayTypeCard
		return nil
	case CreatePaymentOK4PayTypeKonbini:
		*s = CreatePaymentOK4PayTypeKonbini
		return nil
	case CreatePaymentOK4PayTypePaypay:
		*s = CreatePaymentOK4PayTypePaypay
		return nil
	case CreatePaymentOK4PayTypeApplepay:
		*s = CreatePaymentOK4PayTypeApplepay
		return nil
	case CreatePaymentOK4PayTypeDirectdebit:
		*s = CreatePaymentOK4PayTypeDirectdebit
		return nil
	case CreatePaymentOK4PayTypeVirtualaccount:
		*s = CreatePaymentOK4PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 振替結果コード
// - `0`: 振替成功<br><span class="smallText">振替が成功しました。</span>
// - `1`: 残高不足（失敗）<br><span
// class="smallText">口座残高の不足により振替に失敗しました。</span>
// - `2`: 預金取引無し（失敗）<br><span
// class="smallText">指定した口座が存在しないなどの理由により振替に失敗しました。</span>
// - `3`: 購入者事由（失敗）<br><span
// class="smallText">購入者による振替取引の停止等により振替に失敗しました。</span>
// - `4`: 依頼書未着・不備（失敗）<br><span
// class="smallText">（依頼書登録）この決済に所定の期日までの口座振替依頼書の提出が確認出来なかったため振替に失敗しました。</span>
// - `8`: ショップ事由（失敗）<br><span
// class="smallText">ショップに起因する事由により振替に失敗しました。詳細はfincodeにお問い合わせください。</span>
// - `9 | E | N`: その他（失敗）<br><span
// class="smallText">その他の理由により振替に失敗しました（通常は発生しません）。詳細はfincodeにお問い合わせください。</span>
// [お問い合わせはこちらのフォームから](https://dashboard.fincode.
// jp/contact)いただけます。.
type CreatePaymentOK4ResultCode string

const (
	CreatePaymentOK4ResultCode0 CreatePaymentOK4ResultCode = "0"
	CreatePaymentOK4ResultCode1 CreatePaymentOK4ResultCode = "1"
	CreatePaymentOK4ResultCode2 CreatePaymentOK4ResultCode = "2"
	CreatePaymentOK4ResultCode3 CreatePaymentOK4ResultCode = "3"
	CreatePaymentOK4ResultCode4 CreatePaymentOK4ResultCode = "4"
	CreatePaymentOK4ResultCode8 CreatePaymentOK4ResultCode = "8"
	CreatePaymentOK4ResultCode9 CreatePaymentOK4ResultCode = "9"
	CreatePaymentOK4ResultCodeE CreatePaymentOK4ResultCode = "E"
	CreatePaymentOK4ResultCodeN CreatePaymentOK4ResultCode = "N"
)

// AllValues returns all CreatePaymentOK4ResultCode values.
func (CreatePaymentOK4ResultCode) AllValues() []CreatePaymentOK4ResultCode {
	return []CreatePaymentOK4ResultCode{
		CreatePaymentOK4ResultCode0,
		CreatePaymentOK4ResultCode1,
		CreatePaymentOK4ResultCode2,
		CreatePaymentOK4ResultCode3,
		CreatePaymentOK4ResultCode4,
		CreatePaymentOK4ResultCode8,
		CreatePaymentOK4ResultCode9,
		CreatePaymentOK4ResultCodeE,
		CreatePaymentOK4ResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK4ResultCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK4ResultCode0:
		return []byte(s), nil
	case CreatePaymentOK4ResultCode1:
		return []byte(s), nil
	case CreatePaymentOK4ResultCode2:
		return []byte(s), nil
	case CreatePaymentOK4ResultCode3:
		return []byte(s), nil
	case CreatePaymentOK4ResultCode4:
		return []byte(s), nil
	case CreatePaymentOK4ResultCode8:
		return []byte(s), nil
	case CreatePaymentOK4ResultCode9:
		return []byte(s), nil
	case CreatePaymentOK4ResultCodeE:
		return []byte(s), nil
	case CreatePaymentOK4ResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK4ResultCode) UnmarshalText(data []byte) error {
	switch CreatePaymentOK4ResultCode(data) {
	case CreatePaymentOK4ResultCode0:
		*s = CreatePaymentOK4ResultCode0
		return nil
	case CreatePaymentOK4ResultCode1:
		*s = CreatePaymentOK4ResultCode1
		return nil
	case CreatePaymentOK4ResultCode2:
		*s = CreatePaymentOK4ResultCode2
		return nil
	case CreatePaymentOK4ResultCode3:
		*s = CreatePaymentOK4ResultCode3
		return nil
	case CreatePaymentOK4ResultCode4:
		*s = CreatePaymentOK4ResultCode4
		return nil
	case CreatePaymentOK4ResultCode8:
		*s = CreatePaymentOK4ResultCode8
		return nil
	case CreatePaymentOK4ResultCode9:
		*s = CreatePaymentOK4ResultCode9
		return nil
	case CreatePaymentOK4ResultCodeE:
		*s = CreatePaymentOK4ResultCodeE
		return nil
	case CreatePaymentOK4ResultCodeN:
		*s = CreatePaymentOK4ResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type CreatePaymentOK4Status string

const (
	CreatePaymentOK4StatusUNPROCESSED             CreatePaymentOK4Status = "UNPROCESSED"
	CreatePaymentOK4StatusCHECKED                 CreatePaymentOK4Status = "CHECKED"
	CreatePaymentOK4StatusAUTHORIZED              CreatePaymentOK4Status = "AUTHORIZED"
	CreatePaymentOK4StatusAWAITINGCUSTOMERPAYMENT CreatePaymentOK4Status = "AWAITING_CUSTOMER_PAYMENT"
	CreatePaymentOK4StatusAWAITINGPAYMENTAPPROVAL CreatePaymentOK4Status = "AWAITING_PAYMENT_APPROVAL"
	CreatePaymentOK4StatusCAPTURED                CreatePaymentOK4Status = "CAPTURED"
	CreatePaymentOK4StatusCANCELED                CreatePaymentOK4Status = "CANCELED"
	CreatePaymentOK4StatusEXPIRED                 CreatePaymentOK4Status = "EXPIRED"
	CreatePaymentOK4StatusAUTHENTICATED           CreatePaymentOK4Status = "AUTHENTICATED"
	CreatePaymentOK4StatusFAILED                  CreatePaymentOK4Status = "FAILED"
)

// AllValues returns all CreatePaymentOK4Status values.
func (CreatePaymentOK4Status) AllValues() []CreatePaymentOK4Status {
	return []CreatePaymentOK4Status{
		CreatePaymentOK4StatusUNPROCESSED,
		CreatePaymentOK4StatusCHECKED,
		CreatePaymentOK4StatusAUTHORIZED,
		CreatePaymentOK4StatusAWAITINGCUSTOMERPAYMENT,
		CreatePaymentOK4StatusAWAITINGPAYMENTAPPROVAL,
		CreatePaymentOK4StatusCAPTURED,
		CreatePaymentOK4StatusCANCELED,
		CreatePaymentOK4StatusEXPIRED,
		CreatePaymentOK4StatusAUTHENTICATED,
		CreatePaymentOK4StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentOK4Status) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentOK4StatusUNPROCESSED:
		return []byte(s), nil
	case CreatePaymentOK4StatusCHECKED:
		return []byte(s), nil
	case CreatePaymentOK4StatusAUTHORIZED:
		return []byte(s), nil
	case CreatePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case CreatePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case CreatePaymentOK4StatusCAPTURED:
		return []byte(s), nil
	case CreatePaymentOK4StatusCANCELED:
		return []byte(s), nil
	case CreatePaymentOK4StatusEXPIRED:
		return []byte(s), nil
	case CreatePaymentOK4StatusAUTHENTICATED:
		return []byte(s), nil
	case CreatePaymentOK4StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentOK4Status) UnmarshalText(data []byte) error {
	switch CreatePaymentOK4Status(data) {
	case CreatePaymentOK4StatusUNPROCESSED:
		*s = CreatePaymentOK4StatusUNPROCESSED
		return nil
	case CreatePaymentOK4StatusCHECKED:
		*s = CreatePaymentOK4StatusCHECKED
		return nil
	case CreatePaymentOK4StatusAUTHORIZED:
		*s = CreatePaymentOK4StatusAUTHORIZED
		return nil
	case CreatePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK4StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case CreatePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK4StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case CreatePaymentOK4StatusCAPTURED:
		*s = CreatePaymentOK4StatusCAPTURED
		return nil
	case CreatePaymentOK4StatusCANCELED:
		*s = CreatePaymentOK4StatusCANCELED
		return nil
	case CreatePaymentOK4StatusEXPIRED:
		*s = CreatePaymentOK4StatusEXPIRED
		return nil
	case CreatePaymentOK4StatusAUTHENTICATED:
		*s = CreatePaymentOK4StatusAUTHENTICATED
		return nil
	case CreatePaymentOK4StatusFAILED:
		*s = CreatePaymentOK4StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CreatePaymentReq represents sum type.
type CreatePaymentReq struct {
	Type              CreatePaymentReqType // switch on this field
	CreatePaymentReq0 CreatePaymentReq0
	CreatePaymentReq1 CreatePaymentReq1
	CreatePaymentReq2 CreatePaymentReq2
	CreatePaymentReq3 CreatePaymentReq3
	CreatePaymentReq4 CreatePaymentReq4
}

// CreatePaymentReqType is oneOf type of CreatePaymentReq.
type CreatePaymentReqType string

// Possible values for CreatePaymentReqType.
const (
	CreatePaymentReq0CreatePaymentReq CreatePaymentReqType = "CreatePaymentReq0"
	CreatePaymentReq1CreatePaymentReq CreatePaymentReqType = "CreatePaymentReq1"
	CreatePaymentReq2CreatePaymentReq CreatePaymentReqType = "CreatePaymentReq2"
	CreatePaymentReq3CreatePaymentReq CreatePaymentReqType = "CreatePaymentReq3"
	CreatePaymentReq4CreatePaymentReq CreatePaymentReqType = "CreatePaymentReq4"
)

// IsCreatePaymentReq0 reports whether CreatePaymentReq is CreatePaymentReq0.
func (s CreatePaymentReq) IsCreatePaymentReq0() bool {
	return s.Type == CreatePaymentReq0CreatePaymentReq
}

// IsCreatePaymentReq1 reports whether CreatePaymentReq is CreatePaymentReq1.
func (s CreatePaymentReq) IsCreatePaymentReq1() bool {
	return s.Type == CreatePaymentReq1CreatePaymentReq
}

// IsCreatePaymentReq2 reports whether CreatePaymentReq is CreatePaymentReq2.
func (s CreatePaymentReq) IsCreatePaymentReq2() bool {
	return s.Type == CreatePaymentReq2CreatePaymentReq
}

// IsCreatePaymentReq3 reports whether CreatePaymentReq is CreatePaymentReq3.
func (s CreatePaymentReq) IsCreatePaymentReq3() bool {
	return s.Type == CreatePaymentReq3CreatePaymentReq
}

// IsCreatePaymentReq4 reports whether CreatePaymentReq is CreatePaymentReq4.
func (s CreatePaymentReq) IsCreatePaymentReq4() bool {
	return s.Type == CreatePaymentReq4CreatePaymentReq
}

// SetCreatePaymentReq0 sets CreatePaymentReq to CreatePaymentReq0.
func (s *CreatePaymentReq) SetCreatePaymentReq0(v CreatePaymentReq0) {
	s.Type = CreatePaymentReq0CreatePaymentReq
	s.CreatePaymentReq0 = v
}

// GetCreatePaymentReq0 returns CreatePaymentReq0 and true boolean if CreatePaymentReq is CreatePaymentReq0.
func (s CreatePaymentReq) GetCreatePaymentReq0() (v CreatePaymentReq0, ok bool) {
	if !s.IsCreatePaymentReq0() {
		return v, false
	}
	return s.CreatePaymentReq0, true
}

// NewCreatePaymentReq0CreatePaymentReq returns new CreatePaymentReq from CreatePaymentReq0.
func NewCreatePaymentReq0CreatePaymentReq(v CreatePaymentReq0) CreatePaymentReq {
	var s CreatePaymentReq
	s.SetCreatePaymentReq0(v)
	return s
}

// SetCreatePaymentReq1 sets CreatePaymentReq to CreatePaymentReq1.
func (s *CreatePaymentReq) SetCreatePaymentReq1(v CreatePaymentReq1) {
	s.Type = CreatePaymentReq1CreatePaymentReq
	s.CreatePaymentReq1 = v
}

// GetCreatePaymentReq1 returns CreatePaymentReq1 and true boolean if CreatePaymentReq is CreatePaymentReq1.
func (s CreatePaymentReq) GetCreatePaymentReq1() (v CreatePaymentReq1, ok bool) {
	if !s.IsCreatePaymentReq1() {
		return v, false
	}
	return s.CreatePaymentReq1, true
}

// NewCreatePaymentReq1CreatePaymentReq returns new CreatePaymentReq from CreatePaymentReq1.
func NewCreatePaymentReq1CreatePaymentReq(v CreatePaymentReq1) CreatePaymentReq {
	var s CreatePaymentReq
	s.SetCreatePaymentReq1(v)
	return s
}

// SetCreatePaymentReq2 sets CreatePaymentReq to CreatePaymentReq2.
func (s *CreatePaymentReq) SetCreatePaymentReq2(v CreatePaymentReq2) {
	s.Type = CreatePaymentReq2CreatePaymentReq
	s.CreatePaymentReq2 = v
}

// GetCreatePaymentReq2 returns CreatePaymentReq2 and true boolean if CreatePaymentReq is CreatePaymentReq2.
func (s CreatePaymentReq) GetCreatePaymentReq2() (v CreatePaymentReq2, ok bool) {
	if !s.IsCreatePaymentReq2() {
		return v, false
	}
	return s.CreatePaymentReq2, true
}

// NewCreatePaymentReq2CreatePaymentReq returns new CreatePaymentReq from CreatePaymentReq2.
func NewCreatePaymentReq2CreatePaymentReq(v CreatePaymentReq2) CreatePaymentReq {
	var s CreatePaymentReq
	s.SetCreatePaymentReq2(v)
	return s
}

// SetCreatePaymentReq3 sets CreatePaymentReq to CreatePaymentReq3.
func (s *CreatePaymentReq) SetCreatePaymentReq3(v CreatePaymentReq3) {
	s.Type = CreatePaymentReq3CreatePaymentReq
	s.CreatePaymentReq3 = v
}

// GetCreatePaymentReq3 returns CreatePaymentReq3 and true boolean if CreatePaymentReq is CreatePaymentReq3.
func (s CreatePaymentReq) GetCreatePaymentReq3() (v CreatePaymentReq3, ok bool) {
	if !s.IsCreatePaymentReq3() {
		return v, false
	}
	return s.CreatePaymentReq3, true
}

// NewCreatePaymentReq3CreatePaymentReq returns new CreatePaymentReq from CreatePaymentReq3.
func NewCreatePaymentReq3CreatePaymentReq(v CreatePaymentReq3) CreatePaymentReq {
	var s CreatePaymentReq
	s.SetCreatePaymentReq3(v)
	return s
}

// SetCreatePaymentReq4 sets CreatePaymentReq to CreatePaymentReq4.
func (s *CreatePaymentReq) SetCreatePaymentReq4(v CreatePaymentReq4) {
	s.Type = CreatePaymentReq4CreatePaymentReq
	s.CreatePaymentReq4 = v
}

// GetCreatePaymentReq4 returns CreatePaymentReq4 and true boolean if CreatePaymentReq is CreatePaymentReq4.
func (s CreatePaymentReq) GetCreatePaymentReq4() (v CreatePaymentReq4, ok bool) {
	if !s.IsCreatePaymentReq4() {
		return v, false
	}
	return s.CreatePaymentReq4, true
}

// NewCreatePaymentReq4CreatePaymentReq returns new CreatePaymentReq from CreatePaymentReq4.
func NewCreatePaymentReq4CreatePaymentReq(v CreatePaymentReq4) CreatePaymentReq {
	var s CreatePaymentReq
	s.SetCreatePaymentReq4(v)
	return s
}

type CreatePaymentReq0 struct {
	ID OptString `json:"id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType CreatePaymentReq0PayType `json:"pay_type"`
	JobCode CreatePaymentReq0JobCode `json:"job_code"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/restriction).
	Amount OptString `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [カード決済 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/restriction).
	Tax     OptNilString                   `json:"tax"`
	TdsType OptNilCreatePaymentReq0TdsType `json:"tds_type"`
	// 3Dセキュア認証を利用するか。
	// - `0`: 3Dセキュア認証を利用しない（デフォルト）
	// - `2`: 3Dセキュア2.0認証を利用する
	// 本番環境では審査結果によって設定する値が`2`に強制される場合があります。詳しくは[Docs > 3Dセキュア導入必須時の挙動](https://docs.fincode.jp/payment/fraud_protection/3d_secure_required).
	Tds2Type     OptNilCreatePaymentReq0Tds2Type `json:"tds2_type"`
	TdTenantName OptNilString                    `json:"td_tenant_name"`
	// 加盟店自由項目 1\
	// 任意の値を挿入し、決済情報に保存できます。.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
}

// GetID returns the value of ID.
func (s *CreatePaymentReq0) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentReq0) GetPayType() CreatePaymentReq0PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CreatePaymentReq0) GetJobCode() CreatePaymentReq0JobCode {
	return s.JobCode
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentReq0) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentReq0) GetTax() OptNilString {
	return s.Tax
}

// GetTdsType returns the value of TdsType.
func (s *CreatePaymentReq0) GetTdsType() OptNilCreatePaymentReq0TdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *CreatePaymentReq0) GetTds2Type() OptNilCreatePaymentReq0Tds2Type {
	return s.Tds2Type
}

// GetTdTenantName returns the value of TdTenantName.
func (s *CreatePaymentReq0) GetTdTenantName() OptNilString {
	return s.TdTenantName
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentReq0) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentReq0) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentReq0) GetClientField3() OptNilString {
	return s.ClientField3
}

// SetID sets the value of ID.
func (s *CreatePaymentReq0) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentReq0) SetPayType(val CreatePaymentReq0PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CreatePaymentReq0) SetJobCode(val CreatePaymentReq0JobCode) {
	s.JobCode = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentReq0) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentReq0) SetTax(val OptNilString) {
	s.Tax = val
}

// SetTdsType sets the value of TdsType.
func (s *CreatePaymentReq0) SetTdsType(val OptNilCreatePaymentReq0TdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CreatePaymentReq0) SetTds2Type(val OptNilCreatePaymentReq0Tds2Type) {
	s.Tds2Type = val
}

// SetTdTenantName sets the value of TdTenantName.
func (s *CreatePaymentReq0) SetTdTenantName(val OptNilString) {
	s.TdTenantName = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentReq0) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentReq0) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentReq0) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CreatePaymentReq0JobCode string

const (
	CreatePaymentReq0JobCodeCHECK   CreatePaymentReq0JobCode = "CHECK"
	CreatePaymentReq0JobCodeAUTH    CreatePaymentReq0JobCode = "AUTH"
	CreatePaymentReq0JobCodeCAPTURE CreatePaymentReq0JobCode = "CAPTURE"
)

// AllValues returns all CreatePaymentReq0JobCode values.
func (CreatePaymentReq0JobCode) AllValues() []CreatePaymentReq0JobCode {
	return []CreatePaymentReq0JobCode{
		CreatePaymentReq0JobCodeCHECK,
		CreatePaymentReq0JobCodeAUTH,
		CreatePaymentReq0JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq0JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq0JobCodeCHECK:
		return []byte(s), nil
	case CreatePaymentReq0JobCodeAUTH:
		return []byte(s), nil
	case CreatePaymentReq0JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq0JobCode) UnmarshalText(data []byte) error {
	switch CreatePaymentReq0JobCode(data) {
	case CreatePaymentReq0JobCodeCHECK:
		*s = CreatePaymentReq0JobCodeCHECK
		return nil
	case CreatePaymentReq0JobCodeAUTH:
		*s = CreatePaymentReq0JobCodeAUTH
		return nil
	case CreatePaymentReq0JobCodeCAPTURE:
		*s = CreatePaymentReq0JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentReq0PayType string

const (
	CreatePaymentReq0PayTypeCard           CreatePaymentReq0PayType = "Card"
	CreatePaymentReq0PayTypeKonbini        CreatePaymentReq0PayType = "Konbini"
	CreatePaymentReq0PayTypePaypay         CreatePaymentReq0PayType = "Paypay"
	CreatePaymentReq0PayTypeApplepay       CreatePaymentReq0PayType = "Applepay"
	CreatePaymentReq0PayTypeDirectdebit    CreatePaymentReq0PayType = "Directdebit"
	CreatePaymentReq0PayTypeVirtualaccount CreatePaymentReq0PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentReq0PayType values.
func (CreatePaymentReq0PayType) AllValues() []CreatePaymentReq0PayType {
	return []CreatePaymentReq0PayType{
		CreatePaymentReq0PayTypeCard,
		CreatePaymentReq0PayTypeKonbini,
		CreatePaymentReq0PayTypePaypay,
		CreatePaymentReq0PayTypeApplepay,
		CreatePaymentReq0PayTypeDirectdebit,
		CreatePaymentReq0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq0PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq0PayTypeCard:
		return []byte(s), nil
	case CreatePaymentReq0PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentReq0PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentReq0PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentReq0PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentReq0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq0PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentReq0PayType(data) {
	case CreatePaymentReq0PayTypeCard:
		*s = CreatePaymentReq0PayTypeCard
		return nil
	case CreatePaymentReq0PayTypeKonbini:
		*s = CreatePaymentReq0PayTypeKonbini
		return nil
	case CreatePaymentReq0PayTypePaypay:
		*s = CreatePaymentReq0PayTypePaypay
		return nil
	case CreatePaymentReq0PayTypeApplepay:
		*s = CreatePaymentReq0PayTypeApplepay
		return nil
	case CreatePaymentReq0PayTypeDirectdebit:
		*s = CreatePaymentReq0PayTypeDirectdebit
		return nil
	case CreatePaymentReq0PayTypeVirtualaccount:
		*s = CreatePaymentReq0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type CreatePaymentReq0Tds2Type string

const (
	CreatePaymentReq0Tds2Type2 CreatePaymentReq0Tds2Type = "2"
	CreatePaymentReq0Tds2Type3 CreatePaymentReq0Tds2Type = "3"
)

// AllValues returns all CreatePaymentReq0Tds2Type values.
func (CreatePaymentReq0Tds2Type) AllValues() []CreatePaymentReq0Tds2Type {
	return []CreatePaymentReq0Tds2Type{
		CreatePaymentReq0Tds2Type2,
		CreatePaymentReq0Tds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq0Tds2Type) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq0Tds2Type2:
		return []byte(s), nil
	case CreatePaymentReq0Tds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq0Tds2Type) UnmarshalText(data []byte) error {
	switch CreatePaymentReq0Tds2Type(data) {
	case CreatePaymentReq0Tds2Type2:
		*s = CreatePaymentReq0Tds2Type2
		return nil
	case CreatePaymentReq0Tds2Type3:
		*s = CreatePaymentReq0Tds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type CreatePaymentReq0TdsType string

const (
	CreatePaymentReq0TdsType0 CreatePaymentReq0TdsType = "0"
	CreatePaymentReq0TdsType2 CreatePaymentReq0TdsType = "2"
)

// AllValues returns all CreatePaymentReq0TdsType values.
func (CreatePaymentReq0TdsType) AllValues() []CreatePaymentReq0TdsType {
	return []CreatePaymentReq0TdsType{
		CreatePaymentReq0TdsType0,
		CreatePaymentReq0TdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq0TdsType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq0TdsType0:
		return []byte(s), nil
	case CreatePaymentReq0TdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq0TdsType) UnmarshalText(data []byte) error {
	switch CreatePaymentReq0TdsType(data) {
	case CreatePaymentReq0TdsType0:
		*s = CreatePaymentReq0TdsType0
		return nil
	case CreatePaymentReq0TdsType2:
		*s = CreatePaymentReq0TdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePaymentReq1 struct {
	ID OptString `json:"id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType CreatePaymentReq1PayType `json:"pay_type"`
	JobCode CreatePaymentReq1JobCode `json:"job_code"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [Apple Pay > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/applepay/restriction).
	Amount string `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [Apple Pay > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/applepay/restriction).
	Tax OptNilString `json:"tax"`
	// 加盟店自由項目 1\
	// 任意の値を挿入し、決済情報に保存できます。.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetID returns the value of ID.
func (s *CreatePaymentReq1) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentReq1) GetPayType() CreatePaymentReq1PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CreatePaymentReq1) GetJobCode() CreatePaymentReq1JobCode {
	return s.JobCode
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentReq1) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentReq1) GetTax() OptNilString {
	return s.Tax
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentReq1) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentReq1) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentReq1) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetItemCode returns the value of ItemCode.
func (s *CreatePaymentReq1) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetID sets the value of ID.
func (s *CreatePaymentReq1) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentReq1) SetPayType(val CreatePaymentReq1PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CreatePaymentReq1) SetJobCode(val CreatePaymentReq1JobCode) {
	s.JobCode = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentReq1) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentReq1) SetTax(val OptNilString) {
	s.Tax = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentReq1) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentReq1) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentReq1) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetItemCode sets the value of ItemCode.
func (s *CreatePaymentReq1) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CreatePaymentReq1JobCode string

const (
	CreatePaymentReq1JobCodeAUTH    CreatePaymentReq1JobCode = "AUTH"
	CreatePaymentReq1JobCodeCAPTURE CreatePaymentReq1JobCode = "CAPTURE"
)

// AllValues returns all CreatePaymentReq1JobCode values.
func (CreatePaymentReq1JobCode) AllValues() []CreatePaymentReq1JobCode {
	return []CreatePaymentReq1JobCode{
		CreatePaymentReq1JobCodeAUTH,
		CreatePaymentReq1JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq1JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq1JobCodeAUTH:
		return []byte(s), nil
	case CreatePaymentReq1JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq1JobCode) UnmarshalText(data []byte) error {
	switch CreatePaymentReq1JobCode(data) {
	case CreatePaymentReq1JobCodeAUTH:
		*s = CreatePaymentReq1JobCodeAUTH
		return nil
	case CreatePaymentReq1JobCodeCAPTURE:
		*s = CreatePaymentReq1JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentReq1PayType string

const (
	CreatePaymentReq1PayTypeCard           CreatePaymentReq1PayType = "Card"
	CreatePaymentReq1PayTypeKonbini        CreatePaymentReq1PayType = "Konbini"
	CreatePaymentReq1PayTypePaypay         CreatePaymentReq1PayType = "Paypay"
	CreatePaymentReq1PayTypeApplepay       CreatePaymentReq1PayType = "Applepay"
	CreatePaymentReq1PayTypeDirectdebit    CreatePaymentReq1PayType = "Directdebit"
	CreatePaymentReq1PayTypeVirtualaccount CreatePaymentReq1PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentReq1PayType values.
func (CreatePaymentReq1PayType) AllValues() []CreatePaymentReq1PayType {
	return []CreatePaymentReq1PayType{
		CreatePaymentReq1PayTypeCard,
		CreatePaymentReq1PayTypeKonbini,
		CreatePaymentReq1PayTypePaypay,
		CreatePaymentReq1PayTypeApplepay,
		CreatePaymentReq1PayTypeDirectdebit,
		CreatePaymentReq1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq1PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq1PayTypeCard:
		return []byte(s), nil
	case CreatePaymentReq1PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentReq1PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentReq1PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentReq1PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentReq1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq1PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentReq1PayType(data) {
	case CreatePaymentReq1PayTypeCard:
		*s = CreatePaymentReq1PayTypeCard
		return nil
	case CreatePaymentReq1PayTypeKonbini:
		*s = CreatePaymentReq1PayTypeKonbini
		return nil
	case CreatePaymentReq1PayTypePaypay:
		*s = CreatePaymentReq1PayTypePaypay
		return nil
	case CreatePaymentReq1PayTypeApplepay:
		*s = CreatePaymentReq1PayTypeApplepay
		return nil
	case CreatePaymentReq1PayTypeDirectdebit:
		*s = CreatePaymentReq1PayTypeDirectdebit
		return nil
	case CreatePaymentReq1PayTypeVirtualaccount:
		*s = CreatePaymentReq1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePaymentReq2 struct {
	ID OptString `json:"id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType CreatePaymentReq2PayType `json:"pay_type"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [コンビニ決済 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/konbini/restriction).
	Amount string `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [コンビニ決済 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/konbini/restriction).
	Tax OptNilString `json:"tax"`
	// 加盟店自由項目 1\
	// 任意の値を挿入し、決済情報に保存できます。.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
}

// GetID returns the value of ID.
func (s *CreatePaymentReq2) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentReq2) GetPayType() CreatePaymentReq2PayType {
	return s.PayType
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentReq2) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentReq2) GetTax() OptNilString {
	return s.Tax
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentReq2) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentReq2) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentReq2) GetClientField3() OptNilString {
	return s.ClientField3
}

// SetID sets the value of ID.
func (s *CreatePaymentReq2) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentReq2) SetPayType(val CreatePaymentReq2PayType) {
	s.PayType = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentReq2) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentReq2) SetTax(val OptNilString) {
	s.Tax = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentReq2) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentReq2) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentReq2) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentReq2PayType string

const (
	CreatePaymentReq2PayTypeCard           CreatePaymentReq2PayType = "Card"
	CreatePaymentReq2PayTypeKonbini        CreatePaymentReq2PayType = "Konbini"
	CreatePaymentReq2PayTypePaypay         CreatePaymentReq2PayType = "Paypay"
	CreatePaymentReq2PayTypeApplepay       CreatePaymentReq2PayType = "Applepay"
	CreatePaymentReq2PayTypeDirectdebit    CreatePaymentReq2PayType = "Directdebit"
	CreatePaymentReq2PayTypeVirtualaccount CreatePaymentReq2PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentReq2PayType values.
func (CreatePaymentReq2PayType) AllValues() []CreatePaymentReq2PayType {
	return []CreatePaymentReq2PayType{
		CreatePaymentReq2PayTypeCard,
		CreatePaymentReq2PayTypeKonbini,
		CreatePaymentReq2PayTypePaypay,
		CreatePaymentReq2PayTypeApplepay,
		CreatePaymentReq2PayTypeDirectdebit,
		CreatePaymentReq2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq2PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq2PayTypeCard:
		return []byte(s), nil
	case CreatePaymentReq2PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentReq2PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentReq2PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentReq2PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentReq2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq2PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentReq2PayType(data) {
	case CreatePaymentReq2PayTypeCard:
		*s = CreatePaymentReq2PayTypeCard
		return nil
	case CreatePaymentReq2PayTypeKonbini:
		*s = CreatePaymentReq2PayTypeKonbini
		return nil
	case CreatePaymentReq2PayTypePaypay:
		*s = CreatePaymentReq2PayTypePaypay
		return nil
	case CreatePaymentReq2PayTypeApplepay:
		*s = CreatePaymentReq2PayTypeApplepay
		return nil
	case CreatePaymentReq2PayTypeDirectdebit:
		*s = CreatePaymentReq2PayTypeDirectdebit
		return nil
	case CreatePaymentReq2PayTypeVirtualaccount:
		*s = CreatePaymentReq2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePaymentReq3 struct {
	ID OptString `json:"id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType CreatePaymentReq3PayType `json:"pay_type"`
	JobCode CreatePaymentReq3JobCode `json:"job_code"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [PayPay > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/paypay/restriction).
	Amount string `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [PayPay > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/paypay/restriction).
	Tax OptNilString `json:"tax"`
	// 加盟店自由項目 1\
	// 任意の値を挿入し、決済情報に保存できます。.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3     OptNilString `json:"client_field_3"`
	OrderDescription OptNilString `json:"order_description"`
}

// GetID returns the value of ID.
func (s *CreatePaymentReq3) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentReq3) GetPayType() CreatePaymentReq3PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *CreatePaymentReq3) GetJobCode() CreatePaymentReq3JobCode {
	return s.JobCode
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentReq3) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentReq3) GetTax() OptNilString {
	return s.Tax
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentReq3) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentReq3) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentReq3) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetOrderDescription returns the value of OrderDescription.
func (s *CreatePaymentReq3) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// SetID sets the value of ID.
func (s *CreatePaymentReq3) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentReq3) SetPayType(val CreatePaymentReq3PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *CreatePaymentReq3) SetJobCode(val CreatePaymentReq3JobCode) {
	s.JobCode = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentReq3) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentReq3) SetTax(val OptNilString) {
	s.Tax = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentReq3) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentReq3) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentReq3) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *CreatePaymentReq3) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type CreatePaymentReq3JobCode string

const (
	CreatePaymentReq3JobCodeAUTH    CreatePaymentReq3JobCode = "AUTH"
	CreatePaymentReq3JobCodeCAPTURE CreatePaymentReq3JobCode = "CAPTURE"
)

// AllValues returns all CreatePaymentReq3JobCode values.
func (CreatePaymentReq3JobCode) AllValues() []CreatePaymentReq3JobCode {
	return []CreatePaymentReq3JobCode{
		CreatePaymentReq3JobCodeAUTH,
		CreatePaymentReq3JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq3JobCode) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq3JobCodeAUTH:
		return []byte(s), nil
	case CreatePaymentReq3JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq3JobCode) UnmarshalText(data []byte) error {
	switch CreatePaymentReq3JobCode(data) {
	case CreatePaymentReq3JobCodeAUTH:
		*s = CreatePaymentReq3JobCodeAUTH
		return nil
	case CreatePaymentReq3JobCodeCAPTURE:
		*s = CreatePaymentReq3JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentReq3PayType string

const (
	CreatePaymentReq3PayTypeCard           CreatePaymentReq3PayType = "Card"
	CreatePaymentReq3PayTypeKonbini        CreatePaymentReq3PayType = "Konbini"
	CreatePaymentReq3PayTypePaypay         CreatePaymentReq3PayType = "Paypay"
	CreatePaymentReq3PayTypeApplepay       CreatePaymentReq3PayType = "Applepay"
	CreatePaymentReq3PayTypeDirectdebit    CreatePaymentReq3PayType = "Directdebit"
	CreatePaymentReq3PayTypeVirtualaccount CreatePaymentReq3PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentReq3PayType values.
func (CreatePaymentReq3PayType) AllValues() []CreatePaymentReq3PayType {
	return []CreatePaymentReq3PayType{
		CreatePaymentReq3PayTypeCard,
		CreatePaymentReq3PayTypeKonbini,
		CreatePaymentReq3PayTypePaypay,
		CreatePaymentReq3PayTypeApplepay,
		CreatePaymentReq3PayTypeDirectdebit,
		CreatePaymentReq3PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq3PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq3PayTypeCard:
		return []byte(s), nil
	case CreatePaymentReq3PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentReq3PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentReq3PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentReq3PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentReq3PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq3PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentReq3PayType(data) {
	case CreatePaymentReq3PayTypeCard:
		*s = CreatePaymentReq3PayTypeCard
		return nil
	case CreatePaymentReq3PayTypeKonbini:
		*s = CreatePaymentReq3PayTypeKonbini
		return nil
	case CreatePaymentReq3PayTypePaypay:
		*s = CreatePaymentReq3PayTypePaypay
		return nil
	case CreatePaymentReq3PayTypeApplepay:
		*s = CreatePaymentReq3PayTypeApplepay
		return nil
	case CreatePaymentReq3PayTypeDirectdebit:
		*s = CreatePaymentReq3PayTypeDirectdebit
		return nil
	case CreatePaymentReq3PayTypeVirtualaccount:
		*s = CreatePaymentReq3PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePaymentReq4 struct {
	ID OptString `json:"id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType CreatePaymentReq4PayType `json:"pay_type"`
	// 利用金額\
	// `tax`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [口座振替 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/directdebit/restriction).
	Amount string `json:"amount"`
	// 税送料\
	// `amount`との合計値が決済手段ごとに定められた決済金額の範囲内に収まる必要があります。\
	// 参照： [口座振替 > 制限事項 > 利用可能な金額](https://docs.fincode.
	// jp/payment/directdebit/restriction).
	Tax     OptNilString `json:"tax"`
	Remarks OptNilString `json:"remarks"`
	// 加盟店自由項目 1\
	// 任意の値を挿入し、決済情報に保存できます。.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
}

// GetID returns the value of ID.
func (s *CreatePaymentReq4) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *CreatePaymentReq4) GetPayType() CreatePaymentReq4PayType {
	return s.PayType
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentReq4) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *CreatePaymentReq4) GetTax() OptNilString {
	return s.Tax
}

// GetRemarks returns the value of Remarks.
func (s *CreatePaymentReq4) GetRemarks() OptNilString {
	return s.Remarks
}

// GetClientField1 returns the value of ClientField1.
func (s *CreatePaymentReq4) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CreatePaymentReq4) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CreatePaymentReq4) GetClientField3() OptNilString {
	return s.ClientField3
}

// SetID sets the value of ID.
func (s *CreatePaymentReq4) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *CreatePaymentReq4) SetPayType(val CreatePaymentReq4PayType) {
	s.PayType = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentReq4) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *CreatePaymentReq4) SetTax(val OptNilString) {
	s.Tax = val
}

// SetRemarks sets the value of Remarks.
func (s *CreatePaymentReq4) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CreatePaymentReq4) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CreatePaymentReq4) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CreatePaymentReq4) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type CreatePaymentReq4PayType string

const (
	CreatePaymentReq4PayTypeCard           CreatePaymentReq4PayType = "Card"
	CreatePaymentReq4PayTypeKonbini        CreatePaymentReq4PayType = "Konbini"
	CreatePaymentReq4PayTypePaypay         CreatePaymentReq4PayType = "Paypay"
	CreatePaymentReq4PayTypeApplepay       CreatePaymentReq4PayType = "Applepay"
	CreatePaymentReq4PayTypeDirectdebit    CreatePaymentReq4PayType = "Directdebit"
	CreatePaymentReq4PayTypeVirtualaccount CreatePaymentReq4PayType = "Virtualaccount"
)

// AllValues returns all CreatePaymentReq4PayType values.
func (CreatePaymentReq4PayType) AllValues() []CreatePaymentReq4PayType {
	return []CreatePaymentReq4PayType{
		CreatePaymentReq4PayTypeCard,
		CreatePaymentReq4PayTypeKonbini,
		CreatePaymentReq4PayTypePaypay,
		CreatePaymentReq4PayTypeApplepay,
		CreatePaymentReq4PayTypeDirectdebit,
		CreatePaymentReq4PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentReq4PayType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentReq4PayTypeCard:
		return []byte(s), nil
	case CreatePaymentReq4PayTypeKonbini:
		return []byte(s), nil
	case CreatePaymentReq4PayTypePaypay:
		return []byte(s), nil
	case CreatePaymentReq4PayTypeApplepay:
		return []byte(s), nil
	case CreatePaymentReq4PayTypeDirectdebit:
		return []byte(s), nil
	case CreatePaymentReq4PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentReq4PayType) UnmarshalText(data []byte) error {
	switch CreatePaymentReq4PayType(data) {
	case CreatePaymentReq4PayTypeCard:
		*s = CreatePaymentReq4PayTypeCard
		return nil
	case CreatePaymentReq4PayTypeKonbini:
		*s = CreatePaymentReq4PayTypeKonbini
		return nil
	case CreatePaymentReq4PayTypePaypay:
		*s = CreatePaymentReq4PayTypePaypay
		return nil
	case CreatePaymentReq4PayTypeApplepay:
		*s = CreatePaymentReq4PayTypeApplepay
		return nil
	case CreatePaymentReq4PayTypeDirectdebit:
		*s = CreatePaymentReq4PayTypeDirectdebit
		return nil
	case CreatePaymentReq4PayTypeVirtualaccount:
		*s = CreatePaymentReq4PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Customer
type Customer struct {
	// 顧客ID.
	ID OptString `json:"id"`
	// 顧客の名前.
	Name OptNilString `json:"name"`
	// 顧客のメールアドレス\
	// 形式： RFC5322.
	Email OptNilString `json:"email"`
	// 顧客の電話番号の国コード\
	// 形式： ITU-T E.164.
	PhoneCc OptNilString `json:"phone_cc"`
	// 顧客の電話番号.
	PhoneNo OptNilString `json:"phone_no"`
	// 顧客の住所の国コード\
	// 形式： ISO 3166-1 numeric.
	AddrCountry OptNilString `json:"addr_country"`
	// 顧客の住所の州コードまたは都道府県コード\
	// 参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.
	// html).
	AddrState OptNilString `json:"addr_state"`
	// 顧客の住所の都市名.
	AddrCity OptNilString `json:"addr_city"`
	// 顧客の住所の番地・区画.
	AddrLine1 OptNilString `json:"addr_line_1"`
	// 顧客の住所の建物名・部屋番号.
	AddrLine2 OptNilString `json:"addr_line_2"`
	// 顧客の住所 その他.
	AddrLine3 OptNilString `json:"addr_line_3"`
	// 顧客の住所の郵便番号.
	AddrPostCode OptNilString `json:"addr_post_code"`
	// 決済手段（カード）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上のカードが登録済み.
	CardRegistration OptNilCustomerCardRegistration `json:"card_registration"`
	// 決済手段（口座振替）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上の振替用口座が登録済み.
	DirectdebitRegistration OptNilCustomerDirectdebitRegistration `json:"directdebit_registration"`
	Created                 OptString                             `json:"created"`
	Updated                 *NilString                            `json:"updated"`
}

// GetID returns the value of ID.
func (s *Customer) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *Customer) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *Customer) GetEmail() OptNilString {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *Customer) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *Customer) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCountry returns the value of AddrCountry.
func (s *Customer) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrState returns the value of AddrState.
func (s *Customer) GetAddrState() OptNilString {
	return s.AddrState
}

// GetAddrCity returns the value of AddrCity.
func (s *Customer) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *Customer) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *Customer) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *Customer) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *Customer) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// GetCardRegistration returns the value of CardRegistration.
func (s *Customer) GetCardRegistration() OptNilCustomerCardRegistration {
	return s.CardRegistration
}

// GetDirectdebitRegistration returns the value of DirectdebitRegistration.
func (s *Customer) GetDirectdebitRegistration() OptNilCustomerDirectdebitRegistration {
	return s.DirectdebitRegistration
}

// GetCreated returns the value of Created.
func (s *Customer) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *Customer) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *Customer) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Customer) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *Customer) SetEmail(val OptNilString) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *Customer) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *Customer) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *Customer) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrState sets the value of AddrState.
func (s *Customer) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetAddrCity sets the value of AddrCity.
func (s *Customer) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *Customer) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *Customer) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *Customer) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *Customer) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// SetCardRegistration sets the value of CardRegistration.
func (s *Customer) SetCardRegistration(val OptNilCustomerCardRegistration) {
	s.CardRegistration = val
}

// SetDirectdebitRegistration sets the value of DirectdebitRegistration.
func (s *Customer) SetDirectdebitRegistration(val OptNilCustomerDirectdebitRegistration) {
	s.DirectdebitRegistration = val
}

// SetCreated sets the value of Created.
func (s *Customer) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *Customer) SetUpdated(val *NilString) {
	s.Updated = val
}

// Ref: #/components/schemas/CustomerCard.Creating.Request
type CustomerCardCreatingRequest struct {
	Token       string                                 `json:"token"`
	DefaultFlag CustomerCardCreatingRequestDefaultFlag `json:"default_flag"`
}

// GetToken returns the value of Token.
func (s *CustomerCardCreatingRequest) GetToken() string {
	return s.Token
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerCardCreatingRequest) GetDefaultFlag() CustomerCardCreatingRequestDefaultFlag {
	return s.DefaultFlag
}

// SetToken sets the value of Token.
func (s *CustomerCardCreatingRequest) SetToken(val string) {
	s.Token = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerCardCreatingRequest) SetDefaultFlag(val CustomerCardCreatingRequestDefaultFlag) {
	s.DefaultFlag = val
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type CustomerCardCreatingRequestDefaultFlag string

const (
	CustomerCardCreatingRequestDefaultFlag0 CustomerCardCreatingRequestDefaultFlag = "0"
	CustomerCardCreatingRequestDefaultFlag1 CustomerCardCreatingRequestDefaultFlag = "1"
)

// AllValues returns all CustomerCardCreatingRequestDefaultFlag values.
func (CustomerCardCreatingRequestDefaultFlag) AllValues() []CustomerCardCreatingRequestDefaultFlag {
	return []CustomerCardCreatingRequestDefaultFlag{
		CustomerCardCreatingRequestDefaultFlag0,
		CustomerCardCreatingRequestDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardCreatingRequestDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardCreatingRequestDefaultFlag0:
		return []byte(s), nil
	case CustomerCardCreatingRequestDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardCreatingRequestDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerCardCreatingRequestDefaultFlag(data) {
	case CustomerCardCreatingRequestDefaultFlag0:
		*s = CustomerCardCreatingRequestDefaultFlag0
		return nil
	case CustomerCardCreatingRequestDefaultFlag1:
		*s = CustomerCardCreatingRequestDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerCard.Creating.Response
type CustomerCardCreatingResponse struct {
	// カードID.
	ID OptString `json:"id"`
	// 顧客ID\
	// このカードが紐づく顧客のID.
	CustomerID OptString `json:"customer_id"`
	// デフォルトフラグ。\
	// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
	// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
	// - `0`: デフォルトカードではない
	// - `1`: デフォルトカード.
	DefaultFlag OptCustomerCardCreatingResponseDefaultFlag `json:"default_flag"`
	CardNo      OptString                                  `json:"card_no"`
	Expire      *NilString                                 `json:"expire"`
	HolderName  *NilString                                 `json:"holder_name"`
	Type        OptCustomerCardCreatingResponseType        `json:"type"`
	Brand       OptCustomerCardCreatingResponseBrand       `json:"brand"`
	CardNoHash  OptString                                  `json:"card_no_hash"`
	Created     OptString                                  `json:"created"`
	Updated     *NilString                                 `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomerCardCreatingResponse) GetID() OptString {
	return s.ID
}

// GetCustomerID returns the value of CustomerID.
func (s *CustomerCardCreatingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerCardCreatingResponse) GetDefaultFlag() OptCustomerCardCreatingResponseDefaultFlag {
	return s.DefaultFlag
}

// GetCardNo returns the value of CardNo.
func (s *CustomerCardCreatingResponse) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CustomerCardCreatingResponse) GetExpire() *NilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CustomerCardCreatingResponse) GetHolderName() *NilString {
	return s.HolderName
}

// GetType returns the value of Type.
func (s *CustomerCardCreatingResponse) GetType() OptCustomerCardCreatingResponseType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *CustomerCardCreatingResponse) GetBrand() OptCustomerCardCreatingResponseBrand {
	return s.Brand
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CustomerCardCreatingResponse) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetCreated returns the value of Created.
func (s *CustomerCardCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerCardCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomerCardCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CustomerCardCreatingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerCardCreatingResponse) SetDefaultFlag(val OptCustomerCardCreatingResponseDefaultFlag) {
	s.DefaultFlag = val
}

// SetCardNo sets the value of CardNo.
func (s *CustomerCardCreatingResponse) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CustomerCardCreatingResponse) SetExpire(val *NilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CustomerCardCreatingResponse) SetHolderName(val *NilString) {
	s.HolderName = val
}

// SetType sets the value of Type.
func (s *CustomerCardCreatingResponse) SetType(val OptCustomerCardCreatingResponseType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *CustomerCardCreatingResponse) SetBrand(val OptCustomerCardCreatingResponseBrand) {
	s.Brand = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CustomerCardCreatingResponse) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetCreated sets the value of Created.
func (s *CustomerCardCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerCardCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*CustomerCardCreatingResponse) createCustomerCardRes() {}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CustomerCardCreatingResponseBrand string

const (
	CustomerCardCreatingResponseBrandVISA     CustomerCardCreatingResponseBrand = "VISA"
	CustomerCardCreatingResponseBrandMASTER   CustomerCardCreatingResponseBrand = "MASTER"
	CustomerCardCreatingResponseBrandJCB      CustomerCardCreatingResponseBrand = "JCB"
	CustomerCardCreatingResponseBrandAMEX     CustomerCardCreatingResponseBrand = "AMEX"
	CustomerCardCreatingResponseBrandDINERS   CustomerCardCreatingResponseBrand = "DINERS"
	CustomerCardCreatingResponseBrandDISCOVER CustomerCardCreatingResponseBrand = "DISCOVER"
	CustomerCardCreatingResponseBrandEmpty    CustomerCardCreatingResponseBrand = ""
)

// AllValues returns all CustomerCardCreatingResponseBrand values.
func (CustomerCardCreatingResponseBrand) AllValues() []CustomerCardCreatingResponseBrand {
	return []CustomerCardCreatingResponseBrand{
		CustomerCardCreatingResponseBrandVISA,
		CustomerCardCreatingResponseBrandMASTER,
		CustomerCardCreatingResponseBrandJCB,
		CustomerCardCreatingResponseBrandAMEX,
		CustomerCardCreatingResponseBrandDINERS,
		CustomerCardCreatingResponseBrandDISCOVER,
		CustomerCardCreatingResponseBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardCreatingResponseBrand) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardCreatingResponseBrandVISA:
		return []byte(s), nil
	case CustomerCardCreatingResponseBrandMASTER:
		return []byte(s), nil
	case CustomerCardCreatingResponseBrandJCB:
		return []byte(s), nil
	case CustomerCardCreatingResponseBrandAMEX:
		return []byte(s), nil
	case CustomerCardCreatingResponseBrandDINERS:
		return []byte(s), nil
	case CustomerCardCreatingResponseBrandDISCOVER:
		return []byte(s), nil
	case CustomerCardCreatingResponseBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardCreatingResponseBrand) UnmarshalText(data []byte) error {
	switch CustomerCardCreatingResponseBrand(data) {
	case CustomerCardCreatingResponseBrandVISA:
		*s = CustomerCardCreatingResponseBrandVISA
		return nil
	case CustomerCardCreatingResponseBrandMASTER:
		*s = CustomerCardCreatingResponseBrandMASTER
		return nil
	case CustomerCardCreatingResponseBrandJCB:
		*s = CustomerCardCreatingResponseBrandJCB
		return nil
	case CustomerCardCreatingResponseBrandAMEX:
		*s = CustomerCardCreatingResponseBrandAMEX
		return nil
	case CustomerCardCreatingResponseBrandDINERS:
		*s = CustomerCardCreatingResponseBrandDINERS
		return nil
	case CustomerCardCreatingResponseBrandDISCOVER:
		*s = CustomerCardCreatingResponseBrandDISCOVER
		return nil
	case CustomerCardCreatingResponseBrandEmpty:
		*s = CustomerCardCreatingResponseBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type CustomerCardCreatingResponseDefaultFlag string

const (
	CustomerCardCreatingResponseDefaultFlag0 CustomerCardCreatingResponseDefaultFlag = "0"
	CustomerCardCreatingResponseDefaultFlag1 CustomerCardCreatingResponseDefaultFlag = "1"
)

// AllValues returns all CustomerCardCreatingResponseDefaultFlag values.
func (CustomerCardCreatingResponseDefaultFlag) AllValues() []CustomerCardCreatingResponseDefaultFlag {
	return []CustomerCardCreatingResponseDefaultFlag{
		CustomerCardCreatingResponseDefaultFlag0,
		CustomerCardCreatingResponseDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardCreatingResponseDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardCreatingResponseDefaultFlag0:
		return []byte(s), nil
	case CustomerCardCreatingResponseDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardCreatingResponseDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerCardCreatingResponseDefaultFlag(data) {
	case CustomerCardCreatingResponseDefaultFlag0:
		*s = CustomerCardCreatingResponseDefaultFlag0
		return nil
	case CustomerCardCreatingResponseDefaultFlag1:
		*s = CustomerCardCreatingResponseDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// クレジットカード種別。
// - `0`: 不明（[テストカード](https://docs.fincode.
// jp/develop_support/test_resources)を含む）
// - `1`: デビットカード
// - `2`: プリペイドカード
// - `3`: クレジットカード.
type CustomerCardCreatingResponseType string

const (
	CustomerCardCreatingResponseType0 CustomerCardCreatingResponseType = "0"
	CustomerCardCreatingResponseType1 CustomerCardCreatingResponseType = "1"
	CustomerCardCreatingResponseType2 CustomerCardCreatingResponseType = "2"
	CustomerCardCreatingResponseType3 CustomerCardCreatingResponseType = "3"
)

// AllValues returns all CustomerCardCreatingResponseType values.
func (CustomerCardCreatingResponseType) AllValues() []CustomerCardCreatingResponseType {
	return []CustomerCardCreatingResponseType{
		CustomerCardCreatingResponseType0,
		CustomerCardCreatingResponseType1,
		CustomerCardCreatingResponseType2,
		CustomerCardCreatingResponseType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardCreatingResponseType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardCreatingResponseType0:
		return []byte(s), nil
	case CustomerCardCreatingResponseType1:
		return []byte(s), nil
	case CustomerCardCreatingResponseType2:
		return []byte(s), nil
	case CustomerCardCreatingResponseType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardCreatingResponseType) UnmarshalText(data []byte) error {
	switch CustomerCardCreatingResponseType(data) {
	case CustomerCardCreatingResponseType0:
		*s = CustomerCardCreatingResponseType0
		return nil
	case CustomerCardCreatingResponseType1:
		*s = CustomerCardCreatingResponseType1
		return nil
	case CustomerCardCreatingResponseType2:
		*s = CustomerCardCreatingResponseType2
		return nil
	case CustomerCardCreatingResponseType3:
		*s = CustomerCardCreatingResponseType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerCard.Deleting.Response
type CustomerCardDeletingResponse struct {
	// 削除されたカードのID.
	ID OptString `json:"id"`
	// 削除されたカードを持つ顧客のID.
	CustomerID OptString                                 `json:"customer_id"`
	DeleteFlag OptCustomerCardDeletingResponseDeleteFlag `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *CustomerCardDeletingResponse) GetID() OptString {
	return s.ID
}

// GetCustomerID returns the value of CustomerID.
func (s *CustomerCardDeletingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomerCardDeletingResponse) GetDeleteFlag() OptCustomerCardDeletingResponseDeleteFlag {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *CustomerCardDeletingResponse) SetID(val OptString) {
	s.ID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CustomerCardDeletingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomerCardDeletingResponse) SetDeleteFlag(val OptCustomerCardDeletingResponseDeleteFlag) {
	s.DeleteFlag = val
}

func (*CustomerCardDeletingResponse) deleteCustomerCardRes() {}

// 削除フラグ.
type CustomerCardDeletingResponseDeleteFlag string

const (
	CustomerCardDeletingResponseDeleteFlag1 CustomerCardDeletingResponseDeleteFlag = "1"
	CustomerCardDeletingResponseDeleteFlag0 CustomerCardDeletingResponseDeleteFlag = "0"
)

// AllValues returns all CustomerCardDeletingResponseDeleteFlag values.
func (CustomerCardDeletingResponseDeleteFlag) AllValues() []CustomerCardDeletingResponseDeleteFlag {
	return []CustomerCardDeletingResponseDeleteFlag{
		CustomerCardDeletingResponseDeleteFlag1,
		CustomerCardDeletingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardDeletingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardDeletingResponseDeleteFlag1:
		return []byte(s), nil
	case CustomerCardDeletingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardDeletingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch CustomerCardDeletingResponseDeleteFlag(data) {
	case CustomerCardDeletingResponseDeleteFlag1:
		*s = CustomerCardDeletingResponseDeleteFlag1
		return nil
	case CustomerCardDeletingResponseDeleteFlag0:
		*s = CustomerCardDeletingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerCard.ListRetrieving.Response
type CustomerCardListRetrievingResponse struct {
	List []Card `json:"list"`
}

// GetList returns the value of List.
func (s *CustomerCardListRetrievingResponse) GetList() []Card {
	return s.List
}

// SetList sets the value of List.
func (s *CustomerCardListRetrievingResponse) SetList(val []Card) {
	s.List = val
}

func (*CustomerCardListRetrievingResponse) retrieveCustomerCardListRes() {}

// 決済手段（カード）登録状況
// - `0`: 未登録
// - `1`: 1件以上のカードが登録済み.
type CustomerCardRegistration string

const (
	CustomerCardRegistration0 CustomerCardRegistration = "0"
	CustomerCardRegistration1 CustomerCardRegistration = "1"
)

// AllValues returns all CustomerCardRegistration values.
func (CustomerCardRegistration) AllValues() []CustomerCardRegistration {
	return []CustomerCardRegistration{
		CustomerCardRegistration0,
		CustomerCardRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardRegistration0:
		return []byte(s), nil
	case CustomerCardRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardRegistration) UnmarshalText(data []byte) error {
	switch CustomerCardRegistration(data) {
	case CustomerCardRegistration0:
		*s = CustomerCardRegistration0
		return nil
	case CustomerCardRegistration1:
		*s = CustomerCardRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerCard.Retrieving.Response
type CustomerCardRetrievingResponse struct {
	// カードID.
	ID OptString `json:"id"`
	// 顧客ID\
	// このカードが紐づく顧客のID.
	CustomerID OptString `json:"customer_id"`
	// デフォルトフラグ。\
	// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
	// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
	// - `0`: デフォルトカードではない
	// - `1`: デフォルトカード.
	DefaultFlag OptCustomerCardRetrievingResponseDefaultFlag `json:"default_flag"`
	CardNo      OptString                                    `json:"card_no"`
	Expire      *NilString                                   `json:"expire"`
	HolderName  *NilString                                   `json:"holder_name"`
	Type        OptCustomerCardRetrievingResponseType        `json:"type"`
	Brand       OptCustomerCardRetrievingResponseBrand       `json:"brand"`
	CardNoHash  OptString                                    `json:"card_no_hash"`
	Created     OptString                                    `json:"created"`
	Updated     *NilString                                   `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomerCardRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetCustomerID returns the value of CustomerID.
func (s *CustomerCardRetrievingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerCardRetrievingResponse) GetDefaultFlag() OptCustomerCardRetrievingResponseDefaultFlag {
	return s.DefaultFlag
}

// GetCardNo returns the value of CardNo.
func (s *CustomerCardRetrievingResponse) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CustomerCardRetrievingResponse) GetExpire() *NilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CustomerCardRetrievingResponse) GetHolderName() *NilString {
	return s.HolderName
}

// GetType returns the value of Type.
func (s *CustomerCardRetrievingResponse) GetType() OptCustomerCardRetrievingResponseType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *CustomerCardRetrievingResponse) GetBrand() OptCustomerCardRetrievingResponseBrand {
	return s.Brand
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CustomerCardRetrievingResponse) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetCreated returns the value of Created.
func (s *CustomerCardRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerCardRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomerCardRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CustomerCardRetrievingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerCardRetrievingResponse) SetDefaultFlag(val OptCustomerCardRetrievingResponseDefaultFlag) {
	s.DefaultFlag = val
}

// SetCardNo sets the value of CardNo.
func (s *CustomerCardRetrievingResponse) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CustomerCardRetrievingResponse) SetExpire(val *NilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CustomerCardRetrievingResponse) SetHolderName(val *NilString) {
	s.HolderName = val
}

// SetType sets the value of Type.
func (s *CustomerCardRetrievingResponse) SetType(val OptCustomerCardRetrievingResponseType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *CustomerCardRetrievingResponse) SetBrand(val OptCustomerCardRetrievingResponseBrand) {
	s.Brand = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CustomerCardRetrievingResponse) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetCreated sets the value of Created.
func (s *CustomerCardRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerCardRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*CustomerCardRetrievingResponse) retrieveCustomerCardRes() {}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CustomerCardRetrievingResponseBrand string

const (
	CustomerCardRetrievingResponseBrandVISA     CustomerCardRetrievingResponseBrand = "VISA"
	CustomerCardRetrievingResponseBrandMASTER   CustomerCardRetrievingResponseBrand = "MASTER"
	CustomerCardRetrievingResponseBrandJCB      CustomerCardRetrievingResponseBrand = "JCB"
	CustomerCardRetrievingResponseBrandAMEX     CustomerCardRetrievingResponseBrand = "AMEX"
	CustomerCardRetrievingResponseBrandDINERS   CustomerCardRetrievingResponseBrand = "DINERS"
	CustomerCardRetrievingResponseBrandDISCOVER CustomerCardRetrievingResponseBrand = "DISCOVER"
	CustomerCardRetrievingResponseBrandEmpty    CustomerCardRetrievingResponseBrand = ""
)

// AllValues returns all CustomerCardRetrievingResponseBrand values.
func (CustomerCardRetrievingResponseBrand) AllValues() []CustomerCardRetrievingResponseBrand {
	return []CustomerCardRetrievingResponseBrand{
		CustomerCardRetrievingResponseBrandVISA,
		CustomerCardRetrievingResponseBrandMASTER,
		CustomerCardRetrievingResponseBrandJCB,
		CustomerCardRetrievingResponseBrandAMEX,
		CustomerCardRetrievingResponseBrandDINERS,
		CustomerCardRetrievingResponseBrandDISCOVER,
		CustomerCardRetrievingResponseBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardRetrievingResponseBrand) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardRetrievingResponseBrandVISA:
		return []byte(s), nil
	case CustomerCardRetrievingResponseBrandMASTER:
		return []byte(s), nil
	case CustomerCardRetrievingResponseBrandJCB:
		return []byte(s), nil
	case CustomerCardRetrievingResponseBrandAMEX:
		return []byte(s), nil
	case CustomerCardRetrievingResponseBrandDINERS:
		return []byte(s), nil
	case CustomerCardRetrievingResponseBrandDISCOVER:
		return []byte(s), nil
	case CustomerCardRetrievingResponseBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardRetrievingResponseBrand) UnmarshalText(data []byte) error {
	switch CustomerCardRetrievingResponseBrand(data) {
	case CustomerCardRetrievingResponseBrandVISA:
		*s = CustomerCardRetrievingResponseBrandVISA
		return nil
	case CustomerCardRetrievingResponseBrandMASTER:
		*s = CustomerCardRetrievingResponseBrandMASTER
		return nil
	case CustomerCardRetrievingResponseBrandJCB:
		*s = CustomerCardRetrievingResponseBrandJCB
		return nil
	case CustomerCardRetrievingResponseBrandAMEX:
		*s = CustomerCardRetrievingResponseBrandAMEX
		return nil
	case CustomerCardRetrievingResponseBrandDINERS:
		*s = CustomerCardRetrievingResponseBrandDINERS
		return nil
	case CustomerCardRetrievingResponseBrandDISCOVER:
		*s = CustomerCardRetrievingResponseBrandDISCOVER
		return nil
	case CustomerCardRetrievingResponseBrandEmpty:
		*s = CustomerCardRetrievingResponseBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type CustomerCardRetrievingResponseDefaultFlag string

const (
	CustomerCardRetrievingResponseDefaultFlag0 CustomerCardRetrievingResponseDefaultFlag = "0"
	CustomerCardRetrievingResponseDefaultFlag1 CustomerCardRetrievingResponseDefaultFlag = "1"
)

// AllValues returns all CustomerCardRetrievingResponseDefaultFlag values.
func (CustomerCardRetrievingResponseDefaultFlag) AllValues() []CustomerCardRetrievingResponseDefaultFlag {
	return []CustomerCardRetrievingResponseDefaultFlag{
		CustomerCardRetrievingResponseDefaultFlag0,
		CustomerCardRetrievingResponseDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardRetrievingResponseDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardRetrievingResponseDefaultFlag0:
		return []byte(s), nil
	case CustomerCardRetrievingResponseDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardRetrievingResponseDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerCardRetrievingResponseDefaultFlag(data) {
	case CustomerCardRetrievingResponseDefaultFlag0:
		*s = CustomerCardRetrievingResponseDefaultFlag0
		return nil
	case CustomerCardRetrievingResponseDefaultFlag1:
		*s = CustomerCardRetrievingResponseDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// クレジットカード種別。
// - `0`: 不明（[テストカード](https://docs.fincode.
// jp/develop_support/test_resources)を含む）
// - `1`: デビットカード
// - `2`: プリペイドカード
// - `3`: クレジットカード.
type CustomerCardRetrievingResponseType string

const (
	CustomerCardRetrievingResponseType0 CustomerCardRetrievingResponseType = "0"
	CustomerCardRetrievingResponseType1 CustomerCardRetrievingResponseType = "1"
	CustomerCardRetrievingResponseType2 CustomerCardRetrievingResponseType = "2"
	CustomerCardRetrievingResponseType3 CustomerCardRetrievingResponseType = "3"
)

// AllValues returns all CustomerCardRetrievingResponseType values.
func (CustomerCardRetrievingResponseType) AllValues() []CustomerCardRetrievingResponseType {
	return []CustomerCardRetrievingResponseType{
		CustomerCardRetrievingResponseType0,
		CustomerCardRetrievingResponseType1,
		CustomerCardRetrievingResponseType2,
		CustomerCardRetrievingResponseType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardRetrievingResponseType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardRetrievingResponseType0:
		return []byte(s), nil
	case CustomerCardRetrievingResponseType1:
		return []byte(s), nil
	case CustomerCardRetrievingResponseType2:
		return []byte(s), nil
	case CustomerCardRetrievingResponseType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardRetrievingResponseType) UnmarshalText(data []byte) error {
	switch CustomerCardRetrievingResponseType(data) {
	case CustomerCardRetrievingResponseType0:
		*s = CustomerCardRetrievingResponseType0
		return nil
	case CustomerCardRetrievingResponseType1:
		*s = CustomerCardRetrievingResponseType1
		return nil
	case CustomerCardRetrievingResponseType2:
		*s = CustomerCardRetrievingResponseType2
		return nil
	case CustomerCardRetrievingResponseType3:
		*s = CustomerCardRetrievingResponseType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerCard.Updating.Request
type CustomerCardUpdatingRequest struct {
	Token *NilString `json:"token"`
	// デフォルトフラグ。\
	// 指定した場合のみ更新されます。.
	DefaultFlag OptCustomerCardUpdatingRequestDefaultFlag `json:"default_flag"`
	// ※ `token`に入力がある場合は無視\
	// カード名義人名.
	HolderName *NilString `json:"holder_name"`
	// ※ `token`に入力がある場合は無視\
	// カード有効期限.
	Expire *NilString `json:"expire"`
}

// GetToken returns the value of Token.
func (s *CustomerCardUpdatingRequest) GetToken() *NilString {
	return s.Token
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerCardUpdatingRequest) GetDefaultFlag() OptCustomerCardUpdatingRequestDefaultFlag {
	return s.DefaultFlag
}

// GetHolderName returns the value of HolderName.
func (s *CustomerCardUpdatingRequest) GetHolderName() *NilString {
	return s.HolderName
}

// GetExpire returns the value of Expire.
func (s *CustomerCardUpdatingRequest) GetExpire() *NilString {
	return s.Expire
}

// SetToken sets the value of Token.
func (s *CustomerCardUpdatingRequest) SetToken(val *NilString) {
	s.Token = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerCardUpdatingRequest) SetDefaultFlag(val OptCustomerCardUpdatingRequestDefaultFlag) {
	s.DefaultFlag = val
}

// SetHolderName sets the value of HolderName.
func (s *CustomerCardUpdatingRequest) SetHolderName(val *NilString) {
	s.HolderName = val
}

// SetExpire sets the value of Expire.
func (s *CustomerCardUpdatingRequest) SetExpire(val *NilString) {
	s.Expire = val
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type CustomerCardUpdatingRequestDefaultFlag string

const (
	CustomerCardUpdatingRequestDefaultFlag0 CustomerCardUpdatingRequestDefaultFlag = "0"
	CustomerCardUpdatingRequestDefaultFlag1 CustomerCardUpdatingRequestDefaultFlag = "1"
)

// AllValues returns all CustomerCardUpdatingRequestDefaultFlag values.
func (CustomerCardUpdatingRequestDefaultFlag) AllValues() []CustomerCardUpdatingRequestDefaultFlag {
	return []CustomerCardUpdatingRequestDefaultFlag{
		CustomerCardUpdatingRequestDefaultFlag0,
		CustomerCardUpdatingRequestDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardUpdatingRequestDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardUpdatingRequestDefaultFlag0:
		return []byte(s), nil
	case CustomerCardUpdatingRequestDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardUpdatingRequestDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerCardUpdatingRequestDefaultFlag(data) {
	case CustomerCardUpdatingRequestDefaultFlag0:
		*s = CustomerCardUpdatingRequestDefaultFlag0
		return nil
	case CustomerCardUpdatingRequestDefaultFlag1:
		*s = CustomerCardUpdatingRequestDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerCard.Updating.Response
type CustomerCardUpdatingResponse struct {
	// カードID.
	ID OptString `json:"id"`
	// 顧客ID\
	// このカードが紐づく顧客のID.
	CustomerID OptString `json:"customer_id"`
	// デフォルトフラグ。\
	// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
	// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
	// - `0`: デフォルトカードではない
	// - `1`: デフォルトカード.
	DefaultFlag OptCustomerCardUpdatingResponseDefaultFlag `json:"default_flag"`
	CardNo      OptString                                  `json:"card_no"`
	Expire      *NilString                                 `json:"expire"`
	HolderName  *NilString                                 `json:"holder_name"`
	Type        OptCustomerCardUpdatingResponseType        `json:"type"`
	Brand       OptCustomerCardUpdatingResponseBrand       `json:"brand"`
	CardNoHash  OptString                                  `json:"card_no_hash"`
	Created     OptString                                  `json:"created"`
	Updated     *NilString                                 `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomerCardUpdatingResponse) GetID() OptString {
	return s.ID
}

// GetCustomerID returns the value of CustomerID.
func (s *CustomerCardUpdatingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerCardUpdatingResponse) GetDefaultFlag() OptCustomerCardUpdatingResponseDefaultFlag {
	return s.DefaultFlag
}

// GetCardNo returns the value of CardNo.
func (s *CustomerCardUpdatingResponse) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CustomerCardUpdatingResponse) GetExpire() *NilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CustomerCardUpdatingResponse) GetHolderName() *NilString {
	return s.HolderName
}

// GetType returns the value of Type.
func (s *CustomerCardUpdatingResponse) GetType() OptCustomerCardUpdatingResponseType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *CustomerCardUpdatingResponse) GetBrand() OptCustomerCardUpdatingResponseBrand {
	return s.Brand
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CustomerCardUpdatingResponse) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetCreated returns the value of Created.
func (s *CustomerCardUpdatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerCardUpdatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomerCardUpdatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CustomerCardUpdatingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerCardUpdatingResponse) SetDefaultFlag(val OptCustomerCardUpdatingResponseDefaultFlag) {
	s.DefaultFlag = val
}

// SetCardNo sets the value of CardNo.
func (s *CustomerCardUpdatingResponse) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CustomerCardUpdatingResponse) SetExpire(val *NilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CustomerCardUpdatingResponse) SetHolderName(val *NilString) {
	s.HolderName = val
}

// SetType sets the value of Type.
func (s *CustomerCardUpdatingResponse) SetType(val OptCustomerCardUpdatingResponseType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *CustomerCardUpdatingResponse) SetBrand(val OptCustomerCardUpdatingResponseBrand) {
	s.Brand = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CustomerCardUpdatingResponse) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetCreated sets the value of Created.
func (s *CustomerCardUpdatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerCardUpdatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*CustomerCardUpdatingResponse) updateCustomerCardRes() {}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type CustomerCardUpdatingResponseBrand string

const (
	CustomerCardUpdatingResponseBrandVISA     CustomerCardUpdatingResponseBrand = "VISA"
	CustomerCardUpdatingResponseBrandMASTER   CustomerCardUpdatingResponseBrand = "MASTER"
	CustomerCardUpdatingResponseBrandJCB      CustomerCardUpdatingResponseBrand = "JCB"
	CustomerCardUpdatingResponseBrandAMEX     CustomerCardUpdatingResponseBrand = "AMEX"
	CustomerCardUpdatingResponseBrandDINERS   CustomerCardUpdatingResponseBrand = "DINERS"
	CustomerCardUpdatingResponseBrandDISCOVER CustomerCardUpdatingResponseBrand = "DISCOVER"
	CustomerCardUpdatingResponseBrandEmpty    CustomerCardUpdatingResponseBrand = ""
)

// AllValues returns all CustomerCardUpdatingResponseBrand values.
func (CustomerCardUpdatingResponseBrand) AllValues() []CustomerCardUpdatingResponseBrand {
	return []CustomerCardUpdatingResponseBrand{
		CustomerCardUpdatingResponseBrandVISA,
		CustomerCardUpdatingResponseBrandMASTER,
		CustomerCardUpdatingResponseBrandJCB,
		CustomerCardUpdatingResponseBrandAMEX,
		CustomerCardUpdatingResponseBrandDINERS,
		CustomerCardUpdatingResponseBrandDISCOVER,
		CustomerCardUpdatingResponseBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardUpdatingResponseBrand) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardUpdatingResponseBrandVISA:
		return []byte(s), nil
	case CustomerCardUpdatingResponseBrandMASTER:
		return []byte(s), nil
	case CustomerCardUpdatingResponseBrandJCB:
		return []byte(s), nil
	case CustomerCardUpdatingResponseBrandAMEX:
		return []byte(s), nil
	case CustomerCardUpdatingResponseBrandDINERS:
		return []byte(s), nil
	case CustomerCardUpdatingResponseBrandDISCOVER:
		return []byte(s), nil
	case CustomerCardUpdatingResponseBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardUpdatingResponseBrand) UnmarshalText(data []byte) error {
	switch CustomerCardUpdatingResponseBrand(data) {
	case CustomerCardUpdatingResponseBrandVISA:
		*s = CustomerCardUpdatingResponseBrandVISA
		return nil
	case CustomerCardUpdatingResponseBrandMASTER:
		*s = CustomerCardUpdatingResponseBrandMASTER
		return nil
	case CustomerCardUpdatingResponseBrandJCB:
		*s = CustomerCardUpdatingResponseBrandJCB
		return nil
	case CustomerCardUpdatingResponseBrandAMEX:
		*s = CustomerCardUpdatingResponseBrandAMEX
		return nil
	case CustomerCardUpdatingResponseBrandDINERS:
		*s = CustomerCardUpdatingResponseBrandDINERS
		return nil
	case CustomerCardUpdatingResponseBrandDISCOVER:
		*s = CustomerCardUpdatingResponseBrandDISCOVER
		return nil
	case CustomerCardUpdatingResponseBrandEmpty:
		*s = CustomerCardUpdatingResponseBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type CustomerCardUpdatingResponseDefaultFlag string

const (
	CustomerCardUpdatingResponseDefaultFlag0 CustomerCardUpdatingResponseDefaultFlag = "0"
	CustomerCardUpdatingResponseDefaultFlag1 CustomerCardUpdatingResponseDefaultFlag = "1"
)

// AllValues returns all CustomerCardUpdatingResponseDefaultFlag values.
func (CustomerCardUpdatingResponseDefaultFlag) AllValues() []CustomerCardUpdatingResponseDefaultFlag {
	return []CustomerCardUpdatingResponseDefaultFlag{
		CustomerCardUpdatingResponseDefaultFlag0,
		CustomerCardUpdatingResponseDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardUpdatingResponseDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardUpdatingResponseDefaultFlag0:
		return []byte(s), nil
	case CustomerCardUpdatingResponseDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardUpdatingResponseDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerCardUpdatingResponseDefaultFlag(data) {
	case CustomerCardUpdatingResponseDefaultFlag0:
		*s = CustomerCardUpdatingResponseDefaultFlag0
		return nil
	case CustomerCardUpdatingResponseDefaultFlag1:
		*s = CustomerCardUpdatingResponseDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// クレジットカード種別。
// - `0`: 不明（[テストカード](https://docs.fincode.
// jp/develop_support/test_resources)を含む）
// - `1`: デビットカード
// - `2`: プリペイドカード
// - `3`: クレジットカード.
type CustomerCardUpdatingResponseType string

const (
	CustomerCardUpdatingResponseType0 CustomerCardUpdatingResponseType = "0"
	CustomerCardUpdatingResponseType1 CustomerCardUpdatingResponseType = "1"
	CustomerCardUpdatingResponseType2 CustomerCardUpdatingResponseType = "2"
	CustomerCardUpdatingResponseType3 CustomerCardUpdatingResponseType = "3"
)

// AllValues returns all CustomerCardUpdatingResponseType values.
func (CustomerCardUpdatingResponseType) AllValues() []CustomerCardUpdatingResponseType {
	return []CustomerCardUpdatingResponseType{
		CustomerCardUpdatingResponseType0,
		CustomerCardUpdatingResponseType1,
		CustomerCardUpdatingResponseType2,
		CustomerCardUpdatingResponseType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCardUpdatingResponseType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCardUpdatingResponseType0:
		return []byte(s), nil
	case CustomerCardUpdatingResponseType1:
		return []byte(s), nil
	case CustomerCardUpdatingResponseType2:
		return []byte(s), nil
	case CustomerCardUpdatingResponseType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCardUpdatingResponseType) UnmarshalText(data []byte) error {
	switch CustomerCardUpdatingResponseType(data) {
	case CustomerCardUpdatingResponseType0:
		*s = CustomerCardUpdatingResponseType0
		return nil
	case CustomerCardUpdatingResponseType1:
		*s = CustomerCardUpdatingResponseType1
		return nil
	case CustomerCardUpdatingResponseType2:
		*s = CustomerCardUpdatingResponseType2
		return nil
	case CustomerCardUpdatingResponseType3:
		*s = CustomerCardUpdatingResponseType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Customer.Creating.Request
type CustomerCreatingRequest struct {
	// 顧客ID\
	// 任意の値を指定できます。指定しない場合はfincodeが自動的に生成します。\
	// 一度fincodeに登録された顧客IDは削除後も利用できません。.
	ID           OptNilString `json:"id"`
	Name         OptNilString `json:"name"`
	Email        OptNilString `json:"email"`
	PhoneCc      OptNilString `json:"phone_cc"`
	PhoneNo      OptNilString `json:"phone_no"`
	AddrCountry  OptNilString `json:"addr_country"`
	AddrState    OptNilString `json:"addr_state"`
	AddrCity     OptNilString `json:"addr_city"`
	AddrLine1    OptNilString `json:"addr_line_1"`
	AddrLine2    OptNilString `json:"addr_line_2"`
	AddrLine3    OptNilString `json:"addr_line_3"`
	AddrPostCode OptNilString `json:"addr_post_code"`
}

// GetID returns the value of ID.
func (s *CustomerCreatingRequest) GetID() OptNilString {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomerCreatingRequest) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomerCreatingRequest) GetEmail() OptNilString {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomerCreatingRequest) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomerCreatingRequest) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomerCreatingRequest) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrState returns the value of AddrState.
func (s *CustomerCreatingRequest) GetAddrState() OptNilString {
	return s.AddrState
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomerCreatingRequest) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomerCreatingRequest) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomerCreatingRequest) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomerCreatingRequest) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomerCreatingRequest) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// SetID sets the value of ID.
func (s *CustomerCreatingRequest) SetID(val OptNilString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomerCreatingRequest) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomerCreatingRequest) SetEmail(val OptNilString) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomerCreatingRequest) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomerCreatingRequest) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomerCreatingRequest) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomerCreatingRequest) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomerCreatingRequest) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomerCreatingRequest) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomerCreatingRequest) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomerCreatingRequest) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomerCreatingRequest) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// Ref: #/components/schemas/Customer.Creating.Response
type CustomerCreatingResponse struct {
	// 顧客ID.
	ID OptString `json:"id"`
	// 顧客の名前.
	Name OptNilString `json:"name"`
	// 顧客のメールアドレス\
	// 形式： RFC5322.
	Email OptNilString `json:"email"`
	// 顧客の電話番号の国コード\
	// 形式： ITU-T E.164.
	PhoneCc OptNilString `json:"phone_cc"`
	// 顧客の電話番号.
	PhoneNo OptNilString `json:"phone_no"`
	// 顧客の住所の国コード\
	// 形式： ISO 3166-1 numeric.
	AddrCountry OptNilString `json:"addr_country"`
	// 顧客の住所の州コードまたは都道府県コード\
	// 参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.
	// html).
	AddrState OptNilString `json:"addr_state"`
	// 顧客の住所の都市名.
	AddrCity OptNilString `json:"addr_city"`
	// 顧客の住所の番地・区画.
	AddrLine1 OptNilString `json:"addr_line_1"`
	// 顧客の住所の建物名・部屋番号.
	AddrLine2 OptNilString `json:"addr_line_2"`
	// 顧客の住所 その他.
	AddrLine3 OptNilString `json:"addr_line_3"`
	// 顧客の住所の郵便番号.
	AddrPostCode OptNilString `json:"addr_post_code"`
	// 決済手段（カード）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上のカードが登録済み.
	CardRegistration OptNilCustomerCreatingResponseCardRegistration `json:"card_registration"`
	// 決済手段（口座振替）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上の振替用口座が登録済み.
	DirectdebitRegistration OptNilCustomerCreatingResponseDirectdebitRegistration `json:"directdebit_registration"`
	Created                 OptString                                             `json:"created"`
	Updated                 *NilString                                            `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomerCreatingResponse) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomerCreatingResponse) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomerCreatingResponse) GetEmail() OptNilString {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomerCreatingResponse) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomerCreatingResponse) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomerCreatingResponse) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrState returns the value of AddrState.
func (s *CustomerCreatingResponse) GetAddrState() OptNilString {
	return s.AddrState
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomerCreatingResponse) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomerCreatingResponse) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomerCreatingResponse) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomerCreatingResponse) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomerCreatingResponse) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// GetCardRegistration returns the value of CardRegistration.
func (s *CustomerCreatingResponse) GetCardRegistration() OptNilCustomerCreatingResponseCardRegistration {
	return s.CardRegistration
}

// GetDirectdebitRegistration returns the value of DirectdebitRegistration.
func (s *CustomerCreatingResponse) GetDirectdebitRegistration() OptNilCustomerCreatingResponseDirectdebitRegistration {
	return s.DirectdebitRegistration
}

// GetCreated returns the value of Created.
func (s *CustomerCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomerCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomerCreatingResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomerCreatingResponse) SetEmail(val OptNilString) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomerCreatingResponse) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomerCreatingResponse) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomerCreatingResponse) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomerCreatingResponse) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomerCreatingResponse) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomerCreatingResponse) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomerCreatingResponse) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomerCreatingResponse) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomerCreatingResponse) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// SetCardRegistration sets the value of CardRegistration.
func (s *CustomerCreatingResponse) SetCardRegistration(val OptNilCustomerCreatingResponseCardRegistration) {
	s.CardRegistration = val
}

// SetDirectdebitRegistration sets the value of DirectdebitRegistration.
func (s *CustomerCreatingResponse) SetDirectdebitRegistration(val OptNilCustomerCreatingResponseDirectdebitRegistration) {
	s.DirectdebitRegistration = val
}

// SetCreated sets the value of Created.
func (s *CustomerCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*CustomerCreatingResponse) createCustomerRes() {}

// 決済手段（カード）登録状況
// - `0`: 未登録
// - `1`: 1件以上のカードが登録済み.
type CustomerCreatingResponseCardRegistration string

const (
	CustomerCreatingResponseCardRegistration0 CustomerCreatingResponseCardRegistration = "0"
	CustomerCreatingResponseCardRegistration1 CustomerCreatingResponseCardRegistration = "1"
)

// AllValues returns all CustomerCreatingResponseCardRegistration values.
func (CustomerCreatingResponseCardRegistration) AllValues() []CustomerCreatingResponseCardRegistration {
	return []CustomerCreatingResponseCardRegistration{
		CustomerCreatingResponseCardRegistration0,
		CustomerCreatingResponseCardRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCreatingResponseCardRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCreatingResponseCardRegistration0:
		return []byte(s), nil
	case CustomerCreatingResponseCardRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCreatingResponseCardRegistration) UnmarshalText(data []byte) error {
	switch CustomerCreatingResponseCardRegistration(data) {
	case CustomerCreatingResponseCardRegistration0:
		*s = CustomerCreatingResponseCardRegistration0
		return nil
	case CustomerCreatingResponseCardRegistration1:
		*s = CustomerCreatingResponseCardRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済手段（口座振替）登録状況
// - `0`: 未登録
// - `1`: 1件以上の振替用口座が登録済み.
type CustomerCreatingResponseDirectdebitRegistration string

const (
	CustomerCreatingResponseDirectdebitRegistration0 CustomerCreatingResponseDirectdebitRegistration = "0"
	CustomerCreatingResponseDirectdebitRegistration1 CustomerCreatingResponseDirectdebitRegistration = "1"
)

// AllValues returns all CustomerCreatingResponseDirectdebitRegistration values.
func (CustomerCreatingResponseDirectdebitRegistration) AllValues() []CustomerCreatingResponseDirectdebitRegistration {
	return []CustomerCreatingResponseDirectdebitRegistration{
		CustomerCreatingResponseDirectdebitRegistration0,
		CustomerCreatingResponseDirectdebitRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerCreatingResponseDirectdebitRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerCreatingResponseDirectdebitRegistration0:
		return []byte(s), nil
	case CustomerCreatingResponseDirectdebitRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerCreatingResponseDirectdebitRegistration) UnmarshalText(data []byte) error {
	switch CustomerCreatingResponseDirectdebitRegistration(data) {
	case CustomerCreatingResponseDirectdebitRegistration0:
		*s = CustomerCreatingResponseDirectdebitRegistration0
		return nil
	case CustomerCreatingResponseDirectdebitRegistration1:
		*s = CustomerCreatingResponseDirectdebitRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Customer.Deleting.Response
type CustomerDeletingResponse struct {
	// 削除された顧客のID.
	ID         OptString                             `json:"id"`
	DeleteFlag OptCustomerDeletingResponseDeleteFlag `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *CustomerDeletingResponse) GetID() OptString {
	return s.ID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomerDeletingResponse) GetDeleteFlag() OptCustomerDeletingResponseDeleteFlag {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *CustomerDeletingResponse) SetID(val OptString) {
	s.ID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomerDeletingResponse) SetDeleteFlag(val OptCustomerDeletingResponseDeleteFlag) {
	s.DeleteFlag = val
}

func (*CustomerDeletingResponse) deleteCustomerRes() {}

// 削除フラグ.
type CustomerDeletingResponseDeleteFlag string

const (
	CustomerDeletingResponseDeleteFlag1 CustomerDeletingResponseDeleteFlag = "1"
	CustomerDeletingResponseDeleteFlag0 CustomerDeletingResponseDeleteFlag = "0"
)

// AllValues returns all CustomerDeletingResponseDeleteFlag values.
func (CustomerDeletingResponseDeleteFlag) AllValues() []CustomerDeletingResponseDeleteFlag {
	return []CustomerDeletingResponseDeleteFlag{
		CustomerDeletingResponseDeleteFlag1,
		CustomerDeletingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerDeletingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerDeletingResponseDeleteFlag1:
		return []byte(s), nil
	case CustomerDeletingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerDeletingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch CustomerDeletingResponseDeleteFlag(data) {
	case CustomerDeletingResponseDeleteFlag1:
		*s = CustomerDeletingResponseDeleteFlag1
		return nil
	case CustomerDeletingResponseDeleteFlag0:
		*s = CustomerDeletingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済手段（口座振替）登録状況
// - `0`: 未登録
// - `1`: 1件以上の振替用口座が登録済み.
type CustomerDirectdebitRegistration string

const (
	CustomerDirectdebitRegistration0 CustomerDirectdebitRegistration = "0"
	CustomerDirectdebitRegistration1 CustomerDirectdebitRegistration = "1"
)

// AllValues returns all CustomerDirectdebitRegistration values.
func (CustomerDirectdebitRegistration) AllValues() []CustomerDirectdebitRegistration {
	return []CustomerDirectdebitRegistration{
		CustomerDirectdebitRegistration0,
		CustomerDirectdebitRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerDirectdebitRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerDirectdebitRegistration0:
		return []byte(s), nil
	case CustomerDirectdebitRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerDirectdebitRegistration) UnmarshalText(data []byte) error {
	switch CustomerDirectdebitRegistration(data) {
	case CustomerDirectdebitRegistration0:
		*s = CustomerDirectdebitRegistration0
		return nil
	case CustomerDirectdebitRegistration1:
		*s = CustomerDirectdebitRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Customer.ListRetrieving.Response
type CustomerListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString `json:"link_previous"`
	List         []Customer   `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *CustomerListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *CustomerListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *CustomerListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *CustomerListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *CustomerListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *CustomerListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *CustomerListRetrievingResponse) GetList() []Customer {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *CustomerListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *CustomerListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *CustomerListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *CustomerListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *CustomerListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *CustomerListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *CustomerListRetrievingResponse) SetList(val []Customer) {
	s.List = val
}

func (*CustomerListRetrievingResponse) retrieveCustomerListRes() {}

// Ref: #/components/schemas/CustomerPaymentMethod.Creating.Request
type CustomerPaymentMethodCreatingRequest struct {
	PayType            CustomerPaymentMethodCreatingRequestPayType     `json:"pay_type"`
	DefaultFlag        CustomerPaymentMethodCreatingRequestDefaultFlag `json:"default_flag"`
	ReturnURL          OptNilString                                    `json:"return_url"`
	ReturnURLOnFailure OptNilString                                    `json:"return_url_on_failure"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 1.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 1.
	ClientField3 OptNilString `json:"client_field_3"`
	// <span class="smallText">※ `pay_type =
	// "Card"`（この決済手段登録がカード情報登録である）のとき必須</span>.
	Card OptNilCustomerPaymentMethodCreatingRequestCard `json:"card"`
	// <span class="smallText">※ `pay_type =
	// "Directdebit"`（この決済手段登録が口座振替用の口座情報登録である）のとき必須</span>.
	Directdebit OptNilCustomerPaymentMethodCreatingRequestDirectdebit `json:"directdebit"`
}

// GetPayType returns the value of PayType.
func (s *CustomerPaymentMethodCreatingRequest) GetPayType() CustomerPaymentMethodCreatingRequestPayType {
	return s.PayType
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerPaymentMethodCreatingRequest) GetDefaultFlag() CustomerPaymentMethodCreatingRequestDefaultFlag {
	return s.DefaultFlag
}

// GetReturnURL returns the value of ReturnURL.
func (s *CustomerPaymentMethodCreatingRequest) GetReturnURL() OptNilString {
	return s.ReturnURL
}

// GetReturnURLOnFailure returns the value of ReturnURLOnFailure.
func (s *CustomerPaymentMethodCreatingRequest) GetReturnURLOnFailure() OptNilString {
	return s.ReturnURLOnFailure
}

// GetClientField1 returns the value of ClientField1.
func (s *CustomerPaymentMethodCreatingRequest) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CustomerPaymentMethodCreatingRequest) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CustomerPaymentMethodCreatingRequest) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetCard returns the value of Card.
func (s *CustomerPaymentMethodCreatingRequest) GetCard() OptNilCustomerPaymentMethodCreatingRequestCard {
	return s.Card
}

// GetDirectdebit returns the value of Directdebit.
func (s *CustomerPaymentMethodCreatingRequest) GetDirectdebit() OptNilCustomerPaymentMethodCreatingRequestDirectdebit {
	return s.Directdebit
}

// SetPayType sets the value of PayType.
func (s *CustomerPaymentMethodCreatingRequest) SetPayType(val CustomerPaymentMethodCreatingRequestPayType) {
	s.PayType = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerPaymentMethodCreatingRequest) SetDefaultFlag(val CustomerPaymentMethodCreatingRequestDefaultFlag) {
	s.DefaultFlag = val
}

// SetReturnURL sets the value of ReturnURL.
func (s *CustomerPaymentMethodCreatingRequest) SetReturnURL(val OptNilString) {
	s.ReturnURL = val
}

// SetReturnURLOnFailure sets the value of ReturnURLOnFailure.
func (s *CustomerPaymentMethodCreatingRequest) SetReturnURLOnFailure(val OptNilString) {
	s.ReturnURLOnFailure = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CustomerPaymentMethodCreatingRequest) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CustomerPaymentMethodCreatingRequest) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CustomerPaymentMethodCreatingRequest) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetCard sets the value of Card.
func (s *CustomerPaymentMethodCreatingRequest) SetCard(val OptNilCustomerPaymentMethodCreatingRequestCard) {
	s.Card = val
}

// SetDirectdebit sets the value of Directdebit.
func (s *CustomerPaymentMethodCreatingRequest) SetDirectdebit(val OptNilCustomerPaymentMethodCreatingRequestDirectdebit) {
	s.Directdebit = val
}

// <span class="smallText">※ `pay_type =
// "Card"`（この決済手段登録がカード情報登録である）のとき必須</span>.
type CustomerPaymentMethodCreatingRequestCard struct {
	Token                     string                                                                  `json:"token"`
	TdsType                   OptNilCustomerPaymentMethodCreatingRequestCardTdsType                   `json:"tds_type"`
	Tds2Type                  OptNilCustomerPaymentMethodCreatingRequestCardTds2Type                  `json:"tds2_type"`
	TdTenantName              OptNilString                                                            `json:"td_tenant_name"`
	Tds2ChAccChange           OptNilString                                                            `json:"tds2_ch_acc_change"`
	Tds2ChAccDate             OptNilString                                                            `json:"tds2_ch_acc_date"`
	Tds2ChAccPwChange         OptNilString                                                            `json:"tds2_ch_acc_pw_change"`
	Tds2NbPurchaseAccount     OptNilString                                                            `json:"tds2_nb_purchase_account"`
	Tds2PaymentAccAge         OptNilString                                                            `json:"tds2_payment_acc_age"`
	Tds2ProvisionAttemptsDay  OptNilString                                                            `json:"tds2_provision_attempts_day"`
	Tds2ShipAddressUsage      OptNilString                                                            `json:"tds2_ship_address_usage"`
	Tds2ShipNameInd           OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd           `json:"tds2_ship_name_ind"`
	Tds2SuspiciousAccActivity OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity `json:"tds2_suspicious_acc_activity"`
	Tds2TxnActivityDay        OptNilString                                                            `json:"tds2_txn_activity_day"`
	Tds2TxnActivityYear       OptNilString                                                            `json:"tds2_txn_activity_year"`
	Tds2ThreeDsReqAuthData    OptNilString                                                            `json:"tds2_three_ds_req_auth_data"`
	Tds2ThreeDsReqAuthMethod  OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod  `json:"tds2_three_ds_req_auth_method"`
	Tds2AddrMatch             OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch             `json:"tds2_addr_match"`
	Tds2BillAddrCountry       OptNilString                                                            `json:"tds2_bill_addr_country"`
	Tds2BillAddrState         OptNilString                                                            `json:"tds2_bill_addr_state"`
	Tds2BillAddrCity          OptNilString                                                            `json:"tds2_bill_addr_city"`
	Tds2BillAddrLine1         OptNilString                                                            `json:"tds2_bill_addr_line_1"`
	Tds2BillAddrLine2         OptNilString                                                            `json:"tds2_bill_addr_line_2"`
	Tds2BillAddrLine3         OptNilString                                                            `json:"tds2_bill_addr_line_3"`
	Tds2BillAddrPostCode      OptNilString                                                            `json:"tds2_bill_addr_post_code"`
	Tds2ShipAddrCountry       OptNilString                                                            `json:"tds2_ship_addr_country"`
	Tds2ShipAddrState         OptNilString                                                            `json:"tds2_ship_addr_state"`
	Tds2ShipAddrCity          OptNilString                                                            `json:"tds2_ship_addr_city"`
	Tds2ShipAddrLine1         OptNilString                                                            `json:"tds2_ship_addr_line_1"`
	Tds2ShipAddrLine2         OptNilString                                                            `json:"tds2_ship_addr_line_2"`
	Tds2ShipAddrLine3         OptNilString                                                            `json:"tds2_ship_addr_line_3"`
	Tds2ShipAddrPostCode      OptNilString                                                            `json:"tds2_ship_addr_post_code"`
	Tds2ShipInd               OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd               `json:"tds2_ship_ind"`
	Tds2DeliveryEmailAddress  OptNilString                                                            `json:"tds2_delivery_email_address"`
	Tds2HomePhoneCc           OptNilString                                                            `json:"tds2_home_phone_cc"`
	Tds2HomePhoneNo           OptNilString                                                            `json:"tds2_home_phone_no"`
	Tds2MobilePhoneCc         OptNilString                                                            `json:"tds2_mobile_phone_cc"`
	Tds2MobilePhoneNo         OptNilString                                                            `json:"tds2_mobile_phone_no"`
	Tds2WorkPhoneCc           OptNilString                                                            `json:"tds2_work_phone_cc"`
	Tds2WorkPhoneNo           OptNilString                                                            `json:"tds2_work_phone_no"`
	Tds2DeliveryTimeframe     OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe     `json:"tds2_delivery_timeframe"`
	Tds2PreOrderDate          OptNilString                                                            `json:"tds2_pre_order_date"`
	Tds2PreOrderPurchaseInd   OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd   `json:"tds2_pre_order_purchase_ind"`
	Tds2ReorderItemsInd       OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd       `json:"tds2_reorder_items_ind"`
	Tds2RecurringExpiry       OptNilString                                                            `json:"tds2_recurring_expiry"`
	Tds2RecurringFrequency    OptNilString                                                            `json:"tds2_recurring_frequency"`
	Tds2GiftCardAmount        OptNilString                                                            `json:"tds2_gift_card_amount"`
	Tds2GiftCardCount         OptNilString                                                            `json:"tds2_gift_card_count"`
	Tds2GiftCardCurr          OptNilString                                                            `json:"tds2_gift_card_curr"`
}

// GetToken returns the value of Token.
func (s *CustomerPaymentMethodCreatingRequestCard) GetToken() string {
	return s.Token
}

// GetTdsType returns the value of TdsType.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTdsType() OptNilCustomerPaymentMethodCreatingRequestCardTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2Type() OptNilCustomerPaymentMethodCreatingRequestCardTds2Type {
	return s.Tds2Type
}

// GetTdTenantName returns the value of TdTenantName.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTdTenantName() OptNilString {
	return s.TdTenantName
}

// GetTds2ChAccChange returns the value of Tds2ChAccChange.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ChAccChange() OptNilString {
	return s.Tds2ChAccChange
}

// GetTds2ChAccDate returns the value of Tds2ChAccDate.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ChAccDate() OptNilString {
	return s.Tds2ChAccDate
}

// GetTds2ChAccPwChange returns the value of Tds2ChAccPwChange.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ChAccPwChange() OptNilString {
	return s.Tds2ChAccPwChange
}

// GetTds2NbPurchaseAccount returns the value of Tds2NbPurchaseAccount.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2NbPurchaseAccount() OptNilString {
	return s.Tds2NbPurchaseAccount
}

// GetTds2PaymentAccAge returns the value of Tds2PaymentAccAge.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2PaymentAccAge() OptNilString {
	return s.Tds2PaymentAccAge
}

// GetTds2ProvisionAttemptsDay returns the value of Tds2ProvisionAttemptsDay.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ProvisionAttemptsDay() OptNilString {
	return s.Tds2ProvisionAttemptsDay
}

// GetTds2ShipAddressUsage returns the value of Tds2ShipAddressUsage.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddressUsage() OptNilString {
	return s.Tds2ShipAddressUsage
}

// GetTds2ShipNameInd returns the value of Tds2ShipNameInd.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipNameInd() OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd {
	return s.Tds2ShipNameInd
}

// GetTds2SuspiciousAccActivity returns the value of Tds2SuspiciousAccActivity.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2SuspiciousAccActivity() OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity {
	return s.Tds2SuspiciousAccActivity
}

// GetTds2TxnActivityDay returns the value of Tds2TxnActivityDay.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2TxnActivityDay() OptNilString {
	return s.Tds2TxnActivityDay
}

// GetTds2TxnActivityYear returns the value of Tds2TxnActivityYear.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2TxnActivityYear() OptNilString {
	return s.Tds2TxnActivityYear
}

// GetTds2ThreeDsReqAuthData returns the value of Tds2ThreeDsReqAuthData.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ThreeDsReqAuthData() OptNilString {
	return s.Tds2ThreeDsReqAuthData
}

// GetTds2ThreeDsReqAuthMethod returns the value of Tds2ThreeDsReqAuthMethod.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ThreeDsReqAuthMethod() OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod {
	return s.Tds2ThreeDsReqAuthMethod
}

// GetTds2AddrMatch returns the value of Tds2AddrMatch.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2AddrMatch() OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch {
	return s.Tds2AddrMatch
}

// GetTds2BillAddrCountry returns the value of Tds2BillAddrCountry.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2BillAddrCountry() OptNilString {
	return s.Tds2BillAddrCountry
}

// GetTds2BillAddrState returns the value of Tds2BillAddrState.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2BillAddrState() OptNilString {
	return s.Tds2BillAddrState
}

// GetTds2BillAddrCity returns the value of Tds2BillAddrCity.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2BillAddrCity() OptNilString {
	return s.Tds2BillAddrCity
}

// GetTds2BillAddrLine1 returns the value of Tds2BillAddrLine1.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2BillAddrLine1() OptNilString {
	return s.Tds2BillAddrLine1
}

// GetTds2BillAddrLine2 returns the value of Tds2BillAddrLine2.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2BillAddrLine2() OptNilString {
	return s.Tds2BillAddrLine2
}

// GetTds2BillAddrLine3 returns the value of Tds2BillAddrLine3.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2BillAddrLine3() OptNilString {
	return s.Tds2BillAddrLine3
}

// GetTds2BillAddrPostCode returns the value of Tds2BillAddrPostCode.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2BillAddrPostCode() OptNilString {
	return s.Tds2BillAddrPostCode
}

// GetTds2ShipAddrCountry returns the value of Tds2ShipAddrCountry.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddrCountry() OptNilString {
	return s.Tds2ShipAddrCountry
}

// GetTds2ShipAddrState returns the value of Tds2ShipAddrState.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddrState() OptNilString {
	return s.Tds2ShipAddrState
}

// GetTds2ShipAddrCity returns the value of Tds2ShipAddrCity.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddrCity() OptNilString {
	return s.Tds2ShipAddrCity
}

// GetTds2ShipAddrLine1 returns the value of Tds2ShipAddrLine1.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddrLine1() OptNilString {
	return s.Tds2ShipAddrLine1
}

// GetTds2ShipAddrLine2 returns the value of Tds2ShipAddrLine2.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddrLine2() OptNilString {
	return s.Tds2ShipAddrLine2
}

// GetTds2ShipAddrLine3 returns the value of Tds2ShipAddrLine3.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddrLine3() OptNilString {
	return s.Tds2ShipAddrLine3
}

// GetTds2ShipAddrPostCode returns the value of Tds2ShipAddrPostCode.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipAddrPostCode() OptNilString {
	return s.Tds2ShipAddrPostCode
}

// GetTds2ShipInd returns the value of Tds2ShipInd.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ShipInd() OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd {
	return s.Tds2ShipInd
}

// GetTds2DeliveryEmailAddress returns the value of Tds2DeliveryEmailAddress.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2DeliveryEmailAddress() OptNilString {
	return s.Tds2DeliveryEmailAddress
}

// GetTds2HomePhoneCc returns the value of Tds2HomePhoneCc.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2HomePhoneCc() OptNilString {
	return s.Tds2HomePhoneCc
}

// GetTds2HomePhoneNo returns the value of Tds2HomePhoneNo.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2HomePhoneNo() OptNilString {
	return s.Tds2HomePhoneNo
}

// GetTds2MobilePhoneCc returns the value of Tds2MobilePhoneCc.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2MobilePhoneCc() OptNilString {
	return s.Tds2MobilePhoneCc
}

// GetTds2MobilePhoneNo returns the value of Tds2MobilePhoneNo.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2MobilePhoneNo() OptNilString {
	return s.Tds2MobilePhoneNo
}

// GetTds2WorkPhoneCc returns the value of Tds2WorkPhoneCc.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2WorkPhoneCc() OptNilString {
	return s.Tds2WorkPhoneCc
}

// GetTds2WorkPhoneNo returns the value of Tds2WorkPhoneNo.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2WorkPhoneNo() OptNilString {
	return s.Tds2WorkPhoneNo
}

// GetTds2DeliveryTimeframe returns the value of Tds2DeliveryTimeframe.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2DeliveryTimeframe() OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe {
	return s.Tds2DeliveryTimeframe
}

// GetTds2PreOrderDate returns the value of Tds2PreOrderDate.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2PreOrderDate() OptNilString {
	return s.Tds2PreOrderDate
}

// GetTds2PreOrderPurchaseInd returns the value of Tds2PreOrderPurchaseInd.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2PreOrderPurchaseInd() OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd {
	return s.Tds2PreOrderPurchaseInd
}

// GetTds2ReorderItemsInd returns the value of Tds2ReorderItemsInd.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2ReorderItemsInd() OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd {
	return s.Tds2ReorderItemsInd
}

// GetTds2RecurringExpiry returns the value of Tds2RecurringExpiry.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2RecurringExpiry() OptNilString {
	return s.Tds2RecurringExpiry
}

// GetTds2RecurringFrequency returns the value of Tds2RecurringFrequency.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2RecurringFrequency() OptNilString {
	return s.Tds2RecurringFrequency
}

// GetTds2GiftCardAmount returns the value of Tds2GiftCardAmount.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2GiftCardAmount() OptNilString {
	return s.Tds2GiftCardAmount
}

// GetTds2GiftCardCount returns the value of Tds2GiftCardCount.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2GiftCardCount() OptNilString {
	return s.Tds2GiftCardCount
}

// GetTds2GiftCardCurr returns the value of Tds2GiftCardCurr.
func (s *CustomerPaymentMethodCreatingRequestCard) GetTds2GiftCardCurr() OptNilString {
	return s.Tds2GiftCardCurr
}

// SetToken sets the value of Token.
func (s *CustomerPaymentMethodCreatingRequestCard) SetToken(val string) {
	s.Token = val
}

// SetTdsType sets the value of TdsType.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTdsType(val OptNilCustomerPaymentMethodCreatingRequestCardTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2Type(val OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) {
	s.Tds2Type = val
}

// SetTdTenantName sets the value of TdTenantName.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTdTenantName(val OptNilString) {
	s.TdTenantName = val
}

// SetTds2ChAccChange sets the value of Tds2ChAccChange.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ChAccChange(val OptNilString) {
	s.Tds2ChAccChange = val
}

// SetTds2ChAccDate sets the value of Tds2ChAccDate.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ChAccDate(val OptNilString) {
	s.Tds2ChAccDate = val
}

// SetTds2ChAccPwChange sets the value of Tds2ChAccPwChange.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ChAccPwChange(val OptNilString) {
	s.Tds2ChAccPwChange = val
}

// SetTds2NbPurchaseAccount sets the value of Tds2NbPurchaseAccount.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2NbPurchaseAccount(val OptNilString) {
	s.Tds2NbPurchaseAccount = val
}

// SetTds2PaymentAccAge sets the value of Tds2PaymentAccAge.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2PaymentAccAge(val OptNilString) {
	s.Tds2PaymentAccAge = val
}

// SetTds2ProvisionAttemptsDay sets the value of Tds2ProvisionAttemptsDay.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ProvisionAttemptsDay(val OptNilString) {
	s.Tds2ProvisionAttemptsDay = val
}

// SetTds2ShipAddressUsage sets the value of Tds2ShipAddressUsage.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddressUsage(val OptNilString) {
	s.Tds2ShipAddressUsage = val
}

// SetTds2ShipNameInd sets the value of Tds2ShipNameInd.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipNameInd(val OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) {
	s.Tds2ShipNameInd = val
}

// SetTds2SuspiciousAccActivity sets the value of Tds2SuspiciousAccActivity.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2SuspiciousAccActivity(val OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) {
	s.Tds2SuspiciousAccActivity = val
}

// SetTds2TxnActivityDay sets the value of Tds2TxnActivityDay.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2TxnActivityDay(val OptNilString) {
	s.Tds2TxnActivityDay = val
}

// SetTds2TxnActivityYear sets the value of Tds2TxnActivityYear.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2TxnActivityYear(val OptNilString) {
	s.Tds2TxnActivityYear = val
}

// SetTds2ThreeDsReqAuthData sets the value of Tds2ThreeDsReqAuthData.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ThreeDsReqAuthData(val OptNilString) {
	s.Tds2ThreeDsReqAuthData = val
}

// SetTds2ThreeDsReqAuthMethod sets the value of Tds2ThreeDsReqAuthMethod.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ThreeDsReqAuthMethod(val OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) {
	s.Tds2ThreeDsReqAuthMethod = val
}

// SetTds2AddrMatch sets the value of Tds2AddrMatch.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2AddrMatch(val OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) {
	s.Tds2AddrMatch = val
}

// SetTds2BillAddrCountry sets the value of Tds2BillAddrCountry.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2BillAddrCountry(val OptNilString) {
	s.Tds2BillAddrCountry = val
}

// SetTds2BillAddrState sets the value of Tds2BillAddrState.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2BillAddrState(val OptNilString) {
	s.Tds2BillAddrState = val
}

// SetTds2BillAddrCity sets the value of Tds2BillAddrCity.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2BillAddrCity(val OptNilString) {
	s.Tds2BillAddrCity = val
}

// SetTds2BillAddrLine1 sets the value of Tds2BillAddrLine1.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2BillAddrLine1(val OptNilString) {
	s.Tds2BillAddrLine1 = val
}

// SetTds2BillAddrLine2 sets the value of Tds2BillAddrLine2.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2BillAddrLine2(val OptNilString) {
	s.Tds2BillAddrLine2 = val
}

// SetTds2BillAddrLine3 sets the value of Tds2BillAddrLine3.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2BillAddrLine3(val OptNilString) {
	s.Tds2BillAddrLine3 = val
}

// SetTds2BillAddrPostCode sets the value of Tds2BillAddrPostCode.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2BillAddrPostCode(val OptNilString) {
	s.Tds2BillAddrPostCode = val
}

// SetTds2ShipAddrCountry sets the value of Tds2ShipAddrCountry.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddrCountry(val OptNilString) {
	s.Tds2ShipAddrCountry = val
}

// SetTds2ShipAddrState sets the value of Tds2ShipAddrState.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddrState(val OptNilString) {
	s.Tds2ShipAddrState = val
}

// SetTds2ShipAddrCity sets the value of Tds2ShipAddrCity.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddrCity(val OptNilString) {
	s.Tds2ShipAddrCity = val
}

// SetTds2ShipAddrLine1 sets the value of Tds2ShipAddrLine1.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddrLine1(val OptNilString) {
	s.Tds2ShipAddrLine1 = val
}

// SetTds2ShipAddrLine2 sets the value of Tds2ShipAddrLine2.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddrLine2(val OptNilString) {
	s.Tds2ShipAddrLine2 = val
}

// SetTds2ShipAddrLine3 sets the value of Tds2ShipAddrLine3.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddrLine3(val OptNilString) {
	s.Tds2ShipAddrLine3 = val
}

// SetTds2ShipAddrPostCode sets the value of Tds2ShipAddrPostCode.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipAddrPostCode(val OptNilString) {
	s.Tds2ShipAddrPostCode = val
}

// SetTds2ShipInd sets the value of Tds2ShipInd.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ShipInd(val OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) {
	s.Tds2ShipInd = val
}

// SetTds2DeliveryEmailAddress sets the value of Tds2DeliveryEmailAddress.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2DeliveryEmailAddress(val OptNilString) {
	s.Tds2DeliveryEmailAddress = val
}

// SetTds2HomePhoneCc sets the value of Tds2HomePhoneCc.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2HomePhoneCc(val OptNilString) {
	s.Tds2HomePhoneCc = val
}

// SetTds2HomePhoneNo sets the value of Tds2HomePhoneNo.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2HomePhoneNo(val OptNilString) {
	s.Tds2HomePhoneNo = val
}

// SetTds2MobilePhoneCc sets the value of Tds2MobilePhoneCc.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2MobilePhoneCc(val OptNilString) {
	s.Tds2MobilePhoneCc = val
}

// SetTds2MobilePhoneNo sets the value of Tds2MobilePhoneNo.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2MobilePhoneNo(val OptNilString) {
	s.Tds2MobilePhoneNo = val
}

// SetTds2WorkPhoneCc sets the value of Tds2WorkPhoneCc.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2WorkPhoneCc(val OptNilString) {
	s.Tds2WorkPhoneCc = val
}

// SetTds2WorkPhoneNo sets the value of Tds2WorkPhoneNo.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2WorkPhoneNo(val OptNilString) {
	s.Tds2WorkPhoneNo = val
}

// SetTds2DeliveryTimeframe sets the value of Tds2DeliveryTimeframe.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2DeliveryTimeframe(val OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) {
	s.Tds2DeliveryTimeframe = val
}

// SetTds2PreOrderDate sets the value of Tds2PreOrderDate.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2PreOrderDate(val OptNilString) {
	s.Tds2PreOrderDate = val
}

// SetTds2PreOrderPurchaseInd sets the value of Tds2PreOrderPurchaseInd.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2PreOrderPurchaseInd(val OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) {
	s.Tds2PreOrderPurchaseInd = val
}

// SetTds2ReorderItemsInd sets the value of Tds2ReorderItemsInd.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2ReorderItemsInd(val OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) {
	s.Tds2ReorderItemsInd = val
}

// SetTds2RecurringExpiry sets the value of Tds2RecurringExpiry.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2RecurringExpiry(val OptNilString) {
	s.Tds2RecurringExpiry = val
}

// SetTds2RecurringFrequency sets the value of Tds2RecurringFrequency.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2RecurringFrequency(val OptNilString) {
	s.Tds2RecurringFrequency = val
}

// SetTds2GiftCardAmount sets the value of Tds2GiftCardAmount.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2GiftCardAmount(val OptNilString) {
	s.Tds2GiftCardAmount = val
}

// SetTds2GiftCardCount sets the value of Tds2GiftCardCount.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2GiftCardCount(val OptNilString) {
	s.Tds2GiftCardCount = val
}

// SetTds2GiftCardCurr sets the value of Tds2GiftCardCurr.
func (s *CustomerPaymentMethodCreatingRequestCard) SetTds2GiftCardCurr(val OptNilString) {
	s.Tds2GiftCardCurr = val
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 請求先住所と配送先住所が一致しているか否か
// - `Y`: 住所は一致している
// - `N`: 住所は一致していない.
type CustomerPaymentMethodCreatingRequestCardTds2AddrMatch string

const (
	CustomerPaymentMethodCreatingRequestCardTds2AddrMatchY CustomerPaymentMethodCreatingRequestCardTds2AddrMatch = "Y"
	CustomerPaymentMethodCreatingRequestCardTds2AddrMatchN CustomerPaymentMethodCreatingRequestCardTds2AddrMatch = "N"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2AddrMatch values.
func (CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2AddrMatch {
	return []CustomerPaymentMethodCreatingRequestCardTds2AddrMatch{
		CustomerPaymentMethodCreatingRequestCardTds2AddrMatchY,
		CustomerPaymentMethodCreatingRequestCardTds2AddrMatchN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2AddrMatchY:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2AddrMatchN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2AddrMatch(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2AddrMatchY:
		*s = CustomerPaymentMethodCreatingRequestCardTds2AddrMatchY
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2AddrMatchN:
		*s = CustomerPaymentMethodCreatingRequestCardTds2AddrMatchN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品納品時間枠
// - `01`: 電子デリバリー
// - `02`: 当日出荷
// - `03`: 翌日出荷
// - `04`: 2日目以降の出荷.
type CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe string

const (
	CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe01 CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe = "01"
	CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe02 CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe = "02"
	CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe03 CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe = "03"
	CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe04 CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe = "04"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe values.
func (CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe {
	return []CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe{
		CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe01,
		CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe02,
		CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe03,
		CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe04,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe01:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe02:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe03:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe04:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe01
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe02
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe03:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe03
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe04:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe04
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の販売時期情報
// - `01`: 発売済み商品
// - `02`: 先行予約商品.
type CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd string

const (
	CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd01 CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd = "01"
	CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd02 CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd = "02"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd values.
func (CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd {
	return []CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd{
		CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd01,
		CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd01:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd01
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の注文が初回か再注文か
// - `01`: 初回注文
// - `02`: 再注文.
type CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd string

const (
	CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd01 CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd = "01"
	CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd02 CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd = "02"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd values.
func (CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd {
	return []CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd{
		CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd01,
		CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd01:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd01
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 取引商品の配送方法
// - `01`: カード顧客の請求先住所に配送
// - `02`: 加盟店が保持している確認済み住所（請求先住所でない）に配送
// - `03`: カード顧客の請求先住所と異なる住所に配送
// - `04`: 店舗への配送（店舗の住所は配送先住所で指定）
// - `05`:
// デジタル商品（オンラインサービス、電子ギフトカードおよび償還コードを含む）
// - `06`: 配送なし（旅行およびイベントのチケット）
// - `07`:
// その他（ゲーム、配送されないデジタルサービス、電子メディアの購読料など）.
type CustomerPaymentMethodCreatingRequestCardTds2ShipInd string

const (
	CustomerPaymentMethodCreatingRequestCardTds2ShipInd01 CustomerPaymentMethodCreatingRequestCardTds2ShipInd = "01"
	CustomerPaymentMethodCreatingRequestCardTds2ShipInd02 CustomerPaymentMethodCreatingRequestCardTds2ShipInd = "02"
	CustomerPaymentMethodCreatingRequestCardTds2ShipInd03 CustomerPaymentMethodCreatingRequestCardTds2ShipInd = "03"
	CustomerPaymentMethodCreatingRequestCardTds2ShipInd04 CustomerPaymentMethodCreatingRequestCardTds2ShipInd = "04"
	CustomerPaymentMethodCreatingRequestCardTds2ShipInd05 CustomerPaymentMethodCreatingRequestCardTds2ShipInd = "05"
	CustomerPaymentMethodCreatingRequestCardTds2ShipInd06 CustomerPaymentMethodCreatingRequestCardTds2ShipInd = "06"
	CustomerPaymentMethodCreatingRequestCardTds2ShipInd07 CustomerPaymentMethodCreatingRequestCardTds2ShipInd = "07"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2ShipInd values.
func (CustomerPaymentMethodCreatingRequestCardTds2ShipInd) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2ShipInd {
	return []CustomerPaymentMethodCreatingRequestCardTds2ShipInd{
		CustomerPaymentMethodCreatingRequestCardTds2ShipInd01,
		CustomerPaymentMethodCreatingRequestCardTds2ShipInd02,
		CustomerPaymentMethodCreatingRequestCardTds2ShipInd03,
		CustomerPaymentMethodCreatingRequestCardTds2ShipInd04,
		CustomerPaymentMethodCreatingRequestCardTds2ShipInd05,
		CustomerPaymentMethodCreatingRequestCardTds2ShipInd06,
		CustomerPaymentMethodCreatingRequestCardTds2ShipInd07,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ShipInd) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd01:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd02:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd03:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd04:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd05:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd06:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd07:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ShipInd) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2ShipInd(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd01
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd02
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd03:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd03
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd04:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd04
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd05:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd05
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd06:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd06
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd07:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd07
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// カード顧客名と出荷先名が一致しているか否か\
// カード顧客の顧客名と登録に使用される配送先名の一致/不一致を設定
// - `01`: カード顧客名と出荷先名が一致
// - `02`: カード顧客名と出荷先名が不一致.
type CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd string

const (
	CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd01 CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd = "01"
	CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd02 CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd = "02"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd values.
func (CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd {
	return []CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd{
		CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd01,
		CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd01:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd01
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// アカウントの不審行為情報\
// カード顧客で、不審な行動（過去の不正行為を含む）を加盟店様が発見したかどうかを設定
// - `01`: 不審な行動なし
// - `02`: 不審な行動あり.
type CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity string

const (
	CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity01 CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity = "01"
	CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity02 CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity = "02"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity values.
func (CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity {
	return []CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity{
		CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity01,
		CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity01:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity01
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// ログイン方法\
// ログイン方法を設定する場合、ログイン証跡とログイン日時の設定が必要です。
// - `01`: 認証なし（ゲストとしてログイン）
// - `02`: 加盟店様自身の認証情報
// - `03`: SSO(シングルサインオン)
// - `04`: イシュアーの認証情報
// - `05`: サードパーティ認証
// - `06`: FIDO認証.
type CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod string

const (
	CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod01 CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod = "01"
	CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod02 CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod = "02"
	CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod03 CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod = "03"
	CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod04 CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod = "04"
	CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod05 CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod = "05"
	CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod06 CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod = "06"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod values.
func (CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod {
	return []CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod{
		CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod01,
		CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod02,
		CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod03,
		CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod04,
		CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod05,
		CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod06,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod01:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod02:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod03:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod04:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod05:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod06:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod01
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod02
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod03:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod03
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod04:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod04
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod05:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod05
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod06:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod06
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type CustomerPaymentMethodCreatingRequestCardTds2Type string

const (
	CustomerPaymentMethodCreatingRequestCardTds2Type2 CustomerPaymentMethodCreatingRequestCardTds2Type = "2"
	CustomerPaymentMethodCreatingRequestCardTds2Type3 CustomerPaymentMethodCreatingRequestCardTds2Type = "3"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTds2Type values.
func (CustomerPaymentMethodCreatingRequestCardTds2Type) AllValues() []CustomerPaymentMethodCreatingRequestCardTds2Type {
	return []CustomerPaymentMethodCreatingRequestCardTds2Type{
		CustomerPaymentMethodCreatingRequestCardTds2Type2,
		CustomerPaymentMethodCreatingRequestCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTds2Type2:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2Type) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTds2Type(data) {
	case CustomerPaymentMethodCreatingRequestCardTds2Type2:
		*s = CustomerPaymentMethodCreatingRequestCardTds2Type2
		return nil
	case CustomerPaymentMethodCreatingRequestCardTds2Type3:
		*s = CustomerPaymentMethodCreatingRequestCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type CustomerPaymentMethodCreatingRequestCardTdsType string

const (
	CustomerPaymentMethodCreatingRequestCardTdsType0 CustomerPaymentMethodCreatingRequestCardTdsType = "0"
	CustomerPaymentMethodCreatingRequestCardTdsType2 CustomerPaymentMethodCreatingRequestCardTdsType = "2"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestCardTdsType values.
func (CustomerPaymentMethodCreatingRequestCardTdsType) AllValues() []CustomerPaymentMethodCreatingRequestCardTdsType {
	return []CustomerPaymentMethodCreatingRequestCardTdsType{
		CustomerPaymentMethodCreatingRequestCardTdsType0,
		CustomerPaymentMethodCreatingRequestCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestCardTdsType0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTdsType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestCardTdsType(data) {
	case CustomerPaymentMethodCreatingRequestCardTdsType0:
		*s = CustomerPaymentMethodCreatingRequestCardTdsType0
		return nil
	case CustomerPaymentMethodCreatingRequestCardTdsType2:
		*s = CustomerPaymentMethodCreatingRequestCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
// - `0`: デフォルト決済手段ではない
// - `1`: デフォルト決済手段.
type CustomerPaymentMethodCreatingRequestDefaultFlag string

const (
	CustomerPaymentMethodCreatingRequestDefaultFlag0 CustomerPaymentMethodCreatingRequestDefaultFlag = "0"
	CustomerPaymentMethodCreatingRequestDefaultFlag1 CustomerPaymentMethodCreatingRequestDefaultFlag = "1"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestDefaultFlag values.
func (CustomerPaymentMethodCreatingRequestDefaultFlag) AllValues() []CustomerPaymentMethodCreatingRequestDefaultFlag {
	return []CustomerPaymentMethodCreatingRequestDefaultFlag{
		CustomerPaymentMethodCreatingRequestDefaultFlag0,
		CustomerPaymentMethodCreatingRequestDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestDefaultFlag0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestDefaultFlag(data) {
	case CustomerPaymentMethodCreatingRequestDefaultFlag0:
		*s = CustomerPaymentMethodCreatingRequestDefaultFlag0
		return nil
	case CustomerPaymentMethodCreatingRequestDefaultFlag1:
		*s = CustomerPaymentMethodCreatingRequestDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText">※ `pay_type =
// "Directdebit"`（この決済手段登録が口座振替用の口座情報登録である）のとき必須</span>.
type CustomerPaymentMethodCreatingRequestDirectdebit struct {
	ApplicationType NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType `json:"application_type"`
	BankCode        NilString                                                         `json:"bank_code"`
	// 支店コード\
	// ゆうちょ銀行以外（`bank_code`が`9900`でない）のとき必須.
	BranchCode OptNilString `json:"branch_code"`
	// 預金区分\
	// ゆうちょ銀行以外（`bank_code`が`9900`でない）のとき必須
	// - `1`: 普通
	// - `2`: 当座.
	AccountType OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType `json:"account_type"`
	// 口座番号\
	// ゆうちょ銀行以外（`bank_code`が`9900`でない）のとき必須\
	// 形式： 左0埋め.
	AccountNumber OptNilString `json:"account_number"`
	AccountName   OptNilString `json:"account_name"`
	// 口座名義（カナ）\
	// 形式：
	// 半角英数カナ記号、全角英数カナ記号、一部の記号、半角全角スペース\
	// \
	// 使用可能な記号は以下の通りです。
	// - 半角：`.` `(` `)` `–`
	// - 全角：`．` `（` `）` `ー`.
	AccountNameKana  NilString                                                          `json:"account_name_kana"`
	PaperApplication OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication `json:"paper_application"`
}

// GetApplicationType returns the value of ApplicationType.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetApplicationType() NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType {
	return s.ApplicationType
}

// GetBankCode returns the value of BankCode.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetBankCode() NilString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetAccountType returns the value of AccountType.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetAccountType() OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType {
	return s.AccountType
}

// GetAccountNumber returns the value of AccountNumber.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetAccountNumber() OptNilString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetAccountName() OptNilString {
	return s.AccountName
}

// GetAccountNameKana returns the value of AccountNameKana.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetAccountNameKana() NilString {
	return s.AccountNameKana
}

// GetPaperApplication returns the value of PaperApplication.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) GetPaperApplication() OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication {
	return s.PaperApplication
}

// SetApplicationType sets the value of ApplicationType.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetApplicationType(val NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) {
	s.ApplicationType = val
}

// SetBankCode sets the value of BankCode.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetBankCode(val NilString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetAccountType sets the value of AccountType.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetAccountType(val OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) {
	s.AccountType = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetAccountNumber(val OptNilString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetAccountName(val OptNilString) {
	s.AccountName = val
}

// SetAccountNameKana sets the value of AccountNameKana.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetAccountNameKana(val NilString) {
	s.AccountNameKana = val
}

// SetPaperApplication sets the value of PaperApplication.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) SetPaperApplication(val OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) {
	s.PaperApplication = val
}

// 口座種別。
// - `0`: 普通預金
// - `1`: 当座預金.
type CustomerPaymentMethodCreatingRequestDirectdebitAccountType string

const (
	CustomerPaymentMethodCreatingRequestDirectdebitAccountType0 CustomerPaymentMethodCreatingRequestDirectdebitAccountType = "0"
	CustomerPaymentMethodCreatingRequestDirectdebitAccountType1 CustomerPaymentMethodCreatingRequestDirectdebitAccountType = "1"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestDirectdebitAccountType values.
func (CustomerPaymentMethodCreatingRequestDirectdebitAccountType) AllValues() []CustomerPaymentMethodCreatingRequestDirectdebitAccountType {
	return []CustomerPaymentMethodCreatingRequestDirectdebitAccountType{
		CustomerPaymentMethodCreatingRequestDirectdebitAccountType0,
		CustomerPaymentMethodCreatingRequestDirectdebitAccountType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestDirectdebitAccountType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestDirectdebitAccountType0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestDirectdebitAccountType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitAccountType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestDirectdebitAccountType(data) {
	case CustomerPaymentMethodCreatingRequestDirectdebitAccountType0:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitAccountType0
		return nil
	case CustomerPaymentMethodCreatingRequestDirectdebitAccountType1:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitAccountType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// この振替用口座を登録した際の申込方法
// - `PAPER`: 依頼書登録
// - `ONLINE`: Web登録.
type CustomerPaymentMethodCreatingRequestDirectdebitApplicationType string

const (
	CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypePAPER  CustomerPaymentMethodCreatingRequestDirectdebitApplicationType = "PAPER"
	CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypeONLINE CustomerPaymentMethodCreatingRequestDirectdebitApplicationType = "ONLINE"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestDirectdebitApplicationType values.
func (CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) AllValues() []CustomerPaymentMethodCreatingRequestDirectdebitApplicationType {
	return []CustomerPaymentMethodCreatingRequestDirectdebitApplicationType{
		CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypePAPER,
		CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypeONLINE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypePAPER:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypeONLINE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestDirectdebitApplicationType(data) {
	case CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypePAPER:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypePAPER
		return nil
	case CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypeONLINE:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypeONLINE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 依頼書登録のパラメータ.
type CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication struct {
	// ゆうちょ 預金記号.
	PostalAccountNumber1 OptNilString `json:"postal_account_number_1"`
	// ゆうちょ 預金番号.
	PostalAccountNumber2 OptNilString `json:"postal_account_number_2"`
	// 依頼書ID。\
	// 依頼書を管理画面から登録した際に登録者が指定した、依頼書を一意に識別するIDです。\
	// ※プラットフォームショップの場合、プラットフォーム全体で一意である必要があります。.
	RequestFormID OptString `json:"request_form_id"`
}

// GetPostalAccountNumber1 returns the value of PostalAccountNumber1.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) GetPostalAccountNumber1() OptNilString {
	return s.PostalAccountNumber1
}

// GetPostalAccountNumber2 returns the value of PostalAccountNumber2.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) GetPostalAccountNumber2() OptNilString {
	return s.PostalAccountNumber2
}

// GetRequestFormID returns the value of RequestFormID.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) GetRequestFormID() OptString {
	return s.RequestFormID
}

// SetPostalAccountNumber1 sets the value of PostalAccountNumber1.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) SetPostalAccountNumber1(val OptNilString) {
	s.PostalAccountNumber1 = val
}

// SetPostalAccountNumber2 sets the value of PostalAccountNumber2.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) SetPostalAccountNumber2(val OptNilString) {
	s.PostalAccountNumber2 = val
}

// SetRequestFormID sets the value of RequestFormID.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) SetRequestFormID(val OptString) {
	s.RequestFormID = val
}

// 決済種別（決済手段APIに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type CustomerPaymentMethodCreatingRequestPayType string

const (
	CustomerPaymentMethodCreatingRequestPayTypeCard        CustomerPaymentMethodCreatingRequestPayType = "Card"
	CustomerPaymentMethodCreatingRequestPayTypeDirectdebit CustomerPaymentMethodCreatingRequestPayType = "Directdebit"
)

// AllValues returns all CustomerPaymentMethodCreatingRequestPayType values.
func (CustomerPaymentMethodCreatingRequestPayType) AllValues() []CustomerPaymentMethodCreatingRequestPayType {
	return []CustomerPaymentMethodCreatingRequestPayType{
		CustomerPaymentMethodCreatingRequestPayTypeCard,
		CustomerPaymentMethodCreatingRequestPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingRequestPayType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingRequestPayTypeCard:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingRequestPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingRequestPayType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingRequestPayType(data) {
	case CustomerPaymentMethodCreatingRequestPayTypeCard:
		*s = CustomerPaymentMethodCreatingRequestPayTypeCard
		return nil
	case CustomerPaymentMethodCreatingRequestPayTypeDirectdebit:
		*s = CustomerPaymentMethodCreatingRequestPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerPaymentMethod.Creating.Response
type CustomerPaymentMethodCreatingResponse struct {
	// 決済手段ID.
	ID OptString `json:"id"`
	// 決済手段の種別。\
	// この決済手段の実体の種別を示します。
	// - `Card`:
	// この決済手段はクレジットカード/デビットカード/プリペイドカードです。
	// - `Directdebit`: この決済手段は口座振替用口座情報です。.
	PayType OptCustomerPaymentMethodCreatingResponsePayType `json:"pay_type"`
	// この決済手段が紐づく顧客のID.
	CustomerID OptString              `json:"customer_id"`
	Status     OptPaymentMethodStatus `json:"status"`
	// リダイレクトURL。\
	// 購入者にこのURLを提供することで、ステータスが`AWAITING_CUSTOMER_ACTION`
	// の決済手段を有効化するためのアクションを購入者にとらせることができます。
	// - 振替口座登録の場合：
	// このURLにアクセスして振替口座登録の承認を行います。このURLには1度だけアクセスできます。
	// - カード登録の場合： このURLにアクセスして3Dセキュア認証を行います。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクトURLアクセス済みフラグ\
	// 購入者が`redirect_url`にアクセスしたことがあるかどうかを示すフラグです。
	// - `0`: 未アクセス
	// - `1`: 1回以上アクセス済み.
	RedirectURLAccessedFlag OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag `json:"redirect_url_accessed_flag"`
	// 加盟店戻りURL。（成功時）\
	// 購入者がアクションを完了し、決済手段の登録に成功した際にリダイレクトされるURLです。\
	// POSTメソッドでリダイレクトがされます。.
	ReturnURL OptNilString `json:"return_url"`
	// 加盟店戻りURL。（失敗時）\
	// 購入者がアクションを完了し、決済手段の登録に失敗した際にリダイレクトされるURLです。\
	// POSTメソッドでリダイレクトがされます。.
	ReturnURLOnFailure OptNilString `json:"return_url_on_failure"`
	// デフォルトフラグ。\
	// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
	// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
	// - `0`: デフォルト決済手段ではない
	// - `1`: デフォルト決済手段.
	DefaultFlag  OptCustomerPaymentMethodCreatingResponseDefaultFlag `json:"default_flag"`
	ClientField1 *NilString                                          `json:"client_field_1"`
	ClientField2 *NilString                                          `json:"client_field_2"`
	ClientField3 *NilString                                          `json:"client_field_3"`
	DeleteFlag   OptCustomerPaymentMethodCreatingResponseDeleteFlag  `json:"delete_flag"`
	ProcessDate  *NilString                                          `json:"process_date"`
	Created      OptString                                           `json:"created"`
	Updated      *NilString                                          `json:"updated"`
	// <span class="smallText">この決済手段がカードを表す（`pay_type =
	// Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span>.
	Card OptNilCustomerPaymentMethodCreatingResponseCard `json:"card"`
	// <span class="smallText">この決済手段が振替用口座を表す（`pay_type =
	// Directdebit`）とき、口座情報の詳細がこの`directdebit`オブジェクトに格納されます。</span>.
	Directdebit OptNilCustomerPaymentMethodCreatingResponseDirectdebit `json:"directdebit"`
}

// GetID returns the value of ID.
func (s *CustomerPaymentMethodCreatingResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *CustomerPaymentMethodCreatingResponse) GetPayType() OptCustomerPaymentMethodCreatingResponsePayType {
	return s.PayType
}

// GetCustomerID returns the value of CustomerID.
func (s *CustomerPaymentMethodCreatingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetStatus returns the value of Status.
func (s *CustomerPaymentMethodCreatingResponse) GetStatus() OptPaymentMethodStatus {
	return s.Status
}

// GetRedirectURL returns the value of RedirectURL.
func (s *CustomerPaymentMethodCreatingResponse) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectURLAccessedFlag returns the value of RedirectURLAccessedFlag.
func (s *CustomerPaymentMethodCreatingResponse) GetRedirectURLAccessedFlag() OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag {
	return s.RedirectURLAccessedFlag
}

// GetReturnURL returns the value of ReturnURL.
func (s *CustomerPaymentMethodCreatingResponse) GetReturnURL() OptNilString {
	return s.ReturnURL
}

// GetReturnURLOnFailure returns the value of ReturnURLOnFailure.
func (s *CustomerPaymentMethodCreatingResponse) GetReturnURLOnFailure() OptNilString {
	return s.ReturnURLOnFailure
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerPaymentMethodCreatingResponse) GetDefaultFlag() OptCustomerPaymentMethodCreatingResponseDefaultFlag {
	return s.DefaultFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *CustomerPaymentMethodCreatingResponse) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CustomerPaymentMethodCreatingResponse) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CustomerPaymentMethodCreatingResponse) GetClientField3() *NilString {
	return s.ClientField3
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomerPaymentMethodCreatingResponse) GetDeleteFlag() OptCustomerPaymentMethodCreatingResponseDeleteFlag {
	return s.DeleteFlag
}

// GetProcessDate returns the value of ProcessDate.
func (s *CustomerPaymentMethodCreatingResponse) GetProcessDate() *NilString {
	return s.ProcessDate
}

// GetCreated returns the value of Created.
func (s *CustomerPaymentMethodCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerPaymentMethodCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// GetCard returns the value of Card.
func (s *CustomerPaymentMethodCreatingResponse) GetCard() OptNilCustomerPaymentMethodCreatingResponseCard {
	return s.Card
}

// GetDirectdebit returns the value of Directdebit.
func (s *CustomerPaymentMethodCreatingResponse) GetDirectdebit() OptNilCustomerPaymentMethodCreatingResponseDirectdebit {
	return s.Directdebit
}

// SetID sets the value of ID.
func (s *CustomerPaymentMethodCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *CustomerPaymentMethodCreatingResponse) SetPayType(val OptCustomerPaymentMethodCreatingResponsePayType) {
	s.PayType = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CustomerPaymentMethodCreatingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetStatus sets the value of Status.
func (s *CustomerPaymentMethodCreatingResponse) SetStatus(val OptPaymentMethodStatus) {
	s.Status = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *CustomerPaymentMethodCreatingResponse) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectURLAccessedFlag sets the value of RedirectURLAccessedFlag.
func (s *CustomerPaymentMethodCreatingResponse) SetRedirectURLAccessedFlag(val OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) {
	s.RedirectURLAccessedFlag = val
}

// SetReturnURL sets the value of ReturnURL.
func (s *CustomerPaymentMethodCreatingResponse) SetReturnURL(val OptNilString) {
	s.ReturnURL = val
}

// SetReturnURLOnFailure sets the value of ReturnURLOnFailure.
func (s *CustomerPaymentMethodCreatingResponse) SetReturnURLOnFailure(val OptNilString) {
	s.ReturnURLOnFailure = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerPaymentMethodCreatingResponse) SetDefaultFlag(val OptCustomerPaymentMethodCreatingResponseDefaultFlag) {
	s.DefaultFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CustomerPaymentMethodCreatingResponse) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CustomerPaymentMethodCreatingResponse) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CustomerPaymentMethodCreatingResponse) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomerPaymentMethodCreatingResponse) SetDeleteFlag(val OptCustomerPaymentMethodCreatingResponseDeleteFlag) {
	s.DeleteFlag = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CustomerPaymentMethodCreatingResponse) SetProcessDate(val *NilString) {
	s.ProcessDate = val
}

// SetCreated sets the value of Created.
func (s *CustomerPaymentMethodCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerPaymentMethodCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetCard sets the value of Card.
func (s *CustomerPaymentMethodCreatingResponse) SetCard(val OptNilCustomerPaymentMethodCreatingResponseCard) {
	s.Card = val
}

// SetDirectdebit sets the value of Directdebit.
func (s *CustomerPaymentMethodCreatingResponse) SetDirectdebit(val OptNilCustomerPaymentMethodCreatingResponseDirectdebit) {
	s.Directdebit = val
}

func (*CustomerPaymentMethodCreatingResponse) createCustomerPaymentMethodRes() {}

// <span class="smallText">この決済手段がカードを表す（`pay_type =
// Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span>.
type CustomerPaymentMethodCreatingResponseCard struct {
	// マスク済みカード番号。\
	// <span class="smallText">
	// 下4桁以外をマスクしたカード番号です。\
	// カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\
	// </span>
	// 形式：`************1234`.
	CardNo OptString `json:"card_no"`
	// カード有効期限。\
	// 形式：`YYMM`.
	Expire OptNilString `json:"expire"`
	// カード名義人名。.
	HolderName OptNilString                                       `json:"holder_name"`
	Type       *NilCustomerPaymentMethodCreatingResponseCardType  `json:"type"`
	Brand      *NilCustomerPaymentMethodCreatingResponseCardBrand `json:"brand"`
	// カード番号をもとに生成されたハッシュ値。\
	// <span class="smallText">
	// おなじカード番号に対しては常に同じ値が返されます。\
	// カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。
	// </span>.
	CardNoHash OptString `json:"card_no_hash"`
	// カード登録時3Dセキュア認証を利用するか。
	// - `0`: 3Dセキュア認証を利用しない（デフォルト）
	// - `2`: 3Dセキュア2.0認証を利用する.
	TdsType *NilCustomerPaymentMethodCreatingResponseCardTdsType `json:"tds_type"`
	// 3Dセキュア2.0非対応時の挙動設定\
	// 購入者がこの決済に利用したカードが3Dセキュア2.
	// 0に非対応である場合の後続処理を設定します。
	// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
	// - `3`: 3Dセキュア認証なしで登録を行う。.
	Tds2Type     *NilCustomerPaymentMethodCreatingResponseCardTds2Type `json:"tds2_type"`
	Tds2Status   OptTds2Status                                         `json:"tds2_status"`
	MerchantName OptString                                             `json:"merchant_name"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// ACS呼出判定。.
	Acs OptNilString `json:"acs"`
}

// GetCardNo returns the value of CardNo.
func (s *CustomerPaymentMethodCreatingResponseCard) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CustomerPaymentMethodCreatingResponseCard) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CustomerPaymentMethodCreatingResponseCard) GetHolderName() OptNilString {
	return s.HolderName
}

// GetType returns the value of Type.
func (s *CustomerPaymentMethodCreatingResponseCard) GetType() *NilCustomerPaymentMethodCreatingResponseCardType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *CustomerPaymentMethodCreatingResponseCard) GetBrand() *NilCustomerPaymentMethodCreatingResponseCardBrand {
	return s.Brand
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CustomerPaymentMethodCreatingResponseCard) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetTdsType returns the value of TdsType.
func (s *CustomerPaymentMethodCreatingResponseCard) GetTdsType() *NilCustomerPaymentMethodCreatingResponseCardTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *CustomerPaymentMethodCreatingResponseCard) GetTds2Type() *NilCustomerPaymentMethodCreatingResponseCardTds2Type {
	return s.Tds2Type
}

// GetTds2Status returns the value of Tds2Status.
func (s *CustomerPaymentMethodCreatingResponseCard) GetTds2Status() OptTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *CustomerPaymentMethodCreatingResponseCard) GetMerchantName() OptString {
	return s.MerchantName
}

// GetAccessID returns the value of AccessID.
func (s *CustomerPaymentMethodCreatingResponseCard) GetAccessID() OptString {
	return s.AccessID
}

// GetAcs returns the value of Acs.
func (s *CustomerPaymentMethodCreatingResponseCard) GetAcs() OptNilString {
	return s.Acs
}

// SetCardNo sets the value of CardNo.
func (s *CustomerPaymentMethodCreatingResponseCard) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CustomerPaymentMethodCreatingResponseCard) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CustomerPaymentMethodCreatingResponseCard) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetType sets the value of Type.
func (s *CustomerPaymentMethodCreatingResponseCard) SetType(val *NilCustomerPaymentMethodCreatingResponseCardType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *CustomerPaymentMethodCreatingResponseCard) SetBrand(val *NilCustomerPaymentMethodCreatingResponseCardBrand) {
	s.Brand = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CustomerPaymentMethodCreatingResponseCard) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetTdsType sets the value of TdsType.
func (s *CustomerPaymentMethodCreatingResponseCard) SetTdsType(val *NilCustomerPaymentMethodCreatingResponseCardTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CustomerPaymentMethodCreatingResponseCard) SetTds2Type(val *NilCustomerPaymentMethodCreatingResponseCardTds2Type) {
	s.Tds2Type = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *CustomerPaymentMethodCreatingResponseCard) SetTds2Status(val OptTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *CustomerPaymentMethodCreatingResponseCard) SetMerchantName(val OptString) {
	s.MerchantName = val
}

// SetAccessID sets the value of AccessID.
func (s *CustomerPaymentMethodCreatingResponseCard) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAcs sets the value of Acs.
func (s *CustomerPaymentMethodCreatingResponseCard) SetAcs(val OptNilString) {
	s.Acs = val
}

// Merged schema.
type CustomerPaymentMethodCreatingResponseCardBrand string

const (
	CustomerPaymentMethodCreatingResponseCardBrandVISA     CustomerPaymentMethodCreatingResponseCardBrand = "VISA"
	CustomerPaymentMethodCreatingResponseCardBrandMASTER   CustomerPaymentMethodCreatingResponseCardBrand = "MASTER"
	CustomerPaymentMethodCreatingResponseCardBrandJCB      CustomerPaymentMethodCreatingResponseCardBrand = "JCB"
	CustomerPaymentMethodCreatingResponseCardBrandAMEX     CustomerPaymentMethodCreatingResponseCardBrand = "AMEX"
	CustomerPaymentMethodCreatingResponseCardBrandDINERS   CustomerPaymentMethodCreatingResponseCardBrand = "DINERS"
	CustomerPaymentMethodCreatingResponseCardBrandDISCOVER CustomerPaymentMethodCreatingResponseCardBrand = "DISCOVER"
	CustomerPaymentMethodCreatingResponseCardBrandEmpty    CustomerPaymentMethodCreatingResponseCardBrand = ""
)

// AllValues returns all CustomerPaymentMethodCreatingResponseCardBrand values.
func (CustomerPaymentMethodCreatingResponseCardBrand) AllValues() []CustomerPaymentMethodCreatingResponseCardBrand {
	return []CustomerPaymentMethodCreatingResponseCardBrand{
		CustomerPaymentMethodCreatingResponseCardBrandVISA,
		CustomerPaymentMethodCreatingResponseCardBrandMASTER,
		CustomerPaymentMethodCreatingResponseCardBrandJCB,
		CustomerPaymentMethodCreatingResponseCardBrandAMEX,
		CustomerPaymentMethodCreatingResponseCardBrandDINERS,
		CustomerPaymentMethodCreatingResponseCardBrandDISCOVER,
		CustomerPaymentMethodCreatingResponseCardBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseCardBrand) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseCardBrandVISA:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardBrandMASTER:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardBrandJCB:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardBrandAMEX:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardBrandDINERS:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardBrandDISCOVER:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardBrand) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseCardBrand(data) {
	case CustomerPaymentMethodCreatingResponseCardBrandVISA:
		*s = CustomerPaymentMethodCreatingResponseCardBrandVISA
		return nil
	case CustomerPaymentMethodCreatingResponseCardBrandMASTER:
		*s = CustomerPaymentMethodCreatingResponseCardBrandMASTER
		return nil
	case CustomerPaymentMethodCreatingResponseCardBrandJCB:
		*s = CustomerPaymentMethodCreatingResponseCardBrandJCB
		return nil
	case CustomerPaymentMethodCreatingResponseCardBrandAMEX:
		*s = CustomerPaymentMethodCreatingResponseCardBrandAMEX
		return nil
	case CustomerPaymentMethodCreatingResponseCardBrandDINERS:
		*s = CustomerPaymentMethodCreatingResponseCardBrandDINERS
		return nil
	case CustomerPaymentMethodCreatingResponseCardBrandDISCOVER:
		*s = CustomerPaymentMethodCreatingResponseCardBrandDISCOVER
		return nil
	case CustomerPaymentMethodCreatingResponseCardBrandEmpty:
		*s = CustomerPaymentMethodCreatingResponseCardBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type CustomerPaymentMethodCreatingResponseCardTds2Type string

const (
	CustomerPaymentMethodCreatingResponseCardTds2Type2 CustomerPaymentMethodCreatingResponseCardTds2Type = "2"
	CustomerPaymentMethodCreatingResponseCardTds2Type3 CustomerPaymentMethodCreatingResponseCardTds2Type = "3"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseCardTds2Type values.
func (CustomerPaymentMethodCreatingResponseCardTds2Type) AllValues() []CustomerPaymentMethodCreatingResponseCardTds2Type {
	return []CustomerPaymentMethodCreatingResponseCardTds2Type{
		CustomerPaymentMethodCreatingResponseCardTds2Type2,
		CustomerPaymentMethodCreatingResponseCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseCardTds2Type2:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardTds2Type) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseCardTds2Type(data) {
	case CustomerPaymentMethodCreatingResponseCardTds2Type2:
		*s = CustomerPaymentMethodCreatingResponseCardTds2Type2
		return nil
	case CustomerPaymentMethodCreatingResponseCardTds2Type3:
		*s = CustomerPaymentMethodCreatingResponseCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type CustomerPaymentMethodCreatingResponseCardTdsType string

const (
	CustomerPaymentMethodCreatingResponseCardTdsType0 CustomerPaymentMethodCreatingResponseCardTdsType = "0"
	CustomerPaymentMethodCreatingResponseCardTdsType2 CustomerPaymentMethodCreatingResponseCardTdsType = "2"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseCardTdsType values.
func (CustomerPaymentMethodCreatingResponseCardTdsType) AllValues() []CustomerPaymentMethodCreatingResponseCardTdsType {
	return []CustomerPaymentMethodCreatingResponseCardTdsType{
		CustomerPaymentMethodCreatingResponseCardTdsType0,
		CustomerPaymentMethodCreatingResponseCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseCardTdsType0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardTdsType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseCardTdsType(data) {
	case CustomerPaymentMethodCreatingResponseCardTdsType0:
		*s = CustomerPaymentMethodCreatingResponseCardTdsType0
		return nil
	case CustomerPaymentMethodCreatingResponseCardTdsType2:
		*s = CustomerPaymentMethodCreatingResponseCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CustomerPaymentMethodCreatingResponseCardType string

const (
	CustomerPaymentMethodCreatingResponseCardType0 CustomerPaymentMethodCreatingResponseCardType = "0"
	CustomerPaymentMethodCreatingResponseCardType1 CustomerPaymentMethodCreatingResponseCardType = "1"
	CustomerPaymentMethodCreatingResponseCardType2 CustomerPaymentMethodCreatingResponseCardType = "2"
	CustomerPaymentMethodCreatingResponseCardType3 CustomerPaymentMethodCreatingResponseCardType = "3"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseCardType values.
func (CustomerPaymentMethodCreatingResponseCardType) AllValues() []CustomerPaymentMethodCreatingResponseCardType {
	return []CustomerPaymentMethodCreatingResponseCardType{
		CustomerPaymentMethodCreatingResponseCardType0,
		CustomerPaymentMethodCreatingResponseCardType1,
		CustomerPaymentMethodCreatingResponseCardType2,
		CustomerPaymentMethodCreatingResponseCardType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseCardType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseCardType0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardType1:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardType2:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseCardType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseCardType(data) {
	case CustomerPaymentMethodCreatingResponseCardType0:
		*s = CustomerPaymentMethodCreatingResponseCardType0
		return nil
	case CustomerPaymentMethodCreatingResponseCardType1:
		*s = CustomerPaymentMethodCreatingResponseCardType1
		return nil
	case CustomerPaymentMethodCreatingResponseCardType2:
		*s = CustomerPaymentMethodCreatingResponseCardType2
		return nil
	case CustomerPaymentMethodCreatingResponseCardType3:
		*s = CustomerPaymentMethodCreatingResponseCardType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
// - `0`: デフォルト決済手段ではない
// - `1`: デフォルト決済手段.
type CustomerPaymentMethodCreatingResponseDefaultFlag string

const (
	CustomerPaymentMethodCreatingResponseDefaultFlag0 CustomerPaymentMethodCreatingResponseDefaultFlag = "0"
	CustomerPaymentMethodCreatingResponseDefaultFlag1 CustomerPaymentMethodCreatingResponseDefaultFlag = "1"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseDefaultFlag values.
func (CustomerPaymentMethodCreatingResponseDefaultFlag) AllValues() []CustomerPaymentMethodCreatingResponseDefaultFlag {
	return []CustomerPaymentMethodCreatingResponseDefaultFlag{
		CustomerPaymentMethodCreatingResponseDefaultFlag0,
		CustomerPaymentMethodCreatingResponseDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseDefaultFlag0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseDefaultFlag(data) {
	case CustomerPaymentMethodCreatingResponseDefaultFlag0:
		*s = CustomerPaymentMethodCreatingResponseDefaultFlag0
		return nil
	case CustomerPaymentMethodCreatingResponseDefaultFlag1:
		*s = CustomerPaymentMethodCreatingResponseDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 削除フラグ.
type CustomerPaymentMethodCreatingResponseDeleteFlag string

const (
	CustomerPaymentMethodCreatingResponseDeleteFlag1 CustomerPaymentMethodCreatingResponseDeleteFlag = "1"
	CustomerPaymentMethodCreatingResponseDeleteFlag0 CustomerPaymentMethodCreatingResponseDeleteFlag = "0"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseDeleteFlag values.
func (CustomerPaymentMethodCreatingResponseDeleteFlag) AllValues() []CustomerPaymentMethodCreatingResponseDeleteFlag {
	return []CustomerPaymentMethodCreatingResponseDeleteFlag{
		CustomerPaymentMethodCreatingResponseDeleteFlag1,
		CustomerPaymentMethodCreatingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseDeleteFlag1:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseDeleteFlag(data) {
	case CustomerPaymentMethodCreatingResponseDeleteFlag1:
		*s = CustomerPaymentMethodCreatingResponseDeleteFlag1
		return nil
	case CustomerPaymentMethodCreatingResponseDeleteFlag0:
		*s = CustomerPaymentMethodCreatingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText">この決済手段が振替用口座を表す（`pay_type =
// Directdebit`）とき、口座情報の詳細がこの`directdebit`オブジェクトに格納されます。</span>.
type CustomerPaymentMethodCreatingResponseDirectdebit struct {
	ApplicationType OptNilDirectDebitApplicationType `json:"application_type"`
	// 請求可能予定日。\
	// 口座登録後、実際に請求依頼が可能となると予定される日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ExpectedBillableDate OptNilString `json:"expected_billable_date"`
	// 最終引落日。\
	// 金融機関によってこの口座から実際に引き落とされた実績日のうち、最も新しい日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	LastWithdrawalDate OptNilString                    `json:"last_withdrawal_date"`
	LastResultCode     OptNilDirectDebitLastResultCode `json:"last_result_code"`
	// 金融機関種別。
	// - `0`: ゆうちょ銀行以外の金融機関
	// - `1`: ゆうちょ銀行.
	BankType OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType `json:"bank_type"`
	// 金融機関コード。\
	// 金融機関のコードです。\
	// 例：`0310`.
	BankCode OptNilString `json:"bank_code"`
	// 金融機関名.
	BankName OptNilString `json:"bank_name"`
	// 支店コード。\
	// 金融機関の支店コードです。\
	// 例：`001`.
	BranchCode OptNilString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 口座種別。
	// - `0`: 普通預金
	// - `1`: 当座預金.
	AccountType OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType `json:"account_type"`
	// 口座番号.
	AccountNumber OptNilString `json:"account_number"`
	// ゆうちょ 預金記号.
	PostalAccountNumber1 OptNilString `json:"postal_account_number_1"`
	// ゆうちょ 預金番号.
	PostalAccountNumber2 OptNilString `json:"postal_account_number_2"`
	// 口座名義.
	AccountName OptNilString `json:"account_name"`
	// 口座名義（カナ）.
	AccountNameKana OptNilString `json:"account_name_kana"`
	// 依頼書登録のパラメータ<br />
	// <span class="smallText">
	// ※
	// 依頼書登録により登録された口座の場合、この`paper_application`オブジェクトに依頼書からfincodeに転記した内容が含められます。
	// </span>.
	PaperApplication OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication `json:"paper_application"`
}

// GetApplicationType returns the value of ApplicationType.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetApplicationType() OptNilDirectDebitApplicationType {
	return s.ApplicationType
}

// GetExpectedBillableDate returns the value of ExpectedBillableDate.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetExpectedBillableDate() OptNilString {
	return s.ExpectedBillableDate
}

// GetLastWithdrawalDate returns the value of LastWithdrawalDate.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetLastWithdrawalDate() OptNilString {
	return s.LastWithdrawalDate
}

// GetLastResultCode returns the value of LastResultCode.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetLastResultCode() OptNilDirectDebitLastResultCode {
	return s.LastResultCode
}

// GetBankType returns the value of BankType.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetBankType() OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType {
	return s.BankType
}

// GetBankCode returns the value of BankCode.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetBankCode() OptNilString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetBankName() OptNilString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetBranchName() OptString {
	return s.BranchName
}

// GetAccountType returns the value of AccountType.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetAccountType() OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType {
	return s.AccountType
}

// GetAccountNumber returns the value of AccountNumber.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetAccountNumber() OptNilString {
	return s.AccountNumber
}

// GetPostalAccountNumber1 returns the value of PostalAccountNumber1.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetPostalAccountNumber1() OptNilString {
	return s.PostalAccountNumber1
}

// GetPostalAccountNumber2 returns the value of PostalAccountNumber2.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetPostalAccountNumber2() OptNilString {
	return s.PostalAccountNumber2
}

// GetAccountName returns the value of AccountName.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetAccountName() OptNilString {
	return s.AccountName
}

// GetAccountNameKana returns the value of AccountNameKana.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetAccountNameKana() OptNilString {
	return s.AccountNameKana
}

// GetPaperApplication returns the value of PaperApplication.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) GetPaperApplication() OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication {
	return s.PaperApplication
}

// SetApplicationType sets the value of ApplicationType.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetApplicationType(val OptNilDirectDebitApplicationType) {
	s.ApplicationType = val
}

// SetExpectedBillableDate sets the value of ExpectedBillableDate.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetExpectedBillableDate(val OptNilString) {
	s.ExpectedBillableDate = val
}

// SetLastWithdrawalDate sets the value of LastWithdrawalDate.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetLastWithdrawalDate(val OptNilString) {
	s.LastWithdrawalDate = val
}

// SetLastResultCode sets the value of LastResultCode.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetLastResultCode(val OptNilDirectDebitLastResultCode) {
	s.LastResultCode = val
}

// SetBankType sets the value of BankType.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetBankType(val OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) {
	s.BankType = val
}

// SetBankCode sets the value of BankCode.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetBankCode(val OptNilString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetBankName(val OptNilString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetAccountType sets the value of AccountType.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetAccountType(val OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) {
	s.AccountType = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetAccountNumber(val OptNilString) {
	s.AccountNumber = val
}

// SetPostalAccountNumber1 sets the value of PostalAccountNumber1.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetPostalAccountNumber1(val OptNilString) {
	s.PostalAccountNumber1 = val
}

// SetPostalAccountNumber2 sets the value of PostalAccountNumber2.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetPostalAccountNumber2(val OptNilString) {
	s.PostalAccountNumber2 = val
}

// SetAccountName sets the value of AccountName.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetAccountName(val OptNilString) {
	s.AccountName = val
}

// SetAccountNameKana sets the value of AccountNameKana.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetAccountNameKana(val OptNilString) {
	s.AccountNameKana = val
}

// SetPaperApplication sets the value of PaperApplication.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) SetPaperApplication(val OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) {
	s.PaperApplication = val
}

// 口座種別。
// - `0`: 普通預金
// - `1`: 当座預金.
type CustomerPaymentMethodCreatingResponseDirectdebitAccountType string

const (
	CustomerPaymentMethodCreatingResponseDirectdebitAccountType0 CustomerPaymentMethodCreatingResponseDirectdebitAccountType = "0"
	CustomerPaymentMethodCreatingResponseDirectdebitAccountType1 CustomerPaymentMethodCreatingResponseDirectdebitAccountType = "1"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseDirectdebitAccountType values.
func (CustomerPaymentMethodCreatingResponseDirectdebitAccountType) AllValues() []CustomerPaymentMethodCreatingResponseDirectdebitAccountType {
	return []CustomerPaymentMethodCreatingResponseDirectdebitAccountType{
		CustomerPaymentMethodCreatingResponseDirectdebitAccountType0,
		CustomerPaymentMethodCreatingResponseDirectdebitAccountType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseDirectdebitAccountType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseDirectdebitAccountType0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseDirectdebitAccountType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitAccountType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseDirectdebitAccountType(data) {
	case CustomerPaymentMethodCreatingResponseDirectdebitAccountType0:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitAccountType0
		return nil
	case CustomerPaymentMethodCreatingResponseDirectdebitAccountType1:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitAccountType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 金融機関種別。
// - `0`: ゆうちょ銀行以外の金融機関
// - `1`: ゆうちょ銀行.
type CustomerPaymentMethodCreatingResponseDirectdebitBankType string

const (
	CustomerPaymentMethodCreatingResponseDirectdebitBankType0 CustomerPaymentMethodCreatingResponseDirectdebitBankType = "0"
	CustomerPaymentMethodCreatingResponseDirectdebitBankType1 CustomerPaymentMethodCreatingResponseDirectdebitBankType = "1"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseDirectdebitBankType values.
func (CustomerPaymentMethodCreatingResponseDirectdebitBankType) AllValues() []CustomerPaymentMethodCreatingResponseDirectdebitBankType {
	return []CustomerPaymentMethodCreatingResponseDirectdebitBankType{
		CustomerPaymentMethodCreatingResponseDirectdebitBankType0,
		CustomerPaymentMethodCreatingResponseDirectdebitBankType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseDirectdebitBankType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseDirectdebitBankType0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseDirectdebitBankType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitBankType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseDirectdebitBankType(data) {
	case CustomerPaymentMethodCreatingResponseDirectdebitBankType0:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitBankType0
		return nil
	case CustomerPaymentMethodCreatingResponseDirectdebitBankType1:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitBankType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 依頼書登録のパラメータ<br />
// <span class="smallText">
// ※
// 依頼書登録により登録された口座の場合、この`paper_application`オブジェクトに依頼書からfincodeに転記した内容が含められます。
// </span>.
type CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication struct {
	// 依頼書 仮登録日時。\
	// 依頼書を仮登録した日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PreregisteredDate OptNilString `json:"preregistered_date"`
	// 依頼書ID。\
	// 依頼書を管理画面から登録した際に登録者が指定した、依頼書を一意に識別するIDです。.
	RequestFormID OptNilString `json:"request_form_id"`
	// 依頼書登録に失敗した理由。.
	PaperFailureDescription OptNilString `json:"paper_failure_description"`
}

// GetPreregisteredDate returns the value of PreregisteredDate.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) GetPreregisteredDate() OptNilString {
	return s.PreregisteredDate
}

// GetRequestFormID returns the value of RequestFormID.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) GetRequestFormID() OptNilString {
	return s.RequestFormID
}

// GetPaperFailureDescription returns the value of PaperFailureDescription.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) GetPaperFailureDescription() OptNilString {
	return s.PaperFailureDescription
}

// SetPreregisteredDate sets the value of PreregisteredDate.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) SetPreregisteredDate(val OptNilString) {
	s.PreregisteredDate = val
}

// SetRequestFormID sets the value of RequestFormID.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) SetRequestFormID(val OptNilString) {
	s.RequestFormID = val
}

// SetPaperFailureDescription sets the value of PaperFailureDescription.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) SetPaperFailureDescription(val OptNilString) {
	s.PaperFailureDescription = val
}

// 決済種別（決済手段APIに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type CustomerPaymentMethodCreatingResponsePayType string

const (
	CustomerPaymentMethodCreatingResponsePayTypeCard        CustomerPaymentMethodCreatingResponsePayType = "Card"
	CustomerPaymentMethodCreatingResponsePayTypeDirectdebit CustomerPaymentMethodCreatingResponsePayType = "Directdebit"
)

// AllValues returns all CustomerPaymentMethodCreatingResponsePayType values.
func (CustomerPaymentMethodCreatingResponsePayType) AllValues() []CustomerPaymentMethodCreatingResponsePayType {
	return []CustomerPaymentMethodCreatingResponsePayType{
		CustomerPaymentMethodCreatingResponsePayTypeCard,
		CustomerPaymentMethodCreatingResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponsePayTypeCard:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponsePayType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponsePayType(data) {
	case CustomerPaymentMethodCreatingResponsePayTypeCard:
		*s = CustomerPaymentMethodCreatingResponsePayTypeCard
		return nil
	case CustomerPaymentMethodCreatingResponsePayTypeDirectdebit:
		*s = CustomerPaymentMethodCreatingResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクトURLアクセス済みフラグ\
// 購入者が`redirect_url`にアクセスしたことがあるかどうかを示すフラグです。
// - `0`: 未アクセス
// - `1`: 1回以上アクセス済み.
type CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag string

const (
	CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag0 CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag = "0"
	CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag1 CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag = "1"
)

// AllValues returns all CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag values.
func (CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) AllValues() []CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag {
	return []CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag{
		CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag0,
		CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag0:
		return []byte(s), nil
	case CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag(data) {
	case CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag0:
		*s = CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag0
		return nil
	case CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag1:
		*s = CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerPaymentMethod.Deleting.Response
type CustomerPaymentMethodDeletingResponse struct {
	// 削除された決済手段のID.
	ID         OptString                                          `json:"id"`
	DeleteFlag OptCustomerPaymentMethodDeletingResponseDeleteFlag `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *CustomerPaymentMethodDeletingResponse) GetID() OptString {
	return s.ID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomerPaymentMethodDeletingResponse) GetDeleteFlag() OptCustomerPaymentMethodDeletingResponseDeleteFlag {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *CustomerPaymentMethodDeletingResponse) SetID(val OptString) {
	s.ID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomerPaymentMethodDeletingResponse) SetDeleteFlag(val OptCustomerPaymentMethodDeletingResponseDeleteFlag) {
	s.DeleteFlag = val
}

func (*CustomerPaymentMethodDeletingResponse) deleteCustomerPaymentMethodRes() {}

// 削除フラグ.
type CustomerPaymentMethodDeletingResponseDeleteFlag string

const (
	CustomerPaymentMethodDeletingResponseDeleteFlag1 CustomerPaymentMethodDeletingResponseDeleteFlag = "1"
	CustomerPaymentMethodDeletingResponseDeleteFlag0 CustomerPaymentMethodDeletingResponseDeleteFlag = "0"
)

// AllValues returns all CustomerPaymentMethodDeletingResponseDeleteFlag values.
func (CustomerPaymentMethodDeletingResponseDeleteFlag) AllValues() []CustomerPaymentMethodDeletingResponseDeleteFlag {
	return []CustomerPaymentMethodDeletingResponseDeleteFlag{
		CustomerPaymentMethodDeletingResponseDeleteFlag1,
		CustomerPaymentMethodDeletingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodDeletingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodDeletingResponseDeleteFlag1:
		return []byte(s), nil
	case CustomerPaymentMethodDeletingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodDeletingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodDeletingResponseDeleteFlag(data) {
	case CustomerPaymentMethodDeletingResponseDeleteFlag1:
		*s = CustomerPaymentMethodDeletingResponseDeleteFlag1
		return nil
	case CustomerPaymentMethodDeletingResponseDeleteFlag0:
		*s = CustomerPaymentMethodDeletingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CustomerPaymentMethod.ListRetrieving.Response
type CustomerPaymentMethodListRetrievingResponse struct {
	List []PaymentMethod `json:"list"`
}

// GetList returns the value of List.
func (s *CustomerPaymentMethodListRetrievingResponse) GetList() []PaymentMethod {
	return s.List
}

// SetList sets the value of List.
func (s *CustomerPaymentMethodListRetrievingResponse) SetList(val []PaymentMethod) {
	s.List = val
}

func (*CustomerPaymentMethodListRetrievingResponse) retrieveCustomerPaymentMethodListRes() {}

// Ref: #/components/schemas/CustomerPaymentMethod.Retrieving.Response
type CustomerPaymentMethodRetrievingResponse struct {
	// 決済手段ID.
	ID OptString `json:"id"`
	// 決済手段の種別。\
	// この決済手段の実体の種別を示します。
	// - `Card`:
	// この決済手段はクレジットカード/デビットカード/プリペイドカードです。
	// - `Directdebit`: この決済手段は口座振替用口座情報です。.
	PayType OptCustomerPaymentMethodRetrievingResponsePayType `json:"pay_type"`
	// この決済手段が紐づく顧客のID.
	CustomerID OptString              `json:"customer_id"`
	Status     OptPaymentMethodStatus `json:"status"`
	// リダイレクトURL。\
	// 購入者にこのURLを提供することで、ステータスが`AWAITING_CUSTOMER_ACTION`
	// の決済手段を有効化するためのアクションを購入者にとらせることができます。
	// - 振替口座登録の場合：
	// このURLにアクセスして振替口座登録の承認を行います。このURLには1度だけアクセスできます。
	// - カード登録の場合： このURLにアクセスして3Dセキュア認証を行います。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクトURLアクセス済みフラグ\
	// 購入者が`redirect_url`にアクセスしたことがあるかどうかを示すフラグです。
	// - `0`: 未アクセス
	// - `1`: 1回以上アクセス済み.
	RedirectURLAccessedFlag OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag `json:"redirect_url_accessed_flag"`
	// 加盟店戻りURL。（成功時）\
	// 購入者がアクションを完了し、決済手段の登録に成功した際にリダイレクトされるURLです。\
	// POSTメソッドでリダイレクトがされます。.
	ReturnURL OptNilString `json:"return_url"`
	// 加盟店戻りURL。（失敗時）\
	// 購入者がアクションを完了し、決済手段の登録に失敗した際にリダイレクトされるURLです。\
	// POSTメソッドでリダイレクトがされます。.
	ReturnURLOnFailure OptNilString `json:"return_url_on_failure"`
	// デフォルトフラグ。\
	// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
	// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
	// - `0`: デフォルト決済手段ではない
	// - `1`: デフォルト決済手段.
	DefaultFlag  OptCustomerPaymentMethodRetrievingResponseDefaultFlag `json:"default_flag"`
	ClientField1 *NilString                                            `json:"client_field_1"`
	ClientField2 *NilString                                            `json:"client_field_2"`
	ClientField3 *NilString                                            `json:"client_field_3"`
	DeleteFlag   OptCustomerPaymentMethodRetrievingResponseDeleteFlag  `json:"delete_flag"`
	ProcessDate  *NilString                                            `json:"process_date"`
	Created      OptString                                             `json:"created"`
	Updated      *NilString                                            `json:"updated"`
	// <span class="smallText">この決済手段がカードを表す（`pay_type =
	// Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span>.
	Card OptNilCustomerPaymentMethodRetrievingResponseCard `json:"card"`
	// <span class="smallText">この決済手段が振替用口座を表す（`pay_type =
	// Directdebit`）とき、口座情報の詳細がこの`directdebit`オブジェクトに格納されます。</span>.
	Directdebit OptNilCustomerPaymentMethodRetrievingResponseDirectdebit `json:"directdebit"`
}

// GetID returns the value of ID.
func (s *CustomerPaymentMethodRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *CustomerPaymentMethodRetrievingResponse) GetPayType() OptCustomerPaymentMethodRetrievingResponsePayType {
	return s.PayType
}

// GetCustomerID returns the value of CustomerID.
func (s *CustomerPaymentMethodRetrievingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetStatus returns the value of Status.
func (s *CustomerPaymentMethodRetrievingResponse) GetStatus() OptPaymentMethodStatus {
	return s.Status
}

// GetRedirectURL returns the value of RedirectURL.
func (s *CustomerPaymentMethodRetrievingResponse) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectURLAccessedFlag returns the value of RedirectURLAccessedFlag.
func (s *CustomerPaymentMethodRetrievingResponse) GetRedirectURLAccessedFlag() OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag {
	return s.RedirectURLAccessedFlag
}

// GetReturnURL returns the value of ReturnURL.
func (s *CustomerPaymentMethodRetrievingResponse) GetReturnURL() OptNilString {
	return s.ReturnURL
}

// GetReturnURLOnFailure returns the value of ReturnURLOnFailure.
func (s *CustomerPaymentMethodRetrievingResponse) GetReturnURLOnFailure() OptNilString {
	return s.ReturnURLOnFailure
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *CustomerPaymentMethodRetrievingResponse) GetDefaultFlag() OptCustomerPaymentMethodRetrievingResponseDefaultFlag {
	return s.DefaultFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *CustomerPaymentMethodRetrievingResponse) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *CustomerPaymentMethodRetrievingResponse) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *CustomerPaymentMethodRetrievingResponse) GetClientField3() *NilString {
	return s.ClientField3
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *CustomerPaymentMethodRetrievingResponse) GetDeleteFlag() OptCustomerPaymentMethodRetrievingResponseDeleteFlag {
	return s.DeleteFlag
}

// GetProcessDate returns the value of ProcessDate.
func (s *CustomerPaymentMethodRetrievingResponse) GetProcessDate() *NilString {
	return s.ProcessDate
}

// GetCreated returns the value of Created.
func (s *CustomerPaymentMethodRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerPaymentMethodRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// GetCard returns the value of Card.
func (s *CustomerPaymentMethodRetrievingResponse) GetCard() OptNilCustomerPaymentMethodRetrievingResponseCard {
	return s.Card
}

// GetDirectdebit returns the value of Directdebit.
func (s *CustomerPaymentMethodRetrievingResponse) GetDirectdebit() OptNilCustomerPaymentMethodRetrievingResponseDirectdebit {
	return s.Directdebit
}

// SetID sets the value of ID.
func (s *CustomerPaymentMethodRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *CustomerPaymentMethodRetrievingResponse) SetPayType(val OptCustomerPaymentMethodRetrievingResponsePayType) {
	s.PayType = val
}

// SetCustomerID sets the value of CustomerID.
func (s *CustomerPaymentMethodRetrievingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetStatus sets the value of Status.
func (s *CustomerPaymentMethodRetrievingResponse) SetStatus(val OptPaymentMethodStatus) {
	s.Status = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *CustomerPaymentMethodRetrievingResponse) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectURLAccessedFlag sets the value of RedirectURLAccessedFlag.
func (s *CustomerPaymentMethodRetrievingResponse) SetRedirectURLAccessedFlag(val OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) {
	s.RedirectURLAccessedFlag = val
}

// SetReturnURL sets the value of ReturnURL.
func (s *CustomerPaymentMethodRetrievingResponse) SetReturnURL(val OptNilString) {
	s.ReturnURL = val
}

// SetReturnURLOnFailure sets the value of ReturnURLOnFailure.
func (s *CustomerPaymentMethodRetrievingResponse) SetReturnURLOnFailure(val OptNilString) {
	s.ReturnURLOnFailure = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *CustomerPaymentMethodRetrievingResponse) SetDefaultFlag(val OptCustomerPaymentMethodRetrievingResponseDefaultFlag) {
	s.DefaultFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *CustomerPaymentMethodRetrievingResponse) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *CustomerPaymentMethodRetrievingResponse) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *CustomerPaymentMethodRetrievingResponse) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *CustomerPaymentMethodRetrievingResponse) SetDeleteFlag(val OptCustomerPaymentMethodRetrievingResponseDeleteFlag) {
	s.DeleteFlag = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *CustomerPaymentMethodRetrievingResponse) SetProcessDate(val *NilString) {
	s.ProcessDate = val
}

// SetCreated sets the value of Created.
func (s *CustomerPaymentMethodRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerPaymentMethodRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetCard sets the value of Card.
func (s *CustomerPaymentMethodRetrievingResponse) SetCard(val OptNilCustomerPaymentMethodRetrievingResponseCard) {
	s.Card = val
}

// SetDirectdebit sets the value of Directdebit.
func (s *CustomerPaymentMethodRetrievingResponse) SetDirectdebit(val OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) {
	s.Directdebit = val
}

func (*CustomerPaymentMethodRetrievingResponse) retrieveCustomerPaymentMethodRes() {}

// <span class="smallText">この決済手段がカードを表す（`pay_type =
// Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span>.
type CustomerPaymentMethodRetrievingResponseCard struct {
	// マスク済みカード番号。\
	// <span class="smallText">
	// 下4桁以外をマスクしたカード番号です。\
	// カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\
	// </span>
	// 形式：`************1234`.
	CardNo OptString `json:"card_no"`
	// カード有効期限。\
	// 形式：`YYMM`.
	Expire OptNilString `json:"expire"`
	// カード名義人名。.
	HolderName OptNilString                                         `json:"holder_name"`
	Type       *NilCustomerPaymentMethodRetrievingResponseCardType  `json:"type"`
	Brand      *NilCustomerPaymentMethodRetrievingResponseCardBrand `json:"brand"`
	// カード番号をもとに生成されたハッシュ値。\
	// <span class="smallText">
	// おなじカード番号に対しては常に同じ値が返されます。\
	// カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。
	// </span>.
	CardNoHash OptString `json:"card_no_hash"`
	// カード登録時3Dセキュア認証を利用するか。
	// - `0`: 3Dセキュア認証を利用しない（デフォルト）
	// - `2`: 3Dセキュア2.0認証を利用する.
	TdsType *NilCustomerPaymentMethodRetrievingResponseCardTdsType `json:"tds_type"`
	// 3Dセキュア2.0非対応時の挙動設定\
	// 購入者がこの決済に利用したカードが3Dセキュア2.
	// 0に非対応である場合の後続処理を設定します。
	// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
	// - `3`: 3Dセキュア認証なしで登録を行う。.
	Tds2Type     *NilCustomerPaymentMethodRetrievingResponseCardTds2Type `json:"tds2_type"`
	Tds2Status   OptTds2Status                                           `json:"tds2_status"`
	MerchantName OptString                                               `json:"merchant_name"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// ACS呼出判定。.
	Acs OptNilString `json:"acs"`
}

// GetCardNo returns the value of CardNo.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetHolderName() OptNilString {
	return s.HolderName
}

// GetType returns the value of Type.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetType() *NilCustomerPaymentMethodRetrievingResponseCardType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetBrand() *NilCustomerPaymentMethodRetrievingResponseCardBrand {
	return s.Brand
}

// GetCardNoHash returns the value of CardNoHash.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetTdsType returns the value of TdsType.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetTdsType() *NilCustomerPaymentMethodRetrievingResponseCardTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetTds2Type() *NilCustomerPaymentMethodRetrievingResponseCardTds2Type {
	return s.Tds2Type
}

// GetTds2Status returns the value of Tds2Status.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetTds2Status() OptTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetMerchantName() OptString {
	return s.MerchantName
}

// GetAccessID returns the value of AccessID.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetAccessID() OptString {
	return s.AccessID
}

// GetAcs returns the value of Acs.
func (s *CustomerPaymentMethodRetrievingResponseCard) GetAcs() OptNilString {
	return s.Acs
}

// SetCardNo sets the value of CardNo.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetType sets the value of Type.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetType(val *NilCustomerPaymentMethodRetrievingResponseCardType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetBrand(val *NilCustomerPaymentMethodRetrievingResponseCardBrand) {
	s.Brand = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetTdsType sets the value of TdsType.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetTdsType(val *NilCustomerPaymentMethodRetrievingResponseCardTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetTds2Type(val *NilCustomerPaymentMethodRetrievingResponseCardTds2Type) {
	s.Tds2Type = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetTds2Status(val OptTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetMerchantName(val OptString) {
	s.MerchantName = val
}

// SetAccessID sets the value of AccessID.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAcs sets the value of Acs.
func (s *CustomerPaymentMethodRetrievingResponseCard) SetAcs(val OptNilString) {
	s.Acs = val
}

// Merged schema.
type CustomerPaymentMethodRetrievingResponseCardBrand string

const (
	CustomerPaymentMethodRetrievingResponseCardBrandVISA     CustomerPaymentMethodRetrievingResponseCardBrand = "VISA"
	CustomerPaymentMethodRetrievingResponseCardBrandMASTER   CustomerPaymentMethodRetrievingResponseCardBrand = "MASTER"
	CustomerPaymentMethodRetrievingResponseCardBrandJCB      CustomerPaymentMethodRetrievingResponseCardBrand = "JCB"
	CustomerPaymentMethodRetrievingResponseCardBrandAMEX     CustomerPaymentMethodRetrievingResponseCardBrand = "AMEX"
	CustomerPaymentMethodRetrievingResponseCardBrandDINERS   CustomerPaymentMethodRetrievingResponseCardBrand = "DINERS"
	CustomerPaymentMethodRetrievingResponseCardBrandDISCOVER CustomerPaymentMethodRetrievingResponseCardBrand = "DISCOVER"
	CustomerPaymentMethodRetrievingResponseCardBrandEmpty    CustomerPaymentMethodRetrievingResponseCardBrand = ""
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseCardBrand values.
func (CustomerPaymentMethodRetrievingResponseCardBrand) AllValues() []CustomerPaymentMethodRetrievingResponseCardBrand {
	return []CustomerPaymentMethodRetrievingResponseCardBrand{
		CustomerPaymentMethodRetrievingResponseCardBrandVISA,
		CustomerPaymentMethodRetrievingResponseCardBrandMASTER,
		CustomerPaymentMethodRetrievingResponseCardBrandJCB,
		CustomerPaymentMethodRetrievingResponseCardBrandAMEX,
		CustomerPaymentMethodRetrievingResponseCardBrandDINERS,
		CustomerPaymentMethodRetrievingResponseCardBrandDISCOVER,
		CustomerPaymentMethodRetrievingResponseCardBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseCardBrand) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseCardBrandVISA:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardBrandMASTER:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardBrandJCB:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardBrandAMEX:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardBrandDINERS:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardBrandDISCOVER:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardBrand) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseCardBrand(data) {
	case CustomerPaymentMethodRetrievingResponseCardBrandVISA:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandVISA
		return nil
	case CustomerPaymentMethodRetrievingResponseCardBrandMASTER:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandMASTER
		return nil
	case CustomerPaymentMethodRetrievingResponseCardBrandJCB:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandJCB
		return nil
	case CustomerPaymentMethodRetrievingResponseCardBrandAMEX:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandAMEX
		return nil
	case CustomerPaymentMethodRetrievingResponseCardBrandDINERS:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandDINERS
		return nil
	case CustomerPaymentMethodRetrievingResponseCardBrandDISCOVER:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandDISCOVER
		return nil
	case CustomerPaymentMethodRetrievingResponseCardBrandEmpty:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type CustomerPaymentMethodRetrievingResponseCardTds2Type string

const (
	CustomerPaymentMethodRetrievingResponseCardTds2Type2 CustomerPaymentMethodRetrievingResponseCardTds2Type = "2"
	CustomerPaymentMethodRetrievingResponseCardTds2Type3 CustomerPaymentMethodRetrievingResponseCardTds2Type = "3"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseCardTds2Type values.
func (CustomerPaymentMethodRetrievingResponseCardTds2Type) AllValues() []CustomerPaymentMethodRetrievingResponseCardTds2Type {
	return []CustomerPaymentMethodRetrievingResponseCardTds2Type{
		CustomerPaymentMethodRetrievingResponseCardTds2Type2,
		CustomerPaymentMethodRetrievingResponseCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseCardTds2Type2:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardTds2Type) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseCardTds2Type(data) {
	case CustomerPaymentMethodRetrievingResponseCardTds2Type2:
		*s = CustomerPaymentMethodRetrievingResponseCardTds2Type2
		return nil
	case CustomerPaymentMethodRetrievingResponseCardTds2Type3:
		*s = CustomerPaymentMethodRetrievingResponseCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type CustomerPaymentMethodRetrievingResponseCardTdsType string

const (
	CustomerPaymentMethodRetrievingResponseCardTdsType0 CustomerPaymentMethodRetrievingResponseCardTdsType = "0"
	CustomerPaymentMethodRetrievingResponseCardTdsType2 CustomerPaymentMethodRetrievingResponseCardTdsType = "2"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseCardTdsType values.
func (CustomerPaymentMethodRetrievingResponseCardTdsType) AllValues() []CustomerPaymentMethodRetrievingResponseCardTdsType {
	return []CustomerPaymentMethodRetrievingResponseCardTdsType{
		CustomerPaymentMethodRetrievingResponseCardTdsType0,
		CustomerPaymentMethodRetrievingResponseCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseCardTdsType0:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardTdsType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseCardTdsType(data) {
	case CustomerPaymentMethodRetrievingResponseCardTdsType0:
		*s = CustomerPaymentMethodRetrievingResponseCardTdsType0
		return nil
	case CustomerPaymentMethodRetrievingResponseCardTdsType2:
		*s = CustomerPaymentMethodRetrievingResponseCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type CustomerPaymentMethodRetrievingResponseCardType string

const (
	CustomerPaymentMethodRetrievingResponseCardType0 CustomerPaymentMethodRetrievingResponseCardType = "0"
	CustomerPaymentMethodRetrievingResponseCardType1 CustomerPaymentMethodRetrievingResponseCardType = "1"
	CustomerPaymentMethodRetrievingResponseCardType2 CustomerPaymentMethodRetrievingResponseCardType = "2"
	CustomerPaymentMethodRetrievingResponseCardType3 CustomerPaymentMethodRetrievingResponseCardType = "3"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseCardType values.
func (CustomerPaymentMethodRetrievingResponseCardType) AllValues() []CustomerPaymentMethodRetrievingResponseCardType {
	return []CustomerPaymentMethodRetrievingResponseCardType{
		CustomerPaymentMethodRetrievingResponseCardType0,
		CustomerPaymentMethodRetrievingResponseCardType1,
		CustomerPaymentMethodRetrievingResponseCardType2,
		CustomerPaymentMethodRetrievingResponseCardType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseCardType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseCardType0:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardType1:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardType2:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseCardType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseCardType(data) {
	case CustomerPaymentMethodRetrievingResponseCardType0:
		*s = CustomerPaymentMethodRetrievingResponseCardType0
		return nil
	case CustomerPaymentMethodRetrievingResponseCardType1:
		*s = CustomerPaymentMethodRetrievingResponseCardType1
		return nil
	case CustomerPaymentMethodRetrievingResponseCardType2:
		*s = CustomerPaymentMethodRetrievingResponseCardType2
		return nil
	case CustomerPaymentMethodRetrievingResponseCardType3:
		*s = CustomerPaymentMethodRetrievingResponseCardType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
// - `0`: デフォルト決済手段ではない
// - `1`: デフォルト決済手段.
type CustomerPaymentMethodRetrievingResponseDefaultFlag string

const (
	CustomerPaymentMethodRetrievingResponseDefaultFlag0 CustomerPaymentMethodRetrievingResponseDefaultFlag = "0"
	CustomerPaymentMethodRetrievingResponseDefaultFlag1 CustomerPaymentMethodRetrievingResponseDefaultFlag = "1"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseDefaultFlag values.
func (CustomerPaymentMethodRetrievingResponseDefaultFlag) AllValues() []CustomerPaymentMethodRetrievingResponseDefaultFlag {
	return []CustomerPaymentMethodRetrievingResponseDefaultFlag{
		CustomerPaymentMethodRetrievingResponseDefaultFlag0,
		CustomerPaymentMethodRetrievingResponseDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseDefaultFlag0:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDefaultFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseDefaultFlag(data) {
	case CustomerPaymentMethodRetrievingResponseDefaultFlag0:
		*s = CustomerPaymentMethodRetrievingResponseDefaultFlag0
		return nil
	case CustomerPaymentMethodRetrievingResponseDefaultFlag1:
		*s = CustomerPaymentMethodRetrievingResponseDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 削除フラグ.
type CustomerPaymentMethodRetrievingResponseDeleteFlag string

const (
	CustomerPaymentMethodRetrievingResponseDeleteFlag1 CustomerPaymentMethodRetrievingResponseDeleteFlag = "1"
	CustomerPaymentMethodRetrievingResponseDeleteFlag0 CustomerPaymentMethodRetrievingResponseDeleteFlag = "0"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseDeleteFlag values.
func (CustomerPaymentMethodRetrievingResponseDeleteFlag) AllValues() []CustomerPaymentMethodRetrievingResponseDeleteFlag {
	return []CustomerPaymentMethodRetrievingResponseDeleteFlag{
		CustomerPaymentMethodRetrievingResponseDeleteFlag1,
		CustomerPaymentMethodRetrievingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseDeleteFlag1:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseDeleteFlag(data) {
	case CustomerPaymentMethodRetrievingResponseDeleteFlag1:
		*s = CustomerPaymentMethodRetrievingResponseDeleteFlag1
		return nil
	case CustomerPaymentMethodRetrievingResponseDeleteFlag0:
		*s = CustomerPaymentMethodRetrievingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText">この決済手段が振替用口座を表す（`pay_type =
// Directdebit`）とき、口座情報の詳細がこの`directdebit`オブジェクトに格納されます。</span>.
type CustomerPaymentMethodRetrievingResponseDirectdebit struct {
	ApplicationType OptNilDirectDebitApplicationType `json:"application_type"`
	// 請求可能予定日。\
	// 口座登録後、実際に請求依頼が可能となると予定される日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ExpectedBillableDate OptNilString `json:"expected_billable_date"`
	// 最終引落日。\
	// 金融機関によってこの口座から実際に引き落とされた実績日のうち、最も新しい日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	LastWithdrawalDate OptNilString                    `json:"last_withdrawal_date"`
	LastResultCode     OptNilDirectDebitLastResultCode `json:"last_result_code"`
	// 金融機関種別。
	// - `0`: ゆうちょ銀行以外の金融機関
	// - `1`: ゆうちょ銀行.
	BankType OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType `json:"bank_type"`
	// 金融機関コード。\
	// 金融機関のコードです。\
	// 例：`0310`.
	BankCode OptNilString `json:"bank_code"`
	// 金融機関名.
	BankName OptNilString `json:"bank_name"`
	// 支店コード。\
	// 金融機関の支店コードです。\
	// 例：`001`.
	BranchCode OptNilString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 口座種別。
	// - `0`: 普通預金
	// - `1`: 当座預金.
	AccountType OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType `json:"account_type"`
	// 口座番号.
	AccountNumber OptNilString `json:"account_number"`
	// ゆうちょ 預金記号.
	PostalAccountNumber1 OptNilString `json:"postal_account_number_1"`
	// ゆうちょ 預金番号.
	PostalAccountNumber2 OptNilString `json:"postal_account_number_2"`
	// 口座名義.
	AccountName OptNilString `json:"account_name"`
	// 口座名義（カナ）.
	AccountNameKana OptNilString `json:"account_name_kana"`
	// 依頼書登録のパラメータ<br />
	// <span class="smallText">
	// ※
	// 依頼書登録により登録された口座の場合、この`paper_application`オブジェクトに依頼書からfincodeに転記した内容が含められます。
	// </span>.
	PaperApplication OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication `json:"paper_application"`
}

// GetApplicationType returns the value of ApplicationType.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetApplicationType() OptNilDirectDebitApplicationType {
	return s.ApplicationType
}

// GetExpectedBillableDate returns the value of ExpectedBillableDate.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetExpectedBillableDate() OptNilString {
	return s.ExpectedBillableDate
}

// GetLastWithdrawalDate returns the value of LastWithdrawalDate.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetLastWithdrawalDate() OptNilString {
	return s.LastWithdrawalDate
}

// GetLastResultCode returns the value of LastResultCode.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetLastResultCode() OptNilDirectDebitLastResultCode {
	return s.LastResultCode
}

// GetBankType returns the value of BankType.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetBankType() OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType {
	return s.BankType
}

// GetBankCode returns the value of BankCode.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetBankCode() OptNilString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetBankName() OptNilString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetBranchName() OptString {
	return s.BranchName
}

// GetAccountType returns the value of AccountType.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetAccountType() OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType {
	return s.AccountType
}

// GetAccountNumber returns the value of AccountNumber.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetAccountNumber() OptNilString {
	return s.AccountNumber
}

// GetPostalAccountNumber1 returns the value of PostalAccountNumber1.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetPostalAccountNumber1() OptNilString {
	return s.PostalAccountNumber1
}

// GetPostalAccountNumber2 returns the value of PostalAccountNumber2.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetPostalAccountNumber2() OptNilString {
	return s.PostalAccountNumber2
}

// GetAccountName returns the value of AccountName.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetAccountName() OptNilString {
	return s.AccountName
}

// GetAccountNameKana returns the value of AccountNameKana.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetAccountNameKana() OptNilString {
	return s.AccountNameKana
}

// GetPaperApplication returns the value of PaperApplication.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) GetPaperApplication() OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication {
	return s.PaperApplication
}

// SetApplicationType sets the value of ApplicationType.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetApplicationType(val OptNilDirectDebitApplicationType) {
	s.ApplicationType = val
}

// SetExpectedBillableDate sets the value of ExpectedBillableDate.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetExpectedBillableDate(val OptNilString) {
	s.ExpectedBillableDate = val
}

// SetLastWithdrawalDate sets the value of LastWithdrawalDate.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetLastWithdrawalDate(val OptNilString) {
	s.LastWithdrawalDate = val
}

// SetLastResultCode sets the value of LastResultCode.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetLastResultCode(val OptNilDirectDebitLastResultCode) {
	s.LastResultCode = val
}

// SetBankType sets the value of BankType.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetBankType(val OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) {
	s.BankType = val
}

// SetBankCode sets the value of BankCode.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetBankCode(val OptNilString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetBankName(val OptNilString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetAccountType sets the value of AccountType.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetAccountType(val OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) {
	s.AccountType = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetAccountNumber(val OptNilString) {
	s.AccountNumber = val
}

// SetPostalAccountNumber1 sets the value of PostalAccountNumber1.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetPostalAccountNumber1(val OptNilString) {
	s.PostalAccountNumber1 = val
}

// SetPostalAccountNumber2 sets the value of PostalAccountNumber2.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetPostalAccountNumber2(val OptNilString) {
	s.PostalAccountNumber2 = val
}

// SetAccountName sets the value of AccountName.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetAccountName(val OptNilString) {
	s.AccountName = val
}

// SetAccountNameKana sets the value of AccountNameKana.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetAccountNameKana(val OptNilString) {
	s.AccountNameKana = val
}

// SetPaperApplication sets the value of PaperApplication.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) SetPaperApplication(val OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) {
	s.PaperApplication = val
}

// 口座種別。
// - `0`: 普通預金
// - `1`: 当座預金.
type CustomerPaymentMethodRetrievingResponseDirectdebitAccountType string

const (
	CustomerPaymentMethodRetrievingResponseDirectdebitAccountType0 CustomerPaymentMethodRetrievingResponseDirectdebitAccountType = "0"
	CustomerPaymentMethodRetrievingResponseDirectdebitAccountType1 CustomerPaymentMethodRetrievingResponseDirectdebitAccountType = "1"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseDirectdebitAccountType values.
func (CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) AllValues() []CustomerPaymentMethodRetrievingResponseDirectdebitAccountType {
	return []CustomerPaymentMethodRetrievingResponseDirectdebitAccountType{
		CustomerPaymentMethodRetrievingResponseDirectdebitAccountType0,
		CustomerPaymentMethodRetrievingResponseDirectdebitAccountType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseDirectdebitAccountType0:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseDirectdebitAccountType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseDirectdebitAccountType(data) {
	case CustomerPaymentMethodRetrievingResponseDirectdebitAccountType0:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitAccountType0
		return nil
	case CustomerPaymentMethodRetrievingResponseDirectdebitAccountType1:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitAccountType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 金融機関種別。
// - `0`: ゆうちょ銀行以外の金融機関
// - `1`: ゆうちょ銀行.
type CustomerPaymentMethodRetrievingResponseDirectdebitBankType string

const (
	CustomerPaymentMethodRetrievingResponseDirectdebitBankType0 CustomerPaymentMethodRetrievingResponseDirectdebitBankType = "0"
	CustomerPaymentMethodRetrievingResponseDirectdebitBankType1 CustomerPaymentMethodRetrievingResponseDirectdebitBankType = "1"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseDirectdebitBankType values.
func (CustomerPaymentMethodRetrievingResponseDirectdebitBankType) AllValues() []CustomerPaymentMethodRetrievingResponseDirectdebitBankType {
	return []CustomerPaymentMethodRetrievingResponseDirectdebitBankType{
		CustomerPaymentMethodRetrievingResponseDirectdebitBankType0,
		CustomerPaymentMethodRetrievingResponseDirectdebitBankType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseDirectdebitBankType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseDirectdebitBankType0:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseDirectdebitBankType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitBankType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseDirectdebitBankType(data) {
	case CustomerPaymentMethodRetrievingResponseDirectdebitBankType0:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitBankType0
		return nil
	case CustomerPaymentMethodRetrievingResponseDirectdebitBankType1:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitBankType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 依頼書登録のパラメータ<br />
// <span class="smallText">
// ※
// 依頼書登録により登録された口座の場合、この`paper_application`オブジェクトに依頼書からfincodeに転記した内容が含められます。
// </span>.
type CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication struct {
	// 依頼書 仮登録日時。\
	// 依頼書を仮登録した日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PreregisteredDate OptNilString `json:"preregistered_date"`
	// 依頼書ID。\
	// 依頼書を管理画面から登録した際に登録者が指定した、依頼書を一意に識別するIDです。.
	RequestFormID OptNilString `json:"request_form_id"`
	// 依頼書登録に失敗した理由。.
	PaperFailureDescription OptNilString `json:"paper_failure_description"`
}

// GetPreregisteredDate returns the value of PreregisteredDate.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) GetPreregisteredDate() OptNilString {
	return s.PreregisteredDate
}

// GetRequestFormID returns the value of RequestFormID.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) GetRequestFormID() OptNilString {
	return s.RequestFormID
}

// GetPaperFailureDescription returns the value of PaperFailureDescription.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) GetPaperFailureDescription() OptNilString {
	return s.PaperFailureDescription
}

// SetPreregisteredDate sets the value of PreregisteredDate.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) SetPreregisteredDate(val OptNilString) {
	s.PreregisteredDate = val
}

// SetRequestFormID sets the value of RequestFormID.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) SetRequestFormID(val OptNilString) {
	s.RequestFormID = val
}

// SetPaperFailureDescription sets the value of PaperFailureDescription.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) SetPaperFailureDescription(val OptNilString) {
	s.PaperFailureDescription = val
}

// 決済種別（決済手段APIに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type CustomerPaymentMethodRetrievingResponsePayType string

const (
	CustomerPaymentMethodRetrievingResponsePayTypeCard        CustomerPaymentMethodRetrievingResponsePayType = "Card"
	CustomerPaymentMethodRetrievingResponsePayTypeDirectdebit CustomerPaymentMethodRetrievingResponsePayType = "Directdebit"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponsePayType values.
func (CustomerPaymentMethodRetrievingResponsePayType) AllValues() []CustomerPaymentMethodRetrievingResponsePayType {
	return []CustomerPaymentMethodRetrievingResponsePayType{
		CustomerPaymentMethodRetrievingResponsePayTypeCard,
		CustomerPaymentMethodRetrievingResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponsePayTypeCard:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponsePayType) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponsePayType(data) {
	case CustomerPaymentMethodRetrievingResponsePayTypeCard:
		*s = CustomerPaymentMethodRetrievingResponsePayTypeCard
		return nil
	case CustomerPaymentMethodRetrievingResponsePayTypeDirectdebit:
		*s = CustomerPaymentMethodRetrievingResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクトURLアクセス済みフラグ\
// 購入者が`redirect_url`にアクセスしたことがあるかどうかを示すフラグです。
// - `0`: 未アクセス
// - `1`: 1回以上アクセス済み.
type CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag string

const (
	CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag0 CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag = "0"
	CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag1 CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag = "1"
)

// AllValues returns all CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag values.
func (CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) AllValues() []CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag {
	return []CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag{
		CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag0,
		CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) MarshalText() ([]byte, error) {
	switch s {
	case CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag0:
		return []byte(s), nil
	case CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) UnmarshalText(data []byte) error {
	switch CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag(data) {
	case CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag0:
		*s = CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag0
		return nil
	case CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag1:
		*s = CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Customer.Retrieving.Response
type CustomerRetrievingResponse struct {
	// 顧客ID.
	ID OptString `json:"id"`
	// 顧客の名前.
	Name OptNilString `json:"name"`
	// 顧客のメールアドレス\
	// 形式： RFC5322.
	Email OptNilString `json:"email"`
	// 顧客の電話番号の国コード\
	// 形式： ITU-T E.164.
	PhoneCc OptNilString `json:"phone_cc"`
	// 顧客の電話番号.
	PhoneNo OptNilString `json:"phone_no"`
	// 顧客の住所の国コード\
	// 形式： ISO 3166-1 numeric.
	AddrCountry OptNilString `json:"addr_country"`
	// 顧客の住所の州コードまたは都道府県コード\
	// 参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.
	// html).
	AddrState OptNilString `json:"addr_state"`
	// 顧客の住所の都市名.
	AddrCity OptNilString `json:"addr_city"`
	// 顧客の住所の番地・区画.
	AddrLine1 OptNilString `json:"addr_line_1"`
	// 顧客の住所の建物名・部屋番号.
	AddrLine2 OptNilString `json:"addr_line_2"`
	// 顧客の住所 その他.
	AddrLine3 OptNilString `json:"addr_line_3"`
	// 顧客の住所の郵便番号.
	AddrPostCode OptNilString `json:"addr_post_code"`
	// 決済手段（カード）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上のカードが登録済み.
	CardRegistration OptNilCustomerRetrievingResponseCardRegistration `json:"card_registration"`
	// 決済手段（口座振替）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上の振替用口座が登録済み.
	DirectdebitRegistration OptNilCustomerRetrievingResponseDirectdebitRegistration `json:"directdebit_registration"`
	Created                 OptString                                               `json:"created"`
	Updated                 *NilString                                              `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomerRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomerRetrievingResponse) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomerRetrievingResponse) GetEmail() OptNilString {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomerRetrievingResponse) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomerRetrievingResponse) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomerRetrievingResponse) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrState returns the value of AddrState.
func (s *CustomerRetrievingResponse) GetAddrState() OptNilString {
	return s.AddrState
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomerRetrievingResponse) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomerRetrievingResponse) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomerRetrievingResponse) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomerRetrievingResponse) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomerRetrievingResponse) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// GetCardRegistration returns the value of CardRegistration.
func (s *CustomerRetrievingResponse) GetCardRegistration() OptNilCustomerRetrievingResponseCardRegistration {
	return s.CardRegistration
}

// GetDirectdebitRegistration returns the value of DirectdebitRegistration.
func (s *CustomerRetrievingResponse) GetDirectdebitRegistration() OptNilCustomerRetrievingResponseDirectdebitRegistration {
	return s.DirectdebitRegistration
}

// GetCreated returns the value of Created.
func (s *CustomerRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomerRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomerRetrievingResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomerRetrievingResponse) SetEmail(val OptNilString) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomerRetrievingResponse) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomerRetrievingResponse) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomerRetrievingResponse) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomerRetrievingResponse) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomerRetrievingResponse) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomerRetrievingResponse) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomerRetrievingResponse) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomerRetrievingResponse) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomerRetrievingResponse) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// SetCardRegistration sets the value of CardRegistration.
func (s *CustomerRetrievingResponse) SetCardRegistration(val OptNilCustomerRetrievingResponseCardRegistration) {
	s.CardRegistration = val
}

// SetDirectdebitRegistration sets the value of DirectdebitRegistration.
func (s *CustomerRetrievingResponse) SetDirectdebitRegistration(val OptNilCustomerRetrievingResponseDirectdebitRegistration) {
	s.DirectdebitRegistration = val
}

// SetCreated sets the value of Created.
func (s *CustomerRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*CustomerRetrievingResponse) retrieveCustomerRes() {}

// 決済手段（カード）登録状況
// - `0`: 未登録
// - `1`: 1件以上のカードが登録済み.
type CustomerRetrievingResponseCardRegistration string

const (
	CustomerRetrievingResponseCardRegistration0 CustomerRetrievingResponseCardRegistration = "0"
	CustomerRetrievingResponseCardRegistration1 CustomerRetrievingResponseCardRegistration = "1"
)

// AllValues returns all CustomerRetrievingResponseCardRegistration values.
func (CustomerRetrievingResponseCardRegistration) AllValues() []CustomerRetrievingResponseCardRegistration {
	return []CustomerRetrievingResponseCardRegistration{
		CustomerRetrievingResponseCardRegistration0,
		CustomerRetrievingResponseCardRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerRetrievingResponseCardRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerRetrievingResponseCardRegistration0:
		return []byte(s), nil
	case CustomerRetrievingResponseCardRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerRetrievingResponseCardRegistration) UnmarshalText(data []byte) error {
	switch CustomerRetrievingResponseCardRegistration(data) {
	case CustomerRetrievingResponseCardRegistration0:
		*s = CustomerRetrievingResponseCardRegistration0
		return nil
	case CustomerRetrievingResponseCardRegistration1:
		*s = CustomerRetrievingResponseCardRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済手段（口座振替）登録状況
// - `0`: 未登録
// - `1`: 1件以上の振替用口座が登録済み.
type CustomerRetrievingResponseDirectdebitRegistration string

const (
	CustomerRetrievingResponseDirectdebitRegistration0 CustomerRetrievingResponseDirectdebitRegistration = "0"
	CustomerRetrievingResponseDirectdebitRegistration1 CustomerRetrievingResponseDirectdebitRegistration = "1"
)

// AllValues returns all CustomerRetrievingResponseDirectdebitRegistration values.
func (CustomerRetrievingResponseDirectdebitRegistration) AllValues() []CustomerRetrievingResponseDirectdebitRegistration {
	return []CustomerRetrievingResponseDirectdebitRegistration{
		CustomerRetrievingResponseDirectdebitRegistration0,
		CustomerRetrievingResponseDirectdebitRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerRetrievingResponseDirectdebitRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerRetrievingResponseDirectdebitRegistration0:
		return []byte(s), nil
	case CustomerRetrievingResponseDirectdebitRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerRetrievingResponseDirectdebitRegistration) UnmarshalText(data []byte) error {
	switch CustomerRetrievingResponseDirectdebitRegistration(data) {
	case CustomerRetrievingResponseDirectdebitRegistration0:
		*s = CustomerRetrievingResponseDirectdebitRegistration0
		return nil
	case CustomerRetrievingResponseDirectdebitRegistration1:
		*s = CustomerRetrievingResponseDirectdebitRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Customer.Updating.Request
type CustomerUpdatingRequest struct {
	Name         OptNilString `json:"name"`
	Email        OptNilString `json:"email"`
	PhoneCc      OptNilString `json:"phone_cc"`
	PhoneNo      OptNilString `json:"phone_no"`
	AddrCountry  OptNilString `json:"addr_country"`
	AddrState    OptNilString `json:"addr_state"`
	AddrCity     OptNilString `json:"addr_city"`
	AddrLine1    OptNilString `json:"addr_line_1"`
	AddrLine2    OptNilString `json:"addr_line_2"`
	AddrLine3    OptNilString `json:"addr_line_3"`
	AddrPostCode OptNilString `json:"addr_post_code"`
}

// GetName returns the value of Name.
func (s *CustomerUpdatingRequest) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomerUpdatingRequest) GetEmail() OptNilString {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomerUpdatingRequest) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomerUpdatingRequest) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomerUpdatingRequest) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrState returns the value of AddrState.
func (s *CustomerUpdatingRequest) GetAddrState() OptNilString {
	return s.AddrState
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomerUpdatingRequest) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomerUpdatingRequest) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomerUpdatingRequest) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomerUpdatingRequest) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomerUpdatingRequest) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// SetName sets the value of Name.
func (s *CustomerUpdatingRequest) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomerUpdatingRequest) SetEmail(val OptNilString) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomerUpdatingRequest) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomerUpdatingRequest) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomerUpdatingRequest) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomerUpdatingRequest) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomerUpdatingRequest) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomerUpdatingRequest) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomerUpdatingRequest) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomerUpdatingRequest) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomerUpdatingRequest) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// Ref: #/components/schemas/Customer.Updating.Response
type CustomerUpdatingResponse struct {
	// 顧客ID.
	ID OptString `json:"id"`
	// 顧客の名前.
	Name OptNilString `json:"name"`
	// 顧客のメールアドレス\
	// 形式： RFC5322.
	Email OptNilString `json:"email"`
	// 顧客の電話番号の国コード\
	// 形式： ITU-T E.164.
	PhoneCc OptNilString `json:"phone_cc"`
	// 顧客の電話番号.
	PhoneNo OptNilString `json:"phone_no"`
	// 顧客の住所の国コード\
	// 形式： ISO 3166-1 numeric.
	AddrCountry OptNilString `json:"addr_country"`
	// 顧客の住所の州コードまたは都道府県コード\
	// 参照： [国土交通省 都道府県コード](https://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.
	// html).
	AddrState OptNilString `json:"addr_state"`
	// 顧客の住所の都市名.
	AddrCity OptNilString `json:"addr_city"`
	// 顧客の住所の番地・区画.
	AddrLine1 OptNilString `json:"addr_line_1"`
	// 顧客の住所の建物名・部屋番号.
	AddrLine2 OptNilString `json:"addr_line_2"`
	// 顧客の住所 その他.
	AddrLine3 OptNilString `json:"addr_line_3"`
	// 顧客の住所の郵便番号.
	AddrPostCode OptNilString `json:"addr_post_code"`
	// 決済手段（カード）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上のカードが登録済み.
	CardRegistration OptNilCustomerUpdatingResponseCardRegistration `json:"card_registration"`
	// 決済手段（口座振替）登録状況
	// - `0`: 未登録
	// - `1`: 1件以上の振替用口座が登録済み.
	DirectdebitRegistration OptNilCustomerUpdatingResponseDirectdebitRegistration `json:"directdebit_registration"`
	Created                 OptString                                             `json:"created"`
	Updated                 *NilString                                            `json:"updated"`
}

// GetID returns the value of ID.
func (s *CustomerUpdatingResponse) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *CustomerUpdatingResponse) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CustomerUpdatingResponse) GetEmail() OptNilString {
	return s.Email
}

// GetPhoneCc returns the value of PhoneCc.
func (s *CustomerUpdatingResponse) GetPhoneCc() OptNilString {
	return s.PhoneCc
}

// GetPhoneNo returns the value of PhoneNo.
func (s *CustomerUpdatingResponse) GetPhoneNo() OptNilString {
	return s.PhoneNo
}

// GetAddrCountry returns the value of AddrCountry.
func (s *CustomerUpdatingResponse) GetAddrCountry() OptNilString {
	return s.AddrCountry
}

// GetAddrState returns the value of AddrState.
func (s *CustomerUpdatingResponse) GetAddrState() OptNilString {
	return s.AddrState
}

// GetAddrCity returns the value of AddrCity.
func (s *CustomerUpdatingResponse) GetAddrCity() OptNilString {
	return s.AddrCity
}

// GetAddrLine1 returns the value of AddrLine1.
func (s *CustomerUpdatingResponse) GetAddrLine1() OptNilString {
	return s.AddrLine1
}

// GetAddrLine2 returns the value of AddrLine2.
func (s *CustomerUpdatingResponse) GetAddrLine2() OptNilString {
	return s.AddrLine2
}

// GetAddrLine3 returns the value of AddrLine3.
func (s *CustomerUpdatingResponse) GetAddrLine3() OptNilString {
	return s.AddrLine3
}

// GetAddrPostCode returns the value of AddrPostCode.
func (s *CustomerUpdatingResponse) GetAddrPostCode() OptNilString {
	return s.AddrPostCode
}

// GetCardRegistration returns the value of CardRegistration.
func (s *CustomerUpdatingResponse) GetCardRegistration() OptNilCustomerUpdatingResponseCardRegistration {
	return s.CardRegistration
}

// GetDirectdebitRegistration returns the value of DirectdebitRegistration.
func (s *CustomerUpdatingResponse) GetDirectdebitRegistration() OptNilCustomerUpdatingResponseDirectdebitRegistration {
	return s.DirectdebitRegistration
}

// GetCreated returns the value of Created.
func (s *CustomerUpdatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *CustomerUpdatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *CustomerUpdatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CustomerUpdatingResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CustomerUpdatingResponse) SetEmail(val OptNilString) {
	s.Email = val
}

// SetPhoneCc sets the value of PhoneCc.
func (s *CustomerUpdatingResponse) SetPhoneCc(val OptNilString) {
	s.PhoneCc = val
}

// SetPhoneNo sets the value of PhoneNo.
func (s *CustomerUpdatingResponse) SetPhoneNo(val OptNilString) {
	s.PhoneNo = val
}

// SetAddrCountry sets the value of AddrCountry.
func (s *CustomerUpdatingResponse) SetAddrCountry(val OptNilString) {
	s.AddrCountry = val
}

// SetAddrState sets the value of AddrState.
func (s *CustomerUpdatingResponse) SetAddrState(val OptNilString) {
	s.AddrState = val
}

// SetAddrCity sets the value of AddrCity.
func (s *CustomerUpdatingResponse) SetAddrCity(val OptNilString) {
	s.AddrCity = val
}

// SetAddrLine1 sets the value of AddrLine1.
func (s *CustomerUpdatingResponse) SetAddrLine1(val OptNilString) {
	s.AddrLine1 = val
}

// SetAddrLine2 sets the value of AddrLine2.
func (s *CustomerUpdatingResponse) SetAddrLine2(val OptNilString) {
	s.AddrLine2 = val
}

// SetAddrLine3 sets the value of AddrLine3.
func (s *CustomerUpdatingResponse) SetAddrLine3(val OptNilString) {
	s.AddrLine3 = val
}

// SetAddrPostCode sets the value of AddrPostCode.
func (s *CustomerUpdatingResponse) SetAddrPostCode(val OptNilString) {
	s.AddrPostCode = val
}

// SetCardRegistration sets the value of CardRegistration.
func (s *CustomerUpdatingResponse) SetCardRegistration(val OptNilCustomerUpdatingResponseCardRegistration) {
	s.CardRegistration = val
}

// SetDirectdebitRegistration sets the value of DirectdebitRegistration.
func (s *CustomerUpdatingResponse) SetDirectdebitRegistration(val OptNilCustomerUpdatingResponseDirectdebitRegistration) {
	s.DirectdebitRegistration = val
}

// SetCreated sets the value of Created.
func (s *CustomerUpdatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *CustomerUpdatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*CustomerUpdatingResponse) updateCustomerRes() {}

// 決済手段（カード）登録状況
// - `0`: 未登録
// - `1`: 1件以上のカードが登録済み.
type CustomerUpdatingResponseCardRegistration string

const (
	CustomerUpdatingResponseCardRegistration0 CustomerUpdatingResponseCardRegistration = "0"
	CustomerUpdatingResponseCardRegistration1 CustomerUpdatingResponseCardRegistration = "1"
)

// AllValues returns all CustomerUpdatingResponseCardRegistration values.
func (CustomerUpdatingResponseCardRegistration) AllValues() []CustomerUpdatingResponseCardRegistration {
	return []CustomerUpdatingResponseCardRegistration{
		CustomerUpdatingResponseCardRegistration0,
		CustomerUpdatingResponseCardRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerUpdatingResponseCardRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerUpdatingResponseCardRegistration0:
		return []byte(s), nil
	case CustomerUpdatingResponseCardRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerUpdatingResponseCardRegistration) UnmarshalText(data []byte) error {
	switch CustomerUpdatingResponseCardRegistration(data) {
	case CustomerUpdatingResponseCardRegistration0:
		*s = CustomerUpdatingResponseCardRegistration0
		return nil
	case CustomerUpdatingResponseCardRegistration1:
		*s = CustomerUpdatingResponseCardRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済手段（口座振替）登録状況
// - `0`: 未登録
// - `1`: 1件以上の振替用口座が登録済み.
type CustomerUpdatingResponseDirectdebitRegistration string

const (
	CustomerUpdatingResponseDirectdebitRegistration0 CustomerUpdatingResponseDirectdebitRegistration = "0"
	CustomerUpdatingResponseDirectdebitRegistration1 CustomerUpdatingResponseDirectdebitRegistration = "1"
)

// AllValues returns all CustomerUpdatingResponseDirectdebitRegistration values.
func (CustomerUpdatingResponseDirectdebitRegistration) AllValues() []CustomerUpdatingResponseDirectdebitRegistration {
	return []CustomerUpdatingResponseDirectdebitRegistration{
		CustomerUpdatingResponseDirectdebitRegistration0,
		CustomerUpdatingResponseDirectdebitRegistration1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CustomerUpdatingResponseDirectdebitRegistration) MarshalText() ([]byte, error) {
	switch s {
	case CustomerUpdatingResponseDirectdebitRegistration0:
		return []byte(s), nil
	case CustomerUpdatingResponseDirectdebitRegistration1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CustomerUpdatingResponseDirectdebitRegistration) UnmarshalText(data []byte) error {
	switch CustomerUpdatingResponseDirectdebitRegistration(data) {
	case CustomerUpdatingResponseDirectdebitRegistration0:
		*s = CustomerUpdatingResponseDirectdebitRegistration0
		return nil
	case CustomerUpdatingResponseDirectdebitRegistration1:
		*s = CustomerUpdatingResponseDirectdebitRegistration1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 入金ステータス
// - `3001`: 金額確定前<br /><span
// class="smallText">この集計期間中の売上入金に関してまだ集計中であり金額が確定していない状態。入金はされていません。</span>
// - `3002`: 金額確定済み<br /><span
// class="smallText">この集計期間中の売上入金の金額が確定した状態。入金はされていません。</span>
// - `3003`: 入金済み<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金が完了した状態。</span>
// - `3004`: 入金停止中<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金に際し何らかの懸念事項があり差し止めている状態。解消後fincodeはできるだけ早く入金を再試行します。</span>
// - `3005`: 入金エラー<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金に何らかの理由で失敗した状態。解消後fincodeはできるだけ早く入金を再試行します。</span>
// - `3006`: 請求中<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求している状態。</span>
// - `3007`: 請求エラー<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求が必要になったものの何らかのエラーにより失敗した状態。</span>
// - `3008`: 請求停止中<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り、fincodeからショップへ請求が必要になったものの何らかの理由により差し止めている状態。</span>
// - `3009`: 支払済み<br /><span
// class="smallText">集計期間中のキャンセル金額が売上金額を上回り発生したfincodeからショップへの請求に対する入金が確認できた状担。</span>
// - `3010`: 本人確認書類未確認<br /><span
// class="smallText">この集計期間中のfincodeからの売上の入金に際し本人確認書類の提出が確認できないため差し止めている状態。解消後fincodeはできるだけ早く入金を再試行します。</span>
// - `3011`: 精算済み<br /><span
// class="smallText">売上が0円のまま入金額が確定した状態。</span>
// - `3012`: 入金開始前<br /><span
// class="smallText">初回入金がまだ実施されていない状態。</span>
// - `3013`: 契約不成立<br /><span
// class="smallText">fincodeとの契約が不成立となった状態。</span>.
// Ref: #/components/schemas/DepositStatusCode
type DepositStatusCode int

const (
	DepositStatusCode3001 DepositStatusCode = 3001
	DepositStatusCode3002 DepositStatusCode = 3002
	DepositStatusCode3003 DepositStatusCode = 3003
	DepositStatusCode3004 DepositStatusCode = 3004
	DepositStatusCode3005 DepositStatusCode = 3005
	DepositStatusCode3006 DepositStatusCode = 3006
	DepositStatusCode3007 DepositStatusCode = 3007
	DepositStatusCode3008 DepositStatusCode = 3008
	DepositStatusCode3009 DepositStatusCode = 3009
	DepositStatusCode3010 DepositStatusCode = 3010
	DepositStatusCode3011 DepositStatusCode = 3011
	DepositStatusCode3012 DepositStatusCode = 3012
	DepositStatusCode3013 DepositStatusCode = 3013
)

// AllValues returns all DepositStatusCode values.
func (DepositStatusCode) AllValues() []DepositStatusCode {
	return []DepositStatusCode{
		DepositStatusCode3001,
		DepositStatusCode3002,
		DepositStatusCode3003,
		DepositStatusCode3004,
		DepositStatusCode3005,
		DepositStatusCode3006,
		DepositStatusCode3007,
		DepositStatusCode3008,
		DepositStatusCode3009,
		DepositStatusCode3010,
		DepositStatusCode3011,
		DepositStatusCode3012,
		DepositStatusCode3013,
	}
}

// この振替用口座を登録した際の申込方法
// - `PAPER`: 依頼書登録
// - `ONLINE`: Web登録.
// Ref: #/components/schemas/DirectDebitApplicationType
type DirectDebitApplicationType string

const (
	DirectDebitApplicationTypePAPER  DirectDebitApplicationType = "PAPER"
	DirectDebitApplicationTypeONLINE DirectDebitApplicationType = "ONLINE"
)

// AllValues returns all DirectDebitApplicationType values.
func (DirectDebitApplicationType) AllValues() []DirectDebitApplicationType {
	return []DirectDebitApplicationType{
		DirectDebitApplicationTypePAPER,
		DirectDebitApplicationTypeONLINE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DirectDebitApplicationType) MarshalText() ([]byte, error) {
	switch s {
	case DirectDebitApplicationTypePAPER:
		return []byte(s), nil
	case DirectDebitApplicationTypeONLINE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DirectDebitApplicationType) UnmarshalText(data []byte) error {
	switch DirectDebitApplicationType(data) {
	case DirectDebitApplicationTypePAPER:
		*s = DirectDebitApplicationTypePAPER
		return nil
	case DirectDebitApplicationTypeONLINE:
		*s = DirectDebitApplicationTypeONLINE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 最新の振替結果コード。\
// この決済手段で最後に行われた振替の結果コードです。
// - `0`: 振替成功
// - `1`: 残高不足による失敗
// - `2`: 預金取引なしによる失敗<br /><span
// class="smallText">存在しない口座に対して請求した場合などに発生します。</span>
// - `3`: 購入者事由による失敗
// - `4`: 依頼書未着・不備による失敗<br /><span
// class="smallText">口座振替依頼書が金融機関側で登録されていない場合に発生します。</span>
// - `8`: ショップ事由による失敗<br /><span
// class="smallText">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>
// - `9`: その他の失敗<br /><span
// class="smallText">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>
// - `E`: データエラーに起因する失敗<br /><span
// class="smallText">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>
// - `N`: 振替結果未着<br /><span
// class="smallText">通常は発生しません。発生し調査が必要な場合はfincodeにお問い合わせください。 </span>
// [お問い合わせはこちらへ](https://dashboard.fincode.
// jp/contact?_gl=1*vssgo5*_ga*MTU2NDM2NzY1MS4xNjk5MzI0Nzk4*_ga_8Y6Q0J470G*MTcwNzg4MzY4MS4zMTkuMS4xNzA3ODg5NTYwLjYwLjAuMA..&_ga=2.240544707.1302727582.1707783144-1564367651.1699324798).
// Ref: #/components/schemas/DirectDebitLastResultCode
type DirectDebitLastResultCode string

const (
	DirectDebitLastResultCode0 DirectDebitLastResultCode = "0"
	DirectDebitLastResultCode1 DirectDebitLastResultCode = "1"
	DirectDebitLastResultCode2 DirectDebitLastResultCode = "2"
	DirectDebitLastResultCode3 DirectDebitLastResultCode = "3"
	DirectDebitLastResultCode4 DirectDebitLastResultCode = "4"
	DirectDebitLastResultCode8 DirectDebitLastResultCode = "8"
	DirectDebitLastResultCode9 DirectDebitLastResultCode = "9"
	DirectDebitLastResultCodeE DirectDebitLastResultCode = "E"
	DirectDebitLastResultCodeN DirectDebitLastResultCode = "N"
)

// AllValues returns all DirectDebitLastResultCode values.
func (DirectDebitLastResultCode) AllValues() []DirectDebitLastResultCode {
	return []DirectDebitLastResultCode{
		DirectDebitLastResultCode0,
		DirectDebitLastResultCode1,
		DirectDebitLastResultCode2,
		DirectDebitLastResultCode3,
		DirectDebitLastResultCode4,
		DirectDebitLastResultCode8,
		DirectDebitLastResultCode9,
		DirectDebitLastResultCodeE,
		DirectDebitLastResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DirectDebitLastResultCode) MarshalText() ([]byte, error) {
	switch s {
	case DirectDebitLastResultCode0:
		return []byte(s), nil
	case DirectDebitLastResultCode1:
		return []byte(s), nil
	case DirectDebitLastResultCode2:
		return []byte(s), nil
	case DirectDebitLastResultCode3:
		return []byte(s), nil
	case DirectDebitLastResultCode4:
		return []byte(s), nil
	case DirectDebitLastResultCode8:
		return []byte(s), nil
	case DirectDebitLastResultCode9:
		return []byte(s), nil
	case DirectDebitLastResultCodeE:
		return []byte(s), nil
	case DirectDebitLastResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DirectDebitLastResultCode) UnmarshalText(data []byte) error {
	switch DirectDebitLastResultCode(data) {
	case DirectDebitLastResultCode0:
		*s = DirectDebitLastResultCode0
		return nil
	case DirectDebitLastResultCode1:
		*s = DirectDebitLastResultCode1
		return nil
	case DirectDebitLastResultCode2:
		*s = DirectDebitLastResultCode2
		return nil
	case DirectDebitLastResultCode3:
		*s = DirectDebitLastResultCode3
		return nil
	case DirectDebitLastResultCode4:
		*s = DirectDebitLastResultCode4
		return nil
	case DirectDebitLastResultCode8:
		*s = DirectDebitLastResultCode8
		return nil
	case DirectDebitLastResultCode9:
		*s = DirectDebitLastResultCode9
		return nil
	case DirectDebitLastResultCodeE:
		*s = DirectDebitLastResultCodeE
		return nil
	case DirectDebitLastResultCodeN:
		*s = DirectDebitLastResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExaminationFile.Uploading.Request
type ExaminationFileUploadingRequestMultipart struct {
	Type OptExaminationFileUploadingRequestMultipartType `json:"type"`
	Data jx.Raw                                          `json:"data"`
}

// GetType returns the value of Type.
func (s *ExaminationFileUploadingRequestMultipart) GetType() OptExaminationFileUploadingRequestMultipartType {
	return s.Type
}

// GetData returns the value of Data.
func (s *ExaminationFileUploadingRequestMultipart) GetData() jx.Raw {
	return s.Data
}

// SetType sets the value of Type.
func (s *ExaminationFileUploadingRequestMultipart) SetType(val OptExaminationFileUploadingRequestMultipartType) {
	s.Type = val
}

// SetData sets the value of Data.
func (s *ExaminationFileUploadingRequestMultipart) SetData(val jx.Raw) {
	s.Data = val
}

// 審査ファイルタイプ\
// \
// fincode審査チームに提出する画像ファイル等の種別を指定します。
// - `DRIVER_LICENSE_FRONT`: 本人確認書類; 運転免許証（表）<br /><span
// class="smallText">本人確認書類として運転免許証を提出する場合に指定します。裏面も提出する必要があります。</span>
// - `DRIVER_LICENSE_BACK`: 本人確認書類; 運転免許証（裏）<br /><span
// class="smallText">本人確認書類として運転免許証を提出する場合に指定します。表面も提出する必要があります。</span>
// - `SEAL_REGISTRATION_FRONT`: 本人確認書類; 印鑑証明書（表）<br /><span
// class="smallText">本人確認書類として印鑑証明書を提出する場合に指定します。</span>
// - `RESIDENT_CARD_FRONT`: 本人確認書類; 在留カード（表）<br /><span
// class="smallText">本人確認書類として在留カードを提出する場合に指定します。裏面も提出する必要があります。</span>
// - `RESIDENT_CARD_BACK`: 本人確認書類; 在留カード（裏）<br /><span
// class="smallText">本人確認書類として在留カードを提出する場合に指定します。表面も提出する必要があります。</span>
// - `SPECIAL_PERMANENT_RESIDENT_FRONT`: 本人確認書類; 特別永住者証明書（表）<br
// /><span
// class="smallText">本人確認書類として特別永住者証明書を提出する場合に指定します。裏面も提出する必要があります。</span>
// - `SPECIAL_PERMANENT_RESIDENT_BACK`: 本人確認書類; 特別永住者証明書（裏）<br
// /><span
// class="smallText">本人確認書類として特別永住者証明書を提出する場合に指定します。表面も提出する必要があります。</span>
// - `CERTIFICATE_OF_RESIDENCE_FRONT`: 本人確認書類; 住民票（表）<br /><span
// class="smallText">本人確認書類として住民票を提出する場合に指定します。</span>
// - `MY_NUMBER_CARD_FRONT`: 本人確認書類; マイナンバーカード（表）<br /><span
// class="smallText">本人確認書類としてマイナンバーカードを提出する場合に指定します。</span>
// - `PRODUCT_IMAGE_1`: 商材審査; 物販商材1 画像<br /><span
// class="smallText">物販商材の情報を提出する場合に指定します。`product_content_info.content1_*`に対応する画像を添付してください。</span>
// - `PRODUCT_IMAGE_2`: 商材審査; 物販商材2 画像<br /><span
// class="smallText">物販商材の情報を提出する場合に指定します。`product_content_info.content2_*`に対応する画像を添付してください。</span>
// - `PRODUCT_IMAGE_3`: 商材審査; 物販商材3 画像<br /><span
// class="smallText">物販商材の情報を提出する場合に指定します。`product_content_info.content3_*`に対応する画像を添付してください。</span>
// - `APP_IMAGE_TOP`: アプリ審査; アプリトップ画像<br /><span
// class="smallText">fincodeをスマートフォン上のネイティブアプリで使用し、かつfincodeによる審査時点でWebサイトが存在しない場合に指定します。アプリのトップ画面のスクリーンショットの画像を添付してください。</span>
// - `APP_IMAGE_ICON`: アプリ審査; アプリアイコン<br /><span
// class="smallText">fincodeをスマートフォン上のネイティブアプリで使用し、かつfincodeによる審査時点でWebサイトが存在しない場合に指定します。アプリのアイコン画像を添付してください。</span>
// - `SALES_LICENSE_1`: 販売免許等; 販売免許等1<br />
// <span class="smallText">
// ショップで取り扱う商品・サービスによっては、下記の許可証の提出が必要となります。免許・許可証の名義は契約名義と一致している必要があります。
// <ul>
// <li>酒類: 酒類小売業販売許可証</li>
// <li>古物: 古物商許可証</li>
// <li>コンタクトレンズ: 高度管理医療機器販売業許可証</li>
// <li>象牙: 経済産業省の許可証</li>
// <li>決済業者から免許証および許可証を求められた場合は提出を依頼することがあります。</li>
// </ul>
// </span>
// - `SALES_LICENSE_2`: 販売免許等; 販売免許等2<br /><span
// class="smallText">許可証が複数ファイルに渡る場合、2ファイル目を提出する場合に指定します。</span>
// - `SALES_LICENSE_3`: 販売免許等; 販売免許等3<br /><span
// class="smallText">許可証が複数ファイルに渡る場合、3ファイル目を提出する場合に指定します。</span>
// - `COPY_OF_CORPORATE_REGISTRATION`: 決済手段追加申請; 登記簿謄本<br /><span
// class="smallText">事業形態が「法人」のショップで「口座振替」の決済手段の追加申請をした際に提出が必要になります。</span>.
type ExaminationFileUploadingRequestMultipartType string

const (
	ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEFRONT            ExaminationFileUploadingRequestMultipartType = "DRIVER_LICENSE_FRONT"
	ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEBACK             ExaminationFileUploadingRequestMultipartType = "DRIVER_LICENSE_BACK"
	ExaminationFileUploadingRequestMultipartTypeSEALREGISTRATIONFRONT         ExaminationFileUploadingRequestMultipartType = "SEAL_REGISTRATION_FRONT"
	ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDFRONT             ExaminationFileUploadingRequestMultipartType = "RESIDENT_CARD_FRONT"
	ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDBACK              ExaminationFileUploadingRequestMultipartType = "RESIDENT_CARD_BACK"
	ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTFRONT ExaminationFileUploadingRequestMultipartType = "SPECIAL_PERMANENT_RESIDENT_FRONT"
	ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTBACK  ExaminationFileUploadingRequestMultipartType = "SPECIAL_PERMANENT_RESIDENT_BACK"
	ExaminationFileUploadingRequestMultipartTypeCERTIFICATEOFRESIDENCEFRONT   ExaminationFileUploadingRequestMultipartType = "CERTIFICATE_OF_RESIDENCE_FRONT"
	ExaminationFileUploadingRequestMultipartTypeMYNUMBERCARDFRONT             ExaminationFileUploadingRequestMultipartType = "MY_NUMBER_CARD_FRONT"
	ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE1                 ExaminationFileUploadingRequestMultipartType = "PRODUCT_IMAGE_1"
	ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE2                 ExaminationFileUploadingRequestMultipartType = "PRODUCT_IMAGE_2"
	ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE3                 ExaminationFileUploadingRequestMultipartType = "PRODUCT_IMAGE_3"
	ExaminationFileUploadingRequestMultipartTypeAPPIMAGETOP                   ExaminationFileUploadingRequestMultipartType = "APP_IMAGE_TOP"
	ExaminationFileUploadingRequestMultipartTypeAPPIMAGEICON                  ExaminationFileUploadingRequestMultipartType = "APP_IMAGE_ICON"
	ExaminationFileUploadingRequestMultipartTypeSALESLICENSE1                 ExaminationFileUploadingRequestMultipartType = "SALES_LICENSE_1"
	ExaminationFileUploadingRequestMultipartTypeSALESLICENSE2                 ExaminationFileUploadingRequestMultipartType = "SALES_LICENSE_2"
	ExaminationFileUploadingRequestMultipartTypeSALESLICENSE3                 ExaminationFileUploadingRequestMultipartType = "SALES_LICENSE_3"
	ExaminationFileUploadingRequestMultipartTypeCOPYOFCORPORATEREGISTRATION   ExaminationFileUploadingRequestMultipartType = "COPY_OF_CORPORATE_REGISTRATION"
)

// AllValues returns all ExaminationFileUploadingRequestMultipartType values.
func (ExaminationFileUploadingRequestMultipartType) AllValues() []ExaminationFileUploadingRequestMultipartType {
	return []ExaminationFileUploadingRequestMultipartType{
		ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEFRONT,
		ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEBACK,
		ExaminationFileUploadingRequestMultipartTypeSEALREGISTRATIONFRONT,
		ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDFRONT,
		ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDBACK,
		ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTFRONT,
		ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTBACK,
		ExaminationFileUploadingRequestMultipartTypeCERTIFICATEOFRESIDENCEFRONT,
		ExaminationFileUploadingRequestMultipartTypeMYNUMBERCARDFRONT,
		ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE1,
		ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE2,
		ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE3,
		ExaminationFileUploadingRequestMultipartTypeAPPIMAGETOP,
		ExaminationFileUploadingRequestMultipartTypeAPPIMAGEICON,
		ExaminationFileUploadingRequestMultipartTypeSALESLICENSE1,
		ExaminationFileUploadingRequestMultipartTypeSALESLICENSE2,
		ExaminationFileUploadingRequestMultipartTypeSALESLICENSE3,
		ExaminationFileUploadingRequestMultipartTypeCOPYOFCORPORATEREGISTRATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationFileUploadingRequestMultipartType) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEBACK:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeSEALREGISTRATIONFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDBACK:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTBACK:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeCERTIFICATEOFRESIDENCEFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeMYNUMBERCARDFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE1:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE2:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE3:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeAPPIMAGETOP:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeAPPIMAGEICON:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE1:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE2:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE3:
		return []byte(s), nil
	case ExaminationFileUploadingRequestMultipartTypeCOPYOFCORPORATEREGISTRATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationFileUploadingRequestMultipartType) UnmarshalText(data []byte) error {
	switch ExaminationFileUploadingRequestMultipartType(data) {
	case ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEFRONT
		return nil
	case ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEBACK:
		*s = ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEBACK
		return nil
	case ExaminationFileUploadingRequestMultipartTypeSEALREGISTRATIONFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeSEALREGISTRATIONFRONT
		return nil
	case ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDFRONT
		return nil
	case ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDBACK:
		*s = ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDBACK
		return nil
	case ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTFRONT
		return nil
	case ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTBACK:
		*s = ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTBACK
		return nil
	case ExaminationFileUploadingRequestMultipartTypeCERTIFICATEOFRESIDENCEFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeCERTIFICATEOFRESIDENCEFRONT
		return nil
	case ExaminationFileUploadingRequestMultipartTypeMYNUMBERCARDFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeMYNUMBERCARDFRONT
		return nil
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE1:
		*s = ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE1
		return nil
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE2:
		*s = ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE2
		return nil
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE3:
		*s = ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE3
		return nil
	case ExaminationFileUploadingRequestMultipartTypeAPPIMAGETOP:
		*s = ExaminationFileUploadingRequestMultipartTypeAPPIMAGETOP
		return nil
	case ExaminationFileUploadingRequestMultipartTypeAPPIMAGEICON:
		*s = ExaminationFileUploadingRequestMultipartTypeAPPIMAGEICON
		return nil
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE1:
		*s = ExaminationFileUploadingRequestMultipartTypeSALESLICENSE1
		return nil
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE2:
		*s = ExaminationFileUploadingRequestMultipartTypeSALESLICENSE2
		return nil
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE3:
		*s = ExaminationFileUploadingRequestMultipartTypeSALESLICENSE3
		return nil
	case ExaminationFileUploadingRequestMultipartTypeCOPYOFCORPORATEREGISTRATION:
		*s = ExaminationFileUploadingRequestMultipartTypeCOPYOFCORPORATEREGISTRATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExaminationFile.Uploading.Response
type ExaminationFileUploadingResponse struct {
	ExaminationFiles []ExaminationFileUploadingResponseExaminationFilesItem `json:"examination_files"`
}

// GetExaminationFiles returns the value of ExaminationFiles.
func (s *ExaminationFileUploadingResponse) GetExaminationFiles() []ExaminationFileUploadingResponseExaminationFilesItem {
	return s.ExaminationFiles
}

// SetExaminationFiles sets the value of ExaminationFiles.
func (s *ExaminationFileUploadingResponse) SetExaminationFiles(val []ExaminationFileUploadingResponseExaminationFilesItem) {
	s.ExaminationFiles = val
}

func (*ExaminationFileUploadingResponse) uploadExaminationFileRes() {}

type ExaminationFileUploadingResponseExaminationFilesItem struct {
	// ショップID（テナント）\
	// \
	// このIDのテナントショップに関して画像ファイルを受け付けたことを示します。.
	ShopID OptString `json:"shop_id"`
	// 審査ファイルタイプ.
	Type OptExaminationFileUploadingResponseExaminationFilesItemType `json:"type"`
	// 審査ファイル名\
	// \
	// 拡張子を含むアップロードされたファイルの名称.
	Filename OptString `json:"filename"`
	// 審査ファイルサイズ\
	// \
	// アップロードされたファイルのサイズ（バイト）.
	Filesize OptFloat64 `json:"filesize"`
}

// GetShopID returns the value of ShopID.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) GetShopID() OptString {
	return s.ShopID
}

// GetType returns the value of Type.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) GetType() OptExaminationFileUploadingResponseExaminationFilesItemType {
	return s.Type
}

// GetFilename returns the value of Filename.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) GetFilename() OptString {
	return s.Filename
}

// GetFilesize returns the value of Filesize.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) GetFilesize() OptFloat64 {
	return s.Filesize
}

// SetShopID sets the value of ShopID.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) SetShopID(val OptString) {
	s.ShopID = val
}

// SetType sets the value of Type.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) SetType(val OptExaminationFileUploadingResponseExaminationFilesItemType) {
	s.Type = val
}

// SetFilename sets the value of Filename.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) SetFilename(val OptString) {
	s.Filename = val
}

// SetFilesize sets the value of Filesize.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) SetFilesize(val OptFloat64) {
	s.Filesize = val
}

// 審査ファイルタイプ\
// \
// fincode審査チームに提出する画像ファイル等の種別を指定します。
// - `DRIVER_LICENSE_FRONT`: 本人確認書類; 運転免許証（表）<br /><span
// class="smallText">本人確認書類として運転免許証を提出する場合に指定します。裏面も提出する必要があります。</span>
// - `DRIVER_LICENSE_BACK`: 本人確認書類; 運転免許証（裏）<br /><span
// class="smallText">本人確認書類として運転免許証を提出する場合に指定します。表面も提出する必要があります。</span>
// - `SEAL_REGISTRATION_FRONT`: 本人確認書類; 印鑑証明書（表）<br /><span
// class="smallText">本人確認書類として印鑑証明書を提出する場合に指定します。</span>
// - `RESIDENT_CARD_FRONT`: 本人確認書類; 在留カード（表）<br /><span
// class="smallText">本人確認書類として在留カードを提出する場合に指定します。裏面も提出する必要があります。</span>
// - `RESIDENT_CARD_BACK`: 本人確認書類; 在留カード（裏）<br /><span
// class="smallText">本人確認書類として在留カードを提出する場合に指定します。表面も提出する必要があります。</span>
// - `SPECIAL_PERMANENT_RESIDENT_FRONT`: 本人確認書類; 特別永住者証明書（表）<br
// /><span
// class="smallText">本人確認書類として特別永住者証明書を提出する場合に指定します。裏面も提出する必要があります。</span>
// - `SPECIAL_PERMANENT_RESIDENT_BACK`: 本人確認書類; 特別永住者証明書（裏）<br
// /><span
// class="smallText">本人確認書類として特別永住者証明書を提出する場合に指定します。表面も提出する必要があります。</span>
// - `CERTIFICATE_OF_RESIDENCE_FRONT`: 本人確認書類; 住民票（表）<br /><span
// class="smallText">本人確認書類として住民票を提出する場合に指定します。</span>
// - `MY_NUMBER_CARD_FRONT`: 本人確認書類; マイナンバーカード（表）<br /><span
// class="smallText">本人確認書類としてマイナンバーカードを提出する場合に指定します。</span>
// - `PRODUCT_IMAGE_1`: 商材審査; 物販商材1 画像<br /><span
// class="smallText">物販商材の情報を提出する場合に指定します。`product_content_info.content1_*`に対応する画像を添付してください。</span>
// - `PRODUCT_IMAGE_2`: 商材審査; 物販商材2 画像<br /><span
// class="smallText">物販商材の情報を提出する場合に指定します。`product_content_info.content2_*`に対応する画像を添付してください。</span>
// - `PRODUCT_IMAGE_3`: 商材審査; 物販商材3 画像<br /><span
// class="smallText">物販商材の情報を提出する場合に指定します。`product_content_info.content3_*`に対応する画像を添付してください。</span>
// - `APP_IMAGE_TOP`: アプリ審査; アプリトップ画像<br /><span
// class="smallText">fincodeをスマートフォン上のネイティブアプリで使用し、かつfincodeによる審査時点でWebサイトが存在しない場合に指定します。アプリのトップ画面のスクリーンショットの画像を添付してください。</span>
// - `APP_IMAGE_ICON`: アプリ審査; アプリアイコン<br /><span
// class="smallText">fincodeをスマートフォン上のネイティブアプリで使用し、かつfincodeによる審査時点でWebサイトが存在しない場合に指定します。アプリのアイコン画像を添付してください。</span>
// - `SALES_LICENSE_1`: 販売免許等; 販売免許等1<br />
// <span class="smallText">
// ショップで取り扱う商品・サービスによっては、下記の許可証の提出が必要となります。免許・許可証の名義は契約名義と一致している必要があります。
// <ul>
// <li>酒類: 酒類小売業販売許可証</li>
// <li>古物: 古物商許可証</li>
// <li>コンタクトレンズ: 高度管理医療機器販売業許可証</li>
// <li>象牙: 経済産業省の許可証</li>
// <li>決済業者から免許証および許可証を求められた場合は提出を依頼することがあります。</li>
// </ul>
// </span>
// - `SALES_LICENSE_2`: 販売免許等; 販売免許等2<br /><span
// class="smallText">許可証が複数ファイルに渡る場合、2ファイル目を提出する場合に指定します。</span>
// - `SALES_LICENSE_3`: 販売免許等; 販売免許等3<br /><span
// class="smallText">許可証が複数ファイルに渡る場合、3ファイル目を提出する場合に指定します。</span>
// - `COPY_OF_CORPORATE_REGISTRATION`: 決済手段追加申請; 登記簿謄本<br /><span
// class="smallText">事業形態が「法人」のショップで「口座振替」の決済手段の追加申請をした際に提出が必要になります。</span>.
type ExaminationFileUploadingResponseExaminationFilesItemType string

const (
	ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEFRONT            ExaminationFileUploadingResponseExaminationFilesItemType = "DRIVER_LICENSE_FRONT"
	ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEBACK             ExaminationFileUploadingResponseExaminationFilesItemType = "DRIVER_LICENSE_BACK"
	ExaminationFileUploadingResponseExaminationFilesItemTypeSEALREGISTRATIONFRONT         ExaminationFileUploadingResponseExaminationFilesItemType = "SEAL_REGISTRATION_FRONT"
	ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDFRONT             ExaminationFileUploadingResponseExaminationFilesItemType = "RESIDENT_CARD_FRONT"
	ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDBACK              ExaminationFileUploadingResponseExaminationFilesItemType = "RESIDENT_CARD_BACK"
	ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTFRONT ExaminationFileUploadingResponseExaminationFilesItemType = "SPECIAL_PERMANENT_RESIDENT_FRONT"
	ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTBACK  ExaminationFileUploadingResponseExaminationFilesItemType = "SPECIAL_PERMANENT_RESIDENT_BACK"
	ExaminationFileUploadingResponseExaminationFilesItemTypeCERTIFICATEOFRESIDENCEFRONT   ExaminationFileUploadingResponseExaminationFilesItemType = "CERTIFICATE_OF_RESIDENCE_FRONT"
	ExaminationFileUploadingResponseExaminationFilesItemTypeMYNUMBERCARDFRONT             ExaminationFileUploadingResponseExaminationFilesItemType = "MY_NUMBER_CARD_FRONT"
	ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE1                 ExaminationFileUploadingResponseExaminationFilesItemType = "PRODUCT_IMAGE_1"
	ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE2                 ExaminationFileUploadingResponseExaminationFilesItemType = "PRODUCT_IMAGE_2"
	ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE3                 ExaminationFileUploadingResponseExaminationFilesItemType = "PRODUCT_IMAGE_3"
	ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGETOP                   ExaminationFileUploadingResponseExaminationFilesItemType = "APP_IMAGE_TOP"
	ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGEICON                  ExaminationFileUploadingResponseExaminationFilesItemType = "APP_IMAGE_ICON"
	ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE1                 ExaminationFileUploadingResponseExaminationFilesItemType = "SALES_LICENSE_1"
	ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE2                 ExaminationFileUploadingResponseExaminationFilesItemType = "SALES_LICENSE_2"
	ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE3                 ExaminationFileUploadingResponseExaminationFilesItemType = "SALES_LICENSE_3"
	ExaminationFileUploadingResponseExaminationFilesItemTypeCOPYOFCORPORATEREGISTRATION   ExaminationFileUploadingResponseExaminationFilesItemType = "COPY_OF_CORPORATE_REGISTRATION"
)

// AllValues returns all ExaminationFileUploadingResponseExaminationFilesItemType values.
func (ExaminationFileUploadingResponseExaminationFilesItemType) AllValues() []ExaminationFileUploadingResponseExaminationFilesItemType {
	return []ExaminationFileUploadingResponseExaminationFilesItemType{
		ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEFRONT,
		ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEBACK,
		ExaminationFileUploadingResponseExaminationFilesItemTypeSEALREGISTRATIONFRONT,
		ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDFRONT,
		ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDBACK,
		ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTFRONT,
		ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTBACK,
		ExaminationFileUploadingResponseExaminationFilesItemTypeCERTIFICATEOFRESIDENCEFRONT,
		ExaminationFileUploadingResponseExaminationFilesItemTypeMYNUMBERCARDFRONT,
		ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE1,
		ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE2,
		ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE3,
		ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGETOP,
		ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGEICON,
		ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE1,
		ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE2,
		ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE3,
		ExaminationFileUploadingResponseExaminationFilesItemTypeCOPYOFCORPORATEREGISTRATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationFileUploadingResponseExaminationFilesItemType) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEBACK:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSEALREGISTRATIONFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDBACK:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTBACK:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeCERTIFICATEOFRESIDENCEFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeMYNUMBERCARDFRONT:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE1:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE2:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE3:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGETOP:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGEICON:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE1:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE2:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE3:
		return []byte(s), nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeCOPYOFCORPORATEREGISTRATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationFileUploadingResponseExaminationFilesItemType) UnmarshalText(data []byte) error {
	switch ExaminationFileUploadingResponseExaminationFilesItemType(data) {
	case ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEFRONT
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEBACK:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEBACK
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSEALREGISTRATIONFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSEALREGISTRATIONFRONT
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDFRONT
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDBACK:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDBACK
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTFRONT
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTBACK:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTBACK
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeCERTIFICATEOFRESIDENCEFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeCERTIFICATEOFRESIDENCEFRONT
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeMYNUMBERCARDFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeMYNUMBERCARDFRONT
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE1:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE1
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE2:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE2
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE3:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE3
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGETOP:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGETOP
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGEICON:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGEICON
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE1:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE1
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE2:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE2
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE3:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE3
		return nil
	case ExaminationFileUploadingResponseExaminationFilesItemTypeCOPYOFCORPORATEREGISTRATION:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeCOPYOFCORPORATEREGISTRATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExaminationInfo.Retrieving.Response
type ExaminationInfoRetrievingResponse struct {
	// ショップID（テナント）.
	ShopID               OptString                                                `json:"shop_id"`
	PlatformID           OptString                                                `json:"platform_id"`
	ShopType             OptNilExaminationInfoRetrievingResponseShopType          `json:"shop_type"`
	StatusCode           OptExaminationInfoRetrievingResponseStatusCode           `json:"status_code"`
	DepositCycleMasterID OptExaminationInfoRetrievingResponseDepositCycleMasterID `json:"deposit_cycle_master_id"`
	// 契約情報\
	// \
	// fincodeに登録されているショップ運営事業者の契約情報の詳細.
	ContractDetail OptExaminationInfoRetrievingResponseContractDetail `json:"contract_detail"`
	// ショップ 取扱商材情報\
	// \
	// fincodeに登録されているショップの取扱商材情報.
	ShopItemDetail []ExaminationInfoRetrievingResponseShopItemDetailItem `json:"shop_item_detail"`
	// 銀行口座情報\
	// \
	// fincode上での売上入金を受け取るための銀行口座情報.
	ContractBankAccount OptExaminationInfoRetrievingResponseContractBankAccount `json:"contract_bank_account"`
	ContractInputStatus OptExaminationInfoRetrievingResponseContractInputStatus `json:"contract_input_status"`
}

// GetShopID returns the value of ShopID.
func (s *ExaminationInfoRetrievingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPlatformID returns the value of PlatformID.
func (s *ExaminationInfoRetrievingResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetShopType returns the value of ShopType.
func (s *ExaminationInfoRetrievingResponse) GetShopType() OptNilExaminationInfoRetrievingResponseShopType {
	return s.ShopType
}

// GetStatusCode returns the value of StatusCode.
func (s *ExaminationInfoRetrievingResponse) GetStatusCode() OptExaminationInfoRetrievingResponseStatusCode {
	return s.StatusCode
}

// GetDepositCycleMasterID returns the value of DepositCycleMasterID.
func (s *ExaminationInfoRetrievingResponse) GetDepositCycleMasterID() OptExaminationInfoRetrievingResponseDepositCycleMasterID {
	return s.DepositCycleMasterID
}

// GetContractDetail returns the value of ContractDetail.
func (s *ExaminationInfoRetrievingResponse) GetContractDetail() OptExaminationInfoRetrievingResponseContractDetail {
	return s.ContractDetail
}

// GetShopItemDetail returns the value of ShopItemDetail.
func (s *ExaminationInfoRetrievingResponse) GetShopItemDetail() []ExaminationInfoRetrievingResponseShopItemDetailItem {
	return s.ShopItemDetail
}

// GetContractBankAccount returns the value of ContractBankAccount.
func (s *ExaminationInfoRetrievingResponse) GetContractBankAccount() OptExaminationInfoRetrievingResponseContractBankAccount {
	return s.ContractBankAccount
}

// GetContractInputStatus returns the value of ContractInputStatus.
func (s *ExaminationInfoRetrievingResponse) GetContractInputStatus() OptExaminationInfoRetrievingResponseContractInputStatus {
	return s.ContractInputStatus
}

// SetShopID sets the value of ShopID.
func (s *ExaminationInfoRetrievingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPlatformID sets the value of PlatformID.
func (s *ExaminationInfoRetrievingResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetShopType sets the value of ShopType.
func (s *ExaminationInfoRetrievingResponse) SetShopType(val OptNilExaminationInfoRetrievingResponseShopType) {
	s.ShopType = val
}

// SetStatusCode sets the value of StatusCode.
func (s *ExaminationInfoRetrievingResponse) SetStatusCode(val OptExaminationInfoRetrievingResponseStatusCode) {
	s.StatusCode = val
}

// SetDepositCycleMasterID sets the value of DepositCycleMasterID.
func (s *ExaminationInfoRetrievingResponse) SetDepositCycleMasterID(val OptExaminationInfoRetrievingResponseDepositCycleMasterID) {
	s.DepositCycleMasterID = val
}

// SetContractDetail sets the value of ContractDetail.
func (s *ExaminationInfoRetrievingResponse) SetContractDetail(val OptExaminationInfoRetrievingResponseContractDetail) {
	s.ContractDetail = val
}

// SetShopItemDetail sets the value of ShopItemDetail.
func (s *ExaminationInfoRetrievingResponse) SetShopItemDetail(val []ExaminationInfoRetrievingResponseShopItemDetailItem) {
	s.ShopItemDetail = val
}

// SetContractBankAccount sets the value of ContractBankAccount.
func (s *ExaminationInfoRetrievingResponse) SetContractBankAccount(val OptExaminationInfoRetrievingResponseContractBankAccount) {
	s.ContractBankAccount = val
}

// SetContractInputStatus sets the value of ContractInputStatus.
func (s *ExaminationInfoRetrievingResponse) SetContractInputStatus(val OptExaminationInfoRetrievingResponseContractInputStatus) {
	s.ContractInputStatus = val
}

func (*ExaminationInfoRetrievingResponse) retrieveTenantExaminationInfoRes() {}

type ExaminationInfoRetrievingResponseContractBankAccount struct {
	// 銀行名.
	BankName OptString `json:"bank_name"`
	// 銀行名（カナ）.
	BankNameKana OptString `json:"bank_name_kana"`
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode OptString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 支店名（カナ）.
	BranchNameKana OptString `json:"branch_name_kana"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind OptExaminationInfoRetrievingResponseContractBankAccountAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber OptString `json:"account_number"`
	// 口座名義（カタカナ）.
	AccountName OptString `json:"account_name"`
}

// GetBankName returns the value of BankName.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetBankName() OptString {
	return s.BankName
}

// GetBankNameKana returns the value of BankNameKana.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetBankNameKana() OptString {
	return s.BankNameKana
}

// GetBankCode returns the value of BankCode.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetBranchName() OptString {
	return s.BranchName
}

// GetBranchNameKana returns the value of BranchNameKana.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetBranchNameKana() OptString {
	return s.BranchNameKana
}

// GetAccountKind returns the value of AccountKind.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetAccountKind() OptExaminationInfoRetrievingResponseContractBankAccountAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) GetAccountName() OptString {
	return s.AccountName
}

// SetBankName sets the value of BankName.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetBankName(val OptString) {
	s.BankName = val
}

// SetBankNameKana sets the value of BankNameKana.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetBankNameKana(val OptString) {
	s.BankNameKana = val
}

// SetBankCode sets the value of BankCode.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetBranchNameKana sets the value of BranchNameKana.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetBranchNameKana(val OptString) {
	s.BranchNameKana = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetAccountKind(val OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) SetAccountName(val OptString) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ExaminationInfoRetrievingResponseContractBankAccountAccountKind float64

const (
	ExaminationInfoRetrievingResponseContractBankAccountAccountKind0 ExaminationInfoRetrievingResponseContractBankAccountAccountKind = 0
	ExaminationInfoRetrievingResponseContractBankAccountAccountKind1 ExaminationInfoRetrievingResponseContractBankAccountAccountKind = 1
)

// AllValues returns all ExaminationInfoRetrievingResponseContractBankAccountAccountKind values.
func (ExaminationInfoRetrievingResponseContractBankAccountAccountKind) AllValues() []ExaminationInfoRetrievingResponseContractBankAccountAccountKind {
	return []ExaminationInfoRetrievingResponseContractBankAccountAccountKind{
		ExaminationInfoRetrievingResponseContractBankAccountAccountKind0,
		ExaminationInfoRetrievingResponseContractBankAccountAccountKind1,
	}
}

// Merged schema.
type ExaminationInfoRetrievingResponseContractDetail struct {
	// 事業形態
	// - `true`: 法人
	// - `false`: 個人事業主.
	Corporate                             OptNilBool                                                              `json:"corporate"`
	CorporateNumber                       *NilString                                                              `json:"corporate_number"`
	CorporateName                         OptString                                                               `json:"corporate_name"`
	CorporateNameKana                     OptString                                                               `json:"corporate_name_kana"`
	Hp                                    *NilString                                                              `json:"hp"`
	Capital                               *NilFloat64                                                             `json:"capital"`
	EstablishedAt                         *NilString                                                              `json:"established_at"`
	YearlySales                           *NilFloat64                                                             `json:"yearly_sales"`
	BusinessDetails                       *NilString                                                              `json:"business_details"`
	CompanyPostalCode                     *NilString                                                              `json:"company_postal_code"`
	CompanyPrefecture                     *NilString                                                              `json:"company_prefecture"`
	CompanyPrefectureKana                 *NilString                                                              `json:"company_prefecture_kana"`
	CompanyAddressMunicipality            *NilString                                                              `json:"company_address_municipality"`
	CompanyAddressMunicipalityKana        *NilString                                                              `json:"company_address_municipality_kana"`
	CompanyAddressSection                 *NilString                                                              `json:"company_address_section"`
	CompanyAddressSectionKana             *NilString                                                              `json:"company_address_section_kana"`
	CompanyAddressChrome                  *NilString                                                              `json:"company_address_chrome"`
	CompanyAddressChromeKana              *NilString                                                              `json:"company_address_chrome_kana"`
	CompanyAddressBuildingName            *NilString                                                              `json:"company_address_building_name"`
	CompanyAddressBuildingNameKana        *NilString                                                              `json:"company_address_building_name_kana"`
	CompanyTel                            *NilString                                                              `json:"company_tel"`
	RepresentativeLastName                *NilString                                                              `json:"representative_last_name"`
	RepresentativeLastNameKana            *NilString                                                              `json:"representative_last_name_kana"`
	RepresentativeFirstName               *NilString                                                              `json:"representative_first_name"`
	RepresentativeFirstNameKana           *NilString                                                              `json:"representative_first_name_kana"`
	RepresentativeBirthday                *NilString                                                              `json:"representative_birthday"`
	RepresentativeGender                  *NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender `json:"representative_gender"`
	RepresentativePostalCode              *NilString                                                              `json:"representative_postal_code"`
	RepresentativePrefecture              *NilString                                                              `json:"representative_prefecture"`
	RepresentativePrefectureKana          *NilString                                                              `json:"representative_prefecture_kana"`
	RepresentativeAddressMunicipality     *NilString                                                              `json:"representative_address_municipality"`
	RepresentativeAddressMunicipalityKana *NilString                                                              `json:"representative_address_municipality_kana"`
	RepresentativeAddressSection          *NilString                                                              `json:"representative_address_section"`
	RepresentativeAddressSectionKana      *NilString                                                              `json:"representative_address_section_kana"`
	RepresentativeAddressChrome           *NilString                                                              `json:"representative_address_chrome"`
	RepresentativeAddressChromeKana       *NilString                                                              `json:"representative_address_chrome_kana"`
	RepresentativeTel                     *NilString                                                              `json:"representative_tel"`
	Staff1LastName                        *NilString                                                              `json:"staff1_last_name"`
	Staff1LastNameKana                    *NilString                                                              `json:"staff1_last_name_kana"`
	Staff1FirstName                       *NilString                                                              `json:"staff1_first_name"`
	Staff1FirstNameKana                   *NilString                                                              `json:"staff1_first_name_kana"`
	Staff1Tel                             *NilString                                                              `json:"staff1_tel"`
	Staff1Mail                            *NilString                                                              `json:"staff1_mail"`
	Staff2LastName                        *NilString                                                              `json:"staff2_last_name"`
	Staff2LastNameKana                    *NilString                                                              `json:"staff2_last_name_kana"`
	Staff2FirstName                       *NilString                                                              `json:"staff2_first_name"`
	Staff2FirstNameKana                   *NilString                                                              `json:"staff2_first_name_kana"`
	Staff2Tel                             *NilString                                                              `json:"staff2_tel"`
	Staff2Mail                            *NilString                                                              `json:"staff2_mail"`
	UsedOnApp                             *NilBool                                                                `json:"used_on_app"`
	UsedOnWeb                             *NilBool                                                                `json:"used_on_web"`
	// その他の箇所での利用有無\
	// \
	// Webアプリケーションやネイティブアプリ上でない箇所で利用があるかどうか
	// - `true`: Webアプリ／ネイティブアプリでない箇所でfincodeを使用する.
	UsedOnOther OptNilBool `json:"used_on_other"`
	// Webサイトの公開状況\
	// \
	// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
	// - `0`: fincode審査チームがサイトを閲覧可能
	// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
	// - `2`: fincode審査チームがサイトを閲覧不可能.
	SiteExisting   OptExaminationInfoRetrievingResponseContractDetailSiteExisting `json:"site_existing"`
	URL            *NilString                                                     `json:"url"`
	SiteCredential *NilString                                                     `json:"site_credential"`
	ShopName       OptString                                                      `json:"shop_name"`
	ShopNameKana   OptString                                                      `json:"shop_name_kana"`
	ShopNameEn     OptString                                                      `json:"shop_name_en"`
	// プラットフォーム名.
	PlatformName           OptNilString `json:"platform_name"`
	SupportTel             *NilString   `json:"support_tel"`
	SupportMail            *NilString   `json:"support_mail"`
	ProvidesProduct        *NilBool     `json:"provides_product"`
	ProvidesService        *NilBool     `json:"provides_service"`
	ProvidesDigitalContent *NilBool     `json:"provides_digital_content"`
	Prepaid                *NilBool     `json:"prepaid"`
	UnitPrice              *NilFloat64  `json:"unit_price"`
	// 取扱商材カテゴリID.
	ContentCategoryMasterID OptNilFloat64                                           `json:"content_category_master_id"`
	ContentDescription      *NilString                                              `json:"content_description"`
	ExpiretionDateOfPoint   *NilString                                              `json:"expiretion_date_of_point"`
	UsageOfPoint            *NilString                                              `json:"usage_of_point"`
	LostTrial               *NilBool                                                `json:"lost_trial"`
	DealsInsecureContent    *NilBool                                                `json:"deals_insecure_content"`
	DealsLongApplyContent   *NilBool                                                `json:"deals_long_apply_content"`
	PayBy                   OptExaminationInfoRetrievingResponseContractDetailPayBy `json:"pay_by"`
}

// GetCorporate returns the value of Corporate.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCorporate() OptNilBool {
	return s.Corporate
}

// GetCorporateNumber returns the value of CorporateNumber.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCorporateNumber() *NilString {
	return s.CorporateNumber
}

// GetCorporateName returns the value of CorporateName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCorporateName() OptString {
	return s.CorporateName
}

// GetCorporateNameKana returns the value of CorporateNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCorporateNameKana() OptString {
	return s.CorporateNameKana
}

// GetHp returns the value of Hp.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetHp() *NilString {
	return s.Hp
}

// GetCapital returns the value of Capital.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCapital() *NilFloat64 {
	return s.Capital
}

// GetEstablishedAt returns the value of EstablishedAt.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetEstablishedAt() *NilString {
	return s.EstablishedAt
}

// GetYearlySales returns the value of YearlySales.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetYearlySales() *NilFloat64 {
	return s.YearlySales
}

// GetBusinessDetails returns the value of BusinessDetails.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetBusinessDetails() *NilString {
	return s.BusinessDetails
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyPostalCode() *NilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyPrefecture() *NilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyPrefectureKana() *NilString {
	return s.CompanyPrefectureKana
}

// GetCompanyAddressMunicipality returns the value of CompanyAddressMunicipality.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressMunicipality() *NilString {
	return s.CompanyAddressMunicipality
}

// GetCompanyAddressMunicipalityKana returns the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressMunicipalityKana() *NilString {
	return s.CompanyAddressMunicipalityKana
}

// GetCompanyAddressSection returns the value of CompanyAddressSection.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressSection() *NilString {
	return s.CompanyAddressSection
}

// GetCompanyAddressSectionKana returns the value of CompanyAddressSectionKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressSectionKana() *NilString {
	return s.CompanyAddressSectionKana
}

// GetCompanyAddressChrome returns the value of CompanyAddressChrome.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressChrome() *NilString {
	return s.CompanyAddressChrome
}

// GetCompanyAddressChromeKana returns the value of CompanyAddressChromeKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressChromeKana() *NilString {
	return s.CompanyAddressChromeKana
}

// GetCompanyAddressBuildingName returns the value of CompanyAddressBuildingName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressBuildingName() *NilString {
	return s.CompanyAddressBuildingName
}

// GetCompanyAddressBuildingNameKana returns the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyAddressBuildingNameKana() *NilString {
	return s.CompanyAddressBuildingNameKana
}

// GetCompanyTel returns the value of CompanyTel.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetCompanyTel() *NilString {
	return s.CompanyTel
}

// GetRepresentativeLastName returns the value of RepresentativeLastName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeLastName() *NilString {
	return s.RepresentativeLastName
}

// GetRepresentativeLastNameKana returns the value of RepresentativeLastNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeLastNameKana() *NilString {
	return s.RepresentativeLastNameKana
}

// GetRepresentativeFirstName returns the value of RepresentativeFirstName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeFirstName() *NilString {
	return s.RepresentativeFirstName
}

// GetRepresentativeFirstNameKana returns the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeFirstNameKana() *NilString {
	return s.RepresentativeFirstNameKana
}

// GetRepresentativeBirthday returns the value of RepresentativeBirthday.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeBirthday() *NilString {
	return s.RepresentativeBirthday
}

// GetRepresentativeGender returns the value of RepresentativeGender.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeGender() *NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender {
	return s.RepresentativeGender
}

// GetRepresentativePostalCode returns the value of RepresentativePostalCode.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativePostalCode() *NilString {
	return s.RepresentativePostalCode
}

// GetRepresentativePrefecture returns the value of RepresentativePrefecture.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativePrefecture() *NilString {
	return s.RepresentativePrefecture
}

// GetRepresentativePrefectureKana returns the value of RepresentativePrefectureKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativePrefectureKana() *NilString {
	return s.RepresentativePrefectureKana
}

// GetRepresentativeAddressMunicipality returns the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeAddressMunicipality() *NilString {
	return s.RepresentativeAddressMunicipality
}

// GetRepresentativeAddressMunicipalityKana returns the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeAddressMunicipalityKana() *NilString {
	return s.RepresentativeAddressMunicipalityKana
}

// GetRepresentativeAddressSection returns the value of RepresentativeAddressSection.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeAddressSection() *NilString {
	return s.RepresentativeAddressSection
}

// GetRepresentativeAddressSectionKana returns the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeAddressSectionKana() *NilString {
	return s.RepresentativeAddressSectionKana
}

// GetRepresentativeAddressChrome returns the value of RepresentativeAddressChrome.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeAddressChrome() *NilString {
	return s.RepresentativeAddressChrome
}

// GetRepresentativeAddressChromeKana returns the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeAddressChromeKana() *NilString {
	return s.RepresentativeAddressChromeKana
}

// GetRepresentativeTel returns the value of RepresentativeTel.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetRepresentativeTel() *NilString {
	return s.RepresentativeTel
}

// GetStaff1LastName returns the value of Staff1LastName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff1LastName() *NilString {
	return s.Staff1LastName
}

// GetStaff1LastNameKana returns the value of Staff1LastNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff1LastNameKana() *NilString {
	return s.Staff1LastNameKana
}

// GetStaff1FirstName returns the value of Staff1FirstName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff1FirstName() *NilString {
	return s.Staff1FirstName
}

// GetStaff1FirstNameKana returns the value of Staff1FirstNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff1FirstNameKana() *NilString {
	return s.Staff1FirstNameKana
}

// GetStaff1Tel returns the value of Staff1Tel.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff1Tel() *NilString {
	return s.Staff1Tel
}

// GetStaff1Mail returns the value of Staff1Mail.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff1Mail() *NilString {
	return s.Staff1Mail
}

// GetStaff2LastName returns the value of Staff2LastName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff2LastName() *NilString {
	return s.Staff2LastName
}

// GetStaff2LastNameKana returns the value of Staff2LastNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff2LastNameKana() *NilString {
	return s.Staff2LastNameKana
}

// GetStaff2FirstName returns the value of Staff2FirstName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff2FirstName() *NilString {
	return s.Staff2FirstName
}

// GetStaff2FirstNameKana returns the value of Staff2FirstNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff2FirstNameKana() *NilString {
	return s.Staff2FirstNameKana
}

// GetStaff2Tel returns the value of Staff2Tel.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff2Tel() *NilString {
	return s.Staff2Tel
}

// GetStaff2Mail returns the value of Staff2Mail.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetStaff2Mail() *NilString {
	return s.Staff2Mail
}

// GetUsedOnApp returns the value of UsedOnApp.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetUsedOnApp() *NilBool {
	return s.UsedOnApp
}

// GetUsedOnWeb returns the value of UsedOnWeb.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetUsedOnWeb() *NilBool {
	return s.UsedOnWeb
}

// GetUsedOnOther returns the value of UsedOnOther.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetUsedOnOther() OptNilBool {
	return s.UsedOnOther
}

// GetSiteExisting returns the value of SiteExisting.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetSiteExisting() OptExaminationInfoRetrievingResponseContractDetailSiteExisting {
	return s.SiteExisting
}

// GetURL returns the value of URL.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetURL() *NilString {
	return s.URL
}

// GetSiteCredential returns the value of SiteCredential.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetSiteCredential() *NilString {
	return s.SiteCredential
}

// GetShopName returns the value of ShopName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetShopName() OptString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetShopNameKana() OptString {
	return s.ShopNameKana
}

// GetShopNameEn returns the value of ShopNameEn.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetShopNameEn() OptString {
	return s.ShopNameEn
}

// GetPlatformName returns the value of PlatformName.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSupportTel returns the value of SupportTel.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetSupportTel() *NilString {
	return s.SupportTel
}

// GetSupportMail returns the value of SupportMail.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetSupportMail() *NilString {
	return s.SupportMail
}

// GetProvidesProduct returns the value of ProvidesProduct.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetProvidesProduct() *NilBool {
	return s.ProvidesProduct
}

// GetProvidesService returns the value of ProvidesService.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetProvidesService() *NilBool {
	return s.ProvidesService
}

// GetProvidesDigitalContent returns the value of ProvidesDigitalContent.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetProvidesDigitalContent() *NilBool {
	return s.ProvidesDigitalContent
}

// GetPrepaid returns the value of Prepaid.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetPrepaid() *NilBool {
	return s.Prepaid
}

// GetUnitPrice returns the value of UnitPrice.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetUnitPrice() *NilFloat64 {
	return s.UnitPrice
}

// GetContentCategoryMasterID returns the value of ContentCategoryMasterID.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetContentCategoryMasterID() OptNilFloat64 {
	return s.ContentCategoryMasterID
}

// GetContentDescription returns the value of ContentDescription.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetContentDescription() *NilString {
	return s.ContentDescription
}

// GetExpiretionDateOfPoint returns the value of ExpiretionDateOfPoint.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetExpiretionDateOfPoint() *NilString {
	return s.ExpiretionDateOfPoint
}

// GetUsageOfPoint returns the value of UsageOfPoint.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetUsageOfPoint() *NilString {
	return s.UsageOfPoint
}

// GetLostTrial returns the value of LostTrial.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetLostTrial() *NilBool {
	return s.LostTrial
}

// GetDealsInsecureContent returns the value of DealsInsecureContent.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetDealsInsecureContent() *NilBool {
	return s.DealsInsecureContent
}

// GetDealsLongApplyContent returns the value of DealsLongApplyContent.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetDealsLongApplyContent() *NilBool {
	return s.DealsLongApplyContent
}

// GetPayBy returns the value of PayBy.
func (s *ExaminationInfoRetrievingResponseContractDetail) GetPayBy() OptExaminationInfoRetrievingResponseContractDetailPayBy {
	return s.PayBy
}

// SetCorporate sets the value of Corporate.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCorporate(val OptNilBool) {
	s.Corporate = val
}

// SetCorporateNumber sets the value of CorporateNumber.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCorporateNumber(val *NilString) {
	s.CorporateNumber = val
}

// SetCorporateName sets the value of CorporateName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCorporateName(val OptString) {
	s.CorporateName = val
}

// SetCorporateNameKana sets the value of CorporateNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCorporateNameKana(val OptString) {
	s.CorporateNameKana = val
}

// SetHp sets the value of Hp.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetHp(val *NilString) {
	s.Hp = val
}

// SetCapital sets the value of Capital.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCapital(val *NilFloat64) {
	s.Capital = val
}

// SetEstablishedAt sets the value of EstablishedAt.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetEstablishedAt(val *NilString) {
	s.EstablishedAt = val
}

// SetYearlySales sets the value of YearlySales.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetYearlySales(val *NilFloat64) {
	s.YearlySales = val
}

// SetBusinessDetails sets the value of BusinessDetails.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetBusinessDetails(val *NilString) {
	s.BusinessDetails = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyPostalCode(val *NilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyPrefecture(val *NilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyPrefectureKana(val *NilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyAddressMunicipality sets the value of CompanyAddressMunicipality.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressMunicipality(val *NilString) {
	s.CompanyAddressMunicipality = val
}

// SetCompanyAddressMunicipalityKana sets the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressMunicipalityKana(val *NilString) {
	s.CompanyAddressMunicipalityKana = val
}

// SetCompanyAddressSection sets the value of CompanyAddressSection.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressSection(val *NilString) {
	s.CompanyAddressSection = val
}

// SetCompanyAddressSectionKana sets the value of CompanyAddressSectionKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressSectionKana(val *NilString) {
	s.CompanyAddressSectionKana = val
}

// SetCompanyAddressChrome sets the value of CompanyAddressChrome.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressChrome(val *NilString) {
	s.CompanyAddressChrome = val
}

// SetCompanyAddressChromeKana sets the value of CompanyAddressChromeKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressChromeKana(val *NilString) {
	s.CompanyAddressChromeKana = val
}

// SetCompanyAddressBuildingName sets the value of CompanyAddressBuildingName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressBuildingName(val *NilString) {
	s.CompanyAddressBuildingName = val
}

// SetCompanyAddressBuildingNameKana sets the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyAddressBuildingNameKana(val *NilString) {
	s.CompanyAddressBuildingNameKana = val
}

// SetCompanyTel sets the value of CompanyTel.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetCompanyTel(val *NilString) {
	s.CompanyTel = val
}

// SetRepresentativeLastName sets the value of RepresentativeLastName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeLastName(val *NilString) {
	s.RepresentativeLastName = val
}

// SetRepresentativeLastNameKana sets the value of RepresentativeLastNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeLastNameKana(val *NilString) {
	s.RepresentativeLastNameKana = val
}

// SetRepresentativeFirstName sets the value of RepresentativeFirstName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeFirstName(val *NilString) {
	s.RepresentativeFirstName = val
}

// SetRepresentativeFirstNameKana sets the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeFirstNameKana(val *NilString) {
	s.RepresentativeFirstNameKana = val
}

// SetRepresentativeBirthday sets the value of RepresentativeBirthday.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeBirthday(val *NilString) {
	s.RepresentativeBirthday = val
}

// SetRepresentativeGender sets the value of RepresentativeGender.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeGender(val *NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) {
	s.RepresentativeGender = val
}

// SetRepresentativePostalCode sets the value of RepresentativePostalCode.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativePostalCode(val *NilString) {
	s.RepresentativePostalCode = val
}

// SetRepresentativePrefecture sets the value of RepresentativePrefecture.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativePrefecture(val *NilString) {
	s.RepresentativePrefecture = val
}

// SetRepresentativePrefectureKana sets the value of RepresentativePrefectureKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativePrefectureKana(val *NilString) {
	s.RepresentativePrefectureKana = val
}

// SetRepresentativeAddressMunicipality sets the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeAddressMunicipality(val *NilString) {
	s.RepresentativeAddressMunicipality = val
}

// SetRepresentativeAddressMunicipalityKana sets the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeAddressMunicipalityKana(val *NilString) {
	s.RepresentativeAddressMunicipalityKana = val
}

// SetRepresentativeAddressSection sets the value of RepresentativeAddressSection.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeAddressSection(val *NilString) {
	s.RepresentativeAddressSection = val
}

// SetRepresentativeAddressSectionKana sets the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeAddressSectionKana(val *NilString) {
	s.RepresentativeAddressSectionKana = val
}

// SetRepresentativeAddressChrome sets the value of RepresentativeAddressChrome.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeAddressChrome(val *NilString) {
	s.RepresentativeAddressChrome = val
}

// SetRepresentativeAddressChromeKana sets the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeAddressChromeKana(val *NilString) {
	s.RepresentativeAddressChromeKana = val
}

// SetRepresentativeTel sets the value of RepresentativeTel.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetRepresentativeTel(val *NilString) {
	s.RepresentativeTel = val
}

// SetStaff1LastName sets the value of Staff1LastName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff1LastName(val *NilString) {
	s.Staff1LastName = val
}

// SetStaff1LastNameKana sets the value of Staff1LastNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff1LastNameKana(val *NilString) {
	s.Staff1LastNameKana = val
}

// SetStaff1FirstName sets the value of Staff1FirstName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff1FirstName(val *NilString) {
	s.Staff1FirstName = val
}

// SetStaff1FirstNameKana sets the value of Staff1FirstNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff1FirstNameKana(val *NilString) {
	s.Staff1FirstNameKana = val
}

// SetStaff1Tel sets the value of Staff1Tel.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff1Tel(val *NilString) {
	s.Staff1Tel = val
}

// SetStaff1Mail sets the value of Staff1Mail.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff1Mail(val *NilString) {
	s.Staff1Mail = val
}

// SetStaff2LastName sets the value of Staff2LastName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff2LastName(val *NilString) {
	s.Staff2LastName = val
}

// SetStaff2LastNameKana sets the value of Staff2LastNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff2LastNameKana(val *NilString) {
	s.Staff2LastNameKana = val
}

// SetStaff2FirstName sets the value of Staff2FirstName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff2FirstName(val *NilString) {
	s.Staff2FirstName = val
}

// SetStaff2FirstNameKana sets the value of Staff2FirstNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff2FirstNameKana(val *NilString) {
	s.Staff2FirstNameKana = val
}

// SetStaff2Tel sets the value of Staff2Tel.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff2Tel(val *NilString) {
	s.Staff2Tel = val
}

// SetStaff2Mail sets the value of Staff2Mail.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetStaff2Mail(val *NilString) {
	s.Staff2Mail = val
}

// SetUsedOnApp sets the value of UsedOnApp.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetUsedOnApp(val *NilBool) {
	s.UsedOnApp = val
}

// SetUsedOnWeb sets the value of UsedOnWeb.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetUsedOnWeb(val *NilBool) {
	s.UsedOnWeb = val
}

// SetUsedOnOther sets the value of UsedOnOther.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetUsedOnOther(val OptNilBool) {
	s.UsedOnOther = val
}

// SetSiteExisting sets the value of SiteExisting.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetSiteExisting(val OptExaminationInfoRetrievingResponseContractDetailSiteExisting) {
	s.SiteExisting = val
}

// SetURL sets the value of URL.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetURL(val *NilString) {
	s.URL = val
}

// SetSiteCredential sets the value of SiteCredential.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetSiteCredential(val *NilString) {
	s.SiteCredential = val
}

// SetShopName sets the value of ShopName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetShopName(val OptString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetShopNameKana(val OptString) {
	s.ShopNameKana = val
}

// SetShopNameEn sets the value of ShopNameEn.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetShopNameEn(val OptString) {
	s.ShopNameEn = val
}

// SetPlatformName sets the value of PlatformName.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSupportTel sets the value of SupportTel.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetSupportTel(val *NilString) {
	s.SupportTel = val
}

// SetSupportMail sets the value of SupportMail.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetSupportMail(val *NilString) {
	s.SupportMail = val
}

// SetProvidesProduct sets the value of ProvidesProduct.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetProvidesProduct(val *NilBool) {
	s.ProvidesProduct = val
}

// SetProvidesService sets the value of ProvidesService.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetProvidesService(val *NilBool) {
	s.ProvidesService = val
}

// SetProvidesDigitalContent sets the value of ProvidesDigitalContent.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetProvidesDigitalContent(val *NilBool) {
	s.ProvidesDigitalContent = val
}

// SetPrepaid sets the value of Prepaid.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetPrepaid(val *NilBool) {
	s.Prepaid = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetUnitPrice(val *NilFloat64) {
	s.UnitPrice = val
}

// SetContentCategoryMasterID sets the value of ContentCategoryMasterID.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetContentCategoryMasterID(val OptNilFloat64) {
	s.ContentCategoryMasterID = val
}

// SetContentDescription sets the value of ContentDescription.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetContentDescription(val *NilString) {
	s.ContentDescription = val
}

// SetExpiretionDateOfPoint sets the value of ExpiretionDateOfPoint.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetExpiretionDateOfPoint(val *NilString) {
	s.ExpiretionDateOfPoint = val
}

// SetUsageOfPoint sets the value of UsageOfPoint.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetUsageOfPoint(val *NilString) {
	s.UsageOfPoint = val
}

// SetLostTrial sets the value of LostTrial.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetLostTrial(val *NilBool) {
	s.LostTrial = val
}

// SetDealsInsecureContent sets the value of DealsInsecureContent.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetDealsInsecureContent(val *NilBool) {
	s.DealsInsecureContent = val
}

// SetDealsLongApplyContent sets the value of DealsLongApplyContent.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetDealsLongApplyContent(val *NilBool) {
	s.DealsLongApplyContent = val
}

// SetPayBy sets the value of PayBy.
func (s *ExaminationInfoRetrievingResponseContractDetail) SetPayBy(val OptExaminationInfoRetrievingResponseContractDetailPayBy) {
	s.PayBy = val
}

// 支払い方法\
// \
// キャンセル金額の超過などによりfincodeへの支払が発生した場合の支払い方法
// - `0`: クレジットカード
// - `1`: 銀行口座.
type ExaminationInfoRetrievingResponseContractDetailPayBy float64

const (
	ExaminationInfoRetrievingResponseContractDetailPayBy0 ExaminationInfoRetrievingResponseContractDetailPayBy = 0
	ExaminationInfoRetrievingResponseContractDetailPayBy1 ExaminationInfoRetrievingResponseContractDetailPayBy = 1
)

// AllValues returns all ExaminationInfoRetrievingResponseContractDetailPayBy values.
func (ExaminationInfoRetrievingResponseContractDetailPayBy) AllValues() []ExaminationInfoRetrievingResponseContractDetailPayBy {
	return []ExaminationInfoRetrievingResponseContractDetailPayBy{
		ExaminationInfoRetrievingResponseContractDetailPayBy0,
		ExaminationInfoRetrievingResponseContractDetailPayBy1,
	}
}

// 代表者 性別
// - `0`: 男性
// - `1`: 女性.
type ExaminationInfoRetrievingResponseContractDetailRepresentativeGender int

const (
	ExaminationInfoRetrievingResponseContractDetailRepresentativeGender0 ExaminationInfoRetrievingResponseContractDetailRepresentativeGender = 0
	ExaminationInfoRetrievingResponseContractDetailRepresentativeGender1 ExaminationInfoRetrievingResponseContractDetailRepresentativeGender = 1
)

// AllValues returns all ExaminationInfoRetrievingResponseContractDetailRepresentativeGender values.
func (ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) AllValues() []ExaminationInfoRetrievingResponseContractDetailRepresentativeGender {
	return []ExaminationInfoRetrievingResponseContractDetailRepresentativeGender{
		ExaminationInfoRetrievingResponseContractDetailRepresentativeGender0,
		ExaminationInfoRetrievingResponseContractDetailRepresentativeGender1,
	}
}

// Webサイトの公開状況\
// \
// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
// - `0`: fincode審査チームがサイトを閲覧可能
// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
// - `2`: fincode審査チームがサイトを閲覧不可能.
type ExaminationInfoRetrievingResponseContractDetailSiteExisting float64

const (
	ExaminationInfoRetrievingResponseContractDetailSiteExisting0 ExaminationInfoRetrievingResponseContractDetailSiteExisting = 0
	ExaminationInfoRetrievingResponseContractDetailSiteExisting1 ExaminationInfoRetrievingResponseContractDetailSiteExisting = 1
	ExaminationInfoRetrievingResponseContractDetailSiteExisting2 ExaminationInfoRetrievingResponseContractDetailSiteExisting = 2
)

// AllValues returns all ExaminationInfoRetrievingResponseContractDetailSiteExisting values.
func (ExaminationInfoRetrievingResponseContractDetailSiteExisting) AllValues() []ExaminationInfoRetrievingResponseContractDetailSiteExisting {
	return []ExaminationInfoRetrievingResponseContractDetailSiteExisting{
		ExaminationInfoRetrievingResponseContractDetailSiteExisting0,
		ExaminationInfoRetrievingResponseContractDetailSiteExisting1,
		ExaminationInfoRetrievingResponseContractDetailSiteExisting2,
	}
}

type ExaminationInfoRetrievingResponseContractInputStatus struct {
	StatusCode OptExaminationInfoRetrievingResponseContractInputStatusStatusCode `json:"status_code"`
	// 契約情報入力完了フラグ\
	// \
	// 契約情報の入力が完了しているかどうか.
	ContractInfoInput OptBool `json:"contract_info_input"`
	// ショップ情報入力完了フラグ\
	// \
	// ショップ情報の入力が完了しているかどうか.
	ShopInfoInput OptBool `json:"shop_info_input"`
	// 銀行口座情報入力完了フラグ\
	// \
	// 銀行口座情報の入力が完了しているかどうか.
	AccountInfoInput OptBool `json:"account_info_input"`
	// 請求先クレジットカード情報入力完了フラグ\
	// \
	// fincodeが請求を行う際に請求先となるクレジットカード情報の入力が完了しているかどうか.
	CardInfoInput OptBool `json:"card_info_input"`
}

// GetStatusCode returns the value of StatusCode.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) GetStatusCode() OptExaminationInfoRetrievingResponseContractInputStatusStatusCode {
	return s.StatusCode
}

// GetContractInfoInput returns the value of ContractInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) GetContractInfoInput() OptBool {
	return s.ContractInfoInput
}

// GetShopInfoInput returns the value of ShopInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) GetShopInfoInput() OptBool {
	return s.ShopInfoInput
}

// GetAccountInfoInput returns the value of AccountInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) GetAccountInfoInput() OptBool {
	return s.AccountInfoInput
}

// GetCardInfoInput returns the value of CardInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) GetCardInfoInput() OptBool {
	return s.CardInfoInput
}

// SetStatusCode sets the value of StatusCode.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) SetStatusCode(val OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) {
	s.StatusCode = val
}

// SetContractInfoInput sets the value of ContractInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) SetContractInfoInput(val OptBool) {
	s.ContractInfoInput = val
}

// SetShopInfoInput sets the value of ShopInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) SetShopInfoInput(val OptBool) {
	s.ShopInfoInput = val
}

// SetAccountInfoInput sets the value of AccountInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) SetAccountInfoInput(val OptBool) {
	s.AccountInfoInput = val
}

// SetCardInfoInput sets the value of CardInfoInput.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) SetCardInfoInput(val OptBool) {
	s.CardInfoInput = val
}

// 本番環境申請情報入力ステータス
// - `301`: 全項目未入力
// - `302`: 一部入力済み
// - `303`: 全項目入力済み
// - `304`: 本番環境申請済み.
type ExaminationInfoRetrievingResponseContractInputStatusStatusCode float64

const (
	ExaminationInfoRetrievingResponseContractInputStatusStatusCode301 ExaminationInfoRetrievingResponseContractInputStatusStatusCode = 301
	ExaminationInfoRetrievingResponseContractInputStatusStatusCode302 ExaminationInfoRetrievingResponseContractInputStatusStatusCode = 302
	ExaminationInfoRetrievingResponseContractInputStatusStatusCode303 ExaminationInfoRetrievingResponseContractInputStatusStatusCode = 303
	ExaminationInfoRetrievingResponseContractInputStatusStatusCode304 ExaminationInfoRetrievingResponseContractInputStatusStatusCode = 304
)

// AllValues returns all ExaminationInfoRetrievingResponseContractInputStatusStatusCode values.
func (ExaminationInfoRetrievingResponseContractInputStatusStatusCode) AllValues() []ExaminationInfoRetrievingResponseContractInputStatusStatusCode {
	return []ExaminationInfoRetrievingResponseContractInputStatusStatusCode{
		ExaminationInfoRetrievingResponseContractInputStatusStatusCode301,
		ExaminationInfoRetrievingResponseContractInputStatusStatusCode302,
		ExaminationInfoRetrievingResponseContractInputStatusStatusCode303,
		ExaminationInfoRetrievingResponseContractInputStatusStatusCode304,
	}
}

// 入金サイクルマスタID\
// 入金サイクルについては[Docs > 精算管理 >
// クレジットカード決済の入金サイクル](https://docs.fincode.
// jp/business_management/deposit)を参照できます。
// - `1`: スタンダード（月1回, 月末締め翌月末入金）
// - `2`: スタンダード（月2回, 15日&月末締め15日後入金）.
type ExaminationInfoRetrievingResponseDepositCycleMasterID int

const (
	ExaminationInfoRetrievingResponseDepositCycleMasterID1 ExaminationInfoRetrievingResponseDepositCycleMasterID = 1
	ExaminationInfoRetrievingResponseDepositCycleMasterID2 ExaminationInfoRetrievingResponseDepositCycleMasterID = 2
)

// AllValues returns all ExaminationInfoRetrievingResponseDepositCycleMasterID values.
func (ExaminationInfoRetrievingResponseDepositCycleMasterID) AllValues() []ExaminationInfoRetrievingResponseDepositCycleMasterID {
	return []ExaminationInfoRetrievingResponseDepositCycleMasterID{
		ExaminationInfoRetrievingResponseDepositCycleMasterID1,
		ExaminationInfoRetrievingResponseDepositCycleMasterID2,
	}
}

// Merged schema.
type ExaminationInfoRetrievingResponseShopItemDetailItem struct {
	// 商材1 名称.
	Content1Name OptString `json:"content1_name"`
	// 商材1 説明.
	Content1Description OptString `json:"content1_description"`
	// 商材1 単価.
	Content1UnitPrice OptInt `json:"content1_unit_price"`
	// 商材2 名称.
	Content2Name OptString `json:"content2_name"`
	// 商材2 説明.
	Content2Description OptString `json:"content2_description"`
	// 商材2 単価.
	Content2UnitPrice OptInt `json:"content2_unit_price"`
	// 商材3 名称.
	Content3Name OptString `json:"content3_name"`
	// 商材3 説明.
	Content3Description OptString `json:"content3_description"`
	// 商材3 単価.
	Content3UnitPrice OptInt `json:"content3_unit_price"`
	// 商品情報ID.
	ID OptNilString `json:"id"`
	// 取扱商材 品目種別
	// - `0`: 物品販売
	// - `1`: サービス
	// - `2`: デジタルコンテンツ.
	Type OptExaminationInfoRetrievingResponseShopItemDetailItemType `json:"type"`
}

// GetContent1Name returns the value of Content1Name.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent1Name() OptString {
	return s.Content1Name
}

// GetContent1Description returns the value of Content1Description.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent1Description() OptString {
	return s.Content1Description
}

// GetContent1UnitPrice returns the value of Content1UnitPrice.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent1UnitPrice() OptInt {
	return s.Content1UnitPrice
}

// GetContent2Name returns the value of Content2Name.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent2Name() OptString {
	return s.Content2Name
}

// GetContent2Description returns the value of Content2Description.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent2Description() OptString {
	return s.Content2Description
}

// GetContent2UnitPrice returns the value of Content2UnitPrice.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent2UnitPrice() OptInt {
	return s.Content2UnitPrice
}

// GetContent3Name returns the value of Content3Name.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent3Name() OptString {
	return s.Content3Name
}

// GetContent3Description returns the value of Content3Description.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent3Description() OptString {
	return s.Content3Description
}

// GetContent3UnitPrice returns the value of Content3UnitPrice.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetContent3UnitPrice() OptInt {
	return s.Content3UnitPrice
}

// GetID returns the value of ID.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetID() OptNilString {
	return s.ID
}

// GetType returns the value of Type.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) GetType() OptExaminationInfoRetrievingResponseShopItemDetailItemType {
	return s.Type
}

// SetContent1Name sets the value of Content1Name.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent1Name(val OptString) {
	s.Content1Name = val
}

// SetContent1Description sets the value of Content1Description.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent1Description(val OptString) {
	s.Content1Description = val
}

// SetContent1UnitPrice sets the value of Content1UnitPrice.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent1UnitPrice(val OptInt) {
	s.Content1UnitPrice = val
}

// SetContent2Name sets the value of Content2Name.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent2Name(val OptString) {
	s.Content2Name = val
}

// SetContent2Description sets the value of Content2Description.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent2Description(val OptString) {
	s.Content2Description = val
}

// SetContent2UnitPrice sets the value of Content2UnitPrice.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent2UnitPrice(val OptInt) {
	s.Content2UnitPrice = val
}

// SetContent3Name sets the value of Content3Name.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent3Name(val OptString) {
	s.Content3Name = val
}

// SetContent3Description sets the value of Content3Description.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent3Description(val OptString) {
	s.Content3Description = val
}

// SetContent3UnitPrice sets the value of Content3UnitPrice.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetContent3UnitPrice(val OptInt) {
	s.Content3UnitPrice = val
}

// SetID sets the value of ID.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetID(val OptNilString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) SetType(val OptExaminationInfoRetrievingResponseShopItemDetailItemType) {
	s.Type = val
}

// 取扱商材 品目種別
// - `0`: 物品販売
// - `1`: サービス
// - `2`: デジタルコンテンツ.
type ExaminationInfoRetrievingResponseShopItemDetailItemType float64

const (
	ExaminationInfoRetrievingResponseShopItemDetailItemType0 ExaminationInfoRetrievingResponseShopItemDetailItemType = 0
	ExaminationInfoRetrievingResponseShopItemDetailItemType1 ExaminationInfoRetrievingResponseShopItemDetailItemType = 1
	ExaminationInfoRetrievingResponseShopItemDetailItemType2 ExaminationInfoRetrievingResponseShopItemDetailItemType = 2
)

// AllValues returns all ExaminationInfoRetrievingResponseShopItemDetailItemType values.
func (ExaminationInfoRetrievingResponseShopItemDetailItemType) AllValues() []ExaminationInfoRetrievingResponseShopItemDetailItemType {
	return []ExaminationInfoRetrievingResponseShopItemDetailItemType{
		ExaminationInfoRetrievingResponseShopItemDetailItemType0,
		ExaminationInfoRetrievingResponseShopItemDetailItemType1,
		ExaminationInfoRetrievingResponseShopItemDetailItemType2,
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type ExaminationInfoRetrievingResponseShopType string

const (
	ExaminationInfoRetrievingResponseShopTypePlatform ExaminationInfoRetrievingResponseShopType = "platform"
	ExaminationInfoRetrievingResponseShopTypeTenant   ExaminationInfoRetrievingResponseShopType = "tenant"
)

// AllValues returns all ExaminationInfoRetrievingResponseShopType values.
func (ExaminationInfoRetrievingResponseShopType) AllValues() []ExaminationInfoRetrievingResponseShopType {
	return []ExaminationInfoRetrievingResponseShopType{
		ExaminationInfoRetrievingResponseShopTypePlatform,
		ExaminationInfoRetrievingResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationInfoRetrievingResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationInfoRetrievingResponseShopTypePlatform:
		return []byte(s), nil
	case ExaminationInfoRetrievingResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationInfoRetrievingResponseShopType) UnmarshalText(data []byte) error {
	switch ExaminationInfoRetrievingResponseShopType(data) {
	case ExaminationInfoRetrievingResponseShopTypePlatform:
		*s = ExaminationInfoRetrievingResponseShopTypePlatform
		return nil
	case ExaminationInfoRetrievingResponseShopTypeTenant:
		*s = ExaminationInfoRetrievingResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 契約ステータス\
// \
// fincodeとそのショップの運営事業者の契約のステータスを表します。
// - `101`: 未契約<br /><span
// class="smallText">まだfincodeの本番環境申請の提出が完了していない状態です。</span>
// - `102`: 利用審査中<br /><span
// class="smallText">fincodeの本番環境申請の提出が完了し、利用審査中の状態です。</span>
// - `103`: 利用審査中（VISA/Mastercard利用可）<br /><span
// class="smallText">即時利用によりVISA/Mastercardブランドの決済受付が可能な状態です。審査は継続して行われます。</span>
// - `105`: 解約済
// - `106`: 契約不成立<br /><span
// class="smallText">審査の結果、fincodeの利用が不可となった状態です。</span>
// - `107`: 稼働中<br /><span
// class="smallText">fincodeの本番環境申請が完了し、クレジットカード決済の受付が可能な状態です。</span>.
type ExaminationInfoRetrievingResponseStatusCode string

const (
	ExaminationInfoRetrievingResponseStatusCode101 ExaminationInfoRetrievingResponseStatusCode = "101"
	ExaminationInfoRetrievingResponseStatusCode102 ExaminationInfoRetrievingResponseStatusCode = "102"
	ExaminationInfoRetrievingResponseStatusCode103 ExaminationInfoRetrievingResponseStatusCode = "103"
	ExaminationInfoRetrievingResponseStatusCode105 ExaminationInfoRetrievingResponseStatusCode = "105"
	ExaminationInfoRetrievingResponseStatusCode106 ExaminationInfoRetrievingResponseStatusCode = "106"
	ExaminationInfoRetrievingResponseStatusCode107 ExaminationInfoRetrievingResponseStatusCode = "107"
)

// AllValues returns all ExaminationInfoRetrievingResponseStatusCode values.
func (ExaminationInfoRetrievingResponseStatusCode) AllValues() []ExaminationInfoRetrievingResponseStatusCode {
	return []ExaminationInfoRetrievingResponseStatusCode{
		ExaminationInfoRetrievingResponseStatusCode101,
		ExaminationInfoRetrievingResponseStatusCode102,
		ExaminationInfoRetrievingResponseStatusCode103,
		ExaminationInfoRetrievingResponseStatusCode105,
		ExaminationInfoRetrievingResponseStatusCode106,
		ExaminationInfoRetrievingResponseStatusCode107,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationInfoRetrievingResponseStatusCode) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationInfoRetrievingResponseStatusCode101:
		return []byte(s), nil
	case ExaminationInfoRetrievingResponseStatusCode102:
		return []byte(s), nil
	case ExaminationInfoRetrievingResponseStatusCode103:
		return []byte(s), nil
	case ExaminationInfoRetrievingResponseStatusCode105:
		return []byte(s), nil
	case ExaminationInfoRetrievingResponseStatusCode106:
		return []byte(s), nil
	case ExaminationInfoRetrievingResponseStatusCode107:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationInfoRetrievingResponseStatusCode) UnmarshalText(data []byte) error {
	switch ExaminationInfoRetrievingResponseStatusCode(data) {
	case ExaminationInfoRetrievingResponseStatusCode101:
		*s = ExaminationInfoRetrievingResponseStatusCode101
		return nil
	case ExaminationInfoRetrievingResponseStatusCode102:
		*s = ExaminationInfoRetrievingResponseStatusCode102
		return nil
	case ExaminationInfoRetrievingResponseStatusCode103:
		*s = ExaminationInfoRetrievingResponseStatusCode103
		return nil
	case ExaminationInfoRetrievingResponseStatusCode105:
		*s = ExaminationInfoRetrievingResponseStatusCode105
		return nil
	case ExaminationInfoRetrievingResponseStatusCode106:
		*s = ExaminationInfoRetrievingResponseStatusCode106
		return nil
	case ExaminationInfoRetrievingResponseStatusCode107:
		*s = ExaminationInfoRetrievingResponseStatusCode107
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExaminationInfo.Updating.Request
type ExaminationInfoUpdatingRequest struct {
	UpdateContractDetail *NilBool                                              `json:"update_contract_detail"`
	UpdateShop           *NilBool                                              `json:"update_shop"`
	UpdateBankAccount    *NilBool                                              `json:"update_bank_account"`
	UpdateDepositCycle   *NilBool                                              `json:"update_deposit_cycle"`
	DepositCycleMasterID OptExaminationInfoUpdatingRequestDepositCycleMasterID `json:"deposit_cycle_master_id"`
	// 契約情報\
	// \
	// fincodeに登録するショップ運営事業者の契約情報の詳細.
	ContractDetail OptExaminationInfoUpdatingRequestContractDetail `json:"contract_detail"`
	// ショップ 取扱商材情報\
	// \
	// fincodeに登録するショップの取扱商材情報.
	ShopItemDetail []ExaminationInfoUpdatingRequestShopItemDetailItem `json:"shop_item_detail"`
	// 銀行口座情報\
	// \
	// fincode上での売上入金を受け取るための銀行口座情報.
	ContractBankAccount OptExaminationInfoUpdatingRequestContractBankAccount `json:"contract_bank_account"`
}

// GetUpdateContractDetail returns the value of UpdateContractDetail.
func (s *ExaminationInfoUpdatingRequest) GetUpdateContractDetail() *NilBool {
	return s.UpdateContractDetail
}

// GetUpdateShop returns the value of UpdateShop.
func (s *ExaminationInfoUpdatingRequest) GetUpdateShop() *NilBool {
	return s.UpdateShop
}

// GetUpdateBankAccount returns the value of UpdateBankAccount.
func (s *ExaminationInfoUpdatingRequest) GetUpdateBankAccount() *NilBool {
	return s.UpdateBankAccount
}

// GetUpdateDepositCycle returns the value of UpdateDepositCycle.
func (s *ExaminationInfoUpdatingRequest) GetUpdateDepositCycle() *NilBool {
	return s.UpdateDepositCycle
}

// GetDepositCycleMasterID returns the value of DepositCycleMasterID.
func (s *ExaminationInfoUpdatingRequest) GetDepositCycleMasterID() OptExaminationInfoUpdatingRequestDepositCycleMasterID {
	return s.DepositCycleMasterID
}

// GetContractDetail returns the value of ContractDetail.
func (s *ExaminationInfoUpdatingRequest) GetContractDetail() OptExaminationInfoUpdatingRequestContractDetail {
	return s.ContractDetail
}

// GetShopItemDetail returns the value of ShopItemDetail.
func (s *ExaminationInfoUpdatingRequest) GetShopItemDetail() []ExaminationInfoUpdatingRequestShopItemDetailItem {
	return s.ShopItemDetail
}

// GetContractBankAccount returns the value of ContractBankAccount.
func (s *ExaminationInfoUpdatingRequest) GetContractBankAccount() OptExaminationInfoUpdatingRequestContractBankAccount {
	return s.ContractBankAccount
}

// SetUpdateContractDetail sets the value of UpdateContractDetail.
func (s *ExaminationInfoUpdatingRequest) SetUpdateContractDetail(val *NilBool) {
	s.UpdateContractDetail = val
}

// SetUpdateShop sets the value of UpdateShop.
func (s *ExaminationInfoUpdatingRequest) SetUpdateShop(val *NilBool) {
	s.UpdateShop = val
}

// SetUpdateBankAccount sets the value of UpdateBankAccount.
func (s *ExaminationInfoUpdatingRequest) SetUpdateBankAccount(val *NilBool) {
	s.UpdateBankAccount = val
}

// SetUpdateDepositCycle sets the value of UpdateDepositCycle.
func (s *ExaminationInfoUpdatingRequest) SetUpdateDepositCycle(val *NilBool) {
	s.UpdateDepositCycle = val
}

// SetDepositCycleMasterID sets the value of DepositCycleMasterID.
func (s *ExaminationInfoUpdatingRequest) SetDepositCycleMasterID(val OptExaminationInfoUpdatingRequestDepositCycleMasterID) {
	s.DepositCycleMasterID = val
}

// SetContractDetail sets the value of ContractDetail.
func (s *ExaminationInfoUpdatingRequest) SetContractDetail(val OptExaminationInfoUpdatingRequestContractDetail) {
	s.ContractDetail = val
}

// SetShopItemDetail sets the value of ShopItemDetail.
func (s *ExaminationInfoUpdatingRequest) SetShopItemDetail(val []ExaminationInfoUpdatingRequestShopItemDetailItem) {
	s.ShopItemDetail = val
}

// SetContractBankAccount sets the value of ContractBankAccount.
func (s *ExaminationInfoUpdatingRequest) SetContractBankAccount(val OptExaminationInfoUpdatingRequestContractBankAccount) {
	s.ContractBankAccount = val
}

type ExaminationInfoUpdatingRequestContractBankAccount struct {
	// 銀行名.
	BankName OptString `json:"bank_name"`
	// 銀行名（カナ）.
	BankNameKana OptString `json:"bank_name_kana"`
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode OptString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 支店名（カナ）.
	BranchNameKana OptString `json:"branch_name_kana"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind OptExaminationInfoUpdatingRequestContractBankAccountAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber OptString `json:"account_number"`
	// 口座名義（カタカナ）.
	AccountName OptString `json:"account_name"`
}

// GetBankName returns the value of BankName.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetBankName() OptString {
	return s.BankName
}

// GetBankNameKana returns the value of BankNameKana.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetBankNameKana() OptString {
	return s.BankNameKana
}

// GetBankCode returns the value of BankCode.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetBranchName() OptString {
	return s.BranchName
}

// GetBranchNameKana returns the value of BranchNameKana.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetBranchNameKana() OptString {
	return s.BranchNameKana
}

// GetAccountKind returns the value of AccountKind.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetAccountKind() OptExaminationInfoUpdatingRequestContractBankAccountAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) GetAccountName() OptString {
	return s.AccountName
}

// SetBankName sets the value of BankName.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetBankName(val OptString) {
	s.BankName = val
}

// SetBankNameKana sets the value of BankNameKana.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetBankNameKana(val OptString) {
	s.BankNameKana = val
}

// SetBankCode sets the value of BankCode.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetBranchNameKana sets the value of BranchNameKana.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetBranchNameKana(val OptString) {
	s.BranchNameKana = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetAccountKind(val OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) SetAccountName(val OptString) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ExaminationInfoUpdatingRequestContractBankAccountAccountKind float64

const (
	ExaminationInfoUpdatingRequestContractBankAccountAccountKind0 ExaminationInfoUpdatingRequestContractBankAccountAccountKind = 0
	ExaminationInfoUpdatingRequestContractBankAccountAccountKind1 ExaminationInfoUpdatingRequestContractBankAccountAccountKind = 1
)

// AllValues returns all ExaminationInfoUpdatingRequestContractBankAccountAccountKind values.
func (ExaminationInfoUpdatingRequestContractBankAccountAccountKind) AllValues() []ExaminationInfoUpdatingRequestContractBankAccountAccountKind {
	return []ExaminationInfoUpdatingRequestContractBankAccountAccountKind{
		ExaminationInfoUpdatingRequestContractBankAccountAccountKind0,
		ExaminationInfoUpdatingRequestContractBankAccountAccountKind1,
	}
}

// Merged schema.
type ExaminationInfoUpdatingRequestContractDetail struct {
	// 事業形態
	// - `true`: 法人
	// - `false`: 個人事業主.
	Corporate                             OptNilBool                                                           `json:"corporate"`
	CorporateNumber                       *NilString                                                           `json:"corporate_number"`
	CorporateName                         OptString                                                            `json:"corporate_name"`
	CorporateNameKana                     OptString                                                            `json:"corporate_name_kana"`
	Hp                                    *NilString                                                           `json:"hp"`
	Capital                               *NilFloat64                                                          `json:"capital"`
	EstablishedAt                         *NilString                                                           `json:"established_at"`
	YearlySales                           *NilFloat64                                                          `json:"yearly_sales"`
	BusinessDetails                       *NilString                                                           `json:"business_details"`
	CompanyPostalCode                     *NilString                                                           `json:"company_postal_code"`
	CompanyPrefecture                     *NilString                                                           `json:"company_prefecture"`
	CompanyPrefectureKana                 *NilString                                                           `json:"company_prefecture_kana"`
	CompanyAddressMunicipality            *NilString                                                           `json:"company_address_municipality"`
	CompanyAddressMunicipalityKana        *NilString                                                           `json:"company_address_municipality_kana"`
	CompanyAddressSection                 *NilString                                                           `json:"company_address_section"`
	CompanyAddressSectionKana             *NilString                                                           `json:"company_address_section_kana"`
	CompanyAddressChrome                  *NilString                                                           `json:"company_address_chrome"`
	CompanyAddressChromeKana              *NilString                                                           `json:"company_address_chrome_kana"`
	CompanyAddressBuildingName            *NilString                                                           `json:"company_address_building_name"`
	CompanyAddressBuildingNameKana        *NilString                                                           `json:"company_address_building_name_kana"`
	CompanyTel                            *NilString                                                           `json:"company_tel"`
	RepresentativeLastName                *NilString                                                           `json:"representative_last_name"`
	RepresentativeLastNameKana            *NilString                                                           `json:"representative_last_name_kana"`
	RepresentativeFirstName               *NilString                                                           `json:"representative_first_name"`
	RepresentativeFirstNameKana           *NilString                                                           `json:"representative_first_name_kana"`
	RepresentativeBirthday                *NilString                                                           `json:"representative_birthday"`
	RepresentativeGender                  *NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender `json:"representative_gender"`
	RepresentativePostalCode              *NilString                                                           `json:"representative_postal_code"`
	RepresentativePrefecture              *NilString                                                           `json:"representative_prefecture"`
	RepresentativePrefectureKana          *NilString                                                           `json:"representative_prefecture_kana"`
	RepresentativeAddressMunicipality     *NilString                                                           `json:"representative_address_municipality"`
	RepresentativeAddressMunicipalityKana *NilString                                                           `json:"representative_address_municipality_kana"`
	RepresentativeAddressSection          *NilString                                                           `json:"representative_address_section"`
	RepresentativeAddressSectionKana      *NilString                                                           `json:"representative_address_section_kana"`
	RepresentativeAddressChrome           *NilString                                                           `json:"representative_address_chrome"`
	RepresentativeAddressChromeKana       *NilString                                                           `json:"representative_address_chrome_kana"`
	RepresentativeTel                     *NilString                                                           `json:"representative_tel"`
	Staff1LastName                        *NilString                                                           `json:"staff1_last_name"`
	Staff1LastNameKana                    *NilString                                                           `json:"staff1_last_name_kana"`
	Staff1FirstName                       *NilString                                                           `json:"staff1_first_name"`
	Staff1FirstNameKana                   *NilString                                                           `json:"staff1_first_name_kana"`
	Staff1Tel                             *NilString                                                           `json:"staff1_tel"`
	Staff1Mail                            *NilString                                                           `json:"staff1_mail"`
	Staff2LastName                        *NilString                                                           `json:"staff2_last_name"`
	Staff2LastNameKana                    *NilString                                                           `json:"staff2_last_name_kana"`
	Staff2FirstName                       *NilString                                                           `json:"staff2_first_name"`
	Staff2FirstNameKana                   *NilString                                                           `json:"staff2_first_name_kana"`
	Staff2Tel                             *NilString                                                           `json:"staff2_tel"`
	Staff2Mail                            *NilString                                                           `json:"staff2_mail"`
	UsedOnApp                             *NilBool                                                             `json:"used_on_app"`
	UsedOnWeb                             *NilBool                                                             `json:"used_on_web"`
	// その他の箇所での利用有無\
	// \
	// Webアプリケーションやネイティブアプリ上でない箇所で利用があるかどうか
	// - `true`: Webアプリ／ネイティブアプリでない箇所でfincodeを使用する.
	UsedOnOther OptNilBool `json:"used_on_other"`
	// Webサイトの公開状況\
	// \
	// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
	// - `0`: fincode審査チームがサイトを閲覧可能
	// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
	// - `2`: fincode審査チームがサイトを閲覧不可能.
	SiteExisting   OptExaminationInfoUpdatingRequestContractDetailSiteExisting `json:"site_existing"`
	URL            *NilString                                                  `json:"url"`
	SiteCredential *NilString                                                  `json:"site_credential"`
	ShopName       OptString                                                   `json:"shop_name"`
	ShopNameKana   OptString                                                   `json:"shop_name_kana"`
	ShopNameEn     OptString                                                   `json:"shop_name_en"`
	// プラットフォーム名.
	PlatformName           OptNilString `json:"platform_name"`
	SupportTel             *NilString   `json:"support_tel"`
	SupportMail            *NilString   `json:"support_mail"`
	ProvidesProduct        *NilBool     `json:"provides_product"`
	ProvidesService        *NilBool     `json:"provides_service"`
	ProvidesDigitalContent *NilBool     `json:"provides_digital_content"`
	Prepaid                *NilBool     `json:"prepaid"`
	UnitPrice              *NilFloat64  `json:"unit_price"`
	// 取扱商材カテゴリID.
	ContentCategoryMasterID OptNilFloat64                                        `json:"content_category_master_id"`
	ContentDescription      *NilString                                           `json:"content_description"`
	ExpiretionDateOfPoint   *NilString                                           `json:"expiretion_date_of_point"`
	UsageOfPoint            *NilString                                           `json:"usage_of_point"`
	LostTrial               *NilBool                                             `json:"lost_trial"`
	DealsInsecureContent    *NilBool                                             `json:"deals_insecure_content"`
	DealsLongApplyContent   *NilBool                                             `json:"deals_long_apply_content"`
	PayBy                   OptExaminationInfoUpdatingRequestContractDetailPayBy `json:"pay_by"`
}

// GetCorporate returns the value of Corporate.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCorporate() OptNilBool {
	return s.Corporate
}

// GetCorporateNumber returns the value of CorporateNumber.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCorporateNumber() *NilString {
	return s.CorporateNumber
}

// GetCorporateName returns the value of CorporateName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCorporateName() OptString {
	return s.CorporateName
}

// GetCorporateNameKana returns the value of CorporateNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCorporateNameKana() OptString {
	return s.CorporateNameKana
}

// GetHp returns the value of Hp.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetHp() *NilString {
	return s.Hp
}

// GetCapital returns the value of Capital.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCapital() *NilFloat64 {
	return s.Capital
}

// GetEstablishedAt returns the value of EstablishedAt.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetEstablishedAt() *NilString {
	return s.EstablishedAt
}

// GetYearlySales returns the value of YearlySales.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetYearlySales() *NilFloat64 {
	return s.YearlySales
}

// GetBusinessDetails returns the value of BusinessDetails.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetBusinessDetails() *NilString {
	return s.BusinessDetails
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyPostalCode() *NilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyPrefecture() *NilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyPrefectureKana() *NilString {
	return s.CompanyPrefectureKana
}

// GetCompanyAddressMunicipality returns the value of CompanyAddressMunicipality.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressMunicipality() *NilString {
	return s.CompanyAddressMunicipality
}

// GetCompanyAddressMunicipalityKana returns the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressMunicipalityKana() *NilString {
	return s.CompanyAddressMunicipalityKana
}

// GetCompanyAddressSection returns the value of CompanyAddressSection.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressSection() *NilString {
	return s.CompanyAddressSection
}

// GetCompanyAddressSectionKana returns the value of CompanyAddressSectionKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressSectionKana() *NilString {
	return s.CompanyAddressSectionKana
}

// GetCompanyAddressChrome returns the value of CompanyAddressChrome.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressChrome() *NilString {
	return s.CompanyAddressChrome
}

// GetCompanyAddressChromeKana returns the value of CompanyAddressChromeKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressChromeKana() *NilString {
	return s.CompanyAddressChromeKana
}

// GetCompanyAddressBuildingName returns the value of CompanyAddressBuildingName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressBuildingName() *NilString {
	return s.CompanyAddressBuildingName
}

// GetCompanyAddressBuildingNameKana returns the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyAddressBuildingNameKana() *NilString {
	return s.CompanyAddressBuildingNameKana
}

// GetCompanyTel returns the value of CompanyTel.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetCompanyTel() *NilString {
	return s.CompanyTel
}

// GetRepresentativeLastName returns the value of RepresentativeLastName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeLastName() *NilString {
	return s.RepresentativeLastName
}

// GetRepresentativeLastNameKana returns the value of RepresentativeLastNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeLastNameKana() *NilString {
	return s.RepresentativeLastNameKana
}

// GetRepresentativeFirstName returns the value of RepresentativeFirstName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeFirstName() *NilString {
	return s.RepresentativeFirstName
}

// GetRepresentativeFirstNameKana returns the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeFirstNameKana() *NilString {
	return s.RepresentativeFirstNameKana
}

// GetRepresentativeBirthday returns the value of RepresentativeBirthday.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeBirthday() *NilString {
	return s.RepresentativeBirthday
}

// GetRepresentativeGender returns the value of RepresentativeGender.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeGender() *NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender {
	return s.RepresentativeGender
}

// GetRepresentativePostalCode returns the value of RepresentativePostalCode.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativePostalCode() *NilString {
	return s.RepresentativePostalCode
}

// GetRepresentativePrefecture returns the value of RepresentativePrefecture.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativePrefecture() *NilString {
	return s.RepresentativePrefecture
}

// GetRepresentativePrefectureKana returns the value of RepresentativePrefectureKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativePrefectureKana() *NilString {
	return s.RepresentativePrefectureKana
}

// GetRepresentativeAddressMunicipality returns the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeAddressMunicipality() *NilString {
	return s.RepresentativeAddressMunicipality
}

// GetRepresentativeAddressMunicipalityKana returns the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeAddressMunicipalityKana() *NilString {
	return s.RepresentativeAddressMunicipalityKana
}

// GetRepresentativeAddressSection returns the value of RepresentativeAddressSection.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeAddressSection() *NilString {
	return s.RepresentativeAddressSection
}

// GetRepresentativeAddressSectionKana returns the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeAddressSectionKana() *NilString {
	return s.RepresentativeAddressSectionKana
}

// GetRepresentativeAddressChrome returns the value of RepresentativeAddressChrome.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeAddressChrome() *NilString {
	return s.RepresentativeAddressChrome
}

// GetRepresentativeAddressChromeKana returns the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeAddressChromeKana() *NilString {
	return s.RepresentativeAddressChromeKana
}

// GetRepresentativeTel returns the value of RepresentativeTel.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetRepresentativeTel() *NilString {
	return s.RepresentativeTel
}

// GetStaff1LastName returns the value of Staff1LastName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff1LastName() *NilString {
	return s.Staff1LastName
}

// GetStaff1LastNameKana returns the value of Staff1LastNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff1LastNameKana() *NilString {
	return s.Staff1LastNameKana
}

// GetStaff1FirstName returns the value of Staff1FirstName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff1FirstName() *NilString {
	return s.Staff1FirstName
}

// GetStaff1FirstNameKana returns the value of Staff1FirstNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff1FirstNameKana() *NilString {
	return s.Staff1FirstNameKana
}

// GetStaff1Tel returns the value of Staff1Tel.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff1Tel() *NilString {
	return s.Staff1Tel
}

// GetStaff1Mail returns the value of Staff1Mail.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff1Mail() *NilString {
	return s.Staff1Mail
}

// GetStaff2LastName returns the value of Staff2LastName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff2LastName() *NilString {
	return s.Staff2LastName
}

// GetStaff2LastNameKana returns the value of Staff2LastNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff2LastNameKana() *NilString {
	return s.Staff2LastNameKana
}

// GetStaff2FirstName returns the value of Staff2FirstName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff2FirstName() *NilString {
	return s.Staff2FirstName
}

// GetStaff2FirstNameKana returns the value of Staff2FirstNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff2FirstNameKana() *NilString {
	return s.Staff2FirstNameKana
}

// GetStaff2Tel returns the value of Staff2Tel.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff2Tel() *NilString {
	return s.Staff2Tel
}

// GetStaff2Mail returns the value of Staff2Mail.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetStaff2Mail() *NilString {
	return s.Staff2Mail
}

// GetUsedOnApp returns the value of UsedOnApp.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetUsedOnApp() *NilBool {
	return s.UsedOnApp
}

// GetUsedOnWeb returns the value of UsedOnWeb.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetUsedOnWeb() *NilBool {
	return s.UsedOnWeb
}

// GetUsedOnOther returns the value of UsedOnOther.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetUsedOnOther() OptNilBool {
	return s.UsedOnOther
}

// GetSiteExisting returns the value of SiteExisting.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetSiteExisting() OptExaminationInfoUpdatingRequestContractDetailSiteExisting {
	return s.SiteExisting
}

// GetURL returns the value of URL.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetURL() *NilString {
	return s.URL
}

// GetSiteCredential returns the value of SiteCredential.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetSiteCredential() *NilString {
	return s.SiteCredential
}

// GetShopName returns the value of ShopName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetShopName() OptString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetShopNameKana() OptString {
	return s.ShopNameKana
}

// GetShopNameEn returns the value of ShopNameEn.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetShopNameEn() OptString {
	return s.ShopNameEn
}

// GetPlatformName returns the value of PlatformName.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSupportTel returns the value of SupportTel.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetSupportTel() *NilString {
	return s.SupportTel
}

// GetSupportMail returns the value of SupportMail.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetSupportMail() *NilString {
	return s.SupportMail
}

// GetProvidesProduct returns the value of ProvidesProduct.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetProvidesProduct() *NilBool {
	return s.ProvidesProduct
}

// GetProvidesService returns the value of ProvidesService.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetProvidesService() *NilBool {
	return s.ProvidesService
}

// GetProvidesDigitalContent returns the value of ProvidesDigitalContent.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetProvidesDigitalContent() *NilBool {
	return s.ProvidesDigitalContent
}

// GetPrepaid returns the value of Prepaid.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetPrepaid() *NilBool {
	return s.Prepaid
}

// GetUnitPrice returns the value of UnitPrice.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetUnitPrice() *NilFloat64 {
	return s.UnitPrice
}

// GetContentCategoryMasterID returns the value of ContentCategoryMasterID.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetContentCategoryMasterID() OptNilFloat64 {
	return s.ContentCategoryMasterID
}

// GetContentDescription returns the value of ContentDescription.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetContentDescription() *NilString {
	return s.ContentDescription
}

// GetExpiretionDateOfPoint returns the value of ExpiretionDateOfPoint.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetExpiretionDateOfPoint() *NilString {
	return s.ExpiretionDateOfPoint
}

// GetUsageOfPoint returns the value of UsageOfPoint.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetUsageOfPoint() *NilString {
	return s.UsageOfPoint
}

// GetLostTrial returns the value of LostTrial.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetLostTrial() *NilBool {
	return s.LostTrial
}

// GetDealsInsecureContent returns the value of DealsInsecureContent.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetDealsInsecureContent() *NilBool {
	return s.DealsInsecureContent
}

// GetDealsLongApplyContent returns the value of DealsLongApplyContent.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetDealsLongApplyContent() *NilBool {
	return s.DealsLongApplyContent
}

// GetPayBy returns the value of PayBy.
func (s *ExaminationInfoUpdatingRequestContractDetail) GetPayBy() OptExaminationInfoUpdatingRequestContractDetailPayBy {
	return s.PayBy
}

// SetCorporate sets the value of Corporate.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCorporate(val OptNilBool) {
	s.Corporate = val
}

// SetCorporateNumber sets the value of CorporateNumber.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCorporateNumber(val *NilString) {
	s.CorporateNumber = val
}

// SetCorporateName sets the value of CorporateName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCorporateName(val OptString) {
	s.CorporateName = val
}

// SetCorporateNameKana sets the value of CorporateNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCorporateNameKana(val OptString) {
	s.CorporateNameKana = val
}

// SetHp sets the value of Hp.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetHp(val *NilString) {
	s.Hp = val
}

// SetCapital sets the value of Capital.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCapital(val *NilFloat64) {
	s.Capital = val
}

// SetEstablishedAt sets the value of EstablishedAt.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetEstablishedAt(val *NilString) {
	s.EstablishedAt = val
}

// SetYearlySales sets the value of YearlySales.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetYearlySales(val *NilFloat64) {
	s.YearlySales = val
}

// SetBusinessDetails sets the value of BusinessDetails.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetBusinessDetails(val *NilString) {
	s.BusinessDetails = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyPostalCode(val *NilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyPrefecture(val *NilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyPrefectureKana(val *NilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyAddressMunicipality sets the value of CompanyAddressMunicipality.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressMunicipality(val *NilString) {
	s.CompanyAddressMunicipality = val
}

// SetCompanyAddressMunicipalityKana sets the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressMunicipalityKana(val *NilString) {
	s.CompanyAddressMunicipalityKana = val
}

// SetCompanyAddressSection sets the value of CompanyAddressSection.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressSection(val *NilString) {
	s.CompanyAddressSection = val
}

// SetCompanyAddressSectionKana sets the value of CompanyAddressSectionKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressSectionKana(val *NilString) {
	s.CompanyAddressSectionKana = val
}

// SetCompanyAddressChrome sets the value of CompanyAddressChrome.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressChrome(val *NilString) {
	s.CompanyAddressChrome = val
}

// SetCompanyAddressChromeKana sets the value of CompanyAddressChromeKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressChromeKana(val *NilString) {
	s.CompanyAddressChromeKana = val
}

// SetCompanyAddressBuildingName sets the value of CompanyAddressBuildingName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressBuildingName(val *NilString) {
	s.CompanyAddressBuildingName = val
}

// SetCompanyAddressBuildingNameKana sets the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyAddressBuildingNameKana(val *NilString) {
	s.CompanyAddressBuildingNameKana = val
}

// SetCompanyTel sets the value of CompanyTel.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetCompanyTel(val *NilString) {
	s.CompanyTel = val
}

// SetRepresentativeLastName sets the value of RepresentativeLastName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeLastName(val *NilString) {
	s.RepresentativeLastName = val
}

// SetRepresentativeLastNameKana sets the value of RepresentativeLastNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeLastNameKana(val *NilString) {
	s.RepresentativeLastNameKana = val
}

// SetRepresentativeFirstName sets the value of RepresentativeFirstName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeFirstName(val *NilString) {
	s.RepresentativeFirstName = val
}

// SetRepresentativeFirstNameKana sets the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeFirstNameKana(val *NilString) {
	s.RepresentativeFirstNameKana = val
}

// SetRepresentativeBirthday sets the value of RepresentativeBirthday.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeBirthday(val *NilString) {
	s.RepresentativeBirthday = val
}

// SetRepresentativeGender sets the value of RepresentativeGender.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeGender(val *NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) {
	s.RepresentativeGender = val
}

// SetRepresentativePostalCode sets the value of RepresentativePostalCode.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativePostalCode(val *NilString) {
	s.RepresentativePostalCode = val
}

// SetRepresentativePrefecture sets the value of RepresentativePrefecture.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativePrefecture(val *NilString) {
	s.RepresentativePrefecture = val
}

// SetRepresentativePrefectureKana sets the value of RepresentativePrefectureKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativePrefectureKana(val *NilString) {
	s.RepresentativePrefectureKana = val
}

// SetRepresentativeAddressMunicipality sets the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeAddressMunicipality(val *NilString) {
	s.RepresentativeAddressMunicipality = val
}

// SetRepresentativeAddressMunicipalityKana sets the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeAddressMunicipalityKana(val *NilString) {
	s.RepresentativeAddressMunicipalityKana = val
}

// SetRepresentativeAddressSection sets the value of RepresentativeAddressSection.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeAddressSection(val *NilString) {
	s.RepresentativeAddressSection = val
}

// SetRepresentativeAddressSectionKana sets the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeAddressSectionKana(val *NilString) {
	s.RepresentativeAddressSectionKana = val
}

// SetRepresentativeAddressChrome sets the value of RepresentativeAddressChrome.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeAddressChrome(val *NilString) {
	s.RepresentativeAddressChrome = val
}

// SetRepresentativeAddressChromeKana sets the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeAddressChromeKana(val *NilString) {
	s.RepresentativeAddressChromeKana = val
}

// SetRepresentativeTel sets the value of RepresentativeTel.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetRepresentativeTel(val *NilString) {
	s.RepresentativeTel = val
}

// SetStaff1LastName sets the value of Staff1LastName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff1LastName(val *NilString) {
	s.Staff1LastName = val
}

// SetStaff1LastNameKana sets the value of Staff1LastNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff1LastNameKana(val *NilString) {
	s.Staff1LastNameKana = val
}

// SetStaff1FirstName sets the value of Staff1FirstName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff1FirstName(val *NilString) {
	s.Staff1FirstName = val
}

// SetStaff1FirstNameKana sets the value of Staff1FirstNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff1FirstNameKana(val *NilString) {
	s.Staff1FirstNameKana = val
}

// SetStaff1Tel sets the value of Staff1Tel.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff1Tel(val *NilString) {
	s.Staff1Tel = val
}

// SetStaff1Mail sets the value of Staff1Mail.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff1Mail(val *NilString) {
	s.Staff1Mail = val
}

// SetStaff2LastName sets the value of Staff2LastName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff2LastName(val *NilString) {
	s.Staff2LastName = val
}

// SetStaff2LastNameKana sets the value of Staff2LastNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff2LastNameKana(val *NilString) {
	s.Staff2LastNameKana = val
}

// SetStaff2FirstName sets the value of Staff2FirstName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff2FirstName(val *NilString) {
	s.Staff2FirstName = val
}

// SetStaff2FirstNameKana sets the value of Staff2FirstNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff2FirstNameKana(val *NilString) {
	s.Staff2FirstNameKana = val
}

// SetStaff2Tel sets the value of Staff2Tel.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff2Tel(val *NilString) {
	s.Staff2Tel = val
}

// SetStaff2Mail sets the value of Staff2Mail.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetStaff2Mail(val *NilString) {
	s.Staff2Mail = val
}

// SetUsedOnApp sets the value of UsedOnApp.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetUsedOnApp(val *NilBool) {
	s.UsedOnApp = val
}

// SetUsedOnWeb sets the value of UsedOnWeb.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetUsedOnWeb(val *NilBool) {
	s.UsedOnWeb = val
}

// SetUsedOnOther sets the value of UsedOnOther.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetUsedOnOther(val OptNilBool) {
	s.UsedOnOther = val
}

// SetSiteExisting sets the value of SiteExisting.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetSiteExisting(val OptExaminationInfoUpdatingRequestContractDetailSiteExisting) {
	s.SiteExisting = val
}

// SetURL sets the value of URL.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetURL(val *NilString) {
	s.URL = val
}

// SetSiteCredential sets the value of SiteCredential.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetSiteCredential(val *NilString) {
	s.SiteCredential = val
}

// SetShopName sets the value of ShopName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetShopName(val OptString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetShopNameKana(val OptString) {
	s.ShopNameKana = val
}

// SetShopNameEn sets the value of ShopNameEn.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetShopNameEn(val OptString) {
	s.ShopNameEn = val
}

// SetPlatformName sets the value of PlatformName.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSupportTel sets the value of SupportTel.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetSupportTel(val *NilString) {
	s.SupportTel = val
}

// SetSupportMail sets the value of SupportMail.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetSupportMail(val *NilString) {
	s.SupportMail = val
}

// SetProvidesProduct sets the value of ProvidesProduct.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetProvidesProduct(val *NilBool) {
	s.ProvidesProduct = val
}

// SetProvidesService sets the value of ProvidesService.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetProvidesService(val *NilBool) {
	s.ProvidesService = val
}

// SetProvidesDigitalContent sets the value of ProvidesDigitalContent.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetProvidesDigitalContent(val *NilBool) {
	s.ProvidesDigitalContent = val
}

// SetPrepaid sets the value of Prepaid.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetPrepaid(val *NilBool) {
	s.Prepaid = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetUnitPrice(val *NilFloat64) {
	s.UnitPrice = val
}

// SetContentCategoryMasterID sets the value of ContentCategoryMasterID.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetContentCategoryMasterID(val OptNilFloat64) {
	s.ContentCategoryMasterID = val
}

// SetContentDescription sets the value of ContentDescription.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetContentDescription(val *NilString) {
	s.ContentDescription = val
}

// SetExpiretionDateOfPoint sets the value of ExpiretionDateOfPoint.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetExpiretionDateOfPoint(val *NilString) {
	s.ExpiretionDateOfPoint = val
}

// SetUsageOfPoint sets the value of UsageOfPoint.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetUsageOfPoint(val *NilString) {
	s.UsageOfPoint = val
}

// SetLostTrial sets the value of LostTrial.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetLostTrial(val *NilBool) {
	s.LostTrial = val
}

// SetDealsInsecureContent sets the value of DealsInsecureContent.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetDealsInsecureContent(val *NilBool) {
	s.DealsInsecureContent = val
}

// SetDealsLongApplyContent sets the value of DealsLongApplyContent.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetDealsLongApplyContent(val *NilBool) {
	s.DealsLongApplyContent = val
}

// SetPayBy sets the value of PayBy.
func (s *ExaminationInfoUpdatingRequestContractDetail) SetPayBy(val OptExaminationInfoUpdatingRequestContractDetailPayBy) {
	s.PayBy = val
}

// 支払い方法\
// \
// キャンセル金額の超過などによりfincodeへの支払が発生した場合の支払い方法
// - `0`: クレジットカード
// - `1`: 銀行口座.
type ExaminationInfoUpdatingRequestContractDetailPayBy float64

const (
	ExaminationInfoUpdatingRequestContractDetailPayBy0 ExaminationInfoUpdatingRequestContractDetailPayBy = 0
	ExaminationInfoUpdatingRequestContractDetailPayBy1 ExaminationInfoUpdatingRequestContractDetailPayBy = 1
)

// AllValues returns all ExaminationInfoUpdatingRequestContractDetailPayBy values.
func (ExaminationInfoUpdatingRequestContractDetailPayBy) AllValues() []ExaminationInfoUpdatingRequestContractDetailPayBy {
	return []ExaminationInfoUpdatingRequestContractDetailPayBy{
		ExaminationInfoUpdatingRequestContractDetailPayBy0,
		ExaminationInfoUpdatingRequestContractDetailPayBy1,
	}
}

// 代表者 性別
// - `0`: 男性
// - `1`: 女性.
type ExaminationInfoUpdatingRequestContractDetailRepresentativeGender int

const (
	ExaminationInfoUpdatingRequestContractDetailRepresentativeGender0 ExaminationInfoUpdatingRequestContractDetailRepresentativeGender = 0
	ExaminationInfoUpdatingRequestContractDetailRepresentativeGender1 ExaminationInfoUpdatingRequestContractDetailRepresentativeGender = 1
)

// AllValues returns all ExaminationInfoUpdatingRequestContractDetailRepresentativeGender values.
func (ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) AllValues() []ExaminationInfoUpdatingRequestContractDetailRepresentativeGender {
	return []ExaminationInfoUpdatingRequestContractDetailRepresentativeGender{
		ExaminationInfoUpdatingRequestContractDetailRepresentativeGender0,
		ExaminationInfoUpdatingRequestContractDetailRepresentativeGender1,
	}
}

// Webサイトの公開状況\
// \
// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
// - `0`: fincode審査チームがサイトを閲覧可能
// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
// - `2`: fincode審査チームがサイトを閲覧不可能.
type ExaminationInfoUpdatingRequestContractDetailSiteExisting float64

const (
	ExaminationInfoUpdatingRequestContractDetailSiteExisting0 ExaminationInfoUpdatingRequestContractDetailSiteExisting = 0
	ExaminationInfoUpdatingRequestContractDetailSiteExisting1 ExaminationInfoUpdatingRequestContractDetailSiteExisting = 1
	ExaminationInfoUpdatingRequestContractDetailSiteExisting2 ExaminationInfoUpdatingRequestContractDetailSiteExisting = 2
)

// AllValues returns all ExaminationInfoUpdatingRequestContractDetailSiteExisting values.
func (ExaminationInfoUpdatingRequestContractDetailSiteExisting) AllValues() []ExaminationInfoUpdatingRequestContractDetailSiteExisting {
	return []ExaminationInfoUpdatingRequestContractDetailSiteExisting{
		ExaminationInfoUpdatingRequestContractDetailSiteExisting0,
		ExaminationInfoUpdatingRequestContractDetailSiteExisting1,
		ExaminationInfoUpdatingRequestContractDetailSiteExisting2,
	}
}

// 入金サイクルマスタID\
// 入金サイクルについては[Docs > 精算管理 >
// クレジットカード決済の入金サイクル](https://docs.fincode.
// jp/business_management/deposit)を参照できます。
// - `1`: スタンダード（月1回, 月末締め翌月末入金）
// - `2`: スタンダード（月2回, 15日&月末締め15日後入金）.
type ExaminationInfoUpdatingRequestDepositCycleMasterID int

const (
	ExaminationInfoUpdatingRequestDepositCycleMasterID1 ExaminationInfoUpdatingRequestDepositCycleMasterID = 1
	ExaminationInfoUpdatingRequestDepositCycleMasterID2 ExaminationInfoUpdatingRequestDepositCycleMasterID = 2
)

// AllValues returns all ExaminationInfoUpdatingRequestDepositCycleMasterID values.
func (ExaminationInfoUpdatingRequestDepositCycleMasterID) AllValues() []ExaminationInfoUpdatingRequestDepositCycleMasterID {
	return []ExaminationInfoUpdatingRequestDepositCycleMasterID{
		ExaminationInfoUpdatingRequestDepositCycleMasterID1,
		ExaminationInfoUpdatingRequestDepositCycleMasterID2,
	}
}

// Merged schema.
type ExaminationInfoUpdatingRequestShopItemDetailItem struct {
	// 商材1 名称.
	Content1Name OptString `json:"content1_name"`
	// 商材1 説明.
	Content1Description OptString `json:"content1_description"`
	// 商材1 単価.
	Content1UnitPrice OptInt `json:"content1_unit_price"`
	// 商材2 名称.
	Content2Name OptString `json:"content2_name"`
	// 商材2 説明.
	Content2Description OptString `json:"content2_description"`
	// 商材2 単価.
	Content2UnitPrice OptInt `json:"content2_unit_price"`
	// 商材3 名称.
	Content3Name OptString `json:"content3_name"`
	// 商材3 説明.
	Content3Description OptString `json:"content3_description"`
	// 商材3 単価.
	Content3UnitPrice OptInt `json:"content3_unit_price"`
	// 商品情報ID.
	ID OptNilString `json:"id"`
	// 取扱商材 品目種別
	// - `0`: 物品販売
	// - `1`: サービス
	// - `2`: デジタルコンテンツ.
	Type OptExaminationInfoUpdatingRequestShopItemDetailItemType `json:"type"`
}

// GetContent1Name returns the value of Content1Name.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent1Name() OptString {
	return s.Content1Name
}

// GetContent1Description returns the value of Content1Description.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent1Description() OptString {
	return s.Content1Description
}

// GetContent1UnitPrice returns the value of Content1UnitPrice.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent1UnitPrice() OptInt {
	return s.Content1UnitPrice
}

// GetContent2Name returns the value of Content2Name.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent2Name() OptString {
	return s.Content2Name
}

// GetContent2Description returns the value of Content2Description.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent2Description() OptString {
	return s.Content2Description
}

// GetContent2UnitPrice returns the value of Content2UnitPrice.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent2UnitPrice() OptInt {
	return s.Content2UnitPrice
}

// GetContent3Name returns the value of Content3Name.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent3Name() OptString {
	return s.Content3Name
}

// GetContent3Description returns the value of Content3Description.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent3Description() OptString {
	return s.Content3Description
}

// GetContent3UnitPrice returns the value of Content3UnitPrice.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetContent3UnitPrice() OptInt {
	return s.Content3UnitPrice
}

// GetID returns the value of ID.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetID() OptNilString {
	return s.ID
}

// GetType returns the value of Type.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) GetType() OptExaminationInfoUpdatingRequestShopItemDetailItemType {
	return s.Type
}

// SetContent1Name sets the value of Content1Name.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent1Name(val OptString) {
	s.Content1Name = val
}

// SetContent1Description sets the value of Content1Description.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent1Description(val OptString) {
	s.Content1Description = val
}

// SetContent1UnitPrice sets the value of Content1UnitPrice.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent1UnitPrice(val OptInt) {
	s.Content1UnitPrice = val
}

// SetContent2Name sets the value of Content2Name.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent2Name(val OptString) {
	s.Content2Name = val
}

// SetContent2Description sets the value of Content2Description.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent2Description(val OptString) {
	s.Content2Description = val
}

// SetContent2UnitPrice sets the value of Content2UnitPrice.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent2UnitPrice(val OptInt) {
	s.Content2UnitPrice = val
}

// SetContent3Name sets the value of Content3Name.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent3Name(val OptString) {
	s.Content3Name = val
}

// SetContent3Description sets the value of Content3Description.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent3Description(val OptString) {
	s.Content3Description = val
}

// SetContent3UnitPrice sets the value of Content3UnitPrice.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetContent3UnitPrice(val OptInt) {
	s.Content3UnitPrice = val
}

// SetID sets the value of ID.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetID(val OptNilString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) SetType(val OptExaminationInfoUpdatingRequestShopItemDetailItemType) {
	s.Type = val
}

// 取扱商材 品目種別
// - `0`: 物品販売
// - `1`: サービス
// - `2`: デジタルコンテンツ.
type ExaminationInfoUpdatingRequestShopItemDetailItemType float64

const (
	ExaminationInfoUpdatingRequestShopItemDetailItemType0 ExaminationInfoUpdatingRequestShopItemDetailItemType = 0
	ExaminationInfoUpdatingRequestShopItemDetailItemType1 ExaminationInfoUpdatingRequestShopItemDetailItemType = 1
	ExaminationInfoUpdatingRequestShopItemDetailItemType2 ExaminationInfoUpdatingRequestShopItemDetailItemType = 2
)

// AllValues returns all ExaminationInfoUpdatingRequestShopItemDetailItemType values.
func (ExaminationInfoUpdatingRequestShopItemDetailItemType) AllValues() []ExaminationInfoUpdatingRequestShopItemDetailItemType {
	return []ExaminationInfoUpdatingRequestShopItemDetailItemType{
		ExaminationInfoUpdatingRequestShopItemDetailItemType0,
		ExaminationInfoUpdatingRequestShopItemDetailItemType1,
		ExaminationInfoUpdatingRequestShopItemDetailItemType2,
	}
}

// Ref: #/components/schemas/ExaminationInfo.Updating.Response
type ExaminationInfoUpdatingResponse struct {
	// ショップID（テナント）.
	ShopID               OptString                                              `json:"shop_id"`
	PlatformID           OptString                                              `json:"platform_id"`
	ShopType             OptNilExaminationInfoUpdatingResponseShopType          `json:"shop_type"`
	StatusCode           OptExaminationInfoUpdatingResponseStatusCode           `json:"status_code"`
	DepositCycleMasterID OptExaminationInfoUpdatingResponseDepositCycleMasterID `json:"deposit_cycle_master_id"`
	// 契約情報\
	// \
	// fincodeに登録されているショップ運営事業者の契約情報の詳細.
	ContractDetail OptExaminationInfoUpdatingResponseContractDetail `json:"contract_detail"`
	// ショップ 取扱商材情報\
	// \
	// fincodeに登録されているショップの取扱商材情報.
	ShopItemDetail []ExaminationInfoUpdatingResponseShopItemDetailItem `json:"shop_item_detail"`
	// 銀行口座情報\
	// \
	// fincode上での売上入金を受け取るための銀行口座情報.
	ContractBankAccount OptExaminationInfoUpdatingResponseContractBankAccount `json:"contract_bank_account"`
	ContractInputStatus OptExaminationInfoUpdatingResponseContractInputStatus `json:"contract_input_status"`
}

// GetShopID returns the value of ShopID.
func (s *ExaminationInfoUpdatingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPlatformID returns the value of PlatformID.
func (s *ExaminationInfoUpdatingResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetShopType returns the value of ShopType.
func (s *ExaminationInfoUpdatingResponse) GetShopType() OptNilExaminationInfoUpdatingResponseShopType {
	return s.ShopType
}

// GetStatusCode returns the value of StatusCode.
func (s *ExaminationInfoUpdatingResponse) GetStatusCode() OptExaminationInfoUpdatingResponseStatusCode {
	return s.StatusCode
}

// GetDepositCycleMasterID returns the value of DepositCycleMasterID.
func (s *ExaminationInfoUpdatingResponse) GetDepositCycleMasterID() OptExaminationInfoUpdatingResponseDepositCycleMasterID {
	return s.DepositCycleMasterID
}

// GetContractDetail returns the value of ContractDetail.
func (s *ExaminationInfoUpdatingResponse) GetContractDetail() OptExaminationInfoUpdatingResponseContractDetail {
	return s.ContractDetail
}

// GetShopItemDetail returns the value of ShopItemDetail.
func (s *ExaminationInfoUpdatingResponse) GetShopItemDetail() []ExaminationInfoUpdatingResponseShopItemDetailItem {
	return s.ShopItemDetail
}

// GetContractBankAccount returns the value of ContractBankAccount.
func (s *ExaminationInfoUpdatingResponse) GetContractBankAccount() OptExaminationInfoUpdatingResponseContractBankAccount {
	return s.ContractBankAccount
}

// GetContractInputStatus returns the value of ContractInputStatus.
func (s *ExaminationInfoUpdatingResponse) GetContractInputStatus() OptExaminationInfoUpdatingResponseContractInputStatus {
	return s.ContractInputStatus
}

// SetShopID sets the value of ShopID.
func (s *ExaminationInfoUpdatingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPlatformID sets the value of PlatformID.
func (s *ExaminationInfoUpdatingResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetShopType sets the value of ShopType.
func (s *ExaminationInfoUpdatingResponse) SetShopType(val OptNilExaminationInfoUpdatingResponseShopType) {
	s.ShopType = val
}

// SetStatusCode sets the value of StatusCode.
func (s *ExaminationInfoUpdatingResponse) SetStatusCode(val OptExaminationInfoUpdatingResponseStatusCode) {
	s.StatusCode = val
}

// SetDepositCycleMasterID sets the value of DepositCycleMasterID.
func (s *ExaminationInfoUpdatingResponse) SetDepositCycleMasterID(val OptExaminationInfoUpdatingResponseDepositCycleMasterID) {
	s.DepositCycleMasterID = val
}

// SetContractDetail sets the value of ContractDetail.
func (s *ExaminationInfoUpdatingResponse) SetContractDetail(val OptExaminationInfoUpdatingResponseContractDetail) {
	s.ContractDetail = val
}

// SetShopItemDetail sets the value of ShopItemDetail.
func (s *ExaminationInfoUpdatingResponse) SetShopItemDetail(val []ExaminationInfoUpdatingResponseShopItemDetailItem) {
	s.ShopItemDetail = val
}

// SetContractBankAccount sets the value of ContractBankAccount.
func (s *ExaminationInfoUpdatingResponse) SetContractBankAccount(val OptExaminationInfoUpdatingResponseContractBankAccount) {
	s.ContractBankAccount = val
}

// SetContractInputStatus sets the value of ContractInputStatus.
func (s *ExaminationInfoUpdatingResponse) SetContractInputStatus(val OptExaminationInfoUpdatingResponseContractInputStatus) {
	s.ContractInputStatus = val
}

func (*ExaminationInfoUpdatingResponse) updateTenantExaminationInfoRes() {}

type ExaminationInfoUpdatingResponseContractBankAccount struct {
	// 銀行名.
	BankName OptString `json:"bank_name"`
	// 銀行名（カナ）.
	BankNameKana OptString `json:"bank_name_kana"`
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode OptString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 支店名（カナ）.
	BranchNameKana OptString `json:"branch_name_kana"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind OptExaminationInfoUpdatingResponseContractBankAccountAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber OptString `json:"account_number"`
	// 口座名義（カタカナ）.
	AccountName OptString `json:"account_name"`
}

// GetBankName returns the value of BankName.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetBankName() OptString {
	return s.BankName
}

// GetBankNameKana returns the value of BankNameKana.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetBankNameKana() OptString {
	return s.BankNameKana
}

// GetBankCode returns the value of BankCode.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetBranchName() OptString {
	return s.BranchName
}

// GetBranchNameKana returns the value of BranchNameKana.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetBranchNameKana() OptString {
	return s.BranchNameKana
}

// GetAccountKind returns the value of AccountKind.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetAccountKind() OptExaminationInfoUpdatingResponseContractBankAccountAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) GetAccountName() OptString {
	return s.AccountName
}

// SetBankName sets the value of BankName.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetBankName(val OptString) {
	s.BankName = val
}

// SetBankNameKana sets the value of BankNameKana.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetBankNameKana(val OptString) {
	s.BankNameKana = val
}

// SetBankCode sets the value of BankCode.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetBranchNameKana sets the value of BranchNameKana.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetBranchNameKana(val OptString) {
	s.BranchNameKana = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetAccountKind(val OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) SetAccountName(val OptString) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ExaminationInfoUpdatingResponseContractBankAccountAccountKind float64

const (
	ExaminationInfoUpdatingResponseContractBankAccountAccountKind0 ExaminationInfoUpdatingResponseContractBankAccountAccountKind = 0
	ExaminationInfoUpdatingResponseContractBankAccountAccountKind1 ExaminationInfoUpdatingResponseContractBankAccountAccountKind = 1
)

// AllValues returns all ExaminationInfoUpdatingResponseContractBankAccountAccountKind values.
func (ExaminationInfoUpdatingResponseContractBankAccountAccountKind) AllValues() []ExaminationInfoUpdatingResponseContractBankAccountAccountKind {
	return []ExaminationInfoUpdatingResponseContractBankAccountAccountKind{
		ExaminationInfoUpdatingResponseContractBankAccountAccountKind0,
		ExaminationInfoUpdatingResponseContractBankAccountAccountKind1,
	}
}

// Merged schema.
type ExaminationInfoUpdatingResponseContractDetail struct {
	// 事業形態
	// - `true`: 法人
	// - `false`: 個人事業主.
	Corporate                             OptNilBool                                                            `json:"corporate"`
	CorporateNumber                       *NilString                                                            `json:"corporate_number"`
	CorporateName                         OptString                                                             `json:"corporate_name"`
	CorporateNameKana                     OptString                                                             `json:"corporate_name_kana"`
	Hp                                    *NilString                                                            `json:"hp"`
	Capital                               *NilFloat64                                                           `json:"capital"`
	EstablishedAt                         *NilString                                                            `json:"established_at"`
	YearlySales                           *NilFloat64                                                           `json:"yearly_sales"`
	BusinessDetails                       *NilString                                                            `json:"business_details"`
	CompanyPostalCode                     *NilString                                                            `json:"company_postal_code"`
	CompanyPrefecture                     *NilString                                                            `json:"company_prefecture"`
	CompanyPrefectureKana                 *NilString                                                            `json:"company_prefecture_kana"`
	CompanyAddressMunicipality            *NilString                                                            `json:"company_address_municipality"`
	CompanyAddressMunicipalityKana        *NilString                                                            `json:"company_address_municipality_kana"`
	CompanyAddressSection                 *NilString                                                            `json:"company_address_section"`
	CompanyAddressSectionKana             *NilString                                                            `json:"company_address_section_kana"`
	CompanyAddressChrome                  *NilString                                                            `json:"company_address_chrome"`
	CompanyAddressChromeKana              *NilString                                                            `json:"company_address_chrome_kana"`
	CompanyAddressBuildingName            *NilString                                                            `json:"company_address_building_name"`
	CompanyAddressBuildingNameKana        *NilString                                                            `json:"company_address_building_name_kana"`
	CompanyTel                            *NilString                                                            `json:"company_tel"`
	RepresentativeLastName                *NilString                                                            `json:"representative_last_name"`
	RepresentativeLastNameKana            *NilString                                                            `json:"representative_last_name_kana"`
	RepresentativeFirstName               *NilString                                                            `json:"representative_first_name"`
	RepresentativeFirstNameKana           *NilString                                                            `json:"representative_first_name_kana"`
	RepresentativeBirthday                *NilString                                                            `json:"representative_birthday"`
	RepresentativeGender                  *NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender `json:"representative_gender"`
	RepresentativePostalCode              *NilString                                                            `json:"representative_postal_code"`
	RepresentativePrefecture              *NilString                                                            `json:"representative_prefecture"`
	RepresentativePrefectureKana          *NilString                                                            `json:"representative_prefecture_kana"`
	RepresentativeAddressMunicipality     *NilString                                                            `json:"representative_address_municipality"`
	RepresentativeAddressMunicipalityKana *NilString                                                            `json:"representative_address_municipality_kana"`
	RepresentativeAddressSection          *NilString                                                            `json:"representative_address_section"`
	RepresentativeAddressSectionKana      *NilString                                                            `json:"representative_address_section_kana"`
	RepresentativeAddressChrome           *NilString                                                            `json:"representative_address_chrome"`
	RepresentativeAddressChromeKana       *NilString                                                            `json:"representative_address_chrome_kana"`
	RepresentativeTel                     *NilString                                                            `json:"representative_tel"`
	Staff1LastName                        *NilString                                                            `json:"staff1_last_name"`
	Staff1LastNameKana                    *NilString                                                            `json:"staff1_last_name_kana"`
	Staff1FirstName                       *NilString                                                            `json:"staff1_first_name"`
	Staff1FirstNameKana                   *NilString                                                            `json:"staff1_first_name_kana"`
	Staff1Tel                             *NilString                                                            `json:"staff1_tel"`
	Staff1Mail                            *NilString                                                            `json:"staff1_mail"`
	Staff2LastName                        *NilString                                                            `json:"staff2_last_name"`
	Staff2LastNameKana                    *NilString                                                            `json:"staff2_last_name_kana"`
	Staff2FirstName                       *NilString                                                            `json:"staff2_first_name"`
	Staff2FirstNameKana                   *NilString                                                            `json:"staff2_first_name_kana"`
	Staff2Tel                             *NilString                                                            `json:"staff2_tel"`
	Staff2Mail                            *NilString                                                            `json:"staff2_mail"`
	UsedOnApp                             *NilBool                                                              `json:"used_on_app"`
	UsedOnWeb                             *NilBool                                                              `json:"used_on_web"`
	// その他の箇所での利用有無\
	// \
	// Webアプリケーションやネイティブアプリ上でない箇所で利用があるかどうか
	// - `true`: Webアプリ／ネイティブアプリでない箇所でfincodeを使用する.
	UsedOnOther OptNilBool `json:"used_on_other"`
	// Webサイトの公開状況\
	// \
	// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
	// - `0`: fincode審査チームがサイトを閲覧可能
	// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
	// - `2`: fincode審査チームがサイトを閲覧不可能.
	SiteExisting   OptExaminationInfoUpdatingResponseContractDetailSiteExisting `json:"site_existing"`
	URL            *NilString                                                   `json:"url"`
	SiteCredential *NilString                                                   `json:"site_credential"`
	ShopName       OptString                                                    `json:"shop_name"`
	ShopNameKana   OptString                                                    `json:"shop_name_kana"`
	ShopNameEn     OptString                                                    `json:"shop_name_en"`
	// プラットフォーム名.
	PlatformName           OptNilString `json:"platform_name"`
	SupportTel             *NilString   `json:"support_tel"`
	SupportMail            *NilString   `json:"support_mail"`
	ProvidesProduct        *NilBool     `json:"provides_product"`
	ProvidesService        *NilBool     `json:"provides_service"`
	ProvidesDigitalContent *NilBool     `json:"provides_digital_content"`
	Prepaid                *NilBool     `json:"prepaid"`
	UnitPrice              *NilFloat64  `json:"unit_price"`
	// 取扱商材カテゴリID.
	ContentCategoryMasterID OptNilFloat64                                         `json:"content_category_master_id"`
	ContentDescription      *NilString                                            `json:"content_description"`
	ExpiretionDateOfPoint   *NilString                                            `json:"expiretion_date_of_point"`
	UsageOfPoint            *NilString                                            `json:"usage_of_point"`
	LostTrial               *NilBool                                              `json:"lost_trial"`
	DealsInsecureContent    *NilBool                                              `json:"deals_insecure_content"`
	DealsLongApplyContent   *NilBool                                              `json:"deals_long_apply_content"`
	PayBy                   OptExaminationInfoUpdatingResponseContractDetailPayBy `json:"pay_by"`
}

// GetCorporate returns the value of Corporate.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCorporate() OptNilBool {
	return s.Corporate
}

// GetCorporateNumber returns the value of CorporateNumber.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCorporateNumber() *NilString {
	return s.CorporateNumber
}

// GetCorporateName returns the value of CorporateName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCorporateName() OptString {
	return s.CorporateName
}

// GetCorporateNameKana returns the value of CorporateNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCorporateNameKana() OptString {
	return s.CorporateNameKana
}

// GetHp returns the value of Hp.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetHp() *NilString {
	return s.Hp
}

// GetCapital returns the value of Capital.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCapital() *NilFloat64 {
	return s.Capital
}

// GetEstablishedAt returns the value of EstablishedAt.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetEstablishedAt() *NilString {
	return s.EstablishedAt
}

// GetYearlySales returns the value of YearlySales.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetYearlySales() *NilFloat64 {
	return s.YearlySales
}

// GetBusinessDetails returns the value of BusinessDetails.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetBusinessDetails() *NilString {
	return s.BusinessDetails
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyPostalCode() *NilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyPrefecture() *NilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyPrefectureKana() *NilString {
	return s.CompanyPrefectureKana
}

// GetCompanyAddressMunicipality returns the value of CompanyAddressMunicipality.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressMunicipality() *NilString {
	return s.CompanyAddressMunicipality
}

// GetCompanyAddressMunicipalityKana returns the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressMunicipalityKana() *NilString {
	return s.CompanyAddressMunicipalityKana
}

// GetCompanyAddressSection returns the value of CompanyAddressSection.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressSection() *NilString {
	return s.CompanyAddressSection
}

// GetCompanyAddressSectionKana returns the value of CompanyAddressSectionKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressSectionKana() *NilString {
	return s.CompanyAddressSectionKana
}

// GetCompanyAddressChrome returns the value of CompanyAddressChrome.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressChrome() *NilString {
	return s.CompanyAddressChrome
}

// GetCompanyAddressChromeKana returns the value of CompanyAddressChromeKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressChromeKana() *NilString {
	return s.CompanyAddressChromeKana
}

// GetCompanyAddressBuildingName returns the value of CompanyAddressBuildingName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressBuildingName() *NilString {
	return s.CompanyAddressBuildingName
}

// GetCompanyAddressBuildingNameKana returns the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyAddressBuildingNameKana() *NilString {
	return s.CompanyAddressBuildingNameKana
}

// GetCompanyTel returns the value of CompanyTel.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetCompanyTel() *NilString {
	return s.CompanyTel
}

// GetRepresentativeLastName returns the value of RepresentativeLastName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeLastName() *NilString {
	return s.RepresentativeLastName
}

// GetRepresentativeLastNameKana returns the value of RepresentativeLastNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeLastNameKana() *NilString {
	return s.RepresentativeLastNameKana
}

// GetRepresentativeFirstName returns the value of RepresentativeFirstName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeFirstName() *NilString {
	return s.RepresentativeFirstName
}

// GetRepresentativeFirstNameKana returns the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeFirstNameKana() *NilString {
	return s.RepresentativeFirstNameKana
}

// GetRepresentativeBirthday returns the value of RepresentativeBirthday.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeBirthday() *NilString {
	return s.RepresentativeBirthday
}

// GetRepresentativeGender returns the value of RepresentativeGender.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeGender() *NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender {
	return s.RepresentativeGender
}

// GetRepresentativePostalCode returns the value of RepresentativePostalCode.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativePostalCode() *NilString {
	return s.RepresentativePostalCode
}

// GetRepresentativePrefecture returns the value of RepresentativePrefecture.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativePrefecture() *NilString {
	return s.RepresentativePrefecture
}

// GetRepresentativePrefectureKana returns the value of RepresentativePrefectureKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativePrefectureKana() *NilString {
	return s.RepresentativePrefectureKana
}

// GetRepresentativeAddressMunicipality returns the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeAddressMunicipality() *NilString {
	return s.RepresentativeAddressMunicipality
}

// GetRepresentativeAddressMunicipalityKana returns the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeAddressMunicipalityKana() *NilString {
	return s.RepresentativeAddressMunicipalityKana
}

// GetRepresentativeAddressSection returns the value of RepresentativeAddressSection.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeAddressSection() *NilString {
	return s.RepresentativeAddressSection
}

// GetRepresentativeAddressSectionKana returns the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeAddressSectionKana() *NilString {
	return s.RepresentativeAddressSectionKana
}

// GetRepresentativeAddressChrome returns the value of RepresentativeAddressChrome.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeAddressChrome() *NilString {
	return s.RepresentativeAddressChrome
}

// GetRepresentativeAddressChromeKana returns the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeAddressChromeKana() *NilString {
	return s.RepresentativeAddressChromeKana
}

// GetRepresentativeTel returns the value of RepresentativeTel.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetRepresentativeTel() *NilString {
	return s.RepresentativeTel
}

// GetStaff1LastName returns the value of Staff1LastName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff1LastName() *NilString {
	return s.Staff1LastName
}

// GetStaff1LastNameKana returns the value of Staff1LastNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff1LastNameKana() *NilString {
	return s.Staff1LastNameKana
}

// GetStaff1FirstName returns the value of Staff1FirstName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff1FirstName() *NilString {
	return s.Staff1FirstName
}

// GetStaff1FirstNameKana returns the value of Staff1FirstNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff1FirstNameKana() *NilString {
	return s.Staff1FirstNameKana
}

// GetStaff1Tel returns the value of Staff1Tel.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff1Tel() *NilString {
	return s.Staff1Tel
}

// GetStaff1Mail returns the value of Staff1Mail.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff1Mail() *NilString {
	return s.Staff1Mail
}

// GetStaff2LastName returns the value of Staff2LastName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff2LastName() *NilString {
	return s.Staff2LastName
}

// GetStaff2LastNameKana returns the value of Staff2LastNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff2LastNameKana() *NilString {
	return s.Staff2LastNameKana
}

// GetStaff2FirstName returns the value of Staff2FirstName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff2FirstName() *NilString {
	return s.Staff2FirstName
}

// GetStaff2FirstNameKana returns the value of Staff2FirstNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff2FirstNameKana() *NilString {
	return s.Staff2FirstNameKana
}

// GetStaff2Tel returns the value of Staff2Tel.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff2Tel() *NilString {
	return s.Staff2Tel
}

// GetStaff2Mail returns the value of Staff2Mail.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetStaff2Mail() *NilString {
	return s.Staff2Mail
}

// GetUsedOnApp returns the value of UsedOnApp.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetUsedOnApp() *NilBool {
	return s.UsedOnApp
}

// GetUsedOnWeb returns the value of UsedOnWeb.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetUsedOnWeb() *NilBool {
	return s.UsedOnWeb
}

// GetUsedOnOther returns the value of UsedOnOther.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetUsedOnOther() OptNilBool {
	return s.UsedOnOther
}

// GetSiteExisting returns the value of SiteExisting.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetSiteExisting() OptExaminationInfoUpdatingResponseContractDetailSiteExisting {
	return s.SiteExisting
}

// GetURL returns the value of URL.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetURL() *NilString {
	return s.URL
}

// GetSiteCredential returns the value of SiteCredential.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetSiteCredential() *NilString {
	return s.SiteCredential
}

// GetShopName returns the value of ShopName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetShopName() OptString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetShopNameKana() OptString {
	return s.ShopNameKana
}

// GetShopNameEn returns the value of ShopNameEn.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetShopNameEn() OptString {
	return s.ShopNameEn
}

// GetPlatformName returns the value of PlatformName.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSupportTel returns the value of SupportTel.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetSupportTel() *NilString {
	return s.SupportTel
}

// GetSupportMail returns the value of SupportMail.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetSupportMail() *NilString {
	return s.SupportMail
}

// GetProvidesProduct returns the value of ProvidesProduct.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetProvidesProduct() *NilBool {
	return s.ProvidesProduct
}

// GetProvidesService returns the value of ProvidesService.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetProvidesService() *NilBool {
	return s.ProvidesService
}

// GetProvidesDigitalContent returns the value of ProvidesDigitalContent.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetProvidesDigitalContent() *NilBool {
	return s.ProvidesDigitalContent
}

// GetPrepaid returns the value of Prepaid.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetPrepaid() *NilBool {
	return s.Prepaid
}

// GetUnitPrice returns the value of UnitPrice.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetUnitPrice() *NilFloat64 {
	return s.UnitPrice
}

// GetContentCategoryMasterID returns the value of ContentCategoryMasterID.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetContentCategoryMasterID() OptNilFloat64 {
	return s.ContentCategoryMasterID
}

// GetContentDescription returns the value of ContentDescription.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetContentDescription() *NilString {
	return s.ContentDescription
}

// GetExpiretionDateOfPoint returns the value of ExpiretionDateOfPoint.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetExpiretionDateOfPoint() *NilString {
	return s.ExpiretionDateOfPoint
}

// GetUsageOfPoint returns the value of UsageOfPoint.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetUsageOfPoint() *NilString {
	return s.UsageOfPoint
}

// GetLostTrial returns the value of LostTrial.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetLostTrial() *NilBool {
	return s.LostTrial
}

// GetDealsInsecureContent returns the value of DealsInsecureContent.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetDealsInsecureContent() *NilBool {
	return s.DealsInsecureContent
}

// GetDealsLongApplyContent returns the value of DealsLongApplyContent.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetDealsLongApplyContent() *NilBool {
	return s.DealsLongApplyContent
}

// GetPayBy returns the value of PayBy.
func (s *ExaminationInfoUpdatingResponseContractDetail) GetPayBy() OptExaminationInfoUpdatingResponseContractDetailPayBy {
	return s.PayBy
}

// SetCorporate sets the value of Corporate.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCorporate(val OptNilBool) {
	s.Corporate = val
}

// SetCorporateNumber sets the value of CorporateNumber.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCorporateNumber(val *NilString) {
	s.CorporateNumber = val
}

// SetCorporateName sets the value of CorporateName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCorporateName(val OptString) {
	s.CorporateName = val
}

// SetCorporateNameKana sets the value of CorporateNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCorporateNameKana(val OptString) {
	s.CorporateNameKana = val
}

// SetHp sets the value of Hp.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetHp(val *NilString) {
	s.Hp = val
}

// SetCapital sets the value of Capital.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCapital(val *NilFloat64) {
	s.Capital = val
}

// SetEstablishedAt sets the value of EstablishedAt.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetEstablishedAt(val *NilString) {
	s.EstablishedAt = val
}

// SetYearlySales sets the value of YearlySales.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetYearlySales(val *NilFloat64) {
	s.YearlySales = val
}

// SetBusinessDetails sets the value of BusinessDetails.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetBusinessDetails(val *NilString) {
	s.BusinessDetails = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyPostalCode(val *NilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyPrefecture(val *NilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyPrefectureKana(val *NilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyAddressMunicipality sets the value of CompanyAddressMunicipality.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressMunicipality(val *NilString) {
	s.CompanyAddressMunicipality = val
}

// SetCompanyAddressMunicipalityKana sets the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressMunicipalityKana(val *NilString) {
	s.CompanyAddressMunicipalityKana = val
}

// SetCompanyAddressSection sets the value of CompanyAddressSection.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressSection(val *NilString) {
	s.CompanyAddressSection = val
}

// SetCompanyAddressSectionKana sets the value of CompanyAddressSectionKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressSectionKana(val *NilString) {
	s.CompanyAddressSectionKana = val
}

// SetCompanyAddressChrome sets the value of CompanyAddressChrome.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressChrome(val *NilString) {
	s.CompanyAddressChrome = val
}

// SetCompanyAddressChromeKana sets the value of CompanyAddressChromeKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressChromeKana(val *NilString) {
	s.CompanyAddressChromeKana = val
}

// SetCompanyAddressBuildingName sets the value of CompanyAddressBuildingName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressBuildingName(val *NilString) {
	s.CompanyAddressBuildingName = val
}

// SetCompanyAddressBuildingNameKana sets the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyAddressBuildingNameKana(val *NilString) {
	s.CompanyAddressBuildingNameKana = val
}

// SetCompanyTel sets the value of CompanyTel.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetCompanyTel(val *NilString) {
	s.CompanyTel = val
}

// SetRepresentativeLastName sets the value of RepresentativeLastName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeLastName(val *NilString) {
	s.RepresentativeLastName = val
}

// SetRepresentativeLastNameKana sets the value of RepresentativeLastNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeLastNameKana(val *NilString) {
	s.RepresentativeLastNameKana = val
}

// SetRepresentativeFirstName sets the value of RepresentativeFirstName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeFirstName(val *NilString) {
	s.RepresentativeFirstName = val
}

// SetRepresentativeFirstNameKana sets the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeFirstNameKana(val *NilString) {
	s.RepresentativeFirstNameKana = val
}

// SetRepresentativeBirthday sets the value of RepresentativeBirthday.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeBirthday(val *NilString) {
	s.RepresentativeBirthday = val
}

// SetRepresentativeGender sets the value of RepresentativeGender.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeGender(val *NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) {
	s.RepresentativeGender = val
}

// SetRepresentativePostalCode sets the value of RepresentativePostalCode.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativePostalCode(val *NilString) {
	s.RepresentativePostalCode = val
}

// SetRepresentativePrefecture sets the value of RepresentativePrefecture.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativePrefecture(val *NilString) {
	s.RepresentativePrefecture = val
}

// SetRepresentativePrefectureKana sets the value of RepresentativePrefectureKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativePrefectureKana(val *NilString) {
	s.RepresentativePrefectureKana = val
}

// SetRepresentativeAddressMunicipality sets the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeAddressMunicipality(val *NilString) {
	s.RepresentativeAddressMunicipality = val
}

// SetRepresentativeAddressMunicipalityKana sets the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeAddressMunicipalityKana(val *NilString) {
	s.RepresentativeAddressMunicipalityKana = val
}

// SetRepresentativeAddressSection sets the value of RepresentativeAddressSection.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeAddressSection(val *NilString) {
	s.RepresentativeAddressSection = val
}

// SetRepresentativeAddressSectionKana sets the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeAddressSectionKana(val *NilString) {
	s.RepresentativeAddressSectionKana = val
}

// SetRepresentativeAddressChrome sets the value of RepresentativeAddressChrome.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeAddressChrome(val *NilString) {
	s.RepresentativeAddressChrome = val
}

// SetRepresentativeAddressChromeKana sets the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeAddressChromeKana(val *NilString) {
	s.RepresentativeAddressChromeKana = val
}

// SetRepresentativeTel sets the value of RepresentativeTel.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetRepresentativeTel(val *NilString) {
	s.RepresentativeTel = val
}

// SetStaff1LastName sets the value of Staff1LastName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff1LastName(val *NilString) {
	s.Staff1LastName = val
}

// SetStaff1LastNameKana sets the value of Staff1LastNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff1LastNameKana(val *NilString) {
	s.Staff1LastNameKana = val
}

// SetStaff1FirstName sets the value of Staff1FirstName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff1FirstName(val *NilString) {
	s.Staff1FirstName = val
}

// SetStaff1FirstNameKana sets the value of Staff1FirstNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff1FirstNameKana(val *NilString) {
	s.Staff1FirstNameKana = val
}

// SetStaff1Tel sets the value of Staff1Tel.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff1Tel(val *NilString) {
	s.Staff1Tel = val
}

// SetStaff1Mail sets the value of Staff1Mail.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff1Mail(val *NilString) {
	s.Staff1Mail = val
}

// SetStaff2LastName sets the value of Staff2LastName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff2LastName(val *NilString) {
	s.Staff2LastName = val
}

// SetStaff2LastNameKana sets the value of Staff2LastNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff2LastNameKana(val *NilString) {
	s.Staff2LastNameKana = val
}

// SetStaff2FirstName sets the value of Staff2FirstName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff2FirstName(val *NilString) {
	s.Staff2FirstName = val
}

// SetStaff2FirstNameKana sets the value of Staff2FirstNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff2FirstNameKana(val *NilString) {
	s.Staff2FirstNameKana = val
}

// SetStaff2Tel sets the value of Staff2Tel.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff2Tel(val *NilString) {
	s.Staff2Tel = val
}

// SetStaff2Mail sets the value of Staff2Mail.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetStaff2Mail(val *NilString) {
	s.Staff2Mail = val
}

// SetUsedOnApp sets the value of UsedOnApp.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetUsedOnApp(val *NilBool) {
	s.UsedOnApp = val
}

// SetUsedOnWeb sets the value of UsedOnWeb.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetUsedOnWeb(val *NilBool) {
	s.UsedOnWeb = val
}

// SetUsedOnOther sets the value of UsedOnOther.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetUsedOnOther(val OptNilBool) {
	s.UsedOnOther = val
}

// SetSiteExisting sets the value of SiteExisting.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetSiteExisting(val OptExaminationInfoUpdatingResponseContractDetailSiteExisting) {
	s.SiteExisting = val
}

// SetURL sets the value of URL.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetURL(val *NilString) {
	s.URL = val
}

// SetSiteCredential sets the value of SiteCredential.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetSiteCredential(val *NilString) {
	s.SiteCredential = val
}

// SetShopName sets the value of ShopName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetShopName(val OptString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetShopNameKana(val OptString) {
	s.ShopNameKana = val
}

// SetShopNameEn sets the value of ShopNameEn.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetShopNameEn(val OptString) {
	s.ShopNameEn = val
}

// SetPlatformName sets the value of PlatformName.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSupportTel sets the value of SupportTel.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetSupportTel(val *NilString) {
	s.SupportTel = val
}

// SetSupportMail sets the value of SupportMail.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetSupportMail(val *NilString) {
	s.SupportMail = val
}

// SetProvidesProduct sets the value of ProvidesProduct.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetProvidesProduct(val *NilBool) {
	s.ProvidesProduct = val
}

// SetProvidesService sets the value of ProvidesService.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetProvidesService(val *NilBool) {
	s.ProvidesService = val
}

// SetProvidesDigitalContent sets the value of ProvidesDigitalContent.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetProvidesDigitalContent(val *NilBool) {
	s.ProvidesDigitalContent = val
}

// SetPrepaid sets the value of Prepaid.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetPrepaid(val *NilBool) {
	s.Prepaid = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetUnitPrice(val *NilFloat64) {
	s.UnitPrice = val
}

// SetContentCategoryMasterID sets the value of ContentCategoryMasterID.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetContentCategoryMasterID(val OptNilFloat64) {
	s.ContentCategoryMasterID = val
}

// SetContentDescription sets the value of ContentDescription.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetContentDescription(val *NilString) {
	s.ContentDescription = val
}

// SetExpiretionDateOfPoint sets the value of ExpiretionDateOfPoint.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetExpiretionDateOfPoint(val *NilString) {
	s.ExpiretionDateOfPoint = val
}

// SetUsageOfPoint sets the value of UsageOfPoint.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetUsageOfPoint(val *NilString) {
	s.UsageOfPoint = val
}

// SetLostTrial sets the value of LostTrial.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetLostTrial(val *NilBool) {
	s.LostTrial = val
}

// SetDealsInsecureContent sets the value of DealsInsecureContent.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetDealsInsecureContent(val *NilBool) {
	s.DealsInsecureContent = val
}

// SetDealsLongApplyContent sets the value of DealsLongApplyContent.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetDealsLongApplyContent(val *NilBool) {
	s.DealsLongApplyContent = val
}

// SetPayBy sets the value of PayBy.
func (s *ExaminationInfoUpdatingResponseContractDetail) SetPayBy(val OptExaminationInfoUpdatingResponseContractDetailPayBy) {
	s.PayBy = val
}

// 支払い方法\
// \
// キャンセル金額の超過などによりfincodeへの支払が発生した場合の支払い方法
// - `0`: クレジットカード
// - `1`: 銀行口座.
type ExaminationInfoUpdatingResponseContractDetailPayBy float64

const (
	ExaminationInfoUpdatingResponseContractDetailPayBy0 ExaminationInfoUpdatingResponseContractDetailPayBy = 0
	ExaminationInfoUpdatingResponseContractDetailPayBy1 ExaminationInfoUpdatingResponseContractDetailPayBy = 1
)

// AllValues returns all ExaminationInfoUpdatingResponseContractDetailPayBy values.
func (ExaminationInfoUpdatingResponseContractDetailPayBy) AllValues() []ExaminationInfoUpdatingResponseContractDetailPayBy {
	return []ExaminationInfoUpdatingResponseContractDetailPayBy{
		ExaminationInfoUpdatingResponseContractDetailPayBy0,
		ExaminationInfoUpdatingResponseContractDetailPayBy1,
	}
}

// 代表者 性別
// - `0`: 男性
// - `1`: 女性.
type ExaminationInfoUpdatingResponseContractDetailRepresentativeGender int

const (
	ExaminationInfoUpdatingResponseContractDetailRepresentativeGender0 ExaminationInfoUpdatingResponseContractDetailRepresentativeGender = 0
	ExaminationInfoUpdatingResponseContractDetailRepresentativeGender1 ExaminationInfoUpdatingResponseContractDetailRepresentativeGender = 1
)

// AllValues returns all ExaminationInfoUpdatingResponseContractDetailRepresentativeGender values.
func (ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) AllValues() []ExaminationInfoUpdatingResponseContractDetailRepresentativeGender {
	return []ExaminationInfoUpdatingResponseContractDetailRepresentativeGender{
		ExaminationInfoUpdatingResponseContractDetailRepresentativeGender0,
		ExaminationInfoUpdatingResponseContractDetailRepresentativeGender1,
	}
}

// Webサイトの公開状況\
// \
// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。
// - `0`: fincode審査チームがサイトを閲覧可能
// - `1`: fincode審査チームがサイトを閲覧不可能（ただし準備中）
// - `2`: fincode審査チームがサイトを閲覧不可能.
type ExaminationInfoUpdatingResponseContractDetailSiteExisting float64

const (
	ExaminationInfoUpdatingResponseContractDetailSiteExisting0 ExaminationInfoUpdatingResponseContractDetailSiteExisting = 0
	ExaminationInfoUpdatingResponseContractDetailSiteExisting1 ExaminationInfoUpdatingResponseContractDetailSiteExisting = 1
	ExaminationInfoUpdatingResponseContractDetailSiteExisting2 ExaminationInfoUpdatingResponseContractDetailSiteExisting = 2
)

// AllValues returns all ExaminationInfoUpdatingResponseContractDetailSiteExisting values.
func (ExaminationInfoUpdatingResponseContractDetailSiteExisting) AllValues() []ExaminationInfoUpdatingResponseContractDetailSiteExisting {
	return []ExaminationInfoUpdatingResponseContractDetailSiteExisting{
		ExaminationInfoUpdatingResponseContractDetailSiteExisting0,
		ExaminationInfoUpdatingResponseContractDetailSiteExisting1,
		ExaminationInfoUpdatingResponseContractDetailSiteExisting2,
	}
}

type ExaminationInfoUpdatingResponseContractInputStatus struct {
	StatusCode OptExaminationInfoUpdatingResponseContractInputStatusStatusCode `json:"status_code"`
	// 契約情報入力完了フラグ\
	// \
	// 契約情報の入力が完了しているかどうか.
	ContractInfoInput OptBool `json:"contract_info_input"`
	// ショップ情報入力完了フラグ\
	// \
	// ショップ情報の入力が完了しているかどうか.
	ShopInfoInput OptBool `json:"shop_info_input"`
	// 銀行口座情報入力完了フラグ\
	// \
	// 銀行口座情報の入力が完了しているかどうか.
	AccountInfoInput OptBool `json:"account_info_input"`
	// 請求先クレジットカード情報入力完了フラグ\
	// \
	// fincodeが請求を行う際に請求先となるクレジットカード情報の入力が完了しているかどうか.
	CardInfoInput OptBool `json:"card_info_input"`
}

// GetStatusCode returns the value of StatusCode.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) GetStatusCode() OptExaminationInfoUpdatingResponseContractInputStatusStatusCode {
	return s.StatusCode
}

// GetContractInfoInput returns the value of ContractInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) GetContractInfoInput() OptBool {
	return s.ContractInfoInput
}

// GetShopInfoInput returns the value of ShopInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) GetShopInfoInput() OptBool {
	return s.ShopInfoInput
}

// GetAccountInfoInput returns the value of AccountInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) GetAccountInfoInput() OptBool {
	return s.AccountInfoInput
}

// GetCardInfoInput returns the value of CardInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) GetCardInfoInput() OptBool {
	return s.CardInfoInput
}

// SetStatusCode sets the value of StatusCode.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) SetStatusCode(val OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) {
	s.StatusCode = val
}

// SetContractInfoInput sets the value of ContractInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) SetContractInfoInput(val OptBool) {
	s.ContractInfoInput = val
}

// SetShopInfoInput sets the value of ShopInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) SetShopInfoInput(val OptBool) {
	s.ShopInfoInput = val
}

// SetAccountInfoInput sets the value of AccountInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) SetAccountInfoInput(val OptBool) {
	s.AccountInfoInput = val
}

// SetCardInfoInput sets the value of CardInfoInput.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) SetCardInfoInput(val OptBool) {
	s.CardInfoInput = val
}

// 本番環境申請情報入力ステータス
// - `301`: 全項目未入力
// - `302`: 一部入力済み
// - `303`: 全項目入力済み
// - `304`: 本番環境申請済み.
type ExaminationInfoUpdatingResponseContractInputStatusStatusCode float64

const (
	ExaminationInfoUpdatingResponseContractInputStatusStatusCode301 ExaminationInfoUpdatingResponseContractInputStatusStatusCode = 301
	ExaminationInfoUpdatingResponseContractInputStatusStatusCode302 ExaminationInfoUpdatingResponseContractInputStatusStatusCode = 302
	ExaminationInfoUpdatingResponseContractInputStatusStatusCode303 ExaminationInfoUpdatingResponseContractInputStatusStatusCode = 303
	ExaminationInfoUpdatingResponseContractInputStatusStatusCode304 ExaminationInfoUpdatingResponseContractInputStatusStatusCode = 304
)

// AllValues returns all ExaminationInfoUpdatingResponseContractInputStatusStatusCode values.
func (ExaminationInfoUpdatingResponseContractInputStatusStatusCode) AllValues() []ExaminationInfoUpdatingResponseContractInputStatusStatusCode {
	return []ExaminationInfoUpdatingResponseContractInputStatusStatusCode{
		ExaminationInfoUpdatingResponseContractInputStatusStatusCode301,
		ExaminationInfoUpdatingResponseContractInputStatusStatusCode302,
		ExaminationInfoUpdatingResponseContractInputStatusStatusCode303,
		ExaminationInfoUpdatingResponseContractInputStatusStatusCode304,
	}
}

// 入金サイクルマスタID\
// 入金サイクルについては[Docs > 精算管理 >
// クレジットカード決済の入金サイクル](https://docs.fincode.
// jp/business_management/deposit)を参照できます。
// - `1`: スタンダード（月1回, 月末締め翌月末入金）
// - `2`: スタンダード（月2回, 15日&月末締め15日後入金）.
type ExaminationInfoUpdatingResponseDepositCycleMasterID int

const (
	ExaminationInfoUpdatingResponseDepositCycleMasterID1 ExaminationInfoUpdatingResponseDepositCycleMasterID = 1
	ExaminationInfoUpdatingResponseDepositCycleMasterID2 ExaminationInfoUpdatingResponseDepositCycleMasterID = 2
)

// AllValues returns all ExaminationInfoUpdatingResponseDepositCycleMasterID values.
func (ExaminationInfoUpdatingResponseDepositCycleMasterID) AllValues() []ExaminationInfoUpdatingResponseDepositCycleMasterID {
	return []ExaminationInfoUpdatingResponseDepositCycleMasterID{
		ExaminationInfoUpdatingResponseDepositCycleMasterID1,
		ExaminationInfoUpdatingResponseDepositCycleMasterID2,
	}
}

// Merged schema.
type ExaminationInfoUpdatingResponseShopItemDetailItem struct {
	// 商材1 名称.
	Content1Name OptString `json:"content1_name"`
	// 商材1 説明.
	Content1Description OptString `json:"content1_description"`
	// 商材1 単価.
	Content1UnitPrice OptInt `json:"content1_unit_price"`
	// 商材2 名称.
	Content2Name OptString `json:"content2_name"`
	// 商材2 説明.
	Content2Description OptString `json:"content2_description"`
	// 商材2 単価.
	Content2UnitPrice OptInt `json:"content2_unit_price"`
	// 商材3 名称.
	Content3Name OptString `json:"content3_name"`
	// 商材3 説明.
	Content3Description OptString `json:"content3_description"`
	// 商材3 単価.
	Content3UnitPrice OptInt `json:"content3_unit_price"`
	// 商品情報ID.
	ID OptNilString `json:"id"`
	// 取扱商材 品目種別
	// - `0`: 物品販売
	// - `1`: サービス
	// - `2`: デジタルコンテンツ.
	Type OptExaminationInfoUpdatingResponseShopItemDetailItemType `json:"type"`
}

// GetContent1Name returns the value of Content1Name.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent1Name() OptString {
	return s.Content1Name
}

// GetContent1Description returns the value of Content1Description.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent1Description() OptString {
	return s.Content1Description
}

// GetContent1UnitPrice returns the value of Content1UnitPrice.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent1UnitPrice() OptInt {
	return s.Content1UnitPrice
}

// GetContent2Name returns the value of Content2Name.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent2Name() OptString {
	return s.Content2Name
}

// GetContent2Description returns the value of Content2Description.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent2Description() OptString {
	return s.Content2Description
}

// GetContent2UnitPrice returns the value of Content2UnitPrice.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent2UnitPrice() OptInt {
	return s.Content2UnitPrice
}

// GetContent3Name returns the value of Content3Name.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent3Name() OptString {
	return s.Content3Name
}

// GetContent3Description returns the value of Content3Description.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent3Description() OptString {
	return s.Content3Description
}

// GetContent3UnitPrice returns the value of Content3UnitPrice.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetContent3UnitPrice() OptInt {
	return s.Content3UnitPrice
}

// GetID returns the value of ID.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetID() OptNilString {
	return s.ID
}

// GetType returns the value of Type.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) GetType() OptExaminationInfoUpdatingResponseShopItemDetailItemType {
	return s.Type
}

// SetContent1Name sets the value of Content1Name.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent1Name(val OptString) {
	s.Content1Name = val
}

// SetContent1Description sets the value of Content1Description.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent1Description(val OptString) {
	s.Content1Description = val
}

// SetContent1UnitPrice sets the value of Content1UnitPrice.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent1UnitPrice(val OptInt) {
	s.Content1UnitPrice = val
}

// SetContent2Name sets the value of Content2Name.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent2Name(val OptString) {
	s.Content2Name = val
}

// SetContent2Description sets the value of Content2Description.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent2Description(val OptString) {
	s.Content2Description = val
}

// SetContent2UnitPrice sets the value of Content2UnitPrice.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent2UnitPrice(val OptInt) {
	s.Content2UnitPrice = val
}

// SetContent3Name sets the value of Content3Name.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent3Name(val OptString) {
	s.Content3Name = val
}

// SetContent3Description sets the value of Content3Description.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent3Description(val OptString) {
	s.Content3Description = val
}

// SetContent3UnitPrice sets the value of Content3UnitPrice.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetContent3UnitPrice(val OptInt) {
	s.Content3UnitPrice = val
}

// SetID sets the value of ID.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetID(val OptNilString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) SetType(val OptExaminationInfoUpdatingResponseShopItemDetailItemType) {
	s.Type = val
}

// 取扱商材 品目種別
// - `0`: 物品販売
// - `1`: サービス
// - `2`: デジタルコンテンツ.
type ExaminationInfoUpdatingResponseShopItemDetailItemType float64

const (
	ExaminationInfoUpdatingResponseShopItemDetailItemType0 ExaminationInfoUpdatingResponseShopItemDetailItemType = 0
	ExaminationInfoUpdatingResponseShopItemDetailItemType1 ExaminationInfoUpdatingResponseShopItemDetailItemType = 1
	ExaminationInfoUpdatingResponseShopItemDetailItemType2 ExaminationInfoUpdatingResponseShopItemDetailItemType = 2
)

// AllValues returns all ExaminationInfoUpdatingResponseShopItemDetailItemType values.
func (ExaminationInfoUpdatingResponseShopItemDetailItemType) AllValues() []ExaminationInfoUpdatingResponseShopItemDetailItemType {
	return []ExaminationInfoUpdatingResponseShopItemDetailItemType{
		ExaminationInfoUpdatingResponseShopItemDetailItemType0,
		ExaminationInfoUpdatingResponseShopItemDetailItemType1,
		ExaminationInfoUpdatingResponseShopItemDetailItemType2,
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type ExaminationInfoUpdatingResponseShopType string

const (
	ExaminationInfoUpdatingResponseShopTypePlatform ExaminationInfoUpdatingResponseShopType = "platform"
	ExaminationInfoUpdatingResponseShopTypeTenant   ExaminationInfoUpdatingResponseShopType = "tenant"
)

// AllValues returns all ExaminationInfoUpdatingResponseShopType values.
func (ExaminationInfoUpdatingResponseShopType) AllValues() []ExaminationInfoUpdatingResponseShopType {
	return []ExaminationInfoUpdatingResponseShopType{
		ExaminationInfoUpdatingResponseShopTypePlatform,
		ExaminationInfoUpdatingResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationInfoUpdatingResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationInfoUpdatingResponseShopTypePlatform:
		return []byte(s), nil
	case ExaminationInfoUpdatingResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationInfoUpdatingResponseShopType) UnmarshalText(data []byte) error {
	switch ExaminationInfoUpdatingResponseShopType(data) {
	case ExaminationInfoUpdatingResponseShopTypePlatform:
		*s = ExaminationInfoUpdatingResponseShopTypePlatform
		return nil
	case ExaminationInfoUpdatingResponseShopTypeTenant:
		*s = ExaminationInfoUpdatingResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 契約ステータス\
// \
// fincodeとそのショップの運営事業者の契約のステータスを表します。
// - `101`: 未契約<br /><span
// class="smallText">まだfincodeの本番環境申請の提出が完了していない状態です。</span>
// - `102`: 利用審査中<br /><span
// class="smallText">fincodeの本番環境申請の提出が完了し、利用審査中の状態です。</span>
// - `103`: 利用審査中（VISA/Mastercard利用可）<br /><span
// class="smallText">即時利用によりVISA/Mastercardブランドの決済受付が可能な状態です。審査は継続して行われます。</span>
// - `105`: 解約済
// - `106`: 契約不成立<br /><span
// class="smallText">審査の結果、fincodeの利用が不可となった状態です。</span>
// - `107`: 稼働中<br /><span
// class="smallText">fincodeの本番環境申請が完了し、クレジットカード決済の受付が可能な状態です。</span>.
type ExaminationInfoUpdatingResponseStatusCode string

const (
	ExaminationInfoUpdatingResponseStatusCode101 ExaminationInfoUpdatingResponseStatusCode = "101"
	ExaminationInfoUpdatingResponseStatusCode102 ExaminationInfoUpdatingResponseStatusCode = "102"
	ExaminationInfoUpdatingResponseStatusCode103 ExaminationInfoUpdatingResponseStatusCode = "103"
	ExaminationInfoUpdatingResponseStatusCode105 ExaminationInfoUpdatingResponseStatusCode = "105"
	ExaminationInfoUpdatingResponseStatusCode106 ExaminationInfoUpdatingResponseStatusCode = "106"
	ExaminationInfoUpdatingResponseStatusCode107 ExaminationInfoUpdatingResponseStatusCode = "107"
)

// AllValues returns all ExaminationInfoUpdatingResponseStatusCode values.
func (ExaminationInfoUpdatingResponseStatusCode) AllValues() []ExaminationInfoUpdatingResponseStatusCode {
	return []ExaminationInfoUpdatingResponseStatusCode{
		ExaminationInfoUpdatingResponseStatusCode101,
		ExaminationInfoUpdatingResponseStatusCode102,
		ExaminationInfoUpdatingResponseStatusCode103,
		ExaminationInfoUpdatingResponseStatusCode105,
		ExaminationInfoUpdatingResponseStatusCode106,
		ExaminationInfoUpdatingResponseStatusCode107,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationInfoUpdatingResponseStatusCode) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationInfoUpdatingResponseStatusCode101:
		return []byte(s), nil
	case ExaminationInfoUpdatingResponseStatusCode102:
		return []byte(s), nil
	case ExaminationInfoUpdatingResponseStatusCode103:
		return []byte(s), nil
	case ExaminationInfoUpdatingResponseStatusCode105:
		return []byte(s), nil
	case ExaminationInfoUpdatingResponseStatusCode106:
		return []byte(s), nil
	case ExaminationInfoUpdatingResponseStatusCode107:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationInfoUpdatingResponseStatusCode) UnmarshalText(data []byte) error {
	switch ExaminationInfoUpdatingResponseStatusCode(data) {
	case ExaminationInfoUpdatingResponseStatusCode101:
		*s = ExaminationInfoUpdatingResponseStatusCode101
		return nil
	case ExaminationInfoUpdatingResponseStatusCode102:
		*s = ExaminationInfoUpdatingResponseStatusCode102
		return nil
	case ExaminationInfoUpdatingResponseStatusCode103:
		*s = ExaminationInfoUpdatingResponseStatusCode103
		return nil
	case ExaminationInfoUpdatingResponseStatusCode105:
		*s = ExaminationInfoUpdatingResponseStatusCode105
		return nil
	case ExaminationInfoUpdatingResponseStatusCode106:
		*s = ExaminationInfoUpdatingResponseStatusCode106
		return nil
	case ExaminationInfoUpdatingResponseStatusCode107:
		*s = ExaminationInfoUpdatingResponseStatusCode107
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExaminationInfo.V2.Retrieving.Response
type ExaminationInfoV2RetrievingResponse struct {
	StatusCode OptExaminationInfoV2RetrievingResponseStatusCode `json:"status_code"`
	// 契約情報\
	// \
	// fincodeと契約をする事業者の情報.
	ContractInfo OptExaminationInfoV2RetrievingResponseContractInfo `json:"contract_info"`
	// ショップ情報\
	// \
	// fincodeにおけるショップの情報.
	ShopInfo OptExaminationInfoV2RetrievingResponseShopInfo `json:"shop_info"`
	// 銀行口座情報\
	// \
	// fincode上での売上入金を受け取るための銀行口座情報.
	BankAccountInfo OptExaminationInfoV2RetrievingResponseBankAccountInfo `json:"bank_account_info"`
	// 入金サイクル情報\
	// \
	// fincode上での売上入金の入金サイクルに関する情報.
	DepositCycleInfo OptExaminationInfoV2RetrievingResponseDepositCycleInfo `json:"deposit_cycle_info"`
}

// GetStatusCode returns the value of StatusCode.
func (s *ExaminationInfoV2RetrievingResponse) GetStatusCode() OptExaminationInfoV2RetrievingResponseStatusCode {
	return s.StatusCode
}

// GetContractInfo returns the value of ContractInfo.
func (s *ExaminationInfoV2RetrievingResponse) GetContractInfo() OptExaminationInfoV2RetrievingResponseContractInfo {
	return s.ContractInfo
}

// GetShopInfo returns the value of ShopInfo.
func (s *ExaminationInfoV2RetrievingResponse) GetShopInfo() OptExaminationInfoV2RetrievingResponseShopInfo {
	return s.ShopInfo
}

// GetBankAccountInfo returns the value of BankAccountInfo.
func (s *ExaminationInfoV2RetrievingResponse) GetBankAccountInfo() OptExaminationInfoV2RetrievingResponseBankAccountInfo {
	return s.BankAccountInfo
}

// GetDepositCycleInfo returns the value of DepositCycleInfo.
func (s *ExaminationInfoV2RetrievingResponse) GetDepositCycleInfo() OptExaminationInfoV2RetrievingResponseDepositCycleInfo {
	return s.DepositCycleInfo
}

// SetStatusCode sets the value of StatusCode.
func (s *ExaminationInfoV2RetrievingResponse) SetStatusCode(val OptExaminationInfoV2RetrievingResponseStatusCode) {
	s.StatusCode = val
}

// SetContractInfo sets the value of ContractInfo.
func (s *ExaminationInfoV2RetrievingResponse) SetContractInfo(val OptExaminationInfoV2RetrievingResponseContractInfo) {
	s.ContractInfo = val
}

// SetShopInfo sets the value of ShopInfo.
func (s *ExaminationInfoV2RetrievingResponse) SetShopInfo(val OptExaminationInfoV2RetrievingResponseShopInfo) {
	s.ShopInfo = val
}

// SetBankAccountInfo sets the value of BankAccountInfo.
func (s *ExaminationInfoV2RetrievingResponse) SetBankAccountInfo(val OptExaminationInfoV2RetrievingResponseBankAccountInfo) {
	s.BankAccountInfo = val
}

// SetDepositCycleInfo sets the value of DepositCycleInfo.
func (s *ExaminationInfoV2RetrievingResponse) SetDepositCycleInfo(val OptExaminationInfoV2RetrievingResponseDepositCycleInfo) {
	s.DepositCycleInfo = val
}

func (*ExaminationInfoV2RetrievingResponse) retrieveTenantExaminationInfoV2Res() {}

type ExaminationInfoV2RetrievingResponseBankAccountInfo struct {
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode string `json:"branch_code"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber string `json:"account_number"`
	// 口座名義.
	AccountName string `json:"account_name"`
}

// GetBankCode returns the value of BankCode.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) GetBranchCode() string {
	return s.BranchCode
}

// GetAccountKind returns the value of AccountKind.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) GetAccountKind() ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) GetAccountNumber() string {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) GetAccountName() string {
	return s.AccountName
}

// SetBankCode sets the value of BankCode.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) SetBranchCode(val string) {
	s.BranchCode = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) SetAccountKind(val ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) SetAccountNumber(val string) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) SetAccountName(val string) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind float64

const (
	ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind0 ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind = 0
	ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind1 ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind = 1
)

// AllValues returns all ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind values.
func (ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind) AllValues() []ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind {
	return []ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind{
		ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind0,
		ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind1,
	}
}

type ExaminationInfoV2RetrievingResponseContractInfo struct {
	// 代表者 姓
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	RepresentativeLastName NilString `json:"representative_last_name"`
	// 代表者 姓（カナ）\
	// 形式： 全角カナ.
	RepresentativeLastNameKana NilString `json:"representative_last_name_kana"`
	// 代表者 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	RepresentativeFirstName NilString `json:"representative_first_name"`
	// 代表者 名（カナ）\
	// 形式： 全角カナ.
	RepresentativeFirstNameKana NilString `json:"representative_first_name_kana"`
	// 代表者 住所 郵便番号\
	// 形式：`xxx-xxxx`.
	RepresentativePostalCode NilString `json:"representative_postal_code"`
	// 代表者 住所 都道府県\
	// 形式： 漢字.
	RepresentativePrefecture NilString `json:"representative_prefecture"`
	// 代表者 住所 都道府県（カナ）\
	// 形式： 全角カナ.
	RepresentativePrefectureKana NilString `json:"representative_prefecture_kana"`
	// 代表者 住所 市区町村\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressMunicipality NilString `json:"representative_address_municipality"`
	// 代表者 住所 市区町村（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressMunicipalityKana NilString `json:"representative_address_municipality_kana"`
	// 代表者 住所 町域\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressSection NilString `json:"representative_address_section"`
	// 代表者 住所 町域（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressSectionKana NilString `json:"representative_address_section_kana"`
	// 代表者 住所 番地\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressChrome NilString `json:"representative_address_chrome"`
	// 代表者 住所 番地（カナ）.
	RepresentativeAddressChromeKana NilString `json:"representative_address_chrome_kana"`
	// 代表者 住所 建物名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressBuildingName OptNilString `json:"representative_address_building_name"`
	// 代表者 住所 建物名（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressBuildingNameKana OptNilString `json:"representative_address_building_name_kana"`
	// 代表者 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	RepresentativeTel NilString `json:"representative_tel"`
	// 代表者 生年月日\
	// \
	// 形式：`yyyy/MM/dd`.
	RepresentativeBirthday NilString `json:"representative_birthday"`
	// 代表者 性別
	// - `0`: 男性
	// - `1`: 女性.
	RepresentativeGender NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender `json:"representative_gender"`
	// 担当者1 姓\
	// 形式： 漢字/ひらがな/カタカナ/半角英字\
	// \
	// fincodeは担当者1,
	// 2宛てに審査結果の通知や審査保留対応の連絡などを行います。.
	Staff1LastName NilString `json:"staff1_last_name"`
	// 担当者1 姓（カナ）\
	// 形式： 全角カナ.
	Staff1LastNameKana NilString `json:"staff1_last_name_kana"`
	// 担当者1 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff1FirstName NilString `json:"staff1_first_name"`
	// 担当者1 名（カナ）\
	// 形式： 全角カナ.
	Staff1FirstNameKana NilString `json:"staff1_first_name_kana"`
	// 担当者1 会社名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff1CompanyName NilString `json:"staff1_company_name"`
	// 担当者1 部署名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff1Belongs NilString `json:"staff1_belongs"`
	// 担当者1 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	Staff1Tel NilString `json:"staff1_tel"`
	// 担当者1 メールアドレス\
	// 形式： RFC 5322.
	Staff1Mail NilString `json:"staff1_mail"`
	// 担当者2 姓\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff2LastName OptNilString `json:"staff2_last_name"`
	// 担当者2 姓（カナ）\
	// 形式： 全角カナ.
	Staff2LastNameKana OptNilString `json:"staff2_last_name_kana"`
	// 担当者2 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff2FirstName OptNilString `json:"staff2_first_name"`
	// 担当者2 名（カナ）\
	// 形式： 全角カナ.
	Staff2FirstNameKana OptNilString `json:"staff2_first_name_kana"`
	// 担当者2 会社名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff2CompanyName OptNilString `json:"staff2_company_name"`
	// 担当者2 部署名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff2Belongs OptNilString `json:"staff2_belongs"`
	// 担当者2 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	Staff2Tel OptNilString `json:"staff2_tel"`
	// 担当者2 メールアドレス\
	// 形式： RFC 5322.
	Staff2Mail OptNilString `json:"staff2_mail"`
	// 事業形態\
	// \
	// - `true`: 法人\
	// - `false`: 個人事業主.
	Corporate NilBool `json:"corporate"`
	// 法人情報
	// \
	// `corporate`が`true`のとき必須.
	CorporateInfo OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo `json:"corporate_info"`
}

// GetRepresentativeLastName returns the value of RepresentativeLastName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeLastName() NilString {
	return s.RepresentativeLastName
}

// GetRepresentativeLastNameKana returns the value of RepresentativeLastNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeLastNameKana() NilString {
	return s.RepresentativeLastNameKana
}

// GetRepresentativeFirstName returns the value of RepresentativeFirstName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeFirstName() NilString {
	return s.RepresentativeFirstName
}

// GetRepresentativeFirstNameKana returns the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeFirstNameKana() NilString {
	return s.RepresentativeFirstNameKana
}

// GetRepresentativePostalCode returns the value of RepresentativePostalCode.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativePostalCode() NilString {
	return s.RepresentativePostalCode
}

// GetRepresentativePrefecture returns the value of RepresentativePrefecture.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativePrefecture() NilString {
	return s.RepresentativePrefecture
}

// GetRepresentativePrefectureKana returns the value of RepresentativePrefectureKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativePrefectureKana() NilString {
	return s.RepresentativePrefectureKana
}

// GetRepresentativeAddressMunicipality returns the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressMunicipality() NilString {
	return s.RepresentativeAddressMunicipality
}

// GetRepresentativeAddressMunicipalityKana returns the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressMunicipalityKana() NilString {
	return s.RepresentativeAddressMunicipalityKana
}

// GetRepresentativeAddressSection returns the value of RepresentativeAddressSection.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressSection() NilString {
	return s.RepresentativeAddressSection
}

// GetRepresentativeAddressSectionKana returns the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressSectionKana() NilString {
	return s.RepresentativeAddressSectionKana
}

// GetRepresentativeAddressChrome returns the value of RepresentativeAddressChrome.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressChrome() NilString {
	return s.RepresentativeAddressChrome
}

// GetRepresentativeAddressChromeKana returns the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressChromeKana() NilString {
	return s.RepresentativeAddressChromeKana
}

// GetRepresentativeAddressBuildingName returns the value of RepresentativeAddressBuildingName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressBuildingName() OptNilString {
	return s.RepresentativeAddressBuildingName
}

// GetRepresentativeAddressBuildingNameKana returns the value of RepresentativeAddressBuildingNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeAddressBuildingNameKana() OptNilString {
	return s.RepresentativeAddressBuildingNameKana
}

// GetRepresentativeTel returns the value of RepresentativeTel.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeTel() NilString {
	return s.RepresentativeTel
}

// GetRepresentativeBirthday returns the value of RepresentativeBirthday.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeBirthday() NilString {
	return s.RepresentativeBirthday
}

// GetRepresentativeGender returns the value of RepresentativeGender.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetRepresentativeGender() NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender {
	return s.RepresentativeGender
}

// GetStaff1LastName returns the value of Staff1LastName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1LastName() NilString {
	return s.Staff1LastName
}

// GetStaff1LastNameKana returns the value of Staff1LastNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1LastNameKana() NilString {
	return s.Staff1LastNameKana
}

// GetStaff1FirstName returns the value of Staff1FirstName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1FirstName() NilString {
	return s.Staff1FirstName
}

// GetStaff1FirstNameKana returns the value of Staff1FirstNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1FirstNameKana() NilString {
	return s.Staff1FirstNameKana
}

// GetStaff1CompanyName returns the value of Staff1CompanyName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1CompanyName() NilString {
	return s.Staff1CompanyName
}

// GetStaff1Belongs returns the value of Staff1Belongs.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1Belongs() NilString {
	return s.Staff1Belongs
}

// GetStaff1Tel returns the value of Staff1Tel.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1Tel() NilString {
	return s.Staff1Tel
}

// GetStaff1Mail returns the value of Staff1Mail.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff1Mail() NilString {
	return s.Staff1Mail
}

// GetStaff2LastName returns the value of Staff2LastName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2LastName() OptNilString {
	return s.Staff2LastName
}

// GetStaff2LastNameKana returns the value of Staff2LastNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2LastNameKana() OptNilString {
	return s.Staff2LastNameKana
}

// GetStaff2FirstName returns the value of Staff2FirstName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2FirstName() OptNilString {
	return s.Staff2FirstName
}

// GetStaff2FirstNameKana returns the value of Staff2FirstNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2FirstNameKana() OptNilString {
	return s.Staff2FirstNameKana
}

// GetStaff2CompanyName returns the value of Staff2CompanyName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2CompanyName() OptNilString {
	return s.Staff2CompanyName
}

// GetStaff2Belongs returns the value of Staff2Belongs.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2Belongs() OptNilString {
	return s.Staff2Belongs
}

// GetStaff2Tel returns the value of Staff2Tel.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2Tel() OptNilString {
	return s.Staff2Tel
}

// GetStaff2Mail returns the value of Staff2Mail.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetStaff2Mail() OptNilString {
	return s.Staff2Mail
}

// GetCorporate returns the value of Corporate.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetCorporate() NilBool {
	return s.Corporate
}

// GetCorporateInfo returns the value of CorporateInfo.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) GetCorporateInfo() OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo {
	return s.CorporateInfo
}

// SetRepresentativeLastName sets the value of RepresentativeLastName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeLastName(val NilString) {
	s.RepresentativeLastName = val
}

// SetRepresentativeLastNameKana sets the value of RepresentativeLastNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeLastNameKana(val NilString) {
	s.RepresentativeLastNameKana = val
}

// SetRepresentativeFirstName sets the value of RepresentativeFirstName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeFirstName(val NilString) {
	s.RepresentativeFirstName = val
}

// SetRepresentativeFirstNameKana sets the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeFirstNameKana(val NilString) {
	s.RepresentativeFirstNameKana = val
}

// SetRepresentativePostalCode sets the value of RepresentativePostalCode.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativePostalCode(val NilString) {
	s.RepresentativePostalCode = val
}

// SetRepresentativePrefecture sets the value of RepresentativePrefecture.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativePrefecture(val NilString) {
	s.RepresentativePrefecture = val
}

// SetRepresentativePrefectureKana sets the value of RepresentativePrefectureKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativePrefectureKana(val NilString) {
	s.RepresentativePrefectureKana = val
}

// SetRepresentativeAddressMunicipality sets the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressMunicipality(val NilString) {
	s.RepresentativeAddressMunicipality = val
}

// SetRepresentativeAddressMunicipalityKana sets the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressMunicipalityKana(val NilString) {
	s.RepresentativeAddressMunicipalityKana = val
}

// SetRepresentativeAddressSection sets the value of RepresentativeAddressSection.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressSection(val NilString) {
	s.RepresentativeAddressSection = val
}

// SetRepresentativeAddressSectionKana sets the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressSectionKana(val NilString) {
	s.RepresentativeAddressSectionKana = val
}

// SetRepresentativeAddressChrome sets the value of RepresentativeAddressChrome.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressChrome(val NilString) {
	s.RepresentativeAddressChrome = val
}

// SetRepresentativeAddressChromeKana sets the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressChromeKana(val NilString) {
	s.RepresentativeAddressChromeKana = val
}

// SetRepresentativeAddressBuildingName sets the value of RepresentativeAddressBuildingName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressBuildingName(val OptNilString) {
	s.RepresentativeAddressBuildingName = val
}

// SetRepresentativeAddressBuildingNameKana sets the value of RepresentativeAddressBuildingNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeAddressBuildingNameKana(val OptNilString) {
	s.RepresentativeAddressBuildingNameKana = val
}

// SetRepresentativeTel sets the value of RepresentativeTel.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeTel(val NilString) {
	s.RepresentativeTel = val
}

// SetRepresentativeBirthday sets the value of RepresentativeBirthday.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeBirthday(val NilString) {
	s.RepresentativeBirthday = val
}

// SetRepresentativeGender sets the value of RepresentativeGender.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetRepresentativeGender(val NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) {
	s.RepresentativeGender = val
}

// SetStaff1LastName sets the value of Staff1LastName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1LastName(val NilString) {
	s.Staff1LastName = val
}

// SetStaff1LastNameKana sets the value of Staff1LastNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1LastNameKana(val NilString) {
	s.Staff1LastNameKana = val
}

// SetStaff1FirstName sets the value of Staff1FirstName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1FirstName(val NilString) {
	s.Staff1FirstName = val
}

// SetStaff1FirstNameKana sets the value of Staff1FirstNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1FirstNameKana(val NilString) {
	s.Staff1FirstNameKana = val
}

// SetStaff1CompanyName sets the value of Staff1CompanyName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1CompanyName(val NilString) {
	s.Staff1CompanyName = val
}

// SetStaff1Belongs sets the value of Staff1Belongs.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1Belongs(val NilString) {
	s.Staff1Belongs = val
}

// SetStaff1Tel sets the value of Staff1Tel.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1Tel(val NilString) {
	s.Staff1Tel = val
}

// SetStaff1Mail sets the value of Staff1Mail.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff1Mail(val NilString) {
	s.Staff1Mail = val
}

// SetStaff2LastName sets the value of Staff2LastName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2LastName(val OptNilString) {
	s.Staff2LastName = val
}

// SetStaff2LastNameKana sets the value of Staff2LastNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2LastNameKana(val OptNilString) {
	s.Staff2LastNameKana = val
}

// SetStaff2FirstName sets the value of Staff2FirstName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2FirstName(val OptNilString) {
	s.Staff2FirstName = val
}

// SetStaff2FirstNameKana sets the value of Staff2FirstNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2FirstNameKana(val OptNilString) {
	s.Staff2FirstNameKana = val
}

// SetStaff2CompanyName sets the value of Staff2CompanyName.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2CompanyName(val OptNilString) {
	s.Staff2CompanyName = val
}

// SetStaff2Belongs sets the value of Staff2Belongs.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2Belongs(val OptNilString) {
	s.Staff2Belongs = val
}

// SetStaff2Tel sets the value of Staff2Tel.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2Tel(val OptNilString) {
	s.Staff2Tel = val
}

// SetStaff2Mail sets the value of Staff2Mail.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetStaff2Mail(val OptNilString) {
	s.Staff2Mail = val
}

// SetCorporate sets the value of Corporate.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetCorporate(val NilBool) {
	s.Corporate = val
}

// SetCorporateInfo sets the value of CorporateInfo.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) SetCorporateInfo(val OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) {
	s.CorporateInfo = val
}

type ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo struct {
	// 法人番号.
	CorporateNumber NilString `json:"corporate_number"`
	// 法人名.
	CorporateName string `json:"corporate_name"`
	// 法人名（カナ）.
	CorporateNameKana string `json:"corporate_name_kana"`
	// 企業サイトURL.
	Hp OptNilString `json:"hp"`
	// 資本金.
	Capital NilFloat64 `json:"capital"`
	// 設立日.
	EstablishedAt NilString `json:"established_at"`
	// 年商.
	YearlySales NilFloat64 `json:"yearly_sales"`
	// 事業内容.
	BusinessDetails NilString `json:"business_details"`
	// 会社住所 郵便番号\
	// 形式： 半角数字（ハイフンあり）.
	CompanyPostalCode NilString `json:"company_postal_code"`
	// 会社住所 都道府県\
	// 形式： 漢字.
	CompanyPrefecture NilString `json:"company_prefecture"`
	// 会社住所 都道府県（カナ）\
	// 形式： 全角カタカナ.
	CompanyPrefectureKana NilString `json:"company_prefecture_kana"`
	// 会社住所 市区町村\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressMunicipality NilString `json:"company_address_municipality"`
	// 会社住所 市区町村（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressMunicipalityKana NilString `json:"company_address_municipality_kana"`
	// 会社住所 町域\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressSection NilString `json:"company_address_section"`
	// 会社住所 町域（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressSectionKana NilString `json:"company_address_section_kana"`
	// 会社住所 番地\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressChrome NilString `json:"company_address_chrome"`
	// 会社住所 番地（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressChromeKana NilString `json:"company_address_chrome_kana"`
	// 会社住所 ビル名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressBuildingName OptNilString `json:"company_address_building_name"`
	// 会社住所 ビル名（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressBuildingNameKana OptNilString `json:"company_address_building_name_kana"`
	// 会社情報 電話番号\
	// 形式： 半角数字（ハイフンなし）.
	CompanyTel NilString `json:"company_tel"`
}

// GetCorporateNumber returns the value of CorporateNumber.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCorporateNumber() NilString {
	return s.CorporateNumber
}

// GetCorporateName returns the value of CorporateName.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCorporateName() string {
	return s.CorporateName
}

// GetCorporateNameKana returns the value of CorporateNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCorporateNameKana() string {
	return s.CorporateNameKana
}

// GetHp returns the value of Hp.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetHp() OptNilString {
	return s.Hp
}

// GetCapital returns the value of Capital.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCapital() NilFloat64 {
	return s.Capital
}

// GetEstablishedAt returns the value of EstablishedAt.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetEstablishedAt() NilString {
	return s.EstablishedAt
}

// GetYearlySales returns the value of YearlySales.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetYearlySales() NilFloat64 {
	return s.YearlySales
}

// GetBusinessDetails returns the value of BusinessDetails.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetBusinessDetails() NilString {
	return s.BusinessDetails
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyPostalCode() NilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyPrefecture() NilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyPrefectureKana() NilString {
	return s.CompanyPrefectureKana
}

// GetCompanyAddressMunicipality returns the value of CompanyAddressMunicipality.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressMunicipality() NilString {
	return s.CompanyAddressMunicipality
}

// GetCompanyAddressMunicipalityKana returns the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressMunicipalityKana() NilString {
	return s.CompanyAddressMunicipalityKana
}

// GetCompanyAddressSection returns the value of CompanyAddressSection.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressSection() NilString {
	return s.CompanyAddressSection
}

// GetCompanyAddressSectionKana returns the value of CompanyAddressSectionKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressSectionKana() NilString {
	return s.CompanyAddressSectionKana
}

// GetCompanyAddressChrome returns the value of CompanyAddressChrome.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressChrome() NilString {
	return s.CompanyAddressChrome
}

// GetCompanyAddressChromeKana returns the value of CompanyAddressChromeKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressChromeKana() NilString {
	return s.CompanyAddressChromeKana
}

// GetCompanyAddressBuildingName returns the value of CompanyAddressBuildingName.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressBuildingName() OptNilString {
	return s.CompanyAddressBuildingName
}

// GetCompanyAddressBuildingNameKana returns the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyAddressBuildingNameKana() OptNilString {
	return s.CompanyAddressBuildingNameKana
}

// GetCompanyTel returns the value of CompanyTel.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) GetCompanyTel() NilString {
	return s.CompanyTel
}

// SetCorporateNumber sets the value of CorporateNumber.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCorporateNumber(val NilString) {
	s.CorporateNumber = val
}

// SetCorporateName sets the value of CorporateName.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCorporateName(val string) {
	s.CorporateName = val
}

// SetCorporateNameKana sets the value of CorporateNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCorporateNameKana(val string) {
	s.CorporateNameKana = val
}

// SetHp sets the value of Hp.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetHp(val OptNilString) {
	s.Hp = val
}

// SetCapital sets the value of Capital.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCapital(val NilFloat64) {
	s.Capital = val
}

// SetEstablishedAt sets the value of EstablishedAt.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetEstablishedAt(val NilString) {
	s.EstablishedAt = val
}

// SetYearlySales sets the value of YearlySales.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetYearlySales(val NilFloat64) {
	s.YearlySales = val
}

// SetBusinessDetails sets the value of BusinessDetails.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetBusinessDetails(val NilString) {
	s.BusinessDetails = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyPostalCode(val NilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyPrefecture(val NilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyPrefectureKana(val NilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyAddressMunicipality sets the value of CompanyAddressMunicipality.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressMunicipality(val NilString) {
	s.CompanyAddressMunicipality = val
}

// SetCompanyAddressMunicipalityKana sets the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressMunicipalityKana(val NilString) {
	s.CompanyAddressMunicipalityKana = val
}

// SetCompanyAddressSection sets the value of CompanyAddressSection.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressSection(val NilString) {
	s.CompanyAddressSection = val
}

// SetCompanyAddressSectionKana sets the value of CompanyAddressSectionKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressSectionKana(val NilString) {
	s.CompanyAddressSectionKana = val
}

// SetCompanyAddressChrome sets the value of CompanyAddressChrome.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressChrome(val NilString) {
	s.CompanyAddressChrome = val
}

// SetCompanyAddressChromeKana sets the value of CompanyAddressChromeKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressChromeKana(val NilString) {
	s.CompanyAddressChromeKana = val
}

// SetCompanyAddressBuildingName sets the value of CompanyAddressBuildingName.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressBuildingName(val OptNilString) {
	s.CompanyAddressBuildingName = val
}

// SetCompanyAddressBuildingNameKana sets the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyAddressBuildingNameKana(val OptNilString) {
	s.CompanyAddressBuildingNameKana = val
}

// SetCompanyTel sets the value of CompanyTel.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetCompanyTel(val NilString) {
	s.CompanyTel = val
}

// 代表者 性別
// - `0`: 男性
// - `1`: 女性.
type ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender int

const (
	ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender0 ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender = 0
	ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender1 ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender = 1
)

// AllValues returns all ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender values.
func (ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) AllValues() []ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender {
	return []ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender{
		ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender0,
		ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender1,
	}
}

type ExaminationInfoV2RetrievingResponseDepositCycleInfo struct {
	DepositCycleMasterID ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID `json:"deposit_cycle_master_id"`
}

// GetDepositCycleMasterID returns the value of DepositCycleMasterID.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) GetDepositCycleMasterID() ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID {
	return s.DepositCycleMasterID
}

// SetDepositCycleMasterID sets the value of DepositCycleMasterID.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) SetDepositCycleMasterID(val ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID) {
	s.DepositCycleMasterID = val
}

// 入金サイクルマスタID\
// 入金サイクルについては[Docs > 精算管理 >
// クレジットカード決済の入金サイクル](https://docs.fincode.
// jp/business_management/deposit)を参照できます。
// - `1`: スタンダード（月1回, 月末締め翌月末入金）
// - `2`: スタンダード（月2回, 15日&月末締め15日後入金）.
type ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID int

const (
	ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID1 ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID = 1
	ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID2 ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID = 2
)

// AllValues returns all ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID values.
func (ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID) AllValues() []ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID {
	return []ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID{
		ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID1,
		ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID2,
	}
}

type ExaminationInfoV2RetrievingResponseShopInfo struct {
	// Fincodeにおけるショップ名.
	ShopName string `json:"shop_name"`
	// Fincodeにおけるショップ名（カナ）.
	ShopNameKana string `json:"shop_name_kana"`
	// Fincodeにおけるショップ名（英語）.
	ShopNameEn string `json:"shop_name_en"`
	// 購入者向けサポート窓口 メールアドレス\
	// 形式： RFC 5322.
	SupportMail NilString `json:"support_mail"`
	// 購入者向けサポート窓口 電話番号\
	// 形式： 電話番号（ハイフンなし）.
	SupportTel NilString `json:"support_tel"`
	// 1回の決済における金額（単価）\
	// \
	// 例： `1000`（1000円）.
	UnitPrice OptNilFloat64 `json:"unit_price"`
	// Fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明
	// - `true`: fincode審査に時間がかかるコンテンツを取り扱う
	// - `false`: fincode審査に時間がかかるコンテンツを取り扱わない
	// 以下の商材を取り扱う場合は`true`を指定する必要があります。
	// - 呉服
	// - コンサルディングサービス
	// - エステ、美容サロン、美容医療
	// - スポーツ施設・フィットネスクラブ
	// - カルチャースクール・通信講座
	// - データ販売
	// - 情報詳細（情報の内容自体が商品となるもの）
	// - 占い
	// - サプリメント・健康食品
	// - 美容品・化粧品
	// - カツラ
	// - 旅行業に該当するサービス
	// - タバコ・CBD
	// - 寄付金.
	DealsLongApplyContent NilBool `json:"deals_long_apply_content"`
	// Fincodeで取扱不可の商材を取り扱わないことの表明
	// - `true`: 取扱不可の商材を取り扱う予定はない
	// - `false`: 取扱不可の商材を取り扱う予定がある
	// fincodeの禁止商材は以下の通りです。
	// - 金融行為（クレジットカードショッピング枠の現金化等）
	// -
	// 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券
	// - 賭博、ギャンブル
	// - RMT（リアルマネートレーディング）
	// - ペット等の生き物全般（※標本・剥製も含む）
	// - お布施
	// - 危険ドラッグ、デザイナーズドラッグ
	// -
	// 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等）
	// - 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの
	// - 公序良俗に反するもの（アダルト、出会い系サイトを含む）
	// -
	// 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法）.
	DealsInsecureContent NilBool `json:"deals_insecure_content"`
	// 改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明
	// - `true`: 改正割賦販売法に基づく訴訟敗訴歴がある
	// - `false`: 改正割賦販売法に基づく訴訟敗訴歴はない.
	LostTrial    NilBool                                                 `json:"lost_trial"`
	UseOfFincode ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode `json:"use_of_fincode"`
	// Webサイトの公開状況\
	// \
	// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。\
	// `usage_of_fincode.used_on_web`が`true`の場合、指定必須です。
	// - `true`: fincode審査チームがサイトを閲覧可能
	// - `false`: fincode審査チームがサイトを閲覧不可能.
	SitePublished OptNilBool `json:"site_published"`
	// Webサイト情報\
	// \
	// fincode審査チームが審査上確認をする、fincodeによる決済を行うWebサイトの情報.
	SiteInfo OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo `json:"site_info"`
	// プリペイドポイントの有無\
	// \
	// ショップがプリペイドポイントを導入しているかどうか.
	PrepaidPoint     OptNilBool                                                     `json:"prepaid_point"`
	PrepaidPointInfo OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo `json:"prepaid_point_info"`
	// 商材情報.
	Provides ExaminationInfoV2RetrievingResponseShopInfoProvides `json:"provides"`
	// 取扱商材の説明\
	// \
	// ショップの提供する商材についての説明.
	ContentDescription NilString `json:"content_description"`
	// 物販商材 商材説明.
	ProductContentInfo OptContentInfoV2 `json:"product_content_info"`
	// サービス商材 商材説明.
	ServiceContentInfo OptContentInfoV2 `json:"service_content_info"`
	// デジタルコンテンツ 商材説明.
	DigitalContentInfo OptContentInfoV2 `json:"digital_content_info"`
	// 追加提出情報\
	// \
	// 審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\
	// 特定商取引法に基づく表示情報を基に値を設定してください。.
	AdditionalInfo OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo `json:"additional_info"`
}

// GetShopName returns the value of ShopName.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetShopName() string {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetShopNameKana() string {
	return s.ShopNameKana
}

// GetShopNameEn returns the value of ShopNameEn.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetShopNameEn() string {
	return s.ShopNameEn
}

// GetSupportMail returns the value of SupportMail.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetSupportMail() NilString {
	return s.SupportMail
}

// GetSupportTel returns the value of SupportTel.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetSupportTel() NilString {
	return s.SupportTel
}

// GetUnitPrice returns the value of UnitPrice.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetUnitPrice() OptNilFloat64 {
	return s.UnitPrice
}

// GetDealsLongApplyContent returns the value of DealsLongApplyContent.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetDealsLongApplyContent() NilBool {
	return s.DealsLongApplyContent
}

// GetDealsInsecureContent returns the value of DealsInsecureContent.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetDealsInsecureContent() NilBool {
	return s.DealsInsecureContent
}

// GetLostTrial returns the value of LostTrial.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetLostTrial() NilBool {
	return s.LostTrial
}

// GetUseOfFincode returns the value of UseOfFincode.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetUseOfFincode() ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode {
	return s.UseOfFincode
}

// GetSitePublished returns the value of SitePublished.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetSitePublished() OptNilBool {
	return s.SitePublished
}

// GetSiteInfo returns the value of SiteInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetSiteInfo() OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo {
	return s.SiteInfo
}

// GetPrepaidPoint returns the value of PrepaidPoint.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetPrepaidPoint() OptNilBool {
	return s.PrepaidPoint
}

// GetPrepaidPointInfo returns the value of PrepaidPointInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetPrepaidPointInfo() OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo {
	return s.PrepaidPointInfo
}

// GetProvides returns the value of Provides.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetProvides() ExaminationInfoV2RetrievingResponseShopInfoProvides {
	return s.Provides
}

// GetContentDescription returns the value of ContentDescription.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetContentDescription() NilString {
	return s.ContentDescription
}

// GetProductContentInfo returns the value of ProductContentInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetProductContentInfo() OptContentInfoV2 {
	return s.ProductContentInfo
}

// GetServiceContentInfo returns the value of ServiceContentInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetServiceContentInfo() OptContentInfoV2 {
	return s.ServiceContentInfo
}

// GetDigitalContentInfo returns the value of DigitalContentInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetDigitalContentInfo() OptContentInfoV2 {
	return s.DigitalContentInfo
}

// GetAdditionalInfo returns the value of AdditionalInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) GetAdditionalInfo() OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo {
	return s.AdditionalInfo
}

// SetShopName sets the value of ShopName.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetShopName(val string) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetShopNameKana(val string) {
	s.ShopNameKana = val
}

// SetShopNameEn sets the value of ShopNameEn.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetShopNameEn(val string) {
	s.ShopNameEn = val
}

// SetSupportMail sets the value of SupportMail.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetSupportMail(val NilString) {
	s.SupportMail = val
}

// SetSupportTel sets the value of SupportTel.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetSupportTel(val NilString) {
	s.SupportTel = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetUnitPrice(val OptNilFloat64) {
	s.UnitPrice = val
}

// SetDealsLongApplyContent sets the value of DealsLongApplyContent.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetDealsLongApplyContent(val NilBool) {
	s.DealsLongApplyContent = val
}

// SetDealsInsecureContent sets the value of DealsInsecureContent.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetDealsInsecureContent(val NilBool) {
	s.DealsInsecureContent = val
}

// SetLostTrial sets the value of LostTrial.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetLostTrial(val NilBool) {
	s.LostTrial = val
}

// SetUseOfFincode sets the value of UseOfFincode.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetUseOfFincode(val ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) {
	s.UseOfFincode = val
}

// SetSitePublished sets the value of SitePublished.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetSitePublished(val OptNilBool) {
	s.SitePublished = val
}

// SetSiteInfo sets the value of SiteInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetSiteInfo(val OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) {
	s.SiteInfo = val
}

// SetPrepaidPoint sets the value of PrepaidPoint.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetPrepaidPoint(val OptNilBool) {
	s.PrepaidPoint = val
}

// SetPrepaidPointInfo sets the value of PrepaidPointInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetPrepaidPointInfo(val OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) {
	s.PrepaidPointInfo = val
}

// SetProvides sets the value of Provides.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetProvides(val ExaminationInfoV2RetrievingResponseShopInfoProvides) {
	s.Provides = val
}

// SetContentDescription sets the value of ContentDescription.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetContentDescription(val NilString) {
	s.ContentDescription = val
}

// SetProductContentInfo sets the value of ProductContentInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetProductContentInfo(val OptContentInfoV2) {
	s.ProductContentInfo = val
}

// SetServiceContentInfo sets the value of ServiceContentInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetServiceContentInfo(val OptContentInfoV2) {
	s.ServiceContentInfo = val
}

// SetDigitalContentInfo sets the value of DigitalContentInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetDigitalContentInfo(val OptContentInfoV2) {
	s.DigitalContentInfo = val
}

// SetAdditionalInfo sets the value of AdditionalInfo.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) SetAdditionalInfo(val OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) {
	s.AdditionalInfo = val
}

// 追加提出情報\
// \
// 審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\
// 特定商取引法に基づく表示情報を基に値を設定してください。.
type ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo struct {
	// 販売責任者氏名\
	// \
	// ショップの販売責任者の氏名.
	ShopSalesManagerName OptNilString `json:"shop_sales_manager_name"`
	// 屋号・サービス名\
	// \
	// ショップのサービスの名称.
	ShopServoceName NilString `json:"shop_servoce_name"`
	// 支払い方法\
	// \
	// ショップで利用可能な支払い方法.
	ShopHowToPay NilString `json:"shop_how_to_pay"`
	// 商品代金以外の料金の説明\
	// \
	// 送料、手数料、消費税などの商品代金以外の料金についての説明.
	ShopChargeDescription OptNilString `json:"shop_charge_description"`
	// 商品の引き渡し時期\
	// \
	// 商品の引き渡し時期についての説明.
	ShopProductDeliveryTime NilString `json:"shop_product_delivery_time"`
	// 返品・交換に関する条件\
	// \
	// 返品・交換に関する条件についての説明.
	ShopReturnGoodsHandingConditions NilString `json:"shop_return_goods_handing_conditions"`
}

// GetShopSalesManagerName returns the value of ShopSalesManagerName.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) GetShopSalesManagerName() OptNilString {
	return s.ShopSalesManagerName
}

// GetShopServoceName returns the value of ShopServoceName.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) GetShopServoceName() NilString {
	return s.ShopServoceName
}

// GetShopHowToPay returns the value of ShopHowToPay.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) GetShopHowToPay() NilString {
	return s.ShopHowToPay
}

// GetShopChargeDescription returns the value of ShopChargeDescription.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) GetShopChargeDescription() OptNilString {
	return s.ShopChargeDescription
}

// GetShopProductDeliveryTime returns the value of ShopProductDeliveryTime.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) GetShopProductDeliveryTime() NilString {
	return s.ShopProductDeliveryTime
}

// GetShopReturnGoodsHandingConditions returns the value of ShopReturnGoodsHandingConditions.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) GetShopReturnGoodsHandingConditions() NilString {
	return s.ShopReturnGoodsHandingConditions
}

// SetShopSalesManagerName sets the value of ShopSalesManagerName.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetShopSalesManagerName(val OptNilString) {
	s.ShopSalesManagerName = val
}

// SetShopServoceName sets the value of ShopServoceName.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetShopServoceName(val NilString) {
	s.ShopServoceName = val
}

// SetShopHowToPay sets the value of ShopHowToPay.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetShopHowToPay(val NilString) {
	s.ShopHowToPay = val
}

// SetShopChargeDescription sets the value of ShopChargeDescription.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetShopChargeDescription(val OptNilString) {
	s.ShopChargeDescription = val
}

// SetShopProductDeliveryTime sets the value of ShopProductDeliveryTime.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetShopProductDeliveryTime(val NilString) {
	s.ShopProductDeliveryTime = val
}

// SetShopReturnGoodsHandingConditions sets the value of ShopReturnGoodsHandingConditions.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetShopReturnGoodsHandingConditions(val NilString) {
	s.ShopReturnGoodsHandingConditions = val
}

type ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo struct {
	// ポイント利用方法\
	// \
	// プリペイドポイントの利用方法.
	HowToUse OptNilString `json:"how_to_use"`
	// ポイント有効期限について\
	// \
	// プリペイドポイントの有効期限について.
	AboutExpiration OptNilString `json:"about_expiration"`
}

// GetHowToUse returns the value of HowToUse.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) GetHowToUse() OptNilString {
	return s.HowToUse
}

// GetAboutExpiration returns the value of AboutExpiration.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) GetAboutExpiration() OptNilString {
	return s.AboutExpiration
}

// SetHowToUse sets the value of HowToUse.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) SetHowToUse(val OptNilString) {
	s.HowToUse = val
}

// SetAboutExpiration sets the value of AboutExpiration.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) SetAboutExpiration(val OptNilString) {
	s.AboutExpiration = val
}

// 商材情報.
type ExaminationInfoV2RetrievingResponseShopInfoProvides struct {
	// 物販商材 提供有無\
	// \
	// ショップが物品販売を行うかどうか.
	Product OptNilBool `json:"product"`
	// サービス商材 提供有無\
	// \
	// ショップがサービス提供を行うかどうか.
	Service OptNilBool `json:"service"`
	// デジタルコンテンツ 提供有無\
	// \
	// ショップがデジタルコンテンツ販売を行うかどうか.
	DigitalContent OptNilBool `json:"digital_content"`
}

// GetProduct returns the value of Product.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) GetProduct() OptNilBool {
	return s.Product
}

// GetService returns the value of Service.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) GetService() OptNilBool {
	return s.Service
}

// GetDigitalContent returns the value of DigitalContent.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) GetDigitalContent() OptNilBool {
	return s.DigitalContent
}

// SetProduct sets the value of Product.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) SetProduct(val OptNilBool) {
	s.Product = val
}

// SetService sets the value of Service.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) SetService(val OptNilBool) {
	s.Service = val
}

// SetDigitalContent sets the value of DigitalContent.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) SetDigitalContent(val OptNilBool) {
	s.DigitalContent = val
}

// Webサイト情報\
// \
// fincode審査チームが審査上確認をする、fincodeによる決済を行うWebサイトの情報.
type ExaminationInfoV2RetrievingResponseShopInfoSiteInfo struct {
	// WebサイトURL\
	// \
	// fincode審査チームがサイトを閲覧するためのURL.
	URL NilString `json:"url"`
	// ログイン情報\
	// \
	// fincode審査チームがサイトを閲覧するためのログイン情報.
	Credential OptNilString `json:"credential"`
}

// GetURL returns the value of URL.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) GetURL() NilString {
	return s.URL
}

// GetCredential returns the value of Credential.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) GetCredential() OptNilString {
	return s.Credential
}

// SetURL sets the value of URL.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) SetURL(val NilString) {
	s.URL = val
}

// SetCredential sets the value of Credential.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) SetCredential(val OptNilString) {
	s.Credential = val
}

type ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode struct {
	// Webサイト利用有無\
	// \
	// Webサイト/Webアプリでfincodeを使用するかどうか
	// - `true`: Webサイト/Webアプリでfincodeを使用する.
	UsedOnWeb OptNilBool `json:"used_on_web"`
	// ネイティブアプリ利用有無\
	// \
	// ネイティブアプリでfincodeを使用するかどうか
	// - `true`: ネイティブアプリでfincodeを使用する.
	UsedOnApp OptNilBool `json:"used_on_app"`
}

// GetUsedOnWeb returns the value of UsedOnWeb.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) GetUsedOnWeb() OptNilBool {
	return s.UsedOnWeb
}

// GetUsedOnApp returns the value of UsedOnApp.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) GetUsedOnApp() OptNilBool {
	return s.UsedOnApp
}

// SetUsedOnWeb sets the value of UsedOnWeb.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) SetUsedOnWeb(val OptNilBool) {
	s.UsedOnWeb = val
}

// SetUsedOnApp sets the value of UsedOnApp.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) SetUsedOnApp(val OptNilBool) {
	s.UsedOnApp = val
}

// 契約ステータス\
// \
// fincodeとそのショップの運営事業者の契約のステータスを表します。
// - `101`: 未契約<br /><span
// class="smallText">まだfincodeの本番環境申請の提出が完了していない状態です。</span>
// - `102`: 利用審査中<br /><span
// class="smallText">fincodeの本番環境申請の提出が完了し、利用審査中の状態です。</span>
// - `103`: 利用審査中（VISA/Mastercard利用可）<br /><span
// class="smallText">即時利用によりVISA/Mastercardブランドの決済受付が可能な状態です。審査は継続して行われます。</span>
// - `105`: 解約済
// - `106`: 契約不成立<br /><span
// class="smallText">審査の結果、fincodeの利用が不可となった状態です。</span>
// - `107`: 稼働中<br /><span
// class="smallText">fincodeの本番環境申請が完了し、クレジットカード決済の受付が可能な状態です。</span>.
type ExaminationInfoV2RetrievingResponseStatusCode string

const (
	ExaminationInfoV2RetrievingResponseStatusCode101 ExaminationInfoV2RetrievingResponseStatusCode = "101"
	ExaminationInfoV2RetrievingResponseStatusCode102 ExaminationInfoV2RetrievingResponseStatusCode = "102"
	ExaminationInfoV2RetrievingResponseStatusCode103 ExaminationInfoV2RetrievingResponseStatusCode = "103"
	ExaminationInfoV2RetrievingResponseStatusCode105 ExaminationInfoV2RetrievingResponseStatusCode = "105"
	ExaminationInfoV2RetrievingResponseStatusCode106 ExaminationInfoV2RetrievingResponseStatusCode = "106"
	ExaminationInfoV2RetrievingResponseStatusCode107 ExaminationInfoV2RetrievingResponseStatusCode = "107"
)

// AllValues returns all ExaminationInfoV2RetrievingResponseStatusCode values.
func (ExaminationInfoV2RetrievingResponseStatusCode) AllValues() []ExaminationInfoV2RetrievingResponseStatusCode {
	return []ExaminationInfoV2RetrievingResponseStatusCode{
		ExaminationInfoV2RetrievingResponseStatusCode101,
		ExaminationInfoV2RetrievingResponseStatusCode102,
		ExaminationInfoV2RetrievingResponseStatusCode103,
		ExaminationInfoV2RetrievingResponseStatusCode105,
		ExaminationInfoV2RetrievingResponseStatusCode106,
		ExaminationInfoV2RetrievingResponseStatusCode107,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationInfoV2RetrievingResponseStatusCode) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationInfoV2RetrievingResponseStatusCode101:
		return []byte(s), nil
	case ExaminationInfoV2RetrievingResponseStatusCode102:
		return []byte(s), nil
	case ExaminationInfoV2RetrievingResponseStatusCode103:
		return []byte(s), nil
	case ExaminationInfoV2RetrievingResponseStatusCode105:
		return []byte(s), nil
	case ExaminationInfoV2RetrievingResponseStatusCode106:
		return []byte(s), nil
	case ExaminationInfoV2RetrievingResponseStatusCode107:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationInfoV2RetrievingResponseStatusCode) UnmarshalText(data []byte) error {
	switch ExaminationInfoV2RetrievingResponseStatusCode(data) {
	case ExaminationInfoV2RetrievingResponseStatusCode101:
		*s = ExaminationInfoV2RetrievingResponseStatusCode101
		return nil
	case ExaminationInfoV2RetrievingResponseStatusCode102:
		*s = ExaminationInfoV2RetrievingResponseStatusCode102
		return nil
	case ExaminationInfoV2RetrievingResponseStatusCode103:
		*s = ExaminationInfoV2RetrievingResponseStatusCode103
		return nil
	case ExaminationInfoV2RetrievingResponseStatusCode105:
		*s = ExaminationInfoV2RetrievingResponseStatusCode105
		return nil
	case ExaminationInfoV2RetrievingResponseStatusCode106:
		*s = ExaminationInfoV2RetrievingResponseStatusCode106
		return nil
	case ExaminationInfoV2RetrievingResponseStatusCode107:
		*s = ExaminationInfoV2RetrievingResponseStatusCode107
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ExaminationInfo.V2.Updating.Request
type ExaminationInfoV2UpdatingRequest struct {
	// 契約情報\
	// \
	// fincodeと契約をする事業者の情報.
	ContractInfo OptExaminationInfoV2UpdatingRequestContractInfo `json:"contract_info"`
	// ショップ情報\
	// \
	// fincodeにおけるショップの情報.
	ShopInfo OptExaminationInfoV2UpdatingRequestShopInfo `json:"shop_info"`
	// 銀行口座情報\
	// \
	// fincode上での売上入金を受け取るための銀行口座情報.
	BankAccountInfo OptExaminationInfoV2UpdatingRequestBankAccountInfo `json:"bank_account_info"`
	// 入金サイクル情報\
	// \
	// fincode上での売上入金の入金サイクルに関する情報.
	DepositCycleInfo OptExaminationInfoV2UpdatingRequestDepositCycleInfo `json:"deposit_cycle_info"`
	// 業種コード\
	// \
	// fincodeから指定するよう要求されている場合にのみ指定します。.
	MerchantCategoryCode OptNilString `json:"merchant_category_code"`
}

// GetContractInfo returns the value of ContractInfo.
func (s *ExaminationInfoV2UpdatingRequest) GetContractInfo() OptExaminationInfoV2UpdatingRequestContractInfo {
	return s.ContractInfo
}

// GetShopInfo returns the value of ShopInfo.
func (s *ExaminationInfoV2UpdatingRequest) GetShopInfo() OptExaminationInfoV2UpdatingRequestShopInfo {
	return s.ShopInfo
}

// GetBankAccountInfo returns the value of BankAccountInfo.
func (s *ExaminationInfoV2UpdatingRequest) GetBankAccountInfo() OptExaminationInfoV2UpdatingRequestBankAccountInfo {
	return s.BankAccountInfo
}

// GetDepositCycleInfo returns the value of DepositCycleInfo.
func (s *ExaminationInfoV2UpdatingRequest) GetDepositCycleInfo() OptExaminationInfoV2UpdatingRequestDepositCycleInfo {
	return s.DepositCycleInfo
}

// GetMerchantCategoryCode returns the value of MerchantCategoryCode.
func (s *ExaminationInfoV2UpdatingRequest) GetMerchantCategoryCode() OptNilString {
	return s.MerchantCategoryCode
}

// SetContractInfo sets the value of ContractInfo.
func (s *ExaminationInfoV2UpdatingRequest) SetContractInfo(val OptExaminationInfoV2UpdatingRequestContractInfo) {
	s.ContractInfo = val
}

// SetShopInfo sets the value of ShopInfo.
func (s *ExaminationInfoV2UpdatingRequest) SetShopInfo(val OptExaminationInfoV2UpdatingRequestShopInfo) {
	s.ShopInfo = val
}

// SetBankAccountInfo sets the value of BankAccountInfo.
func (s *ExaminationInfoV2UpdatingRequest) SetBankAccountInfo(val OptExaminationInfoV2UpdatingRequestBankAccountInfo) {
	s.BankAccountInfo = val
}

// SetDepositCycleInfo sets the value of DepositCycleInfo.
func (s *ExaminationInfoV2UpdatingRequest) SetDepositCycleInfo(val OptExaminationInfoV2UpdatingRequestDepositCycleInfo) {
	s.DepositCycleInfo = val
}

// SetMerchantCategoryCode sets the value of MerchantCategoryCode.
func (s *ExaminationInfoV2UpdatingRequest) SetMerchantCategoryCode(val OptNilString) {
	s.MerchantCategoryCode = val
}

type ExaminationInfoV2UpdatingRequestBankAccountInfo struct {
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode string `json:"branch_code"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber string `json:"account_number"`
	// 口座名義.
	AccountName string `json:"account_name"`
}

// GetBankCode returns the value of BankCode.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) GetBranchCode() string {
	return s.BranchCode
}

// GetAccountKind returns the value of AccountKind.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) GetAccountKind() ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) GetAccountNumber() string {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) GetAccountName() string {
	return s.AccountName
}

// SetBankCode sets the value of BankCode.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) SetBranchCode(val string) {
	s.BranchCode = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) SetAccountKind(val ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) SetAccountNumber(val string) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) SetAccountName(val string) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind float64

const (
	ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind0 ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind = 0
	ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind1 ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind = 1
)

// AllValues returns all ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind values.
func (ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind) AllValues() []ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind {
	return []ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind{
		ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind0,
		ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind1,
	}
}

type ExaminationInfoV2UpdatingRequestContractInfo struct {
	// 代表者 姓
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	RepresentativeLastName NilString `json:"representative_last_name"`
	// 代表者 姓（カナ）\
	// 形式： 全角カナ.
	RepresentativeLastNameKana NilString `json:"representative_last_name_kana"`
	// 代表者 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	RepresentativeFirstName NilString `json:"representative_first_name"`
	// 代表者 名（カナ）\
	// 形式： 全角カナ.
	RepresentativeFirstNameKana NilString `json:"representative_first_name_kana"`
	// 代表者 住所 郵便番号\
	// 形式：`xxx-xxxx`.
	RepresentativePostalCode NilString `json:"representative_postal_code"`
	// 代表者 住所 都道府県\
	// 形式： 漢字.
	RepresentativePrefecture NilString `json:"representative_prefecture"`
	// 代表者 住所 都道府県（カナ）\
	// 形式： 全角カナ.
	RepresentativePrefectureKana NilString `json:"representative_prefecture_kana"`
	// 代表者 住所 市区町村\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressMunicipality NilString `json:"representative_address_municipality"`
	// 代表者 住所 市区町村（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressMunicipalityKana NilString `json:"representative_address_municipality_kana"`
	// 代表者 住所 町域\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressSection NilString `json:"representative_address_section"`
	// 代表者 住所 町域（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressSectionKana NilString `json:"representative_address_section_kana"`
	// 代表者 住所 番地\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressChrome NilString `json:"representative_address_chrome"`
	// 代表者 住所 番地（カナ）.
	RepresentativeAddressChromeKana NilString `json:"representative_address_chrome_kana"`
	// 代表者 住所 建物名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressBuildingName OptNilString `json:"representative_address_building_name"`
	// 代表者 住所 建物名（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressBuildingNameKana OptNilString `json:"representative_address_building_name_kana"`
	// 代表者 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	RepresentativeTel NilString `json:"representative_tel"`
	// 代表者 生年月日\
	// \
	// 形式：`yyyy/MM/dd`.
	RepresentativeBirthday NilString `json:"representative_birthday"`
	// 代表者 性別
	// - `0`: 男性
	// - `1`: 女性.
	RepresentativeGender NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender `json:"representative_gender"`
	// 担当者1 姓\
	// 形式： 漢字/ひらがな/カタカナ/半角英字\
	// \
	// fincodeは担当者1,
	// 2宛てに審査結果の通知や審査保留対応の連絡などを行います。.
	Staff1LastName NilString `json:"staff1_last_name"`
	// 担当者1 姓（カナ）\
	// 形式： 全角カナ.
	Staff1LastNameKana NilString `json:"staff1_last_name_kana"`
	// 担当者1 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff1FirstName NilString `json:"staff1_first_name"`
	// 担当者1 名（カナ）\
	// 形式： 全角カナ.
	Staff1FirstNameKana NilString `json:"staff1_first_name_kana"`
	// 担当者1 会社名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff1CompanyName NilString `json:"staff1_company_name"`
	// 担当者1 部署名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff1Belongs NilString `json:"staff1_belongs"`
	// 担当者1 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	Staff1Tel NilString `json:"staff1_tel"`
	// 担当者1 メールアドレス\
	// 形式： RFC 5322.
	Staff1Mail NilString `json:"staff1_mail"`
	// 担当者2 姓\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff2LastName OptNilString `json:"staff2_last_name"`
	// 担当者2 姓（カナ）\
	// 形式： 全角カナ.
	Staff2LastNameKana OptNilString `json:"staff2_last_name_kana"`
	// 担当者2 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff2FirstName OptNilString `json:"staff2_first_name"`
	// 担当者2 名（カナ）\
	// 形式： 全角カナ.
	Staff2FirstNameKana OptNilString `json:"staff2_first_name_kana"`
	// 担当者2 会社名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff2CompanyName OptNilString `json:"staff2_company_name"`
	// 担当者2 部署名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff2Belongs OptNilString `json:"staff2_belongs"`
	// 担当者2 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	Staff2Tel OptNilString `json:"staff2_tel"`
	// 担当者2 メールアドレス\
	// 形式： RFC 5322.
	Staff2Mail OptNilString `json:"staff2_mail"`
	// 事業形態\
	// \
	// - `true`: 法人\
	// - `false`: 個人事業主.
	Corporate NilBool `json:"corporate"`
	// 法人情報
	// \
	// `corporate`が`true`のとき必須.
	CorporateInfo OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo `json:"corporate_info"`
}

// GetRepresentativeLastName returns the value of RepresentativeLastName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeLastName() NilString {
	return s.RepresentativeLastName
}

// GetRepresentativeLastNameKana returns the value of RepresentativeLastNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeLastNameKana() NilString {
	return s.RepresentativeLastNameKana
}

// GetRepresentativeFirstName returns the value of RepresentativeFirstName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeFirstName() NilString {
	return s.RepresentativeFirstName
}

// GetRepresentativeFirstNameKana returns the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeFirstNameKana() NilString {
	return s.RepresentativeFirstNameKana
}

// GetRepresentativePostalCode returns the value of RepresentativePostalCode.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativePostalCode() NilString {
	return s.RepresentativePostalCode
}

// GetRepresentativePrefecture returns the value of RepresentativePrefecture.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativePrefecture() NilString {
	return s.RepresentativePrefecture
}

// GetRepresentativePrefectureKana returns the value of RepresentativePrefectureKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativePrefectureKana() NilString {
	return s.RepresentativePrefectureKana
}

// GetRepresentativeAddressMunicipality returns the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressMunicipality() NilString {
	return s.RepresentativeAddressMunicipality
}

// GetRepresentativeAddressMunicipalityKana returns the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressMunicipalityKana() NilString {
	return s.RepresentativeAddressMunicipalityKana
}

// GetRepresentativeAddressSection returns the value of RepresentativeAddressSection.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressSection() NilString {
	return s.RepresentativeAddressSection
}

// GetRepresentativeAddressSectionKana returns the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressSectionKana() NilString {
	return s.RepresentativeAddressSectionKana
}

// GetRepresentativeAddressChrome returns the value of RepresentativeAddressChrome.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressChrome() NilString {
	return s.RepresentativeAddressChrome
}

// GetRepresentativeAddressChromeKana returns the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressChromeKana() NilString {
	return s.RepresentativeAddressChromeKana
}

// GetRepresentativeAddressBuildingName returns the value of RepresentativeAddressBuildingName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressBuildingName() OptNilString {
	return s.RepresentativeAddressBuildingName
}

// GetRepresentativeAddressBuildingNameKana returns the value of RepresentativeAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeAddressBuildingNameKana() OptNilString {
	return s.RepresentativeAddressBuildingNameKana
}

// GetRepresentativeTel returns the value of RepresentativeTel.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeTel() NilString {
	return s.RepresentativeTel
}

// GetRepresentativeBirthday returns the value of RepresentativeBirthday.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeBirthday() NilString {
	return s.RepresentativeBirthday
}

// GetRepresentativeGender returns the value of RepresentativeGender.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetRepresentativeGender() NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender {
	return s.RepresentativeGender
}

// GetStaff1LastName returns the value of Staff1LastName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1LastName() NilString {
	return s.Staff1LastName
}

// GetStaff1LastNameKana returns the value of Staff1LastNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1LastNameKana() NilString {
	return s.Staff1LastNameKana
}

// GetStaff1FirstName returns the value of Staff1FirstName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1FirstName() NilString {
	return s.Staff1FirstName
}

// GetStaff1FirstNameKana returns the value of Staff1FirstNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1FirstNameKana() NilString {
	return s.Staff1FirstNameKana
}

// GetStaff1CompanyName returns the value of Staff1CompanyName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1CompanyName() NilString {
	return s.Staff1CompanyName
}

// GetStaff1Belongs returns the value of Staff1Belongs.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1Belongs() NilString {
	return s.Staff1Belongs
}

// GetStaff1Tel returns the value of Staff1Tel.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1Tel() NilString {
	return s.Staff1Tel
}

// GetStaff1Mail returns the value of Staff1Mail.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff1Mail() NilString {
	return s.Staff1Mail
}

// GetStaff2LastName returns the value of Staff2LastName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2LastName() OptNilString {
	return s.Staff2LastName
}

// GetStaff2LastNameKana returns the value of Staff2LastNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2LastNameKana() OptNilString {
	return s.Staff2LastNameKana
}

// GetStaff2FirstName returns the value of Staff2FirstName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2FirstName() OptNilString {
	return s.Staff2FirstName
}

// GetStaff2FirstNameKana returns the value of Staff2FirstNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2FirstNameKana() OptNilString {
	return s.Staff2FirstNameKana
}

// GetStaff2CompanyName returns the value of Staff2CompanyName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2CompanyName() OptNilString {
	return s.Staff2CompanyName
}

// GetStaff2Belongs returns the value of Staff2Belongs.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2Belongs() OptNilString {
	return s.Staff2Belongs
}

// GetStaff2Tel returns the value of Staff2Tel.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2Tel() OptNilString {
	return s.Staff2Tel
}

// GetStaff2Mail returns the value of Staff2Mail.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetStaff2Mail() OptNilString {
	return s.Staff2Mail
}

// GetCorporate returns the value of Corporate.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetCorporate() NilBool {
	return s.Corporate
}

// GetCorporateInfo returns the value of CorporateInfo.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) GetCorporateInfo() OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo {
	return s.CorporateInfo
}

// SetRepresentativeLastName sets the value of RepresentativeLastName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeLastName(val NilString) {
	s.RepresentativeLastName = val
}

// SetRepresentativeLastNameKana sets the value of RepresentativeLastNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeLastNameKana(val NilString) {
	s.RepresentativeLastNameKana = val
}

// SetRepresentativeFirstName sets the value of RepresentativeFirstName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeFirstName(val NilString) {
	s.RepresentativeFirstName = val
}

// SetRepresentativeFirstNameKana sets the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeFirstNameKana(val NilString) {
	s.RepresentativeFirstNameKana = val
}

// SetRepresentativePostalCode sets the value of RepresentativePostalCode.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativePostalCode(val NilString) {
	s.RepresentativePostalCode = val
}

// SetRepresentativePrefecture sets the value of RepresentativePrefecture.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativePrefecture(val NilString) {
	s.RepresentativePrefecture = val
}

// SetRepresentativePrefectureKana sets the value of RepresentativePrefectureKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativePrefectureKana(val NilString) {
	s.RepresentativePrefectureKana = val
}

// SetRepresentativeAddressMunicipality sets the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressMunicipality(val NilString) {
	s.RepresentativeAddressMunicipality = val
}

// SetRepresentativeAddressMunicipalityKana sets the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressMunicipalityKana(val NilString) {
	s.RepresentativeAddressMunicipalityKana = val
}

// SetRepresentativeAddressSection sets the value of RepresentativeAddressSection.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressSection(val NilString) {
	s.RepresentativeAddressSection = val
}

// SetRepresentativeAddressSectionKana sets the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressSectionKana(val NilString) {
	s.RepresentativeAddressSectionKana = val
}

// SetRepresentativeAddressChrome sets the value of RepresentativeAddressChrome.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressChrome(val NilString) {
	s.RepresentativeAddressChrome = val
}

// SetRepresentativeAddressChromeKana sets the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressChromeKana(val NilString) {
	s.RepresentativeAddressChromeKana = val
}

// SetRepresentativeAddressBuildingName sets the value of RepresentativeAddressBuildingName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressBuildingName(val OptNilString) {
	s.RepresentativeAddressBuildingName = val
}

// SetRepresentativeAddressBuildingNameKana sets the value of RepresentativeAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeAddressBuildingNameKana(val OptNilString) {
	s.RepresentativeAddressBuildingNameKana = val
}

// SetRepresentativeTel sets the value of RepresentativeTel.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeTel(val NilString) {
	s.RepresentativeTel = val
}

// SetRepresentativeBirthday sets the value of RepresentativeBirthday.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeBirthday(val NilString) {
	s.RepresentativeBirthday = val
}

// SetRepresentativeGender sets the value of RepresentativeGender.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetRepresentativeGender(val NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) {
	s.RepresentativeGender = val
}

// SetStaff1LastName sets the value of Staff1LastName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1LastName(val NilString) {
	s.Staff1LastName = val
}

// SetStaff1LastNameKana sets the value of Staff1LastNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1LastNameKana(val NilString) {
	s.Staff1LastNameKana = val
}

// SetStaff1FirstName sets the value of Staff1FirstName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1FirstName(val NilString) {
	s.Staff1FirstName = val
}

// SetStaff1FirstNameKana sets the value of Staff1FirstNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1FirstNameKana(val NilString) {
	s.Staff1FirstNameKana = val
}

// SetStaff1CompanyName sets the value of Staff1CompanyName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1CompanyName(val NilString) {
	s.Staff1CompanyName = val
}

// SetStaff1Belongs sets the value of Staff1Belongs.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1Belongs(val NilString) {
	s.Staff1Belongs = val
}

// SetStaff1Tel sets the value of Staff1Tel.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1Tel(val NilString) {
	s.Staff1Tel = val
}

// SetStaff1Mail sets the value of Staff1Mail.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff1Mail(val NilString) {
	s.Staff1Mail = val
}

// SetStaff2LastName sets the value of Staff2LastName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2LastName(val OptNilString) {
	s.Staff2LastName = val
}

// SetStaff2LastNameKana sets the value of Staff2LastNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2LastNameKana(val OptNilString) {
	s.Staff2LastNameKana = val
}

// SetStaff2FirstName sets the value of Staff2FirstName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2FirstName(val OptNilString) {
	s.Staff2FirstName = val
}

// SetStaff2FirstNameKana sets the value of Staff2FirstNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2FirstNameKana(val OptNilString) {
	s.Staff2FirstNameKana = val
}

// SetStaff2CompanyName sets the value of Staff2CompanyName.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2CompanyName(val OptNilString) {
	s.Staff2CompanyName = val
}

// SetStaff2Belongs sets the value of Staff2Belongs.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2Belongs(val OptNilString) {
	s.Staff2Belongs = val
}

// SetStaff2Tel sets the value of Staff2Tel.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2Tel(val OptNilString) {
	s.Staff2Tel = val
}

// SetStaff2Mail sets the value of Staff2Mail.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetStaff2Mail(val OptNilString) {
	s.Staff2Mail = val
}

// SetCorporate sets the value of Corporate.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetCorporate(val NilBool) {
	s.Corporate = val
}

// SetCorporateInfo sets the value of CorporateInfo.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) SetCorporateInfo(val OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) {
	s.CorporateInfo = val
}

type ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo struct {
	// 法人番号.
	CorporateNumber NilString `json:"corporate_number"`
	// 法人名.
	CorporateName string `json:"corporate_name"`
	// 法人名（カナ）.
	CorporateNameKana string `json:"corporate_name_kana"`
	// 企業サイトURL.
	Hp OptNilString `json:"hp"`
	// 資本金.
	Capital NilFloat64 `json:"capital"`
	// 設立日.
	EstablishedAt NilString `json:"established_at"`
	// 年商.
	YearlySales NilFloat64 `json:"yearly_sales"`
	// 事業内容.
	BusinessDetails NilString `json:"business_details"`
	// 会社住所 郵便番号\
	// 形式： 半角数字（ハイフンあり）.
	CompanyPostalCode NilString `json:"company_postal_code"`
	// 会社住所 都道府県\
	// 形式： 漢字.
	CompanyPrefecture NilString `json:"company_prefecture"`
	// 会社住所 都道府県（カナ）\
	// 形式： 全角カタカナ.
	CompanyPrefectureKana NilString `json:"company_prefecture_kana"`
	// 会社住所 市区町村\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressMunicipality NilString `json:"company_address_municipality"`
	// 会社住所 市区町村（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressMunicipalityKana NilString `json:"company_address_municipality_kana"`
	// 会社住所 町域\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressSection NilString `json:"company_address_section"`
	// 会社住所 町域（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressSectionKana NilString `json:"company_address_section_kana"`
	// 会社住所 番地\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressChrome NilString `json:"company_address_chrome"`
	// 会社住所 番地（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressChromeKana NilString `json:"company_address_chrome_kana"`
	// 会社住所 ビル名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressBuildingName OptNilString `json:"company_address_building_name"`
	// 会社住所 ビル名（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressBuildingNameKana OptNilString `json:"company_address_building_name_kana"`
	// 会社情報 電話番号\
	// 形式： 半角数字（ハイフンなし）.
	CompanyTel NilString `json:"company_tel"`
}

// GetCorporateNumber returns the value of CorporateNumber.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCorporateNumber() NilString {
	return s.CorporateNumber
}

// GetCorporateName returns the value of CorporateName.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCorporateName() string {
	return s.CorporateName
}

// GetCorporateNameKana returns the value of CorporateNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCorporateNameKana() string {
	return s.CorporateNameKana
}

// GetHp returns the value of Hp.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetHp() OptNilString {
	return s.Hp
}

// GetCapital returns the value of Capital.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCapital() NilFloat64 {
	return s.Capital
}

// GetEstablishedAt returns the value of EstablishedAt.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetEstablishedAt() NilString {
	return s.EstablishedAt
}

// GetYearlySales returns the value of YearlySales.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetYearlySales() NilFloat64 {
	return s.YearlySales
}

// GetBusinessDetails returns the value of BusinessDetails.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetBusinessDetails() NilString {
	return s.BusinessDetails
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyPostalCode() NilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyPrefecture() NilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyPrefectureKana() NilString {
	return s.CompanyPrefectureKana
}

// GetCompanyAddressMunicipality returns the value of CompanyAddressMunicipality.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressMunicipality() NilString {
	return s.CompanyAddressMunicipality
}

// GetCompanyAddressMunicipalityKana returns the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressMunicipalityKana() NilString {
	return s.CompanyAddressMunicipalityKana
}

// GetCompanyAddressSection returns the value of CompanyAddressSection.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressSection() NilString {
	return s.CompanyAddressSection
}

// GetCompanyAddressSectionKana returns the value of CompanyAddressSectionKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressSectionKana() NilString {
	return s.CompanyAddressSectionKana
}

// GetCompanyAddressChrome returns the value of CompanyAddressChrome.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressChrome() NilString {
	return s.CompanyAddressChrome
}

// GetCompanyAddressChromeKana returns the value of CompanyAddressChromeKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressChromeKana() NilString {
	return s.CompanyAddressChromeKana
}

// GetCompanyAddressBuildingName returns the value of CompanyAddressBuildingName.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressBuildingName() OptNilString {
	return s.CompanyAddressBuildingName
}

// GetCompanyAddressBuildingNameKana returns the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyAddressBuildingNameKana() OptNilString {
	return s.CompanyAddressBuildingNameKana
}

// GetCompanyTel returns the value of CompanyTel.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) GetCompanyTel() NilString {
	return s.CompanyTel
}

// SetCorporateNumber sets the value of CorporateNumber.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCorporateNumber(val NilString) {
	s.CorporateNumber = val
}

// SetCorporateName sets the value of CorporateName.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCorporateName(val string) {
	s.CorporateName = val
}

// SetCorporateNameKana sets the value of CorporateNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCorporateNameKana(val string) {
	s.CorporateNameKana = val
}

// SetHp sets the value of Hp.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetHp(val OptNilString) {
	s.Hp = val
}

// SetCapital sets the value of Capital.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCapital(val NilFloat64) {
	s.Capital = val
}

// SetEstablishedAt sets the value of EstablishedAt.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetEstablishedAt(val NilString) {
	s.EstablishedAt = val
}

// SetYearlySales sets the value of YearlySales.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetYearlySales(val NilFloat64) {
	s.YearlySales = val
}

// SetBusinessDetails sets the value of BusinessDetails.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetBusinessDetails(val NilString) {
	s.BusinessDetails = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyPostalCode(val NilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyPrefecture(val NilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyPrefectureKana(val NilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyAddressMunicipality sets the value of CompanyAddressMunicipality.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressMunicipality(val NilString) {
	s.CompanyAddressMunicipality = val
}

// SetCompanyAddressMunicipalityKana sets the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressMunicipalityKana(val NilString) {
	s.CompanyAddressMunicipalityKana = val
}

// SetCompanyAddressSection sets the value of CompanyAddressSection.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressSection(val NilString) {
	s.CompanyAddressSection = val
}

// SetCompanyAddressSectionKana sets the value of CompanyAddressSectionKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressSectionKana(val NilString) {
	s.CompanyAddressSectionKana = val
}

// SetCompanyAddressChrome sets the value of CompanyAddressChrome.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressChrome(val NilString) {
	s.CompanyAddressChrome = val
}

// SetCompanyAddressChromeKana sets the value of CompanyAddressChromeKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressChromeKana(val NilString) {
	s.CompanyAddressChromeKana = val
}

// SetCompanyAddressBuildingName sets the value of CompanyAddressBuildingName.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressBuildingName(val OptNilString) {
	s.CompanyAddressBuildingName = val
}

// SetCompanyAddressBuildingNameKana sets the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyAddressBuildingNameKana(val OptNilString) {
	s.CompanyAddressBuildingNameKana = val
}

// SetCompanyTel sets the value of CompanyTel.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetCompanyTel(val NilString) {
	s.CompanyTel = val
}

// 代表者 性別
// - `0`: 男性
// - `1`: 女性.
type ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender int

const (
	ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender0 ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender = 0
	ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender1 ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender = 1
)

// AllValues returns all ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender values.
func (ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) AllValues() []ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender {
	return []ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender{
		ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender0,
		ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender1,
	}
}

type ExaminationInfoV2UpdatingRequestDepositCycleInfo struct {
	DepositCycleMasterID ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID `json:"deposit_cycle_master_id"`
}

// GetDepositCycleMasterID returns the value of DepositCycleMasterID.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) GetDepositCycleMasterID() ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID {
	return s.DepositCycleMasterID
}

// SetDepositCycleMasterID sets the value of DepositCycleMasterID.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) SetDepositCycleMasterID(val ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID) {
	s.DepositCycleMasterID = val
}

// 入金サイクルマスタID\
// 入金サイクルについては[Docs > 精算管理 >
// クレジットカード決済の入金サイクル](https://docs.fincode.
// jp/business_management/deposit)を参照できます。
// - `1`: スタンダード（月1回, 月末締め翌月末入金）
// - `2`: スタンダード（月2回, 15日&月末締め15日後入金）.
type ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID int

const (
	ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID1 ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID = 1
	ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID2 ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID = 2
)

// AllValues returns all ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID values.
func (ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID) AllValues() []ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID {
	return []ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID{
		ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID1,
		ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID2,
	}
}

type ExaminationInfoV2UpdatingRequestShopInfo struct {
	// Fincodeにおけるショップ名.
	ShopName string `json:"shop_name"`
	// Fincodeにおけるショップ名（カナ）.
	ShopNameKana string `json:"shop_name_kana"`
	// Fincodeにおけるショップ名（英語）.
	ShopNameEn string `json:"shop_name_en"`
	// 購入者向けサポート窓口 メールアドレス\
	// 形式： RFC 5322.
	SupportMail NilString `json:"support_mail"`
	// 購入者向けサポート窓口 電話番号\
	// 形式： 電話番号（ハイフンなし）.
	SupportTel NilString `json:"support_tel"`
	// 1回の決済における金額（単価）\
	// \
	// 例： `1000`（1000円）.
	UnitPrice OptNilFloat64 `json:"unit_price"`
	// Fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明
	// - `true`: fincode審査に時間がかかるコンテンツを取り扱う
	// - `false`: fincode審査に時間がかかるコンテンツを取り扱わない
	// 以下の商材を取り扱う場合は`true`を指定する必要があります。
	// - 呉服
	// - コンサルディングサービス
	// - エステ、美容サロン、美容医療
	// - スポーツ施設・フィットネスクラブ
	// - カルチャースクール・通信講座
	// - データ販売
	// - 情報詳細（情報の内容自体が商品となるもの）
	// - 占い
	// - サプリメント・健康食品
	// - 美容品・化粧品
	// - カツラ
	// - 旅行業に該当するサービス
	// - タバコ・CBD
	// - 寄付金.
	DealsLongApplyContent NilBool `json:"deals_long_apply_content"`
	// Fincodeで取扱不可の商材を取り扱わないことの表明
	// - `true`: 取扱不可の商材を取り扱う予定はない
	// - `false`: 取扱不可の商材を取り扱う予定がある
	// fincodeの禁止商材は以下の通りです。
	// - 金融行為（クレジットカードショッピング枠の現金化等）
	// -
	// 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券
	// - 賭博、ギャンブル
	// - RMT（リアルマネートレーディング）
	// - ペット等の生き物全般（※標本・剥製も含む）
	// - お布施
	// - 危険ドラッグ、デザイナーズドラッグ
	// -
	// 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等）
	// - 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの
	// - 公序良俗に反するもの（アダルト、出会い系サイトを含む）
	// -
	// 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法）.
	DealsInsecureContent NilBool `json:"deals_insecure_content"`
	// 改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明
	// - `true`: 改正割賦販売法に基づく訴訟敗訴歴がある
	// - `false`: 改正割賦販売法に基づく訴訟敗訴歴はない.
	LostTrial    NilBool                                              `json:"lost_trial"`
	UseOfFincode ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode `json:"use_of_fincode"`
	// Webサイトの公開状況\
	// \
	// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。\
	// `usage_of_fincode.used_on_web`が`true`の場合、指定必須です。
	// - `true`: fincode審査チームがサイトを閲覧可能
	// - `false`: fincode審査チームがサイトを閲覧不可能.
	SitePublished OptNilBool `json:"site_published"`
	// Webサイト情報\
	// \
	// fincode審査チームが審査上確認をする、fincodeによる決済を行うWebサイトの情報.
	SiteInfo OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo `json:"site_info"`
	// プリペイドポイントの有無\
	// \
	// ショップがプリペイドポイントを導入しているかどうか.
	PrepaidPoint     OptNilBool                                                  `json:"prepaid_point"`
	PrepaidPointInfo OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo `json:"prepaid_point_info"`
	// 商材情報.
	Provides ExaminationInfoV2UpdatingRequestShopInfoProvides `json:"provides"`
	// 取扱商材の説明\
	// \
	// ショップの提供する商材についての説明.
	ContentDescription NilString `json:"content_description"`
	// 物販商材 商材説明.
	ProductContentInfo OptContentInfoV2 `json:"product_content_info"`
	// サービス商材 商材説明.
	ServiceContentInfo OptContentInfoV2 `json:"service_content_info"`
	// デジタルコンテンツ 商材説明.
	DigitalContentInfo OptContentInfoV2 `json:"digital_content_info"`
	// 追加提出情報\
	// \
	// 審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\
	// 特定商取引法に基づく表示情報を基に値を設定してください。.
	AdditionalInfo OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo `json:"additional_info"`
}

// GetShopName returns the value of ShopName.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetShopName() string {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetShopNameKana() string {
	return s.ShopNameKana
}

// GetShopNameEn returns the value of ShopNameEn.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetShopNameEn() string {
	return s.ShopNameEn
}

// GetSupportMail returns the value of SupportMail.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetSupportMail() NilString {
	return s.SupportMail
}

// GetSupportTel returns the value of SupportTel.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetSupportTel() NilString {
	return s.SupportTel
}

// GetUnitPrice returns the value of UnitPrice.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetUnitPrice() OptNilFloat64 {
	return s.UnitPrice
}

// GetDealsLongApplyContent returns the value of DealsLongApplyContent.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetDealsLongApplyContent() NilBool {
	return s.DealsLongApplyContent
}

// GetDealsInsecureContent returns the value of DealsInsecureContent.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetDealsInsecureContent() NilBool {
	return s.DealsInsecureContent
}

// GetLostTrial returns the value of LostTrial.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetLostTrial() NilBool {
	return s.LostTrial
}

// GetUseOfFincode returns the value of UseOfFincode.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetUseOfFincode() ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode {
	return s.UseOfFincode
}

// GetSitePublished returns the value of SitePublished.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetSitePublished() OptNilBool {
	return s.SitePublished
}

// GetSiteInfo returns the value of SiteInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetSiteInfo() OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo {
	return s.SiteInfo
}

// GetPrepaidPoint returns the value of PrepaidPoint.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetPrepaidPoint() OptNilBool {
	return s.PrepaidPoint
}

// GetPrepaidPointInfo returns the value of PrepaidPointInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetPrepaidPointInfo() OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo {
	return s.PrepaidPointInfo
}

// GetProvides returns the value of Provides.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetProvides() ExaminationInfoV2UpdatingRequestShopInfoProvides {
	return s.Provides
}

// GetContentDescription returns the value of ContentDescription.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetContentDescription() NilString {
	return s.ContentDescription
}

// GetProductContentInfo returns the value of ProductContentInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetProductContentInfo() OptContentInfoV2 {
	return s.ProductContentInfo
}

// GetServiceContentInfo returns the value of ServiceContentInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetServiceContentInfo() OptContentInfoV2 {
	return s.ServiceContentInfo
}

// GetDigitalContentInfo returns the value of DigitalContentInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetDigitalContentInfo() OptContentInfoV2 {
	return s.DigitalContentInfo
}

// GetAdditionalInfo returns the value of AdditionalInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) GetAdditionalInfo() OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo {
	return s.AdditionalInfo
}

// SetShopName sets the value of ShopName.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetShopName(val string) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetShopNameKana(val string) {
	s.ShopNameKana = val
}

// SetShopNameEn sets the value of ShopNameEn.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetShopNameEn(val string) {
	s.ShopNameEn = val
}

// SetSupportMail sets the value of SupportMail.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetSupportMail(val NilString) {
	s.SupportMail = val
}

// SetSupportTel sets the value of SupportTel.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetSupportTel(val NilString) {
	s.SupportTel = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetUnitPrice(val OptNilFloat64) {
	s.UnitPrice = val
}

// SetDealsLongApplyContent sets the value of DealsLongApplyContent.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetDealsLongApplyContent(val NilBool) {
	s.DealsLongApplyContent = val
}

// SetDealsInsecureContent sets the value of DealsInsecureContent.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetDealsInsecureContent(val NilBool) {
	s.DealsInsecureContent = val
}

// SetLostTrial sets the value of LostTrial.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetLostTrial(val NilBool) {
	s.LostTrial = val
}

// SetUseOfFincode sets the value of UseOfFincode.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetUseOfFincode(val ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) {
	s.UseOfFincode = val
}

// SetSitePublished sets the value of SitePublished.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetSitePublished(val OptNilBool) {
	s.SitePublished = val
}

// SetSiteInfo sets the value of SiteInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetSiteInfo(val OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) {
	s.SiteInfo = val
}

// SetPrepaidPoint sets the value of PrepaidPoint.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetPrepaidPoint(val OptNilBool) {
	s.PrepaidPoint = val
}

// SetPrepaidPointInfo sets the value of PrepaidPointInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetPrepaidPointInfo(val OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) {
	s.PrepaidPointInfo = val
}

// SetProvides sets the value of Provides.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetProvides(val ExaminationInfoV2UpdatingRequestShopInfoProvides) {
	s.Provides = val
}

// SetContentDescription sets the value of ContentDescription.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetContentDescription(val NilString) {
	s.ContentDescription = val
}

// SetProductContentInfo sets the value of ProductContentInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetProductContentInfo(val OptContentInfoV2) {
	s.ProductContentInfo = val
}

// SetServiceContentInfo sets the value of ServiceContentInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetServiceContentInfo(val OptContentInfoV2) {
	s.ServiceContentInfo = val
}

// SetDigitalContentInfo sets the value of DigitalContentInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetDigitalContentInfo(val OptContentInfoV2) {
	s.DigitalContentInfo = val
}

// SetAdditionalInfo sets the value of AdditionalInfo.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) SetAdditionalInfo(val OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) {
	s.AdditionalInfo = val
}

// 追加提出情報\
// \
// 審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\
// 特定商取引法に基づく表示情報を基に値を設定してください。.
type ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo struct {
	// 販売責任者氏名\
	// \
	// ショップの販売責任者の氏名.
	ShopSalesManagerName OptNilString `json:"shop_sales_manager_name"`
	// 屋号・サービス名\
	// \
	// ショップのサービスの名称.
	ShopServoceName NilString `json:"shop_servoce_name"`
	// 支払い方法\
	// \
	// ショップで利用可能な支払い方法.
	ShopHowToPay NilString `json:"shop_how_to_pay"`
	// 商品代金以外の料金の説明\
	// \
	// 送料、手数料、消費税などの商品代金以外の料金についての説明.
	ShopChargeDescription OptNilString `json:"shop_charge_description"`
	// 商品の引き渡し時期\
	// \
	// 商品の引き渡し時期についての説明.
	ShopProductDeliveryTime NilString `json:"shop_product_delivery_time"`
	// 返品・交換に関する条件\
	// \
	// 返品・交換に関する条件についての説明.
	ShopReturnGoodsHandingConditions NilString `json:"shop_return_goods_handing_conditions"`
}

// GetShopSalesManagerName returns the value of ShopSalesManagerName.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) GetShopSalesManagerName() OptNilString {
	return s.ShopSalesManagerName
}

// GetShopServoceName returns the value of ShopServoceName.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) GetShopServoceName() NilString {
	return s.ShopServoceName
}

// GetShopHowToPay returns the value of ShopHowToPay.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) GetShopHowToPay() NilString {
	return s.ShopHowToPay
}

// GetShopChargeDescription returns the value of ShopChargeDescription.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) GetShopChargeDescription() OptNilString {
	return s.ShopChargeDescription
}

// GetShopProductDeliveryTime returns the value of ShopProductDeliveryTime.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) GetShopProductDeliveryTime() NilString {
	return s.ShopProductDeliveryTime
}

// GetShopReturnGoodsHandingConditions returns the value of ShopReturnGoodsHandingConditions.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) GetShopReturnGoodsHandingConditions() NilString {
	return s.ShopReturnGoodsHandingConditions
}

// SetShopSalesManagerName sets the value of ShopSalesManagerName.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetShopSalesManagerName(val OptNilString) {
	s.ShopSalesManagerName = val
}

// SetShopServoceName sets the value of ShopServoceName.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetShopServoceName(val NilString) {
	s.ShopServoceName = val
}

// SetShopHowToPay sets the value of ShopHowToPay.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetShopHowToPay(val NilString) {
	s.ShopHowToPay = val
}

// SetShopChargeDescription sets the value of ShopChargeDescription.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetShopChargeDescription(val OptNilString) {
	s.ShopChargeDescription = val
}

// SetShopProductDeliveryTime sets the value of ShopProductDeliveryTime.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetShopProductDeliveryTime(val NilString) {
	s.ShopProductDeliveryTime = val
}

// SetShopReturnGoodsHandingConditions sets the value of ShopReturnGoodsHandingConditions.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetShopReturnGoodsHandingConditions(val NilString) {
	s.ShopReturnGoodsHandingConditions = val
}

type ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo struct {
	// ポイント利用方法\
	// \
	// プリペイドポイントの利用方法.
	HowToUse OptNilString `json:"how_to_use"`
	// ポイント有効期限について\
	// \
	// プリペイドポイントの有効期限について.
	AboutExpiration OptNilString `json:"about_expiration"`
}

// GetHowToUse returns the value of HowToUse.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) GetHowToUse() OptNilString {
	return s.HowToUse
}

// GetAboutExpiration returns the value of AboutExpiration.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) GetAboutExpiration() OptNilString {
	return s.AboutExpiration
}

// SetHowToUse sets the value of HowToUse.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) SetHowToUse(val OptNilString) {
	s.HowToUse = val
}

// SetAboutExpiration sets the value of AboutExpiration.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) SetAboutExpiration(val OptNilString) {
	s.AboutExpiration = val
}

// 商材情報.
type ExaminationInfoV2UpdatingRequestShopInfoProvides struct {
	// 物販商材 提供有無\
	// \
	// ショップが物品販売を行うかどうか.
	Product OptNilBool `json:"product"`
	// サービス商材 提供有無\
	// \
	// ショップがサービス提供を行うかどうか.
	Service OptNilBool `json:"service"`
	// デジタルコンテンツ 提供有無\
	// \
	// ショップがデジタルコンテンツ販売を行うかどうか.
	DigitalContent OptNilBool `json:"digital_content"`
}

// GetProduct returns the value of Product.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) GetProduct() OptNilBool {
	return s.Product
}

// GetService returns the value of Service.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) GetService() OptNilBool {
	return s.Service
}

// GetDigitalContent returns the value of DigitalContent.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) GetDigitalContent() OptNilBool {
	return s.DigitalContent
}

// SetProduct sets the value of Product.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) SetProduct(val OptNilBool) {
	s.Product = val
}

// SetService sets the value of Service.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) SetService(val OptNilBool) {
	s.Service = val
}

// SetDigitalContent sets the value of DigitalContent.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) SetDigitalContent(val OptNilBool) {
	s.DigitalContent = val
}

// Webサイト情報\
// \
// fincode審査チームが審査上確認をする、fincodeによる決済を行うWebサイトの情報.
type ExaminationInfoV2UpdatingRequestShopInfoSiteInfo struct {
	// WebサイトURL\
	// \
	// fincode審査チームがサイトを閲覧するためのURL.
	URL NilString `json:"url"`
	// ログイン情報\
	// \
	// fincode審査チームがサイトを閲覧するためのログイン情報.
	Credential OptNilString `json:"credential"`
}

// GetURL returns the value of URL.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) GetURL() NilString {
	return s.URL
}

// GetCredential returns the value of Credential.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) GetCredential() OptNilString {
	return s.Credential
}

// SetURL sets the value of URL.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) SetURL(val NilString) {
	s.URL = val
}

// SetCredential sets the value of Credential.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) SetCredential(val OptNilString) {
	s.Credential = val
}

type ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode struct {
	// Webサイト利用有無\
	// \
	// Webサイト/Webアプリでfincodeを使用するかどうか
	// - `true`: Webサイト/Webアプリでfincodeを使用する.
	UsedOnWeb OptNilBool `json:"used_on_web"`
	// ネイティブアプリ利用有無\
	// \
	// ネイティブアプリでfincodeを使用するかどうか
	// - `true`: ネイティブアプリでfincodeを使用する.
	UsedOnApp OptNilBool `json:"used_on_app"`
}

// GetUsedOnWeb returns the value of UsedOnWeb.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) GetUsedOnWeb() OptNilBool {
	return s.UsedOnWeb
}

// GetUsedOnApp returns the value of UsedOnApp.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) GetUsedOnApp() OptNilBool {
	return s.UsedOnApp
}

// SetUsedOnWeb sets the value of UsedOnWeb.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) SetUsedOnWeb(val OptNilBool) {
	s.UsedOnWeb = val
}

// SetUsedOnApp sets the value of UsedOnApp.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) SetUsedOnApp(val OptNilBool) {
	s.UsedOnApp = val
}

// Ref: #/components/schemas/ExaminationInfo.V2.Updating.Response
type ExaminationInfoV2UpdatingResponse struct {
	StatusCode OptExaminationInfoV2UpdatingResponseStatusCode `json:"status_code"`
	// 契約情報\
	// \
	// fincodeと契約をする事業者の情報.
	ContractInfo OptExaminationInfoV2UpdatingResponseContractInfo `json:"contract_info"`
	// ショップ情報\
	// \
	// fincodeにおけるショップの情報.
	ShopInfo OptExaminationInfoV2UpdatingResponseShopInfo `json:"shop_info"`
	// 銀行口座情報\
	// \
	// fincode上での売上入金を受け取るための銀行口座情報.
	BankAccountInfo OptExaminationInfoV2UpdatingResponseBankAccountInfo `json:"bank_account_info"`
	// 入金サイクル情報\
	// \
	// fincode上での売上入金の入金サイクルに関する情報.
	DepositCycleInfo OptExaminationInfoV2UpdatingResponseDepositCycleInfo `json:"deposit_cycle_info"`
}

// GetStatusCode returns the value of StatusCode.
func (s *ExaminationInfoV2UpdatingResponse) GetStatusCode() OptExaminationInfoV2UpdatingResponseStatusCode {
	return s.StatusCode
}

// GetContractInfo returns the value of ContractInfo.
func (s *ExaminationInfoV2UpdatingResponse) GetContractInfo() OptExaminationInfoV2UpdatingResponseContractInfo {
	return s.ContractInfo
}

// GetShopInfo returns the value of ShopInfo.
func (s *ExaminationInfoV2UpdatingResponse) GetShopInfo() OptExaminationInfoV2UpdatingResponseShopInfo {
	return s.ShopInfo
}

// GetBankAccountInfo returns the value of BankAccountInfo.
func (s *ExaminationInfoV2UpdatingResponse) GetBankAccountInfo() OptExaminationInfoV2UpdatingResponseBankAccountInfo {
	return s.BankAccountInfo
}

// GetDepositCycleInfo returns the value of DepositCycleInfo.
func (s *ExaminationInfoV2UpdatingResponse) GetDepositCycleInfo() OptExaminationInfoV2UpdatingResponseDepositCycleInfo {
	return s.DepositCycleInfo
}

// SetStatusCode sets the value of StatusCode.
func (s *ExaminationInfoV2UpdatingResponse) SetStatusCode(val OptExaminationInfoV2UpdatingResponseStatusCode) {
	s.StatusCode = val
}

// SetContractInfo sets the value of ContractInfo.
func (s *ExaminationInfoV2UpdatingResponse) SetContractInfo(val OptExaminationInfoV2UpdatingResponseContractInfo) {
	s.ContractInfo = val
}

// SetShopInfo sets the value of ShopInfo.
func (s *ExaminationInfoV2UpdatingResponse) SetShopInfo(val OptExaminationInfoV2UpdatingResponseShopInfo) {
	s.ShopInfo = val
}

// SetBankAccountInfo sets the value of BankAccountInfo.
func (s *ExaminationInfoV2UpdatingResponse) SetBankAccountInfo(val OptExaminationInfoV2UpdatingResponseBankAccountInfo) {
	s.BankAccountInfo = val
}

// SetDepositCycleInfo sets the value of DepositCycleInfo.
func (s *ExaminationInfoV2UpdatingResponse) SetDepositCycleInfo(val OptExaminationInfoV2UpdatingResponseDepositCycleInfo) {
	s.DepositCycleInfo = val
}

func (*ExaminationInfoV2UpdatingResponse) updateTenantExaminationInfoV2Res() {}

type ExaminationInfoV2UpdatingResponseBankAccountInfo struct {
	// 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 支店コード.
	BranchCode string `json:"branch_code"`
	// 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind `json:"account_kind"`
	// 口座番号.
	AccountNumber string `json:"account_number"`
	// 口座名義.
	AccountName string `json:"account_name"`
}

// GetBankCode returns the value of BankCode.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) GetBankCode() OptString {
	return s.BankCode
}

// GetBranchCode returns the value of BranchCode.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) GetBranchCode() string {
	return s.BranchCode
}

// GetAccountKind returns the value of AccountKind.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) GetAccountKind() ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) GetAccountNumber() string {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) GetAccountName() string {
	return s.AccountName
}

// SetBankCode sets the value of BankCode.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) SetBranchCode(val string) {
	s.BranchCode = val
}

// SetAccountKind sets the value of AccountKind.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) SetAccountKind(val ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) SetAccountNumber(val string) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) SetAccountName(val string) {
	s.AccountName = val
}

// 口座種別
// - `0`: 普通
// - `1`: 当座.
type ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind float64

const (
	ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind0 ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind = 0
	ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind1 ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind = 1
)

// AllValues returns all ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind values.
func (ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind) AllValues() []ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind {
	return []ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind{
		ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind0,
		ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind1,
	}
}

type ExaminationInfoV2UpdatingResponseContractInfo struct {
	// 代表者 姓
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	RepresentativeLastName NilString `json:"representative_last_name"`
	// 代表者 姓（カナ）\
	// 形式： 全角カナ.
	RepresentativeLastNameKana NilString `json:"representative_last_name_kana"`
	// 代表者 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	RepresentativeFirstName NilString `json:"representative_first_name"`
	// 代表者 名（カナ）\
	// 形式： 全角カナ.
	RepresentativeFirstNameKana NilString `json:"representative_first_name_kana"`
	// 代表者 住所 郵便番号\
	// 形式：`xxx-xxxx`.
	RepresentativePostalCode NilString `json:"representative_postal_code"`
	// 代表者 住所 都道府県\
	// 形式： 漢字.
	RepresentativePrefecture NilString `json:"representative_prefecture"`
	// 代表者 住所 都道府県（カナ）\
	// 形式： 全角カナ.
	RepresentativePrefectureKana NilString `json:"representative_prefecture_kana"`
	// 代表者 住所 市区町村\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressMunicipality NilString `json:"representative_address_municipality"`
	// 代表者 住所 市区町村（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressMunicipalityKana NilString `json:"representative_address_municipality_kana"`
	// 代表者 住所 町域\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressSection NilString `json:"representative_address_section"`
	// 代表者 住所 町域（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressSectionKana NilString `json:"representative_address_section_kana"`
	// 代表者 住所 番地\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressChrome NilString `json:"representative_address_chrome"`
	// 代表者 住所 番地（カナ）.
	RepresentativeAddressChromeKana NilString `json:"representative_address_chrome_kana"`
	// 代表者 住所 建物名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	RepresentativeAddressBuildingName OptNilString `json:"representative_address_building_name"`
	// 代表者 住所 建物名（カナ）\
	// 形式： 全角カナ.
	RepresentativeAddressBuildingNameKana OptNilString `json:"representative_address_building_name_kana"`
	// 代表者 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	RepresentativeTel NilString `json:"representative_tel"`
	// 代表者 生年月日\
	// \
	// 形式：`yyyy/MM/dd`.
	RepresentativeBirthday NilString `json:"representative_birthday"`
	// 代表者 性別
	// - `0`: 男性
	// - `1`: 女性.
	RepresentativeGender NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender `json:"representative_gender"`
	// 担当者1 姓\
	// 形式： 漢字/ひらがな/カタカナ/半角英字\
	// \
	// fincodeは担当者1,
	// 2宛てに審査結果の通知や審査保留対応の連絡などを行います。.
	Staff1LastName NilString `json:"staff1_last_name"`
	// 担当者1 姓（カナ）\
	// 形式： 全角カナ.
	Staff1LastNameKana NilString `json:"staff1_last_name_kana"`
	// 担当者1 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff1FirstName NilString `json:"staff1_first_name"`
	// 担当者1 名（カナ）\
	// 形式： 全角カナ.
	Staff1FirstNameKana NilString `json:"staff1_first_name_kana"`
	// 担当者1 会社名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff1CompanyName NilString `json:"staff1_company_name"`
	// 担当者1 部署名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff1Belongs NilString `json:"staff1_belongs"`
	// 担当者1 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	Staff1Tel NilString `json:"staff1_tel"`
	// 担当者1 メールアドレス\
	// 形式： RFC 5322.
	Staff1Mail NilString `json:"staff1_mail"`
	// 担当者2 姓\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff2LastName OptNilString `json:"staff2_last_name"`
	// 担当者2 姓（カナ）\
	// 形式： 全角カナ.
	Staff2LastNameKana OptNilString `json:"staff2_last_name_kana"`
	// 担当者2 名\
	// 形式： 漢字/ひらがな/カタカナ/半角英字.
	Staff2FirstName OptNilString `json:"staff2_first_name"`
	// 担当者2 名（カナ）\
	// 形式： 全角カナ.
	Staff2FirstNameKana OptNilString `json:"staff2_first_name_kana"`
	// 担当者2 会社名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff2CompanyName OptNilString `json:"staff2_company_name"`
	// 担当者2 部署名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	Staff2Belongs OptNilString `json:"staff2_belongs"`
	// 担当者2 電話番号\
	// 形式： 半角数字（ハイフンなし、PHS番号不可）.
	Staff2Tel OptNilString `json:"staff2_tel"`
	// 担当者2 メールアドレス\
	// 形式： RFC 5322.
	Staff2Mail OptNilString `json:"staff2_mail"`
	// 事業形態\
	// \
	// - `true`: 法人\
	// - `false`: 個人事業主.
	Corporate NilBool `json:"corporate"`
	// 法人情報
	// \
	// `corporate`が`true`のとき必須.
	CorporateInfo OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo `json:"corporate_info"`
}

// GetRepresentativeLastName returns the value of RepresentativeLastName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeLastName() NilString {
	return s.RepresentativeLastName
}

// GetRepresentativeLastNameKana returns the value of RepresentativeLastNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeLastNameKana() NilString {
	return s.RepresentativeLastNameKana
}

// GetRepresentativeFirstName returns the value of RepresentativeFirstName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeFirstName() NilString {
	return s.RepresentativeFirstName
}

// GetRepresentativeFirstNameKana returns the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeFirstNameKana() NilString {
	return s.RepresentativeFirstNameKana
}

// GetRepresentativePostalCode returns the value of RepresentativePostalCode.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativePostalCode() NilString {
	return s.RepresentativePostalCode
}

// GetRepresentativePrefecture returns the value of RepresentativePrefecture.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativePrefecture() NilString {
	return s.RepresentativePrefecture
}

// GetRepresentativePrefectureKana returns the value of RepresentativePrefectureKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativePrefectureKana() NilString {
	return s.RepresentativePrefectureKana
}

// GetRepresentativeAddressMunicipality returns the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressMunicipality() NilString {
	return s.RepresentativeAddressMunicipality
}

// GetRepresentativeAddressMunicipalityKana returns the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressMunicipalityKana() NilString {
	return s.RepresentativeAddressMunicipalityKana
}

// GetRepresentativeAddressSection returns the value of RepresentativeAddressSection.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressSection() NilString {
	return s.RepresentativeAddressSection
}

// GetRepresentativeAddressSectionKana returns the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressSectionKana() NilString {
	return s.RepresentativeAddressSectionKana
}

// GetRepresentativeAddressChrome returns the value of RepresentativeAddressChrome.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressChrome() NilString {
	return s.RepresentativeAddressChrome
}

// GetRepresentativeAddressChromeKana returns the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressChromeKana() NilString {
	return s.RepresentativeAddressChromeKana
}

// GetRepresentativeAddressBuildingName returns the value of RepresentativeAddressBuildingName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressBuildingName() OptNilString {
	return s.RepresentativeAddressBuildingName
}

// GetRepresentativeAddressBuildingNameKana returns the value of RepresentativeAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeAddressBuildingNameKana() OptNilString {
	return s.RepresentativeAddressBuildingNameKana
}

// GetRepresentativeTel returns the value of RepresentativeTel.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeTel() NilString {
	return s.RepresentativeTel
}

// GetRepresentativeBirthday returns the value of RepresentativeBirthday.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeBirthday() NilString {
	return s.RepresentativeBirthday
}

// GetRepresentativeGender returns the value of RepresentativeGender.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetRepresentativeGender() NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender {
	return s.RepresentativeGender
}

// GetStaff1LastName returns the value of Staff1LastName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1LastName() NilString {
	return s.Staff1LastName
}

// GetStaff1LastNameKana returns the value of Staff1LastNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1LastNameKana() NilString {
	return s.Staff1LastNameKana
}

// GetStaff1FirstName returns the value of Staff1FirstName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1FirstName() NilString {
	return s.Staff1FirstName
}

// GetStaff1FirstNameKana returns the value of Staff1FirstNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1FirstNameKana() NilString {
	return s.Staff1FirstNameKana
}

// GetStaff1CompanyName returns the value of Staff1CompanyName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1CompanyName() NilString {
	return s.Staff1CompanyName
}

// GetStaff1Belongs returns the value of Staff1Belongs.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1Belongs() NilString {
	return s.Staff1Belongs
}

// GetStaff1Tel returns the value of Staff1Tel.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1Tel() NilString {
	return s.Staff1Tel
}

// GetStaff1Mail returns the value of Staff1Mail.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff1Mail() NilString {
	return s.Staff1Mail
}

// GetStaff2LastName returns the value of Staff2LastName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2LastName() OptNilString {
	return s.Staff2LastName
}

// GetStaff2LastNameKana returns the value of Staff2LastNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2LastNameKana() OptNilString {
	return s.Staff2LastNameKana
}

// GetStaff2FirstName returns the value of Staff2FirstName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2FirstName() OptNilString {
	return s.Staff2FirstName
}

// GetStaff2FirstNameKana returns the value of Staff2FirstNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2FirstNameKana() OptNilString {
	return s.Staff2FirstNameKana
}

// GetStaff2CompanyName returns the value of Staff2CompanyName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2CompanyName() OptNilString {
	return s.Staff2CompanyName
}

// GetStaff2Belongs returns the value of Staff2Belongs.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2Belongs() OptNilString {
	return s.Staff2Belongs
}

// GetStaff2Tel returns the value of Staff2Tel.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2Tel() OptNilString {
	return s.Staff2Tel
}

// GetStaff2Mail returns the value of Staff2Mail.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetStaff2Mail() OptNilString {
	return s.Staff2Mail
}

// GetCorporate returns the value of Corporate.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetCorporate() NilBool {
	return s.Corporate
}

// GetCorporateInfo returns the value of CorporateInfo.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) GetCorporateInfo() OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo {
	return s.CorporateInfo
}

// SetRepresentativeLastName sets the value of RepresentativeLastName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeLastName(val NilString) {
	s.RepresentativeLastName = val
}

// SetRepresentativeLastNameKana sets the value of RepresentativeLastNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeLastNameKana(val NilString) {
	s.RepresentativeLastNameKana = val
}

// SetRepresentativeFirstName sets the value of RepresentativeFirstName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeFirstName(val NilString) {
	s.RepresentativeFirstName = val
}

// SetRepresentativeFirstNameKana sets the value of RepresentativeFirstNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeFirstNameKana(val NilString) {
	s.RepresentativeFirstNameKana = val
}

// SetRepresentativePostalCode sets the value of RepresentativePostalCode.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativePostalCode(val NilString) {
	s.RepresentativePostalCode = val
}

// SetRepresentativePrefecture sets the value of RepresentativePrefecture.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativePrefecture(val NilString) {
	s.RepresentativePrefecture = val
}

// SetRepresentativePrefectureKana sets the value of RepresentativePrefectureKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativePrefectureKana(val NilString) {
	s.RepresentativePrefectureKana = val
}

// SetRepresentativeAddressMunicipality sets the value of RepresentativeAddressMunicipality.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressMunicipality(val NilString) {
	s.RepresentativeAddressMunicipality = val
}

// SetRepresentativeAddressMunicipalityKana sets the value of RepresentativeAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressMunicipalityKana(val NilString) {
	s.RepresentativeAddressMunicipalityKana = val
}

// SetRepresentativeAddressSection sets the value of RepresentativeAddressSection.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressSection(val NilString) {
	s.RepresentativeAddressSection = val
}

// SetRepresentativeAddressSectionKana sets the value of RepresentativeAddressSectionKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressSectionKana(val NilString) {
	s.RepresentativeAddressSectionKana = val
}

// SetRepresentativeAddressChrome sets the value of RepresentativeAddressChrome.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressChrome(val NilString) {
	s.RepresentativeAddressChrome = val
}

// SetRepresentativeAddressChromeKana sets the value of RepresentativeAddressChromeKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressChromeKana(val NilString) {
	s.RepresentativeAddressChromeKana = val
}

// SetRepresentativeAddressBuildingName sets the value of RepresentativeAddressBuildingName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressBuildingName(val OptNilString) {
	s.RepresentativeAddressBuildingName = val
}

// SetRepresentativeAddressBuildingNameKana sets the value of RepresentativeAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeAddressBuildingNameKana(val OptNilString) {
	s.RepresentativeAddressBuildingNameKana = val
}

// SetRepresentativeTel sets the value of RepresentativeTel.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeTel(val NilString) {
	s.RepresentativeTel = val
}

// SetRepresentativeBirthday sets the value of RepresentativeBirthday.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeBirthday(val NilString) {
	s.RepresentativeBirthday = val
}

// SetRepresentativeGender sets the value of RepresentativeGender.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetRepresentativeGender(val NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) {
	s.RepresentativeGender = val
}

// SetStaff1LastName sets the value of Staff1LastName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1LastName(val NilString) {
	s.Staff1LastName = val
}

// SetStaff1LastNameKana sets the value of Staff1LastNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1LastNameKana(val NilString) {
	s.Staff1LastNameKana = val
}

// SetStaff1FirstName sets the value of Staff1FirstName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1FirstName(val NilString) {
	s.Staff1FirstName = val
}

// SetStaff1FirstNameKana sets the value of Staff1FirstNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1FirstNameKana(val NilString) {
	s.Staff1FirstNameKana = val
}

// SetStaff1CompanyName sets the value of Staff1CompanyName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1CompanyName(val NilString) {
	s.Staff1CompanyName = val
}

// SetStaff1Belongs sets the value of Staff1Belongs.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1Belongs(val NilString) {
	s.Staff1Belongs = val
}

// SetStaff1Tel sets the value of Staff1Tel.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1Tel(val NilString) {
	s.Staff1Tel = val
}

// SetStaff1Mail sets the value of Staff1Mail.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff1Mail(val NilString) {
	s.Staff1Mail = val
}

// SetStaff2LastName sets the value of Staff2LastName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2LastName(val OptNilString) {
	s.Staff2LastName = val
}

// SetStaff2LastNameKana sets the value of Staff2LastNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2LastNameKana(val OptNilString) {
	s.Staff2LastNameKana = val
}

// SetStaff2FirstName sets the value of Staff2FirstName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2FirstName(val OptNilString) {
	s.Staff2FirstName = val
}

// SetStaff2FirstNameKana sets the value of Staff2FirstNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2FirstNameKana(val OptNilString) {
	s.Staff2FirstNameKana = val
}

// SetStaff2CompanyName sets the value of Staff2CompanyName.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2CompanyName(val OptNilString) {
	s.Staff2CompanyName = val
}

// SetStaff2Belongs sets the value of Staff2Belongs.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2Belongs(val OptNilString) {
	s.Staff2Belongs = val
}

// SetStaff2Tel sets the value of Staff2Tel.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2Tel(val OptNilString) {
	s.Staff2Tel = val
}

// SetStaff2Mail sets the value of Staff2Mail.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetStaff2Mail(val OptNilString) {
	s.Staff2Mail = val
}

// SetCorporate sets the value of Corporate.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetCorporate(val NilBool) {
	s.Corporate = val
}

// SetCorporateInfo sets the value of CorporateInfo.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) SetCorporateInfo(val OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) {
	s.CorporateInfo = val
}

type ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo struct {
	// 法人番号.
	CorporateNumber NilString `json:"corporate_number"`
	// 法人名.
	CorporateName string `json:"corporate_name"`
	// 法人名（カナ）.
	CorporateNameKana string `json:"corporate_name_kana"`
	// 企業サイトURL.
	Hp OptNilString `json:"hp"`
	// 資本金.
	Capital NilFloat64 `json:"capital"`
	// 設立日.
	EstablishedAt NilString `json:"established_at"`
	// 年商.
	YearlySales NilFloat64 `json:"yearly_sales"`
	// 事業内容.
	BusinessDetails NilString `json:"business_details"`
	// 会社住所 郵便番号\
	// 形式： 半角数字（ハイフンあり）.
	CompanyPostalCode NilString `json:"company_postal_code"`
	// 会社住所 都道府県\
	// 形式： 漢字.
	CompanyPrefecture NilString `json:"company_prefecture"`
	// 会社住所 都道府県（カナ）\
	// 形式： 全角カタカナ.
	CompanyPrefectureKana NilString `json:"company_prefecture_kana"`
	// 会社住所 市区町村\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressMunicipality NilString `json:"company_address_municipality"`
	// 会社住所 市区町村（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressMunicipalityKana NilString `json:"company_address_municipality_kana"`
	// 会社住所 町域\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressSection NilString `json:"company_address_section"`
	// 会社住所 町域（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressSectionKana NilString `json:"company_address_section_kana"`
	// 会社住所 番地\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressChrome NilString `json:"company_address_chrome"`
	// 会社住所 番地（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressChromeKana NilString `json:"company_address_chrome_kana"`
	// 会社住所 ビル名\
	// 形式： 漢字/ひらがな/カタカナ/半角英数.
	CompanyAddressBuildingName OptNilString `json:"company_address_building_name"`
	// 会社住所 ビル名（カナ）\
	// 形式： 全角カタカナ.
	CompanyAddressBuildingNameKana OptNilString `json:"company_address_building_name_kana"`
	// 会社情報 電話番号\
	// 形式： 半角数字（ハイフンなし）.
	CompanyTel NilString `json:"company_tel"`
}

// GetCorporateNumber returns the value of CorporateNumber.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCorporateNumber() NilString {
	return s.CorporateNumber
}

// GetCorporateName returns the value of CorporateName.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCorporateName() string {
	return s.CorporateName
}

// GetCorporateNameKana returns the value of CorporateNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCorporateNameKana() string {
	return s.CorporateNameKana
}

// GetHp returns the value of Hp.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetHp() OptNilString {
	return s.Hp
}

// GetCapital returns the value of Capital.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCapital() NilFloat64 {
	return s.Capital
}

// GetEstablishedAt returns the value of EstablishedAt.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetEstablishedAt() NilString {
	return s.EstablishedAt
}

// GetYearlySales returns the value of YearlySales.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetYearlySales() NilFloat64 {
	return s.YearlySales
}

// GetBusinessDetails returns the value of BusinessDetails.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetBusinessDetails() NilString {
	return s.BusinessDetails
}

// GetCompanyPostalCode returns the value of CompanyPostalCode.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyPostalCode() NilString {
	return s.CompanyPostalCode
}

// GetCompanyPrefecture returns the value of CompanyPrefecture.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyPrefecture() NilString {
	return s.CompanyPrefecture
}

// GetCompanyPrefectureKana returns the value of CompanyPrefectureKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyPrefectureKana() NilString {
	return s.CompanyPrefectureKana
}

// GetCompanyAddressMunicipality returns the value of CompanyAddressMunicipality.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressMunicipality() NilString {
	return s.CompanyAddressMunicipality
}

// GetCompanyAddressMunicipalityKana returns the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressMunicipalityKana() NilString {
	return s.CompanyAddressMunicipalityKana
}

// GetCompanyAddressSection returns the value of CompanyAddressSection.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressSection() NilString {
	return s.CompanyAddressSection
}

// GetCompanyAddressSectionKana returns the value of CompanyAddressSectionKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressSectionKana() NilString {
	return s.CompanyAddressSectionKana
}

// GetCompanyAddressChrome returns the value of CompanyAddressChrome.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressChrome() NilString {
	return s.CompanyAddressChrome
}

// GetCompanyAddressChromeKana returns the value of CompanyAddressChromeKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressChromeKana() NilString {
	return s.CompanyAddressChromeKana
}

// GetCompanyAddressBuildingName returns the value of CompanyAddressBuildingName.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressBuildingName() OptNilString {
	return s.CompanyAddressBuildingName
}

// GetCompanyAddressBuildingNameKana returns the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyAddressBuildingNameKana() OptNilString {
	return s.CompanyAddressBuildingNameKana
}

// GetCompanyTel returns the value of CompanyTel.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) GetCompanyTel() NilString {
	return s.CompanyTel
}

// SetCorporateNumber sets the value of CorporateNumber.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCorporateNumber(val NilString) {
	s.CorporateNumber = val
}

// SetCorporateName sets the value of CorporateName.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCorporateName(val string) {
	s.CorporateName = val
}

// SetCorporateNameKana sets the value of CorporateNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCorporateNameKana(val string) {
	s.CorporateNameKana = val
}

// SetHp sets the value of Hp.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetHp(val OptNilString) {
	s.Hp = val
}

// SetCapital sets the value of Capital.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCapital(val NilFloat64) {
	s.Capital = val
}

// SetEstablishedAt sets the value of EstablishedAt.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetEstablishedAt(val NilString) {
	s.EstablishedAt = val
}

// SetYearlySales sets the value of YearlySales.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetYearlySales(val NilFloat64) {
	s.YearlySales = val
}

// SetBusinessDetails sets the value of BusinessDetails.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetBusinessDetails(val NilString) {
	s.BusinessDetails = val
}

// SetCompanyPostalCode sets the value of CompanyPostalCode.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyPostalCode(val NilString) {
	s.CompanyPostalCode = val
}

// SetCompanyPrefecture sets the value of CompanyPrefecture.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyPrefecture(val NilString) {
	s.CompanyPrefecture = val
}

// SetCompanyPrefectureKana sets the value of CompanyPrefectureKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyPrefectureKana(val NilString) {
	s.CompanyPrefectureKana = val
}

// SetCompanyAddressMunicipality sets the value of CompanyAddressMunicipality.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressMunicipality(val NilString) {
	s.CompanyAddressMunicipality = val
}

// SetCompanyAddressMunicipalityKana sets the value of CompanyAddressMunicipalityKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressMunicipalityKana(val NilString) {
	s.CompanyAddressMunicipalityKana = val
}

// SetCompanyAddressSection sets the value of CompanyAddressSection.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressSection(val NilString) {
	s.CompanyAddressSection = val
}

// SetCompanyAddressSectionKana sets the value of CompanyAddressSectionKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressSectionKana(val NilString) {
	s.CompanyAddressSectionKana = val
}

// SetCompanyAddressChrome sets the value of CompanyAddressChrome.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressChrome(val NilString) {
	s.CompanyAddressChrome = val
}

// SetCompanyAddressChromeKana sets the value of CompanyAddressChromeKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressChromeKana(val NilString) {
	s.CompanyAddressChromeKana = val
}

// SetCompanyAddressBuildingName sets the value of CompanyAddressBuildingName.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressBuildingName(val OptNilString) {
	s.CompanyAddressBuildingName = val
}

// SetCompanyAddressBuildingNameKana sets the value of CompanyAddressBuildingNameKana.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyAddressBuildingNameKana(val OptNilString) {
	s.CompanyAddressBuildingNameKana = val
}

// SetCompanyTel sets the value of CompanyTel.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetCompanyTel(val NilString) {
	s.CompanyTel = val
}

// 代表者 性別
// - `0`: 男性
// - `1`: 女性.
type ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender int

const (
	ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender0 ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender = 0
	ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender1 ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender = 1
)

// AllValues returns all ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender values.
func (ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) AllValues() []ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender {
	return []ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender{
		ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender0,
		ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender1,
	}
}

type ExaminationInfoV2UpdatingResponseDepositCycleInfo struct {
	DepositCycleMasterID ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID `json:"deposit_cycle_master_id"`
}

// GetDepositCycleMasterID returns the value of DepositCycleMasterID.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) GetDepositCycleMasterID() ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID {
	return s.DepositCycleMasterID
}

// SetDepositCycleMasterID sets the value of DepositCycleMasterID.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) SetDepositCycleMasterID(val ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID) {
	s.DepositCycleMasterID = val
}

// 入金サイクルマスタID\
// 入金サイクルについては[Docs > 精算管理 >
// クレジットカード決済の入金サイクル](https://docs.fincode.
// jp/business_management/deposit)を参照できます。
// - `1`: スタンダード（月1回, 月末締め翌月末入金）
// - `2`: スタンダード（月2回, 15日&月末締め15日後入金）.
type ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID int

const (
	ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID1 ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID = 1
	ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID2 ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID = 2
)

// AllValues returns all ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID values.
func (ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID) AllValues() []ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID {
	return []ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID{
		ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID1,
		ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID2,
	}
}

type ExaminationInfoV2UpdatingResponseShopInfo struct {
	// Fincodeにおけるショップ名.
	ShopName string `json:"shop_name"`
	// Fincodeにおけるショップ名（カナ）.
	ShopNameKana string `json:"shop_name_kana"`
	// Fincodeにおけるショップ名（英語）.
	ShopNameEn string `json:"shop_name_en"`
	// 購入者向けサポート窓口 メールアドレス\
	// 形式： RFC 5322.
	SupportMail NilString `json:"support_mail"`
	// 購入者向けサポート窓口 電話番号\
	// 形式： 電話番号（ハイフンなし）.
	SupportTel NilString `json:"support_tel"`
	// 1回の決済における金額（単価）\
	// \
	// 例： `1000`（1000円）.
	UnitPrice OptNilFloat64 `json:"unit_price"`
	// Fincode審査に時間がかかるコンテンツを取り扱うかどうかの表明
	// - `true`: fincode審査に時間がかかるコンテンツを取り扱う
	// - `false`: fincode審査に時間がかかるコンテンツを取り扱わない
	// 以下の商材を取り扱う場合は`true`を指定する必要があります。
	// - 呉服
	// - コンサルディングサービス
	// - エステ、美容サロン、美容医療
	// - スポーツ施設・フィットネスクラブ
	// - カルチャースクール・通信講座
	// - データ販売
	// - 情報詳細（情報の内容自体が商品となるもの）
	// - 占い
	// - サプリメント・健康食品
	// - 美容品・化粧品
	// - カツラ
	// - 旅行業に該当するサービス
	// - タバコ・CBD
	// - 寄付金.
	DealsLongApplyContent NilBool `json:"deals_long_apply_content"`
	// Fincodeで取扱不可の商材を取り扱わないことの表明
	// - `true`: 取扱不可の商材を取り扱う予定はない
	// - `false`: 取扱不可の商材を取り扱う予定がある
	// fincodeの禁止商材は以下の通りです。
	// - 金融行為（クレジットカードショッピング枠の現金化等）
	// -
	// 仮想通貨取引、金券（印紙、切手等含む）、商品券、プリペイドカード、有価証券
	// - 賭博、ギャンブル
	// - RMT（リアルマネートレーディング）
	// - ペット等の生き物全般（※標本・剥製も含む）
	// - お布施
	// - 危険ドラッグ、デザイナーズドラッグ
	// -
	// 処方箋なしで購入できる処方薬（ルミガン・ラディース・クラッシュビスタ・ケアプロスト等）
	// - 第三者の著作権・肖像権・知的所有権等を侵害する恐れがあるもの
	// - 公序良俗に反するもの（アダルト、出会い系サイトを含む）
	// -
	// 法律・法令の定めに違反するもの（銃刀法・麻薬取締法・ワシントン条約・薬事法）.
	DealsInsecureContent NilBool `json:"deals_insecure_content"`
	// 改正割賦販売法に基づく訴訟敗訴歴があるかどうかの表明
	// - `true`: 改正割賦販売法に基づく訴訟敗訴歴がある
	// - `false`: 改正割賦販売法に基づく訴訟敗訴歴はない.
	LostTrial    NilBool                                               `json:"lost_trial"`
	UseOfFincode ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode `json:"use_of_fincode"`
	// Webサイトの公開状況\
	// \
	// fincode審査時点で決済機能を提供するWebサイトが閲覧可能かどうかを示します。\
	// `usage_of_fincode.used_on_web`が`true`の場合、指定必須です。
	// - `true`: fincode審査チームがサイトを閲覧可能
	// - `false`: fincode審査チームがサイトを閲覧不可能.
	SitePublished OptNilBool `json:"site_published"`
	// Webサイト情報\
	// \
	// fincode審査チームが審査上確認をする、fincodeによる決済を行うWebサイトの情報.
	SiteInfo OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo `json:"site_info"`
	// プリペイドポイントの有無\
	// \
	// ショップがプリペイドポイントを導入しているかどうか.
	PrepaidPoint     OptNilBool                                                   `json:"prepaid_point"`
	PrepaidPointInfo OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo `json:"prepaid_point_info"`
	// 商材情報.
	Provides ExaminationInfoV2UpdatingResponseShopInfoProvides `json:"provides"`
	// 取扱商材の説明\
	// \
	// ショップの提供する商材についての説明.
	ContentDescription NilString `json:"content_description"`
	// 物販商材 商材説明.
	ProductContentInfo OptContentInfoV2 `json:"product_content_info"`
	// サービス商材 商材説明.
	ServiceContentInfo OptContentInfoV2 `json:"service_content_info"`
	// デジタルコンテンツ 商材説明.
	DigitalContentInfo OptContentInfoV2 `json:"digital_content_info"`
	// 追加提出情報\
	// \
	// 審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\
	// 特定商取引法に基づく表示情報を基に値を設定してください。.
	AdditionalInfo OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo `json:"additional_info"`
}

// GetShopName returns the value of ShopName.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetShopName() string {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetShopNameKana() string {
	return s.ShopNameKana
}

// GetShopNameEn returns the value of ShopNameEn.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetShopNameEn() string {
	return s.ShopNameEn
}

// GetSupportMail returns the value of SupportMail.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetSupportMail() NilString {
	return s.SupportMail
}

// GetSupportTel returns the value of SupportTel.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetSupportTel() NilString {
	return s.SupportTel
}

// GetUnitPrice returns the value of UnitPrice.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetUnitPrice() OptNilFloat64 {
	return s.UnitPrice
}

// GetDealsLongApplyContent returns the value of DealsLongApplyContent.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetDealsLongApplyContent() NilBool {
	return s.DealsLongApplyContent
}

// GetDealsInsecureContent returns the value of DealsInsecureContent.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetDealsInsecureContent() NilBool {
	return s.DealsInsecureContent
}

// GetLostTrial returns the value of LostTrial.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetLostTrial() NilBool {
	return s.LostTrial
}

// GetUseOfFincode returns the value of UseOfFincode.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetUseOfFincode() ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode {
	return s.UseOfFincode
}

// GetSitePublished returns the value of SitePublished.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetSitePublished() OptNilBool {
	return s.SitePublished
}

// GetSiteInfo returns the value of SiteInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetSiteInfo() OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo {
	return s.SiteInfo
}

// GetPrepaidPoint returns the value of PrepaidPoint.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetPrepaidPoint() OptNilBool {
	return s.PrepaidPoint
}

// GetPrepaidPointInfo returns the value of PrepaidPointInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetPrepaidPointInfo() OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo {
	return s.PrepaidPointInfo
}

// GetProvides returns the value of Provides.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetProvides() ExaminationInfoV2UpdatingResponseShopInfoProvides {
	return s.Provides
}

// GetContentDescription returns the value of ContentDescription.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetContentDescription() NilString {
	return s.ContentDescription
}

// GetProductContentInfo returns the value of ProductContentInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetProductContentInfo() OptContentInfoV2 {
	return s.ProductContentInfo
}

// GetServiceContentInfo returns the value of ServiceContentInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetServiceContentInfo() OptContentInfoV2 {
	return s.ServiceContentInfo
}

// GetDigitalContentInfo returns the value of DigitalContentInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetDigitalContentInfo() OptContentInfoV2 {
	return s.DigitalContentInfo
}

// GetAdditionalInfo returns the value of AdditionalInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) GetAdditionalInfo() OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo {
	return s.AdditionalInfo
}

// SetShopName sets the value of ShopName.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetShopName(val string) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetShopNameKana(val string) {
	s.ShopNameKana = val
}

// SetShopNameEn sets the value of ShopNameEn.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetShopNameEn(val string) {
	s.ShopNameEn = val
}

// SetSupportMail sets the value of SupportMail.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetSupportMail(val NilString) {
	s.SupportMail = val
}

// SetSupportTel sets the value of SupportTel.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetSupportTel(val NilString) {
	s.SupportTel = val
}

// SetUnitPrice sets the value of UnitPrice.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetUnitPrice(val OptNilFloat64) {
	s.UnitPrice = val
}

// SetDealsLongApplyContent sets the value of DealsLongApplyContent.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetDealsLongApplyContent(val NilBool) {
	s.DealsLongApplyContent = val
}

// SetDealsInsecureContent sets the value of DealsInsecureContent.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetDealsInsecureContent(val NilBool) {
	s.DealsInsecureContent = val
}

// SetLostTrial sets the value of LostTrial.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetLostTrial(val NilBool) {
	s.LostTrial = val
}

// SetUseOfFincode sets the value of UseOfFincode.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetUseOfFincode(val ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) {
	s.UseOfFincode = val
}

// SetSitePublished sets the value of SitePublished.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetSitePublished(val OptNilBool) {
	s.SitePublished = val
}

// SetSiteInfo sets the value of SiteInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetSiteInfo(val OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) {
	s.SiteInfo = val
}

// SetPrepaidPoint sets the value of PrepaidPoint.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetPrepaidPoint(val OptNilBool) {
	s.PrepaidPoint = val
}

// SetPrepaidPointInfo sets the value of PrepaidPointInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetPrepaidPointInfo(val OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) {
	s.PrepaidPointInfo = val
}

// SetProvides sets the value of Provides.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetProvides(val ExaminationInfoV2UpdatingResponseShopInfoProvides) {
	s.Provides = val
}

// SetContentDescription sets the value of ContentDescription.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetContentDescription(val NilString) {
	s.ContentDescription = val
}

// SetProductContentInfo sets the value of ProductContentInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetProductContentInfo(val OptContentInfoV2) {
	s.ProductContentInfo = val
}

// SetServiceContentInfo sets the value of ServiceContentInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetServiceContentInfo(val OptContentInfoV2) {
	s.ServiceContentInfo = val
}

// SetDigitalContentInfo sets the value of DigitalContentInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetDigitalContentInfo(val OptContentInfoV2) {
	s.DigitalContentInfo = val
}

// SetAdditionalInfo sets the value of AdditionalInfo.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) SetAdditionalInfo(val OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) {
	s.AdditionalInfo = val
}

// 追加提出情報\
// \
// 審査開始時点でショップのWebサイトが公開されていない場合（`use_of_fincode.used_on_web`が`false`または`site_published`が`false`の場合）、追加で提供する情報です。\
// 特定商取引法に基づく表示情報を基に値を設定してください。.
type ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo struct {
	// 販売責任者氏名\
	// \
	// ショップの販売責任者の氏名.
	ShopSalesManagerName OptNilString `json:"shop_sales_manager_name"`
	// 屋号・サービス名\
	// \
	// ショップのサービスの名称.
	ShopServoceName NilString `json:"shop_servoce_name"`
	// 支払い方法\
	// \
	// ショップで利用可能な支払い方法.
	ShopHowToPay NilString `json:"shop_how_to_pay"`
	// 商品代金以外の料金の説明\
	// \
	// 送料、手数料、消費税などの商品代金以外の料金についての説明.
	ShopChargeDescription OptNilString `json:"shop_charge_description"`
	// 商品の引き渡し時期\
	// \
	// 商品の引き渡し時期についての説明.
	ShopProductDeliveryTime NilString `json:"shop_product_delivery_time"`
	// 返品・交換に関する条件\
	// \
	// 返品・交換に関する条件についての説明.
	ShopReturnGoodsHandingConditions NilString `json:"shop_return_goods_handing_conditions"`
}

// GetShopSalesManagerName returns the value of ShopSalesManagerName.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) GetShopSalesManagerName() OptNilString {
	return s.ShopSalesManagerName
}

// GetShopServoceName returns the value of ShopServoceName.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) GetShopServoceName() NilString {
	return s.ShopServoceName
}

// GetShopHowToPay returns the value of ShopHowToPay.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) GetShopHowToPay() NilString {
	return s.ShopHowToPay
}

// GetShopChargeDescription returns the value of ShopChargeDescription.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) GetShopChargeDescription() OptNilString {
	return s.ShopChargeDescription
}

// GetShopProductDeliveryTime returns the value of ShopProductDeliveryTime.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) GetShopProductDeliveryTime() NilString {
	return s.ShopProductDeliveryTime
}

// GetShopReturnGoodsHandingConditions returns the value of ShopReturnGoodsHandingConditions.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) GetShopReturnGoodsHandingConditions() NilString {
	return s.ShopReturnGoodsHandingConditions
}

// SetShopSalesManagerName sets the value of ShopSalesManagerName.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetShopSalesManagerName(val OptNilString) {
	s.ShopSalesManagerName = val
}

// SetShopServoceName sets the value of ShopServoceName.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetShopServoceName(val NilString) {
	s.ShopServoceName = val
}

// SetShopHowToPay sets the value of ShopHowToPay.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetShopHowToPay(val NilString) {
	s.ShopHowToPay = val
}

// SetShopChargeDescription sets the value of ShopChargeDescription.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetShopChargeDescription(val OptNilString) {
	s.ShopChargeDescription = val
}

// SetShopProductDeliveryTime sets the value of ShopProductDeliveryTime.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetShopProductDeliveryTime(val NilString) {
	s.ShopProductDeliveryTime = val
}

// SetShopReturnGoodsHandingConditions sets the value of ShopReturnGoodsHandingConditions.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetShopReturnGoodsHandingConditions(val NilString) {
	s.ShopReturnGoodsHandingConditions = val
}

type ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo struct {
	// ポイント利用方法\
	// \
	// プリペイドポイントの利用方法.
	HowToUse OptNilString `json:"how_to_use"`
	// ポイント有効期限について\
	// \
	// プリペイドポイントの有効期限について.
	AboutExpiration OptNilString `json:"about_expiration"`
}

// GetHowToUse returns the value of HowToUse.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) GetHowToUse() OptNilString {
	return s.HowToUse
}

// GetAboutExpiration returns the value of AboutExpiration.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) GetAboutExpiration() OptNilString {
	return s.AboutExpiration
}

// SetHowToUse sets the value of HowToUse.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) SetHowToUse(val OptNilString) {
	s.HowToUse = val
}

// SetAboutExpiration sets the value of AboutExpiration.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) SetAboutExpiration(val OptNilString) {
	s.AboutExpiration = val
}

// 商材情報.
type ExaminationInfoV2UpdatingResponseShopInfoProvides struct {
	// 物販商材 提供有無\
	// \
	// ショップが物品販売を行うかどうか.
	Product OptNilBool `json:"product"`
	// サービス商材 提供有無\
	// \
	// ショップがサービス提供を行うかどうか.
	Service OptNilBool `json:"service"`
	// デジタルコンテンツ 提供有無\
	// \
	// ショップがデジタルコンテンツ販売を行うかどうか.
	DigitalContent OptNilBool `json:"digital_content"`
}

// GetProduct returns the value of Product.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) GetProduct() OptNilBool {
	return s.Product
}

// GetService returns the value of Service.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) GetService() OptNilBool {
	return s.Service
}

// GetDigitalContent returns the value of DigitalContent.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) GetDigitalContent() OptNilBool {
	return s.DigitalContent
}

// SetProduct sets the value of Product.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) SetProduct(val OptNilBool) {
	s.Product = val
}

// SetService sets the value of Service.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) SetService(val OptNilBool) {
	s.Service = val
}

// SetDigitalContent sets the value of DigitalContent.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) SetDigitalContent(val OptNilBool) {
	s.DigitalContent = val
}

// Webサイト情報\
// \
// fincode審査チームが審査上確認をする、fincodeによる決済を行うWebサイトの情報.
type ExaminationInfoV2UpdatingResponseShopInfoSiteInfo struct {
	// WebサイトURL\
	// \
	// fincode審査チームがサイトを閲覧するためのURL.
	URL NilString `json:"url"`
	// ログイン情報\
	// \
	// fincode審査チームがサイトを閲覧するためのログイン情報.
	Credential OptNilString `json:"credential"`
}

// GetURL returns the value of URL.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) GetURL() NilString {
	return s.URL
}

// GetCredential returns the value of Credential.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) GetCredential() OptNilString {
	return s.Credential
}

// SetURL sets the value of URL.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) SetURL(val NilString) {
	s.URL = val
}

// SetCredential sets the value of Credential.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) SetCredential(val OptNilString) {
	s.Credential = val
}

type ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode struct {
	// Webサイト利用有無\
	// \
	// Webサイト/Webアプリでfincodeを使用するかどうか
	// - `true`: Webサイト/Webアプリでfincodeを使用する.
	UsedOnWeb OptNilBool `json:"used_on_web"`
	// ネイティブアプリ利用有無\
	// \
	// ネイティブアプリでfincodeを使用するかどうか
	// - `true`: ネイティブアプリでfincodeを使用する.
	UsedOnApp OptNilBool `json:"used_on_app"`
}

// GetUsedOnWeb returns the value of UsedOnWeb.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) GetUsedOnWeb() OptNilBool {
	return s.UsedOnWeb
}

// GetUsedOnApp returns the value of UsedOnApp.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) GetUsedOnApp() OptNilBool {
	return s.UsedOnApp
}

// SetUsedOnWeb sets the value of UsedOnWeb.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) SetUsedOnWeb(val OptNilBool) {
	s.UsedOnWeb = val
}

// SetUsedOnApp sets the value of UsedOnApp.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) SetUsedOnApp(val OptNilBool) {
	s.UsedOnApp = val
}

// 契約ステータス\
// \
// fincodeとそのショップの運営事業者の契約のステータスを表します。
// - `101`: 未契約<br /><span
// class="smallText">まだfincodeの本番環境申請の提出が完了していない状態です。</span>
// - `102`: 利用審査中<br /><span
// class="smallText">fincodeの本番環境申請の提出が完了し、利用審査中の状態です。</span>
// - `103`: 利用審査中（VISA/Mastercard利用可）<br /><span
// class="smallText">即時利用によりVISA/Mastercardブランドの決済受付が可能な状態です。審査は継続して行われます。</span>
// - `105`: 解約済
// - `106`: 契約不成立<br /><span
// class="smallText">審査の結果、fincodeの利用が不可となった状態です。</span>
// - `107`: 稼働中<br /><span
// class="smallText">fincodeの本番環境申請が完了し、クレジットカード決済の受付が可能な状態です。</span>.
type ExaminationInfoV2UpdatingResponseStatusCode string

const (
	ExaminationInfoV2UpdatingResponseStatusCode101 ExaminationInfoV2UpdatingResponseStatusCode = "101"
	ExaminationInfoV2UpdatingResponseStatusCode102 ExaminationInfoV2UpdatingResponseStatusCode = "102"
	ExaminationInfoV2UpdatingResponseStatusCode103 ExaminationInfoV2UpdatingResponseStatusCode = "103"
	ExaminationInfoV2UpdatingResponseStatusCode105 ExaminationInfoV2UpdatingResponseStatusCode = "105"
	ExaminationInfoV2UpdatingResponseStatusCode106 ExaminationInfoV2UpdatingResponseStatusCode = "106"
	ExaminationInfoV2UpdatingResponseStatusCode107 ExaminationInfoV2UpdatingResponseStatusCode = "107"
)

// AllValues returns all ExaminationInfoV2UpdatingResponseStatusCode values.
func (ExaminationInfoV2UpdatingResponseStatusCode) AllValues() []ExaminationInfoV2UpdatingResponseStatusCode {
	return []ExaminationInfoV2UpdatingResponseStatusCode{
		ExaminationInfoV2UpdatingResponseStatusCode101,
		ExaminationInfoV2UpdatingResponseStatusCode102,
		ExaminationInfoV2UpdatingResponseStatusCode103,
		ExaminationInfoV2UpdatingResponseStatusCode105,
		ExaminationInfoV2UpdatingResponseStatusCode106,
		ExaminationInfoV2UpdatingResponseStatusCode107,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExaminationInfoV2UpdatingResponseStatusCode) MarshalText() ([]byte, error) {
	switch s {
	case ExaminationInfoV2UpdatingResponseStatusCode101:
		return []byte(s), nil
	case ExaminationInfoV2UpdatingResponseStatusCode102:
		return []byte(s), nil
	case ExaminationInfoV2UpdatingResponseStatusCode103:
		return []byte(s), nil
	case ExaminationInfoV2UpdatingResponseStatusCode105:
		return []byte(s), nil
	case ExaminationInfoV2UpdatingResponseStatusCode106:
		return []byte(s), nil
	case ExaminationInfoV2UpdatingResponseStatusCode107:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExaminationInfoV2UpdatingResponseStatusCode) UnmarshalText(data []byte) error {
	switch ExaminationInfoV2UpdatingResponseStatusCode(data) {
	case ExaminationInfoV2UpdatingResponseStatusCode101:
		*s = ExaminationInfoV2UpdatingResponseStatusCode101
		return nil
	case ExaminationInfoV2UpdatingResponseStatusCode102:
		*s = ExaminationInfoV2UpdatingResponseStatusCode102
		return nil
	case ExaminationInfoV2UpdatingResponseStatusCode103:
		*s = ExaminationInfoV2UpdatingResponseStatusCode103
		return nil
	case ExaminationInfoV2UpdatingResponseStatusCode105:
		*s = ExaminationInfoV2UpdatingResponseStatusCode105
		return nil
	case ExaminationInfoV2UpdatingResponseStatusCode106:
		*s = ExaminationInfoV2UpdatingResponseStatusCode106
		return nil
	case ExaminationInfoV2UpdatingResponseStatusCode107:
		*s = ExaminationInfoV2UpdatingResponseStatusCode107
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ExecutePaymentAfter3DSecureOK struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptExecutePaymentAfter3DSecureOKPayType `json:"pay_type"`
	JobCode OptExecutePaymentAfter3DSecureOKJobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status OptExecutePaymentAfter3DSecureOKStatus `json:"status"`
	// カードID\
	// この決済に使用されたカード情報のIDです。.
	CardID     OptNilString                                `json:"card_id"`
	Brand      OptNilExecutePaymentAfter3DSecureOKBrand    `json:"brand"`
	CardNo     OptNilString                                `json:"card_no"`
	Expire     OptNilString                                `json:"expire"`
	HolderName OptNilString                                `json:"holder_name"`
	CardNoHash OptNilString                                `json:"card_no_hash"`
	Method     OptExecutePaymentAfter3DSecureOKMethod      `json:"method"`
	PayTimes   OptNilExecutePaymentAfter3DSecureOKPayTimes `json:"pay_times"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString                                  `json:"subscription_id"`
	TdsType        OptNilExecutePaymentAfter3DSecureOKTdsType    `json:"tds_type"`
	Tds2Type       OptNilExecutePaymentAfter3DSecureOKTds2Type   `json:"tds2_type"`
	Tds2RetURL     OptNilString                                  `json:"tds2_ret_url"`
	Tds2Status     OptNilExecutePaymentAfter3DSecureOKTds2Status `json:"tds2_status"`
	MerchantName   OptNilString                                  `json:"merchant_name"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetShopID returns the value of ShopID.
func (s *ExecutePaymentAfter3DSecureOK) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ExecutePaymentAfter3DSecureOK) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentAfter3DSecureOK) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ExecutePaymentAfter3DSecureOK) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ExecutePaymentAfter3DSecureOK) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ExecutePaymentAfter3DSecureOK) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ExecutePaymentAfter3DSecureOK) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ExecutePaymentAfter3DSecureOK) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ExecutePaymentAfter3DSecureOK) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ExecutePaymentAfter3DSecureOK) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentAfter3DSecureOK) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ExecutePaymentAfter3DSecureOK) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ExecutePaymentAfter3DSecureOK) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ExecutePaymentAfter3DSecureOK) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ExecutePaymentAfter3DSecureOK) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentAfter3DSecureOK) GetPayType() OptExecutePaymentAfter3DSecureOKPayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *ExecutePaymentAfter3DSecureOK) GetJobCode() OptExecutePaymentAfter3DSecureOKJobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *ExecutePaymentAfter3DSecureOK) GetStatus() OptExecutePaymentAfter3DSecureOKStatus {
	return s.Status
}

// GetCardID returns the value of CardID.
func (s *ExecutePaymentAfter3DSecureOK) GetCardID() OptNilString {
	return s.CardID
}

// GetBrand returns the value of Brand.
func (s *ExecutePaymentAfter3DSecureOK) GetBrand() OptNilExecutePaymentAfter3DSecureOKBrand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *ExecutePaymentAfter3DSecureOK) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *ExecutePaymentAfter3DSecureOK) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *ExecutePaymentAfter3DSecureOK) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *ExecutePaymentAfter3DSecureOK) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *ExecutePaymentAfter3DSecureOK) GetMethod() OptExecutePaymentAfter3DSecureOKMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *ExecutePaymentAfter3DSecureOK) GetPayTimes() OptNilExecutePaymentAfter3DSecureOKPayTimes {
	return s.PayTimes
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *ExecutePaymentAfter3DSecureOK) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTdsType returns the value of TdsType.
func (s *ExecutePaymentAfter3DSecureOK) GetTdsType() OptNilExecutePaymentAfter3DSecureOKTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *ExecutePaymentAfter3DSecureOK) GetTds2Type() OptNilExecutePaymentAfter3DSecureOKTds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *ExecutePaymentAfter3DSecureOK) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *ExecutePaymentAfter3DSecureOK) GetTds2Status() OptNilExecutePaymentAfter3DSecureOKTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *ExecutePaymentAfter3DSecureOK) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetForward returns the value of Forward.
func (s *ExecutePaymentAfter3DSecureOK) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *ExecutePaymentAfter3DSecureOK) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *ExecutePaymentAfter3DSecureOK) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *ExecutePaymentAfter3DSecureOK) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *ExecutePaymentAfter3DSecureOK) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *ExecutePaymentAfter3DSecureOK) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetShopID sets the value of ShopID.
func (s *ExecutePaymentAfter3DSecureOK) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ExecutePaymentAfter3DSecureOK) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentAfter3DSecureOK) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ExecutePaymentAfter3DSecureOK) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ExecutePaymentAfter3DSecureOK) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ExecutePaymentAfter3DSecureOK) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ExecutePaymentAfter3DSecureOK) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ExecutePaymentAfter3DSecureOK) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ExecutePaymentAfter3DSecureOK) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ExecutePaymentAfter3DSecureOK) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentAfter3DSecureOK) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ExecutePaymentAfter3DSecureOK) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ExecutePaymentAfter3DSecureOK) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ExecutePaymentAfter3DSecureOK) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ExecutePaymentAfter3DSecureOK) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentAfter3DSecureOK) SetPayType(val OptExecutePaymentAfter3DSecureOKPayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *ExecutePaymentAfter3DSecureOK) SetJobCode(val OptExecutePaymentAfter3DSecureOKJobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *ExecutePaymentAfter3DSecureOK) SetStatus(val OptExecutePaymentAfter3DSecureOKStatus) {
	s.Status = val
}

// SetCardID sets the value of CardID.
func (s *ExecutePaymentAfter3DSecureOK) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetBrand sets the value of Brand.
func (s *ExecutePaymentAfter3DSecureOK) SetBrand(val OptNilExecutePaymentAfter3DSecureOKBrand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *ExecutePaymentAfter3DSecureOK) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *ExecutePaymentAfter3DSecureOK) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *ExecutePaymentAfter3DSecureOK) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *ExecutePaymentAfter3DSecureOK) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *ExecutePaymentAfter3DSecureOK) SetMethod(val OptExecutePaymentAfter3DSecureOKMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *ExecutePaymentAfter3DSecureOK) SetPayTimes(val OptNilExecutePaymentAfter3DSecureOKPayTimes) {
	s.PayTimes = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *ExecutePaymentAfter3DSecureOK) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTdsType sets the value of TdsType.
func (s *ExecutePaymentAfter3DSecureOK) SetTdsType(val OptNilExecutePaymentAfter3DSecureOKTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *ExecutePaymentAfter3DSecureOK) SetTds2Type(val OptNilExecutePaymentAfter3DSecureOKTds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *ExecutePaymentAfter3DSecureOK) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *ExecutePaymentAfter3DSecureOK) SetTds2Status(val OptNilExecutePaymentAfter3DSecureOKTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *ExecutePaymentAfter3DSecureOK) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetForward sets the value of Forward.
func (s *ExecutePaymentAfter3DSecureOK) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *ExecutePaymentAfter3DSecureOK) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *ExecutePaymentAfter3DSecureOK) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *ExecutePaymentAfter3DSecureOK) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *ExecutePaymentAfter3DSecureOK) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *ExecutePaymentAfter3DSecureOK) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

func (*ExecutePaymentAfter3DSecureOK) executePaymentAfter3DSecureRes() {}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type ExecutePaymentAfter3DSecureOKBrand string

const (
	ExecutePaymentAfter3DSecureOKBrandVISA     ExecutePaymentAfter3DSecureOKBrand = "VISA"
	ExecutePaymentAfter3DSecureOKBrandMASTER   ExecutePaymentAfter3DSecureOKBrand = "MASTER"
	ExecutePaymentAfter3DSecureOKBrandJCB      ExecutePaymentAfter3DSecureOKBrand = "JCB"
	ExecutePaymentAfter3DSecureOKBrandAMEX     ExecutePaymentAfter3DSecureOKBrand = "AMEX"
	ExecutePaymentAfter3DSecureOKBrandDINERS   ExecutePaymentAfter3DSecureOKBrand = "DINERS"
	ExecutePaymentAfter3DSecureOKBrandDISCOVER ExecutePaymentAfter3DSecureOKBrand = "DISCOVER"
	ExecutePaymentAfter3DSecureOKBrandEmpty    ExecutePaymentAfter3DSecureOKBrand = ""
)

// AllValues returns all ExecutePaymentAfter3DSecureOKBrand values.
func (ExecutePaymentAfter3DSecureOKBrand) AllValues() []ExecutePaymentAfter3DSecureOKBrand {
	return []ExecutePaymentAfter3DSecureOKBrand{
		ExecutePaymentAfter3DSecureOKBrandVISA,
		ExecutePaymentAfter3DSecureOKBrandMASTER,
		ExecutePaymentAfter3DSecureOKBrandJCB,
		ExecutePaymentAfter3DSecureOKBrandAMEX,
		ExecutePaymentAfter3DSecureOKBrandDINERS,
		ExecutePaymentAfter3DSecureOKBrandDISCOVER,
		ExecutePaymentAfter3DSecureOKBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKBrand) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKBrandVISA:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKBrandMASTER:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKBrandJCB:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKBrandAMEX:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKBrandDINERS:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKBrandDISCOVER:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKBrand) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKBrand(data) {
	case ExecutePaymentAfter3DSecureOKBrandVISA:
		*s = ExecutePaymentAfter3DSecureOKBrandVISA
		return nil
	case ExecutePaymentAfter3DSecureOKBrandMASTER:
		*s = ExecutePaymentAfter3DSecureOKBrandMASTER
		return nil
	case ExecutePaymentAfter3DSecureOKBrandJCB:
		*s = ExecutePaymentAfter3DSecureOKBrandJCB
		return nil
	case ExecutePaymentAfter3DSecureOKBrandAMEX:
		*s = ExecutePaymentAfter3DSecureOKBrandAMEX
		return nil
	case ExecutePaymentAfter3DSecureOKBrandDINERS:
		*s = ExecutePaymentAfter3DSecureOKBrandDINERS
		return nil
	case ExecutePaymentAfter3DSecureOKBrandDISCOVER:
		*s = ExecutePaymentAfter3DSecureOKBrandDISCOVER
		return nil
	case ExecutePaymentAfter3DSecureOKBrandEmpty:
		*s = ExecutePaymentAfter3DSecureOKBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type ExecutePaymentAfter3DSecureOKJobCode string

const (
	ExecutePaymentAfter3DSecureOKJobCodeCHECK   ExecutePaymentAfter3DSecureOKJobCode = "CHECK"
	ExecutePaymentAfter3DSecureOKJobCodeAUTH    ExecutePaymentAfter3DSecureOKJobCode = "AUTH"
	ExecutePaymentAfter3DSecureOKJobCodeCAPTURE ExecutePaymentAfter3DSecureOKJobCode = "CAPTURE"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKJobCode values.
func (ExecutePaymentAfter3DSecureOKJobCode) AllValues() []ExecutePaymentAfter3DSecureOKJobCode {
	return []ExecutePaymentAfter3DSecureOKJobCode{
		ExecutePaymentAfter3DSecureOKJobCodeCHECK,
		ExecutePaymentAfter3DSecureOKJobCodeAUTH,
		ExecutePaymentAfter3DSecureOKJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKJobCode) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKJobCodeCHECK:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKJobCodeAUTH:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKJobCode) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKJobCode(data) {
	case ExecutePaymentAfter3DSecureOKJobCodeCHECK:
		*s = ExecutePaymentAfter3DSecureOKJobCodeCHECK
		return nil
	case ExecutePaymentAfter3DSecureOKJobCodeAUTH:
		*s = ExecutePaymentAfter3DSecureOKJobCodeAUTH
		return nil
	case ExecutePaymentAfter3DSecureOKJobCodeCAPTURE:
		*s = ExecutePaymentAfter3DSecureOKJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type ExecutePaymentAfter3DSecureOKMethod string

const (
	ExecutePaymentAfter3DSecureOKMethod1 ExecutePaymentAfter3DSecureOKMethod = "1"
	ExecutePaymentAfter3DSecureOKMethod2 ExecutePaymentAfter3DSecureOKMethod = "2"
	ExecutePaymentAfter3DSecureOKMethod5 ExecutePaymentAfter3DSecureOKMethod = "5"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKMethod values.
func (ExecutePaymentAfter3DSecureOKMethod) AllValues() []ExecutePaymentAfter3DSecureOKMethod {
	return []ExecutePaymentAfter3DSecureOKMethod{
		ExecutePaymentAfter3DSecureOKMethod1,
		ExecutePaymentAfter3DSecureOKMethod2,
		ExecutePaymentAfter3DSecureOKMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKMethod) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKMethod1:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKMethod2:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKMethod) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKMethod(data) {
	case ExecutePaymentAfter3DSecureOKMethod1:
		*s = ExecutePaymentAfter3DSecureOKMethod1
		return nil
	case ExecutePaymentAfter3DSecureOKMethod2:
		*s = ExecutePaymentAfter3DSecureOKMethod2
		return nil
	case ExecutePaymentAfter3DSecureOKMethod5:
		*s = ExecutePaymentAfter3DSecureOKMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type ExecutePaymentAfter3DSecureOKPayTimes string

const (
	ExecutePaymentAfter3DSecureOKPayTimes3  ExecutePaymentAfter3DSecureOKPayTimes = "3"
	ExecutePaymentAfter3DSecureOKPayTimes5  ExecutePaymentAfter3DSecureOKPayTimes = "5"
	ExecutePaymentAfter3DSecureOKPayTimes6  ExecutePaymentAfter3DSecureOKPayTimes = "6"
	ExecutePaymentAfter3DSecureOKPayTimes10 ExecutePaymentAfter3DSecureOKPayTimes = "10"
	ExecutePaymentAfter3DSecureOKPayTimes12 ExecutePaymentAfter3DSecureOKPayTimes = "12"
	ExecutePaymentAfter3DSecureOKPayTimes15 ExecutePaymentAfter3DSecureOKPayTimes = "15"
	ExecutePaymentAfter3DSecureOKPayTimes18 ExecutePaymentAfter3DSecureOKPayTimes = "18"
	ExecutePaymentAfter3DSecureOKPayTimes20 ExecutePaymentAfter3DSecureOKPayTimes = "20"
	ExecutePaymentAfter3DSecureOKPayTimes24 ExecutePaymentAfter3DSecureOKPayTimes = "24"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKPayTimes values.
func (ExecutePaymentAfter3DSecureOKPayTimes) AllValues() []ExecutePaymentAfter3DSecureOKPayTimes {
	return []ExecutePaymentAfter3DSecureOKPayTimes{
		ExecutePaymentAfter3DSecureOKPayTimes3,
		ExecutePaymentAfter3DSecureOKPayTimes5,
		ExecutePaymentAfter3DSecureOKPayTimes6,
		ExecutePaymentAfter3DSecureOKPayTimes10,
		ExecutePaymentAfter3DSecureOKPayTimes12,
		ExecutePaymentAfter3DSecureOKPayTimes15,
		ExecutePaymentAfter3DSecureOKPayTimes18,
		ExecutePaymentAfter3DSecureOKPayTimes20,
		ExecutePaymentAfter3DSecureOKPayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKPayTimes) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKPayTimes3:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes5:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes6:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes10:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes12:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes15:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes18:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes20:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKPayTimes) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKPayTimes(data) {
	case ExecutePaymentAfter3DSecureOKPayTimes3:
		*s = ExecutePaymentAfter3DSecureOKPayTimes3
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes5:
		*s = ExecutePaymentAfter3DSecureOKPayTimes5
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes6:
		*s = ExecutePaymentAfter3DSecureOKPayTimes6
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes10:
		*s = ExecutePaymentAfter3DSecureOKPayTimes10
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes12:
		*s = ExecutePaymentAfter3DSecureOKPayTimes12
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes15:
		*s = ExecutePaymentAfter3DSecureOKPayTimes15
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes18:
		*s = ExecutePaymentAfter3DSecureOKPayTimes18
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes20:
		*s = ExecutePaymentAfter3DSecureOKPayTimes20
		return nil
	case ExecutePaymentAfter3DSecureOKPayTimes24:
		*s = ExecutePaymentAfter3DSecureOKPayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentAfter3DSecureOKPayType string

const (
	ExecutePaymentAfter3DSecureOKPayTypeCard           ExecutePaymentAfter3DSecureOKPayType = "Card"
	ExecutePaymentAfter3DSecureOKPayTypeKonbini        ExecutePaymentAfter3DSecureOKPayType = "Konbini"
	ExecutePaymentAfter3DSecureOKPayTypePaypay         ExecutePaymentAfter3DSecureOKPayType = "Paypay"
	ExecutePaymentAfter3DSecureOKPayTypeApplepay       ExecutePaymentAfter3DSecureOKPayType = "Applepay"
	ExecutePaymentAfter3DSecureOKPayTypeDirectdebit    ExecutePaymentAfter3DSecureOKPayType = "Directdebit"
	ExecutePaymentAfter3DSecureOKPayTypeVirtualaccount ExecutePaymentAfter3DSecureOKPayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKPayType values.
func (ExecutePaymentAfter3DSecureOKPayType) AllValues() []ExecutePaymentAfter3DSecureOKPayType {
	return []ExecutePaymentAfter3DSecureOKPayType{
		ExecutePaymentAfter3DSecureOKPayTypeCard,
		ExecutePaymentAfter3DSecureOKPayTypeKonbini,
		ExecutePaymentAfter3DSecureOKPayTypePaypay,
		ExecutePaymentAfter3DSecureOKPayTypeApplepay,
		ExecutePaymentAfter3DSecureOKPayTypeDirectdebit,
		ExecutePaymentAfter3DSecureOKPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKPayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKPayTypeCard:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKPayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKPayType(data) {
	case ExecutePaymentAfter3DSecureOKPayTypeCard:
		*s = ExecutePaymentAfter3DSecureOKPayTypeCard
		return nil
	case ExecutePaymentAfter3DSecureOKPayTypeKonbini:
		*s = ExecutePaymentAfter3DSecureOKPayTypeKonbini
		return nil
	case ExecutePaymentAfter3DSecureOKPayTypePaypay:
		*s = ExecutePaymentAfter3DSecureOKPayTypePaypay
		return nil
	case ExecutePaymentAfter3DSecureOKPayTypeApplepay:
		*s = ExecutePaymentAfter3DSecureOKPayTypeApplepay
		return nil
	case ExecutePaymentAfter3DSecureOKPayTypeDirectdebit:
		*s = ExecutePaymentAfter3DSecureOKPayTypeDirectdebit
		return nil
	case ExecutePaymentAfter3DSecureOKPayTypeVirtualaccount:
		*s = ExecutePaymentAfter3DSecureOKPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ExecutePaymentAfter3DSecureOKStatus string

const (
	ExecutePaymentAfter3DSecureOKStatusUNPROCESSED             ExecutePaymentAfter3DSecureOKStatus = "UNPROCESSED"
	ExecutePaymentAfter3DSecureOKStatusCHECKED                 ExecutePaymentAfter3DSecureOKStatus = "CHECKED"
	ExecutePaymentAfter3DSecureOKStatusAUTHORIZED              ExecutePaymentAfter3DSecureOKStatus = "AUTHORIZED"
	ExecutePaymentAfter3DSecureOKStatusAWAITINGCUSTOMERPAYMENT ExecutePaymentAfter3DSecureOKStatus = "AWAITING_CUSTOMER_PAYMENT"
	ExecutePaymentAfter3DSecureOKStatusAWAITINGPAYMENTAPPROVAL ExecutePaymentAfter3DSecureOKStatus = "AWAITING_PAYMENT_APPROVAL"
	ExecutePaymentAfter3DSecureOKStatusCAPTURED                ExecutePaymentAfter3DSecureOKStatus = "CAPTURED"
	ExecutePaymentAfter3DSecureOKStatusCANCELED                ExecutePaymentAfter3DSecureOKStatus = "CANCELED"
	ExecutePaymentAfter3DSecureOKStatusEXPIRED                 ExecutePaymentAfter3DSecureOKStatus = "EXPIRED"
	ExecutePaymentAfter3DSecureOKStatusAUTHENTICATED           ExecutePaymentAfter3DSecureOKStatus = "AUTHENTICATED"
	ExecutePaymentAfter3DSecureOKStatusFAILED                  ExecutePaymentAfter3DSecureOKStatus = "FAILED"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKStatus values.
func (ExecutePaymentAfter3DSecureOKStatus) AllValues() []ExecutePaymentAfter3DSecureOKStatus {
	return []ExecutePaymentAfter3DSecureOKStatus{
		ExecutePaymentAfter3DSecureOKStatusUNPROCESSED,
		ExecutePaymentAfter3DSecureOKStatusCHECKED,
		ExecutePaymentAfter3DSecureOKStatusAUTHORIZED,
		ExecutePaymentAfter3DSecureOKStatusAWAITINGCUSTOMERPAYMENT,
		ExecutePaymentAfter3DSecureOKStatusAWAITINGPAYMENTAPPROVAL,
		ExecutePaymentAfter3DSecureOKStatusCAPTURED,
		ExecutePaymentAfter3DSecureOKStatusCANCELED,
		ExecutePaymentAfter3DSecureOKStatusEXPIRED,
		ExecutePaymentAfter3DSecureOKStatusAUTHENTICATED,
		ExecutePaymentAfter3DSecureOKStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKStatusUNPROCESSED:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusCHECKED:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusAUTHORIZED:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusCAPTURED:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusCANCELED:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusEXPIRED:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusAUTHENTICATED:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKStatus) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKStatus(data) {
	case ExecutePaymentAfter3DSecureOKStatusUNPROCESSED:
		*s = ExecutePaymentAfter3DSecureOKStatusUNPROCESSED
		return nil
	case ExecutePaymentAfter3DSecureOKStatusCHECKED:
		*s = ExecutePaymentAfter3DSecureOKStatusCHECKED
		return nil
	case ExecutePaymentAfter3DSecureOKStatusAUTHORIZED:
		*s = ExecutePaymentAfter3DSecureOKStatusAUTHORIZED
		return nil
	case ExecutePaymentAfter3DSecureOKStatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentAfter3DSecureOKStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ExecutePaymentAfter3DSecureOKStatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentAfter3DSecureOKStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ExecutePaymentAfter3DSecureOKStatusCAPTURED:
		*s = ExecutePaymentAfter3DSecureOKStatusCAPTURED
		return nil
	case ExecutePaymentAfter3DSecureOKStatusCANCELED:
		*s = ExecutePaymentAfter3DSecureOKStatusCANCELED
		return nil
	case ExecutePaymentAfter3DSecureOKStatusEXPIRED:
		*s = ExecutePaymentAfter3DSecureOKStatusEXPIRED
		return nil
	case ExecutePaymentAfter3DSecureOKStatusAUTHENTICATED:
		*s = ExecutePaymentAfter3DSecureOKStatusAUTHENTICATED
		return nil
	case ExecutePaymentAfter3DSecureOKStatusFAILED:
		*s = ExecutePaymentAfter3DSecureOKStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0認証処理 ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: チャレンジ認証の実施が必要
// - `AUTHENTICATED`: 3Dセキュア認証処理が完了.
type ExecutePaymentAfter3DSecureOKTds2Status string

const (
	ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATING ExecutePaymentAfter3DSecureOKTds2Status = "AUTHENTICATING"
	ExecutePaymentAfter3DSecureOKTds2StatusCHALLENGE      ExecutePaymentAfter3DSecureOKTds2Status = "CHALLENGE"
	ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATED  ExecutePaymentAfter3DSecureOKTds2Status = "AUTHENTICATED"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKTds2Status values.
func (ExecutePaymentAfter3DSecureOKTds2Status) AllValues() []ExecutePaymentAfter3DSecureOKTds2Status {
	return []ExecutePaymentAfter3DSecureOKTds2Status{
		ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATING,
		ExecutePaymentAfter3DSecureOKTds2StatusCHALLENGE,
		ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKTds2Status) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATING:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKTds2StatusCHALLENGE:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKTds2Status) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKTds2Status(data) {
	case ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATING:
		*s = ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATING
		return nil
	case ExecutePaymentAfter3DSecureOKTds2StatusCHALLENGE:
		*s = ExecutePaymentAfter3DSecureOKTds2StatusCHALLENGE
		return nil
	case ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATED:
		*s = ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type ExecutePaymentAfter3DSecureOKTds2Type string

const (
	ExecutePaymentAfter3DSecureOKTds2Type2 ExecutePaymentAfter3DSecureOKTds2Type = "2"
	ExecutePaymentAfter3DSecureOKTds2Type3 ExecutePaymentAfter3DSecureOKTds2Type = "3"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKTds2Type values.
func (ExecutePaymentAfter3DSecureOKTds2Type) AllValues() []ExecutePaymentAfter3DSecureOKTds2Type {
	return []ExecutePaymentAfter3DSecureOKTds2Type{
		ExecutePaymentAfter3DSecureOKTds2Type2,
		ExecutePaymentAfter3DSecureOKTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKTds2Type2:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKTds2Type) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKTds2Type(data) {
	case ExecutePaymentAfter3DSecureOKTds2Type2:
		*s = ExecutePaymentAfter3DSecureOKTds2Type2
		return nil
	case ExecutePaymentAfter3DSecureOKTds2Type3:
		*s = ExecutePaymentAfter3DSecureOKTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type ExecutePaymentAfter3DSecureOKTdsType string

const (
	ExecutePaymentAfter3DSecureOKTdsType0 ExecutePaymentAfter3DSecureOKTdsType = "0"
	ExecutePaymentAfter3DSecureOKTdsType2 ExecutePaymentAfter3DSecureOKTdsType = "2"
)

// AllValues returns all ExecutePaymentAfter3DSecureOKTdsType values.
func (ExecutePaymentAfter3DSecureOKTdsType) AllValues() []ExecutePaymentAfter3DSecureOKTdsType {
	return []ExecutePaymentAfter3DSecureOKTdsType{
		ExecutePaymentAfter3DSecureOKTdsType0,
		ExecutePaymentAfter3DSecureOKTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureOKTdsType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureOKTdsType0:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureOKTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureOKTdsType) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureOKTdsType(data) {
	case ExecutePaymentAfter3DSecureOKTdsType0:
		*s = ExecutePaymentAfter3DSecureOKTdsType0
		return nil
	case ExecutePaymentAfter3DSecureOKTdsType2:
		*s = ExecutePaymentAfter3DSecureOKTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExecutePaymentAfter3DSecureReq struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType  ExecutePaymentAfter3DSecureReqPayType `json:"pay_type"`
	AccessID string                                `json:"access_id"`
	// ※ 閉塞機能\
	// 3Dセキュアサービス結果電文\
	// \
	// 3Dセキュア1.0利用時のみ必須。.
	//
	// Deprecated: schema marks this property as deprecated.
	PaRes OptString `json:"pa_res"`
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentAfter3DSecureReq) GetPayType() ExecutePaymentAfter3DSecureReqPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentAfter3DSecureReq) GetAccessID() string {
	return s.AccessID
}

// GetPaRes returns the value of PaRes.
func (s *ExecutePaymentAfter3DSecureReq) GetPaRes() OptString {
	return s.PaRes
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentAfter3DSecureReq) SetPayType(val ExecutePaymentAfter3DSecureReqPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentAfter3DSecureReq) SetAccessID(val string) {
	s.AccessID = val
}

// SetPaRes sets the value of PaRes.
func (s *ExecutePaymentAfter3DSecureReq) SetPaRes(val OptString) {
	s.PaRes = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentAfter3DSecureReqPayType string

const (
	ExecutePaymentAfter3DSecureReqPayTypeCard           ExecutePaymentAfter3DSecureReqPayType = "Card"
	ExecutePaymentAfter3DSecureReqPayTypeKonbini        ExecutePaymentAfter3DSecureReqPayType = "Konbini"
	ExecutePaymentAfter3DSecureReqPayTypePaypay         ExecutePaymentAfter3DSecureReqPayType = "Paypay"
	ExecutePaymentAfter3DSecureReqPayTypeApplepay       ExecutePaymentAfter3DSecureReqPayType = "Applepay"
	ExecutePaymentAfter3DSecureReqPayTypeDirectdebit    ExecutePaymentAfter3DSecureReqPayType = "Directdebit"
	ExecutePaymentAfter3DSecureReqPayTypeVirtualaccount ExecutePaymentAfter3DSecureReqPayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentAfter3DSecureReqPayType values.
func (ExecutePaymentAfter3DSecureReqPayType) AllValues() []ExecutePaymentAfter3DSecureReqPayType {
	return []ExecutePaymentAfter3DSecureReqPayType{
		ExecutePaymentAfter3DSecureReqPayTypeCard,
		ExecutePaymentAfter3DSecureReqPayTypeKonbini,
		ExecutePaymentAfter3DSecureReqPayTypePaypay,
		ExecutePaymentAfter3DSecureReqPayTypeApplepay,
		ExecutePaymentAfter3DSecureReqPayTypeDirectdebit,
		ExecutePaymentAfter3DSecureReqPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentAfter3DSecureReqPayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentAfter3DSecureReqPayTypeCard:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureReqPayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureReqPayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureReqPayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureReqPayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentAfter3DSecureReqPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentAfter3DSecureReqPayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentAfter3DSecureReqPayType(data) {
	case ExecutePaymentAfter3DSecureReqPayTypeCard:
		*s = ExecutePaymentAfter3DSecureReqPayTypeCard
		return nil
	case ExecutePaymentAfter3DSecureReqPayTypeKonbini:
		*s = ExecutePaymentAfter3DSecureReqPayTypeKonbini
		return nil
	case ExecutePaymentAfter3DSecureReqPayTypePaypay:
		*s = ExecutePaymentAfter3DSecureReqPayTypePaypay
		return nil
	case ExecutePaymentAfter3DSecureReqPayTypeApplepay:
		*s = ExecutePaymentAfter3DSecureReqPayTypeApplepay
		return nil
	case ExecutePaymentAfter3DSecureReqPayTypeDirectdebit:
		*s = ExecutePaymentAfter3DSecureReqPayTypeDirectdebit
		return nil
	case ExecutePaymentAfter3DSecureReqPayTypeVirtualaccount:
		*s = ExecutePaymentAfter3DSecureReqPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ExecutePaymentOK represents sum type.
type ExecutePaymentOK struct {
	Type              ExecutePaymentOKType // switch on this field
	ExecutePaymentOK0 ExecutePaymentOK0
	ExecutePaymentOK1 ExecutePaymentOK1
	ExecutePaymentOK2 ExecutePaymentOK2
	ExecutePaymentOK3 ExecutePaymentOK3
	ExecutePaymentOK4 ExecutePaymentOK4
}

// ExecutePaymentOKType is oneOf type of ExecutePaymentOK.
type ExecutePaymentOKType string

// Possible values for ExecutePaymentOKType.
const (
	ExecutePaymentOK0ExecutePaymentOK ExecutePaymentOKType = "ExecutePaymentOK0"
	ExecutePaymentOK1ExecutePaymentOK ExecutePaymentOKType = "ExecutePaymentOK1"
	ExecutePaymentOK2ExecutePaymentOK ExecutePaymentOKType = "ExecutePaymentOK2"
	ExecutePaymentOK3ExecutePaymentOK ExecutePaymentOKType = "ExecutePaymentOK3"
	ExecutePaymentOK4ExecutePaymentOK ExecutePaymentOKType = "ExecutePaymentOK4"
)

// IsExecutePaymentOK0 reports whether ExecutePaymentOK is ExecutePaymentOK0.
func (s ExecutePaymentOK) IsExecutePaymentOK0() bool {
	return s.Type == ExecutePaymentOK0ExecutePaymentOK
}

// IsExecutePaymentOK1 reports whether ExecutePaymentOK is ExecutePaymentOK1.
func (s ExecutePaymentOK) IsExecutePaymentOK1() bool {
	return s.Type == ExecutePaymentOK1ExecutePaymentOK
}

// IsExecutePaymentOK2 reports whether ExecutePaymentOK is ExecutePaymentOK2.
func (s ExecutePaymentOK) IsExecutePaymentOK2() bool {
	return s.Type == ExecutePaymentOK2ExecutePaymentOK
}

// IsExecutePaymentOK3 reports whether ExecutePaymentOK is ExecutePaymentOK3.
func (s ExecutePaymentOK) IsExecutePaymentOK3() bool {
	return s.Type == ExecutePaymentOK3ExecutePaymentOK
}

// IsExecutePaymentOK4 reports whether ExecutePaymentOK is ExecutePaymentOK4.
func (s ExecutePaymentOK) IsExecutePaymentOK4() bool {
	return s.Type == ExecutePaymentOK4ExecutePaymentOK
}

// SetExecutePaymentOK0 sets ExecutePaymentOK to ExecutePaymentOK0.
func (s *ExecutePaymentOK) SetExecutePaymentOK0(v ExecutePaymentOK0) {
	s.Type = ExecutePaymentOK0ExecutePaymentOK
	s.ExecutePaymentOK0 = v
}

// GetExecutePaymentOK0 returns ExecutePaymentOK0 and true boolean if ExecutePaymentOK is ExecutePaymentOK0.
func (s ExecutePaymentOK) GetExecutePaymentOK0() (v ExecutePaymentOK0, ok bool) {
	if !s.IsExecutePaymentOK0() {
		return v, false
	}
	return s.ExecutePaymentOK0, true
}

// NewExecutePaymentOK0ExecutePaymentOK returns new ExecutePaymentOK from ExecutePaymentOK0.
func NewExecutePaymentOK0ExecutePaymentOK(v ExecutePaymentOK0) ExecutePaymentOK {
	var s ExecutePaymentOK
	s.SetExecutePaymentOK0(v)
	return s
}

// SetExecutePaymentOK1 sets ExecutePaymentOK to ExecutePaymentOK1.
func (s *ExecutePaymentOK) SetExecutePaymentOK1(v ExecutePaymentOK1) {
	s.Type = ExecutePaymentOK1ExecutePaymentOK
	s.ExecutePaymentOK1 = v
}

// GetExecutePaymentOK1 returns ExecutePaymentOK1 and true boolean if ExecutePaymentOK is ExecutePaymentOK1.
func (s ExecutePaymentOK) GetExecutePaymentOK1() (v ExecutePaymentOK1, ok bool) {
	if !s.IsExecutePaymentOK1() {
		return v, false
	}
	return s.ExecutePaymentOK1, true
}

// NewExecutePaymentOK1ExecutePaymentOK returns new ExecutePaymentOK from ExecutePaymentOK1.
func NewExecutePaymentOK1ExecutePaymentOK(v ExecutePaymentOK1) ExecutePaymentOK {
	var s ExecutePaymentOK
	s.SetExecutePaymentOK1(v)
	return s
}

// SetExecutePaymentOK2 sets ExecutePaymentOK to ExecutePaymentOK2.
func (s *ExecutePaymentOK) SetExecutePaymentOK2(v ExecutePaymentOK2) {
	s.Type = ExecutePaymentOK2ExecutePaymentOK
	s.ExecutePaymentOK2 = v
}

// GetExecutePaymentOK2 returns ExecutePaymentOK2 and true boolean if ExecutePaymentOK is ExecutePaymentOK2.
func (s ExecutePaymentOK) GetExecutePaymentOK2() (v ExecutePaymentOK2, ok bool) {
	if !s.IsExecutePaymentOK2() {
		return v, false
	}
	return s.ExecutePaymentOK2, true
}

// NewExecutePaymentOK2ExecutePaymentOK returns new ExecutePaymentOK from ExecutePaymentOK2.
func NewExecutePaymentOK2ExecutePaymentOK(v ExecutePaymentOK2) ExecutePaymentOK {
	var s ExecutePaymentOK
	s.SetExecutePaymentOK2(v)
	return s
}

// SetExecutePaymentOK3 sets ExecutePaymentOK to ExecutePaymentOK3.
func (s *ExecutePaymentOK) SetExecutePaymentOK3(v ExecutePaymentOK3) {
	s.Type = ExecutePaymentOK3ExecutePaymentOK
	s.ExecutePaymentOK3 = v
}

// GetExecutePaymentOK3 returns ExecutePaymentOK3 and true boolean if ExecutePaymentOK is ExecutePaymentOK3.
func (s ExecutePaymentOK) GetExecutePaymentOK3() (v ExecutePaymentOK3, ok bool) {
	if !s.IsExecutePaymentOK3() {
		return v, false
	}
	return s.ExecutePaymentOK3, true
}

// NewExecutePaymentOK3ExecutePaymentOK returns new ExecutePaymentOK from ExecutePaymentOK3.
func NewExecutePaymentOK3ExecutePaymentOK(v ExecutePaymentOK3) ExecutePaymentOK {
	var s ExecutePaymentOK
	s.SetExecutePaymentOK3(v)
	return s
}

// SetExecutePaymentOK4 sets ExecutePaymentOK to ExecutePaymentOK4.
func (s *ExecutePaymentOK) SetExecutePaymentOK4(v ExecutePaymentOK4) {
	s.Type = ExecutePaymentOK4ExecutePaymentOK
	s.ExecutePaymentOK4 = v
}

// GetExecutePaymentOK4 returns ExecutePaymentOK4 and true boolean if ExecutePaymentOK is ExecutePaymentOK4.
func (s ExecutePaymentOK) GetExecutePaymentOK4() (v ExecutePaymentOK4, ok bool) {
	if !s.IsExecutePaymentOK4() {
		return v, false
	}
	return s.ExecutePaymentOK4, true
}

// NewExecutePaymentOK4ExecutePaymentOK returns new ExecutePaymentOK from ExecutePaymentOK4.
func NewExecutePaymentOK4ExecutePaymentOK(v ExecutePaymentOK4) ExecutePaymentOK {
	var s ExecutePaymentOK
	s.SetExecutePaymentOK4(v)
	return s
}

func (*ExecutePaymentOK) executePaymentRes() {}

// Merged schema.
type ExecutePaymentOK0 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptExecutePaymentOK0PayType `json:"pay_type"`
	JobCode OptExecutePaymentOK0JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status OptExecutePaymentOK0Status `json:"status"`
	// カードID\
	// この決済に使用されたカード情報のIDです。.
	CardID     OptNilString                    `json:"card_id"`
	Brand      OptNilExecutePaymentOK0Brand    `json:"brand"`
	CardNo     OptNilString                    `json:"card_no"`
	Expire     OptNilString                    `json:"expire"`
	HolderName OptNilString                    `json:"holder_name"`
	CardNoHash OptNilString                    `json:"card_no_hash"`
	Method     OptExecutePaymentOK0Method      `json:"method"`
	PayTimes   OptNilExecutePaymentOK0PayTimes `json:"pay_times"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString                      `json:"subscription_id"`
	TdsType        OptNilExecutePaymentOK0TdsType    `json:"tds_type"`
	Tds2Type       OptNilExecutePaymentOK0Tds2Type   `json:"tds2_type"`
	Tds2RetURL     OptNilString                      `json:"tds2_ret_url"`
	Tds2Status     OptNilExecutePaymentOK0Tds2Status `json:"tds2_status"`
	MerchantName   OptNilString                      `json:"merchant_name"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetShopID returns the value of ShopID.
func (s *ExecutePaymentOK0) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ExecutePaymentOK0) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentOK0) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ExecutePaymentOK0) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ExecutePaymentOK0) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ExecutePaymentOK0) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ExecutePaymentOK0) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ExecutePaymentOK0) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ExecutePaymentOK0) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ExecutePaymentOK0) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentOK0) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ExecutePaymentOK0) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ExecutePaymentOK0) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ExecutePaymentOK0) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ExecutePaymentOK0) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentOK0) GetPayType() OptExecutePaymentOK0PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *ExecutePaymentOK0) GetJobCode() OptExecutePaymentOK0JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *ExecutePaymentOK0) GetStatus() OptExecutePaymentOK0Status {
	return s.Status
}

// GetCardID returns the value of CardID.
func (s *ExecutePaymentOK0) GetCardID() OptNilString {
	return s.CardID
}

// GetBrand returns the value of Brand.
func (s *ExecutePaymentOK0) GetBrand() OptNilExecutePaymentOK0Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *ExecutePaymentOK0) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *ExecutePaymentOK0) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *ExecutePaymentOK0) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *ExecutePaymentOK0) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *ExecutePaymentOK0) GetMethod() OptExecutePaymentOK0Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *ExecutePaymentOK0) GetPayTimes() OptNilExecutePaymentOK0PayTimes {
	return s.PayTimes
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *ExecutePaymentOK0) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTdsType returns the value of TdsType.
func (s *ExecutePaymentOK0) GetTdsType() OptNilExecutePaymentOK0TdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *ExecutePaymentOK0) GetTds2Type() OptNilExecutePaymentOK0Tds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *ExecutePaymentOK0) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *ExecutePaymentOK0) GetTds2Status() OptNilExecutePaymentOK0Tds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *ExecutePaymentOK0) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetForward returns the value of Forward.
func (s *ExecutePaymentOK0) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *ExecutePaymentOK0) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *ExecutePaymentOK0) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *ExecutePaymentOK0) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *ExecutePaymentOK0) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *ExecutePaymentOK0) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetShopID sets the value of ShopID.
func (s *ExecutePaymentOK0) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ExecutePaymentOK0) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentOK0) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ExecutePaymentOK0) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ExecutePaymentOK0) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ExecutePaymentOK0) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ExecutePaymentOK0) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ExecutePaymentOK0) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ExecutePaymentOK0) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ExecutePaymentOK0) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentOK0) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ExecutePaymentOK0) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ExecutePaymentOK0) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ExecutePaymentOK0) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ExecutePaymentOK0) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentOK0) SetPayType(val OptExecutePaymentOK0PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *ExecutePaymentOK0) SetJobCode(val OptExecutePaymentOK0JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *ExecutePaymentOK0) SetStatus(val OptExecutePaymentOK0Status) {
	s.Status = val
}

// SetCardID sets the value of CardID.
func (s *ExecutePaymentOK0) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetBrand sets the value of Brand.
func (s *ExecutePaymentOK0) SetBrand(val OptNilExecutePaymentOK0Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *ExecutePaymentOK0) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *ExecutePaymentOK0) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *ExecutePaymentOK0) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *ExecutePaymentOK0) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *ExecutePaymentOK0) SetMethod(val OptExecutePaymentOK0Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *ExecutePaymentOK0) SetPayTimes(val OptNilExecutePaymentOK0PayTimes) {
	s.PayTimes = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *ExecutePaymentOK0) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTdsType sets the value of TdsType.
func (s *ExecutePaymentOK0) SetTdsType(val OptNilExecutePaymentOK0TdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *ExecutePaymentOK0) SetTds2Type(val OptNilExecutePaymentOK0Tds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *ExecutePaymentOK0) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *ExecutePaymentOK0) SetTds2Status(val OptNilExecutePaymentOK0Tds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *ExecutePaymentOK0) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetForward sets the value of Forward.
func (s *ExecutePaymentOK0) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *ExecutePaymentOK0) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *ExecutePaymentOK0) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *ExecutePaymentOK0) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *ExecutePaymentOK0) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *ExecutePaymentOK0) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type ExecutePaymentOK0Brand string

const (
	ExecutePaymentOK0BrandVISA     ExecutePaymentOK0Brand = "VISA"
	ExecutePaymentOK0BrandMASTER   ExecutePaymentOK0Brand = "MASTER"
	ExecutePaymentOK0BrandJCB      ExecutePaymentOK0Brand = "JCB"
	ExecutePaymentOK0BrandAMEX     ExecutePaymentOK0Brand = "AMEX"
	ExecutePaymentOK0BrandDINERS   ExecutePaymentOK0Brand = "DINERS"
	ExecutePaymentOK0BrandDISCOVER ExecutePaymentOK0Brand = "DISCOVER"
	ExecutePaymentOK0BrandEmpty    ExecutePaymentOK0Brand = ""
)

// AllValues returns all ExecutePaymentOK0Brand values.
func (ExecutePaymentOK0Brand) AllValues() []ExecutePaymentOK0Brand {
	return []ExecutePaymentOK0Brand{
		ExecutePaymentOK0BrandVISA,
		ExecutePaymentOK0BrandMASTER,
		ExecutePaymentOK0BrandJCB,
		ExecutePaymentOK0BrandAMEX,
		ExecutePaymentOK0BrandDINERS,
		ExecutePaymentOK0BrandDISCOVER,
		ExecutePaymentOK0BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0Brand) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0BrandVISA:
		return []byte(s), nil
	case ExecutePaymentOK0BrandMASTER:
		return []byte(s), nil
	case ExecutePaymentOK0BrandJCB:
		return []byte(s), nil
	case ExecutePaymentOK0BrandAMEX:
		return []byte(s), nil
	case ExecutePaymentOK0BrandDINERS:
		return []byte(s), nil
	case ExecutePaymentOK0BrandDISCOVER:
		return []byte(s), nil
	case ExecutePaymentOK0BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0Brand) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0Brand(data) {
	case ExecutePaymentOK0BrandVISA:
		*s = ExecutePaymentOK0BrandVISA
		return nil
	case ExecutePaymentOK0BrandMASTER:
		*s = ExecutePaymentOK0BrandMASTER
		return nil
	case ExecutePaymentOK0BrandJCB:
		*s = ExecutePaymentOK0BrandJCB
		return nil
	case ExecutePaymentOK0BrandAMEX:
		*s = ExecutePaymentOK0BrandAMEX
		return nil
	case ExecutePaymentOK0BrandDINERS:
		*s = ExecutePaymentOK0BrandDINERS
		return nil
	case ExecutePaymentOK0BrandDISCOVER:
		*s = ExecutePaymentOK0BrandDISCOVER
		return nil
	case ExecutePaymentOK0BrandEmpty:
		*s = ExecutePaymentOK0BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type ExecutePaymentOK0JobCode string

const (
	ExecutePaymentOK0JobCodeCHECK   ExecutePaymentOK0JobCode = "CHECK"
	ExecutePaymentOK0JobCodeAUTH    ExecutePaymentOK0JobCode = "AUTH"
	ExecutePaymentOK0JobCodeCAPTURE ExecutePaymentOK0JobCode = "CAPTURE"
)

// AllValues returns all ExecutePaymentOK0JobCode values.
func (ExecutePaymentOK0JobCode) AllValues() []ExecutePaymentOK0JobCode {
	return []ExecutePaymentOK0JobCode{
		ExecutePaymentOK0JobCodeCHECK,
		ExecutePaymentOK0JobCodeAUTH,
		ExecutePaymentOK0JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0JobCode) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0JobCodeCHECK:
		return []byte(s), nil
	case ExecutePaymentOK0JobCodeAUTH:
		return []byte(s), nil
	case ExecutePaymentOK0JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0JobCode) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0JobCode(data) {
	case ExecutePaymentOK0JobCodeCHECK:
		*s = ExecutePaymentOK0JobCodeCHECK
		return nil
	case ExecutePaymentOK0JobCodeAUTH:
		*s = ExecutePaymentOK0JobCodeAUTH
		return nil
	case ExecutePaymentOK0JobCodeCAPTURE:
		*s = ExecutePaymentOK0JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type ExecutePaymentOK0Method string

const (
	ExecutePaymentOK0Method1 ExecutePaymentOK0Method = "1"
	ExecutePaymentOK0Method2 ExecutePaymentOK0Method = "2"
	ExecutePaymentOK0Method5 ExecutePaymentOK0Method = "5"
)

// AllValues returns all ExecutePaymentOK0Method values.
func (ExecutePaymentOK0Method) AllValues() []ExecutePaymentOK0Method {
	return []ExecutePaymentOK0Method{
		ExecutePaymentOK0Method1,
		ExecutePaymentOK0Method2,
		ExecutePaymentOK0Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0Method) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0Method1:
		return []byte(s), nil
	case ExecutePaymentOK0Method2:
		return []byte(s), nil
	case ExecutePaymentOK0Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0Method) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0Method(data) {
	case ExecutePaymentOK0Method1:
		*s = ExecutePaymentOK0Method1
		return nil
	case ExecutePaymentOK0Method2:
		*s = ExecutePaymentOK0Method2
		return nil
	case ExecutePaymentOK0Method5:
		*s = ExecutePaymentOK0Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type ExecutePaymentOK0PayTimes string

const (
	ExecutePaymentOK0PayTimes3  ExecutePaymentOK0PayTimes = "3"
	ExecutePaymentOK0PayTimes5  ExecutePaymentOK0PayTimes = "5"
	ExecutePaymentOK0PayTimes6  ExecutePaymentOK0PayTimes = "6"
	ExecutePaymentOK0PayTimes10 ExecutePaymentOK0PayTimes = "10"
	ExecutePaymentOK0PayTimes12 ExecutePaymentOK0PayTimes = "12"
	ExecutePaymentOK0PayTimes15 ExecutePaymentOK0PayTimes = "15"
	ExecutePaymentOK0PayTimes18 ExecutePaymentOK0PayTimes = "18"
	ExecutePaymentOK0PayTimes20 ExecutePaymentOK0PayTimes = "20"
	ExecutePaymentOK0PayTimes24 ExecutePaymentOK0PayTimes = "24"
)

// AllValues returns all ExecutePaymentOK0PayTimes values.
func (ExecutePaymentOK0PayTimes) AllValues() []ExecutePaymentOK0PayTimes {
	return []ExecutePaymentOK0PayTimes{
		ExecutePaymentOK0PayTimes3,
		ExecutePaymentOK0PayTimes5,
		ExecutePaymentOK0PayTimes6,
		ExecutePaymentOK0PayTimes10,
		ExecutePaymentOK0PayTimes12,
		ExecutePaymentOK0PayTimes15,
		ExecutePaymentOK0PayTimes18,
		ExecutePaymentOK0PayTimes20,
		ExecutePaymentOK0PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0PayTimes3:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes5:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes6:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes10:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes12:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes15:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes18:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes20:
		return []byte(s), nil
	case ExecutePaymentOK0PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0PayTimes) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0PayTimes(data) {
	case ExecutePaymentOK0PayTimes3:
		*s = ExecutePaymentOK0PayTimes3
		return nil
	case ExecutePaymentOK0PayTimes5:
		*s = ExecutePaymentOK0PayTimes5
		return nil
	case ExecutePaymentOK0PayTimes6:
		*s = ExecutePaymentOK0PayTimes6
		return nil
	case ExecutePaymentOK0PayTimes10:
		*s = ExecutePaymentOK0PayTimes10
		return nil
	case ExecutePaymentOK0PayTimes12:
		*s = ExecutePaymentOK0PayTimes12
		return nil
	case ExecutePaymentOK0PayTimes15:
		*s = ExecutePaymentOK0PayTimes15
		return nil
	case ExecutePaymentOK0PayTimes18:
		*s = ExecutePaymentOK0PayTimes18
		return nil
	case ExecutePaymentOK0PayTimes20:
		*s = ExecutePaymentOK0PayTimes20
		return nil
	case ExecutePaymentOK0PayTimes24:
		*s = ExecutePaymentOK0PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentOK0PayType string

const (
	ExecutePaymentOK0PayTypeCard           ExecutePaymentOK0PayType = "Card"
	ExecutePaymentOK0PayTypeKonbini        ExecutePaymentOK0PayType = "Konbini"
	ExecutePaymentOK0PayTypePaypay         ExecutePaymentOK0PayType = "Paypay"
	ExecutePaymentOK0PayTypeApplepay       ExecutePaymentOK0PayType = "Applepay"
	ExecutePaymentOK0PayTypeDirectdebit    ExecutePaymentOK0PayType = "Directdebit"
	ExecutePaymentOK0PayTypeVirtualaccount ExecutePaymentOK0PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentOK0PayType values.
func (ExecutePaymentOK0PayType) AllValues() []ExecutePaymentOK0PayType {
	return []ExecutePaymentOK0PayType{
		ExecutePaymentOK0PayTypeCard,
		ExecutePaymentOK0PayTypeKonbini,
		ExecutePaymentOK0PayTypePaypay,
		ExecutePaymentOK0PayTypeApplepay,
		ExecutePaymentOK0PayTypeDirectdebit,
		ExecutePaymentOK0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentOK0PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentOK0PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentOK0PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentOK0PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentOK0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0PayType(data) {
	case ExecutePaymentOK0PayTypeCard:
		*s = ExecutePaymentOK0PayTypeCard
		return nil
	case ExecutePaymentOK0PayTypeKonbini:
		*s = ExecutePaymentOK0PayTypeKonbini
		return nil
	case ExecutePaymentOK0PayTypePaypay:
		*s = ExecutePaymentOK0PayTypePaypay
		return nil
	case ExecutePaymentOK0PayTypeApplepay:
		*s = ExecutePaymentOK0PayTypeApplepay
		return nil
	case ExecutePaymentOK0PayTypeDirectdebit:
		*s = ExecutePaymentOK0PayTypeDirectdebit
		return nil
	case ExecutePaymentOK0PayTypeVirtualaccount:
		*s = ExecutePaymentOK0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ExecutePaymentOK0Status string

const (
	ExecutePaymentOK0StatusUNPROCESSED             ExecutePaymentOK0Status = "UNPROCESSED"
	ExecutePaymentOK0StatusCHECKED                 ExecutePaymentOK0Status = "CHECKED"
	ExecutePaymentOK0StatusAUTHORIZED              ExecutePaymentOK0Status = "AUTHORIZED"
	ExecutePaymentOK0StatusAWAITINGCUSTOMERPAYMENT ExecutePaymentOK0Status = "AWAITING_CUSTOMER_PAYMENT"
	ExecutePaymentOK0StatusAWAITINGPAYMENTAPPROVAL ExecutePaymentOK0Status = "AWAITING_PAYMENT_APPROVAL"
	ExecutePaymentOK0StatusCAPTURED                ExecutePaymentOK0Status = "CAPTURED"
	ExecutePaymentOK0StatusCANCELED                ExecutePaymentOK0Status = "CANCELED"
	ExecutePaymentOK0StatusEXPIRED                 ExecutePaymentOK0Status = "EXPIRED"
	ExecutePaymentOK0StatusAUTHENTICATED           ExecutePaymentOK0Status = "AUTHENTICATED"
	ExecutePaymentOK0StatusFAILED                  ExecutePaymentOK0Status = "FAILED"
)

// AllValues returns all ExecutePaymentOK0Status values.
func (ExecutePaymentOK0Status) AllValues() []ExecutePaymentOK0Status {
	return []ExecutePaymentOK0Status{
		ExecutePaymentOK0StatusUNPROCESSED,
		ExecutePaymentOK0StatusCHECKED,
		ExecutePaymentOK0StatusAUTHORIZED,
		ExecutePaymentOK0StatusAWAITINGCUSTOMERPAYMENT,
		ExecutePaymentOK0StatusAWAITINGPAYMENTAPPROVAL,
		ExecutePaymentOK0StatusCAPTURED,
		ExecutePaymentOK0StatusCANCELED,
		ExecutePaymentOK0StatusEXPIRED,
		ExecutePaymentOK0StatusAUTHENTICATED,
		ExecutePaymentOK0StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0Status) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0StatusUNPROCESSED:
		return []byte(s), nil
	case ExecutePaymentOK0StatusCHECKED:
		return []byte(s), nil
	case ExecutePaymentOK0StatusAUTHORIZED:
		return []byte(s), nil
	case ExecutePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ExecutePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ExecutePaymentOK0StatusCAPTURED:
		return []byte(s), nil
	case ExecutePaymentOK0StatusCANCELED:
		return []byte(s), nil
	case ExecutePaymentOK0StatusEXPIRED:
		return []byte(s), nil
	case ExecutePaymentOK0StatusAUTHENTICATED:
		return []byte(s), nil
	case ExecutePaymentOK0StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0Status) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0Status(data) {
	case ExecutePaymentOK0StatusUNPROCESSED:
		*s = ExecutePaymentOK0StatusUNPROCESSED
		return nil
	case ExecutePaymentOK0StatusCHECKED:
		*s = ExecutePaymentOK0StatusCHECKED
		return nil
	case ExecutePaymentOK0StatusAUTHORIZED:
		*s = ExecutePaymentOK0StatusAUTHORIZED
		return nil
	case ExecutePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ExecutePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ExecutePaymentOK0StatusCAPTURED:
		*s = ExecutePaymentOK0StatusCAPTURED
		return nil
	case ExecutePaymentOK0StatusCANCELED:
		*s = ExecutePaymentOK0StatusCANCELED
		return nil
	case ExecutePaymentOK0StatusEXPIRED:
		*s = ExecutePaymentOK0StatusEXPIRED
		return nil
	case ExecutePaymentOK0StatusAUTHENTICATED:
		*s = ExecutePaymentOK0StatusAUTHENTICATED
		return nil
	case ExecutePaymentOK0StatusFAILED:
		*s = ExecutePaymentOK0StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0認証処理 ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: チャレンジ認証の実施が必要
// - `AUTHENTICATED`: 3Dセキュア認証処理が完了.
type ExecutePaymentOK0Tds2Status string

const (
	ExecutePaymentOK0Tds2StatusAUTHENTICATING ExecutePaymentOK0Tds2Status = "AUTHENTICATING"
	ExecutePaymentOK0Tds2StatusCHALLENGE      ExecutePaymentOK0Tds2Status = "CHALLENGE"
	ExecutePaymentOK0Tds2StatusAUTHENTICATED  ExecutePaymentOK0Tds2Status = "AUTHENTICATED"
)

// AllValues returns all ExecutePaymentOK0Tds2Status values.
func (ExecutePaymentOK0Tds2Status) AllValues() []ExecutePaymentOK0Tds2Status {
	return []ExecutePaymentOK0Tds2Status{
		ExecutePaymentOK0Tds2StatusAUTHENTICATING,
		ExecutePaymentOK0Tds2StatusCHALLENGE,
		ExecutePaymentOK0Tds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0Tds2Status) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0Tds2StatusAUTHENTICATING:
		return []byte(s), nil
	case ExecutePaymentOK0Tds2StatusCHALLENGE:
		return []byte(s), nil
	case ExecutePaymentOK0Tds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0Tds2Status) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0Tds2Status(data) {
	case ExecutePaymentOK0Tds2StatusAUTHENTICATING:
		*s = ExecutePaymentOK0Tds2StatusAUTHENTICATING
		return nil
	case ExecutePaymentOK0Tds2StatusCHALLENGE:
		*s = ExecutePaymentOK0Tds2StatusCHALLENGE
		return nil
	case ExecutePaymentOK0Tds2StatusAUTHENTICATED:
		*s = ExecutePaymentOK0Tds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type ExecutePaymentOK0Tds2Type string

const (
	ExecutePaymentOK0Tds2Type2 ExecutePaymentOK0Tds2Type = "2"
	ExecutePaymentOK0Tds2Type3 ExecutePaymentOK0Tds2Type = "3"
)

// AllValues returns all ExecutePaymentOK0Tds2Type values.
func (ExecutePaymentOK0Tds2Type) AllValues() []ExecutePaymentOK0Tds2Type {
	return []ExecutePaymentOK0Tds2Type{
		ExecutePaymentOK0Tds2Type2,
		ExecutePaymentOK0Tds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0Tds2Type) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0Tds2Type2:
		return []byte(s), nil
	case ExecutePaymentOK0Tds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0Tds2Type) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0Tds2Type(data) {
	case ExecutePaymentOK0Tds2Type2:
		*s = ExecutePaymentOK0Tds2Type2
		return nil
	case ExecutePaymentOK0Tds2Type3:
		*s = ExecutePaymentOK0Tds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type ExecutePaymentOK0TdsType string

const (
	ExecutePaymentOK0TdsType0 ExecutePaymentOK0TdsType = "0"
	ExecutePaymentOK0TdsType2 ExecutePaymentOK0TdsType = "2"
)

// AllValues returns all ExecutePaymentOK0TdsType values.
func (ExecutePaymentOK0TdsType) AllValues() []ExecutePaymentOK0TdsType {
	return []ExecutePaymentOK0TdsType{
		ExecutePaymentOK0TdsType0,
		ExecutePaymentOK0TdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK0TdsType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK0TdsType0:
		return []byte(s), nil
	case ExecutePaymentOK0TdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK0TdsType) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK0TdsType(data) {
	case ExecutePaymentOK0TdsType0:
		*s = ExecutePaymentOK0TdsType0
		return nil
	case ExecutePaymentOK0TdsType2:
		*s = ExecutePaymentOK0TdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ExecutePaymentOK1 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType OptExecutePaymentOK1PayType `json:"pay_type"`
	JobCode OptExecutePaymentOK1JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>.
	Status OptExecutePaymentOK1Status   `json:"status"`
	Brand  OptNilExecutePaymentOK1Brand `json:"brand"`
	// マスク済みカード番号。\
	// <span class="smallText">
	// 下4桁以外をマスクしたカード番号です。\
	// Apple
	// Payでは実際のカード番号ではなくデバイスアカウント番号と呼ばれる番号で決済が行われるため、このフィールドで返される値はデバイスアカウント番号をマスクしたものになります。\
	// </span>
	// 形式：`************1234`.
	CardNo     OptNilString                    `json:"card_no"`
	Expire     OptNilString                    `json:"expire"`
	HolderName OptNilString                    `json:"holder_name"`
	CardNoHash OptNilString                    `json:"card_no_hash"`
	Method     OptExecutePaymentOK1Method      `json:"method"`
	PayTimes   OptNilExecutePaymentOK1PayTimes `json:"pay_times"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
}

// GetShopID returns the value of ShopID.
func (s *ExecutePaymentOK1) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ExecutePaymentOK1) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentOK1) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ExecutePaymentOK1) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ExecutePaymentOK1) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ExecutePaymentOK1) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ExecutePaymentOK1) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ExecutePaymentOK1) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ExecutePaymentOK1) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ExecutePaymentOK1) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentOK1) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ExecutePaymentOK1) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ExecutePaymentOK1) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ExecutePaymentOK1) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ExecutePaymentOK1) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentOK1) GetPayType() OptExecutePaymentOK1PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *ExecutePaymentOK1) GetJobCode() OptExecutePaymentOK1JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *ExecutePaymentOK1) GetStatus() OptExecutePaymentOK1Status {
	return s.Status
}

// GetBrand returns the value of Brand.
func (s *ExecutePaymentOK1) GetBrand() OptNilExecutePaymentOK1Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *ExecutePaymentOK1) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *ExecutePaymentOK1) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *ExecutePaymentOK1) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *ExecutePaymentOK1) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *ExecutePaymentOK1) GetMethod() OptExecutePaymentOK1Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *ExecutePaymentOK1) GetPayTimes() OptNilExecutePaymentOK1PayTimes {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *ExecutePaymentOK1) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *ExecutePaymentOK1) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *ExecutePaymentOK1) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *ExecutePaymentOK1) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *ExecutePaymentOK1) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *ExecutePaymentOK1) GetItemCode() OptNilString {
	return s.ItemCode
}

// GetSendURL returns the value of SendURL.
func (s *ExecutePaymentOK1) GetSendURL() OptNilString {
	return s.SendURL
}

// SetShopID sets the value of ShopID.
func (s *ExecutePaymentOK1) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ExecutePaymentOK1) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentOK1) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ExecutePaymentOK1) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ExecutePaymentOK1) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ExecutePaymentOK1) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ExecutePaymentOK1) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ExecutePaymentOK1) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ExecutePaymentOK1) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ExecutePaymentOK1) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentOK1) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ExecutePaymentOK1) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ExecutePaymentOK1) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ExecutePaymentOK1) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ExecutePaymentOK1) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentOK1) SetPayType(val OptExecutePaymentOK1PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *ExecutePaymentOK1) SetJobCode(val OptExecutePaymentOK1JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *ExecutePaymentOK1) SetStatus(val OptExecutePaymentOK1Status) {
	s.Status = val
}

// SetBrand sets the value of Brand.
func (s *ExecutePaymentOK1) SetBrand(val OptNilExecutePaymentOK1Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *ExecutePaymentOK1) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *ExecutePaymentOK1) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *ExecutePaymentOK1) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *ExecutePaymentOK1) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *ExecutePaymentOK1) SetMethod(val OptExecutePaymentOK1Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *ExecutePaymentOK1) SetPayTimes(val OptNilExecutePaymentOK1PayTimes) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *ExecutePaymentOK1) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *ExecutePaymentOK1) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *ExecutePaymentOK1) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *ExecutePaymentOK1) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *ExecutePaymentOK1) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *ExecutePaymentOK1) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// SetSendURL sets the value of SendURL.
func (s *ExecutePaymentOK1) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type ExecutePaymentOK1Brand string

const (
	ExecutePaymentOK1BrandVISA     ExecutePaymentOK1Brand = "VISA"
	ExecutePaymentOK1BrandMASTER   ExecutePaymentOK1Brand = "MASTER"
	ExecutePaymentOK1BrandJCB      ExecutePaymentOK1Brand = "JCB"
	ExecutePaymentOK1BrandAMEX     ExecutePaymentOK1Brand = "AMEX"
	ExecutePaymentOK1BrandDINERS   ExecutePaymentOK1Brand = "DINERS"
	ExecutePaymentOK1BrandDISCOVER ExecutePaymentOK1Brand = "DISCOVER"
	ExecutePaymentOK1BrandEmpty    ExecutePaymentOK1Brand = ""
)

// AllValues returns all ExecutePaymentOK1Brand values.
func (ExecutePaymentOK1Brand) AllValues() []ExecutePaymentOK1Brand {
	return []ExecutePaymentOK1Brand{
		ExecutePaymentOK1BrandVISA,
		ExecutePaymentOK1BrandMASTER,
		ExecutePaymentOK1BrandJCB,
		ExecutePaymentOK1BrandAMEX,
		ExecutePaymentOK1BrandDINERS,
		ExecutePaymentOK1BrandDISCOVER,
		ExecutePaymentOK1BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK1Brand) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK1BrandVISA:
		return []byte(s), nil
	case ExecutePaymentOK1BrandMASTER:
		return []byte(s), nil
	case ExecutePaymentOK1BrandJCB:
		return []byte(s), nil
	case ExecutePaymentOK1BrandAMEX:
		return []byte(s), nil
	case ExecutePaymentOK1BrandDINERS:
		return []byte(s), nil
	case ExecutePaymentOK1BrandDISCOVER:
		return []byte(s), nil
	case ExecutePaymentOK1BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK1Brand) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK1Brand(data) {
	case ExecutePaymentOK1BrandVISA:
		*s = ExecutePaymentOK1BrandVISA
		return nil
	case ExecutePaymentOK1BrandMASTER:
		*s = ExecutePaymentOK1BrandMASTER
		return nil
	case ExecutePaymentOK1BrandJCB:
		*s = ExecutePaymentOK1BrandJCB
		return nil
	case ExecutePaymentOK1BrandAMEX:
		*s = ExecutePaymentOK1BrandAMEX
		return nil
	case ExecutePaymentOK1BrandDINERS:
		*s = ExecutePaymentOK1BrandDINERS
		return nil
	case ExecutePaymentOK1BrandDISCOVER:
		*s = ExecutePaymentOK1BrandDISCOVER
		return nil
	case ExecutePaymentOK1BrandEmpty:
		*s = ExecutePaymentOK1BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type ExecutePaymentOK1JobCode string

const (
	ExecutePaymentOK1JobCodeAUTH    ExecutePaymentOK1JobCode = "AUTH"
	ExecutePaymentOK1JobCodeCAPTURE ExecutePaymentOK1JobCode = "CAPTURE"
)

// AllValues returns all ExecutePaymentOK1JobCode values.
func (ExecutePaymentOK1JobCode) AllValues() []ExecutePaymentOK1JobCode {
	return []ExecutePaymentOK1JobCode{
		ExecutePaymentOK1JobCodeAUTH,
		ExecutePaymentOK1JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK1JobCode) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK1JobCodeAUTH:
		return []byte(s), nil
	case ExecutePaymentOK1JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK1JobCode) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK1JobCode(data) {
	case ExecutePaymentOK1JobCodeAUTH:
		*s = ExecutePaymentOK1JobCodeAUTH
		return nil
	case ExecutePaymentOK1JobCodeCAPTURE:
		*s = ExecutePaymentOK1JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type ExecutePaymentOK1Method string

const (
	ExecutePaymentOK1Method1 ExecutePaymentOK1Method = "1"
	ExecutePaymentOK1Method2 ExecutePaymentOK1Method = "2"
	ExecutePaymentOK1Method5 ExecutePaymentOK1Method = "5"
)

// AllValues returns all ExecutePaymentOK1Method values.
func (ExecutePaymentOK1Method) AllValues() []ExecutePaymentOK1Method {
	return []ExecutePaymentOK1Method{
		ExecutePaymentOK1Method1,
		ExecutePaymentOK1Method2,
		ExecutePaymentOK1Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK1Method) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK1Method1:
		return []byte(s), nil
	case ExecutePaymentOK1Method2:
		return []byte(s), nil
	case ExecutePaymentOK1Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK1Method) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK1Method(data) {
	case ExecutePaymentOK1Method1:
		*s = ExecutePaymentOK1Method1
		return nil
	case ExecutePaymentOK1Method2:
		*s = ExecutePaymentOK1Method2
		return nil
	case ExecutePaymentOK1Method5:
		*s = ExecutePaymentOK1Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type ExecutePaymentOK1PayTimes string

const (
	ExecutePaymentOK1PayTimes3  ExecutePaymentOK1PayTimes = "3"
	ExecutePaymentOK1PayTimes5  ExecutePaymentOK1PayTimes = "5"
	ExecutePaymentOK1PayTimes6  ExecutePaymentOK1PayTimes = "6"
	ExecutePaymentOK1PayTimes10 ExecutePaymentOK1PayTimes = "10"
	ExecutePaymentOK1PayTimes12 ExecutePaymentOK1PayTimes = "12"
	ExecutePaymentOK1PayTimes15 ExecutePaymentOK1PayTimes = "15"
	ExecutePaymentOK1PayTimes18 ExecutePaymentOK1PayTimes = "18"
	ExecutePaymentOK1PayTimes20 ExecutePaymentOK1PayTimes = "20"
	ExecutePaymentOK1PayTimes24 ExecutePaymentOK1PayTimes = "24"
)

// AllValues returns all ExecutePaymentOK1PayTimes values.
func (ExecutePaymentOK1PayTimes) AllValues() []ExecutePaymentOK1PayTimes {
	return []ExecutePaymentOK1PayTimes{
		ExecutePaymentOK1PayTimes3,
		ExecutePaymentOK1PayTimes5,
		ExecutePaymentOK1PayTimes6,
		ExecutePaymentOK1PayTimes10,
		ExecutePaymentOK1PayTimes12,
		ExecutePaymentOK1PayTimes15,
		ExecutePaymentOK1PayTimes18,
		ExecutePaymentOK1PayTimes20,
		ExecutePaymentOK1PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK1PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK1PayTimes3:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes5:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes6:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes10:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes12:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes15:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes18:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes20:
		return []byte(s), nil
	case ExecutePaymentOK1PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK1PayTimes) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK1PayTimes(data) {
	case ExecutePaymentOK1PayTimes3:
		*s = ExecutePaymentOK1PayTimes3
		return nil
	case ExecutePaymentOK1PayTimes5:
		*s = ExecutePaymentOK1PayTimes5
		return nil
	case ExecutePaymentOK1PayTimes6:
		*s = ExecutePaymentOK1PayTimes6
		return nil
	case ExecutePaymentOK1PayTimes10:
		*s = ExecutePaymentOK1PayTimes10
		return nil
	case ExecutePaymentOK1PayTimes12:
		*s = ExecutePaymentOK1PayTimes12
		return nil
	case ExecutePaymentOK1PayTimes15:
		*s = ExecutePaymentOK1PayTimes15
		return nil
	case ExecutePaymentOK1PayTimes18:
		*s = ExecutePaymentOK1PayTimes18
		return nil
	case ExecutePaymentOK1PayTimes20:
		*s = ExecutePaymentOK1PayTimes20
		return nil
	case ExecutePaymentOK1PayTimes24:
		*s = ExecutePaymentOK1PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentOK1PayType string

const (
	ExecutePaymentOK1PayTypeCard           ExecutePaymentOK1PayType = "Card"
	ExecutePaymentOK1PayTypeKonbini        ExecutePaymentOK1PayType = "Konbini"
	ExecutePaymentOK1PayTypePaypay         ExecutePaymentOK1PayType = "Paypay"
	ExecutePaymentOK1PayTypeApplepay       ExecutePaymentOK1PayType = "Applepay"
	ExecutePaymentOK1PayTypeDirectdebit    ExecutePaymentOK1PayType = "Directdebit"
	ExecutePaymentOK1PayTypeVirtualaccount ExecutePaymentOK1PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentOK1PayType values.
func (ExecutePaymentOK1PayType) AllValues() []ExecutePaymentOK1PayType {
	return []ExecutePaymentOK1PayType{
		ExecutePaymentOK1PayTypeCard,
		ExecutePaymentOK1PayTypeKonbini,
		ExecutePaymentOK1PayTypePaypay,
		ExecutePaymentOK1PayTypeApplepay,
		ExecutePaymentOK1PayTypeDirectdebit,
		ExecutePaymentOK1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK1PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK1PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentOK1PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentOK1PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentOK1PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentOK1PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentOK1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK1PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK1PayType(data) {
	case ExecutePaymentOK1PayTypeCard:
		*s = ExecutePaymentOK1PayTypeCard
		return nil
	case ExecutePaymentOK1PayTypeKonbini:
		*s = ExecutePaymentOK1PayTypeKonbini
		return nil
	case ExecutePaymentOK1PayTypePaypay:
		*s = ExecutePaymentOK1PayTypePaypay
		return nil
	case ExecutePaymentOK1PayTypeApplepay:
		*s = ExecutePaymentOK1PayTypeApplepay
		return nil
	case ExecutePaymentOK1PayTypeDirectdebit:
		*s = ExecutePaymentOK1PayTypeDirectdebit
		return nil
	case ExecutePaymentOK1PayTypeVirtualaccount:
		*s = ExecutePaymentOK1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ExecutePaymentOK1Status string

const (
	ExecutePaymentOK1StatusUNPROCESSED             ExecutePaymentOK1Status = "UNPROCESSED"
	ExecutePaymentOK1StatusCHECKED                 ExecutePaymentOK1Status = "CHECKED"
	ExecutePaymentOK1StatusAUTHORIZED              ExecutePaymentOK1Status = "AUTHORIZED"
	ExecutePaymentOK1StatusAWAITINGCUSTOMERPAYMENT ExecutePaymentOK1Status = "AWAITING_CUSTOMER_PAYMENT"
	ExecutePaymentOK1StatusAWAITINGPAYMENTAPPROVAL ExecutePaymentOK1Status = "AWAITING_PAYMENT_APPROVAL"
	ExecutePaymentOK1StatusCAPTURED                ExecutePaymentOK1Status = "CAPTURED"
	ExecutePaymentOK1StatusCANCELED                ExecutePaymentOK1Status = "CANCELED"
	ExecutePaymentOK1StatusEXPIRED                 ExecutePaymentOK1Status = "EXPIRED"
	ExecutePaymentOK1StatusAUTHENTICATED           ExecutePaymentOK1Status = "AUTHENTICATED"
	ExecutePaymentOK1StatusFAILED                  ExecutePaymentOK1Status = "FAILED"
)

// AllValues returns all ExecutePaymentOK1Status values.
func (ExecutePaymentOK1Status) AllValues() []ExecutePaymentOK1Status {
	return []ExecutePaymentOK1Status{
		ExecutePaymentOK1StatusUNPROCESSED,
		ExecutePaymentOK1StatusCHECKED,
		ExecutePaymentOK1StatusAUTHORIZED,
		ExecutePaymentOK1StatusAWAITINGCUSTOMERPAYMENT,
		ExecutePaymentOK1StatusAWAITINGPAYMENTAPPROVAL,
		ExecutePaymentOK1StatusCAPTURED,
		ExecutePaymentOK1StatusCANCELED,
		ExecutePaymentOK1StatusEXPIRED,
		ExecutePaymentOK1StatusAUTHENTICATED,
		ExecutePaymentOK1StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK1Status) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK1StatusUNPROCESSED:
		return []byte(s), nil
	case ExecutePaymentOK1StatusCHECKED:
		return []byte(s), nil
	case ExecutePaymentOK1StatusAUTHORIZED:
		return []byte(s), nil
	case ExecutePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ExecutePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ExecutePaymentOK1StatusCAPTURED:
		return []byte(s), nil
	case ExecutePaymentOK1StatusCANCELED:
		return []byte(s), nil
	case ExecutePaymentOK1StatusEXPIRED:
		return []byte(s), nil
	case ExecutePaymentOK1StatusAUTHENTICATED:
		return []byte(s), nil
	case ExecutePaymentOK1StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK1Status) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK1Status(data) {
	case ExecutePaymentOK1StatusUNPROCESSED:
		*s = ExecutePaymentOK1StatusUNPROCESSED
		return nil
	case ExecutePaymentOK1StatusCHECKED:
		*s = ExecutePaymentOK1StatusCHECKED
		return nil
	case ExecutePaymentOK1StatusAUTHORIZED:
		*s = ExecutePaymentOK1StatusAUTHORIZED
		return nil
	case ExecutePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ExecutePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ExecutePaymentOK1StatusCAPTURED:
		*s = ExecutePaymentOK1StatusCAPTURED
		return nil
	case ExecutePaymentOK1StatusCANCELED:
		*s = ExecutePaymentOK1StatusCANCELED
		return nil
	case ExecutePaymentOK1StatusEXPIRED:
		*s = ExecutePaymentOK1StatusEXPIRED
		return nil
	case ExecutePaymentOK1StatusAUTHENTICATED:
		*s = ExecutePaymentOK1StatusAUTHENTICATED
		return nil
	case ExecutePaymentOK1StatusFAILED:
		*s = ExecutePaymentOK1StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ExecutePaymentOK2 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType OptExecutePaymentOK2PayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるコンビニ店頭レジでの払い込みを待っている状態。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptExecutePaymentOK2Status `json:"status"`
	// 支払い期限日数\
	// この決済の支払い期限日数です。`"0"`日から`"14"`日まで指定できます。
	// -
	// `"0"`を指定すると決済を作成した当日に限り支払いが可能な決済が作成されます。
	// - デフォルト：`"2"`.
	PaymentTermDay OptNilString `json:"payment_term_day"`
	// 支払い期限日時\
	// コンビニ決済の支払い期限日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentTerm OptNilString `json:"payment_term"`
	// 支払日時\
	// コンビニ店頭で購入者が支払いを行った日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
	// バーコード画像 Base64エンコード済み画像データ\
	// コンビニ店頭での支払いに使用するバーコード画像のBase64エンコード済みデータです。このデータをデコードして表示します。\
	// バーコード画像はレギュレーションに従って表示する必要があります。詳細は[Docs > レギュレーションと注意事項](https://docs.fincode.jp/payment/konbini/note)から参照できます。.
	Barcode OptNilString `json:"barcode"`
	// バーコード画像 フォーマット\
	// 発行されたバーコード画像（`barcode`）のフォーマットです。.
	BarcodeFormat OptNilExecutePaymentOK2BarcodeFormat `json:"barcode_format"`
	// バーコード画像 横幅（px）\
	// 発行されたバーコード画像（`barcode`）の横幅です。.
	BarcodeWidth OptNilString `json:"barcode_width"`
	// バーコード画像 縦幅（px）\
	// 発行されたバーコード画像（`barcode`）の縦幅です。.
	BarcodeHeight OptNilString `json:"barcode_height"`
	// 多重支払フラグ\
	// この決済に対して複数回支払いが行われた場合`1`になります。
	// - `0`: 0回、または1回の支払いが行われた
	// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
	OverpaymentFlag OptExecutePaymentOK2OverpaymentFlag `json:"overpayment_flag"`
	// キャンセル後支払フラグ\
	// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
	// - `0`: キャンセル後支払は行われていない
	// - `1`: キャンセル後、購入者による支払いが行われた.
	CancelOverpaymentFlag OptExecutePaymentOK2CancelOverpaymentFlag `json:"cancel_overpayment_flag"`
	KonbiniCode           OptNilExecutePaymentOK2KonbiniCode        `json:"konbini_code"`
	// コンビニ店舗コード\
	// コンビニ事業者ごとに独自体系の店舗コードです。.
	KonbiniStoreCode jx.Raw       `json:"konbini_store_code"`
	DeviceName       OptNilString `json:"device_name"`
	// OSバージョン.
	OsVersion jx.Raw       `json:"os_version"`
	WinWidth  OptNilString `json:"win_width"`
	WinHeight OptNilString `json:"win_height"`
	// 画面横幅のDPI.
	Xdpi jx.Raw `json:"xdpi"`
	// 画面縦幅のDPI.
	Ydpi   jx.Raw                     `json:"ydpi"`
	Result OptExecutePaymentOK2Result `json:"result"`
	// 注文管理ID.
	OrderSerial OptNilString `json:"order_serial"`
	// 請求ID.
	InvoiceID OptNilString `json:"invoice_id"`
}

// GetShopID returns the value of ShopID.
func (s *ExecutePaymentOK2) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ExecutePaymentOK2) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentOK2) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ExecutePaymentOK2) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ExecutePaymentOK2) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ExecutePaymentOK2) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ExecutePaymentOK2) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ExecutePaymentOK2) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ExecutePaymentOK2) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ExecutePaymentOK2) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentOK2) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ExecutePaymentOK2) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ExecutePaymentOK2) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ExecutePaymentOK2) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ExecutePaymentOK2) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentOK2) GetPayType() OptExecutePaymentOK2PayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *ExecutePaymentOK2) GetStatus() OptExecutePaymentOK2Status {
	return s.Status
}

// GetPaymentTermDay returns the value of PaymentTermDay.
func (s *ExecutePaymentOK2) GetPaymentTermDay() OptNilString {
	return s.PaymentTermDay
}

// GetPaymentTerm returns the value of PaymentTerm.
func (s *ExecutePaymentOK2) GetPaymentTerm() OptNilString {
	return s.PaymentTerm
}

// GetPaymentDate returns the value of PaymentDate.
func (s *ExecutePaymentOK2) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// GetBarcode returns the value of Barcode.
func (s *ExecutePaymentOK2) GetBarcode() OptNilString {
	return s.Barcode
}

// GetBarcodeFormat returns the value of BarcodeFormat.
func (s *ExecutePaymentOK2) GetBarcodeFormat() OptNilExecutePaymentOK2BarcodeFormat {
	return s.BarcodeFormat
}

// GetBarcodeWidth returns the value of BarcodeWidth.
func (s *ExecutePaymentOK2) GetBarcodeWidth() OptNilString {
	return s.BarcodeWidth
}

// GetBarcodeHeight returns the value of BarcodeHeight.
func (s *ExecutePaymentOK2) GetBarcodeHeight() OptNilString {
	return s.BarcodeHeight
}

// GetOverpaymentFlag returns the value of OverpaymentFlag.
func (s *ExecutePaymentOK2) GetOverpaymentFlag() OptExecutePaymentOK2OverpaymentFlag {
	return s.OverpaymentFlag
}

// GetCancelOverpaymentFlag returns the value of CancelOverpaymentFlag.
func (s *ExecutePaymentOK2) GetCancelOverpaymentFlag() OptExecutePaymentOK2CancelOverpaymentFlag {
	return s.CancelOverpaymentFlag
}

// GetKonbiniCode returns the value of KonbiniCode.
func (s *ExecutePaymentOK2) GetKonbiniCode() OptNilExecutePaymentOK2KonbiniCode {
	return s.KonbiniCode
}

// GetKonbiniStoreCode returns the value of KonbiniStoreCode.
func (s *ExecutePaymentOK2) GetKonbiniStoreCode() jx.Raw {
	return s.KonbiniStoreCode
}

// GetDeviceName returns the value of DeviceName.
func (s *ExecutePaymentOK2) GetDeviceName() OptNilString {
	return s.DeviceName
}

// GetOsVersion returns the value of OsVersion.
func (s *ExecutePaymentOK2) GetOsVersion() jx.Raw {
	return s.OsVersion
}

// GetWinWidth returns the value of WinWidth.
func (s *ExecutePaymentOK2) GetWinWidth() OptNilString {
	return s.WinWidth
}

// GetWinHeight returns the value of WinHeight.
func (s *ExecutePaymentOK2) GetWinHeight() OptNilString {
	return s.WinHeight
}

// GetXdpi returns the value of Xdpi.
func (s *ExecutePaymentOK2) GetXdpi() jx.Raw {
	return s.Xdpi
}

// GetYdpi returns the value of Ydpi.
func (s *ExecutePaymentOK2) GetYdpi() jx.Raw {
	return s.Ydpi
}

// GetResult returns the value of Result.
func (s *ExecutePaymentOK2) GetResult() OptExecutePaymentOK2Result {
	return s.Result
}

// GetOrderSerial returns the value of OrderSerial.
func (s *ExecutePaymentOK2) GetOrderSerial() OptNilString {
	return s.OrderSerial
}

// GetInvoiceID returns the value of InvoiceID.
func (s *ExecutePaymentOK2) GetInvoiceID() OptNilString {
	return s.InvoiceID
}

// SetShopID sets the value of ShopID.
func (s *ExecutePaymentOK2) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ExecutePaymentOK2) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentOK2) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ExecutePaymentOK2) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ExecutePaymentOK2) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ExecutePaymentOK2) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ExecutePaymentOK2) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ExecutePaymentOK2) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ExecutePaymentOK2) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ExecutePaymentOK2) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentOK2) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ExecutePaymentOK2) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ExecutePaymentOK2) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ExecutePaymentOK2) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ExecutePaymentOK2) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentOK2) SetPayType(val OptExecutePaymentOK2PayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *ExecutePaymentOK2) SetStatus(val OptExecutePaymentOK2Status) {
	s.Status = val
}

// SetPaymentTermDay sets the value of PaymentTermDay.
func (s *ExecutePaymentOK2) SetPaymentTermDay(val OptNilString) {
	s.PaymentTermDay = val
}

// SetPaymentTerm sets the value of PaymentTerm.
func (s *ExecutePaymentOK2) SetPaymentTerm(val OptNilString) {
	s.PaymentTerm = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *ExecutePaymentOK2) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// SetBarcode sets the value of Barcode.
func (s *ExecutePaymentOK2) SetBarcode(val OptNilString) {
	s.Barcode = val
}

// SetBarcodeFormat sets the value of BarcodeFormat.
func (s *ExecutePaymentOK2) SetBarcodeFormat(val OptNilExecutePaymentOK2BarcodeFormat) {
	s.BarcodeFormat = val
}

// SetBarcodeWidth sets the value of BarcodeWidth.
func (s *ExecutePaymentOK2) SetBarcodeWidth(val OptNilString) {
	s.BarcodeWidth = val
}

// SetBarcodeHeight sets the value of BarcodeHeight.
func (s *ExecutePaymentOK2) SetBarcodeHeight(val OptNilString) {
	s.BarcodeHeight = val
}

// SetOverpaymentFlag sets the value of OverpaymentFlag.
func (s *ExecutePaymentOK2) SetOverpaymentFlag(val OptExecutePaymentOK2OverpaymentFlag) {
	s.OverpaymentFlag = val
}

// SetCancelOverpaymentFlag sets the value of CancelOverpaymentFlag.
func (s *ExecutePaymentOK2) SetCancelOverpaymentFlag(val OptExecutePaymentOK2CancelOverpaymentFlag) {
	s.CancelOverpaymentFlag = val
}

// SetKonbiniCode sets the value of KonbiniCode.
func (s *ExecutePaymentOK2) SetKonbiniCode(val OptNilExecutePaymentOK2KonbiniCode) {
	s.KonbiniCode = val
}

// SetKonbiniStoreCode sets the value of KonbiniStoreCode.
func (s *ExecutePaymentOK2) SetKonbiniStoreCode(val jx.Raw) {
	s.KonbiniStoreCode = val
}

// SetDeviceName sets the value of DeviceName.
func (s *ExecutePaymentOK2) SetDeviceName(val OptNilString) {
	s.DeviceName = val
}

// SetOsVersion sets the value of OsVersion.
func (s *ExecutePaymentOK2) SetOsVersion(val jx.Raw) {
	s.OsVersion = val
}

// SetWinWidth sets the value of WinWidth.
func (s *ExecutePaymentOK2) SetWinWidth(val OptNilString) {
	s.WinWidth = val
}

// SetWinHeight sets the value of WinHeight.
func (s *ExecutePaymentOK2) SetWinHeight(val OptNilString) {
	s.WinHeight = val
}

// SetXdpi sets the value of Xdpi.
func (s *ExecutePaymentOK2) SetXdpi(val jx.Raw) {
	s.Xdpi = val
}

// SetYdpi sets the value of Ydpi.
func (s *ExecutePaymentOK2) SetYdpi(val jx.Raw) {
	s.Ydpi = val
}

// SetResult sets the value of Result.
func (s *ExecutePaymentOK2) SetResult(val OptExecutePaymentOK2Result) {
	s.Result = val
}

// SetOrderSerial sets the value of OrderSerial.
func (s *ExecutePaymentOK2) SetOrderSerial(val OptNilString) {
	s.OrderSerial = val
}

// SetInvoiceID sets the value of InvoiceID.
func (s *ExecutePaymentOK2) SetInvoiceID(val OptNilString) {
	s.InvoiceID = val
}

// バーコード画像 フォーマット\
// 発行されたバーコード画像（`barcode`）のフォーマットです。.
type ExecutePaymentOK2BarcodeFormat string

const (
	ExecutePaymentOK2BarcodeFormatJPG ExecutePaymentOK2BarcodeFormat = "jpg"
	ExecutePaymentOK2BarcodeFormatPNG ExecutePaymentOK2BarcodeFormat = "png"
	ExecutePaymentOK2BarcodeFormatBmp ExecutePaymentOK2BarcodeFormat = "bmp"
)

// AllValues returns all ExecutePaymentOK2BarcodeFormat values.
func (ExecutePaymentOK2BarcodeFormat) AllValues() []ExecutePaymentOK2BarcodeFormat {
	return []ExecutePaymentOK2BarcodeFormat{
		ExecutePaymentOK2BarcodeFormatJPG,
		ExecutePaymentOK2BarcodeFormatPNG,
		ExecutePaymentOK2BarcodeFormatBmp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK2BarcodeFormat) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK2BarcodeFormatJPG:
		return []byte(s), nil
	case ExecutePaymentOK2BarcodeFormatPNG:
		return []byte(s), nil
	case ExecutePaymentOK2BarcodeFormatBmp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK2BarcodeFormat) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK2BarcodeFormat(data) {
	case ExecutePaymentOK2BarcodeFormatJPG:
		*s = ExecutePaymentOK2BarcodeFormatJPG
		return nil
	case ExecutePaymentOK2BarcodeFormatPNG:
		*s = ExecutePaymentOK2BarcodeFormatPNG
		return nil
	case ExecutePaymentOK2BarcodeFormatBmp:
		*s = ExecutePaymentOK2BarcodeFormatBmp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// キャンセル後支払フラグ\
// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
// - `0`: キャンセル後支払は行われていない
// - `1`: キャンセル後、購入者による支払いが行われた.
type ExecutePaymentOK2CancelOverpaymentFlag string

const (
	ExecutePaymentOK2CancelOverpaymentFlag0 ExecutePaymentOK2CancelOverpaymentFlag = "0"
	ExecutePaymentOK2CancelOverpaymentFlag1 ExecutePaymentOK2CancelOverpaymentFlag = "1"
)

// AllValues returns all ExecutePaymentOK2CancelOverpaymentFlag values.
func (ExecutePaymentOK2CancelOverpaymentFlag) AllValues() []ExecutePaymentOK2CancelOverpaymentFlag {
	return []ExecutePaymentOK2CancelOverpaymentFlag{
		ExecutePaymentOK2CancelOverpaymentFlag0,
		ExecutePaymentOK2CancelOverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK2CancelOverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK2CancelOverpaymentFlag0:
		return []byte(s), nil
	case ExecutePaymentOK2CancelOverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK2CancelOverpaymentFlag) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK2CancelOverpaymentFlag(data) {
	case ExecutePaymentOK2CancelOverpaymentFlag0:
		*s = ExecutePaymentOK2CancelOverpaymentFlag0
		return nil
	case ExecutePaymentOK2CancelOverpaymentFlag1:
		*s = ExecutePaymentOK2CancelOverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者コード\
// 購入者が払い込みを行ったコンビニ事業者をあらわすコード。
// - `00010`: セブン-イレブン
// - `00020`: ローソン
// - `00030`: ファミリーマート
// - `00080`: ミニストップ
// - `00760`: セイコーマート.
type ExecutePaymentOK2KonbiniCode string

const (
	ExecutePaymentOK2KonbiniCode00010 ExecutePaymentOK2KonbiniCode = "00010"
	ExecutePaymentOK2KonbiniCode00020 ExecutePaymentOK2KonbiniCode = "00020"
	ExecutePaymentOK2KonbiniCode00030 ExecutePaymentOK2KonbiniCode = "00030"
	ExecutePaymentOK2KonbiniCode00080 ExecutePaymentOK2KonbiniCode = "00080"
	ExecutePaymentOK2KonbiniCode00760 ExecutePaymentOK2KonbiniCode = "00760"
)

// AllValues returns all ExecutePaymentOK2KonbiniCode values.
func (ExecutePaymentOK2KonbiniCode) AllValues() []ExecutePaymentOK2KonbiniCode {
	return []ExecutePaymentOK2KonbiniCode{
		ExecutePaymentOK2KonbiniCode00010,
		ExecutePaymentOK2KonbiniCode00020,
		ExecutePaymentOK2KonbiniCode00030,
		ExecutePaymentOK2KonbiniCode00080,
		ExecutePaymentOK2KonbiniCode00760,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK2KonbiniCode) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK2KonbiniCode00010:
		return []byte(s), nil
	case ExecutePaymentOK2KonbiniCode00020:
		return []byte(s), nil
	case ExecutePaymentOK2KonbiniCode00030:
		return []byte(s), nil
	case ExecutePaymentOK2KonbiniCode00080:
		return []byte(s), nil
	case ExecutePaymentOK2KonbiniCode00760:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK2KonbiniCode) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK2KonbiniCode(data) {
	case ExecutePaymentOK2KonbiniCode00010:
		*s = ExecutePaymentOK2KonbiniCode00010
		return nil
	case ExecutePaymentOK2KonbiniCode00020:
		*s = ExecutePaymentOK2KonbiniCode00020
		return nil
	case ExecutePaymentOK2KonbiniCode00030:
		*s = ExecutePaymentOK2KonbiniCode00030
		return nil
	case ExecutePaymentOK2KonbiniCode00080:
		*s = ExecutePaymentOK2KonbiniCode00080
		return nil
	case ExecutePaymentOK2KonbiniCode00760:
		*s = ExecutePaymentOK2KonbiniCode00760
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 多重支払フラグ\
// この決済に対して複数回支払いが行われた場合`1`になります。
// - `0`: 0回、または1回の支払いが行われた
// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
type ExecutePaymentOK2OverpaymentFlag string

const (
	ExecutePaymentOK2OverpaymentFlag0 ExecutePaymentOK2OverpaymentFlag = "0"
	ExecutePaymentOK2OverpaymentFlag1 ExecutePaymentOK2OverpaymentFlag = "1"
)

// AllValues returns all ExecutePaymentOK2OverpaymentFlag values.
func (ExecutePaymentOK2OverpaymentFlag) AllValues() []ExecutePaymentOK2OverpaymentFlag {
	return []ExecutePaymentOK2OverpaymentFlag{
		ExecutePaymentOK2OverpaymentFlag0,
		ExecutePaymentOK2OverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK2OverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK2OverpaymentFlag0:
		return []byte(s), nil
	case ExecutePaymentOK2OverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK2OverpaymentFlag) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK2OverpaymentFlag(data) {
	case ExecutePaymentOK2OverpaymentFlag0:
		*s = ExecutePaymentOK2OverpaymentFlag0
		return nil
	case ExecutePaymentOK2OverpaymentFlag1:
		*s = ExecutePaymentOK2OverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentOK2PayType string

const (
	ExecutePaymentOK2PayTypeCard           ExecutePaymentOK2PayType = "Card"
	ExecutePaymentOK2PayTypeKonbini        ExecutePaymentOK2PayType = "Konbini"
	ExecutePaymentOK2PayTypePaypay         ExecutePaymentOK2PayType = "Paypay"
	ExecutePaymentOK2PayTypeApplepay       ExecutePaymentOK2PayType = "Applepay"
	ExecutePaymentOK2PayTypeDirectdebit    ExecutePaymentOK2PayType = "Directdebit"
	ExecutePaymentOK2PayTypeVirtualaccount ExecutePaymentOK2PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentOK2PayType values.
func (ExecutePaymentOK2PayType) AllValues() []ExecutePaymentOK2PayType {
	return []ExecutePaymentOK2PayType{
		ExecutePaymentOK2PayTypeCard,
		ExecutePaymentOK2PayTypeKonbini,
		ExecutePaymentOK2PayTypePaypay,
		ExecutePaymentOK2PayTypeApplepay,
		ExecutePaymentOK2PayTypeDirectdebit,
		ExecutePaymentOK2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK2PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK2PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentOK2PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentOK2PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentOK2PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentOK2PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentOK2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK2PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK2PayType(data) {
	case ExecutePaymentOK2PayTypeCard:
		*s = ExecutePaymentOK2PayTypeCard
		return nil
	case ExecutePaymentOK2PayTypeKonbini:
		*s = ExecutePaymentOK2PayTypeKonbini
		return nil
	case ExecutePaymentOK2PayTypePaypay:
		*s = ExecutePaymentOK2PayTypePaypay
		return nil
	case ExecutePaymentOK2PayTypeApplepay:
		*s = ExecutePaymentOK2PayTypeApplepay
		return nil
	case ExecutePaymentOK2PayTypeDirectdebit:
		*s = ExecutePaymentOK2PayTypeDirectdebit
		return nil
	case ExecutePaymentOK2PayTypeVirtualaccount:
		*s = ExecutePaymentOK2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者の決済処理結果コード
// - `000`: 正常終了
// - `001`: 認証失敗
// - `002`:
// 注文登録には成功したものの端末情報が確認できなかったためバーコード画像の発行なし
// - `003`: 必須項目の不備によるエラー
// - `004`: バーコードデータ内の識別子が不正
// - `005`: バーコードデータ内のメーカーコードが不正
// - `006`: バーコードデータ内の企業識別コードが不正
// - `007`: 支払い期限日時を超過している、または形式が不正
// - `008`: 支払い金額が上限もしくは下限を超えている
// - `009`: 全体チェックデジットが不正
// - `010`: その他の理由によりバーコード画像の発行に失敗
// - `011`: 印紙フラグ（内部データ）不正
// - `012`: 端末情報の指定値の桁数不正
// - `013`: 既に同一のバーコードが登録済み
// - `900`: 予期せぬエラー.
type ExecutePaymentOK2Result string

const (
	ExecutePaymentOK2Result000 ExecutePaymentOK2Result = "000"
	ExecutePaymentOK2Result001 ExecutePaymentOK2Result = "001"
	ExecutePaymentOK2Result002 ExecutePaymentOK2Result = "002"
	ExecutePaymentOK2Result003 ExecutePaymentOK2Result = "003"
	ExecutePaymentOK2Result004 ExecutePaymentOK2Result = "004"
	ExecutePaymentOK2Result005 ExecutePaymentOK2Result = "005"
	ExecutePaymentOK2Result006 ExecutePaymentOK2Result = "006"
	ExecutePaymentOK2Result007 ExecutePaymentOK2Result = "007"
	ExecutePaymentOK2Result008 ExecutePaymentOK2Result = "008"
	ExecutePaymentOK2Result009 ExecutePaymentOK2Result = "009"
	ExecutePaymentOK2Result010 ExecutePaymentOK2Result = "010"
	ExecutePaymentOK2Result011 ExecutePaymentOK2Result = "011"
	ExecutePaymentOK2Result012 ExecutePaymentOK2Result = "012"
	ExecutePaymentOK2Result013 ExecutePaymentOK2Result = "013"
	ExecutePaymentOK2Result900 ExecutePaymentOK2Result = "900"
)

// AllValues returns all ExecutePaymentOK2Result values.
func (ExecutePaymentOK2Result) AllValues() []ExecutePaymentOK2Result {
	return []ExecutePaymentOK2Result{
		ExecutePaymentOK2Result000,
		ExecutePaymentOK2Result001,
		ExecutePaymentOK2Result002,
		ExecutePaymentOK2Result003,
		ExecutePaymentOK2Result004,
		ExecutePaymentOK2Result005,
		ExecutePaymentOK2Result006,
		ExecutePaymentOK2Result007,
		ExecutePaymentOK2Result008,
		ExecutePaymentOK2Result009,
		ExecutePaymentOK2Result010,
		ExecutePaymentOK2Result011,
		ExecutePaymentOK2Result012,
		ExecutePaymentOK2Result013,
		ExecutePaymentOK2Result900,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK2Result) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK2Result000:
		return []byte(s), nil
	case ExecutePaymentOK2Result001:
		return []byte(s), nil
	case ExecutePaymentOK2Result002:
		return []byte(s), nil
	case ExecutePaymentOK2Result003:
		return []byte(s), nil
	case ExecutePaymentOK2Result004:
		return []byte(s), nil
	case ExecutePaymentOK2Result005:
		return []byte(s), nil
	case ExecutePaymentOK2Result006:
		return []byte(s), nil
	case ExecutePaymentOK2Result007:
		return []byte(s), nil
	case ExecutePaymentOK2Result008:
		return []byte(s), nil
	case ExecutePaymentOK2Result009:
		return []byte(s), nil
	case ExecutePaymentOK2Result010:
		return []byte(s), nil
	case ExecutePaymentOK2Result011:
		return []byte(s), nil
	case ExecutePaymentOK2Result012:
		return []byte(s), nil
	case ExecutePaymentOK2Result013:
		return []byte(s), nil
	case ExecutePaymentOK2Result900:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK2Result) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK2Result(data) {
	case ExecutePaymentOK2Result000:
		*s = ExecutePaymentOK2Result000
		return nil
	case ExecutePaymentOK2Result001:
		*s = ExecutePaymentOK2Result001
		return nil
	case ExecutePaymentOK2Result002:
		*s = ExecutePaymentOK2Result002
		return nil
	case ExecutePaymentOK2Result003:
		*s = ExecutePaymentOK2Result003
		return nil
	case ExecutePaymentOK2Result004:
		*s = ExecutePaymentOK2Result004
		return nil
	case ExecutePaymentOK2Result005:
		*s = ExecutePaymentOK2Result005
		return nil
	case ExecutePaymentOK2Result006:
		*s = ExecutePaymentOK2Result006
		return nil
	case ExecutePaymentOK2Result007:
		*s = ExecutePaymentOK2Result007
		return nil
	case ExecutePaymentOK2Result008:
		*s = ExecutePaymentOK2Result008
		return nil
	case ExecutePaymentOK2Result009:
		*s = ExecutePaymentOK2Result009
		return nil
	case ExecutePaymentOK2Result010:
		*s = ExecutePaymentOK2Result010
		return nil
	case ExecutePaymentOK2Result011:
		*s = ExecutePaymentOK2Result011
		return nil
	case ExecutePaymentOK2Result012:
		*s = ExecutePaymentOK2Result012
		return nil
	case ExecutePaymentOK2Result013:
		*s = ExecutePaymentOK2Result013
		return nil
	case ExecutePaymentOK2Result900:
		*s = ExecutePaymentOK2Result900
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ExecutePaymentOK2Status string

const (
	ExecutePaymentOK2StatusUNPROCESSED             ExecutePaymentOK2Status = "UNPROCESSED"
	ExecutePaymentOK2StatusCHECKED                 ExecutePaymentOK2Status = "CHECKED"
	ExecutePaymentOK2StatusAUTHORIZED              ExecutePaymentOK2Status = "AUTHORIZED"
	ExecutePaymentOK2StatusAWAITINGCUSTOMERPAYMENT ExecutePaymentOK2Status = "AWAITING_CUSTOMER_PAYMENT"
	ExecutePaymentOK2StatusAWAITINGPAYMENTAPPROVAL ExecutePaymentOK2Status = "AWAITING_PAYMENT_APPROVAL"
	ExecutePaymentOK2StatusCAPTURED                ExecutePaymentOK2Status = "CAPTURED"
	ExecutePaymentOK2StatusCANCELED                ExecutePaymentOK2Status = "CANCELED"
	ExecutePaymentOK2StatusEXPIRED                 ExecutePaymentOK2Status = "EXPIRED"
	ExecutePaymentOK2StatusAUTHENTICATED           ExecutePaymentOK2Status = "AUTHENTICATED"
	ExecutePaymentOK2StatusFAILED                  ExecutePaymentOK2Status = "FAILED"
)

// AllValues returns all ExecutePaymentOK2Status values.
func (ExecutePaymentOK2Status) AllValues() []ExecutePaymentOK2Status {
	return []ExecutePaymentOK2Status{
		ExecutePaymentOK2StatusUNPROCESSED,
		ExecutePaymentOK2StatusCHECKED,
		ExecutePaymentOK2StatusAUTHORIZED,
		ExecutePaymentOK2StatusAWAITINGCUSTOMERPAYMENT,
		ExecutePaymentOK2StatusAWAITINGPAYMENTAPPROVAL,
		ExecutePaymentOK2StatusCAPTURED,
		ExecutePaymentOK2StatusCANCELED,
		ExecutePaymentOK2StatusEXPIRED,
		ExecutePaymentOK2StatusAUTHENTICATED,
		ExecutePaymentOK2StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK2Status) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK2StatusUNPROCESSED:
		return []byte(s), nil
	case ExecutePaymentOK2StatusCHECKED:
		return []byte(s), nil
	case ExecutePaymentOK2StatusAUTHORIZED:
		return []byte(s), nil
	case ExecutePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ExecutePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ExecutePaymentOK2StatusCAPTURED:
		return []byte(s), nil
	case ExecutePaymentOK2StatusCANCELED:
		return []byte(s), nil
	case ExecutePaymentOK2StatusEXPIRED:
		return []byte(s), nil
	case ExecutePaymentOK2StatusAUTHENTICATED:
		return []byte(s), nil
	case ExecutePaymentOK2StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK2Status) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK2Status(data) {
	case ExecutePaymentOK2StatusUNPROCESSED:
		*s = ExecutePaymentOK2StatusUNPROCESSED
		return nil
	case ExecutePaymentOK2StatusCHECKED:
		*s = ExecutePaymentOK2StatusCHECKED
		return nil
	case ExecutePaymentOK2StatusAUTHORIZED:
		*s = ExecutePaymentOK2StatusAUTHORIZED
		return nil
	case ExecutePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ExecutePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ExecutePaymentOK2StatusCAPTURED:
		*s = ExecutePaymentOK2StatusCAPTURED
		return nil
	case ExecutePaymentOK2StatusCANCELED:
		*s = ExecutePaymentOK2StatusCANCELED
		return nil
	case ExecutePaymentOK2StatusEXPIRED:
		*s = ExecutePaymentOK2StatusEXPIRED
		return nil
	case ExecutePaymentOK2StatusAUTHENTICATED:
		*s = ExecutePaymentOK2StatusAUTHENTICATED
		return nil
	case ExecutePaymentOK2StatusFAILED:
		*s = ExecutePaymentOK2StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ExecutePaymentOK3 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType OptExecutePaymentOK3PayType `json:"pay_type"`
	JobCode OptExecutePaymentOK3JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるPayPay上での取引承認を待っている状態。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptExecutePaymentOK3Status `json:"status"`
	// PayPay支払いURL\
	// 購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します。.
	CodeURL OptNilString `json:"code_url"`
	// 支払期限\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	CodeExpiryDate OptNilString `json:"code_expiry_date"`
	// リダイレクトURL\
	// 決済が完了した際にPayPayからリダイレクト先URL。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクト先種別\
	// `redirect_url`の種別
	// - `1`： Webページ／Webアプリケーション
	// - `2`： ネイティブアプリ.
	RedirectType OptNilExecutePaymentOK3RedirectType `json:"redirect_type"`
	// 仮売上期限\
	// 形式： `yyyy/MM/dd`.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 注文内容の説明\
	// 購入者のPayPayアプリ上で表示される注文内容の説明。.
	OrderDescription OptNilString `json:"order_description"`
	// 売上確定の説明\
	// 購入者のPayPayアプリ上で表示される売上確定の説明。.
	CaptureDescription OptNilString `json:"capture_description"`
	// 金額変更の説明\
	// 購入者のPayPayアプリ上で表示される金額変更の説明。.
	UpdateDescription OptNilString `json:"update_description"`
	// キャンセルの説明\
	// 購入者のPayPayアプリ上で表示されるキャンセルの説明。.
	CancelDescription OptNilString `json:"cancel_description"`
	// 店舗ID\
	// PayPayによって発行された店舗ID。.
	StoreID OptNilString `json:"store_id"`
	// PayPayの支払いコードID.
	CodeID OptNilString `json:"code_id"`
	// PayPay 決済ID.
	PaymentID OptNilString `json:"payment_id"`
	// PayPay処理結果コード.
	PaypayResultCode OptNilString `json:"paypay_result_code"`
	// PayPay トランザクションID.
	MerchantPaymentID OptNilString `json:"merchant_payment_id"`
	// PayPay 売上確定ID.
	MerchantCaptureID OptNilString `json:"merchant_capture_id"`
	// PayPay 金額変更ID.
	MerchantUpdateID OptNilString `json:"merchant_update_id"`
	// PayPay キャンセルID.
	MerchantRevertID OptNilString `json:"merchant_revert_id"`
	// PayPay 返金ID.
	MerchantRefundID OptNilString `json:"merchant_refund_id"`
	// 支払日時\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *ExecutePaymentOK3) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ExecutePaymentOK3) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentOK3) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ExecutePaymentOK3) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ExecutePaymentOK3) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ExecutePaymentOK3) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ExecutePaymentOK3) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ExecutePaymentOK3) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ExecutePaymentOK3) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ExecutePaymentOK3) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentOK3) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ExecutePaymentOK3) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ExecutePaymentOK3) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ExecutePaymentOK3) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ExecutePaymentOK3) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentOK3) GetPayType() OptExecutePaymentOK3PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *ExecutePaymentOK3) GetJobCode() OptExecutePaymentOK3JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *ExecutePaymentOK3) GetStatus() OptExecutePaymentOK3Status {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *ExecutePaymentOK3) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *ExecutePaymentOK3) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *ExecutePaymentOK3) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *ExecutePaymentOK3) GetRedirectType() OptNilExecutePaymentOK3RedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *ExecutePaymentOK3) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *ExecutePaymentOK3) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *ExecutePaymentOK3) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *ExecutePaymentOK3) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *ExecutePaymentOK3) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *ExecutePaymentOK3) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *ExecutePaymentOK3) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *ExecutePaymentOK3) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *ExecutePaymentOK3) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *ExecutePaymentOK3) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *ExecutePaymentOK3) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *ExecutePaymentOK3) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRevertID returns the value of MerchantRevertID.
func (s *ExecutePaymentOK3) GetMerchantRevertID() OptNilString {
	return s.MerchantRevertID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *ExecutePaymentOK3) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *ExecutePaymentOK3) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *ExecutePaymentOK3) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ExecutePaymentOK3) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentOK3) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ExecutePaymentOK3) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ExecutePaymentOK3) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ExecutePaymentOK3) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ExecutePaymentOK3) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ExecutePaymentOK3) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ExecutePaymentOK3) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ExecutePaymentOK3) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentOK3) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ExecutePaymentOK3) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ExecutePaymentOK3) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ExecutePaymentOK3) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ExecutePaymentOK3) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentOK3) SetPayType(val OptExecutePaymentOK3PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *ExecutePaymentOK3) SetJobCode(val OptExecutePaymentOK3JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *ExecutePaymentOK3) SetStatus(val OptExecutePaymentOK3Status) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *ExecutePaymentOK3) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *ExecutePaymentOK3) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *ExecutePaymentOK3) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *ExecutePaymentOK3) SetRedirectType(val OptNilExecutePaymentOK3RedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *ExecutePaymentOK3) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *ExecutePaymentOK3) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *ExecutePaymentOK3) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *ExecutePaymentOK3) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *ExecutePaymentOK3) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *ExecutePaymentOK3) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *ExecutePaymentOK3) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *ExecutePaymentOK3) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *ExecutePaymentOK3) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *ExecutePaymentOK3) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *ExecutePaymentOK3) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *ExecutePaymentOK3) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRevertID sets the value of MerchantRevertID.
func (s *ExecutePaymentOK3) SetMerchantRevertID(val OptNilString) {
	s.MerchantRevertID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *ExecutePaymentOK3) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *ExecutePaymentOK3) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type ExecutePaymentOK3JobCode string

const (
	ExecutePaymentOK3JobCodeAUTH    ExecutePaymentOK3JobCode = "AUTH"
	ExecutePaymentOK3JobCodeCAPTURE ExecutePaymentOK3JobCode = "CAPTURE"
)

// AllValues returns all ExecutePaymentOK3JobCode values.
func (ExecutePaymentOK3JobCode) AllValues() []ExecutePaymentOK3JobCode {
	return []ExecutePaymentOK3JobCode{
		ExecutePaymentOK3JobCodeAUTH,
		ExecutePaymentOK3JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK3JobCode) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK3JobCodeAUTH:
		return []byte(s), nil
	case ExecutePaymentOK3JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK3JobCode) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK3JobCode(data) {
	case ExecutePaymentOK3JobCodeAUTH:
		*s = ExecutePaymentOK3JobCodeAUTH
		return nil
	case ExecutePaymentOK3JobCodeCAPTURE:
		*s = ExecutePaymentOK3JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentOK3PayType string

const (
	ExecutePaymentOK3PayTypeCard           ExecutePaymentOK3PayType = "Card"
	ExecutePaymentOK3PayTypeKonbini        ExecutePaymentOK3PayType = "Konbini"
	ExecutePaymentOK3PayTypePaypay         ExecutePaymentOK3PayType = "Paypay"
	ExecutePaymentOK3PayTypeApplepay       ExecutePaymentOK3PayType = "Applepay"
	ExecutePaymentOK3PayTypeDirectdebit    ExecutePaymentOK3PayType = "Directdebit"
	ExecutePaymentOK3PayTypeVirtualaccount ExecutePaymentOK3PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentOK3PayType values.
func (ExecutePaymentOK3PayType) AllValues() []ExecutePaymentOK3PayType {
	return []ExecutePaymentOK3PayType{
		ExecutePaymentOK3PayTypeCard,
		ExecutePaymentOK3PayTypeKonbini,
		ExecutePaymentOK3PayTypePaypay,
		ExecutePaymentOK3PayTypeApplepay,
		ExecutePaymentOK3PayTypeDirectdebit,
		ExecutePaymentOK3PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK3PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK3PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentOK3PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentOK3PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentOK3PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentOK3PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentOK3PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK3PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK3PayType(data) {
	case ExecutePaymentOK3PayTypeCard:
		*s = ExecutePaymentOK3PayTypeCard
		return nil
	case ExecutePaymentOK3PayTypeKonbini:
		*s = ExecutePaymentOK3PayTypeKonbini
		return nil
	case ExecutePaymentOK3PayTypePaypay:
		*s = ExecutePaymentOK3PayTypePaypay
		return nil
	case ExecutePaymentOK3PayTypeApplepay:
		*s = ExecutePaymentOK3PayTypeApplepay
		return nil
	case ExecutePaymentOK3PayTypeDirectdebit:
		*s = ExecutePaymentOK3PayTypeDirectdebit
		return nil
	case ExecutePaymentOK3PayTypeVirtualaccount:
		*s = ExecutePaymentOK3PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクト先種別\
// `redirect_url`の種別
// - `1`： Webページ／Webアプリケーション
// - `2`： ネイティブアプリ.
type ExecutePaymentOK3RedirectType string

const (
	ExecutePaymentOK3RedirectType1 ExecutePaymentOK3RedirectType = "1"
	ExecutePaymentOK3RedirectType2 ExecutePaymentOK3RedirectType = "2"
)

// AllValues returns all ExecutePaymentOK3RedirectType values.
func (ExecutePaymentOK3RedirectType) AllValues() []ExecutePaymentOK3RedirectType {
	return []ExecutePaymentOK3RedirectType{
		ExecutePaymentOK3RedirectType1,
		ExecutePaymentOK3RedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK3RedirectType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK3RedirectType1:
		return []byte(s), nil
	case ExecutePaymentOK3RedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK3RedirectType) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK3RedirectType(data) {
	case ExecutePaymentOK3RedirectType1:
		*s = ExecutePaymentOK3RedirectType1
		return nil
	case ExecutePaymentOK3RedirectType2:
		*s = ExecutePaymentOK3RedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ExecutePaymentOK3Status string

const (
	ExecutePaymentOK3StatusUNPROCESSED             ExecutePaymentOK3Status = "UNPROCESSED"
	ExecutePaymentOK3StatusCHECKED                 ExecutePaymentOK3Status = "CHECKED"
	ExecutePaymentOK3StatusAUTHORIZED              ExecutePaymentOK3Status = "AUTHORIZED"
	ExecutePaymentOK3StatusAWAITINGCUSTOMERPAYMENT ExecutePaymentOK3Status = "AWAITING_CUSTOMER_PAYMENT"
	ExecutePaymentOK3StatusAWAITINGPAYMENTAPPROVAL ExecutePaymentOK3Status = "AWAITING_PAYMENT_APPROVAL"
	ExecutePaymentOK3StatusCAPTURED                ExecutePaymentOK3Status = "CAPTURED"
	ExecutePaymentOK3StatusCANCELED                ExecutePaymentOK3Status = "CANCELED"
	ExecutePaymentOK3StatusEXPIRED                 ExecutePaymentOK3Status = "EXPIRED"
	ExecutePaymentOK3StatusAUTHENTICATED           ExecutePaymentOK3Status = "AUTHENTICATED"
	ExecutePaymentOK3StatusFAILED                  ExecutePaymentOK3Status = "FAILED"
)

// AllValues returns all ExecutePaymentOK3Status values.
func (ExecutePaymentOK3Status) AllValues() []ExecutePaymentOK3Status {
	return []ExecutePaymentOK3Status{
		ExecutePaymentOK3StatusUNPROCESSED,
		ExecutePaymentOK3StatusCHECKED,
		ExecutePaymentOK3StatusAUTHORIZED,
		ExecutePaymentOK3StatusAWAITINGCUSTOMERPAYMENT,
		ExecutePaymentOK3StatusAWAITINGPAYMENTAPPROVAL,
		ExecutePaymentOK3StatusCAPTURED,
		ExecutePaymentOK3StatusCANCELED,
		ExecutePaymentOK3StatusEXPIRED,
		ExecutePaymentOK3StatusAUTHENTICATED,
		ExecutePaymentOK3StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK3Status) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK3StatusUNPROCESSED:
		return []byte(s), nil
	case ExecutePaymentOK3StatusCHECKED:
		return []byte(s), nil
	case ExecutePaymentOK3StatusAUTHORIZED:
		return []byte(s), nil
	case ExecutePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ExecutePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ExecutePaymentOK3StatusCAPTURED:
		return []byte(s), nil
	case ExecutePaymentOK3StatusCANCELED:
		return []byte(s), nil
	case ExecutePaymentOK3StatusEXPIRED:
		return []byte(s), nil
	case ExecutePaymentOK3StatusAUTHENTICATED:
		return []byte(s), nil
	case ExecutePaymentOK3StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK3Status) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK3Status(data) {
	case ExecutePaymentOK3StatusUNPROCESSED:
		*s = ExecutePaymentOK3StatusUNPROCESSED
		return nil
	case ExecutePaymentOK3StatusCHECKED:
		*s = ExecutePaymentOK3StatusCHECKED
		return nil
	case ExecutePaymentOK3StatusAUTHORIZED:
		*s = ExecutePaymentOK3StatusAUTHORIZED
		return nil
	case ExecutePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK3StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ExecutePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK3StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ExecutePaymentOK3StatusCAPTURED:
		*s = ExecutePaymentOK3StatusCAPTURED
		return nil
	case ExecutePaymentOK3StatusCANCELED:
		*s = ExecutePaymentOK3StatusCANCELED
		return nil
	case ExecutePaymentOK3StatusEXPIRED:
		*s = ExecutePaymentOK3StatusEXPIRED
		return nil
	case ExecutePaymentOK3StatusAUTHENTICATED:
		*s = ExecutePaymentOK3StatusAUTHENTICATED
		return nil
	case ExecutePaymentOK3StatusFAILED:
		*s = ExecutePaymentOK3StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type ExecutePaymentOK4 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType OptExecutePaymentOK4PayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">振替はまだ実行されていません。</span>
	// - `AWAITING_PAYMENT_APPROVAL`: 決済処理待ち<br /><span
	// class="smallText">fincodeおよび金融機関による振替処理を待っています。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">振替が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この振替はキャンセルされました。</span>
	// - `FAILED`: 請求失敗<br /><span
	// class="smallText">何らかの理由により振替に失敗しました。</span>.
	Status     OptExecutePaymentOK4Status        `json:"status"`
	ResultCode OptNilExecutePaymentOK4ResultCode `json:"result_code"`
	// 振替指定日\
	// 振替を行う日を指定します。下記の日付を指定できます。
	// - `yyyy/MM/05`: 5日
	// - `yyyy/MM/06`: 6日
	// - `yyyy/MM/23`: 23日
	// - `yyyy/MM/27`: 27日
	// 形式： `yyyy/MM/dd`\
	// 実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替日」の列で確認できます。.
	TargetDate OptNilString `json:"target_date"`
	// 引き落とし日\
	// 実際に購入者の口座から引き落としが行われた実績日です。\
	// \
	// 形式： `yyyy/MM/dd`.
	WithdrawalDate OptNilString `json:"withdrawal_date"`
	// 請求依頼受付期間 終了日\
	// 振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。.
	RequestAcceptEndDate OptNilString `json:"request_accept_end_date"`
	// 請求結果反映 予定日\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。.
	TransferReturnDate OptNilString `json:"transfer_return_date"`
	// 決済手段ID\
	// この決済に使用された決済手段のIDです。.
	PaymentMethodID OptNilString `json:"payment_method_id"`
	// 金融機関コード\
	// fincodeの口座振替に対応している金融機関のコードのリストは[Docs >
	// 利用可能な金融機関（口座振替）](https://docs.fincode.
	// jp/payment/directdebit/restriction)で参照できます。.
	BankCode OptNilString `json:"bank_code"`
	// 金融機関名.
	BankName OptNilString `json:"bank_name"`
	// 支店コード.
	BranchCode OptNilString `json:"branch_code"`
	// 支店名.
	BranchName OptNilString `json:"branch_name"`
	// ご利用明細表示内容
	// -
	// フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
	// - デフォルト： `ショップ名カナの先頭9文字`
	// ※ 利用可能な記号
	// - 半角：`.`、`(`、`)`、`–`
	// - 全角：`．`、`（`、`）`、`ー`.
	Remarks OptNilString `json:"remarks"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString `json:"subscription_id"`
}

// GetShopID returns the value of ShopID.
func (s *ExecutePaymentOK4) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *ExecutePaymentOK4) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentOK4) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *ExecutePaymentOK4) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *ExecutePaymentOK4) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *ExecutePaymentOK4) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *ExecutePaymentOK4) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *ExecutePaymentOK4) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *ExecutePaymentOK4) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *ExecutePaymentOK4) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentOK4) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *ExecutePaymentOK4) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *ExecutePaymentOK4) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *ExecutePaymentOK4) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *ExecutePaymentOK4) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentOK4) GetPayType() OptExecutePaymentOK4PayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *ExecutePaymentOK4) GetStatus() OptExecutePaymentOK4Status {
	return s.Status
}

// GetResultCode returns the value of ResultCode.
func (s *ExecutePaymentOK4) GetResultCode() OptNilExecutePaymentOK4ResultCode {
	return s.ResultCode
}

// GetTargetDate returns the value of TargetDate.
func (s *ExecutePaymentOK4) GetTargetDate() OptNilString {
	return s.TargetDate
}

// GetWithdrawalDate returns the value of WithdrawalDate.
func (s *ExecutePaymentOK4) GetWithdrawalDate() OptNilString {
	return s.WithdrawalDate
}

// GetRequestAcceptEndDate returns the value of RequestAcceptEndDate.
func (s *ExecutePaymentOK4) GetRequestAcceptEndDate() OptNilString {
	return s.RequestAcceptEndDate
}

// GetTransferReturnDate returns the value of TransferReturnDate.
func (s *ExecutePaymentOK4) GetTransferReturnDate() OptNilString {
	return s.TransferReturnDate
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *ExecutePaymentOK4) GetPaymentMethodID() OptNilString {
	return s.PaymentMethodID
}

// GetBankCode returns the value of BankCode.
func (s *ExecutePaymentOK4) GetBankCode() OptNilString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *ExecutePaymentOK4) GetBankName() OptNilString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *ExecutePaymentOK4) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *ExecutePaymentOK4) GetBranchName() OptNilString {
	return s.BranchName
}

// GetRemarks returns the value of Remarks.
func (s *ExecutePaymentOK4) GetRemarks() OptNilString {
	return s.Remarks
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *ExecutePaymentOK4) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// SetShopID sets the value of ShopID.
func (s *ExecutePaymentOK4) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *ExecutePaymentOK4) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentOK4) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *ExecutePaymentOK4) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *ExecutePaymentOK4) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *ExecutePaymentOK4) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *ExecutePaymentOK4) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *ExecutePaymentOK4) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *ExecutePaymentOK4) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *ExecutePaymentOK4) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentOK4) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *ExecutePaymentOK4) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *ExecutePaymentOK4) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *ExecutePaymentOK4) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *ExecutePaymentOK4) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentOK4) SetPayType(val OptExecutePaymentOK4PayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *ExecutePaymentOK4) SetStatus(val OptExecutePaymentOK4Status) {
	s.Status = val
}

// SetResultCode sets the value of ResultCode.
func (s *ExecutePaymentOK4) SetResultCode(val OptNilExecutePaymentOK4ResultCode) {
	s.ResultCode = val
}

// SetTargetDate sets the value of TargetDate.
func (s *ExecutePaymentOK4) SetTargetDate(val OptNilString) {
	s.TargetDate = val
}

// SetWithdrawalDate sets the value of WithdrawalDate.
func (s *ExecutePaymentOK4) SetWithdrawalDate(val OptNilString) {
	s.WithdrawalDate = val
}

// SetRequestAcceptEndDate sets the value of RequestAcceptEndDate.
func (s *ExecutePaymentOK4) SetRequestAcceptEndDate(val OptNilString) {
	s.RequestAcceptEndDate = val
}

// SetTransferReturnDate sets the value of TransferReturnDate.
func (s *ExecutePaymentOK4) SetTransferReturnDate(val OptNilString) {
	s.TransferReturnDate = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *ExecutePaymentOK4) SetPaymentMethodID(val OptNilString) {
	s.PaymentMethodID = val
}

// SetBankCode sets the value of BankCode.
func (s *ExecutePaymentOK4) SetBankCode(val OptNilString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *ExecutePaymentOK4) SetBankName(val OptNilString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *ExecutePaymentOK4) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *ExecutePaymentOK4) SetBranchName(val OptNilString) {
	s.BranchName = val
}

// SetRemarks sets the value of Remarks.
func (s *ExecutePaymentOK4) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *ExecutePaymentOK4) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentOK4PayType string

const (
	ExecutePaymentOK4PayTypeCard           ExecutePaymentOK4PayType = "Card"
	ExecutePaymentOK4PayTypeKonbini        ExecutePaymentOK4PayType = "Konbini"
	ExecutePaymentOK4PayTypePaypay         ExecutePaymentOK4PayType = "Paypay"
	ExecutePaymentOK4PayTypeApplepay       ExecutePaymentOK4PayType = "Applepay"
	ExecutePaymentOK4PayTypeDirectdebit    ExecutePaymentOK4PayType = "Directdebit"
	ExecutePaymentOK4PayTypeVirtualaccount ExecutePaymentOK4PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentOK4PayType values.
func (ExecutePaymentOK4PayType) AllValues() []ExecutePaymentOK4PayType {
	return []ExecutePaymentOK4PayType{
		ExecutePaymentOK4PayTypeCard,
		ExecutePaymentOK4PayTypeKonbini,
		ExecutePaymentOK4PayTypePaypay,
		ExecutePaymentOK4PayTypeApplepay,
		ExecutePaymentOK4PayTypeDirectdebit,
		ExecutePaymentOK4PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK4PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK4PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentOK4PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentOK4PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentOK4PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentOK4PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentOK4PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK4PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK4PayType(data) {
	case ExecutePaymentOK4PayTypeCard:
		*s = ExecutePaymentOK4PayTypeCard
		return nil
	case ExecutePaymentOK4PayTypeKonbini:
		*s = ExecutePaymentOK4PayTypeKonbini
		return nil
	case ExecutePaymentOK4PayTypePaypay:
		*s = ExecutePaymentOK4PayTypePaypay
		return nil
	case ExecutePaymentOK4PayTypeApplepay:
		*s = ExecutePaymentOK4PayTypeApplepay
		return nil
	case ExecutePaymentOK4PayTypeDirectdebit:
		*s = ExecutePaymentOK4PayTypeDirectdebit
		return nil
	case ExecutePaymentOK4PayTypeVirtualaccount:
		*s = ExecutePaymentOK4PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 振替結果コード
// - `0`: 振替成功<br><span class="smallText">振替が成功しました。</span>
// - `1`: 残高不足（失敗）<br><span
// class="smallText">口座残高の不足により振替に失敗しました。</span>
// - `2`: 預金取引無し（失敗）<br><span
// class="smallText">指定した口座が存在しないなどの理由により振替に失敗しました。</span>
// - `3`: 購入者事由（失敗）<br><span
// class="smallText">購入者による振替取引の停止等により振替に失敗しました。</span>
// - `4`: 依頼書未着・不備（失敗）<br><span
// class="smallText">（依頼書登録）この決済に所定の期日までの口座振替依頼書の提出が確認出来なかったため振替に失敗しました。</span>
// - `8`: ショップ事由（失敗）<br><span
// class="smallText">ショップに起因する事由により振替に失敗しました。詳細はfincodeにお問い合わせください。</span>
// - `9 | E | N`: その他（失敗）<br><span
// class="smallText">その他の理由により振替に失敗しました（通常は発生しません）。詳細はfincodeにお問い合わせください。</span>
// [お問い合わせはこちらのフォームから](https://dashboard.fincode.
// jp/contact)いただけます。.
type ExecutePaymentOK4ResultCode string

const (
	ExecutePaymentOK4ResultCode0 ExecutePaymentOK4ResultCode = "0"
	ExecutePaymentOK4ResultCode1 ExecutePaymentOK4ResultCode = "1"
	ExecutePaymentOK4ResultCode2 ExecutePaymentOK4ResultCode = "2"
	ExecutePaymentOK4ResultCode3 ExecutePaymentOK4ResultCode = "3"
	ExecutePaymentOK4ResultCode4 ExecutePaymentOK4ResultCode = "4"
	ExecutePaymentOK4ResultCode8 ExecutePaymentOK4ResultCode = "8"
	ExecutePaymentOK4ResultCode9 ExecutePaymentOK4ResultCode = "9"
	ExecutePaymentOK4ResultCodeE ExecutePaymentOK4ResultCode = "E"
	ExecutePaymentOK4ResultCodeN ExecutePaymentOK4ResultCode = "N"
)

// AllValues returns all ExecutePaymentOK4ResultCode values.
func (ExecutePaymentOK4ResultCode) AllValues() []ExecutePaymentOK4ResultCode {
	return []ExecutePaymentOK4ResultCode{
		ExecutePaymentOK4ResultCode0,
		ExecutePaymentOK4ResultCode1,
		ExecutePaymentOK4ResultCode2,
		ExecutePaymentOK4ResultCode3,
		ExecutePaymentOK4ResultCode4,
		ExecutePaymentOK4ResultCode8,
		ExecutePaymentOK4ResultCode9,
		ExecutePaymentOK4ResultCodeE,
		ExecutePaymentOK4ResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK4ResultCode) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK4ResultCode0:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCode1:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCode2:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCode3:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCode4:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCode8:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCode9:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCodeE:
		return []byte(s), nil
	case ExecutePaymentOK4ResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK4ResultCode) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK4ResultCode(data) {
	case ExecutePaymentOK4ResultCode0:
		*s = ExecutePaymentOK4ResultCode0
		return nil
	case ExecutePaymentOK4ResultCode1:
		*s = ExecutePaymentOK4ResultCode1
		return nil
	case ExecutePaymentOK4ResultCode2:
		*s = ExecutePaymentOK4ResultCode2
		return nil
	case ExecutePaymentOK4ResultCode3:
		*s = ExecutePaymentOK4ResultCode3
		return nil
	case ExecutePaymentOK4ResultCode4:
		*s = ExecutePaymentOK4ResultCode4
		return nil
	case ExecutePaymentOK4ResultCode8:
		*s = ExecutePaymentOK4ResultCode8
		return nil
	case ExecutePaymentOK4ResultCode9:
		*s = ExecutePaymentOK4ResultCode9
		return nil
	case ExecutePaymentOK4ResultCodeE:
		*s = ExecutePaymentOK4ResultCodeE
		return nil
	case ExecutePaymentOK4ResultCodeN:
		*s = ExecutePaymentOK4ResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type ExecutePaymentOK4Status string

const (
	ExecutePaymentOK4StatusUNPROCESSED             ExecutePaymentOK4Status = "UNPROCESSED"
	ExecutePaymentOK4StatusCHECKED                 ExecutePaymentOK4Status = "CHECKED"
	ExecutePaymentOK4StatusAUTHORIZED              ExecutePaymentOK4Status = "AUTHORIZED"
	ExecutePaymentOK4StatusAWAITINGCUSTOMERPAYMENT ExecutePaymentOK4Status = "AWAITING_CUSTOMER_PAYMENT"
	ExecutePaymentOK4StatusAWAITINGPAYMENTAPPROVAL ExecutePaymentOK4Status = "AWAITING_PAYMENT_APPROVAL"
	ExecutePaymentOK4StatusCAPTURED                ExecutePaymentOK4Status = "CAPTURED"
	ExecutePaymentOK4StatusCANCELED                ExecutePaymentOK4Status = "CANCELED"
	ExecutePaymentOK4StatusEXPIRED                 ExecutePaymentOK4Status = "EXPIRED"
	ExecutePaymentOK4StatusAUTHENTICATED           ExecutePaymentOK4Status = "AUTHENTICATED"
	ExecutePaymentOK4StatusFAILED                  ExecutePaymentOK4Status = "FAILED"
)

// AllValues returns all ExecutePaymentOK4Status values.
func (ExecutePaymentOK4Status) AllValues() []ExecutePaymentOK4Status {
	return []ExecutePaymentOK4Status{
		ExecutePaymentOK4StatusUNPROCESSED,
		ExecutePaymentOK4StatusCHECKED,
		ExecutePaymentOK4StatusAUTHORIZED,
		ExecutePaymentOK4StatusAWAITINGCUSTOMERPAYMENT,
		ExecutePaymentOK4StatusAWAITINGPAYMENTAPPROVAL,
		ExecutePaymentOK4StatusCAPTURED,
		ExecutePaymentOK4StatusCANCELED,
		ExecutePaymentOK4StatusEXPIRED,
		ExecutePaymentOK4StatusAUTHENTICATED,
		ExecutePaymentOK4StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentOK4Status) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentOK4StatusUNPROCESSED:
		return []byte(s), nil
	case ExecutePaymentOK4StatusCHECKED:
		return []byte(s), nil
	case ExecutePaymentOK4StatusAUTHORIZED:
		return []byte(s), nil
	case ExecutePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case ExecutePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case ExecutePaymentOK4StatusCAPTURED:
		return []byte(s), nil
	case ExecutePaymentOK4StatusCANCELED:
		return []byte(s), nil
	case ExecutePaymentOK4StatusEXPIRED:
		return []byte(s), nil
	case ExecutePaymentOK4StatusAUTHENTICATED:
		return []byte(s), nil
	case ExecutePaymentOK4StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentOK4Status) UnmarshalText(data []byte) error {
	switch ExecutePaymentOK4Status(data) {
	case ExecutePaymentOK4StatusUNPROCESSED:
		*s = ExecutePaymentOK4StatusUNPROCESSED
		return nil
	case ExecutePaymentOK4StatusCHECKED:
		*s = ExecutePaymentOK4StatusCHECKED
		return nil
	case ExecutePaymentOK4StatusAUTHORIZED:
		*s = ExecutePaymentOK4StatusAUTHORIZED
		return nil
	case ExecutePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK4StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case ExecutePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK4StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case ExecutePaymentOK4StatusCAPTURED:
		*s = ExecutePaymentOK4StatusCAPTURED
		return nil
	case ExecutePaymentOK4StatusCANCELED:
		*s = ExecutePaymentOK4StatusCANCELED
		return nil
	case ExecutePaymentOK4StatusEXPIRED:
		*s = ExecutePaymentOK4StatusEXPIRED
		return nil
	case ExecutePaymentOK4StatusAUTHENTICATED:
		*s = ExecutePaymentOK4StatusAUTHENTICATED
		return nil
	case ExecutePaymentOK4StatusFAILED:
		*s = ExecutePaymentOK4StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ExecutePaymentReq represents sum type.
type ExecutePaymentReq struct {
	Type               ExecutePaymentReqType // switch on this field
	ExecutePaymentReq0 ExecutePaymentReq0
	ExecutePaymentReq1 ExecutePaymentReq1
	ExecutePaymentReq2 ExecutePaymentReq2
	ExecutePaymentReq3 ExecutePaymentReq3
	ExecutePaymentReq4 ExecutePaymentReq4
}

// ExecutePaymentReqType is oneOf type of ExecutePaymentReq.
type ExecutePaymentReqType string

// Possible values for ExecutePaymentReqType.
const (
	ExecutePaymentReq0ExecutePaymentReq ExecutePaymentReqType = "ExecutePaymentReq0"
	ExecutePaymentReq1ExecutePaymentReq ExecutePaymentReqType = "ExecutePaymentReq1"
	ExecutePaymentReq2ExecutePaymentReq ExecutePaymentReqType = "ExecutePaymentReq2"
	ExecutePaymentReq3ExecutePaymentReq ExecutePaymentReqType = "ExecutePaymentReq3"
	ExecutePaymentReq4ExecutePaymentReq ExecutePaymentReqType = "ExecutePaymentReq4"
)

// IsExecutePaymentReq0 reports whether ExecutePaymentReq is ExecutePaymentReq0.
func (s ExecutePaymentReq) IsExecutePaymentReq0() bool {
	return s.Type == ExecutePaymentReq0ExecutePaymentReq
}

// IsExecutePaymentReq1 reports whether ExecutePaymentReq is ExecutePaymentReq1.
func (s ExecutePaymentReq) IsExecutePaymentReq1() bool {
	return s.Type == ExecutePaymentReq1ExecutePaymentReq
}

// IsExecutePaymentReq2 reports whether ExecutePaymentReq is ExecutePaymentReq2.
func (s ExecutePaymentReq) IsExecutePaymentReq2() bool {
	return s.Type == ExecutePaymentReq2ExecutePaymentReq
}

// IsExecutePaymentReq3 reports whether ExecutePaymentReq is ExecutePaymentReq3.
func (s ExecutePaymentReq) IsExecutePaymentReq3() bool {
	return s.Type == ExecutePaymentReq3ExecutePaymentReq
}

// IsExecutePaymentReq4 reports whether ExecutePaymentReq is ExecutePaymentReq4.
func (s ExecutePaymentReq) IsExecutePaymentReq4() bool {
	return s.Type == ExecutePaymentReq4ExecutePaymentReq
}

// SetExecutePaymentReq0 sets ExecutePaymentReq to ExecutePaymentReq0.
func (s *ExecutePaymentReq) SetExecutePaymentReq0(v ExecutePaymentReq0) {
	s.Type = ExecutePaymentReq0ExecutePaymentReq
	s.ExecutePaymentReq0 = v
}

// GetExecutePaymentReq0 returns ExecutePaymentReq0 and true boolean if ExecutePaymentReq is ExecutePaymentReq0.
func (s ExecutePaymentReq) GetExecutePaymentReq0() (v ExecutePaymentReq0, ok bool) {
	if !s.IsExecutePaymentReq0() {
		return v, false
	}
	return s.ExecutePaymentReq0, true
}

// NewExecutePaymentReq0ExecutePaymentReq returns new ExecutePaymentReq from ExecutePaymentReq0.
func NewExecutePaymentReq0ExecutePaymentReq(v ExecutePaymentReq0) ExecutePaymentReq {
	var s ExecutePaymentReq
	s.SetExecutePaymentReq0(v)
	return s
}

// SetExecutePaymentReq1 sets ExecutePaymentReq to ExecutePaymentReq1.
func (s *ExecutePaymentReq) SetExecutePaymentReq1(v ExecutePaymentReq1) {
	s.Type = ExecutePaymentReq1ExecutePaymentReq
	s.ExecutePaymentReq1 = v
}

// GetExecutePaymentReq1 returns ExecutePaymentReq1 and true boolean if ExecutePaymentReq is ExecutePaymentReq1.
func (s ExecutePaymentReq) GetExecutePaymentReq1() (v ExecutePaymentReq1, ok bool) {
	if !s.IsExecutePaymentReq1() {
		return v, false
	}
	return s.ExecutePaymentReq1, true
}

// NewExecutePaymentReq1ExecutePaymentReq returns new ExecutePaymentReq from ExecutePaymentReq1.
func NewExecutePaymentReq1ExecutePaymentReq(v ExecutePaymentReq1) ExecutePaymentReq {
	var s ExecutePaymentReq
	s.SetExecutePaymentReq1(v)
	return s
}

// SetExecutePaymentReq2 sets ExecutePaymentReq to ExecutePaymentReq2.
func (s *ExecutePaymentReq) SetExecutePaymentReq2(v ExecutePaymentReq2) {
	s.Type = ExecutePaymentReq2ExecutePaymentReq
	s.ExecutePaymentReq2 = v
}

// GetExecutePaymentReq2 returns ExecutePaymentReq2 and true boolean if ExecutePaymentReq is ExecutePaymentReq2.
func (s ExecutePaymentReq) GetExecutePaymentReq2() (v ExecutePaymentReq2, ok bool) {
	if !s.IsExecutePaymentReq2() {
		return v, false
	}
	return s.ExecutePaymentReq2, true
}

// NewExecutePaymentReq2ExecutePaymentReq returns new ExecutePaymentReq from ExecutePaymentReq2.
func NewExecutePaymentReq2ExecutePaymentReq(v ExecutePaymentReq2) ExecutePaymentReq {
	var s ExecutePaymentReq
	s.SetExecutePaymentReq2(v)
	return s
}

// SetExecutePaymentReq3 sets ExecutePaymentReq to ExecutePaymentReq3.
func (s *ExecutePaymentReq) SetExecutePaymentReq3(v ExecutePaymentReq3) {
	s.Type = ExecutePaymentReq3ExecutePaymentReq
	s.ExecutePaymentReq3 = v
}

// GetExecutePaymentReq3 returns ExecutePaymentReq3 and true boolean if ExecutePaymentReq is ExecutePaymentReq3.
func (s ExecutePaymentReq) GetExecutePaymentReq3() (v ExecutePaymentReq3, ok bool) {
	if !s.IsExecutePaymentReq3() {
		return v, false
	}
	return s.ExecutePaymentReq3, true
}

// NewExecutePaymentReq3ExecutePaymentReq returns new ExecutePaymentReq from ExecutePaymentReq3.
func NewExecutePaymentReq3ExecutePaymentReq(v ExecutePaymentReq3) ExecutePaymentReq {
	var s ExecutePaymentReq
	s.SetExecutePaymentReq3(v)
	return s
}

// SetExecutePaymentReq4 sets ExecutePaymentReq to ExecutePaymentReq4.
func (s *ExecutePaymentReq) SetExecutePaymentReq4(v ExecutePaymentReq4) {
	s.Type = ExecutePaymentReq4ExecutePaymentReq
	s.ExecutePaymentReq4 = v
}

// GetExecutePaymentReq4 returns ExecutePaymentReq4 and true boolean if ExecutePaymentReq is ExecutePaymentReq4.
func (s ExecutePaymentReq) GetExecutePaymentReq4() (v ExecutePaymentReq4, ok bool) {
	if !s.IsExecutePaymentReq4() {
		return v, false
	}
	return s.ExecutePaymentReq4, true
}

// NewExecutePaymentReq4ExecutePaymentReq returns new ExecutePaymentReq from ExecutePaymentReq4.
func NewExecutePaymentReq4ExecutePaymentReq(v ExecutePaymentReq4) ExecutePaymentReq {
	var s ExecutePaymentReq
	s.SetExecutePaymentReq4(v)
	return s
}

type ExecutePaymentReq0 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType  ExecutePaymentReq0PayType `json:"pay_type"`
	AccessID string                    `json:"access_id"`
	// カードトークン\
	// `customer_id`と`card_id`を指定しない場合、fincode
	// JSの`tokens`メソッドで取得したトークンをこのフィールドに指定します。.
	Token OptString `json:"token"`
	// 顧客ID\
	// 購入者となる顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
	// カードID\
	// この決済に使用するカードのIDです。指定しない場合、デフォルトカードが使用されます。.
	CardID OptString `json:"card_id"`
	// 支払方法\
	// この決済の`job_code`（処理区分）が`AUTH`または`CAPTURE`であるとき、このフィールドを指定する必要があります。
	// - `1`: 一括払い
	// - `2`: 分割払い
	// - `5`: リボ払い.
	Method                    OptExecutePaymentReq0Method                       `json:"method"`
	PayTimes                  OptNilExecutePaymentReq0PayTimes                  `json:"pay_times"`
	Tds2RetURL                OptNilString                                      `json:"tds2_ret_url"`
	Tds2ChAccChange           OptNilString                                      `json:"tds2_ch_acc_change"`
	Tds2ChAccDate             OptNilString                                      `json:"tds2_ch_acc_date"`
	Tds2ChAccPwChange         OptNilString                                      `json:"tds2_ch_acc_pw_change"`
	Tds2NbPurchaseAccount     OptNilString                                      `json:"tds2_nb_purchase_account"`
	Tds2PaymentAccAge         OptNilString                                      `json:"tds2_payment_acc_age"`
	Tds2ProvisionAttemptsDay  OptNilString                                      `json:"tds2_provision_attempts_day"`
	Tds2ShipAddressUsage      OptNilString                                      `json:"tds2_ship_address_usage"`
	Tds2ShipNameInd           OptNilExecutePaymentReq0Tds2ShipNameInd           `json:"tds2_ship_name_ind"`
	Tds2SuspiciousAccActivity OptNilExecutePaymentReq0Tds2SuspiciousAccActivity `json:"tds2_suspicious_acc_activity"`
	Tds2TxnActivityDay        OptNilString                                      `json:"tds2_txn_activity_day"`
	Tds2TxnActivityYear       OptNilString                                      `json:"tds2_txn_activity_year"`
	Tds2ThreeDsReqAuthData    OptNilString                                      `json:"tds2_three_ds_req_auth_data"`
	Tds2ThreeDsReqAuthMethod  OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod  `json:"tds2_three_ds_req_auth_method"`
	Tds2AddrMatch             OptNilExecutePaymentReq0Tds2AddrMatch             `json:"tds2_addr_match"`
	Tds2BillAddrCountry       OptNilString                                      `json:"tds2_bill_addr_country"`
	Tds2BillAddrState         OptNilString                                      `json:"tds2_bill_addr_state"`
	Tds2BillAddrCity          OptNilString                                      `json:"tds2_bill_addr_city"`
	Tds2BillAddrLine1         OptNilString                                      `json:"tds2_bill_addr_line_1"`
	Tds2BillAddrLine2         OptNilString                                      `json:"tds2_bill_addr_line_2"`
	Tds2BillAddrLine3         OptNilString                                      `json:"tds2_bill_addr_line_3"`
	Tds2BillAddrPostCode      OptNilString                                      `json:"tds2_bill_addr_post_code"`
	Tds2ShipAddrCountry       OptNilString                                      `json:"tds2_ship_addr_country"`
	Tds2ShipAddrState         OptNilString                                      `json:"tds2_ship_addr_state"`
	Tds2ShipAddrCity          OptNilString                                      `json:"tds2_ship_addr_city"`
	Tds2ShipAddrLine1         OptNilString                                      `json:"tds2_ship_addr_line_1"`
	Tds2ShipAddrLine2         OptNilString                                      `json:"tds2_ship_addr_line_2"`
	Tds2ShipAddrLine3         OptNilString                                      `json:"tds2_ship_addr_line_3"`
	Tds2ShipAddrPostCode      OptNilString                                      `json:"tds2_ship_addr_post_code"`
	Tds2ShipInd               OptNilExecutePaymentReq0Tds2ShipInd               `json:"tds2_ship_ind"`
	Tds2DeliveryEmailAddress  OptNilString                                      `json:"tds2_delivery_email_address"`
	Tds2HomePhoneCc           OptNilString                                      `json:"tds2_home_phone_cc"`
	Tds2HomePhoneNo           OptNilString                                      `json:"tds2_home_phone_no"`
	Tds2MobilePhoneCc         OptNilString                                      `json:"tds2_mobile_phone_cc"`
	Tds2MobilePhoneNo         OptNilString                                      `json:"tds2_mobile_phone_no"`
	Tds2WorkPhoneCc           OptNilString                                      `json:"tds2_work_phone_cc"`
	Tds2WorkPhoneNo           OptNilString                                      `json:"tds2_work_phone_no"`
	Tds2DeliveryTimeframe     OptNilExecutePaymentReq0Tds2DeliveryTimeframe     `json:"tds2_delivery_timeframe"`
	Tds2PreOrderDate          OptNilString                                      `json:"tds2_pre_order_date"`
	Tds2PreOrderPurchaseInd   OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd   `json:"tds2_pre_order_purchase_ind"`
	Tds2ReorderItemsInd       OptNilExecutePaymentReq0Tds2ReorderItemsInd       `json:"tds2_reorder_items_ind"`
	Tds2RecurringExpiry       OptNilString                                      `json:"tds2_recurring_expiry"`
	Tds2RecurringFrequency    OptNilString                                      `json:"tds2_recurring_frequency"`
	Tds2GiftCardAmount        OptNilString                                      `json:"tds2_gift_card_amount"`
	Tds2GiftCardCount         OptNilString                                      `json:"tds2_gift_card_count"`
	Tds2GiftCardCurr          OptNilString                                      `json:"tds2_gift_card_curr"`
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentReq0) GetPayType() ExecutePaymentReq0PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentReq0) GetAccessID() string {
	return s.AccessID
}

// GetToken returns the value of Token.
func (s *ExecutePaymentReq0) GetToken() OptString {
	return s.Token
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentReq0) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *ExecutePaymentReq0) GetCardID() OptString {
	return s.CardID
}

// GetMethod returns the value of Method.
func (s *ExecutePaymentReq0) GetMethod() OptExecutePaymentReq0Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *ExecutePaymentReq0) GetPayTimes() OptNilExecutePaymentReq0PayTimes {
	return s.PayTimes
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *ExecutePaymentReq0) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2ChAccChange returns the value of Tds2ChAccChange.
func (s *ExecutePaymentReq0) GetTds2ChAccChange() OptNilString {
	return s.Tds2ChAccChange
}

// GetTds2ChAccDate returns the value of Tds2ChAccDate.
func (s *ExecutePaymentReq0) GetTds2ChAccDate() OptNilString {
	return s.Tds2ChAccDate
}

// GetTds2ChAccPwChange returns the value of Tds2ChAccPwChange.
func (s *ExecutePaymentReq0) GetTds2ChAccPwChange() OptNilString {
	return s.Tds2ChAccPwChange
}

// GetTds2NbPurchaseAccount returns the value of Tds2NbPurchaseAccount.
func (s *ExecutePaymentReq0) GetTds2NbPurchaseAccount() OptNilString {
	return s.Tds2NbPurchaseAccount
}

// GetTds2PaymentAccAge returns the value of Tds2PaymentAccAge.
func (s *ExecutePaymentReq0) GetTds2PaymentAccAge() OptNilString {
	return s.Tds2PaymentAccAge
}

// GetTds2ProvisionAttemptsDay returns the value of Tds2ProvisionAttemptsDay.
func (s *ExecutePaymentReq0) GetTds2ProvisionAttemptsDay() OptNilString {
	return s.Tds2ProvisionAttemptsDay
}

// GetTds2ShipAddressUsage returns the value of Tds2ShipAddressUsage.
func (s *ExecutePaymentReq0) GetTds2ShipAddressUsage() OptNilString {
	return s.Tds2ShipAddressUsage
}

// GetTds2ShipNameInd returns the value of Tds2ShipNameInd.
func (s *ExecutePaymentReq0) GetTds2ShipNameInd() OptNilExecutePaymentReq0Tds2ShipNameInd {
	return s.Tds2ShipNameInd
}

// GetTds2SuspiciousAccActivity returns the value of Tds2SuspiciousAccActivity.
func (s *ExecutePaymentReq0) GetTds2SuspiciousAccActivity() OptNilExecutePaymentReq0Tds2SuspiciousAccActivity {
	return s.Tds2SuspiciousAccActivity
}

// GetTds2TxnActivityDay returns the value of Tds2TxnActivityDay.
func (s *ExecutePaymentReq0) GetTds2TxnActivityDay() OptNilString {
	return s.Tds2TxnActivityDay
}

// GetTds2TxnActivityYear returns the value of Tds2TxnActivityYear.
func (s *ExecutePaymentReq0) GetTds2TxnActivityYear() OptNilString {
	return s.Tds2TxnActivityYear
}

// GetTds2ThreeDsReqAuthData returns the value of Tds2ThreeDsReqAuthData.
func (s *ExecutePaymentReq0) GetTds2ThreeDsReqAuthData() OptNilString {
	return s.Tds2ThreeDsReqAuthData
}

// GetTds2ThreeDsReqAuthMethod returns the value of Tds2ThreeDsReqAuthMethod.
func (s *ExecutePaymentReq0) GetTds2ThreeDsReqAuthMethod() OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod {
	return s.Tds2ThreeDsReqAuthMethod
}

// GetTds2AddrMatch returns the value of Tds2AddrMatch.
func (s *ExecutePaymentReq0) GetTds2AddrMatch() OptNilExecutePaymentReq0Tds2AddrMatch {
	return s.Tds2AddrMatch
}

// GetTds2BillAddrCountry returns the value of Tds2BillAddrCountry.
func (s *ExecutePaymentReq0) GetTds2BillAddrCountry() OptNilString {
	return s.Tds2BillAddrCountry
}

// GetTds2BillAddrState returns the value of Tds2BillAddrState.
func (s *ExecutePaymentReq0) GetTds2BillAddrState() OptNilString {
	return s.Tds2BillAddrState
}

// GetTds2BillAddrCity returns the value of Tds2BillAddrCity.
func (s *ExecutePaymentReq0) GetTds2BillAddrCity() OptNilString {
	return s.Tds2BillAddrCity
}

// GetTds2BillAddrLine1 returns the value of Tds2BillAddrLine1.
func (s *ExecutePaymentReq0) GetTds2BillAddrLine1() OptNilString {
	return s.Tds2BillAddrLine1
}

// GetTds2BillAddrLine2 returns the value of Tds2BillAddrLine2.
func (s *ExecutePaymentReq0) GetTds2BillAddrLine2() OptNilString {
	return s.Tds2BillAddrLine2
}

// GetTds2BillAddrLine3 returns the value of Tds2BillAddrLine3.
func (s *ExecutePaymentReq0) GetTds2BillAddrLine3() OptNilString {
	return s.Tds2BillAddrLine3
}

// GetTds2BillAddrPostCode returns the value of Tds2BillAddrPostCode.
func (s *ExecutePaymentReq0) GetTds2BillAddrPostCode() OptNilString {
	return s.Tds2BillAddrPostCode
}

// GetTds2ShipAddrCountry returns the value of Tds2ShipAddrCountry.
func (s *ExecutePaymentReq0) GetTds2ShipAddrCountry() OptNilString {
	return s.Tds2ShipAddrCountry
}

// GetTds2ShipAddrState returns the value of Tds2ShipAddrState.
func (s *ExecutePaymentReq0) GetTds2ShipAddrState() OptNilString {
	return s.Tds2ShipAddrState
}

// GetTds2ShipAddrCity returns the value of Tds2ShipAddrCity.
func (s *ExecutePaymentReq0) GetTds2ShipAddrCity() OptNilString {
	return s.Tds2ShipAddrCity
}

// GetTds2ShipAddrLine1 returns the value of Tds2ShipAddrLine1.
func (s *ExecutePaymentReq0) GetTds2ShipAddrLine1() OptNilString {
	return s.Tds2ShipAddrLine1
}

// GetTds2ShipAddrLine2 returns the value of Tds2ShipAddrLine2.
func (s *ExecutePaymentReq0) GetTds2ShipAddrLine2() OptNilString {
	return s.Tds2ShipAddrLine2
}

// GetTds2ShipAddrLine3 returns the value of Tds2ShipAddrLine3.
func (s *ExecutePaymentReq0) GetTds2ShipAddrLine3() OptNilString {
	return s.Tds2ShipAddrLine3
}

// GetTds2ShipAddrPostCode returns the value of Tds2ShipAddrPostCode.
func (s *ExecutePaymentReq0) GetTds2ShipAddrPostCode() OptNilString {
	return s.Tds2ShipAddrPostCode
}

// GetTds2ShipInd returns the value of Tds2ShipInd.
func (s *ExecutePaymentReq0) GetTds2ShipInd() OptNilExecutePaymentReq0Tds2ShipInd {
	return s.Tds2ShipInd
}

// GetTds2DeliveryEmailAddress returns the value of Tds2DeliveryEmailAddress.
func (s *ExecutePaymentReq0) GetTds2DeliveryEmailAddress() OptNilString {
	return s.Tds2DeliveryEmailAddress
}

// GetTds2HomePhoneCc returns the value of Tds2HomePhoneCc.
func (s *ExecutePaymentReq0) GetTds2HomePhoneCc() OptNilString {
	return s.Tds2HomePhoneCc
}

// GetTds2HomePhoneNo returns the value of Tds2HomePhoneNo.
func (s *ExecutePaymentReq0) GetTds2HomePhoneNo() OptNilString {
	return s.Tds2HomePhoneNo
}

// GetTds2MobilePhoneCc returns the value of Tds2MobilePhoneCc.
func (s *ExecutePaymentReq0) GetTds2MobilePhoneCc() OptNilString {
	return s.Tds2MobilePhoneCc
}

// GetTds2MobilePhoneNo returns the value of Tds2MobilePhoneNo.
func (s *ExecutePaymentReq0) GetTds2MobilePhoneNo() OptNilString {
	return s.Tds2MobilePhoneNo
}

// GetTds2WorkPhoneCc returns the value of Tds2WorkPhoneCc.
func (s *ExecutePaymentReq0) GetTds2WorkPhoneCc() OptNilString {
	return s.Tds2WorkPhoneCc
}

// GetTds2WorkPhoneNo returns the value of Tds2WorkPhoneNo.
func (s *ExecutePaymentReq0) GetTds2WorkPhoneNo() OptNilString {
	return s.Tds2WorkPhoneNo
}

// GetTds2DeliveryTimeframe returns the value of Tds2DeliveryTimeframe.
func (s *ExecutePaymentReq0) GetTds2DeliveryTimeframe() OptNilExecutePaymentReq0Tds2DeliveryTimeframe {
	return s.Tds2DeliveryTimeframe
}

// GetTds2PreOrderDate returns the value of Tds2PreOrderDate.
func (s *ExecutePaymentReq0) GetTds2PreOrderDate() OptNilString {
	return s.Tds2PreOrderDate
}

// GetTds2PreOrderPurchaseInd returns the value of Tds2PreOrderPurchaseInd.
func (s *ExecutePaymentReq0) GetTds2PreOrderPurchaseInd() OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd {
	return s.Tds2PreOrderPurchaseInd
}

// GetTds2ReorderItemsInd returns the value of Tds2ReorderItemsInd.
func (s *ExecutePaymentReq0) GetTds2ReorderItemsInd() OptNilExecutePaymentReq0Tds2ReorderItemsInd {
	return s.Tds2ReorderItemsInd
}

// GetTds2RecurringExpiry returns the value of Tds2RecurringExpiry.
func (s *ExecutePaymentReq0) GetTds2RecurringExpiry() OptNilString {
	return s.Tds2RecurringExpiry
}

// GetTds2RecurringFrequency returns the value of Tds2RecurringFrequency.
func (s *ExecutePaymentReq0) GetTds2RecurringFrequency() OptNilString {
	return s.Tds2RecurringFrequency
}

// GetTds2GiftCardAmount returns the value of Tds2GiftCardAmount.
func (s *ExecutePaymentReq0) GetTds2GiftCardAmount() OptNilString {
	return s.Tds2GiftCardAmount
}

// GetTds2GiftCardCount returns the value of Tds2GiftCardCount.
func (s *ExecutePaymentReq0) GetTds2GiftCardCount() OptNilString {
	return s.Tds2GiftCardCount
}

// GetTds2GiftCardCurr returns the value of Tds2GiftCardCurr.
func (s *ExecutePaymentReq0) GetTds2GiftCardCurr() OptNilString {
	return s.Tds2GiftCardCurr
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentReq0) SetPayType(val ExecutePaymentReq0PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentReq0) SetAccessID(val string) {
	s.AccessID = val
}

// SetToken sets the value of Token.
func (s *ExecutePaymentReq0) SetToken(val OptString) {
	s.Token = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentReq0) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *ExecutePaymentReq0) SetCardID(val OptString) {
	s.CardID = val
}

// SetMethod sets the value of Method.
func (s *ExecutePaymentReq0) SetMethod(val OptExecutePaymentReq0Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *ExecutePaymentReq0) SetPayTimes(val OptNilExecutePaymentReq0PayTimes) {
	s.PayTimes = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *ExecutePaymentReq0) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2ChAccChange sets the value of Tds2ChAccChange.
func (s *ExecutePaymentReq0) SetTds2ChAccChange(val OptNilString) {
	s.Tds2ChAccChange = val
}

// SetTds2ChAccDate sets the value of Tds2ChAccDate.
func (s *ExecutePaymentReq0) SetTds2ChAccDate(val OptNilString) {
	s.Tds2ChAccDate = val
}

// SetTds2ChAccPwChange sets the value of Tds2ChAccPwChange.
func (s *ExecutePaymentReq0) SetTds2ChAccPwChange(val OptNilString) {
	s.Tds2ChAccPwChange = val
}

// SetTds2NbPurchaseAccount sets the value of Tds2NbPurchaseAccount.
func (s *ExecutePaymentReq0) SetTds2NbPurchaseAccount(val OptNilString) {
	s.Tds2NbPurchaseAccount = val
}

// SetTds2PaymentAccAge sets the value of Tds2PaymentAccAge.
func (s *ExecutePaymentReq0) SetTds2PaymentAccAge(val OptNilString) {
	s.Tds2PaymentAccAge = val
}

// SetTds2ProvisionAttemptsDay sets the value of Tds2ProvisionAttemptsDay.
func (s *ExecutePaymentReq0) SetTds2ProvisionAttemptsDay(val OptNilString) {
	s.Tds2ProvisionAttemptsDay = val
}

// SetTds2ShipAddressUsage sets the value of Tds2ShipAddressUsage.
func (s *ExecutePaymentReq0) SetTds2ShipAddressUsage(val OptNilString) {
	s.Tds2ShipAddressUsage = val
}

// SetTds2ShipNameInd sets the value of Tds2ShipNameInd.
func (s *ExecutePaymentReq0) SetTds2ShipNameInd(val OptNilExecutePaymentReq0Tds2ShipNameInd) {
	s.Tds2ShipNameInd = val
}

// SetTds2SuspiciousAccActivity sets the value of Tds2SuspiciousAccActivity.
func (s *ExecutePaymentReq0) SetTds2SuspiciousAccActivity(val OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) {
	s.Tds2SuspiciousAccActivity = val
}

// SetTds2TxnActivityDay sets the value of Tds2TxnActivityDay.
func (s *ExecutePaymentReq0) SetTds2TxnActivityDay(val OptNilString) {
	s.Tds2TxnActivityDay = val
}

// SetTds2TxnActivityYear sets the value of Tds2TxnActivityYear.
func (s *ExecutePaymentReq0) SetTds2TxnActivityYear(val OptNilString) {
	s.Tds2TxnActivityYear = val
}

// SetTds2ThreeDsReqAuthData sets the value of Tds2ThreeDsReqAuthData.
func (s *ExecutePaymentReq0) SetTds2ThreeDsReqAuthData(val OptNilString) {
	s.Tds2ThreeDsReqAuthData = val
}

// SetTds2ThreeDsReqAuthMethod sets the value of Tds2ThreeDsReqAuthMethod.
func (s *ExecutePaymentReq0) SetTds2ThreeDsReqAuthMethod(val OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) {
	s.Tds2ThreeDsReqAuthMethod = val
}

// SetTds2AddrMatch sets the value of Tds2AddrMatch.
func (s *ExecutePaymentReq0) SetTds2AddrMatch(val OptNilExecutePaymentReq0Tds2AddrMatch) {
	s.Tds2AddrMatch = val
}

// SetTds2BillAddrCountry sets the value of Tds2BillAddrCountry.
func (s *ExecutePaymentReq0) SetTds2BillAddrCountry(val OptNilString) {
	s.Tds2BillAddrCountry = val
}

// SetTds2BillAddrState sets the value of Tds2BillAddrState.
func (s *ExecutePaymentReq0) SetTds2BillAddrState(val OptNilString) {
	s.Tds2BillAddrState = val
}

// SetTds2BillAddrCity sets the value of Tds2BillAddrCity.
func (s *ExecutePaymentReq0) SetTds2BillAddrCity(val OptNilString) {
	s.Tds2BillAddrCity = val
}

// SetTds2BillAddrLine1 sets the value of Tds2BillAddrLine1.
func (s *ExecutePaymentReq0) SetTds2BillAddrLine1(val OptNilString) {
	s.Tds2BillAddrLine1 = val
}

// SetTds2BillAddrLine2 sets the value of Tds2BillAddrLine2.
func (s *ExecutePaymentReq0) SetTds2BillAddrLine2(val OptNilString) {
	s.Tds2BillAddrLine2 = val
}

// SetTds2BillAddrLine3 sets the value of Tds2BillAddrLine3.
func (s *ExecutePaymentReq0) SetTds2BillAddrLine3(val OptNilString) {
	s.Tds2BillAddrLine3 = val
}

// SetTds2BillAddrPostCode sets the value of Tds2BillAddrPostCode.
func (s *ExecutePaymentReq0) SetTds2BillAddrPostCode(val OptNilString) {
	s.Tds2BillAddrPostCode = val
}

// SetTds2ShipAddrCountry sets the value of Tds2ShipAddrCountry.
func (s *ExecutePaymentReq0) SetTds2ShipAddrCountry(val OptNilString) {
	s.Tds2ShipAddrCountry = val
}

// SetTds2ShipAddrState sets the value of Tds2ShipAddrState.
func (s *ExecutePaymentReq0) SetTds2ShipAddrState(val OptNilString) {
	s.Tds2ShipAddrState = val
}

// SetTds2ShipAddrCity sets the value of Tds2ShipAddrCity.
func (s *ExecutePaymentReq0) SetTds2ShipAddrCity(val OptNilString) {
	s.Tds2ShipAddrCity = val
}

// SetTds2ShipAddrLine1 sets the value of Tds2ShipAddrLine1.
func (s *ExecutePaymentReq0) SetTds2ShipAddrLine1(val OptNilString) {
	s.Tds2ShipAddrLine1 = val
}

// SetTds2ShipAddrLine2 sets the value of Tds2ShipAddrLine2.
func (s *ExecutePaymentReq0) SetTds2ShipAddrLine2(val OptNilString) {
	s.Tds2ShipAddrLine2 = val
}

// SetTds2ShipAddrLine3 sets the value of Tds2ShipAddrLine3.
func (s *ExecutePaymentReq0) SetTds2ShipAddrLine3(val OptNilString) {
	s.Tds2ShipAddrLine3 = val
}

// SetTds2ShipAddrPostCode sets the value of Tds2ShipAddrPostCode.
func (s *ExecutePaymentReq0) SetTds2ShipAddrPostCode(val OptNilString) {
	s.Tds2ShipAddrPostCode = val
}

// SetTds2ShipInd sets the value of Tds2ShipInd.
func (s *ExecutePaymentReq0) SetTds2ShipInd(val OptNilExecutePaymentReq0Tds2ShipInd) {
	s.Tds2ShipInd = val
}

// SetTds2DeliveryEmailAddress sets the value of Tds2DeliveryEmailAddress.
func (s *ExecutePaymentReq0) SetTds2DeliveryEmailAddress(val OptNilString) {
	s.Tds2DeliveryEmailAddress = val
}

// SetTds2HomePhoneCc sets the value of Tds2HomePhoneCc.
func (s *ExecutePaymentReq0) SetTds2HomePhoneCc(val OptNilString) {
	s.Tds2HomePhoneCc = val
}

// SetTds2HomePhoneNo sets the value of Tds2HomePhoneNo.
func (s *ExecutePaymentReq0) SetTds2HomePhoneNo(val OptNilString) {
	s.Tds2HomePhoneNo = val
}

// SetTds2MobilePhoneCc sets the value of Tds2MobilePhoneCc.
func (s *ExecutePaymentReq0) SetTds2MobilePhoneCc(val OptNilString) {
	s.Tds2MobilePhoneCc = val
}

// SetTds2MobilePhoneNo sets the value of Tds2MobilePhoneNo.
func (s *ExecutePaymentReq0) SetTds2MobilePhoneNo(val OptNilString) {
	s.Tds2MobilePhoneNo = val
}

// SetTds2WorkPhoneCc sets the value of Tds2WorkPhoneCc.
func (s *ExecutePaymentReq0) SetTds2WorkPhoneCc(val OptNilString) {
	s.Tds2WorkPhoneCc = val
}

// SetTds2WorkPhoneNo sets the value of Tds2WorkPhoneNo.
func (s *ExecutePaymentReq0) SetTds2WorkPhoneNo(val OptNilString) {
	s.Tds2WorkPhoneNo = val
}

// SetTds2DeliveryTimeframe sets the value of Tds2DeliveryTimeframe.
func (s *ExecutePaymentReq0) SetTds2DeliveryTimeframe(val OptNilExecutePaymentReq0Tds2DeliveryTimeframe) {
	s.Tds2DeliveryTimeframe = val
}

// SetTds2PreOrderDate sets the value of Tds2PreOrderDate.
func (s *ExecutePaymentReq0) SetTds2PreOrderDate(val OptNilString) {
	s.Tds2PreOrderDate = val
}

// SetTds2PreOrderPurchaseInd sets the value of Tds2PreOrderPurchaseInd.
func (s *ExecutePaymentReq0) SetTds2PreOrderPurchaseInd(val OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) {
	s.Tds2PreOrderPurchaseInd = val
}

// SetTds2ReorderItemsInd sets the value of Tds2ReorderItemsInd.
func (s *ExecutePaymentReq0) SetTds2ReorderItemsInd(val OptNilExecutePaymentReq0Tds2ReorderItemsInd) {
	s.Tds2ReorderItemsInd = val
}

// SetTds2RecurringExpiry sets the value of Tds2RecurringExpiry.
func (s *ExecutePaymentReq0) SetTds2RecurringExpiry(val OptNilString) {
	s.Tds2RecurringExpiry = val
}

// SetTds2RecurringFrequency sets the value of Tds2RecurringFrequency.
func (s *ExecutePaymentReq0) SetTds2RecurringFrequency(val OptNilString) {
	s.Tds2RecurringFrequency = val
}

// SetTds2GiftCardAmount sets the value of Tds2GiftCardAmount.
func (s *ExecutePaymentReq0) SetTds2GiftCardAmount(val OptNilString) {
	s.Tds2GiftCardAmount = val
}

// SetTds2GiftCardCount sets the value of Tds2GiftCardCount.
func (s *ExecutePaymentReq0) SetTds2GiftCardCount(val OptNilString) {
	s.Tds2GiftCardCount = val
}

// SetTds2GiftCardCurr sets the value of Tds2GiftCardCurr.
func (s *ExecutePaymentReq0) SetTds2GiftCardCurr(val OptNilString) {
	s.Tds2GiftCardCurr = val
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type ExecutePaymentReq0Method string

const (
	ExecutePaymentReq0Method1 ExecutePaymentReq0Method = "1"
	ExecutePaymentReq0Method2 ExecutePaymentReq0Method = "2"
	ExecutePaymentReq0Method5 ExecutePaymentReq0Method = "5"
)

// AllValues returns all ExecutePaymentReq0Method values.
func (ExecutePaymentReq0Method) AllValues() []ExecutePaymentReq0Method {
	return []ExecutePaymentReq0Method{
		ExecutePaymentReq0Method1,
		ExecutePaymentReq0Method2,
		ExecutePaymentReq0Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Method) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Method1:
		return []byte(s), nil
	case ExecutePaymentReq0Method2:
		return []byte(s), nil
	case ExecutePaymentReq0Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Method) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Method(data) {
	case ExecutePaymentReq0Method1:
		*s = ExecutePaymentReq0Method1
		return nil
	case ExecutePaymentReq0Method2:
		*s = ExecutePaymentReq0Method2
		return nil
	case ExecutePaymentReq0Method5:
		*s = ExecutePaymentReq0Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type ExecutePaymentReq0PayTimes string

const (
	ExecutePaymentReq0PayTimes3  ExecutePaymentReq0PayTimes = "3"
	ExecutePaymentReq0PayTimes5  ExecutePaymentReq0PayTimes = "5"
	ExecutePaymentReq0PayTimes6  ExecutePaymentReq0PayTimes = "6"
	ExecutePaymentReq0PayTimes10 ExecutePaymentReq0PayTimes = "10"
	ExecutePaymentReq0PayTimes12 ExecutePaymentReq0PayTimes = "12"
	ExecutePaymentReq0PayTimes15 ExecutePaymentReq0PayTimes = "15"
	ExecutePaymentReq0PayTimes18 ExecutePaymentReq0PayTimes = "18"
	ExecutePaymentReq0PayTimes20 ExecutePaymentReq0PayTimes = "20"
	ExecutePaymentReq0PayTimes24 ExecutePaymentReq0PayTimes = "24"
)

// AllValues returns all ExecutePaymentReq0PayTimes values.
func (ExecutePaymentReq0PayTimes) AllValues() []ExecutePaymentReq0PayTimes {
	return []ExecutePaymentReq0PayTimes{
		ExecutePaymentReq0PayTimes3,
		ExecutePaymentReq0PayTimes5,
		ExecutePaymentReq0PayTimes6,
		ExecutePaymentReq0PayTimes10,
		ExecutePaymentReq0PayTimes12,
		ExecutePaymentReq0PayTimes15,
		ExecutePaymentReq0PayTimes18,
		ExecutePaymentReq0PayTimes20,
		ExecutePaymentReq0PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0PayTimes3:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes5:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes6:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes10:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes12:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes15:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes18:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes20:
		return []byte(s), nil
	case ExecutePaymentReq0PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0PayTimes) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0PayTimes(data) {
	case ExecutePaymentReq0PayTimes3:
		*s = ExecutePaymentReq0PayTimes3
		return nil
	case ExecutePaymentReq0PayTimes5:
		*s = ExecutePaymentReq0PayTimes5
		return nil
	case ExecutePaymentReq0PayTimes6:
		*s = ExecutePaymentReq0PayTimes6
		return nil
	case ExecutePaymentReq0PayTimes10:
		*s = ExecutePaymentReq0PayTimes10
		return nil
	case ExecutePaymentReq0PayTimes12:
		*s = ExecutePaymentReq0PayTimes12
		return nil
	case ExecutePaymentReq0PayTimes15:
		*s = ExecutePaymentReq0PayTimes15
		return nil
	case ExecutePaymentReq0PayTimes18:
		*s = ExecutePaymentReq0PayTimes18
		return nil
	case ExecutePaymentReq0PayTimes20:
		*s = ExecutePaymentReq0PayTimes20
		return nil
	case ExecutePaymentReq0PayTimes24:
		*s = ExecutePaymentReq0PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentReq0PayType string

const (
	ExecutePaymentReq0PayTypeCard           ExecutePaymentReq0PayType = "Card"
	ExecutePaymentReq0PayTypeKonbini        ExecutePaymentReq0PayType = "Konbini"
	ExecutePaymentReq0PayTypePaypay         ExecutePaymentReq0PayType = "Paypay"
	ExecutePaymentReq0PayTypeApplepay       ExecutePaymentReq0PayType = "Applepay"
	ExecutePaymentReq0PayTypeDirectdebit    ExecutePaymentReq0PayType = "Directdebit"
	ExecutePaymentReq0PayTypeVirtualaccount ExecutePaymentReq0PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentReq0PayType values.
func (ExecutePaymentReq0PayType) AllValues() []ExecutePaymentReq0PayType {
	return []ExecutePaymentReq0PayType{
		ExecutePaymentReq0PayTypeCard,
		ExecutePaymentReq0PayTypeKonbini,
		ExecutePaymentReq0PayTypePaypay,
		ExecutePaymentReq0PayTypeApplepay,
		ExecutePaymentReq0PayTypeDirectdebit,
		ExecutePaymentReq0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentReq0PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentReq0PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentReq0PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentReq0PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentReq0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0PayType(data) {
	case ExecutePaymentReq0PayTypeCard:
		*s = ExecutePaymentReq0PayTypeCard
		return nil
	case ExecutePaymentReq0PayTypeKonbini:
		*s = ExecutePaymentReq0PayTypeKonbini
		return nil
	case ExecutePaymentReq0PayTypePaypay:
		*s = ExecutePaymentReq0PayTypePaypay
		return nil
	case ExecutePaymentReq0PayTypeApplepay:
		*s = ExecutePaymentReq0PayTypeApplepay
		return nil
	case ExecutePaymentReq0PayTypeDirectdebit:
		*s = ExecutePaymentReq0PayTypeDirectdebit
		return nil
	case ExecutePaymentReq0PayTypeVirtualaccount:
		*s = ExecutePaymentReq0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 請求先住所と配送先住所が一致しているか否か
// - `Y`: 住所は一致している
// - `N`: 住所は一致していない.
type ExecutePaymentReq0Tds2AddrMatch string

const (
	ExecutePaymentReq0Tds2AddrMatchY ExecutePaymentReq0Tds2AddrMatch = "Y"
	ExecutePaymentReq0Tds2AddrMatchN ExecutePaymentReq0Tds2AddrMatch = "N"
)

// AllValues returns all ExecutePaymentReq0Tds2AddrMatch values.
func (ExecutePaymentReq0Tds2AddrMatch) AllValues() []ExecutePaymentReq0Tds2AddrMatch {
	return []ExecutePaymentReq0Tds2AddrMatch{
		ExecutePaymentReq0Tds2AddrMatchY,
		ExecutePaymentReq0Tds2AddrMatchN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2AddrMatch) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2AddrMatchY:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2AddrMatchN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2AddrMatch) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2AddrMatch(data) {
	case ExecutePaymentReq0Tds2AddrMatchY:
		*s = ExecutePaymentReq0Tds2AddrMatchY
		return nil
	case ExecutePaymentReq0Tds2AddrMatchN:
		*s = ExecutePaymentReq0Tds2AddrMatchN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品納品時間枠
// - `01`: 電子デリバリー
// - `02`: 当日出荷
// - `03`: 翌日出荷
// - `04`: 2日目以降の出荷.
type ExecutePaymentReq0Tds2DeliveryTimeframe string

const (
	ExecutePaymentReq0Tds2DeliveryTimeframe01 ExecutePaymentReq0Tds2DeliveryTimeframe = "01"
	ExecutePaymentReq0Tds2DeliveryTimeframe02 ExecutePaymentReq0Tds2DeliveryTimeframe = "02"
	ExecutePaymentReq0Tds2DeliveryTimeframe03 ExecutePaymentReq0Tds2DeliveryTimeframe = "03"
	ExecutePaymentReq0Tds2DeliveryTimeframe04 ExecutePaymentReq0Tds2DeliveryTimeframe = "04"
)

// AllValues returns all ExecutePaymentReq0Tds2DeliveryTimeframe values.
func (ExecutePaymentReq0Tds2DeliveryTimeframe) AllValues() []ExecutePaymentReq0Tds2DeliveryTimeframe {
	return []ExecutePaymentReq0Tds2DeliveryTimeframe{
		ExecutePaymentReq0Tds2DeliveryTimeframe01,
		ExecutePaymentReq0Tds2DeliveryTimeframe02,
		ExecutePaymentReq0Tds2DeliveryTimeframe03,
		ExecutePaymentReq0Tds2DeliveryTimeframe04,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2DeliveryTimeframe) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2DeliveryTimeframe01:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2DeliveryTimeframe02:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2DeliveryTimeframe03:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2DeliveryTimeframe04:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2DeliveryTimeframe) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2DeliveryTimeframe(data) {
	case ExecutePaymentReq0Tds2DeliveryTimeframe01:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe01
		return nil
	case ExecutePaymentReq0Tds2DeliveryTimeframe02:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe02
		return nil
	case ExecutePaymentReq0Tds2DeliveryTimeframe03:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe03
		return nil
	case ExecutePaymentReq0Tds2DeliveryTimeframe04:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe04
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の販売時期情報
// - `01`: 発売済み商品
// - `02`: 先行予約商品.
type ExecutePaymentReq0Tds2PreOrderPurchaseInd string

const (
	ExecutePaymentReq0Tds2PreOrderPurchaseInd01 ExecutePaymentReq0Tds2PreOrderPurchaseInd = "01"
	ExecutePaymentReq0Tds2PreOrderPurchaseInd02 ExecutePaymentReq0Tds2PreOrderPurchaseInd = "02"
)

// AllValues returns all ExecutePaymentReq0Tds2PreOrderPurchaseInd values.
func (ExecutePaymentReq0Tds2PreOrderPurchaseInd) AllValues() []ExecutePaymentReq0Tds2PreOrderPurchaseInd {
	return []ExecutePaymentReq0Tds2PreOrderPurchaseInd{
		ExecutePaymentReq0Tds2PreOrderPurchaseInd01,
		ExecutePaymentReq0Tds2PreOrderPurchaseInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2PreOrderPurchaseInd) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2PreOrderPurchaseInd01:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2PreOrderPurchaseInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2PreOrderPurchaseInd) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2PreOrderPurchaseInd(data) {
	case ExecutePaymentReq0Tds2PreOrderPurchaseInd01:
		*s = ExecutePaymentReq0Tds2PreOrderPurchaseInd01
		return nil
	case ExecutePaymentReq0Tds2PreOrderPurchaseInd02:
		*s = ExecutePaymentReq0Tds2PreOrderPurchaseInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の注文が初回か再注文か
// - `01`: 初回注文
// - `02`: 再注文.
type ExecutePaymentReq0Tds2ReorderItemsInd string

const (
	ExecutePaymentReq0Tds2ReorderItemsInd01 ExecutePaymentReq0Tds2ReorderItemsInd = "01"
	ExecutePaymentReq0Tds2ReorderItemsInd02 ExecutePaymentReq0Tds2ReorderItemsInd = "02"
)

// AllValues returns all ExecutePaymentReq0Tds2ReorderItemsInd values.
func (ExecutePaymentReq0Tds2ReorderItemsInd) AllValues() []ExecutePaymentReq0Tds2ReorderItemsInd {
	return []ExecutePaymentReq0Tds2ReorderItemsInd{
		ExecutePaymentReq0Tds2ReorderItemsInd01,
		ExecutePaymentReq0Tds2ReorderItemsInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2ReorderItemsInd) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2ReorderItemsInd01:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ReorderItemsInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2ReorderItemsInd) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2ReorderItemsInd(data) {
	case ExecutePaymentReq0Tds2ReorderItemsInd01:
		*s = ExecutePaymentReq0Tds2ReorderItemsInd01
		return nil
	case ExecutePaymentReq0Tds2ReorderItemsInd02:
		*s = ExecutePaymentReq0Tds2ReorderItemsInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 取引商品の配送方法
// - `01`: カード顧客の請求先住所に配送
// - `02`: 加盟店が保持している確認済み住所（請求先住所でない）に配送
// - `03`: カード顧客の請求先住所と異なる住所に配送
// - `04`: 店舗への配送（店舗の住所は配送先住所で指定）
// - `05`:
// デジタル商品（オンラインサービス、電子ギフトカードおよび償還コードを含む）
// - `06`: 配送なし（旅行およびイベントのチケット）
// - `07`:
// その他（ゲーム、配送されないデジタルサービス、電子メディアの購読料など）.
type ExecutePaymentReq0Tds2ShipInd string

const (
	ExecutePaymentReq0Tds2ShipInd01 ExecutePaymentReq0Tds2ShipInd = "01"
	ExecutePaymentReq0Tds2ShipInd02 ExecutePaymentReq0Tds2ShipInd = "02"
	ExecutePaymentReq0Tds2ShipInd03 ExecutePaymentReq0Tds2ShipInd = "03"
	ExecutePaymentReq0Tds2ShipInd04 ExecutePaymentReq0Tds2ShipInd = "04"
	ExecutePaymentReq0Tds2ShipInd05 ExecutePaymentReq0Tds2ShipInd = "05"
	ExecutePaymentReq0Tds2ShipInd06 ExecutePaymentReq0Tds2ShipInd = "06"
	ExecutePaymentReq0Tds2ShipInd07 ExecutePaymentReq0Tds2ShipInd = "07"
)

// AllValues returns all ExecutePaymentReq0Tds2ShipInd values.
func (ExecutePaymentReq0Tds2ShipInd) AllValues() []ExecutePaymentReq0Tds2ShipInd {
	return []ExecutePaymentReq0Tds2ShipInd{
		ExecutePaymentReq0Tds2ShipInd01,
		ExecutePaymentReq0Tds2ShipInd02,
		ExecutePaymentReq0Tds2ShipInd03,
		ExecutePaymentReq0Tds2ShipInd04,
		ExecutePaymentReq0Tds2ShipInd05,
		ExecutePaymentReq0Tds2ShipInd06,
		ExecutePaymentReq0Tds2ShipInd07,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2ShipInd) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2ShipInd01:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ShipInd02:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ShipInd03:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ShipInd04:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ShipInd05:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ShipInd06:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ShipInd07:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2ShipInd) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2ShipInd(data) {
	case ExecutePaymentReq0Tds2ShipInd01:
		*s = ExecutePaymentReq0Tds2ShipInd01
		return nil
	case ExecutePaymentReq0Tds2ShipInd02:
		*s = ExecutePaymentReq0Tds2ShipInd02
		return nil
	case ExecutePaymentReq0Tds2ShipInd03:
		*s = ExecutePaymentReq0Tds2ShipInd03
		return nil
	case ExecutePaymentReq0Tds2ShipInd04:
		*s = ExecutePaymentReq0Tds2ShipInd04
		return nil
	case ExecutePaymentReq0Tds2ShipInd05:
		*s = ExecutePaymentReq0Tds2ShipInd05
		return nil
	case ExecutePaymentReq0Tds2ShipInd06:
		*s = ExecutePaymentReq0Tds2ShipInd06
		return nil
	case ExecutePaymentReq0Tds2ShipInd07:
		*s = ExecutePaymentReq0Tds2ShipInd07
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// カード顧客名と出荷先名が一致しているか否か\
// カード顧客の顧客名と登録に使用される配送先名の一致/不一致を設定
// - `01`: カード顧客名と出荷先名が一致
// - `02`: カード顧客名と出荷先名が不一致.
type ExecutePaymentReq0Tds2ShipNameInd string

const (
	ExecutePaymentReq0Tds2ShipNameInd01 ExecutePaymentReq0Tds2ShipNameInd = "01"
	ExecutePaymentReq0Tds2ShipNameInd02 ExecutePaymentReq0Tds2ShipNameInd = "02"
)

// AllValues returns all ExecutePaymentReq0Tds2ShipNameInd values.
func (ExecutePaymentReq0Tds2ShipNameInd) AllValues() []ExecutePaymentReq0Tds2ShipNameInd {
	return []ExecutePaymentReq0Tds2ShipNameInd{
		ExecutePaymentReq0Tds2ShipNameInd01,
		ExecutePaymentReq0Tds2ShipNameInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2ShipNameInd) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2ShipNameInd01:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ShipNameInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2ShipNameInd) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2ShipNameInd(data) {
	case ExecutePaymentReq0Tds2ShipNameInd01:
		*s = ExecutePaymentReq0Tds2ShipNameInd01
		return nil
	case ExecutePaymentReq0Tds2ShipNameInd02:
		*s = ExecutePaymentReq0Tds2ShipNameInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// アカウントの不審行為情報\
// カード顧客で、不審な行動（過去の不正行為を含む）を加盟店様が発見したかどうかを設定
// - `01`: 不審な行動なし
// - `02`: 不審な行動あり.
type ExecutePaymentReq0Tds2SuspiciousAccActivity string

const (
	ExecutePaymentReq0Tds2SuspiciousAccActivity01 ExecutePaymentReq0Tds2SuspiciousAccActivity = "01"
	ExecutePaymentReq0Tds2SuspiciousAccActivity02 ExecutePaymentReq0Tds2SuspiciousAccActivity = "02"
)

// AllValues returns all ExecutePaymentReq0Tds2SuspiciousAccActivity values.
func (ExecutePaymentReq0Tds2SuspiciousAccActivity) AllValues() []ExecutePaymentReq0Tds2SuspiciousAccActivity {
	return []ExecutePaymentReq0Tds2SuspiciousAccActivity{
		ExecutePaymentReq0Tds2SuspiciousAccActivity01,
		ExecutePaymentReq0Tds2SuspiciousAccActivity02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2SuspiciousAccActivity) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2SuspiciousAccActivity01:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2SuspiciousAccActivity02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2SuspiciousAccActivity) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2SuspiciousAccActivity(data) {
	case ExecutePaymentReq0Tds2SuspiciousAccActivity01:
		*s = ExecutePaymentReq0Tds2SuspiciousAccActivity01
		return nil
	case ExecutePaymentReq0Tds2SuspiciousAccActivity02:
		*s = ExecutePaymentReq0Tds2SuspiciousAccActivity02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// ログイン方法\
// ログイン方法を設定する場合、ログイン証跡とログイン日時の設定が必要です。
// - `01`: 認証なし（ゲストとしてログイン）
// - `02`: 加盟店様自身の認証情報
// - `03`: SSO(シングルサインオン)
// - `04`: イシュアーの認証情報
// - `05`: サードパーティ認証
// - `06`: FIDO認証.
type ExecutePaymentReq0Tds2ThreeDsReqAuthMethod string

const (
	ExecutePaymentReq0Tds2ThreeDsReqAuthMethod01 ExecutePaymentReq0Tds2ThreeDsReqAuthMethod = "01"
	ExecutePaymentReq0Tds2ThreeDsReqAuthMethod02 ExecutePaymentReq0Tds2ThreeDsReqAuthMethod = "02"
	ExecutePaymentReq0Tds2ThreeDsReqAuthMethod03 ExecutePaymentReq0Tds2ThreeDsReqAuthMethod = "03"
	ExecutePaymentReq0Tds2ThreeDsReqAuthMethod04 ExecutePaymentReq0Tds2ThreeDsReqAuthMethod = "04"
	ExecutePaymentReq0Tds2ThreeDsReqAuthMethod05 ExecutePaymentReq0Tds2ThreeDsReqAuthMethod = "05"
	ExecutePaymentReq0Tds2ThreeDsReqAuthMethod06 ExecutePaymentReq0Tds2ThreeDsReqAuthMethod = "06"
)

// AllValues returns all ExecutePaymentReq0Tds2ThreeDsReqAuthMethod values.
func (ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) AllValues() []ExecutePaymentReq0Tds2ThreeDsReqAuthMethod {
	return []ExecutePaymentReq0Tds2ThreeDsReqAuthMethod{
		ExecutePaymentReq0Tds2ThreeDsReqAuthMethod01,
		ExecutePaymentReq0Tds2ThreeDsReqAuthMethod02,
		ExecutePaymentReq0Tds2ThreeDsReqAuthMethod03,
		ExecutePaymentReq0Tds2ThreeDsReqAuthMethod04,
		ExecutePaymentReq0Tds2ThreeDsReqAuthMethod05,
		ExecutePaymentReq0Tds2ThreeDsReqAuthMethod06,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod01:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod02:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod03:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod04:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod05:
		return []byte(s), nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod06:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq0Tds2ThreeDsReqAuthMethod(data) {
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod01:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod01
		return nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod02:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod02
		return nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod03:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod03
		return nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod04:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod04
		return nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod05:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod05
		return nil
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod06:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod06
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExecutePaymentReq1 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType  ExecutePaymentReq1PayType `json:"pay_type"`
	AccessID string                    `json:"access_id"`
	Token    string                    `json:"token"`
	// 顧客ID\
	// 購入者となる顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentReq1) GetPayType() ExecutePaymentReq1PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentReq1) GetAccessID() string {
	return s.AccessID
}

// GetToken returns the value of Token.
func (s *ExecutePaymentReq1) GetToken() string {
	return s.Token
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentReq1) GetCustomerID() OptString {
	return s.CustomerID
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentReq1) SetPayType(val ExecutePaymentReq1PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentReq1) SetAccessID(val string) {
	s.AccessID = val
}

// SetToken sets the value of Token.
func (s *ExecutePaymentReq1) SetToken(val string) {
	s.Token = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentReq1) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentReq1PayType string

const (
	ExecutePaymentReq1PayTypeCard           ExecutePaymentReq1PayType = "Card"
	ExecutePaymentReq1PayTypeKonbini        ExecutePaymentReq1PayType = "Konbini"
	ExecutePaymentReq1PayTypePaypay         ExecutePaymentReq1PayType = "Paypay"
	ExecutePaymentReq1PayTypeApplepay       ExecutePaymentReq1PayType = "Applepay"
	ExecutePaymentReq1PayTypeDirectdebit    ExecutePaymentReq1PayType = "Directdebit"
	ExecutePaymentReq1PayTypeVirtualaccount ExecutePaymentReq1PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentReq1PayType values.
func (ExecutePaymentReq1PayType) AllValues() []ExecutePaymentReq1PayType {
	return []ExecutePaymentReq1PayType{
		ExecutePaymentReq1PayTypeCard,
		ExecutePaymentReq1PayTypeKonbini,
		ExecutePaymentReq1PayTypePaypay,
		ExecutePaymentReq1PayTypeApplepay,
		ExecutePaymentReq1PayTypeDirectdebit,
		ExecutePaymentReq1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq1PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq1PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentReq1PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentReq1PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentReq1PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentReq1PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentReq1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq1PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq1PayType(data) {
	case ExecutePaymentReq1PayTypeCard:
		*s = ExecutePaymentReq1PayTypeCard
		return nil
	case ExecutePaymentReq1PayTypeKonbini:
		*s = ExecutePaymentReq1PayTypeKonbini
		return nil
	case ExecutePaymentReq1PayTypePaypay:
		*s = ExecutePaymentReq1PayTypePaypay
		return nil
	case ExecutePaymentReq1PayTypeApplepay:
		*s = ExecutePaymentReq1PayTypeApplepay
		return nil
	case ExecutePaymentReq1PayTypeDirectdebit:
		*s = ExecutePaymentReq1PayTypeDirectdebit
		return nil
	case ExecutePaymentReq1PayTypeVirtualaccount:
		*s = ExecutePaymentReq1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExecutePaymentReq2 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType  ExecutePaymentReq2PayType `json:"pay_type"`
	AccessID string                    `json:"access_id"`
	// 顧客ID\
	// 購入者となる顧客のIDです。.
	CustomerID     OptString                     `json:"customer_id"`
	PaymentTermDay *NilString                    `json:"payment_term_day"`
	DeviceName     string                        `json:"device_name"`
	WinWidth       string                        `json:"win_width"`
	WinHeight      string                        `json:"win_height"`
	PixelRatio     string                        `json:"pixel_ratio"`
	WinSizeType    ExecutePaymentReq2WinSizeType `json:"win_size_type"`
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentReq2) GetPayType() ExecutePaymentReq2PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentReq2) GetAccessID() string {
	return s.AccessID
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentReq2) GetCustomerID() OptString {
	return s.CustomerID
}

// GetPaymentTermDay returns the value of PaymentTermDay.
func (s *ExecutePaymentReq2) GetPaymentTermDay() *NilString {
	return s.PaymentTermDay
}

// GetDeviceName returns the value of DeviceName.
func (s *ExecutePaymentReq2) GetDeviceName() string {
	return s.DeviceName
}

// GetWinWidth returns the value of WinWidth.
func (s *ExecutePaymentReq2) GetWinWidth() string {
	return s.WinWidth
}

// GetWinHeight returns the value of WinHeight.
func (s *ExecutePaymentReq2) GetWinHeight() string {
	return s.WinHeight
}

// GetPixelRatio returns the value of PixelRatio.
func (s *ExecutePaymentReq2) GetPixelRatio() string {
	return s.PixelRatio
}

// GetWinSizeType returns the value of WinSizeType.
func (s *ExecutePaymentReq2) GetWinSizeType() ExecutePaymentReq2WinSizeType {
	return s.WinSizeType
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentReq2) SetPayType(val ExecutePaymentReq2PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentReq2) SetAccessID(val string) {
	s.AccessID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentReq2) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetPaymentTermDay sets the value of PaymentTermDay.
func (s *ExecutePaymentReq2) SetPaymentTermDay(val *NilString) {
	s.PaymentTermDay = val
}

// SetDeviceName sets the value of DeviceName.
func (s *ExecutePaymentReq2) SetDeviceName(val string) {
	s.DeviceName = val
}

// SetWinWidth sets the value of WinWidth.
func (s *ExecutePaymentReq2) SetWinWidth(val string) {
	s.WinWidth = val
}

// SetWinHeight sets the value of WinHeight.
func (s *ExecutePaymentReq2) SetWinHeight(val string) {
	s.WinHeight = val
}

// SetPixelRatio sets the value of PixelRatio.
func (s *ExecutePaymentReq2) SetPixelRatio(val string) {
	s.PixelRatio = val
}

// SetWinSizeType sets the value of WinSizeType.
func (s *ExecutePaymentReq2) SetWinSizeType(val ExecutePaymentReq2WinSizeType) {
	s.WinSizeType = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentReq2PayType string

const (
	ExecutePaymentReq2PayTypeCard           ExecutePaymentReq2PayType = "Card"
	ExecutePaymentReq2PayTypeKonbini        ExecutePaymentReq2PayType = "Konbini"
	ExecutePaymentReq2PayTypePaypay         ExecutePaymentReq2PayType = "Paypay"
	ExecutePaymentReq2PayTypeApplepay       ExecutePaymentReq2PayType = "Applepay"
	ExecutePaymentReq2PayTypeDirectdebit    ExecutePaymentReq2PayType = "Directdebit"
	ExecutePaymentReq2PayTypeVirtualaccount ExecutePaymentReq2PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentReq2PayType values.
func (ExecutePaymentReq2PayType) AllValues() []ExecutePaymentReq2PayType {
	return []ExecutePaymentReq2PayType{
		ExecutePaymentReq2PayTypeCard,
		ExecutePaymentReq2PayTypeKonbini,
		ExecutePaymentReq2PayTypePaypay,
		ExecutePaymentReq2PayTypeApplepay,
		ExecutePaymentReq2PayTypeDirectdebit,
		ExecutePaymentReq2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq2PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq2PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentReq2PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentReq2PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentReq2PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentReq2PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentReq2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq2PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq2PayType(data) {
	case ExecutePaymentReq2PayTypeCard:
		*s = ExecutePaymentReq2PayTypeCard
		return nil
	case ExecutePaymentReq2PayTypeKonbini:
		*s = ExecutePaymentReq2PayTypeKonbini
		return nil
	case ExecutePaymentReq2PayTypePaypay:
		*s = ExecutePaymentReq2PayTypePaypay
		return nil
	case ExecutePaymentReq2PayTypeApplepay:
		*s = ExecutePaymentReq2PayTypeApplepay
		return nil
	case ExecutePaymentReq2PayTypeDirectdebit:
		*s = ExecutePaymentReq2PayTypeDirectdebit
		return nil
	case ExecutePaymentReq2PayTypeVirtualaccount:
		*s = ExecutePaymentReq2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 画面サイズ種別\
// バーコード表示を行うデバイスのピクセルの種類を指定します。
// - `1`: 物理ピクセル（Androidのときはこちらを指定）
// - `2`: CSSピクセル（iPhoneのときはこちらを指定）.
type ExecutePaymentReq2WinSizeType string

const (
	ExecutePaymentReq2WinSizeType1 ExecutePaymentReq2WinSizeType = "1"
	ExecutePaymentReq2WinSizeType2 ExecutePaymentReq2WinSizeType = "2"
)

// AllValues returns all ExecutePaymentReq2WinSizeType values.
func (ExecutePaymentReq2WinSizeType) AllValues() []ExecutePaymentReq2WinSizeType {
	return []ExecutePaymentReq2WinSizeType{
		ExecutePaymentReq2WinSizeType1,
		ExecutePaymentReq2WinSizeType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq2WinSizeType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq2WinSizeType1:
		return []byte(s), nil
	case ExecutePaymentReq2WinSizeType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq2WinSizeType) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq2WinSizeType(data) {
	case ExecutePaymentReq2WinSizeType1:
		*s = ExecutePaymentReq2WinSizeType1
		return nil
	case ExecutePaymentReq2WinSizeType2:
		*s = ExecutePaymentReq2WinSizeType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExecutePaymentReq3 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType  OptExecutePaymentReq3PayType `json:"pay_type"`
	AccessID OptString                    `json:"access_id"`
	// 顧客ID\
	// 購入者となる顧客のIDです。.
	CustomerID   OptString                          `json:"customer_id"`
	RedirectURL  *NilString                         `json:"redirect_url"`
	RedirectType *NilExecutePaymentReq3RedirectType `json:"redirect_type"`
	UserAgent    OptString                          `json:"user_agent"`
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentReq3) GetPayType() OptExecutePaymentReq3PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentReq3) GetAccessID() OptString {
	return s.AccessID
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentReq3) GetCustomerID() OptString {
	return s.CustomerID
}

// GetRedirectURL returns the value of RedirectURL.
func (s *ExecutePaymentReq3) GetRedirectURL() *NilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *ExecutePaymentReq3) GetRedirectType() *NilExecutePaymentReq3RedirectType {
	return s.RedirectType
}

// GetUserAgent returns the value of UserAgent.
func (s *ExecutePaymentReq3) GetUserAgent() OptString {
	return s.UserAgent
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentReq3) SetPayType(val OptExecutePaymentReq3PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentReq3) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentReq3) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *ExecutePaymentReq3) SetRedirectURL(val *NilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *ExecutePaymentReq3) SetRedirectType(val *NilExecutePaymentReq3RedirectType) {
	s.RedirectType = val
}

// SetUserAgent sets the value of UserAgent.
func (s *ExecutePaymentReq3) SetUserAgent(val OptString) {
	s.UserAgent = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentReq3PayType string

const (
	ExecutePaymentReq3PayTypeCard           ExecutePaymentReq3PayType = "Card"
	ExecutePaymentReq3PayTypeKonbini        ExecutePaymentReq3PayType = "Konbini"
	ExecutePaymentReq3PayTypePaypay         ExecutePaymentReq3PayType = "Paypay"
	ExecutePaymentReq3PayTypeApplepay       ExecutePaymentReq3PayType = "Applepay"
	ExecutePaymentReq3PayTypeDirectdebit    ExecutePaymentReq3PayType = "Directdebit"
	ExecutePaymentReq3PayTypeVirtualaccount ExecutePaymentReq3PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentReq3PayType values.
func (ExecutePaymentReq3PayType) AllValues() []ExecutePaymentReq3PayType {
	return []ExecutePaymentReq3PayType{
		ExecutePaymentReq3PayTypeCard,
		ExecutePaymentReq3PayTypeKonbini,
		ExecutePaymentReq3PayTypePaypay,
		ExecutePaymentReq3PayTypeApplepay,
		ExecutePaymentReq3PayTypeDirectdebit,
		ExecutePaymentReq3PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq3PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq3PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentReq3PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentReq3PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentReq3PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentReq3PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentReq3PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq3PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq3PayType(data) {
	case ExecutePaymentReq3PayTypeCard:
		*s = ExecutePaymentReq3PayTypeCard
		return nil
	case ExecutePaymentReq3PayTypeKonbini:
		*s = ExecutePaymentReq3PayTypeKonbini
		return nil
	case ExecutePaymentReq3PayTypePaypay:
		*s = ExecutePaymentReq3PayTypePaypay
		return nil
	case ExecutePaymentReq3PayTypeApplepay:
		*s = ExecutePaymentReq3PayTypeApplepay
		return nil
	case ExecutePaymentReq3PayTypeDirectdebit:
		*s = ExecutePaymentReq3PayTypeDirectdebit
		return nil
	case ExecutePaymentReq3PayTypeVirtualaccount:
		*s = ExecutePaymentReq3PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクト先種別\
// `redirect_url`の種別
// - `1`： Webページ／Webアプリケーション
// - `2`： ネイティブアプリ.
type ExecutePaymentReq3RedirectType string

const (
	ExecutePaymentReq3RedirectType1 ExecutePaymentReq3RedirectType = "1"
	ExecutePaymentReq3RedirectType2 ExecutePaymentReq3RedirectType = "2"
)

// AllValues returns all ExecutePaymentReq3RedirectType values.
func (ExecutePaymentReq3RedirectType) AllValues() []ExecutePaymentReq3RedirectType {
	return []ExecutePaymentReq3RedirectType{
		ExecutePaymentReq3RedirectType1,
		ExecutePaymentReq3RedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq3RedirectType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq3RedirectType1:
		return []byte(s), nil
	case ExecutePaymentReq3RedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq3RedirectType) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq3RedirectType(data) {
	case ExecutePaymentReq3RedirectType1:
		*s = ExecutePaymentReq3RedirectType1
		return nil
	case ExecutePaymentReq3RedirectType2:
		*s = ExecutePaymentReq3RedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ExecutePaymentReq4 struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType  ExecutePaymentReq4PayType `json:"pay_type"`
	AccessID string                    `json:"access_id"`
	// 顧客ID\
	// 購入者となる顧客のIDです。.
	CustomerID string `json:"customer_id"`
	// 決済手段ID\
	// この決済に使用する決済手段（口座振替用口座）のIDです。指定しない場合、デフォルト決済手段が使用されます。.
	PaymentMethodID OptString `json:"payment_method_id"`
	TargetDate      NilString `json:"target_date"`
}

// GetPayType returns the value of PayType.
func (s *ExecutePaymentReq4) GetPayType() ExecutePaymentReq4PayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *ExecutePaymentReq4) GetAccessID() string {
	return s.AccessID
}

// GetCustomerID returns the value of CustomerID.
func (s *ExecutePaymentReq4) GetCustomerID() string {
	return s.CustomerID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *ExecutePaymentReq4) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetTargetDate returns the value of TargetDate.
func (s *ExecutePaymentReq4) GetTargetDate() NilString {
	return s.TargetDate
}

// SetPayType sets the value of PayType.
func (s *ExecutePaymentReq4) SetPayType(val ExecutePaymentReq4PayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *ExecutePaymentReq4) SetAccessID(val string) {
	s.AccessID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *ExecutePaymentReq4) SetCustomerID(val string) {
	s.CustomerID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *ExecutePaymentReq4) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetTargetDate sets the value of TargetDate.
func (s *ExecutePaymentReq4) SetTargetDate(val NilString) {
	s.TargetDate = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type ExecutePaymentReq4PayType string

const (
	ExecutePaymentReq4PayTypeCard           ExecutePaymentReq4PayType = "Card"
	ExecutePaymentReq4PayTypeKonbini        ExecutePaymentReq4PayType = "Konbini"
	ExecutePaymentReq4PayTypePaypay         ExecutePaymentReq4PayType = "Paypay"
	ExecutePaymentReq4PayTypeApplepay       ExecutePaymentReq4PayType = "Applepay"
	ExecutePaymentReq4PayTypeDirectdebit    ExecutePaymentReq4PayType = "Directdebit"
	ExecutePaymentReq4PayTypeVirtualaccount ExecutePaymentReq4PayType = "Virtualaccount"
)

// AllValues returns all ExecutePaymentReq4PayType values.
func (ExecutePaymentReq4PayType) AllValues() []ExecutePaymentReq4PayType {
	return []ExecutePaymentReq4PayType{
		ExecutePaymentReq4PayTypeCard,
		ExecutePaymentReq4PayTypeKonbini,
		ExecutePaymentReq4PayTypePaypay,
		ExecutePaymentReq4PayTypeApplepay,
		ExecutePaymentReq4PayTypeDirectdebit,
		ExecutePaymentReq4PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ExecutePaymentReq4PayType) MarshalText() ([]byte, error) {
	switch s {
	case ExecutePaymentReq4PayTypeCard:
		return []byte(s), nil
	case ExecutePaymentReq4PayTypeKonbini:
		return []byte(s), nil
	case ExecutePaymentReq4PayTypePaypay:
		return []byte(s), nil
	case ExecutePaymentReq4PayTypeApplepay:
		return []byte(s), nil
	case ExecutePaymentReq4PayTypeDirectdebit:
		return []byte(s), nil
	case ExecutePaymentReq4PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ExecutePaymentReq4PayType) UnmarshalText(data []byte) error {
	switch ExecutePaymentReq4PayType(data) {
	case ExecutePaymentReq4PayTypeCard:
		*s = ExecutePaymentReq4PayTypeCard
		return nil
	case ExecutePaymentReq4PayTypeKonbini:
		*s = ExecutePaymentReq4PayTypeKonbini
		return nil
	case ExecutePaymentReq4PayTypePaypay:
		*s = ExecutePaymentReq4PayTypePaypay
		return nil
	case ExecutePaymentReq4PayTypeApplepay:
		*s = ExecutePaymentReq4PayTypeApplepay
		return nil
	case ExecutePaymentReq4PayTypeDirectdebit:
		*s = ExecutePaymentReq4PayTypeDirectdebit
		return nil
	case ExecutePaymentReq4PayTypeVirtualaccount:
		*s = ExecutePaymentReq4PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 1つのエラーを表現するオブジェクト。.
// Ref: #/components/schemas/FincodeAPIError
type FincodeAPIError struct {
	// エラー内容を判定する場合はこの`error_code`の使用が推奨されます。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptString `json:"error_code"`
	// エラーの内容を表現するメッセージです。\
	// このエラーメッセージは予告なく変更されるため、エラー内容を判定する場合はこの値ではなく`error_code`の使用が推奨されます。.
	ErrorMessage OptString `json:"error_message"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *FincodeAPIError) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *FincodeAPIError) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetErrorCode sets the value of ErrorCode.
func (s *FincodeAPIError) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *FincodeAPIError) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// Ref: #/components/schemas/FincodeAPIError.Response
type FincodeAPIErrorResponse struct {
	Errors []FincodeAPIError `json:"errors"`
}

// GetErrors returns the value of Errors.
func (s *FincodeAPIErrorResponse) GetErrors() []FincodeAPIError {
	return s.Errors
}

// SetErrors sets the value of Errors.
func (s *FincodeAPIErrorResponse) SetErrors(val []FincodeAPIError) {
	s.Errors = val
}

func (*FincodeAPIErrorResponse) authorizePaymentRes()                   {}
func (*FincodeAPIErrorResponse) capturePaymentRes()                     {}
func (*FincodeAPIErrorResponse) changeAmountOfPaymentRes()              {}
func (*FincodeAPIErrorResponse) confirm3DSecureAuthenticationRes()      {}
func (*FincodeAPIErrorResponse) createCardRegistrationSessionRes()      {}
func (*FincodeAPIErrorResponse) createCustomerCardRes()                 {}
func (*FincodeAPIErrorResponse) createCustomerPaymentMethodRes()        {}
func (*FincodeAPIErrorResponse) createCustomerRes()                     {}
func (*FincodeAPIErrorResponse) createPaymentBulkRes()                  {}
func (*FincodeAPIErrorResponse) createPaymentRes()                      {}
func (*FincodeAPIErrorResponse) createPaymentSessionRes()               {}
func (*FincodeAPIErrorResponse) createPlanRes()                         {}
func (*FincodeAPIErrorResponse) createSubscriptionRes()                 {}
func (*FincodeAPIErrorResponse) createTenantWithExistingUserRes()       {}
func (*FincodeAPIErrorResponse) createTenantWithNewUserRes()            {}
func (*FincodeAPIErrorResponse) createWebhookSettingRes()               {}
func (*FincodeAPIErrorResponse) deleteCustomerCardRes()                 {}
func (*FincodeAPIErrorResponse) deleteCustomerPaymentMethodRes()        {}
func (*FincodeAPIErrorResponse) deleteCustomerRes()                     {}
func (*FincodeAPIErrorResponse) deletePaymentBulkRes()                  {}
func (*FincodeAPIErrorResponse) deletePlanRes()                         {}
func (*FincodeAPIErrorResponse) deleteSubscriptionRes()                 {}
func (*FincodeAPIErrorResponse) deleteWebhookSettingRes()               {}
func (*FincodeAPIErrorResponse) execute3DSecureAuthenticationRes()      {}
func (*FincodeAPIErrorResponse) executePaymentAfter3DSecureRes()        {}
func (*FincodeAPIErrorResponse) executePaymentRes()                     {}
func (*FincodeAPIErrorResponse) generateBarcodeOfPaymentRes()           {}
func (*FincodeAPIErrorResponse) requestProductionEnvironmentRes()       {}
func (*FincodeAPIErrorResponse) reserveProviderRes()                    {}
func (*FincodeAPIErrorResponse) retrieveAccountDetailListRes()          {}
func (*FincodeAPIErrorResponse) retrieveAccountListRes()                {}
func (*FincodeAPIErrorResponse) retrieveAccountRes()                    {}
func (*FincodeAPIErrorResponse) retrieveCustomerCardListRes()           {}
func (*FincodeAPIErrorResponse) retrieveCustomerCardRes()               {}
func (*FincodeAPIErrorResponse) retrieveCustomerListRes()               {}
func (*FincodeAPIErrorResponse) retrieveCustomerPaymentMethodListRes()  {}
func (*FincodeAPIErrorResponse) retrieveCustomerPaymentMethodRes()      {}
func (*FincodeAPIErrorResponse) retrieveCustomerRes()                   {}
func (*FincodeAPIErrorResponse) retrievePaymentBulkDetailListRes()      {}
func (*FincodeAPIErrorResponse) retrievePaymentBulkListRes()            {}
func (*FincodeAPIErrorResponse) retrievePaymentRes()                    {}
func (*FincodeAPIErrorResponse) retrievePlanListRes()                   {}
func (*FincodeAPIErrorResponse) retrievePlanRes()                       {}
func (*FincodeAPIErrorResponse) retrievePlatformAccountListRes()        {}
func (*FincodeAPIErrorResponse) retrievePlatformAccountRes()            {}
func (*FincodeAPIErrorResponse) retrievePlatformAccountSummaryListRes() {}
func (*FincodeAPIErrorResponse) retrievePlatformShopListRes()           {}
func (*FincodeAPIErrorResponse) retrievePlatformShopRes()               {}
func (*FincodeAPIErrorResponse) retrieveSubscriptionListRes()           {}
func (*FincodeAPIErrorResponse) retrieveSubscriptionRes()               {}
func (*FincodeAPIErrorResponse) retrieveSubscriptionResultListRes()     {}
func (*FincodeAPIErrorResponse) retrieveTenantContractRes()             {}
func (*FincodeAPIErrorResponse) retrieveTenantExaminationInfoRes()      {}
func (*FincodeAPIErrorResponse) retrieveTenantExaminationInfoV2Res()    {}
func (*FincodeAPIErrorResponse) retrieveTenantShopListRes()             {}
func (*FincodeAPIErrorResponse) retrieveTenantShopRes()                 {}
func (*FincodeAPIErrorResponse) retrieveWebhookSettingListRes()         {}
func (*FincodeAPIErrorResponse) retrieveWebhookSettingRes()             {}
func (*FincodeAPIErrorResponse) updateCustomerCardRes()                 {}
func (*FincodeAPIErrorResponse) updateCustomerRes()                     {}
func (*FincodeAPIErrorResponse) updatePlanRes()                         {}
func (*FincodeAPIErrorResponse) updatePlatformShopRes()                 {}
func (*FincodeAPIErrorResponse) updateSubscriptionRes()                 {}
func (*FincodeAPIErrorResponse) updateTenantExaminationInfoRes()        {}
func (*FincodeAPIErrorResponse) updateTenantExaminationInfoV2Res()      {}
func (*FincodeAPIErrorResponse) updateTenantShopRes()                   {}
func (*FincodeAPIErrorResponse) updateWebhookSettingRes()               {}
func (*FincodeAPIErrorResponse) uploadExaminationFileRes()              {}

// Merged schema.
type GenerateBarcodeOfPaymentOK struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType OptGenerateBarcodeOfPaymentOKPayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるコンビニ店頭レジでの払い込みを待っている状態。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptGenerateBarcodeOfPaymentOKStatus `json:"status"`
	// 支払い期限日数\
	// この決済の支払い期限日数です。`"0"`日から`"14"`日まで指定できます。
	// -
	// `"0"`を指定すると決済を作成した当日に限り支払いが可能な決済が作成されます。
	// - デフォルト：`"2"`.
	PaymentTermDay OptNilString `json:"payment_term_day"`
	// 支払い期限日時\
	// コンビニ決済の支払い期限日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentTerm OptNilString `json:"payment_term"`
	// 支払日時\
	// コンビニ店頭で購入者が支払いを行った日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
	// バーコード画像 Base64エンコード済み画像データ\
	// コンビニ店頭での支払いに使用するバーコード画像のBase64エンコード済みデータです。このデータをデコードして表示します。\
	// バーコード画像はレギュレーションに従って表示する必要があります。詳細は[Docs > レギュレーションと注意事項](https://docs.fincode.jp/payment/konbini/note)から参照できます。.
	Barcode OptNilString `json:"barcode"`
	// バーコード画像 フォーマット\
	// 発行されたバーコード画像（`barcode`）のフォーマットです。.
	BarcodeFormat OptNilGenerateBarcodeOfPaymentOKBarcodeFormat `json:"barcode_format"`
	// バーコード画像 横幅（px）\
	// 発行されたバーコード画像（`barcode`）の横幅です。.
	BarcodeWidth OptNilString `json:"barcode_width"`
	// バーコード画像 縦幅（px）\
	// 発行されたバーコード画像（`barcode`）の縦幅です。.
	BarcodeHeight OptNilString `json:"barcode_height"`
	// 多重支払フラグ\
	// この決済に対して複数回支払いが行われた場合`1`になります。
	// - `0`: 0回、または1回の支払いが行われた
	// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
	OverpaymentFlag OptGenerateBarcodeOfPaymentOKOverpaymentFlag `json:"overpayment_flag"`
	// キャンセル後支払フラグ\
	// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
	// - `0`: キャンセル後支払は行われていない
	// - `1`: キャンセル後、購入者による支払いが行われた.
	CancelOverpaymentFlag OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag `json:"cancel_overpayment_flag"`
	KonbiniCode           OptNilGenerateBarcodeOfPaymentOKKonbiniCode        `json:"konbini_code"`
	// コンビニ店舗コード\
	// コンビニ事業者ごとに独自体系の店舗コードです。.
	KonbiniStoreCode jx.Raw       `json:"konbini_store_code"`
	DeviceName       OptNilString `json:"device_name"`
	// OSバージョン.
	OsVersion jx.Raw       `json:"os_version"`
	WinWidth  OptNilString `json:"win_width"`
	WinHeight OptNilString `json:"win_height"`
	// 画面横幅のDPI.
	Xdpi jx.Raw `json:"xdpi"`
	// 画面縦幅のDPI.
	Ydpi   jx.Raw                              `json:"ydpi"`
	Result OptGenerateBarcodeOfPaymentOKResult `json:"result"`
	// 注文管理ID.
	OrderSerial OptNilString `json:"order_serial"`
	// 請求ID.
	InvoiceID OptNilString `json:"invoice_id"`
}

// GetShopID returns the value of ShopID.
func (s *GenerateBarcodeOfPaymentOK) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *GenerateBarcodeOfPaymentOK) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *GenerateBarcodeOfPaymentOK) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *GenerateBarcodeOfPaymentOK) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *GenerateBarcodeOfPaymentOK) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *GenerateBarcodeOfPaymentOK) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *GenerateBarcodeOfPaymentOK) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *GenerateBarcodeOfPaymentOK) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *GenerateBarcodeOfPaymentOK) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *GenerateBarcodeOfPaymentOK) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *GenerateBarcodeOfPaymentOK) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *GenerateBarcodeOfPaymentOK) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *GenerateBarcodeOfPaymentOK) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *GenerateBarcodeOfPaymentOK) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *GenerateBarcodeOfPaymentOK) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *GenerateBarcodeOfPaymentOK) GetPayType() OptGenerateBarcodeOfPaymentOKPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *GenerateBarcodeOfPaymentOK) GetStatus() OptGenerateBarcodeOfPaymentOKStatus {
	return s.Status
}

// GetPaymentTermDay returns the value of PaymentTermDay.
func (s *GenerateBarcodeOfPaymentOK) GetPaymentTermDay() OptNilString {
	return s.PaymentTermDay
}

// GetPaymentTerm returns the value of PaymentTerm.
func (s *GenerateBarcodeOfPaymentOK) GetPaymentTerm() OptNilString {
	return s.PaymentTerm
}

// GetPaymentDate returns the value of PaymentDate.
func (s *GenerateBarcodeOfPaymentOK) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// GetBarcode returns the value of Barcode.
func (s *GenerateBarcodeOfPaymentOK) GetBarcode() OptNilString {
	return s.Barcode
}

// GetBarcodeFormat returns the value of BarcodeFormat.
func (s *GenerateBarcodeOfPaymentOK) GetBarcodeFormat() OptNilGenerateBarcodeOfPaymentOKBarcodeFormat {
	return s.BarcodeFormat
}

// GetBarcodeWidth returns the value of BarcodeWidth.
func (s *GenerateBarcodeOfPaymentOK) GetBarcodeWidth() OptNilString {
	return s.BarcodeWidth
}

// GetBarcodeHeight returns the value of BarcodeHeight.
func (s *GenerateBarcodeOfPaymentOK) GetBarcodeHeight() OptNilString {
	return s.BarcodeHeight
}

// GetOverpaymentFlag returns the value of OverpaymentFlag.
func (s *GenerateBarcodeOfPaymentOK) GetOverpaymentFlag() OptGenerateBarcodeOfPaymentOKOverpaymentFlag {
	return s.OverpaymentFlag
}

// GetCancelOverpaymentFlag returns the value of CancelOverpaymentFlag.
func (s *GenerateBarcodeOfPaymentOK) GetCancelOverpaymentFlag() OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag {
	return s.CancelOverpaymentFlag
}

// GetKonbiniCode returns the value of KonbiniCode.
func (s *GenerateBarcodeOfPaymentOK) GetKonbiniCode() OptNilGenerateBarcodeOfPaymentOKKonbiniCode {
	return s.KonbiniCode
}

// GetKonbiniStoreCode returns the value of KonbiniStoreCode.
func (s *GenerateBarcodeOfPaymentOK) GetKonbiniStoreCode() jx.Raw {
	return s.KonbiniStoreCode
}

// GetDeviceName returns the value of DeviceName.
func (s *GenerateBarcodeOfPaymentOK) GetDeviceName() OptNilString {
	return s.DeviceName
}

// GetOsVersion returns the value of OsVersion.
func (s *GenerateBarcodeOfPaymentOK) GetOsVersion() jx.Raw {
	return s.OsVersion
}

// GetWinWidth returns the value of WinWidth.
func (s *GenerateBarcodeOfPaymentOK) GetWinWidth() OptNilString {
	return s.WinWidth
}

// GetWinHeight returns the value of WinHeight.
func (s *GenerateBarcodeOfPaymentOK) GetWinHeight() OptNilString {
	return s.WinHeight
}

// GetXdpi returns the value of Xdpi.
func (s *GenerateBarcodeOfPaymentOK) GetXdpi() jx.Raw {
	return s.Xdpi
}

// GetYdpi returns the value of Ydpi.
func (s *GenerateBarcodeOfPaymentOK) GetYdpi() jx.Raw {
	return s.Ydpi
}

// GetResult returns the value of Result.
func (s *GenerateBarcodeOfPaymentOK) GetResult() OptGenerateBarcodeOfPaymentOKResult {
	return s.Result
}

// GetOrderSerial returns the value of OrderSerial.
func (s *GenerateBarcodeOfPaymentOK) GetOrderSerial() OptNilString {
	return s.OrderSerial
}

// GetInvoiceID returns the value of InvoiceID.
func (s *GenerateBarcodeOfPaymentOK) GetInvoiceID() OptNilString {
	return s.InvoiceID
}

// SetShopID sets the value of ShopID.
func (s *GenerateBarcodeOfPaymentOK) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *GenerateBarcodeOfPaymentOK) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *GenerateBarcodeOfPaymentOK) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *GenerateBarcodeOfPaymentOK) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *GenerateBarcodeOfPaymentOK) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *GenerateBarcodeOfPaymentOK) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *GenerateBarcodeOfPaymentOK) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *GenerateBarcodeOfPaymentOK) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *GenerateBarcodeOfPaymentOK) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *GenerateBarcodeOfPaymentOK) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *GenerateBarcodeOfPaymentOK) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *GenerateBarcodeOfPaymentOK) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *GenerateBarcodeOfPaymentOK) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *GenerateBarcodeOfPaymentOK) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *GenerateBarcodeOfPaymentOK) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *GenerateBarcodeOfPaymentOK) SetPayType(val OptGenerateBarcodeOfPaymentOKPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *GenerateBarcodeOfPaymentOK) SetStatus(val OptGenerateBarcodeOfPaymentOKStatus) {
	s.Status = val
}

// SetPaymentTermDay sets the value of PaymentTermDay.
func (s *GenerateBarcodeOfPaymentOK) SetPaymentTermDay(val OptNilString) {
	s.PaymentTermDay = val
}

// SetPaymentTerm sets the value of PaymentTerm.
func (s *GenerateBarcodeOfPaymentOK) SetPaymentTerm(val OptNilString) {
	s.PaymentTerm = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *GenerateBarcodeOfPaymentOK) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// SetBarcode sets the value of Barcode.
func (s *GenerateBarcodeOfPaymentOK) SetBarcode(val OptNilString) {
	s.Barcode = val
}

// SetBarcodeFormat sets the value of BarcodeFormat.
func (s *GenerateBarcodeOfPaymentOK) SetBarcodeFormat(val OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) {
	s.BarcodeFormat = val
}

// SetBarcodeWidth sets the value of BarcodeWidth.
func (s *GenerateBarcodeOfPaymentOK) SetBarcodeWidth(val OptNilString) {
	s.BarcodeWidth = val
}

// SetBarcodeHeight sets the value of BarcodeHeight.
func (s *GenerateBarcodeOfPaymentOK) SetBarcodeHeight(val OptNilString) {
	s.BarcodeHeight = val
}

// SetOverpaymentFlag sets the value of OverpaymentFlag.
func (s *GenerateBarcodeOfPaymentOK) SetOverpaymentFlag(val OptGenerateBarcodeOfPaymentOKOverpaymentFlag) {
	s.OverpaymentFlag = val
}

// SetCancelOverpaymentFlag sets the value of CancelOverpaymentFlag.
func (s *GenerateBarcodeOfPaymentOK) SetCancelOverpaymentFlag(val OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) {
	s.CancelOverpaymentFlag = val
}

// SetKonbiniCode sets the value of KonbiniCode.
func (s *GenerateBarcodeOfPaymentOK) SetKonbiniCode(val OptNilGenerateBarcodeOfPaymentOKKonbiniCode) {
	s.KonbiniCode = val
}

// SetKonbiniStoreCode sets the value of KonbiniStoreCode.
func (s *GenerateBarcodeOfPaymentOK) SetKonbiniStoreCode(val jx.Raw) {
	s.KonbiniStoreCode = val
}

// SetDeviceName sets the value of DeviceName.
func (s *GenerateBarcodeOfPaymentOK) SetDeviceName(val OptNilString) {
	s.DeviceName = val
}

// SetOsVersion sets the value of OsVersion.
func (s *GenerateBarcodeOfPaymentOK) SetOsVersion(val jx.Raw) {
	s.OsVersion = val
}

// SetWinWidth sets the value of WinWidth.
func (s *GenerateBarcodeOfPaymentOK) SetWinWidth(val OptNilString) {
	s.WinWidth = val
}

// SetWinHeight sets the value of WinHeight.
func (s *GenerateBarcodeOfPaymentOK) SetWinHeight(val OptNilString) {
	s.WinHeight = val
}

// SetXdpi sets the value of Xdpi.
func (s *GenerateBarcodeOfPaymentOK) SetXdpi(val jx.Raw) {
	s.Xdpi = val
}

// SetYdpi sets the value of Ydpi.
func (s *GenerateBarcodeOfPaymentOK) SetYdpi(val jx.Raw) {
	s.Ydpi = val
}

// SetResult sets the value of Result.
func (s *GenerateBarcodeOfPaymentOK) SetResult(val OptGenerateBarcodeOfPaymentOKResult) {
	s.Result = val
}

// SetOrderSerial sets the value of OrderSerial.
func (s *GenerateBarcodeOfPaymentOK) SetOrderSerial(val OptNilString) {
	s.OrderSerial = val
}

// SetInvoiceID sets the value of InvoiceID.
func (s *GenerateBarcodeOfPaymentOK) SetInvoiceID(val OptNilString) {
	s.InvoiceID = val
}

func (*GenerateBarcodeOfPaymentOK) generateBarcodeOfPaymentRes() {}

// バーコード画像 フォーマット\
// 発行されたバーコード画像（`barcode`）のフォーマットです。.
type GenerateBarcodeOfPaymentOKBarcodeFormat string

const (
	GenerateBarcodeOfPaymentOKBarcodeFormatJPG GenerateBarcodeOfPaymentOKBarcodeFormat = "jpg"
	GenerateBarcodeOfPaymentOKBarcodeFormatPNG GenerateBarcodeOfPaymentOKBarcodeFormat = "png"
	GenerateBarcodeOfPaymentOKBarcodeFormatBmp GenerateBarcodeOfPaymentOKBarcodeFormat = "bmp"
)

// AllValues returns all GenerateBarcodeOfPaymentOKBarcodeFormat values.
func (GenerateBarcodeOfPaymentOKBarcodeFormat) AllValues() []GenerateBarcodeOfPaymentOKBarcodeFormat {
	return []GenerateBarcodeOfPaymentOKBarcodeFormat{
		GenerateBarcodeOfPaymentOKBarcodeFormatJPG,
		GenerateBarcodeOfPaymentOKBarcodeFormatPNG,
		GenerateBarcodeOfPaymentOKBarcodeFormatBmp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentOKBarcodeFormat) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentOKBarcodeFormatJPG:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKBarcodeFormatPNG:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKBarcodeFormatBmp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentOKBarcodeFormat) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentOKBarcodeFormat(data) {
	case GenerateBarcodeOfPaymentOKBarcodeFormatJPG:
		*s = GenerateBarcodeOfPaymentOKBarcodeFormatJPG
		return nil
	case GenerateBarcodeOfPaymentOKBarcodeFormatPNG:
		*s = GenerateBarcodeOfPaymentOKBarcodeFormatPNG
		return nil
	case GenerateBarcodeOfPaymentOKBarcodeFormatBmp:
		*s = GenerateBarcodeOfPaymentOKBarcodeFormatBmp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// キャンセル後支払フラグ\
// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
// - `0`: キャンセル後支払は行われていない
// - `1`: キャンセル後、購入者による支払いが行われた.
type GenerateBarcodeOfPaymentOKCancelOverpaymentFlag string

const (
	GenerateBarcodeOfPaymentOKCancelOverpaymentFlag0 GenerateBarcodeOfPaymentOKCancelOverpaymentFlag = "0"
	GenerateBarcodeOfPaymentOKCancelOverpaymentFlag1 GenerateBarcodeOfPaymentOKCancelOverpaymentFlag = "1"
)

// AllValues returns all GenerateBarcodeOfPaymentOKCancelOverpaymentFlag values.
func (GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) AllValues() []GenerateBarcodeOfPaymentOKCancelOverpaymentFlag {
	return []GenerateBarcodeOfPaymentOKCancelOverpaymentFlag{
		GenerateBarcodeOfPaymentOKCancelOverpaymentFlag0,
		GenerateBarcodeOfPaymentOKCancelOverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentOKCancelOverpaymentFlag0:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKCancelOverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentOKCancelOverpaymentFlag(data) {
	case GenerateBarcodeOfPaymentOKCancelOverpaymentFlag0:
		*s = GenerateBarcodeOfPaymentOKCancelOverpaymentFlag0
		return nil
	case GenerateBarcodeOfPaymentOKCancelOverpaymentFlag1:
		*s = GenerateBarcodeOfPaymentOKCancelOverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者コード\
// 購入者が払い込みを行ったコンビニ事業者をあらわすコード。
// - `00010`: セブン-イレブン
// - `00020`: ローソン
// - `00030`: ファミリーマート
// - `00080`: ミニストップ
// - `00760`: セイコーマート.
type GenerateBarcodeOfPaymentOKKonbiniCode string

const (
	GenerateBarcodeOfPaymentOKKonbiniCode00010 GenerateBarcodeOfPaymentOKKonbiniCode = "00010"
	GenerateBarcodeOfPaymentOKKonbiniCode00020 GenerateBarcodeOfPaymentOKKonbiniCode = "00020"
	GenerateBarcodeOfPaymentOKKonbiniCode00030 GenerateBarcodeOfPaymentOKKonbiniCode = "00030"
	GenerateBarcodeOfPaymentOKKonbiniCode00080 GenerateBarcodeOfPaymentOKKonbiniCode = "00080"
	GenerateBarcodeOfPaymentOKKonbiniCode00760 GenerateBarcodeOfPaymentOKKonbiniCode = "00760"
)

// AllValues returns all GenerateBarcodeOfPaymentOKKonbiniCode values.
func (GenerateBarcodeOfPaymentOKKonbiniCode) AllValues() []GenerateBarcodeOfPaymentOKKonbiniCode {
	return []GenerateBarcodeOfPaymentOKKonbiniCode{
		GenerateBarcodeOfPaymentOKKonbiniCode00010,
		GenerateBarcodeOfPaymentOKKonbiniCode00020,
		GenerateBarcodeOfPaymentOKKonbiniCode00030,
		GenerateBarcodeOfPaymentOKKonbiniCode00080,
		GenerateBarcodeOfPaymentOKKonbiniCode00760,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentOKKonbiniCode) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentOKKonbiniCode00010:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00020:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00030:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00080:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00760:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentOKKonbiniCode) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentOKKonbiniCode(data) {
	case GenerateBarcodeOfPaymentOKKonbiniCode00010:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00010
		return nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00020:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00020
		return nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00030:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00030
		return nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00080:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00080
		return nil
	case GenerateBarcodeOfPaymentOKKonbiniCode00760:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00760
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 多重支払フラグ\
// この決済に対して複数回支払いが行われた場合`1`になります。
// - `0`: 0回、または1回の支払いが行われた
// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
type GenerateBarcodeOfPaymentOKOverpaymentFlag string

const (
	GenerateBarcodeOfPaymentOKOverpaymentFlag0 GenerateBarcodeOfPaymentOKOverpaymentFlag = "0"
	GenerateBarcodeOfPaymentOKOverpaymentFlag1 GenerateBarcodeOfPaymentOKOverpaymentFlag = "1"
)

// AllValues returns all GenerateBarcodeOfPaymentOKOverpaymentFlag values.
func (GenerateBarcodeOfPaymentOKOverpaymentFlag) AllValues() []GenerateBarcodeOfPaymentOKOverpaymentFlag {
	return []GenerateBarcodeOfPaymentOKOverpaymentFlag{
		GenerateBarcodeOfPaymentOKOverpaymentFlag0,
		GenerateBarcodeOfPaymentOKOverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentOKOverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentOKOverpaymentFlag0:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKOverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentOKOverpaymentFlag) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentOKOverpaymentFlag(data) {
	case GenerateBarcodeOfPaymentOKOverpaymentFlag0:
		*s = GenerateBarcodeOfPaymentOKOverpaymentFlag0
		return nil
	case GenerateBarcodeOfPaymentOKOverpaymentFlag1:
		*s = GenerateBarcodeOfPaymentOKOverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type GenerateBarcodeOfPaymentOKPayType string

const (
	GenerateBarcodeOfPaymentOKPayTypeCard           GenerateBarcodeOfPaymentOKPayType = "Card"
	GenerateBarcodeOfPaymentOKPayTypeKonbini        GenerateBarcodeOfPaymentOKPayType = "Konbini"
	GenerateBarcodeOfPaymentOKPayTypePaypay         GenerateBarcodeOfPaymentOKPayType = "Paypay"
	GenerateBarcodeOfPaymentOKPayTypeApplepay       GenerateBarcodeOfPaymentOKPayType = "Applepay"
	GenerateBarcodeOfPaymentOKPayTypeDirectdebit    GenerateBarcodeOfPaymentOKPayType = "Directdebit"
	GenerateBarcodeOfPaymentOKPayTypeVirtualaccount GenerateBarcodeOfPaymentOKPayType = "Virtualaccount"
)

// AllValues returns all GenerateBarcodeOfPaymentOKPayType values.
func (GenerateBarcodeOfPaymentOKPayType) AllValues() []GenerateBarcodeOfPaymentOKPayType {
	return []GenerateBarcodeOfPaymentOKPayType{
		GenerateBarcodeOfPaymentOKPayTypeCard,
		GenerateBarcodeOfPaymentOKPayTypeKonbini,
		GenerateBarcodeOfPaymentOKPayTypePaypay,
		GenerateBarcodeOfPaymentOKPayTypeApplepay,
		GenerateBarcodeOfPaymentOKPayTypeDirectdebit,
		GenerateBarcodeOfPaymentOKPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentOKPayType) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentOKPayTypeCard:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKPayTypeKonbini:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKPayTypePaypay:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKPayTypeApplepay:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKPayTypeDirectdebit:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentOKPayType) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentOKPayType(data) {
	case GenerateBarcodeOfPaymentOKPayTypeCard:
		*s = GenerateBarcodeOfPaymentOKPayTypeCard
		return nil
	case GenerateBarcodeOfPaymentOKPayTypeKonbini:
		*s = GenerateBarcodeOfPaymentOKPayTypeKonbini
		return nil
	case GenerateBarcodeOfPaymentOKPayTypePaypay:
		*s = GenerateBarcodeOfPaymentOKPayTypePaypay
		return nil
	case GenerateBarcodeOfPaymentOKPayTypeApplepay:
		*s = GenerateBarcodeOfPaymentOKPayTypeApplepay
		return nil
	case GenerateBarcodeOfPaymentOKPayTypeDirectdebit:
		*s = GenerateBarcodeOfPaymentOKPayTypeDirectdebit
		return nil
	case GenerateBarcodeOfPaymentOKPayTypeVirtualaccount:
		*s = GenerateBarcodeOfPaymentOKPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者の決済処理結果コード
// - `000`: 正常終了
// - `001`: 認証失敗
// - `002`:
// 注文登録には成功したものの端末情報が確認できなかったためバーコード画像の発行なし
// - `003`: 必須項目の不備によるエラー
// - `004`: バーコードデータ内の識別子が不正
// - `005`: バーコードデータ内のメーカーコードが不正
// - `006`: バーコードデータ内の企業識別コードが不正
// - `007`: 支払い期限日時を超過している、または形式が不正
// - `008`: 支払い金額が上限もしくは下限を超えている
// - `009`: 全体チェックデジットが不正
// - `010`: その他の理由によりバーコード画像の発行に失敗
// - `011`: 印紙フラグ（内部データ）不正
// - `012`: 端末情報の指定値の桁数不正
// - `013`: 既に同一のバーコードが登録済み
// - `900`: 予期せぬエラー.
type GenerateBarcodeOfPaymentOKResult string

const (
	GenerateBarcodeOfPaymentOKResult000 GenerateBarcodeOfPaymentOKResult = "000"
	GenerateBarcodeOfPaymentOKResult001 GenerateBarcodeOfPaymentOKResult = "001"
	GenerateBarcodeOfPaymentOKResult002 GenerateBarcodeOfPaymentOKResult = "002"
	GenerateBarcodeOfPaymentOKResult003 GenerateBarcodeOfPaymentOKResult = "003"
	GenerateBarcodeOfPaymentOKResult004 GenerateBarcodeOfPaymentOKResult = "004"
	GenerateBarcodeOfPaymentOKResult005 GenerateBarcodeOfPaymentOKResult = "005"
	GenerateBarcodeOfPaymentOKResult006 GenerateBarcodeOfPaymentOKResult = "006"
	GenerateBarcodeOfPaymentOKResult007 GenerateBarcodeOfPaymentOKResult = "007"
	GenerateBarcodeOfPaymentOKResult008 GenerateBarcodeOfPaymentOKResult = "008"
	GenerateBarcodeOfPaymentOKResult009 GenerateBarcodeOfPaymentOKResult = "009"
	GenerateBarcodeOfPaymentOKResult010 GenerateBarcodeOfPaymentOKResult = "010"
	GenerateBarcodeOfPaymentOKResult011 GenerateBarcodeOfPaymentOKResult = "011"
	GenerateBarcodeOfPaymentOKResult012 GenerateBarcodeOfPaymentOKResult = "012"
	GenerateBarcodeOfPaymentOKResult013 GenerateBarcodeOfPaymentOKResult = "013"
	GenerateBarcodeOfPaymentOKResult900 GenerateBarcodeOfPaymentOKResult = "900"
)

// AllValues returns all GenerateBarcodeOfPaymentOKResult values.
func (GenerateBarcodeOfPaymentOKResult) AllValues() []GenerateBarcodeOfPaymentOKResult {
	return []GenerateBarcodeOfPaymentOKResult{
		GenerateBarcodeOfPaymentOKResult000,
		GenerateBarcodeOfPaymentOKResult001,
		GenerateBarcodeOfPaymentOKResult002,
		GenerateBarcodeOfPaymentOKResult003,
		GenerateBarcodeOfPaymentOKResult004,
		GenerateBarcodeOfPaymentOKResult005,
		GenerateBarcodeOfPaymentOKResult006,
		GenerateBarcodeOfPaymentOKResult007,
		GenerateBarcodeOfPaymentOKResult008,
		GenerateBarcodeOfPaymentOKResult009,
		GenerateBarcodeOfPaymentOKResult010,
		GenerateBarcodeOfPaymentOKResult011,
		GenerateBarcodeOfPaymentOKResult012,
		GenerateBarcodeOfPaymentOKResult013,
		GenerateBarcodeOfPaymentOKResult900,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentOKResult) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentOKResult000:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult001:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult002:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult003:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult004:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult005:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult006:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult007:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult008:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult009:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult010:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult011:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult012:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult013:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKResult900:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentOKResult) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentOKResult(data) {
	case GenerateBarcodeOfPaymentOKResult000:
		*s = GenerateBarcodeOfPaymentOKResult000
		return nil
	case GenerateBarcodeOfPaymentOKResult001:
		*s = GenerateBarcodeOfPaymentOKResult001
		return nil
	case GenerateBarcodeOfPaymentOKResult002:
		*s = GenerateBarcodeOfPaymentOKResult002
		return nil
	case GenerateBarcodeOfPaymentOKResult003:
		*s = GenerateBarcodeOfPaymentOKResult003
		return nil
	case GenerateBarcodeOfPaymentOKResult004:
		*s = GenerateBarcodeOfPaymentOKResult004
		return nil
	case GenerateBarcodeOfPaymentOKResult005:
		*s = GenerateBarcodeOfPaymentOKResult005
		return nil
	case GenerateBarcodeOfPaymentOKResult006:
		*s = GenerateBarcodeOfPaymentOKResult006
		return nil
	case GenerateBarcodeOfPaymentOKResult007:
		*s = GenerateBarcodeOfPaymentOKResult007
		return nil
	case GenerateBarcodeOfPaymentOKResult008:
		*s = GenerateBarcodeOfPaymentOKResult008
		return nil
	case GenerateBarcodeOfPaymentOKResult009:
		*s = GenerateBarcodeOfPaymentOKResult009
		return nil
	case GenerateBarcodeOfPaymentOKResult010:
		*s = GenerateBarcodeOfPaymentOKResult010
		return nil
	case GenerateBarcodeOfPaymentOKResult011:
		*s = GenerateBarcodeOfPaymentOKResult011
		return nil
	case GenerateBarcodeOfPaymentOKResult012:
		*s = GenerateBarcodeOfPaymentOKResult012
		return nil
	case GenerateBarcodeOfPaymentOKResult013:
		*s = GenerateBarcodeOfPaymentOKResult013
		return nil
	case GenerateBarcodeOfPaymentOKResult900:
		*s = GenerateBarcodeOfPaymentOKResult900
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type GenerateBarcodeOfPaymentOKStatus string

const (
	GenerateBarcodeOfPaymentOKStatusUNPROCESSED             GenerateBarcodeOfPaymentOKStatus = "UNPROCESSED"
	GenerateBarcodeOfPaymentOKStatusCHECKED                 GenerateBarcodeOfPaymentOKStatus = "CHECKED"
	GenerateBarcodeOfPaymentOKStatusAUTHORIZED              GenerateBarcodeOfPaymentOKStatus = "AUTHORIZED"
	GenerateBarcodeOfPaymentOKStatusAWAITINGCUSTOMERPAYMENT GenerateBarcodeOfPaymentOKStatus = "AWAITING_CUSTOMER_PAYMENT"
	GenerateBarcodeOfPaymentOKStatusAWAITINGPAYMENTAPPROVAL GenerateBarcodeOfPaymentOKStatus = "AWAITING_PAYMENT_APPROVAL"
	GenerateBarcodeOfPaymentOKStatusCAPTURED                GenerateBarcodeOfPaymentOKStatus = "CAPTURED"
	GenerateBarcodeOfPaymentOKStatusCANCELED                GenerateBarcodeOfPaymentOKStatus = "CANCELED"
	GenerateBarcodeOfPaymentOKStatusEXPIRED                 GenerateBarcodeOfPaymentOKStatus = "EXPIRED"
	GenerateBarcodeOfPaymentOKStatusAUTHENTICATED           GenerateBarcodeOfPaymentOKStatus = "AUTHENTICATED"
	GenerateBarcodeOfPaymentOKStatusFAILED                  GenerateBarcodeOfPaymentOKStatus = "FAILED"
)

// AllValues returns all GenerateBarcodeOfPaymentOKStatus values.
func (GenerateBarcodeOfPaymentOKStatus) AllValues() []GenerateBarcodeOfPaymentOKStatus {
	return []GenerateBarcodeOfPaymentOKStatus{
		GenerateBarcodeOfPaymentOKStatusUNPROCESSED,
		GenerateBarcodeOfPaymentOKStatusCHECKED,
		GenerateBarcodeOfPaymentOKStatusAUTHORIZED,
		GenerateBarcodeOfPaymentOKStatusAWAITINGCUSTOMERPAYMENT,
		GenerateBarcodeOfPaymentOKStatusAWAITINGPAYMENTAPPROVAL,
		GenerateBarcodeOfPaymentOKStatusCAPTURED,
		GenerateBarcodeOfPaymentOKStatusCANCELED,
		GenerateBarcodeOfPaymentOKStatusEXPIRED,
		GenerateBarcodeOfPaymentOKStatusAUTHENTICATED,
		GenerateBarcodeOfPaymentOKStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentOKStatus) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentOKStatusUNPROCESSED:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusCHECKED:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusAUTHORIZED:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusCAPTURED:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusCANCELED:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusEXPIRED:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusAUTHENTICATED:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentOKStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentOKStatus) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentOKStatus(data) {
	case GenerateBarcodeOfPaymentOKStatusUNPROCESSED:
		*s = GenerateBarcodeOfPaymentOKStatusUNPROCESSED
		return nil
	case GenerateBarcodeOfPaymentOKStatusCHECKED:
		*s = GenerateBarcodeOfPaymentOKStatusCHECKED
		return nil
	case GenerateBarcodeOfPaymentOKStatusAUTHORIZED:
		*s = GenerateBarcodeOfPaymentOKStatusAUTHORIZED
		return nil
	case GenerateBarcodeOfPaymentOKStatusAWAITINGCUSTOMERPAYMENT:
		*s = GenerateBarcodeOfPaymentOKStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case GenerateBarcodeOfPaymentOKStatusAWAITINGPAYMENTAPPROVAL:
		*s = GenerateBarcodeOfPaymentOKStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case GenerateBarcodeOfPaymentOKStatusCAPTURED:
		*s = GenerateBarcodeOfPaymentOKStatusCAPTURED
		return nil
	case GenerateBarcodeOfPaymentOKStatusCANCELED:
		*s = GenerateBarcodeOfPaymentOKStatusCANCELED
		return nil
	case GenerateBarcodeOfPaymentOKStatusEXPIRED:
		*s = GenerateBarcodeOfPaymentOKStatusEXPIRED
		return nil
	case GenerateBarcodeOfPaymentOKStatusAUTHENTICATED:
		*s = GenerateBarcodeOfPaymentOKStatusAUTHENTICATED
		return nil
	case GenerateBarcodeOfPaymentOKStatusFAILED:
		*s = GenerateBarcodeOfPaymentOKStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GenerateBarcodeOfPaymentReq struct {
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType     GenerateBarcodeOfPaymentReqPayType     `json:"pay_type"`
	AccessID    string                                 `json:"access_id"`
	DeviceName  string                                 `json:"device_name"`
	WinWidth    string                                 `json:"win_width"`
	WinHeight   string                                 `json:"win_height"`
	PixelRatio  string                                 `json:"pixel_ratio"`
	WinSizeType GenerateBarcodeOfPaymentReqWinSizeType `json:"win_size_type"`
}

// GetPayType returns the value of PayType.
func (s *GenerateBarcodeOfPaymentReq) GetPayType() GenerateBarcodeOfPaymentReqPayType {
	return s.PayType
}

// GetAccessID returns the value of AccessID.
func (s *GenerateBarcodeOfPaymentReq) GetAccessID() string {
	return s.AccessID
}

// GetDeviceName returns the value of DeviceName.
func (s *GenerateBarcodeOfPaymentReq) GetDeviceName() string {
	return s.DeviceName
}

// GetWinWidth returns the value of WinWidth.
func (s *GenerateBarcodeOfPaymentReq) GetWinWidth() string {
	return s.WinWidth
}

// GetWinHeight returns the value of WinHeight.
func (s *GenerateBarcodeOfPaymentReq) GetWinHeight() string {
	return s.WinHeight
}

// GetPixelRatio returns the value of PixelRatio.
func (s *GenerateBarcodeOfPaymentReq) GetPixelRatio() string {
	return s.PixelRatio
}

// GetWinSizeType returns the value of WinSizeType.
func (s *GenerateBarcodeOfPaymentReq) GetWinSizeType() GenerateBarcodeOfPaymentReqWinSizeType {
	return s.WinSizeType
}

// SetPayType sets the value of PayType.
func (s *GenerateBarcodeOfPaymentReq) SetPayType(val GenerateBarcodeOfPaymentReqPayType) {
	s.PayType = val
}

// SetAccessID sets the value of AccessID.
func (s *GenerateBarcodeOfPaymentReq) SetAccessID(val string) {
	s.AccessID = val
}

// SetDeviceName sets the value of DeviceName.
func (s *GenerateBarcodeOfPaymentReq) SetDeviceName(val string) {
	s.DeviceName = val
}

// SetWinWidth sets the value of WinWidth.
func (s *GenerateBarcodeOfPaymentReq) SetWinWidth(val string) {
	s.WinWidth = val
}

// SetWinHeight sets the value of WinHeight.
func (s *GenerateBarcodeOfPaymentReq) SetWinHeight(val string) {
	s.WinHeight = val
}

// SetPixelRatio sets the value of PixelRatio.
func (s *GenerateBarcodeOfPaymentReq) SetPixelRatio(val string) {
	s.PixelRatio = val
}

// SetWinSizeType sets the value of WinSizeType.
func (s *GenerateBarcodeOfPaymentReq) SetWinSizeType(val GenerateBarcodeOfPaymentReqWinSizeType) {
	s.WinSizeType = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type GenerateBarcodeOfPaymentReqPayType string

const (
	GenerateBarcodeOfPaymentReqPayTypeCard           GenerateBarcodeOfPaymentReqPayType = "Card"
	GenerateBarcodeOfPaymentReqPayTypeKonbini        GenerateBarcodeOfPaymentReqPayType = "Konbini"
	GenerateBarcodeOfPaymentReqPayTypePaypay         GenerateBarcodeOfPaymentReqPayType = "Paypay"
	GenerateBarcodeOfPaymentReqPayTypeApplepay       GenerateBarcodeOfPaymentReqPayType = "Applepay"
	GenerateBarcodeOfPaymentReqPayTypeDirectdebit    GenerateBarcodeOfPaymentReqPayType = "Directdebit"
	GenerateBarcodeOfPaymentReqPayTypeVirtualaccount GenerateBarcodeOfPaymentReqPayType = "Virtualaccount"
)

// AllValues returns all GenerateBarcodeOfPaymentReqPayType values.
func (GenerateBarcodeOfPaymentReqPayType) AllValues() []GenerateBarcodeOfPaymentReqPayType {
	return []GenerateBarcodeOfPaymentReqPayType{
		GenerateBarcodeOfPaymentReqPayTypeCard,
		GenerateBarcodeOfPaymentReqPayTypeKonbini,
		GenerateBarcodeOfPaymentReqPayTypePaypay,
		GenerateBarcodeOfPaymentReqPayTypeApplepay,
		GenerateBarcodeOfPaymentReqPayTypeDirectdebit,
		GenerateBarcodeOfPaymentReqPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentReqPayType) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentReqPayTypeCard:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentReqPayTypeKonbini:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentReqPayTypePaypay:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentReqPayTypeApplepay:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentReqPayTypeDirectdebit:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentReqPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentReqPayType) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentReqPayType(data) {
	case GenerateBarcodeOfPaymentReqPayTypeCard:
		*s = GenerateBarcodeOfPaymentReqPayTypeCard
		return nil
	case GenerateBarcodeOfPaymentReqPayTypeKonbini:
		*s = GenerateBarcodeOfPaymentReqPayTypeKonbini
		return nil
	case GenerateBarcodeOfPaymentReqPayTypePaypay:
		*s = GenerateBarcodeOfPaymentReqPayTypePaypay
		return nil
	case GenerateBarcodeOfPaymentReqPayTypeApplepay:
		*s = GenerateBarcodeOfPaymentReqPayTypeApplepay
		return nil
	case GenerateBarcodeOfPaymentReqPayTypeDirectdebit:
		*s = GenerateBarcodeOfPaymentReqPayTypeDirectdebit
		return nil
	case GenerateBarcodeOfPaymentReqPayTypeVirtualaccount:
		*s = GenerateBarcodeOfPaymentReqPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 画面サイズ種別\
// バーコード表示を行うデバイスのピクセルの種類を指定します。
// - `1`: 物理ピクセル（Androidのときはこちらを指定）
// - `2`: CSSピクセル（iPhoneのときはこちらを指定）.
type GenerateBarcodeOfPaymentReqWinSizeType string

const (
	GenerateBarcodeOfPaymentReqWinSizeType1 GenerateBarcodeOfPaymentReqWinSizeType = "1"
	GenerateBarcodeOfPaymentReqWinSizeType2 GenerateBarcodeOfPaymentReqWinSizeType = "2"
)

// AllValues returns all GenerateBarcodeOfPaymentReqWinSizeType values.
func (GenerateBarcodeOfPaymentReqWinSizeType) AllValues() []GenerateBarcodeOfPaymentReqWinSizeType {
	return []GenerateBarcodeOfPaymentReqWinSizeType{
		GenerateBarcodeOfPaymentReqWinSizeType1,
		GenerateBarcodeOfPaymentReqWinSizeType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GenerateBarcodeOfPaymentReqWinSizeType) MarshalText() ([]byte, error) {
	switch s {
	case GenerateBarcodeOfPaymentReqWinSizeType1:
		return []byte(s), nil
	case GenerateBarcodeOfPaymentReqWinSizeType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GenerateBarcodeOfPaymentReqWinSizeType) UnmarshalText(data []byte) error {
	switch GenerateBarcodeOfPaymentReqWinSizeType(data) {
	case GenerateBarcodeOfPaymentReqWinSizeType1:
		*s = GenerateBarcodeOfPaymentReqWinSizeType1
		return nil
	case GenerateBarcodeOfPaymentReqWinSizeType2:
		*s = GenerateBarcodeOfPaymentReqWinSizeType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewNilAuthorizePaymentOKTds2Type returns new NilAuthorizePaymentOKTds2Type with value set to v.
func NewNilAuthorizePaymentOKTds2Type(v AuthorizePaymentOKTds2Type) NilAuthorizePaymentOKTds2Type {
	return NilAuthorizePaymentOKTds2Type{
		Value: v,
	}
}

// NilAuthorizePaymentOKTds2Type is nullable AuthorizePaymentOKTds2Type.
type NilAuthorizePaymentOKTds2Type struct {
	Value AuthorizePaymentOKTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilAuthorizePaymentOKTds2Type) SetTo(v AuthorizePaymentOKTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilAuthorizePaymentOKTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilAuthorizePaymentOKTds2Type) SetToNull() {
	o.Null = true
	var v AuthorizePaymentOKTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilAuthorizePaymentOKTds2Type) Get() (v AuthorizePaymentOKTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilAuthorizePaymentOKTds2Type) Or(d AuthorizePaymentOKTds2Type) AuthorizePaymentOKTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilAuthorizePaymentOKTdsType returns new NilAuthorizePaymentOKTdsType with value set to v.
func NewNilAuthorizePaymentOKTdsType(v AuthorizePaymentOKTdsType) NilAuthorizePaymentOKTdsType {
	return NilAuthorizePaymentOKTdsType{
		Value: v,
	}
}

// NilAuthorizePaymentOKTdsType is nullable AuthorizePaymentOKTdsType.
type NilAuthorizePaymentOKTdsType struct {
	Value AuthorizePaymentOKTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilAuthorizePaymentOKTdsType) SetTo(v AuthorizePaymentOKTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilAuthorizePaymentOKTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilAuthorizePaymentOKTdsType) SetToNull() {
	o.Null = true
	var v AuthorizePaymentOKTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilAuthorizePaymentOKTdsType) Get() (v AuthorizePaymentOKTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilAuthorizePaymentOKTdsType) Or(d AuthorizePaymentOKTdsType) AuthorizePaymentOKTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilBool returns new NilBool with value set to v.
func NewNilBool(v bool) NilBool {
	return NilBool{
		Value: v,
	}
}

// NilBool is nullable bool.
type NilBool struct {
	Value bool
	Null  bool
}

// SetTo sets value to v.
func (o *NilBool) SetTo(v bool) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilBool) SetToNull() {
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCapturePaymentOK0Tds2Type returns new NilCapturePaymentOK0Tds2Type with value set to v.
func NewNilCapturePaymentOK0Tds2Type(v CapturePaymentOK0Tds2Type) NilCapturePaymentOK0Tds2Type {
	return NilCapturePaymentOK0Tds2Type{
		Value: v,
	}
}

// NilCapturePaymentOK0Tds2Type is nullable CapturePaymentOK0Tds2Type.
type NilCapturePaymentOK0Tds2Type struct {
	Value CapturePaymentOK0Tds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilCapturePaymentOK0Tds2Type) SetTo(v CapturePaymentOK0Tds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCapturePaymentOK0Tds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCapturePaymentOK0Tds2Type) SetToNull() {
	o.Null = true
	var v CapturePaymentOK0Tds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCapturePaymentOK0Tds2Type) Get() (v CapturePaymentOK0Tds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCapturePaymentOK0Tds2Type) Or(d CapturePaymentOK0Tds2Type) CapturePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCapturePaymentOK0TdsType returns new NilCapturePaymentOK0TdsType with value set to v.
func NewNilCapturePaymentOK0TdsType(v CapturePaymentOK0TdsType) NilCapturePaymentOK0TdsType {
	return NilCapturePaymentOK0TdsType{
		Value: v,
	}
}

// NilCapturePaymentOK0TdsType is nullable CapturePaymentOK0TdsType.
type NilCapturePaymentOK0TdsType struct {
	Value CapturePaymentOK0TdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCapturePaymentOK0TdsType) SetTo(v CapturePaymentOK0TdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCapturePaymentOK0TdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCapturePaymentOK0TdsType) SetToNull() {
	o.Null = true
	var v CapturePaymentOK0TdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCapturePaymentOK0TdsType) Get() (v CapturePaymentOK0TdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCapturePaymentOK0TdsType) Or(d CapturePaymentOK0TdsType) CapturePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2AddrMatch returns new NilCardRegistrationSessionCreatingRequestTds2AddrMatch with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2AddrMatch(v CardRegistrationSessionCreatingRequestTds2AddrMatch) NilCardRegistrationSessionCreatingRequestTds2AddrMatch {
	return NilCardRegistrationSessionCreatingRequestTds2AddrMatch{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2AddrMatch is nullable CardRegistrationSessionCreatingRequestTds2AddrMatch.
type NilCardRegistrationSessionCreatingRequestTds2AddrMatch struct {
	Value CardRegistrationSessionCreatingRequestTds2AddrMatch
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2AddrMatch) SetTo(v CardRegistrationSessionCreatingRequestTds2AddrMatch) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2AddrMatch) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2AddrMatch) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2AddrMatch
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2AddrMatch) Get() (v CardRegistrationSessionCreatingRequestTds2AddrMatch, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2AddrMatch) Or(d CardRegistrationSessionCreatingRequestTds2AddrMatch) CardRegistrationSessionCreatingRequestTds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe returns new NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe(v CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe {
	return NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe is nullable CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe.
type NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe struct {
	Value CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) SetTo(v CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) Get() (v CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) Or(d CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd returns new NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd(v CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd {
	return NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd is nullable CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd.
type NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd struct {
	Value CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) SetTo(v CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) Get() (v CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) Or(d CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd returns new NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd(v CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd {
	return NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd is nullable CardRegistrationSessionCreatingRequestTds2ReorderItemsInd.
type NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd struct {
	Value CardRegistrationSessionCreatingRequestTds2ReorderItemsInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) SetTo(v CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2ReorderItemsInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) Get() (v CardRegistrationSessionCreatingRequestTds2ReorderItemsInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) Or(d CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) CardRegistrationSessionCreatingRequestTds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2ShipInd returns new NilCardRegistrationSessionCreatingRequestTds2ShipInd with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2ShipInd(v CardRegistrationSessionCreatingRequestTds2ShipInd) NilCardRegistrationSessionCreatingRequestTds2ShipInd {
	return NilCardRegistrationSessionCreatingRequestTds2ShipInd{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2ShipInd is nullable CardRegistrationSessionCreatingRequestTds2ShipInd.
type NilCardRegistrationSessionCreatingRequestTds2ShipInd struct {
	Value CardRegistrationSessionCreatingRequestTds2ShipInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2ShipInd) SetTo(v CardRegistrationSessionCreatingRequestTds2ShipInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2ShipInd) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2ShipInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipInd) Get() (v CardRegistrationSessionCreatingRequestTds2ShipInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipInd) Or(d CardRegistrationSessionCreatingRequestTds2ShipInd) CardRegistrationSessionCreatingRequestTds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2ShipNameInd returns new NilCardRegistrationSessionCreatingRequestTds2ShipNameInd with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2ShipNameInd(v CardRegistrationSessionCreatingRequestTds2ShipNameInd) NilCardRegistrationSessionCreatingRequestTds2ShipNameInd {
	return NilCardRegistrationSessionCreatingRequestTds2ShipNameInd{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2ShipNameInd is nullable CardRegistrationSessionCreatingRequestTds2ShipNameInd.
type NilCardRegistrationSessionCreatingRequestTds2ShipNameInd struct {
	Value CardRegistrationSessionCreatingRequestTds2ShipNameInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) SetTo(v CardRegistrationSessionCreatingRequestTds2ShipNameInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2ShipNameInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) Get() (v CardRegistrationSessionCreatingRequestTds2ShipNameInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) Or(d CardRegistrationSessionCreatingRequestTds2ShipNameInd) CardRegistrationSessionCreatingRequestTds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity returns new NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity(v CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity {
	return NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity is nullable CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity.
type NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity struct {
	Value CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) SetTo(v CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) Get() (v CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) Or(d CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod returns new NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod(v CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod {
	return NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod is nullable CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod.
type NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod struct {
	Value CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) SetTo(v CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) Get() (v CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) Or(d CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTds2Type returns new NilCardRegistrationSessionCreatingRequestTds2Type with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTds2Type(v CardRegistrationSessionCreatingRequestTds2Type) NilCardRegistrationSessionCreatingRequestTds2Type {
	return NilCardRegistrationSessionCreatingRequestTds2Type{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTds2Type is nullable CardRegistrationSessionCreatingRequestTds2Type.
type NilCardRegistrationSessionCreatingRequestTds2Type struct {
	Value CardRegistrationSessionCreatingRequestTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTds2Type) SetTo(v CardRegistrationSessionCreatingRequestTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTds2Type) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTds2Type) Get() (v CardRegistrationSessionCreatingRequestTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTds2Type) Or(d CardRegistrationSessionCreatingRequestTds2Type) CardRegistrationSessionCreatingRequestTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCardRegistrationSessionCreatingRequestTdsType returns new NilCardRegistrationSessionCreatingRequestTdsType with value set to v.
func NewNilCardRegistrationSessionCreatingRequestTdsType(v CardRegistrationSessionCreatingRequestTdsType) NilCardRegistrationSessionCreatingRequestTdsType {
	return NilCardRegistrationSessionCreatingRequestTdsType{
		Value: v,
	}
}

// NilCardRegistrationSessionCreatingRequestTdsType is nullable CardRegistrationSessionCreatingRequestTdsType.
type NilCardRegistrationSessionCreatingRequestTdsType struct {
	Value CardRegistrationSessionCreatingRequestTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCardRegistrationSessionCreatingRequestTdsType) SetTo(v CardRegistrationSessionCreatingRequestTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCardRegistrationSessionCreatingRequestTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCardRegistrationSessionCreatingRequestTdsType) SetToNull() {
	o.Null = true
	var v CardRegistrationSessionCreatingRequestTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCardRegistrationSessionCreatingRequestTdsType) Get() (v CardRegistrationSessionCreatingRequestTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCardRegistrationSessionCreatingRequestTdsType) Or(d CardRegistrationSessionCreatingRequestTdsType) CardRegistrationSessionCreatingRequestTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilChangeAmountOfPaymentOK0Tds2Type returns new NilChangeAmountOfPaymentOK0Tds2Type with value set to v.
func NewNilChangeAmountOfPaymentOK0Tds2Type(v ChangeAmountOfPaymentOK0Tds2Type) NilChangeAmountOfPaymentOK0Tds2Type {
	return NilChangeAmountOfPaymentOK0Tds2Type{
		Value: v,
	}
}

// NilChangeAmountOfPaymentOK0Tds2Type is nullable ChangeAmountOfPaymentOK0Tds2Type.
type NilChangeAmountOfPaymentOK0Tds2Type struct {
	Value ChangeAmountOfPaymentOK0Tds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilChangeAmountOfPaymentOK0Tds2Type) SetTo(v ChangeAmountOfPaymentOK0Tds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilChangeAmountOfPaymentOK0Tds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilChangeAmountOfPaymentOK0Tds2Type) SetToNull() {
	o.Null = true
	var v ChangeAmountOfPaymentOK0Tds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilChangeAmountOfPaymentOK0Tds2Type) Get() (v ChangeAmountOfPaymentOK0Tds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilChangeAmountOfPaymentOK0Tds2Type) Or(d ChangeAmountOfPaymentOK0Tds2Type) ChangeAmountOfPaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilChangeAmountOfPaymentOK0TdsType returns new NilChangeAmountOfPaymentOK0TdsType with value set to v.
func NewNilChangeAmountOfPaymentOK0TdsType(v ChangeAmountOfPaymentOK0TdsType) NilChangeAmountOfPaymentOK0TdsType {
	return NilChangeAmountOfPaymentOK0TdsType{
		Value: v,
	}
}

// NilChangeAmountOfPaymentOK0TdsType is nullable ChangeAmountOfPaymentOK0TdsType.
type NilChangeAmountOfPaymentOK0TdsType struct {
	Value ChangeAmountOfPaymentOK0TdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilChangeAmountOfPaymentOK0TdsType) SetTo(v ChangeAmountOfPaymentOK0TdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilChangeAmountOfPaymentOK0TdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilChangeAmountOfPaymentOK0TdsType) SetToNull() {
	o.Null = true
	var v ChangeAmountOfPaymentOK0TdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilChangeAmountOfPaymentOK0TdsType) Get() (v ChangeAmountOfPaymentOK0TdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilChangeAmountOfPaymentOK0TdsType) Or(d ChangeAmountOfPaymentOK0TdsType) ChangeAmountOfPaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContractsRetrievingResponseContractDetailRepresentativeGender returns new NilContractsRetrievingResponseContractDetailRepresentativeGender with value set to v.
func NewNilContractsRetrievingResponseContractDetailRepresentativeGender(v ContractsRetrievingResponseContractDetailRepresentativeGender) NilContractsRetrievingResponseContractDetailRepresentativeGender {
	return NilContractsRetrievingResponseContractDetailRepresentativeGender{
		Value: v,
	}
}

// NilContractsRetrievingResponseContractDetailRepresentativeGender is nullable ContractsRetrievingResponseContractDetailRepresentativeGender.
type NilContractsRetrievingResponseContractDetailRepresentativeGender struct {
	Value ContractsRetrievingResponseContractDetailRepresentativeGender
	Null  bool
}

// SetTo sets value to v.
func (o *NilContractsRetrievingResponseContractDetailRepresentativeGender) SetTo(v ContractsRetrievingResponseContractDetailRepresentativeGender) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContractsRetrievingResponseContractDetailRepresentativeGender) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilContractsRetrievingResponseContractDetailRepresentativeGender) SetToNull() {
	o.Null = true
	var v ContractsRetrievingResponseContractDetailRepresentativeGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContractsRetrievingResponseContractDetailRepresentativeGender) Get() (v ContractsRetrievingResponseContractDetailRepresentativeGender, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContractsRetrievingResponseContractDetailRepresentativeGender) Or(d ContractsRetrievingResponseContractDetailRepresentativeGender) ContractsRetrievingResponseContractDetailRepresentativeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContractsRetrievingResponseSharedCustomerFlag returns new NilContractsRetrievingResponseSharedCustomerFlag with value set to v.
func NewNilContractsRetrievingResponseSharedCustomerFlag(v ContractsRetrievingResponseSharedCustomerFlag) NilContractsRetrievingResponseSharedCustomerFlag {
	return NilContractsRetrievingResponseSharedCustomerFlag{
		Value: v,
	}
}

// NilContractsRetrievingResponseSharedCustomerFlag is nullable ContractsRetrievingResponseSharedCustomerFlag.
type NilContractsRetrievingResponseSharedCustomerFlag struct {
	Value ContractsRetrievingResponseSharedCustomerFlag
	Null  bool
}

// SetTo sets value to v.
func (o *NilContractsRetrievingResponseSharedCustomerFlag) SetTo(v ContractsRetrievingResponseSharedCustomerFlag) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContractsRetrievingResponseSharedCustomerFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContractsRetrievingResponseSharedCustomerFlag) SetToNull() {
	o.Null = true
	var v ContractsRetrievingResponseSharedCustomerFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContractsRetrievingResponseSharedCustomerFlag) Get() (v ContractsRetrievingResponseSharedCustomerFlag, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContractsRetrievingResponseSharedCustomerFlag) Or(d ContractsRetrievingResponseSharedCustomerFlag) ContractsRetrievingResponseSharedCustomerFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilContractsRetrievingResponseShopType returns new NilContractsRetrievingResponseShopType with value set to v.
func NewNilContractsRetrievingResponseShopType(v ContractsRetrievingResponseShopType) NilContractsRetrievingResponseShopType {
	return NilContractsRetrievingResponseShopType{
		Value: v,
	}
}

// NilContractsRetrievingResponseShopType is nullable ContractsRetrievingResponseShopType.
type NilContractsRetrievingResponseShopType struct {
	Value ContractsRetrievingResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilContractsRetrievingResponseShopType) SetTo(v ContractsRetrievingResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilContractsRetrievingResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilContractsRetrievingResponseShopType) SetToNull() {
	o.Null = true
	var v ContractsRetrievingResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilContractsRetrievingResponseShopType) Get() (v ContractsRetrievingResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilContractsRetrievingResponseShopType) Or(d ContractsRetrievingResponseShopType) ContractsRetrievingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreatePaymentOK0Tds2Type returns new NilCreatePaymentOK0Tds2Type with value set to v.
func NewNilCreatePaymentOK0Tds2Type(v CreatePaymentOK0Tds2Type) NilCreatePaymentOK0Tds2Type {
	return NilCreatePaymentOK0Tds2Type{
		Value: v,
	}
}

// NilCreatePaymentOK0Tds2Type is nullable CreatePaymentOK0Tds2Type.
type NilCreatePaymentOK0Tds2Type struct {
	Value CreatePaymentOK0Tds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreatePaymentOK0Tds2Type) SetTo(v CreatePaymentOK0Tds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreatePaymentOK0Tds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreatePaymentOK0Tds2Type) SetToNull() {
	o.Null = true
	var v CreatePaymentOK0Tds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreatePaymentOK0Tds2Type) Get() (v CreatePaymentOK0Tds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreatePaymentOK0Tds2Type) Or(d CreatePaymentOK0Tds2Type) CreatePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreatePaymentOK0TdsType returns new NilCreatePaymentOK0TdsType with value set to v.
func NewNilCreatePaymentOK0TdsType(v CreatePaymentOK0TdsType) NilCreatePaymentOK0TdsType {
	return NilCreatePaymentOK0TdsType{
		Value: v,
	}
}

// NilCreatePaymentOK0TdsType is nullable CreatePaymentOK0TdsType.
type NilCreatePaymentOK0TdsType struct {
	Value CreatePaymentOK0TdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreatePaymentOK0TdsType) SetTo(v CreatePaymentOK0TdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreatePaymentOK0TdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreatePaymentOK0TdsType) SetToNull() {
	o.Null = true
	var v CreatePaymentOK0TdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreatePaymentOK0TdsType) Get() (v CreatePaymentOK0TdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreatePaymentOK0TdsType) Or(d CreatePaymentOK0TdsType) CreatePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreatePaymentReq0Tds2Type returns new NilCreatePaymentReq0Tds2Type with value set to v.
func NewNilCreatePaymentReq0Tds2Type(v CreatePaymentReq0Tds2Type) NilCreatePaymentReq0Tds2Type {
	return NilCreatePaymentReq0Tds2Type{
		Value: v,
	}
}

// NilCreatePaymentReq0Tds2Type is nullable CreatePaymentReq0Tds2Type.
type NilCreatePaymentReq0Tds2Type struct {
	Value CreatePaymentReq0Tds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreatePaymentReq0Tds2Type) SetTo(v CreatePaymentReq0Tds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreatePaymentReq0Tds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreatePaymentReq0Tds2Type) SetToNull() {
	o.Null = true
	var v CreatePaymentReq0Tds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreatePaymentReq0Tds2Type) Get() (v CreatePaymentReq0Tds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreatePaymentReq0Tds2Type) Or(d CreatePaymentReq0Tds2Type) CreatePaymentReq0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCreatePaymentReq0TdsType returns new NilCreatePaymentReq0TdsType with value set to v.
func NewNilCreatePaymentReq0TdsType(v CreatePaymentReq0TdsType) NilCreatePaymentReq0TdsType {
	return NilCreatePaymentReq0TdsType{
		Value: v,
	}
}

// NilCreatePaymentReq0TdsType is nullable CreatePaymentReq0TdsType.
type NilCreatePaymentReq0TdsType struct {
	Value CreatePaymentReq0TdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreatePaymentReq0TdsType) SetTo(v CreatePaymentReq0TdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreatePaymentReq0TdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreatePaymentReq0TdsType) SetToNull() {
	o.Null = true
	var v CreatePaymentReq0TdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreatePaymentReq0TdsType) Get() (v CreatePaymentReq0TdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreatePaymentReq0TdsType) Or(d CreatePaymentReq0TdsType) CreatePaymentReq0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch returns new NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch(v CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch {
	return NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch is nullable CustomerPaymentMethodCreatingRequestCardTds2AddrMatch.
type NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2AddrMatch
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2AddrMatch
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Get() (v CustomerPaymentMethodCreatingRequestCardTds2AddrMatch, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Or(d CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) CustomerPaymentMethodCreatingRequestCardTds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe returns new NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe(v CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe {
	return NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe is nullable CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe.
type NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Get() (v CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Or(d CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd returns new NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd(v CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd {
	return NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd is nullable CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd.
type NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Get() (v CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Or(d CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd returns new NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd(v CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd {
	return NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd is nullable CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd.
type NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Get() (v CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Or(d CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd returns new NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd(v CustomerPaymentMethodCreatingRequestCardTds2ShipInd) NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd {
	return NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd is nullable CustomerPaymentMethodCreatingRequestCardTds2ShipInd.
type NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2ShipInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2ShipInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2ShipInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Get() (v CustomerPaymentMethodCreatingRequestCardTds2ShipInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Or(d CustomerPaymentMethodCreatingRequestCardTds2ShipInd) CustomerPaymentMethodCreatingRequestCardTds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd returns new NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd(v CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd {
	return NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd is nullable CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd.
type NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Get() (v CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Or(d CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity returns new NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity(v CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity {
	return NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity is nullable CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity.
type NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Get() (v CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Or(d CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod returns new NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod(v CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod {
	return NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod is nullable CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod.
type NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Get() (v CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Or(d CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTds2Type returns new NilCustomerPaymentMethodCreatingRequestCardTds2Type with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTds2Type(v CustomerPaymentMethodCreatingRequestCardTds2Type) NilCustomerPaymentMethodCreatingRequestCardTds2Type {
	return NilCustomerPaymentMethodCreatingRequestCardTds2Type{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTds2Type is nullable CustomerPaymentMethodCreatingRequestCardTds2Type.
type NilCustomerPaymentMethodCreatingRequestCardTds2Type struct {
	Value CustomerPaymentMethodCreatingRequestCardTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2Type) SetTo(v CustomerPaymentMethodCreatingRequestCardTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2Type) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2Type) Get() (v CustomerPaymentMethodCreatingRequestCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2Type) Or(d CustomerPaymentMethodCreatingRequestCardTds2Type) CustomerPaymentMethodCreatingRequestCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestCardTdsType returns new NilCustomerPaymentMethodCreatingRequestCardTdsType with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestCardTdsType(v CustomerPaymentMethodCreatingRequestCardTdsType) NilCustomerPaymentMethodCreatingRequestCardTdsType {
	return NilCustomerPaymentMethodCreatingRequestCardTdsType{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestCardTdsType is nullable CustomerPaymentMethodCreatingRequestCardTdsType.
type NilCustomerPaymentMethodCreatingRequestCardTdsType struct {
	Value CustomerPaymentMethodCreatingRequestCardTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestCardTdsType) SetTo(v CustomerPaymentMethodCreatingRequestCardTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestCardTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestCardTdsType) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCardTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestCardTdsType) Get() (v CustomerPaymentMethodCreatingRequestCardTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestCardTdsType) Or(d CustomerPaymentMethodCreatingRequestCardTdsType) CustomerPaymentMethodCreatingRequestCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType returns new NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType(v CustomerPaymentMethodCreatingRequestDirectdebitAccountType) NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType {
	return NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType is nullable CustomerPaymentMethodCreatingRequestDirectdebitAccountType.
type NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType struct {
	Value CustomerPaymentMethodCreatingRequestDirectdebitAccountType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) SetTo(v CustomerPaymentMethodCreatingRequestDirectdebitAccountType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestDirectdebitAccountType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Get() (v CustomerPaymentMethodCreatingRequestDirectdebitAccountType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Or(d CustomerPaymentMethodCreatingRequestDirectdebitAccountType) CustomerPaymentMethodCreatingRequestDirectdebitAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType returns new NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType with value set to v.
func NewNilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType(v CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType {
	return NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType is nullable CustomerPaymentMethodCreatingRequestDirectdebitApplicationType.
type NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType struct {
	Value CustomerPaymentMethodCreatingRequestDirectdebitApplicationType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) SetTo(v CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestDirectdebitApplicationType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) Get() (v CustomerPaymentMethodCreatingRequestDirectdebitApplicationType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) Or(d CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) CustomerPaymentMethodCreatingRequestDirectdebitApplicationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingResponseCardBrand returns new NilCustomerPaymentMethodCreatingResponseCardBrand with value set to v.
func NewNilCustomerPaymentMethodCreatingResponseCardBrand(v CustomerPaymentMethodCreatingResponseCardBrand) NilCustomerPaymentMethodCreatingResponseCardBrand {
	return NilCustomerPaymentMethodCreatingResponseCardBrand{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingResponseCardBrand is nullable CustomerPaymentMethodCreatingResponseCardBrand.
type NilCustomerPaymentMethodCreatingResponseCardBrand struct {
	Value CustomerPaymentMethodCreatingResponseCardBrand
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingResponseCardBrand) SetTo(v CustomerPaymentMethodCreatingResponseCardBrand) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingResponseCardBrand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingResponseCardBrand) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseCardBrand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingResponseCardBrand) Get() (v CustomerPaymentMethodCreatingResponseCardBrand, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingResponseCardBrand) Or(d CustomerPaymentMethodCreatingResponseCardBrand) CustomerPaymentMethodCreatingResponseCardBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingResponseCardTds2Type returns new NilCustomerPaymentMethodCreatingResponseCardTds2Type with value set to v.
func NewNilCustomerPaymentMethodCreatingResponseCardTds2Type(v CustomerPaymentMethodCreatingResponseCardTds2Type) NilCustomerPaymentMethodCreatingResponseCardTds2Type {
	return NilCustomerPaymentMethodCreatingResponseCardTds2Type{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingResponseCardTds2Type is nullable CustomerPaymentMethodCreatingResponseCardTds2Type.
type NilCustomerPaymentMethodCreatingResponseCardTds2Type struct {
	Value CustomerPaymentMethodCreatingResponseCardTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingResponseCardTds2Type) SetTo(v CustomerPaymentMethodCreatingResponseCardTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingResponseCardTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingResponseCardTds2Type) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingResponseCardTds2Type) Get() (v CustomerPaymentMethodCreatingResponseCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingResponseCardTds2Type) Or(d CustomerPaymentMethodCreatingResponseCardTds2Type) CustomerPaymentMethodCreatingResponseCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingResponseCardTdsType returns new NilCustomerPaymentMethodCreatingResponseCardTdsType with value set to v.
func NewNilCustomerPaymentMethodCreatingResponseCardTdsType(v CustomerPaymentMethodCreatingResponseCardTdsType) NilCustomerPaymentMethodCreatingResponseCardTdsType {
	return NilCustomerPaymentMethodCreatingResponseCardTdsType{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingResponseCardTdsType is nullable CustomerPaymentMethodCreatingResponseCardTdsType.
type NilCustomerPaymentMethodCreatingResponseCardTdsType struct {
	Value CustomerPaymentMethodCreatingResponseCardTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingResponseCardTdsType) SetTo(v CustomerPaymentMethodCreatingResponseCardTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingResponseCardTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingResponseCardTdsType) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseCardTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingResponseCardTdsType) Get() (v CustomerPaymentMethodCreatingResponseCardTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingResponseCardTdsType) Or(d CustomerPaymentMethodCreatingResponseCardTdsType) CustomerPaymentMethodCreatingResponseCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodCreatingResponseCardType returns new NilCustomerPaymentMethodCreatingResponseCardType with value set to v.
func NewNilCustomerPaymentMethodCreatingResponseCardType(v CustomerPaymentMethodCreatingResponseCardType) NilCustomerPaymentMethodCreatingResponseCardType {
	return NilCustomerPaymentMethodCreatingResponseCardType{
		Value: v,
	}
}

// NilCustomerPaymentMethodCreatingResponseCardType is nullable CustomerPaymentMethodCreatingResponseCardType.
type NilCustomerPaymentMethodCreatingResponseCardType struct {
	Value CustomerPaymentMethodCreatingResponseCardType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodCreatingResponseCardType) SetTo(v CustomerPaymentMethodCreatingResponseCardType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodCreatingResponseCardType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodCreatingResponseCardType) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseCardType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodCreatingResponseCardType) Get() (v CustomerPaymentMethodCreatingResponseCardType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodCreatingResponseCardType) Or(d CustomerPaymentMethodCreatingResponseCardType) CustomerPaymentMethodCreatingResponseCardType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodRetrievingResponseCardBrand returns new NilCustomerPaymentMethodRetrievingResponseCardBrand with value set to v.
func NewNilCustomerPaymentMethodRetrievingResponseCardBrand(v CustomerPaymentMethodRetrievingResponseCardBrand) NilCustomerPaymentMethodRetrievingResponseCardBrand {
	return NilCustomerPaymentMethodRetrievingResponseCardBrand{
		Value: v,
	}
}

// NilCustomerPaymentMethodRetrievingResponseCardBrand is nullable CustomerPaymentMethodRetrievingResponseCardBrand.
type NilCustomerPaymentMethodRetrievingResponseCardBrand struct {
	Value CustomerPaymentMethodRetrievingResponseCardBrand
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodRetrievingResponseCardBrand) SetTo(v CustomerPaymentMethodRetrievingResponseCardBrand) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodRetrievingResponseCardBrand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodRetrievingResponseCardBrand) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseCardBrand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodRetrievingResponseCardBrand) Get() (v CustomerPaymentMethodRetrievingResponseCardBrand, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodRetrievingResponseCardBrand) Or(d CustomerPaymentMethodRetrievingResponseCardBrand) CustomerPaymentMethodRetrievingResponseCardBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodRetrievingResponseCardTds2Type returns new NilCustomerPaymentMethodRetrievingResponseCardTds2Type with value set to v.
func NewNilCustomerPaymentMethodRetrievingResponseCardTds2Type(v CustomerPaymentMethodRetrievingResponseCardTds2Type) NilCustomerPaymentMethodRetrievingResponseCardTds2Type {
	return NilCustomerPaymentMethodRetrievingResponseCardTds2Type{
		Value: v,
	}
}

// NilCustomerPaymentMethodRetrievingResponseCardTds2Type is nullable CustomerPaymentMethodRetrievingResponseCardTds2Type.
type NilCustomerPaymentMethodRetrievingResponseCardTds2Type struct {
	Value CustomerPaymentMethodRetrievingResponseCardTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodRetrievingResponseCardTds2Type) SetTo(v CustomerPaymentMethodRetrievingResponseCardTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodRetrievingResponseCardTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodRetrievingResponseCardTds2Type) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodRetrievingResponseCardTds2Type) Get() (v CustomerPaymentMethodRetrievingResponseCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodRetrievingResponseCardTds2Type) Or(d CustomerPaymentMethodRetrievingResponseCardTds2Type) CustomerPaymentMethodRetrievingResponseCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodRetrievingResponseCardTdsType returns new NilCustomerPaymentMethodRetrievingResponseCardTdsType with value set to v.
func NewNilCustomerPaymentMethodRetrievingResponseCardTdsType(v CustomerPaymentMethodRetrievingResponseCardTdsType) NilCustomerPaymentMethodRetrievingResponseCardTdsType {
	return NilCustomerPaymentMethodRetrievingResponseCardTdsType{
		Value: v,
	}
}

// NilCustomerPaymentMethodRetrievingResponseCardTdsType is nullable CustomerPaymentMethodRetrievingResponseCardTdsType.
type NilCustomerPaymentMethodRetrievingResponseCardTdsType struct {
	Value CustomerPaymentMethodRetrievingResponseCardTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodRetrievingResponseCardTdsType) SetTo(v CustomerPaymentMethodRetrievingResponseCardTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodRetrievingResponseCardTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodRetrievingResponseCardTdsType) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseCardTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodRetrievingResponseCardTdsType) Get() (v CustomerPaymentMethodRetrievingResponseCardTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodRetrievingResponseCardTdsType) Or(d CustomerPaymentMethodRetrievingResponseCardTdsType) CustomerPaymentMethodRetrievingResponseCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilCustomerPaymentMethodRetrievingResponseCardType returns new NilCustomerPaymentMethodRetrievingResponseCardType with value set to v.
func NewNilCustomerPaymentMethodRetrievingResponseCardType(v CustomerPaymentMethodRetrievingResponseCardType) NilCustomerPaymentMethodRetrievingResponseCardType {
	return NilCustomerPaymentMethodRetrievingResponseCardType{
		Value: v,
	}
}

// NilCustomerPaymentMethodRetrievingResponseCardType is nullable CustomerPaymentMethodRetrievingResponseCardType.
type NilCustomerPaymentMethodRetrievingResponseCardType struct {
	Value CustomerPaymentMethodRetrievingResponseCardType
	Null  bool
}

// SetTo sets value to v.
func (o *NilCustomerPaymentMethodRetrievingResponseCardType) SetTo(v CustomerPaymentMethodRetrievingResponseCardType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCustomerPaymentMethodRetrievingResponseCardType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCustomerPaymentMethodRetrievingResponseCardType) SetToNull() {
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseCardType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCustomerPaymentMethodRetrievingResponseCardType) Get() (v CustomerPaymentMethodRetrievingResponseCardType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCustomerPaymentMethodRetrievingResponseCardType) Or(d CustomerPaymentMethodRetrievingResponseCardType) CustomerPaymentMethodRetrievingResponseCardType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoRetrievingResponseContractDetailRepresentativeGender returns new NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender with value set to v.
func NewNilExaminationInfoRetrievingResponseContractDetailRepresentativeGender(v ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender {
	return NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender{
		Value: v,
	}
}

// NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender is nullable ExaminationInfoRetrievingResponseContractDetailRepresentativeGender.
type NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender struct {
	Value ExaminationInfoRetrievingResponseContractDetailRepresentativeGender
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) SetTo(v ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) SetToNull() {
	o.Null = true
	var v ExaminationInfoRetrievingResponseContractDetailRepresentativeGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) Get() (v ExaminationInfoRetrievingResponseContractDetailRepresentativeGender, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) Or(d ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) ExaminationInfoRetrievingResponseContractDetailRepresentativeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoRetrievingResponseShopType returns new NilExaminationInfoRetrievingResponseShopType with value set to v.
func NewNilExaminationInfoRetrievingResponseShopType(v ExaminationInfoRetrievingResponseShopType) NilExaminationInfoRetrievingResponseShopType {
	return NilExaminationInfoRetrievingResponseShopType{
		Value: v,
	}
}

// NilExaminationInfoRetrievingResponseShopType is nullable ExaminationInfoRetrievingResponseShopType.
type NilExaminationInfoRetrievingResponseShopType struct {
	Value ExaminationInfoRetrievingResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoRetrievingResponseShopType) SetTo(v ExaminationInfoRetrievingResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoRetrievingResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExaminationInfoRetrievingResponseShopType) SetToNull() {
	o.Null = true
	var v ExaminationInfoRetrievingResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoRetrievingResponseShopType) Get() (v ExaminationInfoRetrievingResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoRetrievingResponseShopType) Or(d ExaminationInfoRetrievingResponseShopType) ExaminationInfoRetrievingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoUpdatingRequestContractDetailRepresentativeGender returns new NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender with value set to v.
func NewNilExaminationInfoUpdatingRequestContractDetailRepresentativeGender(v ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender {
	return NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender{
		Value: v,
	}
}

// NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender is nullable ExaminationInfoUpdatingRequestContractDetailRepresentativeGender.
type NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender struct {
	Value ExaminationInfoUpdatingRequestContractDetailRepresentativeGender
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) SetTo(v ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) SetToNull() {
	o.Null = true
	var v ExaminationInfoUpdatingRequestContractDetailRepresentativeGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) Get() (v ExaminationInfoUpdatingRequestContractDetailRepresentativeGender, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) Or(d ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) ExaminationInfoUpdatingRequestContractDetailRepresentativeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoUpdatingResponseContractDetailRepresentativeGender returns new NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender with value set to v.
func NewNilExaminationInfoUpdatingResponseContractDetailRepresentativeGender(v ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender {
	return NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender{
		Value: v,
	}
}

// NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender is nullable ExaminationInfoUpdatingResponseContractDetailRepresentativeGender.
type NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender struct {
	Value ExaminationInfoUpdatingResponseContractDetailRepresentativeGender
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) SetTo(v ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) SetToNull() {
	o.Null = true
	var v ExaminationInfoUpdatingResponseContractDetailRepresentativeGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) Get() (v ExaminationInfoUpdatingResponseContractDetailRepresentativeGender, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) Or(d ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) ExaminationInfoUpdatingResponseContractDetailRepresentativeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoUpdatingResponseShopType returns new NilExaminationInfoUpdatingResponseShopType with value set to v.
func NewNilExaminationInfoUpdatingResponseShopType(v ExaminationInfoUpdatingResponseShopType) NilExaminationInfoUpdatingResponseShopType {
	return NilExaminationInfoUpdatingResponseShopType{
		Value: v,
	}
}

// NilExaminationInfoUpdatingResponseShopType is nullable ExaminationInfoUpdatingResponseShopType.
type NilExaminationInfoUpdatingResponseShopType struct {
	Value ExaminationInfoUpdatingResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoUpdatingResponseShopType) SetTo(v ExaminationInfoUpdatingResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoUpdatingResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExaminationInfoUpdatingResponseShopType) SetToNull() {
	o.Null = true
	var v ExaminationInfoUpdatingResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoUpdatingResponseShopType) Get() (v ExaminationInfoUpdatingResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoUpdatingResponseShopType) Or(d ExaminationInfoUpdatingResponseShopType) ExaminationInfoUpdatingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender returns new NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender with value set to v.
func NewNilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender(v ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender {
	return NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender{
		Value: v,
	}
}

// NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender is nullable ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender.
type NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender struct {
	Value ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) SetTo(v ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) SetToNull() {
	o.Null = true
	var v ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) Get() (v ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) Or(d ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender returns new NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender with value set to v.
func NewNilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender(v ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender {
	return NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender{
		Value: v,
	}
}

// NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender is nullable ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender.
type NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender struct {
	Value ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) SetTo(v ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) SetToNull() {
	o.Null = true
	var v ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) Get() (v ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) Or(d ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender returns new NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender with value set to v.
func NewNilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender(v ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender {
	return NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender{
		Value: v,
	}
}

// NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender is nullable ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender.
type NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender struct {
	Value ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender
	Null  bool
}

// SetTo sets value to v.
func (o *NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) SetTo(v ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) SetToNull() {
	o.Null = true
	var v ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) Get() (v ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) Or(d ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentAfter3DSecureOKTds2Type returns new NilExecutePaymentAfter3DSecureOKTds2Type with value set to v.
func NewNilExecutePaymentAfter3DSecureOKTds2Type(v ExecutePaymentAfter3DSecureOKTds2Type) NilExecutePaymentAfter3DSecureOKTds2Type {
	return NilExecutePaymentAfter3DSecureOKTds2Type{
		Value: v,
	}
}

// NilExecutePaymentAfter3DSecureOKTds2Type is nullable ExecutePaymentAfter3DSecureOKTds2Type.
type NilExecutePaymentAfter3DSecureOKTds2Type struct {
	Value ExecutePaymentAfter3DSecureOKTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentAfter3DSecureOKTds2Type) SetTo(v ExecutePaymentAfter3DSecureOKTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentAfter3DSecureOKTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentAfter3DSecureOKTds2Type) SetToNull() {
	o.Null = true
	var v ExecutePaymentAfter3DSecureOKTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentAfter3DSecureOKTds2Type) Get() (v ExecutePaymentAfter3DSecureOKTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentAfter3DSecureOKTds2Type) Or(d ExecutePaymentAfter3DSecureOKTds2Type) ExecutePaymentAfter3DSecureOKTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentAfter3DSecureOKTdsType returns new NilExecutePaymentAfter3DSecureOKTdsType with value set to v.
func NewNilExecutePaymentAfter3DSecureOKTdsType(v ExecutePaymentAfter3DSecureOKTdsType) NilExecutePaymentAfter3DSecureOKTdsType {
	return NilExecutePaymentAfter3DSecureOKTdsType{
		Value: v,
	}
}

// NilExecutePaymentAfter3DSecureOKTdsType is nullable ExecutePaymentAfter3DSecureOKTdsType.
type NilExecutePaymentAfter3DSecureOKTdsType struct {
	Value ExecutePaymentAfter3DSecureOKTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentAfter3DSecureOKTdsType) SetTo(v ExecutePaymentAfter3DSecureOKTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentAfter3DSecureOKTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentAfter3DSecureOKTdsType) SetToNull() {
	o.Null = true
	var v ExecutePaymentAfter3DSecureOKTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentAfter3DSecureOKTdsType) Get() (v ExecutePaymentAfter3DSecureOKTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentAfter3DSecureOKTdsType) Or(d ExecutePaymentAfter3DSecureOKTdsType) ExecutePaymentAfter3DSecureOKTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentOK0Tds2Type returns new NilExecutePaymentOK0Tds2Type with value set to v.
func NewNilExecutePaymentOK0Tds2Type(v ExecutePaymentOK0Tds2Type) NilExecutePaymentOK0Tds2Type {
	return NilExecutePaymentOK0Tds2Type{
		Value: v,
	}
}

// NilExecutePaymentOK0Tds2Type is nullable ExecutePaymentOK0Tds2Type.
type NilExecutePaymentOK0Tds2Type struct {
	Value ExecutePaymentOK0Tds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentOK0Tds2Type) SetTo(v ExecutePaymentOK0Tds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentOK0Tds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentOK0Tds2Type) SetToNull() {
	o.Null = true
	var v ExecutePaymentOK0Tds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentOK0Tds2Type) Get() (v ExecutePaymentOK0Tds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentOK0Tds2Type) Or(d ExecutePaymentOK0Tds2Type) ExecutePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentOK0TdsType returns new NilExecutePaymentOK0TdsType with value set to v.
func NewNilExecutePaymentOK0TdsType(v ExecutePaymentOK0TdsType) NilExecutePaymentOK0TdsType {
	return NilExecutePaymentOK0TdsType{
		Value: v,
	}
}

// NilExecutePaymentOK0TdsType is nullable ExecutePaymentOK0TdsType.
type NilExecutePaymentOK0TdsType struct {
	Value ExecutePaymentOK0TdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentOK0TdsType) SetTo(v ExecutePaymentOK0TdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentOK0TdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentOK0TdsType) SetToNull() {
	o.Null = true
	var v ExecutePaymentOK0TdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentOK0TdsType) Get() (v ExecutePaymentOK0TdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentOK0TdsType) Or(d ExecutePaymentOK0TdsType) ExecutePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2AddrMatch returns new NilExecutePaymentReq0Tds2AddrMatch with value set to v.
func NewNilExecutePaymentReq0Tds2AddrMatch(v ExecutePaymentReq0Tds2AddrMatch) NilExecutePaymentReq0Tds2AddrMatch {
	return NilExecutePaymentReq0Tds2AddrMatch{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2AddrMatch is nullable ExecutePaymentReq0Tds2AddrMatch.
type NilExecutePaymentReq0Tds2AddrMatch struct {
	Value ExecutePaymentReq0Tds2AddrMatch
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2AddrMatch) SetTo(v ExecutePaymentReq0Tds2AddrMatch) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2AddrMatch) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2AddrMatch) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2AddrMatch
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2AddrMatch) Get() (v ExecutePaymentReq0Tds2AddrMatch, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2AddrMatch) Or(d ExecutePaymentReq0Tds2AddrMatch) ExecutePaymentReq0Tds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2DeliveryTimeframe returns new NilExecutePaymentReq0Tds2DeliveryTimeframe with value set to v.
func NewNilExecutePaymentReq0Tds2DeliveryTimeframe(v ExecutePaymentReq0Tds2DeliveryTimeframe) NilExecutePaymentReq0Tds2DeliveryTimeframe {
	return NilExecutePaymentReq0Tds2DeliveryTimeframe{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2DeliveryTimeframe is nullable ExecutePaymentReq0Tds2DeliveryTimeframe.
type NilExecutePaymentReq0Tds2DeliveryTimeframe struct {
	Value ExecutePaymentReq0Tds2DeliveryTimeframe
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2DeliveryTimeframe) SetTo(v ExecutePaymentReq0Tds2DeliveryTimeframe) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2DeliveryTimeframe) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2DeliveryTimeframe) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2DeliveryTimeframe
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2DeliveryTimeframe) Get() (v ExecutePaymentReq0Tds2DeliveryTimeframe, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2DeliveryTimeframe) Or(d ExecutePaymentReq0Tds2DeliveryTimeframe) ExecutePaymentReq0Tds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2PreOrderPurchaseInd returns new NilExecutePaymentReq0Tds2PreOrderPurchaseInd with value set to v.
func NewNilExecutePaymentReq0Tds2PreOrderPurchaseInd(v ExecutePaymentReq0Tds2PreOrderPurchaseInd) NilExecutePaymentReq0Tds2PreOrderPurchaseInd {
	return NilExecutePaymentReq0Tds2PreOrderPurchaseInd{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2PreOrderPurchaseInd is nullable ExecutePaymentReq0Tds2PreOrderPurchaseInd.
type NilExecutePaymentReq0Tds2PreOrderPurchaseInd struct {
	Value ExecutePaymentReq0Tds2PreOrderPurchaseInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2PreOrderPurchaseInd) SetTo(v ExecutePaymentReq0Tds2PreOrderPurchaseInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2PreOrderPurchaseInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2PreOrderPurchaseInd) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2PreOrderPurchaseInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2PreOrderPurchaseInd) Get() (v ExecutePaymentReq0Tds2PreOrderPurchaseInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2PreOrderPurchaseInd) Or(d ExecutePaymentReq0Tds2PreOrderPurchaseInd) ExecutePaymentReq0Tds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2ReorderItemsInd returns new NilExecutePaymentReq0Tds2ReorderItemsInd with value set to v.
func NewNilExecutePaymentReq0Tds2ReorderItemsInd(v ExecutePaymentReq0Tds2ReorderItemsInd) NilExecutePaymentReq0Tds2ReorderItemsInd {
	return NilExecutePaymentReq0Tds2ReorderItemsInd{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2ReorderItemsInd is nullable ExecutePaymentReq0Tds2ReorderItemsInd.
type NilExecutePaymentReq0Tds2ReorderItemsInd struct {
	Value ExecutePaymentReq0Tds2ReorderItemsInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2ReorderItemsInd) SetTo(v ExecutePaymentReq0Tds2ReorderItemsInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2ReorderItemsInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2ReorderItemsInd) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2ReorderItemsInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2ReorderItemsInd) Get() (v ExecutePaymentReq0Tds2ReorderItemsInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2ReorderItemsInd) Or(d ExecutePaymentReq0Tds2ReorderItemsInd) ExecutePaymentReq0Tds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2ShipInd returns new NilExecutePaymentReq0Tds2ShipInd with value set to v.
func NewNilExecutePaymentReq0Tds2ShipInd(v ExecutePaymentReq0Tds2ShipInd) NilExecutePaymentReq0Tds2ShipInd {
	return NilExecutePaymentReq0Tds2ShipInd{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2ShipInd is nullable ExecutePaymentReq0Tds2ShipInd.
type NilExecutePaymentReq0Tds2ShipInd struct {
	Value ExecutePaymentReq0Tds2ShipInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2ShipInd) SetTo(v ExecutePaymentReq0Tds2ShipInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2ShipInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2ShipInd) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2ShipInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2ShipInd) Get() (v ExecutePaymentReq0Tds2ShipInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2ShipInd) Or(d ExecutePaymentReq0Tds2ShipInd) ExecutePaymentReq0Tds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2ShipNameInd returns new NilExecutePaymentReq0Tds2ShipNameInd with value set to v.
func NewNilExecutePaymentReq0Tds2ShipNameInd(v ExecutePaymentReq0Tds2ShipNameInd) NilExecutePaymentReq0Tds2ShipNameInd {
	return NilExecutePaymentReq0Tds2ShipNameInd{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2ShipNameInd is nullable ExecutePaymentReq0Tds2ShipNameInd.
type NilExecutePaymentReq0Tds2ShipNameInd struct {
	Value ExecutePaymentReq0Tds2ShipNameInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2ShipNameInd) SetTo(v ExecutePaymentReq0Tds2ShipNameInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2ShipNameInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2ShipNameInd) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2ShipNameInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2ShipNameInd) Get() (v ExecutePaymentReq0Tds2ShipNameInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2ShipNameInd) Or(d ExecutePaymentReq0Tds2ShipNameInd) ExecutePaymentReq0Tds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2SuspiciousAccActivity returns new NilExecutePaymentReq0Tds2SuspiciousAccActivity with value set to v.
func NewNilExecutePaymentReq0Tds2SuspiciousAccActivity(v ExecutePaymentReq0Tds2SuspiciousAccActivity) NilExecutePaymentReq0Tds2SuspiciousAccActivity {
	return NilExecutePaymentReq0Tds2SuspiciousAccActivity{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2SuspiciousAccActivity is nullable ExecutePaymentReq0Tds2SuspiciousAccActivity.
type NilExecutePaymentReq0Tds2SuspiciousAccActivity struct {
	Value ExecutePaymentReq0Tds2SuspiciousAccActivity
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2SuspiciousAccActivity) SetTo(v ExecutePaymentReq0Tds2SuspiciousAccActivity) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2SuspiciousAccActivity) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2SuspiciousAccActivity) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2SuspiciousAccActivity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2SuspiciousAccActivity) Get() (v ExecutePaymentReq0Tds2SuspiciousAccActivity, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2SuspiciousAccActivity) Or(d ExecutePaymentReq0Tds2SuspiciousAccActivity) ExecutePaymentReq0Tds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod returns new NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod with value set to v.
func NewNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod(v ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod {
	return NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod{
		Value: v,
	}
}

// NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod is nullable ExecutePaymentReq0Tds2ThreeDsReqAuthMethod.
type NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod struct {
	Value ExecutePaymentReq0Tds2ThreeDsReqAuthMethod
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) SetTo(v ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq0Tds2ThreeDsReqAuthMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Get() (v ExecutePaymentReq0Tds2ThreeDsReqAuthMethod, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Or(d ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) ExecutePaymentReq0Tds2ThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilExecutePaymentReq3RedirectType returns new NilExecutePaymentReq3RedirectType with value set to v.
func NewNilExecutePaymentReq3RedirectType(v ExecutePaymentReq3RedirectType) NilExecutePaymentReq3RedirectType {
	return NilExecutePaymentReq3RedirectType{
		Value: v,
	}
}

// NilExecutePaymentReq3RedirectType is nullable ExecutePaymentReq3RedirectType.
type NilExecutePaymentReq3RedirectType struct {
	Value ExecutePaymentReq3RedirectType
	Null  bool
}

// SetTo sets value to v.
func (o *NilExecutePaymentReq3RedirectType) SetTo(v ExecutePaymentReq3RedirectType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilExecutePaymentReq3RedirectType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilExecutePaymentReq3RedirectType) SetToNull() {
	o.Null = true
	var v ExecutePaymentReq3RedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilExecutePaymentReq3RedirectType) Get() (v ExecutePaymentReq3RedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilExecutePaymentReq3RedirectType) Or(d ExecutePaymentReq3RedirectType) ExecutePaymentReq3RedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilFloat64 returns new NilFloat64 with value set to v.
func NewNilFloat64(v float64) NilFloat64 {
	return NilFloat64{
		Value: v,
	}
}

// NilFloat64 is nullable float64.
type NilFloat64 struct {
	Value float64
	Null  bool
}

// SetTo sets value to v.
func (o *NilFloat64) SetTo(v float64) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilFloat64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilFloat64) SetToNull() {
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt) SetToNull() {
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInt32 returns new NilInt32 with value set to v.
func NewNilInt32(v int32) NilInt32 {
	return NilInt32{
		Value: v,
	}
}

// NilInt32 is nullable int32.
type NilInt32 struct {
	Value int32
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt32) SetTo(v int32) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt32) SetToNull() {
	o.Null = true
	var v int32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt32) Get() (v int32, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPOSTJoinTenantsResponseAPIKeyDisplayFlag returns new NilPOSTJoinTenantsResponseAPIKeyDisplayFlag with value set to v.
func NewNilPOSTJoinTenantsResponseAPIKeyDisplayFlag(v POSTJoinTenantsResponseAPIKeyDisplayFlag) NilPOSTJoinTenantsResponseAPIKeyDisplayFlag {
	return NilPOSTJoinTenantsResponseAPIKeyDisplayFlag{
		Value: v,
	}
}

// NilPOSTJoinTenantsResponseAPIKeyDisplayFlag is nullable POSTJoinTenantsResponseAPIKeyDisplayFlag.
type NilPOSTJoinTenantsResponseAPIKeyDisplayFlag struct {
	Value POSTJoinTenantsResponseAPIKeyDisplayFlag
	Null  bool
}

// SetTo sets value to v.
func (o *NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) SetTo(v POSTJoinTenantsResponseAPIKeyDisplayFlag) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) SetToNull() {
	o.Null = true
	var v POSTJoinTenantsResponseAPIKeyDisplayFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) Get() (v POSTJoinTenantsResponseAPIKeyDisplayFlag, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) Or(d POSTJoinTenantsResponseAPIKeyDisplayFlag) POSTJoinTenantsResponseAPIKeyDisplayFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPOSTJoinTenantsResponseSharedCustomerFlag returns new NilPOSTJoinTenantsResponseSharedCustomerFlag with value set to v.
func NewNilPOSTJoinTenantsResponseSharedCustomerFlag(v POSTJoinTenantsResponseSharedCustomerFlag) NilPOSTJoinTenantsResponseSharedCustomerFlag {
	return NilPOSTJoinTenantsResponseSharedCustomerFlag{
		Value: v,
	}
}

// NilPOSTJoinTenantsResponseSharedCustomerFlag is nullable POSTJoinTenantsResponseSharedCustomerFlag.
type NilPOSTJoinTenantsResponseSharedCustomerFlag struct {
	Value POSTJoinTenantsResponseSharedCustomerFlag
	Null  bool
}

// SetTo sets value to v.
func (o *NilPOSTJoinTenantsResponseSharedCustomerFlag) SetTo(v POSTJoinTenantsResponseSharedCustomerFlag) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPOSTJoinTenantsResponseSharedCustomerFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPOSTJoinTenantsResponseSharedCustomerFlag) SetToNull() {
	o.Null = true
	var v POSTJoinTenantsResponseSharedCustomerFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPOSTJoinTenantsResponseSharedCustomerFlag) Get() (v POSTJoinTenantsResponseSharedCustomerFlag, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPOSTJoinTenantsResponseSharedCustomerFlag) Or(d POSTJoinTenantsResponseSharedCustomerFlag) POSTJoinTenantsResponseSharedCustomerFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPOSTJoinTenantsResponseShopType returns new NilPOSTJoinTenantsResponseShopType with value set to v.
func NewNilPOSTJoinTenantsResponseShopType(v POSTJoinTenantsResponseShopType) NilPOSTJoinTenantsResponseShopType {
	return NilPOSTJoinTenantsResponseShopType{
		Value: v,
	}
}

// NilPOSTJoinTenantsResponseShopType is nullable POSTJoinTenantsResponseShopType.
type NilPOSTJoinTenantsResponseShopType struct {
	Value POSTJoinTenantsResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilPOSTJoinTenantsResponseShopType) SetTo(v POSTJoinTenantsResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPOSTJoinTenantsResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPOSTJoinTenantsResponseShopType) SetToNull() {
	o.Null = true
	var v POSTJoinTenantsResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPOSTJoinTenantsResponseShopType) Get() (v POSTJoinTenantsResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPOSTJoinTenantsResponseShopType) Or(d POSTJoinTenantsResponseShopType) POSTJoinTenantsResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentMethodCardBrand returns new NilPaymentMethodCardBrand with value set to v.
func NewNilPaymentMethodCardBrand(v PaymentMethodCardBrand) NilPaymentMethodCardBrand {
	return NilPaymentMethodCardBrand{
		Value: v,
	}
}

// NilPaymentMethodCardBrand is nullable PaymentMethodCardBrand.
type NilPaymentMethodCardBrand struct {
	Value PaymentMethodCardBrand
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentMethodCardBrand) SetTo(v PaymentMethodCardBrand) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentMethodCardBrand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentMethodCardBrand) SetToNull() {
	o.Null = true
	var v PaymentMethodCardBrand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentMethodCardBrand) Get() (v PaymentMethodCardBrand, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentMethodCardBrand) Or(d PaymentMethodCardBrand) PaymentMethodCardBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentMethodCardTds2Type returns new NilPaymentMethodCardTds2Type with value set to v.
func NewNilPaymentMethodCardTds2Type(v PaymentMethodCardTds2Type) NilPaymentMethodCardTds2Type {
	return NilPaymentMethodCardTds2Type{
		Value: v,
	}
}

// NilPaymentMethodCardTds2Type is nullable PaymentMethodCardTds2Type.
type NilPaymentMethodCardTds2Type struct {
	Value PaymentMethodCardTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentMethodCardTds2Type) SetTo(v PaymentMethodCardTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentMethodCardTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentMethodCardTds2Type) SetToNull() {
	o.Null = true
	var v PaymentMethodCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentMethodCardTds2Type) Get() (v PaymentMethodCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentMethodCardTds2Type) Or(d PaymentMethodCardTds2Type) PaymentMethodCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentMethodCardTdsType returns new NilPaymentMethodCardTdsType with value set to v.
func NewNilPaymentMethodCardTdsType(v PaymentMethodCardTdsType) NilPaymentMethodCardTdsType {
	return NilPaymentMethodCardTdsType{
		Value: v,
	}
}

// NilPaymentMethodCardTdsType is nullable PaymentMethodCardTdsType.
type NilPaymentMethodCardTdsType struct {
	Value PaymentMethodCardTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentMethodCardTdsType) SetTo(v PaymentMethodCardTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentMethodCardTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentMethodCardTdsType) SetToNull() {
	o.Null = true
	var v PaymentMethodCardTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentMethodCardTdsType) Get() (v PaymentMethodCardTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentMethodCardTdsType) Or(d PaymentMethodCardTdsType) PaymentMethodCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentMethodCardType returns new NilPaymentMethodCardType with value set to v.
func NewNilPaymentMethodCardType(v PaymentMethodCardType) NilPaymentMethodCardType {
	return NilPaymentMethodCardType{
		Value: v,
	}
}

// NilPaymentMethodCardType is nullable PaymentMethodCardType.
type NilPaymentMethodCardType struct {
	Value PaymentMethodCardType
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentMethodCardType) SetTo(v PaymentMethodCardType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentMethodCardType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentMethodCardType) SetToNull() {
	o.Null = true
	var v PaymentMethodCardType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentMethodCardType) Get() (v PaymentMethodCardType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentMethodCardType) Or(d PaymentMethodCardType) PaymentMethodCardType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardJobCode returns new NilPaymentSessionCreatingRequestCardJobCode with value set to v.
func NewNilPaymentSessionCreatingRequestCardJobCode(v PaymentSessionCreatingRequestCardJobCode) NilPaymentSessionCreatingRequestCardJobCode {
	return NilPaymentSessionCreatingRequestCardJobCode{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardJobCode is nullable PaymentSessionCreatingRequestCardJobCode.
type NilPaymentSessionCreatingRequestCardJobCode struct {
	Value PaymentSessionCreatingRequestCardJobCode
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardJobCode) SetTo(v PaymentSessionCreatingRequestCardJobCode) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardJobCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardJobCode) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardJobCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardJobCode) Get() (v PaymentSessionCreatingRequestCardJobCode, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardJobCode) Or(d PaymentSessionCreatingRequestCardJobCode) PaymentSessionCreatingRequestCardJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2AddrMatch returns new NilPaymentSessionCreatingRequestCardTds2AddrMatch with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2AddrMatch(v PaymentSessionCreatingRequestCardTds2AddrMatch) NilPaymentSessionCreatingRequestCardTds2AddrMatch {
	return NilPaymentSessionCreatingRequestCardTds2AddrMatch{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2AddrMatch is nullable PaymentSessionCreatingRequestCardTds2AddrMatch.
type NilPaymentSessionCreatingRequestCardTds2AddrMatch struct {
	Value PaymentSessionCreatingRequestCardTds2AddrMatch
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2AddrMatch) SetTo(v PaymentSessionCreatingRequestCardTds2AddrMatch) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2AddrMatch) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2AddrMatch) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2AddrMatch
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2AddrMatch) Get() (v PaymentSessionCreatingRequestCardTds2AddrMatch, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2AddrMatch) Or(d PaymentSessionCreatingRequestCardTds2AddrMatch) PaymentSessionCreatingRequestCardTds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe returns new NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe(v PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe {
	return NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe is nullable PaymentSessionCreatingRequestCardTds2DeliveryTimeframe.
type NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe struct {
	Value PaymentSessionCreatingRequestCardTds2DeliveryTimeframe
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) SetTo(v PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2DeliveryTimeframe
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) Get() (v PaymentSessionCreatingRequestCardTds2DeliveryTimeframe, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) Or(d PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) PaymentSessionCreatingRequestCardTds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd returns new NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd(v PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd {
	return NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd is nullable PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd.
type NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd struct {
	Value PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) SetTo(v PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) Get() (v PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) Or(d PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2ReorderItemsInd returns new NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2ReorderItemsInd(v PaymentSessionCreatingRequestCardTds2ReorderItemsInd) NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd {
	return NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd is nullable PaymentSessionCreatingRequestCardTds2ReorderItemsInd.
type NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd struct {
	Value PaymentSessionCreatingRequestCardTds2ReorderItemsInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) SetTo(v PaymentSessionCreatingRequestCardTds2ReorderItemsInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2ReorderItemsInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) Get() (v PaymentSessionCreatingRequestCardTds2ReorderItemsInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) Or(d PaymentSessionCreatingRequestCardTds2ReorderItemsInd) PaymentSessionCreatingRequestCardTds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2ShipInd returns new NilPaymentSessionCreatingRequestCardTds2ShipInd with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2ShipInd(v PaymentSessionCreatingRequestCardTds2ShipInd) NilPaymentSessionCreatingRequestCardTds2ShipInd {
	return NilPaymentSessionCreatingRequestCardTds2ShipInd{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2ShipInd is nullable PaymentSessionCreatingRequestCardTds2ShipInd.
type NilPaymentSessionCreatingRequestCardTds2ShipInd struct {
	Value PaymentSessionCreatingRequestCardTds2ShipInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2ShipInd) SetTo(v PaymentSessionCreatingRequestCardTds2ShipInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2ShipInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2ShipInd) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2ShipInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2ShipInd) Get() (v PaymentSessionCreatingRequestCardTds2ShipInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2ShipInd) Or(d PaymentSessionCreatingRequestCardTds2ShipInd) PaymentSessionCreatingRequestCardTds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2ShipNameInd returns new NilPaymentSessionCreatingRequestCardTds2ShipNameInd with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2ShipNameInd(v PaymentSessionCreatingRequestCardTds2ShipNameInd) NilPaymentSessionCreatingRequestCardTds2ShipNameInd {
	return NilPaymentSessionCreatingRequestCardTds2ShipNameInd{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2ShipNameInd is nullable PaymentSessionCreatingRequestCardTds2ShipNameInd.
type NilPaymentSessionCreatingRequestCardTds2ShipNameInd struct {
	Value PaymentSessionCreatingRequestCardTds2ShipNameInd
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2ShipNameInd) SetTo(v PaymentSessionCreatingRequestCardTds2ShipNameInd) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2ShipNameInd) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2ShipNameInd) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2ShipNameInd
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2ShipNameInd) Get() (v PaymentSessionCreatingRequestCardTds2ShipNameInd, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2ShipNameInd) Or(d PaymentSessionCreatingRequestCardTds2ShipNameInd) PaymentSessionCreatingRequestCardTds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity returns new NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity(v PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity {
	return NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity is nullable PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity.
type NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity struct {
	Value PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) SetTo(v PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) Get() (v PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) Or(d PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod returns new NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod(v PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod {
	return NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod is nullable PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod.
type NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod struct {
	Value PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) SetTo(v PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) Get() (v PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) Or(d PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTds2Type returns new NilPaymentSessionCreatingRequestCardTds2Type with value set to v.
func NewNilPaymentSessionCreatingRequestCardTds2Type(v PaymentSessionCreatingRequestCardTds2Type) NilPaymentSessionCreatingRequestCardTds2Type {
	return NilPaymentSessionCreatingRequestCardTds2Type{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTds2Type is nullable PaymentSessionCreatingRequestCardTds2Type.
type NilPaymentSessionCreatingRequestCardTds2Type struct {
	Value PaymentSessionCreatingRequestCardTds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTds2Type) SetTo(v PaymentSessionCreatingRequestCardTds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTds2Type) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTds2Type) Get() (v PaymentSessionCreatingRequestCardTds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTds2Type) Or(d PaymentSessionCreatingRequestCardTds2Type) PaymentSessionCreatingRequestCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestCardTdsType returns new NilPaymentSessionCreatingRequestCardTdsType with value set to v.
func NewNilPaymentSessionCreatingRequestCardTdsType(v PaymentSessionCreatingRequestCardTdsType) NilPaymentSessionCreatingRequestCardTdsType {
	return NilPaymentSessionCreatingRequestCardTdsType{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestCardTdsType is nullable PaymentSessionCreatingRequestCardTdsType.
type NilPaymentSessionCreatingRequestCardTdsType struct {
	Value PaymentSessionCreatingRequestCardTdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestCardTdsType) SetTo(v PaymentSessionCreatingRequestCardTdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestCardTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestCardTdsType) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestCardTdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestCardTdsType) Get() (v PaymentSessionCreatingRequestCardTdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestCardTdsType) Or(d PaymentSessionCreatingRequestCardTdsType) PaymentSessionCreatingRequestCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag returns new NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag with value set to v.
func NewNilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag(v PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag {
	return NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag is nullable PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag.
type NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag struct {
	Value PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) SetTo(v PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) Get() (v PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) Or(d PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPaymentSessionCreatingRequestPaypayJobCode returns new NilPaymentSessionCreatingRequestPaypayJobCode with value set to v.
func NewNilPaymentSessionCreatingRequestPaypayJobCode(v PaymentSessionCreatingRequestPaypayJobCode) NilPaymentSessionCreatingRequestPaypayJobCode {
	return NilPaymentSessionCreatingRequestPaypayJobCode{
		Value: v,
	}
}

// NilPaymentSessionCreatingRequestPaypayJobCode is nullable PaymentSessionCreatingRequestPaypayJobCode.
type NilPaymentSessionCreatingRequestPaypayJobCode struct {
	Value PaymentSessionCreatingRequestPaypayJobCode
	Null  bool
}

// SetTo sets value to v.
func (o *NilPaymentSessionCreatingRequestPaypayJobCode) SetTo(v PaymentSessionCreatingRequestPaypayJobCode) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPaymentSessionCreatingRequestPaypayJobCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPaymentSessionCreatingRequestPaypayJobCode) SetToNull() {
	o.Null = true
	var v PaymentSessionCreatingRequestPaypayJobCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPaymentSessionCreatingRequestPaypayJobCode) Get() (v PaymentSessionCreatingRequestPaypayJobCode, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPaymentSessionCreatingRequestPaypayJobCode) Or(d PaymentSessionCreatingRequestPaypayJobCode) PaymentSessionCreatingRequestPaypayJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPlatformShopRetrievingResponseShopType returns new NilPlatformShopRetrievingResponseShopType with value set to v.
func NewNilPlatformShopRetrievingResponseShopType(v PlatformShopRetrievingResponseShopType) NilPlatformShopRetrievingResponseShopType {
	return NilPlatformShopRetrievingResponseShopType{
		Value: v,
	}
}

// NilPlatformShopRetrievingResponseShopType is nullable PlatformShopRetrievingResponseShopType.
type NilPlatformShopRetrievingResponseShopType struct {
	Value PlatformShopRetrievingResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilPlatformShopRetrievingResponseShopType) SetTo(v PlatformShopRetrievingResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPlatformShopRetrievingResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPlatformShopRetrievingResponseShopType) SetToNull() {
	o.Null = true
	var v PlatformShopRetrievingResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPlatformShopRetrievingResponseShopType) Get() (v PlatformShopRetrievingResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPlatformShopRetrievingResponseShopType) Or(d PlatformShopRetrievingResponseShopType) PlatformShopRetrievingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilPlatformShopUpdatingResponseShopType returns new NilPlatformShopUpdatingResponseShopType with value set to v.
func NewNilPlatformShopUpdatingResponseShopType(v PlatformShopUpdatingResponseShopType) NilPlatformShopUpdatingResponseShopType {
	return NilPlatformShopUpdatingResponseShopType{
		Value: v,
	}
}

// NilPlatformShopUpdatingResponseShopType is nullable PlatformShopUpdatingResponseShopType.
type NilPlatformShopUpdatingResponseShopType struct {
	Value PlatformShopUpdatingResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilPlatformShopUpdatingResponseShopType) SetTo(v PlatformShopUpdatingResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilPlatformShopUpdatingResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilPlatformShopUpdatingResponseShopType) SetToNull() {
	o.Null = true
	var v PlatformShopUpdatingResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilPlatformShopUpdatingResponseShopType) Get() (v PlatformShopUpdatingResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilPlatformShopUpdatingResponseShopType) Or(d PlatformShopUpdatingResponseShopType) PlatformShopUpdatingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRetrievePaymentOK0Tds2Type returns new NilRetrievePaymentOK0Tds2Type with value set to v.
func NewNilRetrievePaymentOK0Tds2Type(v RetrievePaymentOK0Tds2Type) NilRetrievePaymentOK0Tds2Type {
	return NilRetrievePaymentOK0Tds2Type{
		Value: v,
	}
}

// NilRetrievePaymentOK0Tds2Type is nullable RetrievePaymentOK0Tds2Type.
type NilRetrievePaymentOK0Tds2Type struct {
	Value RetrievePaymentOK0Tds2Type
	Null  bool
}

// SetTo sets value to v.
func (o *NilRetrievePaymentOK0Tds2Type) SetTo(v RetrievePaymentOK0Tds2Type) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRetrievePaymentOK0Tds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRetrievePaymentOK0Tds2Type) SetToNull() {
	o.Null = true
	var v RetrievePaymentOK0Tds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRetrievePaymentOK0Tds2Type) Get() (v RetrievePaymentOK0Tds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRetrievePaymentOK0Tds2Type) Or(d RetrievePaymentOK0Tds2Type) RetrievePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRetrievePaymentOK0TdsType returns new NilRetrievePaymentOK0TdsType with value set to v.
func NewNilRetrievePaymentOK0TdsType(v RetrievePaymentOK0TdsType) NilRetrievePaymentOK0TdsType {
	return NilRetrievePaymentOK0TdsType{
		Value: v,
	}
}

// NilRetrievePaymentOK0TdsType is nullable RetrievePaymentOK0TdsType.
type NilRetrievePaymentOK0TdsType struct {
	Value RetrievePaymentOK0TdsType
	Null  bool
}

// SetTo sets value to v.
func (o *NilRetrievePaymentOK0TdsType) SetTo(v RetrievePaymentOK0TdsType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRetrievePaymentOK0TdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRetrievePaymentOK0TdsType) SetToNull() {
	o.Null = true
	var v RetrievePaymentOK0TdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRetrievePaymentOK0TdsType) Get() (v RetrievePaymentOK0TdsType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRetrievePaymentOK0TdsType) Or(d RetrievePaymentOK0TdsType) RetrievePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilShopShopType returns new NilShopShopType with value set to v.
func NewNilShopShopType(v ShopShopType) NilShopShopType {
	return NilShopShopType{
		Value: v,
	}
}

// NilShopShopType is nullable ShopShopType.
type NilShopShopType struct {
	Value ShopShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilShopShopType) SetTo(v ShopShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilShopShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilShopShopType) SetToNull() {
	o.Null = true
	var v ShopShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilShopShopType) Get() (v ShopShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilShopShopType) Or(d ShopShopType) ShopShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilTenantShopRetrievingResponseShopType returns new NilTenantShopRetrievingResponseShopType with value set to v.
func NewNilTenantShopRetrievingResponseShopType(v TenantShopRetrievingResponseShopType) NilTenantShopRetrievingResponseShopType {
	return NilTenantShopRetrievingResponseShopType{
		Value: v,
	}
}

// NilTenantShopRetrievingResponseShopType is nullable TenantShopRetrievingResponseShopType.
type NilTenantShopRetrievingResponseShopType struct {
	Value TenantShopRetrievingResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilTenantShopRetrievingResponseShopType) SetTo(v TenantShopRetrievingResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilTenantShopRetrievingResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilTenantShopRetrievingResponseShopType) SetToNull() {
	o.Null = true
	var v TenantShopRetrievingResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilTenantShopRetrievingResponseShopType) Get() (v TenantShopRetrievingResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilTenantShopRetrievingResponseShopType) Or(d TenantShopRetrievingResponseShopType) TenantShopRetrievingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilTenantShopUpdatingRequestAPIKeyDisplayFlag returns new NilTenantShopUpdatingRequestAPIKeyDisplayFlag with value set to v.
func NewNilTenantShopUpdatingRequestAPIKeyDisplayFlag(v TenantShopUpdatingRequestAPIKeyDisplayFlag) NilTenantShopUpdatingRequestAPIKeyDisplayFlag {
	return NilTenantShopUpdatingRequestAPIKeyDisplayFlag{
		Value: v,
	}
}

// NilTenantShopUpdatingRequestAPIKeyDisplayFlag is nullable TenantShopUpdatingRequestAPIKeyDisplayFlag.
type NilTenantShopUpdatingRequestAPIKeyDisplayFlag struct {
	Value TenantShopUpdatingRequestAPIKeyDisplayFlag
	Null  bool
}

// SetTo sets value to v.
func (o *NilTenantShopUpdatingRequestAPIKeyDisplayFlag) SetTo(v TenantShopUpdatingRequestAPIKeyDisplayFlag) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilTenantShopUpdatingRequestAPIKeyDisplayFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilTenantShopUpdatingRequestAPIKeyDisplayFlag) SetToNull() {
	o.Null = true
	var v TenantShopUpdatingRequestAPIKeyDisplayFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilTenantShopUpdatingRequestAPIKeyDisplayFlag) Get() (v TenantShopUpdatingRequestAPIKeyDisplayFlag, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilTenantShopUpdatingRequestAPIKeyDisplayFlag) Or(d TenantShopUpdatingRequestAPIKeyDisplayFlag) TenantShopUpdatingRequestAPIKeyDisplayFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilTenantShopUpdatingRequestPaypayContentCategoryType returns new NilTenantShopUpdatingRequestPaypayContentCategoryType with value set to v.
func NewNilTenantShopUpdatingRequestPaypayContentCategoryType(v TenantShopUpdatingRequestPaypayContentCategoryType) NilTenantShopUpdatingRequestPaypayContentCategoryType {
	return NilTenantShopUpdatingRequestPaypayContentCategoryType{
		Value: v,
	}
}

// NilTenantShopUpdatingRequestPaypayContentCategoryType is nullable TenantShopUpdatingRequestPaypayContentCategoryType.
type NilTenantShopUpdatingRequestPaypayContentCategoryType struct {
	Value TenantShopUpdatingRequestPaypayContentCategoryType
	Null  bool
}

// SetTo sets value to v.
func (o *NilTenantShopUpdatingRequestPaypayContentCategoryType) SetTo(v TenantShopUpdatingRequestPaypayContentCategoryType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilTenantShopUpdatingRequestPaypayContentCategoryType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilTenantShopUpdatingRequestPaypayContentCategoryType) SetToNull() {
	o.Null = true
	var v TenantShopUpdatingRequestPaypayContentCategoryType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilTenantShopUpdatingRequestPaypayContentCategoryType) Get() (v TenantShopUpdatingRequestPaypayContentCategoryType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilTenantShopUpdatingRequestPaypayContentCategoryType) Or(d TenantShopUpdatingRequestPaypayContentCategoryType) TenantShopUpdatingRequestPaypayContentCategoryType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilTenantShopUpdatingResponseShopType returns new NilTenantShopUpdatingResponseShopType with value set to v.
func NewNilTenantShopUpdatingResponseShopType(v TenantShopUpdatingResponseShopType) NilTenantShopUpdatingResponseShopType {
	return NilTenantShopUpdatingResponseShopType{
		Value: v,
	}
}

// NilTenantShopUpdatingResponseShopType is nullable TenantShopUpdatingResponseShopType.
type NilTenantShopUpdatingResponseShopType struct {
	Value TenantShopUpdatingResponseShopType
	Null  bool
}

// SetTo sets value to v.
func (o *NilTenantShopUpdatingResponseShopType) SetTo(v TenantShopUpdatingResponseShopType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilTenantShopUpdatingResponseShopType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilTenantShopUpdatingResponseShopType) SetToNull() {
	o.Null = true
	var v TenantShopUpdatingResponseShopType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilTenantShopUpdatingResponseShopType) Get() (v TenantShopUpdatingResponseShopType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilTenantShopUpdatingResponseShopType) Or(d TenantShopUpdatingResponseShopType) TenantShopUpdatingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilWebhookEventCustomerPaymentMethodApplicationType returns new NilWebhookEventCustomerPaymentMethodApplicationType with value set to v.
func NewNilWebhookEventCustomerPaymentMethodApplicationType(v WebhookEventCustomerPaymentMethodApplicationType) NilWebhookEventCustomerPaymentMethodApplicationType {
	return NilWebhookEventCustomerPaymentMethodApplicationType{
		Value: v,
	}
}

// NilWebhookEventCustomerPaymentMethodApplicationType is nullable WebhookEventCustomerPaymentMethodApplicationType.
type NilWebhookEventCustomerPaymentMethodApplicationType struct {
	Value WebhookEventCustomerPaymentMethodApplicationType
	Null  bool
}

// SetTo sets value to v.
func (o *NilWebhookEventCustomerPaymentMethodApplicationType) SetTo(v WebhookEventCustomerPaymentMethodApplicationType) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilWebhookEventCustomerPaymentMethodApplicationType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilWebhookEventCustomerPaymentMethodApplicationType) SetToNull() {
	o.Null = true
	var v WebhookEventCustomerPaymentMethodApplicationType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilWebhookEventCustomerPaymentMethodApplicationType) Get() (v WebhookEventCustomerPaymentMethodApplicationType, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilWebhookEventCustomerPaymentMethodApplicationType) Or(d WebhookEventCustomerPaymentMethodApplicationType) WebhookEventCustomerPaymentMethodApplicationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountDetailTradeType returns new OptAccountDetailTradeType with value set to v.
func NewOptAccountDetailTradeType(v AccountDetailTradeType) OptAccountDetailTradeType {
	return OptAccountDetailTradeType{
		Value: v,
		Set:   true,
	}
}

// OptAccountDetailTradeType is optional AccountDetailTradeType.
type OptAccountDetailTradeType struct {
	Value AccountDetailTradeType
	Set   bool
}

// IsSet returns true if OptAccountDetailTradeType was set.
func (o OptAccountDetailTradeType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountDetailTradeType) Reset() {
	var v AccountDetailTradeType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountDetailTradeType) SetTo(v AccountDetailTradeType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountDetailTradeType) Get() (v AccountDetailTradeType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountDetailTradeType) Or(d AccountDetailTradeType) AccountDetailTradeType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountListItemStatusCode returns new OptAccountListItemStatusCode with value set to v.
func NewOptAccountListItemStatusCode(v AccountListItemStatusCode) OptAccountListItemStatusCode {
	return OptAccountListItemStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptAccountListItemStatusCode is optional AccountListItemStatusCode.
type OptAccountListItemStatusCode struct {
	Value AccountListItemStatusCode
	Set   bool
}

// IsSet returns true if OptAccountListItemStatusCode was set.
func (o OptAccountListItemStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountListItemStatusCode) Reset() {
	var v AccountListItemStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountListItemStatusCode) SetTo(v AccountListItemStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountListItemStatusCode) Get() (v AccountListItemStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountListItemStatusCode) Or(d AccountListItemStatusCode) AccountListItemStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountPaymentMethod returns new OptAccountPaymentMethod with value set to v.
func NewOptAccountPaymentMethod(v AccountPaymentMethod) OptAccountPaymentMethod {
	return OptAccountPaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptAccountPaymentMethod is optional AccountPaymentMethod.
type OptAccountPaymentMethod struct {
	Value AccountPaymentMethod
	Set   bool
}

// IsSet returns true if OptAccountPaymentMethod was set.
func (o OptAccountPaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountPaymentMethod) Reset() {
	var v AccountPaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountPaymentMethod) SetTo(v AccountPaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountPaymentMethod) Get() (v AccountPaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountPaymentMethod) Or(d AccountPaymentMethod) AccountPaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountRetrievingResponseDepositDestination returns new OptAccountRetrievingResponseDepositDestination with value set to v.
func NewOptAccountRetrievingResponseDepositDestination(v AccountRetrievingResponseDepositDestination) OptAccountRetrievingResponseDepositDestination {
	return OptAccountRetrievingResponseDepositDestination{
		Value: v,
		Set:   true,
	}
}

// OptAccountRetrievingResponseDepositDestination is optional AccountRetrievingResponseDepositDestination.
type OptAccountRetrievingResponseDepositDestination struct {
	Value AccountRetrievingResponseDepositDestination
	Set   bool
}

// IsSet returns true if OptAccountRetrievingResponseDepositDestination was set.
func (o OptAccountRetrievingResponseDepositDestination) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountRetrievingResponseDepositDestination) Reset() {
	var v AccountRetrievingResponseDepositDestination
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountRetrievingResponseDepositDestination) SetTo(v AccountRetrievingResponseDepositDestination) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountRetrievingResponseDepositDestination) Get() (v AccountRetrievingResponseDepositDestination, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountRetrievingResponseDepositDestination) Or(d AccountRetrievingResponseDepositDestination) AccountRetrievingResponseDepositDestination {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAccountRetrievingResponseDepositDestinationAccountKind returns new OptAccountRetrievingResponseDepositDestinationAccountKind with value set to v.
func NewOptAccountRetrievingResponseDepositDestinationAccountKind(v AccountRetrievingResponseDepositDestinationAccountKind) OptAccountRetrievingResponseDepositDestinationAccountKind {
	return OptAccountRetrievingResponseDepositDestinationAccountKind{
		Value: v,
		Set:   true,
	}
}

// OptAccountRetrievingResponseDepositDestinationAccountKind is optional AccountRetrievingResponseDepositDestinationAccountKind.
type OptAccountRetrievingResponseDepositDestinationAccountKind struct {
	Value AccountRetrievingResponseDepositDestinationAccountKind
	Set   bool
}

// IsSet returns true if OptAccountRetrievingResponseDepositDestinationAccountKind was set.
func (o OptAccountRetrievingResponseDepositDestinationAccountKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAccountRetrievingResponseDepositDestinationAccountKind) Reset() {
	var v AccountRetrievingResponseDepositDestinationAccountKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAccountRetrievingResponseDepositDestinationAccountKind) SetTo(v AccountRetrievingResponseDepositDestinationAccountKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAccountRetrievingResponseDepositDestinationAccountKind) Get() (v AccountRetrievingResponseDepositDestinationAccountKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAccountRetrievingResponseDepositDestinationAccountKind) Or(d AccountRetrievingResponseDepositDestinationAccountKind) AccountRetrievingResponseDepositDestinationAccountKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthorizePaymentOKJobCode returns new OptAuthorizePaymentOKJobCode with value set to v.
func NewOptAuthorizePaymentOKJobCode(v AuthorizePaymentOKJobCode) OptAuthorizePaymentOKJobCode {
	return OptAuthorizePaymentOKJobCode{
		Value: v,
		Set:   true,
	}
}

// OptAuthorizePaymentOKJobCode is optional AuthorizePaymentOKJobCode.
type OptAuthorizePaymentOKJobCode struct {
	Value AuthorizePaymentOKJobCode
	Set   bool
}

// IsSet returns true if OptAuthorizePaymentOKJobCode was set.
func (o OptAuthorizePaymentOKJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthorizePaymentOKJobCode) Reset() {
	var v AuthorizePaymentOKJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthorizePaymentOKJobCode) SetTo(v AuthorizePaymentOKJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthorizePaymentOKJobCode) Get() (v AuthorizePaymentOKJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthorizePaymentOKJobCode) Or(d AuthorizePaymentOKJobCode) AuthorizePaymentOKJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthorizePaymentOKMethod returns new OptAuthorizePaymentOKMethod with value set to v.
func NewOptAuthorizePaymentOKMethod(v AuthorizePaymentOKMethod) OptAuthorizePaymentOKMethod {
	return OptAuthorizePaymentOKMethod{
		Value: v,
		Set:   true,
	}
}

// OptAuthorizePaymentOKMethod is optional AuthorizePaymentOKMethod.
type OptAuthorizePaymentOKMethod struct {
	Value AuthorizePaymentOKMethod
	Set   bool
}

// IsSet returns true if OptAuthorizePaymentOKMethod was set.
func (o OptAuthorizePaymentOKMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthorizePaymentOKMethod) Reset() {
	var v AuthorizePaymentOKMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthorizePaymentOKMethod) SetTo(v AuthorizePaymentOKMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthorizePaymentOKMethod) Get() (v AuthorizePaymentOKMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthorizePaymentOKMethod) Or(d AuthorizePaymentOKMethod) AuthorizePaymentOKMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthorizePaymentOKPayType returns new OptAuthorizePaymentOKPayType with value set to v.
func NewOptAuthorizePaymentOKPayType(v AuthorizePaymentOKPayType) OptAuthorizePaymentOKPayType {
	return OptAuthorizePaymentOKPayType{
		Value: v,
		Set:   true,
	}
}

// OptAuthorizePaymentOKPayType is optional AuthorizePaymentOKPayType.
type OptAuthorizePaymentOKPayType struct {
	Value AuthorizePaymentOKPayType
	Set   bool
}

// IsSet returns true if OptAuthorizePaymentOKPayType was set.
func (o OptAuthorizePaymentOKPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthorizePaymentOKPayType) Reset() {
	var v AuthorizePaymentOKPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthorizePaymentOKPayType) SetTo(v AuthorizePaymentOKPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthorizePaymentOKPayType) Get() (v AuthorizePaymentOKPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthorizePaymentOKPayType) Or(d AuthorizePaymentOKPayType) AuthorizePaymentOKPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuthorizePaymentOKStatus returns new OptAuthorizePaymentOKStatus with value set to v.
func NewOptAuthorizePaymentOKStatus(v AuthorizePaymentOKStatus) OptAuthorizePaymentOKStatus {
	return OptAuthorizePaymentOKStatus{
		Value: v,
		Set:   true,
	}
}

// OptAuthorizePaymentOKStatus is optional AuthorizePaymentOKStatus.
type OptAuthorizePaymentOKStatus struct {
	Value AuthorizePaymentOKStatus
	Set   bool
}

// IsSet returns true if OptAuthorizePaymentOKStatus was set.
func (o OptAuthorizePaymentOKStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuthorizePaymentOKStatus) Reset() {
	var v AuthorizePaymentOKStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuthorizePaymentOKStatus) SetTo(v AuthorizePaymentOKStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuthorizePaymentOKStatus) Get() (v AuthorizePaymentOKStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuthorizePaymentOKStatus) Or(d AuthorizePaymentOKStatus) AuthorizePaymentOKStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK0JobCode returns new OptCapturePaymentOK0JobCode with value set to v.
func NewOptCapturePaymentOK0JobCode(v CapturePaymentOK0JobCode) OptCapturePaymentOK0JobCode {
	return OptCapturePaymentOK0JobCode{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK0JobCode is optional CapturePaymentOK0JobCode.
type OptCapturePaymentOK0JobCode struct {
	Value CapturePaymentOK0JobCode
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK0JobCode was set.
func (o OptCapturePaymentOK0JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK0JobCode) Reset() {
	var v CapturePaymentOK0JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK0JobCode) SetTo(v CapturePaymentOK0JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK0JobCode) Get() (v CapturePaymentOK0JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK0JobCode) Or(d CapturePaymentOK0JobCode) CapturePaymentOK0JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK0Method returns new OptCapturePaymentOK0Method with value set to v.
func NewOptCapturePaymentOK0Method(v CapturePaymentOK0Method) OptCapturePaymentOK0Method {
	return OptCapturePaymentOK0Method{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK0Method is optional CapturePaymentOK0Method.
type OptCapturePaymentOK0Method struct {
	Value CapturePaymentOK0Method
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK0Method was set.
func (o OptCapturePaymentOK0Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK0Method) Reset() {
	var v CapturePaymentOK0Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK0Method) SetTo(v CapturePaymentOK0Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK0Method) Get() (v CapturePaymentOK0Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK0Method) Or(d CapturePaymentOK0Method) CapturePaymentOK0Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK0PayType returns new OptCapturePaymentOK0PayType with value set to v.
func NewOptCapturePaymentOK0PayType(v CapturePaymentOK0PayType) OptCapturePaymentOK0PayType {
	return OptCapturePaymentOK0PayType{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK0PayType is optional CapturePaymentOK0PayType.
type OptCapturePaymentOK0PayType struct {
	Value CapturePaymentOK0PayType
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK0PayType was set.
func (o OptCapturePaymentOK0PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK0PayType) Reset() {
	var v CapturePaymentOK0PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK0PayType) SetTo(v CapturePaymentOK0PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK0PayType) Get() (v CapturePaymentOK0PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK0PayType) Or(d CapturePaymentOK0PayType) CapturePaymentOK0PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK0Status returns new OptCapturePaymentOK0Status with value set to v.
func NewOptCapturePaymentOK0Status(v CapturePaymentOK0Status) OptCapturePaymentOK0Status {
	return OptCapturePaymentOK0Status{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK0Status is optional CapturePaymentOK0Status.
type OptCapturePaymentOK0Status struct {
	Value CapturePaymentOK0Status
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK0Status was set.
func (o OptCapturePaymentOK0Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK0Status) Reset() {
	var v CapturePaymentOK0Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK0Status) SetTo(v CapturePaymentOK0Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK0Status) Get() (v CapturePaymentOK0Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK0Status) Or(d CapturePaymentOK0Status) CapturePaymentOK0Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK1JobCode returns new OptCapturePaymentOK1JobCode with value set to v.
func NewOptCapturePaymentOK1JobCode(v CapturePaymentOK1JobCode) OptCapturePaymentOK1JobCode {
	return OptCapturePaymentOK1JobCode{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK1JobCode is optional CapturePaymentOK1JobCode.
type OptCapturePaymentOK1JobCode struct {
	Value CapturePaymentOK1JobCode
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK1JobCode was set.
func (o OptCapturePaymentOK1JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK1JobCode) Reset() {
	var v CapturePaymentOK1JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK1JobCode) SetTo(v CapturePaymentOK1JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK1JobCode) Get() (v CapturePaymentOK1JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK1JobCode) Or(d CapturePaymentOK1JobCode) CapturePaymentOK1JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK1Method returns new OptCapturePaymentOK1Method with value set to v.
func NewOptCapturePaymentOK1Method(v CapturePaymentOK1Method) OptCapturePaymentOK1Method {
	return OptCapturePaymentOK1Method{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK1Method is optional CapturePaymentOK1Method.
type OptCapturePaymentOK1Method struct {
	Value CapturePaymentOK1Method
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK1Method was set.
func (o OptCapturePaymentOK1Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK1Method) Reset() {
	var v CapturePaymentOK1Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK1Method) SetTo(v CapturePaymentOK1Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK1Method) Get() (v CapturePaymentOK1Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK1Method) Or(d CapturePaymentOK1Method) CapturePaymentOK1Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK1PayType returns new OptCapturePaymentOK1PayType with value set to v.
func NewOptCapturePaymentOK1PayType(v CapturePaymentOK1PayType) OptCapturePaymentOK1PayType {
	return OptCapturePaymentOK1PayType{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK1PayType is optional CapturePaymentOK1PayType.
type OptCapturePaymentOK1PayType struct {
	Value CapturePaymentOK1PayType
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK1PayType was set.
func (o OptCapturePaymentOK1PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK1PayType) Reset() {
	var v CapturePaymentOK1PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK1PayType) SetTo(v CapturePaymentOK1PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK1PayType) Get() (v CapturePaymentOK1PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK1PayType) Or(d CapturePaymentOK1PayType) CapturePaymentOK1PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK1Status returns new OptCapturePaymentOK1Status with value set to v.
func NewOptCapturePaymentOK1Status(v CapturePaymentOK1Status) OptCapturePaymentOK1Status {
	return OptCapturePaymentOK1Status{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK1Status is optional CapturePaymentOK1Status.
type OptCapturePaymentOK1Status struct {
	Value CapturePaymentOK1Status
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK1Status was set.
func (o OptCapturePaymentOK1Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK1Status) Reset() {
	var v CapturePaymentOK1Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK1Status) SetTo(v CapturePaymentOK1Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK1Status) Get() (v CapturePaymentOK1Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK1Status) Or(d CapturePaymentOK1Status) CapturePaymentOK1Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK2JobCode returns new OptCapturePaymentOK2JobCode with value set to v.
func NewOptCapturePaymentOK2JobCode(v CapturePaymentOK2JobCode) OptCapturePaymentOK2JobCode {
	return OptCapturePaymentOK2JobCode{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK2JobCode is optional CapturePaymentOK2JobCode.
type OptCapturePaymentOK2JobCode struct {
	Value CapturePaymentOK2JobCode
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK2JobCode was set.
func (o OptCapturePaymentOK2JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK2JobCode) Reset() {
	var v CapturePaymentOK2JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK2JobCode) SetTo(v CapturePaymentOK2JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK2JobCode) Get() (v CapturePaymentOK2JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK2JobCode) Or(d CapturePaymentOK2JobCode) CapturePaymentOK2JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK2PayType returns new OptCapturePaymentOK2PayType with value set to v.
func NewOptCapturePaymentOK2PayType(v CapturePaymentOK2PayType) OptCapturePaymentOK2PayType {
	return OptCapturePaymentOK2PayType{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK2PayType is optional CapturePaymentOK2PayType.
type OptCapturePaymentOK2PayType struct {
	Value CapturePaymentOK2PayType
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK2PayType was set.
func (o OptCapturePaymentOK2PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK2PayType) Reset() {
	var v CapturePaymentOK2PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK2PayType) SetTo(v CapturePaymentOK2PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK2PayType) Get() (v CapturePaymentOK2PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK2PayType) Or(d CapturePaymentOK2PayType) CapturePaymentOK2PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentOK2Status returns new OptCapturePaymentOK2Status with value set to v.
func NewOptCapturePaymentOK2Status(v CapturePaymentOK2Status) OptCapturePaymentOK2Status {
	return OptCapturePaymentOK2Status{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentOK2Status is optional CapturePaymentOK2Status.
type OptCapturePaymentOK2Status struct {
	Value CapturePaymentOK2Status
	Set   bool
}

// IsSet returns true if OptCapturePaymentOK2Status was set.
func (o OptCapturePaymentOK2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentOK2Status) Reset() {
	var v CapturePaymentOK2Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentOK2Status) SetTo(v CapturePaymentOK2Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentOK2Status) Get() (v CapturePaymentOK2Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentOK2Status) Or(d CapturePaymentOK2Status) CapturePaymentOK2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCapturePaymentReq0Method returns new OptCapturePaymentReq0Method with value set to v.
func NewOptCapturePaymentReq0Method(v CapturePaymentReq0Method) OptCapturePaymentReq0Method {
	return OptCapturePaymentReq0Method{
		Value: v,
		Set:   true,
	}
}

// OptCapturePaymentReq0Method is optional CapturePaymentReq0Method.
type OptCapturePaymentReq0Method struct {
	Value CapturePaymentReq0Method
	Set   bool
}

// IsSet returns true if OptCapturePaymentReq0Method was set.
func (o OptCapturePaymentReq0Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCapturePaymentReq0Method) Reset() {
	var v CapturePaymentReq0Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCapturePaymentReq0Method) SetTo(v CapturePaymentReq0Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCapturePaymentReq0Method) Get() (v CapturePaymentReq0Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCapturePaymentReq0Method) Or(d CapturePaymentReq0Method) CapturePaymentReq0Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardBrand returns new OptCardBrand with value set to v.
func NewOptCardBrand(v CardBrand) OptCardBrand {
	return OptCardBrand{
		Value: v,
		Set:   true,
	}
}

// OptCardBrand is optional CardBrand.
type OptCardBrand struct {
	Value CardBrand
	Set   bool
}

// IsSet returns true if OptCardBrand was set.
func (o OptCardBrand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardBrand) Reset() {
	var v CardBrand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardBrand) SetTo(v CardBrand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardBrand) Get() (v CardBrand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardBrand) Or(d CardBrand) CardBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardDefaultFlag returns new OptCardDefaultFlag with value set to v.
func NewOptCardDefaultFlag(v CardDefaultFlag) OptCardDefaultFlag {
	return OptCardDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptCardDefaultFlag is optional CardDefaultFlag.
type OptCardDefaultFlag struct {
	Value CardDefaultFlag
	Set   bool
}

// IsSet returns true if OptCardDefaultFlag was set.
func (o OptCardDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardDefaultFlag) Reset() {
	var v CardDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardDefaultFlag) SetTo(v CardDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardDefaultFlag) Get() (v CardDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardDefaultFlag) Or(d CardDefaultFlag) CardDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardPaymentSessionJobCode returns new OptCardPaymentSessionJobCode with value set to v.
func NewOptCardPaymentSessionJobCode(v CardPaymentSessionJobCode) OptCardPaymentSessionJobCode {
	return OptCardPaymentSessionJobCode{
		Value: v,
		Set:   true,
	}
}

// OptCardPaymentSessionJobCode is optional CardPaymentSessionJobCode.
type OptCardPaymentSessionJobCode struct {
	Value CardPaymentSessionJobCode
	Set   bool
}

// IsSet returns true if OptCardPaymentSessionJobCode was set.
func (o OptCardPaymentSessionJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardPaymentSessionJobCode) Reset() {
	var v CardPaymentSessionJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardPaymentSessionJobCode) SetTo(v CardPaymentSessionJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardPaymentSessionJobCode) Get() (v CardPaymentSessionJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardPaymentSessionJobCode) Or(d CardPaymentSessionJobCode) CardPaymentSessionJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardRegistrationSessionCreatingRequestCompletionMailSendFlag returns new OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag with value set to v.
func NewOptCardRegistrationSessionCreatingRequestCompletionMailSendFlag(v CardRegistrationSessionCreatingRequestCompletionMailSendFlag) OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag {
	return OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag is optional CardRegistrationSessionCreatingRequestCompletionMailSendFlag.
type OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag struct {
	Value CardRegistrationSessionCreatingRequestCompletionMailSendFlag
	Set   bool
}

// IsSet returns true if OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag was set.
func (o OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) Reset() {
	var v CardRegistrationSessionCreatingRequestCompletionMailSendFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) SetTo(v CardRegistrationSessionCreatingRequestCompletionMailSendFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) Get() (v CardRegistrationSessionCreatingRequestCompletionMailSendFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) Or(d CardRegistrationSessionCreatingRequestCompletionMailSendFlag) CardRegistrationSessionCreatingRequestCompletionMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardRegistrationSessionCreatingRequestGuideMailSendFlag returns new OptCardRegistrationSessionCreatingRequestGuideMailSendFlag with value set to v.
func NewOptCardRegistrationSessionCreatingRequestGuideMailSendFlag(v CardRegistrationSessionCreatingRequestGuideMailSendFlag) OptCardRegistrationSessionCreatingRequestGuideMailSendFlag {
	return OptCardRegistrationSessionCreatingRequestGuideMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptCardRegistrationSessionCreatingRequestGuideMailSendFlag is optional CardRegistrationSessionCreatingRequestGuideMailSendFlag.
type OptCardRegistrationSessionCreatingRequestGuideMailSendFlag struct {
	Value CardRegistrationSessionCreatingRequestGuideMailSendFlag
	Set   bool
}

// IsSet returns true if OptCardRegistrationSessionCreatingRequestGuideMailSendFlag was set.
func (o OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) Reset() {
	var v CardRegistrationSessionCreatingRequestGuideMailSendFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) SetTo(v CardRegistrationSessionCreatingRequestGuideMailSendFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) Get() (v CardRegistrationSessionCreatingRequestGuideMailSendFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) Or(d CardRegistrationSessionCreatingRequestGuideMailSendFlag) CardRegistrationSessionCreatingRequestGuideMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardRegistrationSessionCreatingResponseCompletionMailSendFlag returns new OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag with value set to v.
func NewOptCardRegistrationSessionCreatingResponseCompletionMailSendFlag(v CardRegistrationSessionCreatingResponseCompletionMailSendFlag) OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag {
	return OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag is optional CardRegistrationSessionCreatingResponseCompletionMailSendFlag.
type OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag struct {
	Value CardRegistrationSessionCreatingResponseCompletionMailSendFlag
	Set   bool
}

// IsSet returns true if OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag was set.
func (o OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) Reset() {
	var v CardRegistrationSessionCreatingResponseCompletionMailSendFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) SetTo(v CardRegistrationSessionCreatingResponseCompletionMailSendFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) Get() (v CardRegistrationSessionCreatingResponseCompletionMailSendFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) Or(d CardRegistrationSessionCreatingResponseCompletionMailSendFlag) CardRegistrationSessionCreatingResponseCompletionMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardRegistrationSessionCreatingResponseGuideMailSendFlag returns new OptCardRegistrationSessionCreatingResponseGuideMailSendFlag with value set to v.
func NewOptCardRegistrationSessionCreatingResponseGuideMailSendFlag(v CardRegistrationSessionCreatingResponseGuideMailSendFlag) OptCardRegistrationSessionCreatingResponseGuideMailSendFlag {
	return OptCardRegistrationSessionCreatingResponseGuideMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptCardRegistrationSessionCreatingResponseGuideMailSendFlag is optional CardRegistrationSessionCreatingResponseGuideMailSendFlag.
type OptCardRegistrationSessionCreatingResponseGuideMailSendFlag struct {
	Value CardRegistrationSessionCreatingResponseGuideMailSendFlag
	Set   bool
}

// IsSet returns true if OptCardRegistrationSessionCreatingResponseGuideMailSendFlag was set.
func (o OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) Reset() {
	var v CardRegistrationSessionCreatingResponseGuideMailSendFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) SetTo(v CardRegistrationSessionCreatingResponseGuideMailSendFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) Get() (v CardRegistrationSessionCreatingResponseGuideMailSendFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) Or(d CardRegistrationSessionCreatingResponseGuideMailSendFlag) CardRegistrationSessionCreatingResponseGuideMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardRegistrationSessionCreatingResponseStatus returns new OptCardRegistrationSessionCreatingResponseStatus with value set to v.
func NewOptCardRegistrationSessionCreatingResponseStatus(v CardRegistrationSessionCreatingResponseStatus) OptCardRegistrationSessionCreatingResponseStatus {
	return OptCardRegistrationSessionCreatingResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptCardRegistrationSessionCreatingResponseStatus is optional CardRegistrationSessionCreatingResponseStatus.
type OptCardRegistrationSessionCreatingResponseStatus struct {
	Value CardRegistrationSessionCreatingResponseStatus
	Set   bool
}

// IsSet returns true if OptCardRegistrationSessionCreatingResponseStatus was set.
func (o OptCardRegistrationSessionCreatingResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardRegistrationSessionCreatingResponseStatus) Reset() {
	var v CardRegistrationSessionCreatingResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardRegistrationSessionCreatingResponseStatus) SetTo(v CardRegistrationSessionCreatingResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardRegistrationSessionCreatingResponseStatus) Get() (v CardRegistrationSessionCreatingResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardRegistrationSessionCreatingResponseStatus) Or(d CardRegistrationSessionCreatingResponseStatus) CardRegistrationSessionCreatingResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCardType returns new OptCardType with value set to v.
func NewOptCardType(v CardType) OptCardType {
	return OptCardType{
		Value: v,
		Set:   true,
	}
}

// OptCardType is optional CardType.
type OptCardType struct {
	Value CardType
	Set   bool
}

// IsSet returns true if OptCardType was set.
func (o OptCardType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCardType) Reset() {
	var v CardType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCardType) SetTo(v CardType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCardType) Get() (v CardType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCardType) Or(d CardType) CardType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK0JobCode returns new OptChangeAmountOfPaymentOK0JobCode with value set to v.
func NewOptChangeAmountOfPaymentOK0JobCode(v ChangeAmountOfPaymentOK0JobCode) OptChangeAmountOfPaymentOK0JobCode {
	return OptChangeAmountOfPaymentOK0JobCode{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK0JobCode is optional ChangeAmountOfPaymentOK0JobCode.
type OptChangeAmountOfPaymentOK0JobCode struct {
	Value ChangeAmountOfPaymentOK0JobCode
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK0JobCode was set.
func (o OptChangeAmountOfPaymentOK0JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK0JobCode) Reset() {
	var v ChangeAmountOfPaymentOK0JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK0JobCode) SetTo(v ChangeAmountOfPaymentOK0JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK0JobCode) Get() (v ChangeAmountOfPaymentOK0JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK0JobCode) Or(d ChangeAmountOfPaymentOK0JobCode) ChangeAmountOfPaymentOK0JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK0Method returns new OptChangeAmountOfPaymentOK0Method with value set to v.
func NewOptChangeAmountOfPaymentOK0Method(v ChangeAmountOfPaymentOK0Method) OptChangeAmountOfPaymentOK0Method {
	return OptChangeAmountOfPaymentOK0Method{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK0Method is optional ChangeAmountOfPaymentOK0Method.
type OptChangeAmountOfPaymentOK0Method struct {
	Value ChangeAmountOfPaymentOK0Method
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK0Method was set.
func (o OptChangeAmountOfPaymentOK0Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK0Method) Reset() {
	var v ChangeAmountOfPaymentOK0Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK0Method) SetTo(v ChangeAmountOfPaymentOK0Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK0Method) Get() (v ChangeAmountOfPaymentOK0Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK0Method) Or(d ChangeAmountOfPaymentOK0Method) ChangeAmountOfPaymentOK0Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK0PayType returns new OptChangeAmountOfPaymentOK0PayType with value set to v.
func NewOptChangeAmountOfPaymentOK0PayType(v ChangeAmountOfPaymentOK0PayType) OptChangeAmountOfPaymentOK0PayType {
	return OptChangeAmountOfPaymentOK0PayType{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK0PayType is optional ChangeAmountOfPaymentOK0PayType.
type OptChangeAmountOfPaymentOK0PayType struct {
	Value ChangeAmountOfPaymentOK0PayType
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK0PayType was set.
func (o OptChangeAmountOfPaymentOK0PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK0PayType) Reset() {
	var v ChangeAmountOfPaymentOK0PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK0PayType) SetTo(v ChangeAmountOfPaymentOK0PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK0PayType) Get() (v ChangeAmountOfPaymentOK0PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK0PayType) Or(d ChangeAmountOfPaymentOK0PayType) ChangeAmountOfPaymentOK0PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK0Status returns new OptChangeAmountOfPaymentOK0Status with value set to v.
func NewOptChangeAmountOfPaymentOK0Status(v ChangeAmountOfPaymentOK0Status) OptChangeAmountOfPaymentOK0Status {
	return OptChangeAmountOfPaymentOK0Status{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK0Status is optional ChangeAmountOfPaymentOK0Status.
type OptChangeAmountOfPaymentOK0Status struct {
	Value ChangeAmountOfPaymentOK0Status
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK0Status was set.
func (o OptChangeAmountOfPaymentOK0Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK0Status) Reset() {
	var v ChangeAmountOfPaymentOK0Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK0Status) SetTo(v ChangeAmountOfPaymentOK0Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK0Status) Get() (v ChangeAmountOfPaymentOK0Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK0Status) Or(d ChangeAmountOfPaymentOK0Status) ChangeAmountOfPaymentOK0Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK1JobCode returns new OptChangeAmountOfPaymentOK1JobCode with value set to v.
func NewOptChangeAmountOfPaymentOK1JobCode(v ChangeAmountOfPaymentOK1JobCode) OptChangeAmountOfPaymentOK1JobCode {
	return OptChangeAmountOfPaymentOK1JobCode{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK1JobCode is optional ChangeAmountOfPaymentOK1JobCode.
type OptChangeAmountOfPaymentOK1JobCode struct {
	Value ChangeAmountOfPaymentOK1JobCode
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK1JobCode was set.
func (o OptChangeAmountOfPaymentOK1JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK1JobCode) Reset() {
	var v ChangeAmountOfPaymentOK1JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK1JobCode) SetTo(v ChangeAmountOfPaymentOK1JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK1JobCode) Get() (v ChangeAmountOfPaymentOK1JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK1JobCode) Or(d ChangeAmountOfPaymentOK1JobCode) ChangeAmountOfPaymentOK1JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK1PayType returns new OptChangeAmountOfPaymentOK1PayType with value set to v.
func NewOptChangeAmountOfPaymentOK1PayType(v ChangeAmountOfPaymentOK1PayType) OptChangeAmountOfPaymentOK1PayType {
	return OptChangeAmountOfPaymentOK1PayType{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK1PayType is optional ChangeAmountOfPaymentOK1PayType.
type OptChangeAmountOfPaymentOK1PayType struct {
	Value ChangeAmountOfPaymentOK1PayType
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK1PayType was set.
func (o OptChangeAmountOfPaymentOK1PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK1PayType) Reset() {
	var v ChangeAmountOfPaymentOK1PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK1PayType) SetTo(v ChangeAmountOfPaymentOK1PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK1PayType) Get() (v ChangeAmountOfPaymentOK1PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK1PayType) Or(d ChangeAmountOfPaymentOK1PayType) ChangeAmountOfPaymentOK1PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK1Status returns new OptChangeAmountOfPaymentOK1Status with value set to v.
func NewOptChangeAmountOfPaymentOK1Status(v ChangeAmountOfPaymentOK1Status) OptChangeAmountOfPaymentOK1Status {
	return OptChangeAmountOfPaymentOK1Status{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK1Status is optional ChangeAmountOfPaymentOK1Status.
type OptChangeAmountOfPaymentOK1Status struct {
	Value ChangeAmountOfPaymentOK1Status
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK1Status was set.
func (o OptChangeAmountOfPaymentOK1Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK1Status) Reset() {
	var v ChangeAmountOfPaymentOK1Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK1Status) SetTo(v ChangeAmountOfPaymentOK1Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK1Status) Get() (v ChangeAmountOfPaymentOK1Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK1Status) Or(d ChangeAmountOfPaymentOK1Status) ChangeAmountOfPaymentOK1Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK2PayType returns new OptChangeAmountOfPaymentOK2PayType with value set to v.
func NewOptChangeAmountOfPaymentOK2PayType(v ChangeAmountOfPaymentOK2PayType) OptChangeAmountOfPaymentOK2PayType {
	return OptChangeAmountOfPaymentOK2PayType{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK2PayType is optional ChangeAmountOfPaymentOK2PayType.
type OptChangeAmountOfPaymentOK2PayType struct {
	Value ChangeAmountOfPaymentOK2PayType
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK2PayType was set.
func (o OptChangeAmountOfPaymentOK2PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK2PayType) Reset() {
	var v ChangeAmountOfPaymentOK2PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK2PayType) SetTo(v ChangeAmountOfPaymentOK2PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK2PayType) Get() (v ChangeAmountOfPaymentOK2PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK2PayType) Or(d ChangeAmountOfPaymentOK2PayType) ChangeAmountOfPaymentOK2PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChangeAmountOfPaymentOK2Status returns new OptChangeAmountOfPaymentOK2Status with value set to v.
func NewOptChangeAmountOfPaymentOK2Status(v ChangeAmountOfPaymentOK2Status) OptChangeAmountOfPaymentOK2Status {
	return OptChangeAmountOfPaymentOK2Status{
		Value: v,
		Set:   true,
	}
}

// OptChangeAmountOfPaymentOK2Status is optional ChangeAmountOfPaymentOK2Status.
type OptChangeAmountOfPaymentOK2Status struct {
	Value ChangeAmountOfPaymentOK2Status
	Set   bool
}

// IsSet returns true if OptChangeAmountOfPaymentOK2Status was set.
func (o OptChangeAmountOfPaymentOK2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChangeAmountOfPaymentOK2Status) Reset() {
	var v ChangeAmountOfPaymentOK2Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChangeAmountOfPaymentOK2Status) SetTo(v ChangeAmountOfPaymentOK2Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChangeAmountOfPaymentOK2Status) Get() (v ChangeAmountOfPaymentOK2Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChangeAmountOfPaymentOK2Status) Or(d ChangeAmountOfPaymentOK2Status) ChangeAmountOfPaymentOK2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContentInfoV2 returns new OptContentInfoV2 with value set to v.
func NewOptContentInfoV2(v ContentInfoV2) OptContentInfoV2 {
	return OptContentInfoV2{
		Value: v,
		Set:   true,
	}
}

// OptContentInfoV2 is optional ContentInfoV2.
type OptContentInfoV2 struct {
	Value ContentInfoV2
	Set   bool
}

// IsSet returns true if OptContentInfoV2 was set.
func (o OptContentInfoV2) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContentInfoV2) Reset() {
	var v ContentInfoV2
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContentInfoV2) SetTo(v ContentInfoV2) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContentInfoV2) Get() (v ContentInfoV2, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContentInfoV2) Or(d ContentInfoV2) ContentInfoV2 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseAvailableStatusCode returns new OptContractsRetrievingResponseAvailableStatusCode with value set to v.
func NewOptContractsRetrievingResponseAvailableStatusCode(v ContractsRetrievingResponseAvailableStatusCode) OptContractsRetrievingResponseAvailableStatusCode {
	return OptContractsRetrievingResponseAvailableStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseAvailableStatusCode is optional ContractsRetrievingResponseAvailableStatusCode.
type OptContractsRetrievingResponseAvailableStatusCode struct {
	Value ContractsRetrievingResponseAvailableStatusCode
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseAvailableStatusCode was set.
func (o OptContractsRetrievingResponseAvailableStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseAvailableStatusCode) Reset() {
	var v ContractsRetrievingResponseAvailableStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseAvailableStatusCode) SetTo(v ContractsRetrievingResponseAvailableStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseAvailableStatusCode) Get() (v ContractsRetrievingResponseAvailableStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseAvailableStatusCode) Or(d ContractsRetrievingResponseAvailableStatusCode) ContractsRetrievingResponseAvailableStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseContractBankAccount returns new OptContractsRetrievingResponseContractBankAccount with value set to v.
func NewOptContractsRetrievingResponseContractBankAccount(v ContractsRetrievingResponseContractBankAccount) OptContractsRetrievingResponseContractBankAccount {
	return OptContractsRetrievingResponseContractBankAccount{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseContractBankAccount is optional ContractsRetrievingResponseContractBankAccount.
type OptContractsRetrievingResponseContractBankAccount struct {
	Value ContractsRetrievingResponseContractBankAccount
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseContractBankAccount was set.
func (o OptContractsRetrievingResponseContractBankAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseContractBankAccount) Reset() {
	var v ContractsRetrievingResponseContractBankAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseContractBankAccount) SetTo(v ContractsRetrievingResponseContractBankAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseContractBankAccount) Get() (v ContractsRetrievingResponseContractBankAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseContractBankAccount) Or(d ContractsRetrievingResponseContractBankAccount) ContractsRetrievingResponseContractBankAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseContractBankAccountAccountKind returns new OptContractsRetrievingResponseContractBankAccountAccountKind with value set to v.
func NewOptContractsRetrievingResponseContractBankAccountAccountKind(v ContractsRetrievingResponseContractBankAccountAccountKind) OptContractsRetrievingResponseContractBankAccountAccountKind {
	return OptContractsRetrievingResponseContractBankAccountAccountKind{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseContractBankAccountAccountKind is optional ContractsRetrievingResponseContractBankAccountAccountKind.
type OptContractsRetrievingResponseContractBankAccountAccountKind struct {
	Value ContractsRetrievingResponseContractBankAccountAccountKind
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseContractBankAccountAccountKind was set.
func (o OptContractsRetrievingResponseContractBankAccountAccountKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseContractBankAccountAccountKind) Reset() {
	var v ContractsRetrievingResponseContractBankAccountAccountKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseContractBankAccountAccountKind) SetTo(v ContractsRetrievingResponseContractBankAccountAccountKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseContractBankAccountAccountKind) Get() (v ContractsRetrievingResponseContractBankAccountAccountKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseContractBankAccountAccountKind) Or(d ContractsRetrievingResponseContractBankAccountAccountKind) ContractsRetrievingResponseContractBankAccountAccountKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseContractDetail returns new OptContractsRetrievingResponseContractDetail with value set to v.
func NewOptContractsRetrievingResponseContractDetail(v ContractsRetrievingResponseContractDetail) OptContractsRetrievingResponseContractDetail {
	return OptContractsRetrievingResponseContractDetail{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseContractDetail is optional ContractsRetrievingResponseContractDetail.
type OptContractsRetrievingResponseContractDetail struct {
	Value ContractsRetrievingResponseContractDetail
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseContractDetail was set.
func (o OptContractsRetrievingResponseContractDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseContractDetail) Reset() {
	var v ContractsRetrievingResponseContractDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseContractDetail) SetTo(v ContractsRetrievingResponseContractDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseContractDetail) Get() (v ContractsRetrievingResponseContractDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseContractDetail) Or(d ContractsRetrievingResponseContractDetail) ContractsRetrievingResponseContractDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseContractDetailPayBy returns new OptContractsRetrievingResponseContractDetailPayBy with value set to v.
func NewOptContractsRetrievingResponseContractDetailPayBy(v ContractsRetrievingResponseContractDetailPayBy) OptContractsRetrievingResponseContractDetailPayBy {
	return OptContractsRetrievingResponseContractDetailPayBy{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseContractDetailPayBy is optional ContractsRetrievingResponseContractDetailPayBy.
type OptContractsRetrievingResponseContractDetailPayBy struct {
	Value ContractsRetrievingResponseContractDetailPayBy
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseContractDetailPayBy was set.
func (o OptContractsRetrievingResponseContractDetailPayBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseContractDetailPayBy) Reset() {
	var v ContractsRetrievingResponseContractDetailPayBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseContractDetailPayBy) SetTo(v ContractsRetrievingResponseContractDetailPayBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseContractDetailPayBy) Get() (v ContractsRetrievingResponseContractDetailPayBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseContractDetailPayBy) Or(d ContractsRetrievingResponseContractDetailPayBy) ContractsRetrievingResponseContractDetailPayBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseContractDetailSiteExisting returns new OptContractsRetrievingResponseContractDetailSiteExisting with value set to v.
func NewOptContractsRetrievingResponseContractDetailSiteExisting(v ContractsRetrievingResponseContractDetailSiteExisting) OptContractsRetrievingResponseContractDetailSiteExisting {
	return OptContractsRetrievingResponseContractDetailSiteExisting{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseContractDetailSiteExisting is optional ContractsRetrievingResponseContractDetailSiteExisting.
type OptContractsRetrievingResponseContractDetailSiteExisting struct {
	Value ContractsRetrievingResponseContractDetailSiteExisting
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseContractDetailSiteExisting was set.
func (o OptContractsRetrievingResponseContractDetailSiteExisting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseContractDetailSiteExisting) Reset() {
	var v ContractsRetrievingResponseContractDetailSiteExisting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseContractDetailSiteExisting) SetTo(v ContractsRetrievingResponseContractDetailSiteExisting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseContractDetailSiteExisting) Get() (v ContractsRetrievingResponseContractDetailSiteExisting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseContractDetailSiteExisting) Or(d ContractsRetrievingResponseContractDetailSiteExisting) ContractsRetrievingResponseContractDetailSiteExisting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseContractVirtualBank returns new OptContractsRetrievingResponseContractVirtualBank with value set to v.
func NewOptContractsRetrievingResponseContractVirtualBank(v ContractsRetrievingResponseContractVirtualBank) OptContractsRetrievingResponseContractVirtualBank {
	return OptContractsRetrievingResponseContractVirtualBank{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseContractVirtualBank is optional ContractsRetrievingResponseContractVirtualBank.
type OptContractsRetrievingResponseContractVirtualBank struct {
	Value ContractsRetrievingResponseContractVirtualBank
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseContractVirtualBank was set.
func (o OptContractsRetrievingResponseContractVirtualBank) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseContractVirtualBank) Reset() {
	var v ContractsRetrievingResponseContractVirtualBank
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseContractVirtualBank) SetTo(v ContractsRetrievingResponseContractVirtualBank) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseContractVirtualBank) Get() (v ContractsRetrievingResponseContractVirtualBank, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseContractVirtualBank) Or(d ContractsRetrievingResponseContractVirtualBank) ContractsRetrievingResponseContractVirtualBank {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseContractVirtualBankAccountKind returns new OptContractsRetrievingResponseContractVirtualBankAccountKind with value set to v.
func NewOptContractsRetrievingResponseContractVirtualBankAccountKind(v ContractsRetrievingResponseContractVirtualBankAccountKind) OptContractsRetrievingResponseContractVirtualBankAccountKind {
	return OptContractsRetrievingResponseContractVirtualBankAccountKind{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseContractVirtualBankAccountKind is optional ContractsRetrievingResponseContractVirtualBankAccountKind.
type OptContractsRetrievingResponseContractVirtualBankAccountKind struct {
	Value ContractsRetrievingResponseContractVirtualBankAccountKind
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseContractVirtualBankAccountKind was set.
func (o OptContractsRetrievingResponseContractVirtualBankAccountKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseContractVirtualBankAccountKind) Reset() {
	var v ContractsRetrievingResponseContractVirtualBankAccountKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseContractVirtualBankAccountKind) SetTo(v ContractsRetrievingResponseContractVirtualBankAccountKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseContractVirtualBankAccountKind) Get() (v ContractsRetrievingResponseContractVirtualBankAccountKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseContractVirtualBankAccountKind) Or(d ContractsRetrievingResponseContractVirtualBankAccountKind) ContractsRetrievingResponseContractVirtualBankAccountKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseCreditCardSetting returns new OptContractsRetrievingResponseCreditCardSetting with value set to v.
func NewOptContractsRetrievingResponseCreditCardSetting(v ContractsRetrievingResponseCreditCardSetting) OptContractsRetrievingResponseCreditCardSetting {
	return OptContractsRetrievingResponseCreditCardSetting{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseCreditCardSetting is optional ContractsRetrievingResponseCreditCardSetting.
type OptContractsRetrievingResponseCreditCardSetting struct {
	Value ContractsRetrievingResponseCreditCardSetting
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseCreditCardSetting was set.
func (o OptContractsRetrievingResponseCreditCardSetting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseCreditCardSetting) Reset() {
	var v ContractsRetrievingResponseCreditCardSetting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseCreditCardSetting) SetTo(v ContractsRetrievingResponseCreditCardSetting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseCreditCardSetting) Get() (v ContractsRetrievingResponseCreditCardSetting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseCreditCardSetting) Or(d ContractsRetrievingResponseCreditCardSetting) ContractsRetrievingResponseCreditCardSetting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseExaminationItemExaminationMasterID returns new OptContractsRetrievingResponseExaminationItemExaminationMasterID with value set to v.
func NewOptContractsRetrievingResponseExaminationItemExaminationMasterID(v ContractsRetrievingResponseExaminationItemExaminationMasterID) OptContractsRetrievingResponseExaminationItemExaminationMasterID {
	return OptContractsRetrievingResponseExaminationItemExaminationMasterID{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseExaminationItemExaminationMasterID is optional ContractsRetrievingResponseExaminationItemExaminationMasterID.
type OptContractsRetrievingResponseExaminationItemExaminationMasterID struct {
	Value ContractsRetrievingResponseExaminationItemExaminationMasterID
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseExaminationItemExaminationMasterID was set.
func (o OptContractsRetrievingResponseExaminationItemExaminationMasterID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseExaminationItemExaminationMasterID) Reset() {
	var v ContractsRetrievingResponseExaminationItemExaminationMasterID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseExaminationItemExaminationMasterID) SetTo(v ContractsRetrievingResponseExaminationItemExaminationMasterID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseExaminationItemExaminationMasterID) Get() (v ContractsRetrievingResponseExaminationItemExaminationMasterID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseExaminationItemExaminationMasterID) Or(d ContractsRetrievingResponseExaminationItemExaminationMasterID) ContractsRetrievingResponseExaminationItemExaminationMasterID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseExaminationItemStatusCode returns new OptContractsRetrievingResponseExaminationItemStatusCode with value set to v.
func NewOptContractsRetrievingResponseExaminationItemStatusCode(v ContractsRetrievingResponseExaminationItemStatusCode) OptContractsRetrievingResponseExaminationItemStatusCode {
	return OptContractsRetrievingResponseExaminationItemStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseExaminationItemStatusCode is optional ContractsRetrievingResponseExaminationItemStatusCode.
type OptContractsRetrievingResponseExaminationItemStatusCode struct {
	Value ContractsRetrievingResponseExaminationItemStatusCode
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseExaminationItemStatusCode was set.
func (o OptContractsRetrievingResponseExaminationItemStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseExaminationItemStatusCode) Reset() {
	var v ContractsRetrievingResponseExaminationItemStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseExaminationItemStatusCode) SetTo(v ContractsRetrievingResponseExaminationItemStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseExaminationItemStatusCode) Get() (v ContractsRetrievingResponseExaminationItemStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseExaminationItemStatusCode) Or(d ContractsRetrievingResponseExaminationItemStatusCode) ContractsRetrievingResponseExaminationItemStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseOfficialRegisteredCorporateInfo returns new OptContractsRetrievingResponseOfficialRegisteredCorporateInfo with value set to v.
func NewOptContractsRetrievingResponseOfficialRegisteredCorporateInfo(v ContractsRetrievingResponseOfficialRegisteredCorporateInfo) OptContractsRetrievingResponseOfficialRegisteredCorporateInfo {
	return OptContractsRetrievingResponseOfficialRegisteredCorporateInfo{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseOfficialRegisteredCorporateInfo is optional ContractsRetrievingResponseOfficialRegisteredCorporateInfo.
type OptContractsRetrievingResponseOfficialRegisteredCorporateInfo struct {
	Value ContractsRetrievingResponseOfficialRegisteredCorporateInfo
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseOfficialRegisteredCorporateInfo was set.
func (o OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) Reset() {
	var v ContractsRetrievingResponseOfficialRegisteredCorporateInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) SetTo(v ContractsRetrievingResponseOfficialRegisteredCorporateInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) Get() (v ContractsRetrievingResponseOfficialRegisteredCorporateInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) Or(d ContractsRetrievingResponseOfficialRegisteredCorporateInfo) ContractsRetrievingResponseOfficialRegisteredCorporateInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContractsRetrievingResponseStatusCode returns new OptContractsRetrievingResponseStatusCode with value set to v.
func NewOptContractsRetrievingResponseStatusCode(v ContractsRetrievingResponseStatusCode) OptContractsRetrievingResponseStatusCode {
	return OptContractsRetrievingResponseStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptContractsRetrievingResponseStatusCode is optional ContractsRetrievingResponseStatusCode.
type OptContractsRetrievingResponseStatusCode struct {
	Value ContractsRetrievingResponseStatusCode
	Set   bool
}

// IsSet returns true if OptContractsRetrievingResponseStatusCode was set.
func (o OptContractsRetrievingResponseStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContractsRetrievingResponseStatusCode) Reset() {
	var v ContractsRetrievingResponseStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContractsRetrievingResponseStatusCode) SetTo(v ContractsRetrievingResponseStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContractsRetrievingResponseStatusCode) Get() (v ContractsRetrievingResponseStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContractsRetrievingResponseStatusCode) Or(d ContractsRetrievingResponseStatusCode) ContractsRetrievingResponseStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK0JobCode returns new OptCreatePaymentOK0JobCode with value set to v.
func NewOptCreatePaymentOK0JobCode(v CreatePaymentOK0JobCode) OptCreatePaymentOK0JobCode {
	return OptCreatePaymentOK0JobCode{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK0JobCode is optional CreatePaymentOK0JobCode.
type OptCreatePaymentOK0JobCode struct {
	Value CreatePaymentOK0JobCode
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK0JobCode was set.
func (o OptCreatePaymentOK0JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK0JobCode) Reset() {
	var v CreatePaymentOK0JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK0JobCode) SetTo(v CreatePaymentOK0JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK0JobCode) Get() (v CreatePaymentOK0JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK0JobCode) Or(d CreatePaymentOK0JobCode) CreatePaymentOK0JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK0Method returns new OptCreatePaymentOK0Method with value set to v.
func NewOptCreatePaymentOK0Method(v CreatePaymentOK0Method) OptCreatePaymentOK0Method {
	return OptCreatePaymentOK0Method{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK0Method is optional CreatePaymentOK0Method.
type OptCreatePaymentOK0Method struct {
	Value CreatePaymentOK0Method
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK0Method was set.
func (o OptCreatePaymentOK0Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK0Method) Reset() {
	var v CreatePaymentOK0Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK0Method) SetTo(v CreatePaymentOK0Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK0Method) Get() (v CreatePaymentOK0Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK0Method) Or(d CreatePaymentOK0Method) CreatePaymentOK0Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK0PayType returns new OptCreatePaymentOK0PayType with value set to v.
func NewOptCreatePaymentOK0PayType(v CreatePaymentOK0PayType) OptCreatePaymentOK0PayType {
	return OptCreatePaymentOK0PayType{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK0PayType is optional CreatePaymentOK0PayType.
type OptCreatePaymentOK0PayType struct {
	Value CreatePaymentOK0PayType
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK0PayType was set.
func (o OptCreatePaymentOK0PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK0PayType) Reset() {
	var v CreatePaymentOK0PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK0PayType) SetTo(v CreatePaymentOK0PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK0PayType) Get() (v CreatePaymentOK0PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK0PayType) Or(d CreatePaymentOK0PayType) CreatePaymentOK0PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK0Status returns new OptCreatePaymentOK0Status with value set to v.
func NewOptCreatePaymentOK0Status(v CreatePaymentOK0Status) OptCreatePaymentOK0Status {
	return OptCreatePaymentOK0Status{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK0Status is optional CreatePaymentOK0Status.
type OptCreatePaymentOK0Status struct {
	Value CreatePaymentOK0Status
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK0Status was set.
func (o OptCreatePaymentOK0Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK0Status) Reset() {
	var v CreatePaymentOK0Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK0Status) SetTo(v CreatePaymentOK0Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK0Status) Get() (v CreatePaymentOK0Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK0Status) Or(d CreatePaymentOK0Status) CreatePaymentOK0Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK1JobCode returns new OptCreatePaymentOK1JobCode with value set to v.
func NewOptCreatePaymentOK1JobCode(v CreatePaymentOK1JobCode) OptCreatePaymentOK1JobCode {
	return OptCreatePaymentOK1JobCode{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK1JobCode is optional CreatePaymentOK1JobCode.
type OptCreatePaymentOK1JobCode struct {
	Value CreatePaymentOK1JobCode
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK1JobCode was set.
func (o OptCreatePaymentOK1JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK1JobCode) Reset() {
	var v CreatePaymentOK1JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK1JobCode) SetTo(v CreatePaymentOK1JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK1JobCode) Get() (v CreatePaymentOK1JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK1JobCode) Or(d CreatePaymentOK1JobCode) CreatePaymentOK1JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK1Method returns new OptCreatePaymentOK1Method with value set to v.
func NewOptCreatePaymentOK1Method(v CreatePaymentOK1Method) OptCreatePaymentOK1Method {
	return OptCreatePaymentOK1Method{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK1Method is optional CreatePaymentOK1Method.
type OptCreatePaymentOK1Method struct {
	Value CreatePaymentOK1Method
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK1Method was set.
func (o OptCreatePaymentOK1Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK1Method) Reset() {
	var v CreatePaymentOK1Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK1Method) SetTo(v CreatePaymentOK1Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK1Method) Get() (v CreatePaymentOK1Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK1Method) Or(d CreatePaymentOK1Method) CreatePaymentOK1Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK1PayType returns new OptCreatePaymentOK1PayType with value set to v.
func NewOptCreatePaymentOK1PayType(v CreatePaymentOK1PayType) OptCreatePaymentOK1PayType {
	return OptCreatePaymentOK1PayType{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK1PayType is optional CreatePaymentOK1PayType.
type OptCreatePaymentOK1PayType struct {
	Value CreatePaymentOK1PayType
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK1PayType was set.
func (o OptCreatePaymentOK1PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK1PayType) Reset() {
	var v CreatePaymentOK1PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK1PayType) SetTo(v CreatePaymentOK1PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK1PayType) Get() (v CreatePaymentOK1PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK1PayType) Or(d CreatePaymentOK1PayType) CreatePaymentOK1PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK1Status returns new OptCreatePaymentOK1Status with value set to v.
func NewOptCreatePaymentOK1Status(v CreatePaymentOK1Status) OptCreatePaymentOK1Status {
	return OptCreatePaymentOK1Status{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK1Status is optional CreatePaymentOK1Status.
type OptCreatePaymentOK1Status struct {
	Value CreatePaymentOK1Status
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK1Status was set.
func (o OptCreatePaymentOK1Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK1Status) Reset() {
	var v CreatePaymentOK1Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK1Status) SetTo(v CreatePaymentOK1Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK1Status) Get() (v CreatePaymentOK1Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK1Status) Or(d CreatePaymentOK1Status) CreatePaymentOK1Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK2CancelOverpaymentFlag returns new OptCreatePaymentOK2CancelOverpaymentFlag with value set to v.
func NewOptCreatePaymentOK2CancelOverpaymentFlag(v CreatePaymentOK2CancelOverpaymentFlag) OptCreatePaymentOK2CancelOverpaymentFlag {
	return OptCreatePaymentOK2CancelOverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK2CancelOverpaymentFlag is optional CreatePaymentOK2CancelOverpaymentFlag.
type OptCreatePaymentOK2CancelOverpaymentFlag struct {
	Value CreatePaymentOK2CancelOverpaymentFlag
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK2CancelOverpaymentFlag was set.
func (o OptCreatePaymentOK2CancelOverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK2CancelOverpaymentFlag) Reset() {
	var v CreatePaymentOK2CancelOverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK2CancelOverpaymentFlag) SetTo(v CreatePaymentOK2CancelOverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK2CancelOverpaymentFlag) Get() (v CreatePaymentOK2CancelOverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK2CancelOverpaymentFlag) Or(d CreatePaymentOK2CancelOverpaymentFlag) CreatePaymentOK2CancelOverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK2OverpaymentFlag returns new OptCreatePaymentOK2OverpaymentFlag with value set to v.
func NewOptCreatePaymentOK2OverpaymentFlag(v CreatePaymentOK2OverpaymentFlag) OptCreatePaymentOK2OverpaymentFlag {
	return OptCreatePaymentOK2OverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK2OverpaymentFlag is optional CreatePaymentOK2OverpaymentFlag.
type OptCreatePaymentOK2OverpaymentFlag struct {
	Value CreatePaymentOK2OverpaymentFlag
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK2OverpaymentFlag was set.
func (o OptCreatePaymentOK2OverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK2OverpaymentFlag) Reset() {
	var v CreatePaymentOK2OverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK2OverpaymentFlag) SetTo(v CreatePaymentOK2OverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK2OverpaymentFlag) Get() (v CreatePaymentOK2OverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK2OverpaymentFlag) Or(d CreatePaymentOK2OverpaymentFlag) CreatePaymentOK2OverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK2PayType returns new OptCreatePaymentOK2PayType with value set to v.
func NewOptCreatePaymentOK2PayType(v CreatePaymentOK2PayType) OptCreatePaymentOK2PayType {
	return OptCreatePaymentOK2PayType{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK2PayType is optional CreatePaymentOK2PayType.
type OptCreatePaymentOK2PayType struct {
	Value CreatePaymentOK2PayType
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK2PayType was set.
func (o OptCreatePaymentOK2PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK2PayType) Reset() {
	var v CreatePaymentOK2PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK2PayType) SetTo(v CreatePaymentOK2PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK2PayType) Get() (v CreatePaymentOK2PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK2PayType) Or(d CreatePaymentOK2PayType) CreatePaymentOK2PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK2Result returns new OptCreatePaymentOK2Result with value set to v.
func NewOptCreatePaymentOK2Result(v CreatePaymentOK2Result) OptCreatePaymentOK2Result {
	return OptCreatePaymentOK2Result{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK2Result is optional CreatePaymentOK2Result.
type OptCreatePaymentOK2Result struct {
	Value CreatePaymentOK2Result
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK2Result was set.
func (o OptCreatePaymentOK2Result) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK2Result) Reset() {
	var v CreatePaymentOK2Result
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK2Result) SetTo(v CreatePaymentOK2Result) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK2Result) Get() (v CreatePaymentOK2Result, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK2Result) Or(d CreatePaymentOK2Result) CreatePaymentOK2Result {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK2Status returns new OptCreatePaymentOK2Status with value set to v.
func NewOptCreatePaymentOK2Status(v CreatePaymentOK2Status) OptCreatePaymentOK2Status {
	return OptCreatePaymentOK2Status{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK2Status is optional CreatePaymentOK2Status.
type OptCreatePaymentOK2Status struct {
	Value CreatePaymentOK2Status
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK2Status was set.
func (o OptCreatePaymentOK2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK2Status) Reset() {
	var v CreatePaymentOK2Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK2Status) SetTo(v CreatePaymentOK2Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK2Status) Get() (v CreatePaymentOK2Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK2Status) Or(d CreatePaymentOK2Status) CreatePaymentOK2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK3JobCode returns new OptCreatePaymentOK3JobCode with value set to v.
func NewOptCreatePaymentOK3JobCode(v CreatePaymentOK3JobCode) OptCreatePaymentOK3JobCode {
	return OptCreatePaymentOK3JobCode{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK3JobCode is optional CreatePaymentOK3JobCode.
type OptCreatePaymentOK3JobCode struct {
	Value CreatePaymentOK3JobCode
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK3JobCode was set.
func (o OptCreatePaymentOK3JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK3JobCode) Reset() {
	var v CreatePaymentOK3JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK3JobCode) SetTo(v CreatePaymentOK3JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK3JobCode) Get() (v CreatePaymentOK3JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK3JobCode) Or(d CreatePaymentOK3JobCode) CreatePaymentOK3JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK3PayType returns new OptCreatePaymentOK3PayType with value set to v.
func NewOptCreatePaymentOK3PayType(v CreatePaymentOK3PayType) OptCreatePaymentOK3PayType {
	return OptCreatePaymentOK3PayType{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK3PayType is optional CreatePaymentOK3PayType.
type OptCreatePaymentOK3PayType struct {
	Value CreatePaymentOK3PayType
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK3PayType was set.
func (o OptCreatePaymentOK3PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK3PayType) Reset() {
	var v CreatePaymentOK3PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK3PayType) SetTo(v CreatePaymentOK3PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK3PayType) Get() (v CreatePaymentOK3PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK3PayType) Or(d CreatePaymentOK3PayType) CreatePaymentOK3PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK3Status returns new OptCreatePaymentOK3Status with value set to v.
func NewOptCreatePaymentOK3Status(v CreatePaymentOK3Status) OptCreatePaymentOK3Status {
	return OptCreatePaymentOK3Status{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK3Status is optional CreatePaymentOK3Status.
type OptCreatePaymentOK3Status struct {
	Value CreatePaymentOK3Status
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK3Status was set.
func (o OptCreatePaymentOK3Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK3Status) Reset() {
	var v CreatePaymentOK3Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK3Status) SetTo(v CreatePaymentOK3Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK3Status) Get() (v CreatePaymentOK3Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK3Status) Or(d CreatePaymentOK3Status) CreatePaymentOK3Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK4PayType returns new OptCreatePaymentOK4PayType with value set to v.
func NewOptCreatePaymentOK4PayType(v CreatePaymentOK4PayType) OptCreatePaymentOK4PayType {
	return OptCreatePaymentOK4PayType{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK4PayType is optional CreatePaymentOK4PayType.
type OptCreatePaymentOK4PayType struct {
	Value CreatePaymentOK4PayType
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK4PayType was set.
func (o OptCreatePaymentOK4PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK4PayType) Reset() {
	var v CreatePaymentOK4PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK4PayType) SetTo(v CreatePaymentOK4PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK4PayType) Get() (v CreatePaymentOK4PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK4PayType) Or(d CreatePaymentOK4PayType) CreatePaymentOK4PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentOK4Status returns new OptCreatePaymentOK4Status with value set to v.
func NewOptCreatePaymentOK4Status(v CreatePaymentOK4Status) OptCreatePaymentOK4Status {
	return OptCreatePaymentOK4Status{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentOK4Status is optional CreatePaymentOK4Status.
type OptCreatePaymentOK4Status struct {
	Value CreatePaymentOK4Status
	Set   bool
}

// IsSet returns true if OptCreatePaymentOK4Status was set.
func (o OptCreatePaymentOK4Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentOK4Status) Reset() {
	var v CreatePaymentOK4Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentOK4Status) SetTo(v CreatePaymentOK4Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentOK4Status) Get() (v CreatePaymentOK4Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentOK4Status) Or(d CreatePaymentOK4Status) CreatePaymentOK4Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardCreatingResponseBrand returns new OptCustomerCardCreatingResponseBrand with value set to v.
func NewOptCustomerCardCreatingResponseBrand(v CustomerCardCreatingResponseBrand) OptCustomerCardCreatingResponseBrand {
	return OptCustomerCardCreatingResponseBrand{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardCreatingResponseBrand is optional CustomerCardCreatingResponseBrand.
type OptCustomerCardCreatingResponseBrand struct {
	Value CustomerCardCreatingResponseBrand
	Set   bool
}

// IsSet returns true if OptCustomerCardCreatingResponseBrand was set.
func (o OptCustomerCardCreatingResponseBrand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardCreatingResponseBrand) Reset() {
	var v CustomerCardCreatingResponseBrand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardCreatingResponseBrand) SetTo(v CustomerCardCreatingResponseBrand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardCreatingResponseBrand) Get() (v CustomerCardCreatingResponseBrand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardCreatingResponseBrand) Or(d CustomerCardCreatingResponseBrand) CustomerCardCreatingResponseBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardCreatingResponseDefaultFlag returns new OptCustomerCardCreatingResponseDefaultFlag with value set to v.
func NewOptCustomerCardCreatingResponseDefaultFlag(v CustomerCardCreatingResponseDefaultFlag) OptCustomerCardCreatingResponseDefaultFlag {
	return OptCustomerCardCreatingResponseDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardCreatingResponseDefaultFlag is optional CustomerCardCreatingResponseDefaultFlag.
type OptCustomerCardCreatingResponseDefaultFlag struct {
	Value CustomerCardCreatingResponseDefaultFlag
	Set   bool
}

// IsSet returns true if OptCustomerCardCreatingResponseDefaultFlag was set.
func (o OptCustomerCardCreatingResponseDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardCreatingResponseDefaultFlag) Reset() {
	var v CustomerCardCreatingResponseDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardCreatingResponseDefaultFlag) SetTo(v CustomerCardCreatingResponseDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardCreatingResponseDefaultFlag) Get() (v CustomerCardCreatingResponseDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardCreatingResponseDefaultFlag) Or(d CustomerCardCreatingResponseDefaultFlag) CustomerCardCreatingResponseDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardCreatingResponseType returns new OptCustomerCardCreatingResponseType with value set to v.
func NewOptCustomerCardCreatingResponseType(v CustomerCardCreatingResponseType) OptCustomerCardCreatingResponseType {
	return OptCustomerCardCreatingResponseType{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardCreatingResponseType is optional CustomerCardCreatingResponseType.
type OptCustomerCardCreatingResponseType struct {
	Value CustomerCardCreatingResponseType
	Set   bool
}

// IsSet returns true if OptCustomerCardCreatingResponseType was set.
func (o OptCustomerCardCreatingResponseType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardCreatingResponseType) Reset() {
	var v CustomerCardCreatingResponseType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardCreatingResponseType) SetTo(v CustomerCardCreatingResponseType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardCreatingResponseType) Get() (v CustomerCardCreatingResponseType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardCreatingResponseType) Or(d CustomerCardCreatingResponseType) CustomerCardCreatingResponseType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardDeletingResponseDeleteFlag returns new OptCustomerCardDeletingResponseDeleteFlag with value set to v.
func NewOptCustomerCardDeletingResponseDeleteFlag(v CustomerCardDeletingResponseDeleteFlag) OptCustomerCardDeletingResponseDeleteFlag {
	return OptCustomerCardDeletingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardDeletingResponseDeleteFlag is optional CustomerCardDeletingResponseDeleteFlag.
type OptCustomerCardDeletingResponseDeleteFlag struct {
	Value CustomerCardDeletingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptCustomerCardDeletingResponseDeleteFlag was set.
func (o OptCustomerCardDeletingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardDeletingResponseDeleteFlag) Reset() {
	var v CustomerCardDeletingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardDeletingResponseDeleteFlag) SetTo(v CustomerCardDeletingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardDeletingResponseDeleteFlag) Get() (v CustomerCardDeletingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardDeletingResponseDeleteFlag) Or(d CustomerCardDeletingResponseDeleteFlag) CustomerCardDeletingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardRetrievingResponseBrand returns new OptCustomerCardRetrievingResponseBrand with value set to v.
func NewOptCustomerCardRetrievingResponseBrand(v CustomerCardRetrievingResponseBrand) OptCustomerCardRetrievingResponseBrand {
	return OptCustomerCardRetrievingResponseBrand{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardRetrievingResponseBrand is optional CustomerCardRetrievingResponseBrand.
type OptCustomerCardRetrievingResponseBrand struct {
	Value CustomerCardRetrievingResponseBrand
	Set   bool
}

// IsSet returns true if OptCustomerCardRetrievingResponseBrand was set.
func (o OptCustomerCardRetrievingResponseBrand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardRetrievingResponseBrand) Reset() {
	var v CustomerCardRetrievingResponseBrand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardRetrievingResponseBrand) SetTo(v CustomerCardRetrievingResponseBrand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardRetrievingResponseBrand) Get() (v CustomerCardRetrievingResponseBrand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardRetrievingResponseBrand) Or(d CustomerCardRetrievingResponseBrand) CustomerCardRetrievingResponseBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardRetrievingResponseDefaultFlag returns new OptCustomerCardRetrievingResponseDefaultFlag with value set to v.
func NewOptCustomerCardRetrievingResponseDefaultFlag(v CustomerCardRetrievingResponseDefaultFlag) OptCustomerCardRetrievingResponseDefaultFlag {
	return OptCustomerCardRetrievingResponseDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardRetrievingResponseDefaultFlag is optional CustomerCardRetrievingResponseDefaultFlag.
type OptCustomerCardRetrievingResponseDefaultFlag struct {
	Value CustomerCardRetrievingResponseDefaultFlag
	Set   bool
}

// IsSet returns true if OptCustomerCardRetrievingResponseDefaultFlag was set.
func (o OptCustomerCardRetrievingResponseDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardRetrievingResponseDefaultFlag) Reset() {
	var v CustomerCardRetrievingResponseDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardRetrievingResponseDefaultFlag) SetTo(v CustomerCardRetrievingResponseDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardRetrievingResponseDefaultFlag) Get() (v CustomerCardRetrievingResponseDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardRetrievingResponseDefaultFlag) Or(d CustomerCardRetrievingResponseDefaultFlag) CustomerCardRetrievingResponseDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardRetrievingResponseType returns new OptCustomerCardRetrievingResponseType with value set to v.
func NewOptCustomerCardRetrievingResponseType(v CustomerCardRetrievingResponseType) OptCustomerCardRetrievingResponseType {
	return OptCustomerCardRetrievingResponseType{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardRetrievingResponseType is optional CustomerCardRetrievingResponseType.
type OptCustomerCardRetrievingResponseType struct {
	Value CustomerCardRetrievingResponseType
	Set   bool
}

// IsSet returns true if OptCustomerCardRetrievingResponseType was set.
func (o OptCustomerCardRetrievingResponseType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardRetrievingResponseType) Reset() {
	var v CustomerCardRetrievingResponseType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardRetrievingResponseType) SetTo(v CustomerCardRetrievingResponseType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardRetrievingResponseType) Get() (v CustomerCardRetrievingResponseType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardRetrievingResponseType) Or(d CustomerCardRetrievingResponseType) CustomerCardRetrievingResponseType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardUpdatingRequestDefaultFlag returns new OptCustomerCardUpdatingRequestDefaultFlag with value set to v.
func NewOptCustomerCardUpdatingRequestDefaultFlag(v CustomerCardUpdatingRequestDefaultFlag) OptCustomerCardUpdatingRequestDefaultFlag {
	return OptCustomerCardUpdatingRequestDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardUpdatingRequestDefaultFlag is optional CustomerCardUpdatingRequestDefaultFlag.
type OptCustomerCardUpdatingRequestDefaultFlag struct {
	Value CustomerCardUpdatingRequestDefaultFlag
	Set   bool
}

// IsSet returns true if OptCustomerCardUpdatingRequestDefaultFlag was set.
func (o OptCustomerCardUpdatingRequestDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardUpdatingRequestDefaultFlag) Reset() {
	var v CustomerCardUpdatingRequestDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardUpdatingRequestDefaultFlag) SetTo(v CustomerCardUpdatingRequestDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardUpdatingRequestDefaultFlag) Get() (v CustomerCardUpdatingRequestDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardUpdatingRequestDefaultFlag) Or(d CustomerCardUpdatingRequestDefaultFlag) CustomerCardUpdatingRequestDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardUpdatingResponseBrand returns new OptCustomerCardUpdatingResponseBrand with value set to v.
func NewOptCustomerCardUpdatingResponseBrand(v CustomerCardUpdatingResponseBrand) OptCustomerCardUpdatingResponseBrand {
	return OptCustomerCardUpdatingResponseBrand{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardUpdatingResponseBrand is optional CustomerCardUpdatingResponseBrand.
type OptCustomerCardUpdatingResponseBrand struct {
	Value CustomerCardUpdatingResponseBrand
	Set   bool
}

// IsSet returns true if OptCustomerCardUpdatingResponseBrand was set.
func (o OptCustomerCardUpdatingResponseBrand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardUpdatingResponseBrand) Reset() {
	var v CustomerCardUpdatingResponseBrand
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardUpdatingResponseBrand) SetTo(v CustomerCardUpdatingResponseBrand) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardUpdatingResponseBrand) Get() (v CustomerCardUpdatingResponseBrand, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardUpdatingResponseBrand) Or(d CustomerCardUpdatingResponseBrand) CustomerCardUpdatingResponseBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardUpdatingResponseDefaultFlag returns new OptCustomerCardUpdatingResponseDefaultFlag with value set to v.
func NewOptCustomerCardUpdatingResponseDefaultFlag(v CustomerCardUpdatingResponseDefaultFlag) OptCustomerCardUpdatingResponseDefaultFlag {
	return OptCustomerCardUpdatingResponseDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardUpdatingResponseDefaultFlag is optional CustomerCardUpdatingResponseDefaultFlag.
type OptCustomerCardUpdatingResponseDefaultFlag struct {
	Value CustomerCardUpdatingResponseDefaultFlag
	Set   bool
}

// IsSet returns true if OptCustomerCardUpdatingResponseDefaultFlag was set.
func (o OptCustomerCardUpdatingResponseDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardUpdatingResponseDefaultFlag) Reset() {
	var v CustomerCardUpdatingResponseDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardUpdatingResponseDefaultFlag) SetTo(v CustomerCardUpdatingResponseDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardUpdatingResponseDefaultFlag) Get() (v CustomerCardUpdatingResponseDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardUpdatingResponseDefaultFlag) Or(d CustomerCardUpdatingResponseDefaultFlag) CustomerCardUpdatingResponseDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerCardUpdatingResponseType returns new OptCustomerCardUpdatingResponseType with value set to v.
func NewOptCustomerCardUpdatingResponseType(v CustomerCardUpdatingResponseType) OptCustomerCardUpdatingResponseType {
	return OptCustomerCardUpdatingResponseType{
		Value: v,
		Set:   true,
	}
}

// OptCustomerCardUpdatingResponseType is optional CustomerCardUpdatingResponseType.
type OptCustomerCardUpdatingResponseType struct {
	Value CustomerCardUpdatingResponseType
	Set   bool
}

// IsSet returns true if OptCustomerCardUpdatingResponseType was set.
func (o OptCustomerCardUpdatingResponseType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerCardUpdatingResponseType) Reset() {
	var v CustomerCardUpdatingResponseType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerCardUpdatingResponseType) SetTo(v CustomerCardUpdatingResponseType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerCardUpdatingResponseType) Get() (v CustomerCardUpdatingResponseType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerCardUpdatingResponseType) Or(d CustomerCardUpdatingResponseType) CustomerCardUpdatingResponseType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerDeletingResponseDeleteFlag returns new OptCustomerDeletingResponseDeleteFlag with value set to v.
func NewOptCustomerDeletingResponseDeleteFlag(v CustomerDeletingResponseDeleteFlag) OptCustomerDeletingResponseDeleteFlag {
	return OptCustomerDeletingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerDeletingResponseDeleteFlag is optional CustomerDeletingResponseDeleteFlag.
type OptCustomerDeletingResponseDeleteFlag struct {
	Value CustomerDeletingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptCustomerDeletingResponseDeleteFlag was set.
func (o OptCustomerDeletingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerDeletingResponseDeleteFlag) Reset() {
	var v CustomerDeletingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerDeletingResponseDeleteFlag) SetTo(v CustomerDeletingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerDeletingResponseDeleteFlag) Get() (v CustomerDeletingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerDeletingResponseDeleteFlag) Or(d CustomerDeletingResponseDeleteFlag) CustomerDeletingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication returns new OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication with value set to v.
func NewOptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication(v CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication {
	return OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication is optional CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication.
type OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication struct {
	Value CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication was set.
func (o OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Reset() {
	var v CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) SetTo(v CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Get() (v CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Or(d CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodCreatingResponseDefaultFlag returns new OptCustomerPaymentMethodCreatingResponseDefaultFlag with value set to v.
func NewOptCustomerPaymentMethodCreatingResponseDefaultFlag(v CustomerPaymentMethodCreatingResponseDefaultFlag) OptCustomerPaymentMethodCreatingResponseDefaultFlag {
	return OptCustomerPaymentMethodCreatingResponseDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodCreatingResponseDefaultFlag is optional CustomerPaymentMethodCreatingResponseDefaultFlag.
type OptCustomerPaymentMethodCreatingResponseDefaultFlag struct {
	Value CustomerPaymentMethodCreatingResponseDefaultFlag
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodCreatingResponseDefaultFlag was set.
func (o OptCustomerPaymentMethodCreatingResponseDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerPaymentMethodCreatingResponseDefaultFlag) Reset() {
	var v CustomerPaymentMethodCreatingResponseDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodCreatingResponseDefaultFlag) SetTo(v CustomerPaymentMethodCreatingResponseDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodCreatingResponseDefaultFlag) Get() (v CustomerPaymentMethodCreatingResponseDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodCreatingResponseDefaultFlag) Or(d CustomerPaymentMethodCreatingResponseDefaultFlag) CustomerPaymentMethodCreatingResponseDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodCreatingResponseDeleteFlag returns new OptCustomerPaymentMethodCreatingResponseDeleteFlag with value set to v.
func NewOptCustomerPaymentMethodCreatingResponseDeleteFlag(v CustomerPaymentMethodCreatingResponseDeleteFlag) OptCustomerPaymentMethodCreatingResponseDeleteFlag {
	return OptCustomerPaymentMethodCreatingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodCreatingResponseDeleteFlag is optional CustomerPaymentMethodCreatingResponseDeleteFlag.
type OptCustomerPaymentMethodCreatingResponseDeleteFlag struct {
	Value CustomerPaymentMethodCreatingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodCreatingResponseDeleteFlag was set.
func (o OptCustomerPaymentMethodCreatingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerPaymentMethodCreatingResponseDeleteFlag) Reset() {
	var v CustomerPaymentMethodCreatingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodCreatingResponseDeleteFlag) SetTo(v CustomerPaymentMethodCreatingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodCreatingResponseDeleteFlag) Get() (v CustomerPaymentMethodCreatingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodCreatingResponseDeleteFlag) Or(d CustomerPaymentMethodCreatingResponseDeleteFlag) CustomerPaymentMethodCreatingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodCreatingResponsePayType returns new OptCustomerPaymentMethodCreatingResponsePayType with value set to v.
func NewOptCustomerPaymentMethodCreatingResponsePayType(v CustomerPaymentMethodCreatingResponsePayType) OptCustomerPaymentMethodCreatingResponsePayType {
	return OptCustomerPaymentMethodCreatingResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodCreatingResponsePayType is optional CustomerPaymentMethodCreatingResponsePayType.
type OptCustomerPaymentMethodCreatingResponsePayType struct {
	Value CustomerPaymentMethodCreatingResponsePayType
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodCreatingResponsePayType was set.
func (o OptCustomerPaymentMethodCreatingResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerPaymentMethodCreatingResponsePayType) Reset() {
	var v CustomerPaymentMethodCreatingResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodCreatingResponsePayType) SetTo(v CustomerPaymentMethodCreatingResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodCreatingResponsePayType) Get() (v CustomerPaymentMethodCreatingResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodCreatingResponsePayType) Or(d CustomerPaymentMethodCreatingResponsePayType) CustomerPaymentMethodCreatingResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodDeletingResponseDeleteFlag returns new OptCustomerPaymentMethodDeletingResponseDeleteFlag with value set to v.
func NewOptCustomerPaymentMethodDeletingResponseDeleteFlag(v CustomerPaymentMethodDeletingResponseDeleteFlag) OptCustomerPaymentMethodDeletingResponseDeleteFlag {
	return OptCustomerPaymentMethodDeletingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodDeletingResponseDeleteFlag is optional CustomerPaymentMethodDeletingResponseDeleteFlag.
type OptCustomerPaymentMethodDeletingResponseDeleteFlag struct {
	Value CustomerPaymentMethodDeletingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodDeletingResponseDeleteFlag was set.
func (o OptCustomerPaymentMethodDeletingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerPaymentMethodDeletingResponseDeleteFlag) Reset() {
	var v CustomerPaymentMethodDeletingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodDeletingResponseDeleteFlag) SetTo(v CustomerPaymentMethodDeletingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodDeletingResponseDeleteFlag) Get() (v CustomerPaymentMethodDeletingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodDeletingResponseDeleteFlag) Or(d CustomerPaymentMethodDeletingResponseDeleteFlag) CustomerPaymentMethodDeletingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodRetrievingResponseDefaultFlag returns new OptCustomerPaymentMethodRetrievingResponseDefaultFlag with value set to v.
func NewOptCustomerPaymentMethodRetrievingResponseDefaultFlag(v CustomerPaymentMethodRetrievingResponseDefaultFlag) OptCustomerPaymentMethodRetrievingResponseDefaultFlag {
	return OptCustomerPaymentMethodRetrievingResponseDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodRetrievingResponseDefaultFlag is optional CustomerPaymentMethodRetrievingResponseDefaultFlag.
type OptCustomerPaymentMethodRetrievingResponseDefaultFlag struct {
	Value CustomerPaymentMethodRetrievingResponseDefaultFlag
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodRetrievingResponseDefaultFlag was set.
func (o OptCustomerPaymentMethodRetrievingResponseDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerPaymentMethodRetrievingResponseDefaultFlag) Reset() {
	var v CustomerPaymentMethodRetrievingResponseDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodRetrievingResponseDefaultFlag) SetTo(v CustomerPaymentMethodRetrievingResponseDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodRetrievingResponseDefaultFlag) Get() (v CustomerPaymentMethodRetrievingResponseDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodRetrievingResponseDefaultFlag) Or(d CustomerPaymentMethodRetrievingResponseDefaultFlag) CustomerPaymentMethodRetrievingResponseDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodRetrievingResponseDeleteFlag returns new OptCustomerPaymentMethodRetrievingResponseDeleteFlag with value set to v.
func NewOptCustomerPaymentMethodRetrievingResponseDeleteFlag(v CustomerPaymentMethodRetrievingResponseDeleteFlag) OptCustomerPaymentMethodRetrievingResponseDeleteFlag {
	return OptCustomerPaymentMethodRetrievingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodRetrievingResponseDeleteFlag is optional CustomerPaymentMethodRetrievingResponseDeleteFlag.
type OptCustomerPaymentMethodRetrievingResponseDeleteFlag struct {
	Value CustomerPaymentMethodRetrievingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodRetrievingResponseDeleteFlag was set.
func (o OptCustomerPaymentMethodRetrievingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerPaymentMethodRetrievingResponseDeleteFlag) Reset() {
	var v CustomerPaymentMethodRetrievingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodRetrievingResponseDeleteFlag) SetTo(v CustomerPaymentMethodRetrievingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodRetrievingResponseDeleteFlag) Get() (v CustomerPaymentMethodRetrievingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodRetrievingResponseDeleteFlag) Or(d CustomerPaymentMethodRetrievingResponseDeleteFlag) CustomerPaymentMethodRetrievingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCustomerPaymentMethodRetrievingResponsePayType returns new OptCustomerPaymentMethodRetrievingResponsePayType with value set to v.
func NewOptCustomerPaymentMethodRetrievingResponsePayType(v CustomerPaymentMethodRetrievingResponsePayType) OptCustomerPaymentMethodRetrievingResponsePayType {
	return OptCustomerPaymentMethodRetrievingResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptCustomerPaymentMethodRetrievingResponsePayType is optional CustomerPaymentMethodRetrievingResponsePayType.
type OptCustomerPaymentMethodRetrievingResponsePayType struct {
	Value CustomerPaymentMethodRetrievingResponsePayType
	Set   bool
}

// IsSet returns true if OptCustomerPaymentMethodRetrievingResponsePayType was set.
func (o OptCustomerPaymentMethodRetrievingResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCustomerPaymentMethodRetrievingResponsePayType) Reset() {
	var v CustomerPaymentMethodRetrievingResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCustomerPaymentMethodRetrievingResponsePayType) SetTo(v CustomerPaymentMethodRetrievingResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCustomerPaymentMethodRetrievingResponsePayType) Get() (v CustomerPaymentMethodRetrievingResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCustomerPaymentMethodRetrievingResponsePayType) Or(d CustomerPaymentMethodRetrievingResponsePayType) CustomerPaymentMethodRetrievingResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDepositStatusCode returns new OptDepositStatusCode with value set to v.
func NewOptDepositStatusCode(v DepositStatusCode) OptDepositStatusCode {
	return OptDepositStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptDepositStatusCode is optional DepositStatusCode.
type OptDepositStatusCode struct {
	Value DepositStatusCode
	Set   bool
}

// IsSet returns true if OptDepositStatusCode was set.
func (o OptDepositStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDepositStatusCode) Reset() {
	var v DepositStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDepositStatusCode) SetTo(v DepositStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDepositStatusCode) Get() (v DepositStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDepositStatusCode) Or(d DepositStatusCode) DepositStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationFileUploadingRequestMultipartType returns new OptExaminationFileUploadingRequestMultipartType with value set to v.
func NewOptExaminationFileUploadingRequestMultipartType(v ExaminationFileUploadingRequestMultipartType) OptExaminationFileUploadingRequestMultipartType {
	return OptExaminationFileUploadingRequestMultipartType{
		Value: v,
		Set:   true,
	}
}

// OptExaminationFileUploadingRequestMultipartType is optional ExaminationFileUploadingRequestMultipartType.
type OptExaminationFileUploadingRequestMultipartType struct {
	Value ExaminationFileUploadingRequestMultipartType
	Set   bool
}

// IsSet returns true if OptExaminationFileUploadingRequestMultipartType was set.
func (o OptExaminationFileUploadingRequestMultipartType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationFileUploadingRequestMultipartType) Reset() {
	var v ExaminationFileUploadingRequestMultipartType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationFileUploadingRequestMultipartType) SetTo(v ExaminationFileUploadingRequestMultipartType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationFileUploadingRequestMultipartType) Get() (v ExaminationFileUploadingRequestMultipartType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationFileUploadingRequestMultipartType) Or(d ExaminationFileUploadingRequestMultipartType) ExaminationFileUploadingRequestMultipartType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationFileUploadingResponseExaminationFilesItemType returns new OptExaminationFileUploadingResponseExaminationFilesItemType with value set to v.
func NewOptExaminationFileUploadingResponseExaminationFilesItemType(v ExaminationFileUploadingResponseExaminationFilesItemType) OptExaminationFileUploadingResponseExaminationFilesItemType {
	return OptExaminationFileUploadingResponseExaminationFilesItemType{
		Value: v,
		Set:   true,
	}
}

// OptExaminationFileUploadingResponseExaminationFilesItemType is optional ExaminationFileUploadingResponseExaminationFilesItemType.
type OptExaminationFileUploadingResponseExaminationFilesItemType struct {
	Value ExaminationFileUploadingResponseExaminationFilesItemType
	Set   bool
}

// IsSet returns true if OptExaminationFileUploadingResponseExaminationFilesItemType was set.
func (o OptExaminationFileUploadingResponseExaminationFilesItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationFileUploadingResponseExaminationFilesItemType) Reset() {
	var v ExaminationFileUploadingResponseExaminationFilesItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationFileUploadingResponseExaminationFilesItemType) SetTo(v ExaminationFileUploadingResponseExaminationFilesItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationFileUploadingResponseExaminationFilesItemType) Get() (v ExaminationFileUploadingResponseExaminationFilesItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationFileUploadingResponseExaminationFilesItemType) Or(d ExaminationFileUploadingResponseExaminationFilesItemType) ExaminationFileUploadingResponseExaminationFilesItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseContractBankAccount returns new OptExaminationInfoRetrievingResponseContractBankAccount with value set to v.
func NewOptExaminationInfoRetrievingResponseContractBankAccount(v ExaminationInfoRetrievingResponseContractBankAccount) OptExaminationInfoRetrievingResponseContractBankAccount {
	return OptExaminationInfoRetrievingResponseContractBankAccount{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseContractBankAccount is optional ExaminationInfoRetrievingResponseContractBankAccount.
type OptExaminationInfoRetrievingResponseContractBankAccount struct {
	Value ExaminationInfoRetrievingResponseContractBankAccount
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseContractBankAccount was set.
func (o OptExaminationInfoRetrievingResponseContractBankAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseContractBankAccount) Reset() {
	var v ExaminationInfoRetrievingResponseContractBankAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseContractBankAccount) SetTo(v ExaminationInfoRetrievingResponseContractBankAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseContractBankAccount) Get() (v ExaminationInfoRetrievingResponseContractBankAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseContractBankAccount) Or(d ExaminationInfoRetrievingResponseContractBankAccount) ExaminationInfoRetrievingResponseContractBankAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseContractBankAccountAccountKind returns new OptExaminationInfoRetrievingResponseContractBankAccountAccountKind with value set to v.
func NewOptExaminationInfoRetrievingResponseContractBankAccountAccountKind(v ExaminationInfoRetrievingResponseContractBankAccountAccountKind) OptExaminationInfoRetrievingResponseContractBankAccountAccountKind {
	return OptExaminationInfoRetrievingResponseContractBankAccountAccountKind{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseContractBankAccountAccountKind is optional ExaminationInfoRetrievingResponseContractBankAccountAccountKind.
type OptExaminationInfoRetrievingResponseContractBankAccountAccountKind struct {
	Value ExaminationInfoRetrievingResponseContractBankAccountAccountKind
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseContractBankAccountAccountKind was set.
func (o OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) Reset() {
	var v ExaminationInfoRetrievingResponseContractBankAccountAccountKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) SetTo(v ExaminationInfoRetrievingResponseContractBankAccountAccountKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) Get() (v ExaminationInfoRetrievingResponseContractBankAccountAccountKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) Or(d ExaminationInfoRetrievingResponseContractBankAccountAccountKind) ExaminationInfoRetrievingResponseContractBankAccountAccountKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseContractDetail returns new OptExaminationInfoRetrievingResponseContractDetail with value set to v.
func NewOptExaminationInfoRetrievingResponseContractDetail(v ExaminationInfoRetrievingResponseContractDetail) OptExaminationInfoRetrievingResponseContractDetail {
	return OptExaminationInfoRetrievingResponseContractDetail{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseContractDetail is optional ExaminationInfoRetrievingResponseContractDetail.
type OptExaminationInfoRetrievingResponseContractDetail struct {
	Value ExaminationInfoRetrievingResponseContractDetail
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseContractDetail was set.
func (o OptExaminationInfoRetrievingResponseContractDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseContractDetail) Reset() {
	var v ExaminationInfoRetrievingResponseContractDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseContractDetail) SetTo(v ExaminationInfoRetrievingResponseContractDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseContractDetail) Get() (v ExaminationInfoRetrievingResponseContractDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseContractDetail) Or(d ExaminationInfoRetrievingResponseContractDetail) ExaminationInfoRetrievingResponseContractDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseContractDetailPayBy returns new OptExaminationInfoRetrievingResponseContractDetailPayBy with value set to v.
func NewOptExaminationInfoRetrievingResponseContractDetailPayBy(v ExaminationInfoRetrievingResponseContractDetailPayBy) OptExaminationInfoRetrievingResponseContractDetailPayBy {
	return OptExaminationInfoRetrievingResponseContractDetailPayBy{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseContractDetailPayBy is optional ExaminationInfoRetrievingResponseContractDetailPayBy.
type OptExaminationInfoRetrievingResponseContractDetailPayBy struct {
	Value ExaminationInfoRetrievingResponseContractDetailPayBy
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseContractDetailPayBy was set.
func (o OptExaminationInfoRetrievingResponseContractDetailPayBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseContractDetailPayBy) Reset() {
	var v ExaminationInfoRetrievingResponseContractDetailPayBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseContractDetailPayBy) SetTo(v ExaminationInfoRetrievingResponseContractDetailPayBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseContractDetailPayBy) Get() (v ExaminationInfoRetrievingResponseContractDetailPayBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseContractDetailPayBy) Or(d ExaminationInfoRetrievingResponseContractDetailPayBy) ExaminationInfoRetrievingResponseContractDetailPayBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseContractDetailSiteExisting returns new OptExaminationInfoRetrievingResponseContractDetailSiteExisting with value set to v.
func NewOptExaminationInfoRetrievingResponseContractDetailSiteExisting(v ExaminationInfoRetrievingResponseContractDetailSiteExisting) OptExaminationInfoRetrievingResponseContractDetailSiteExisting {
	return OptExaminationInfoRetrievingResponseContractDetailSiteExisting{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseContractDetailSiteExisting is optional ExaminationInfoRetrievingResponseContractDetailSiteExisting.
type OptExaminationInfoRetrievingResponseContractDetailSiteExisting struct {
	Value ExaminationInfoRetrievingResponseContractDetailSiteExisting
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseContractDetailSiteExisting was set.
func (o OptExaminationInfoRetrievingResponseContractDetailSiteExisting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseContractDetailSiteExisting) Reset() {
	var v ExaminationInfoRetrievingResponseContractDetailSiteExisting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseContractDetailSiteExisting) SetTo(v ExaminationInfoRetrievingResponseContractDetailSiteExisting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseContractDetailSiteExisting) Get() (v ExaminationInfoRetrievingResponseContractDetailSiteExisting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseContractDetailSiteExisting) Or(d ExaminationInfoRetrievingResponseContractDetailSiteExisting) ExaminationInfoRetrievingResponseContractDetailSiteExisting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseContractInputStatus returns new OptExaminationInfoRetrievingResponseContractInputStatus with value set to v.
func NewOptExaminationInfoRetrievingResponseContractInputStatus(v ExaminationInfoRetrievingResponseContractInputStatus) OptExaminationInfoRetrievingResponseContractInputStatus {
	return OptExaminationInfoRetrievingResponseContractInputStatus{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseContractInputStatus is optional ExaminationInfoRetrievingResponseContractInputStatus.
type OptExaminationInfoRetrievingResponseContractInputStatus struct {
	Value ExaminationInfoRetrievingResponseContractInputStatus
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseContractInputStatus was set.
func (o OptExaminationInfoRetrievingResponseContractInputStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseContractInputStatus) Reset() {
	var v ExaminationInfoRetrievingResponseContractInputStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseContractInputStatus) SetTo(v ExaminationInfoRetrievingResponseContractInputStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseContractInputStatus) Get() (v ExaminationInfoRetrievingResponseContractInputStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseContractInputStatus) Or(d ExaminationInfoRetrievingResponseContractInputStatus) ExaminationInfoRetrievingResponseContractInputStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseContractInputStatusStatusCode returns new OptExaminationInfoRetrievingResponseContractInputStatusStatusCode with value set to v.
func NewOptExaminationInfoRetrievingResponseContractInputStatusStatusCode(v ExaminationInfoRetrievingResponseContractInputStatusStatusCode) OptExaminationInfoRetrievingResponseContractInputStatusStatusCode {
	return OptExaminationInfoRetrievingResponseContractInputStatusStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseContractInputStatusStatusCode is optional ExaminationInfoRetrievingResponseContractInputStatusStatusCode.
type OptExaminationInfoRetrievingResponseContractInputStatusStatusCode struct {
	Value ExaminationInfoRetrievingResponseContractInputStatusStatusCode
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseContractInputStatusStatusCode was set.
func (o OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) Reset() {
	var v ExaminationInfoRetrievingResponseContractInputStatusStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) SetTo(v ExaminationInfoRetrievingResponseContractInputStatusStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) Get() (v ExaminationInfoRetrievingResponseContractInputStatusStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) Or(d ExaminationInfoRetrievingResponseContractInputStatusStatusCode) ExaminationInfoRetrievingResponseContractInputStatusStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseDepositCycleMasterID returns new OptExaminationInfoRetrievingResponseDepositCycleMasterID with value set to v.
func NewOptExaminationInfoRetrievingResponseDepositCycleMasterID(v ExaminationInfoRetrievingResponseDepositCycleMasterID) OptExaminationInfoRetrievingResponseDepositCycleMasterID {
	return OptExaminationInfoRetrievingResponseDepositCycleMasterID{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseDepositCycleMasterID is optional ExaminationInfoRetrievingResponseDepositCycleMasterID.
type OptExaminationInfoRetrievingResponseDepositCycleMasterID struct {
	Value ExaminationInfoRetrievingResponseDepositCycleMasterID
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseDepositCycleMasterID was set.
func (o OptExaminationInfoRetrievingResponseDepositCycleMasterID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseDepositCycleMasterID) Reset() {
	var v ExaminationInfoRetrievingResponseDepositCycleMasterID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseDepositCycleMasterID) SetTo(v ExaminationInfoRetrievingResponseDepositCycleMasterID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseDepositCycleMasterID) Get() (v ExaminationInfoRetrievingResponseDepositCycleMasterID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseDepositCycleMasterID) Or(d ExaminationInfoRetrievingResponseDepositCycleMasterID) ExaminationInfoRetrievingResponseDepositCycleMasterID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseShopItemDetailItemType returns new OptExaminationInfoRetrievingResponseShopItemDetailItemType with value set to v.
func NewOptExaminationInfoRetrievingResponseShopItemDetailItemType(v ExaminationInfoRetrievingResponseShopItemDetailItemType) OptExaminationInfoRetrievingResponseShopItemDetailItemType {
	return OptExaminationInfoRetrievingResponseShopItemDetailItemType{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseShopItemDetailItemType is optional ExaminationInfoRetrievingResponseShopItemDetailItemType.
type OptExaminationInfoRetrievingResponseShopItemDetailItemType struct {
	Value ExaminationInfoRetrievingResponseShopItemDetailItemType
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseShopItemDetailItemType was set.
func (o OptExaminationInfoRetrievingResponseShopItemDetailItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseShopItemDetailItemType) Reset() {
	var v ExaminationInfoRetrievingResponseShopItemDetailItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseShopItemDetailItemType) SetTo(v ExaminationInfoRetrievingResponseShopItemDetailItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseShopItemDetailItemType) Get() (v ExaminationInfoRetrievingResponseShopItemDetailItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseShopItemDetailItemType) Or(d ExaminationInfoRetrievingResponseShopItemDetailItemType) ExaminationInfoRetrievingResponseShopItemDetailItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoRetrievingResponseStatusCode returns new OptExaminationInfoRetrievingResponseStatusCode with value set to v.
func NewOptExaminationInfoRetrievingResponseStatusCode(v ExaminationInfoRetrievingResponseStatusCode) OptExaminationInfoRetrievingResponseStatusCode {
	return OptExaminationInfoRetrievingResponseStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoRetrievingResponseStatusCode is optional ExaminationInfoRetrievingResponseStatusCode.
type OptExaminationInfoRetrievingResponseStatusCode struct {
	Value ExaminationInfoRetrievingResponseStatusCode
	Set   bool
}

// IsSet returns true if OptExaminationInfoRetrievingResponseStatusCode was set.
func (o OptExaminationInfoRetrievingResponseStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoRetrievingResponseStatusCode) Reset() {
	var v ExaminationInfoRetrievingResponseStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoRetrievingResponseStatusCode) SetTo(v ExaminationInfoRetrievingResponseStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoRetrievingResponseStatusCode) Get() (v ExaminationInfoRetrievingResponseStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoRetrievingResponseStatusCode) Or(d ExaminationInfoRetrievingResponseStatusCode) ExaminationInfoRetrievingResponseStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingRequestContractBankAccount returns new OptExaminationInfoUpdatingRequestContractBankAccount with value set to v.
func NewOptExaminationInfoUpdatingRequestContractBankAccount(v ExaminationInfoUpdatingRequestContractBankAccount) OptExaminationInfoUpdatingRequestContractBankAccount {
	return OptExaminationInfoUpdatingRequestContractBankAccount{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingRequestContractBankAccount is optional ExaminationInfoUpdatingRequestContractBankAccount.
type OptExaminationInfoUpdatingRequestContractBankAccount struct {
	Value ExaminationInfoUpdatingRequestContractBankAccount
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingRequestContractBankAccount was set.
func (o OptExaminationInfoUpdatingRequestContractBankAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingRequestContractBankAccount) Reset() {
	var v ExaminationInfoUpdatingRequestContractBankAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingRequestContractBankAccount) SetTo(v ExaminationInfoUpdatingRequestContractBankAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingRequestContractBankAccount) Get() (v ExaminationInfoUpdatingRequestContractBankAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingRequestContractBankAccount) Or(d ExaminationInfoUpdatingRequestContractBankAccount) ExaminationInfoUpdatingRequestContractBankAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingRequestContractBankAccountAccountKind returns new OptExaminationInfoUpdatingRequestContractBankAccountAccountKind with value set to v.
func NewOptExaminationInfoUpdatingRequestContractBankAccountAccountKind(v ExaminationInfoUpdatingRequestContractBankAccountAccountKind) OptExaminationInfoUpdatingRequestContractBankAccountAccountKind {
	return OptExaminationInfoUpdatingRequestContractBankAccountAccountKind{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingRequestContractBankAccountAccountKind is optional ExaminationInfoUpdatingRequestContractBankAccountAccountKind.
type OptExaminationInfoUpdatingRequestContractBankAccountAccountKind struct {
	Value ExaminationInfoUpdatingRequestContractBankAccountAccountKind
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingRequestContractBankAccountAccountKind was set.
func (o OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) Reset() {
	var v ExaminationInfoUpdatingRequestContractBankAccountAccountKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) SetTo(v ExaminationInfoUpdatingRequestContractBankAccountAccountKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) Get() (v ExaminationInfoUpdatingRequestContractBankAccountAccountKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) Or(d ExaminationInfoUpdatingRequestContractBankAccountAccountKind) ExaminationInfoUpdatingRequestContractBankAccountAccountKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingRequestContractDetail returns new OptExaminationInfoUpdatingRequestContractDetail with value set to v.
func NewOptExaminationInfoUpdatingRequestContractDetail(v ExaminationInfoUpdatingRequestContractDetail) OptExaminationInfoUpdatingRequestContractDetail {
	return OptExaminationInfoUpdatingRequestContractDetail{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingRequestContractDetail is optional ExaminationInfoUpdatingRequestContractDetail.
type OptExaminationInfoUpdatingRequestContractDetail struct {
	Value ExaminationInfoUpdatingRequestContractDetail
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingRequestContractDetail was set.
func (o OptExaminationInfoUpdatingRequestContractDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingRequestContractDetail) Reset() {
	var v ExaminationInfoUpdatingRequestContractDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingRequestContractDetail) SetTo(v ExaminationInfoUpdatingRequestContractDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingRequestContractDetail) Get() (v ExaminationInfoUpdatingRequestContractDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingRequestContractDetail) Or(d ExaminationInfoUpdatingRequestContractDetail) ExaminationInfoUpdatingRequestContractDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingRequestContractDetailPayBy returns new OptExaminationInfoUpdatingRequestContractDetailPayBy with value set to v.
func NewOptExaminationInfoUpdatingRequestContractDetailPayBy(v ExaminationInfoUpdatingRequestContractDetailPayBy) OptExaminationInfoUpdatingRequestContractDetailPayBy {
	return OptExaminationInfoUpdatingRequestContractDetailPayBy{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingRequestContractDetailPayBy is optional ExaminationInfoUpdatingRequestContractDetailPayBy.
type OptExaminationInfoUpdatingRequestContractDetailPayBy struct {
	Value ExaminationInfoUpdatingRequestContractDetailPayBy
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingRequestContractDetailPayBy was set.
func (o OptExaminationInfoUpdatingRequestContractDetailPayBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingRequestContractDetailPayBy) Reset() {
	var v ExaminationInfoUpdatingRequestContractDetailPayBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingRequestContractDetailPayBy) SetTo(v ExaminationInfoUpdatingRequestContractDetailPayBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingRequestContractDetailPayBy) Get() (v ExaminationInfoUpdatingRequestContractDetailPayBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingRequestContractDetailPayBy) Or(d ExaminationInfoUpdatingRequestContractDetailPayBy) ExaminationInfoUpdatingRequestContractDetailPayBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingRequestContractDetailSiteExisting returns new OptExaminationInfoUpdatingRequestContractDetailSiteExisting with value set to v.
func NewOptExaminationInfoUpdatingRequestContractDetailSiteExisting(v ExaminationInfoUpdatingRequestContractDetailSiteExisting) OptExaminationInfoUpdatingRequestContractDetailSiteExisting {
	return OptExaminationInfoUpdatingRequestContractDetailSiteExisting{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingRequestContractDetailSiteExisting is optional ExaminationInfoUpdatingRequestContractDetailSiteExisting.
type OptExaminationInfoUpdatingRequestContractDetailSiteExisting struct {
	Value ExaminationInfoUpdatingRequestContractDetailSiteExisting
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingRequestContractDetailSiteExisting was set.
func (o OptExaminationInfoUpdatingRequestContractDetailSiteExisting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingRequestContractDetailSiteExisting) Reset() {
	var v ExaminationInfoUpdatingRequestContractDetailSiteExisting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingRequestContractDetailSiteExisting) SetTo(v ExaminationInfoUpdatingRequestContractDetailSiteExisting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingRequestContractDetailSiteExisting) Get() (v ExaminationInfoUpdatingRequestContractDetailSiteExisting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingRequestContractDetailSiteExisting) Or(d ExaminationInfoUpdatingRequestContractDetailSiteExisting) ExaminationInfoUpdatingRequestContractDetailSiteExisting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingRequestDepositCycleMasterID returns new OptExaminationInfoUpdatingRequestDepositCycleMasterID with value set to v.
func NewOptExaminationInfoUpdatingRequestDepositCycleMasterID(v ExaminationInfoUpdatingRequestDepositCycleMasterID) OptExaminationInfoUpdatingRequestDepositCycleMasterID {
	return OptExaminationInfoUpdatingRequestDepositCycleMasterID{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingRequestDepositCycleMasterID is optional ExaminationInfoUpdatingRequestDepositCycleMasterID.
type OptExaminationInfoUpdatingRequestDepositCycleMasterID struct {
	Value ExaminationInfoUpdatingRequestDepositCycleMasterID
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingRequestDepositCycleMasterID was set.
func (o OptExaminationInfoUpdatingRequestDepositCycleMasterID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingRequestDepositCycleMasterID) Reset() {
	var v ExaminationInfoUpdatingRequestDepositCycleMasterID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingRequestDepositCycleMasterID) SetTo(v ExaminationInfoUpdatingRequestDepositCycleMasterID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingRequestDepositCycleMasterID) Get() (v ExaminationInfoUpdatingRequestDepositCycleMasterID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingRequestDepositCycleMasterID) Or(d ExaminationInfoUpdatingRequestDepositCycleMasterID) ExaminationInfoUpdatingRequestDepositCycleMasterID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingRequestShopItemDetailItemType returns new OptExaminationInfoUpdatingRequestShopItemDetailItemType with value set to v.
func NewOptExaminationInfoUpdatingRequestShopItemDetailItemType(v ExaminationInfoUpdatingRequestShopItemDetailItemType) OptExaminationInfoUpdatingRequestShopItemDetailItemType {
	return OptExaminationInfoUpdatingRequestShopItemDetailItemType{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingRequestShopItemDetailItemType is optional ExaminationInfoUpdatingRequestShopItemDetailItemType.
type OptExaminationInfoUpdatingRequestShopItemDetailItemType struct {
	Value ExaminationInfoUpdatingRequestShopItemDetailItemType
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingRequestShopItemDetailItemType was set.
func (o OptExaminationInfoUpdatingRequestShopItemDetailItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingRequestShopItemDetailItemType) Reset() {
	var v ExaminationInfoUpdatingRequestShopItemDetailItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingRequestShopItemDetailItemType) SetTo(v ExaminationInfoUpdatingRequestShopItemDetailItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingRequestShopItemDetailItemType) Get() (v ExaminationInfoUpdatingRequestShopItemDetailItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingRequestShopItemDetailItemType) Or(d ExaminationInfoUpdatingRequestShopItemDetailItemType) ExaminationInfoUpdatingRequestShopItemDetailItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseContractBankAccount returns new OptExaminationInfoUpdatingResponseContractBankAccount with value set to v.
func NewOptExaminationInfoUpdatingResponseContractBankAccount(v ExaminationInfoUpdatingResponseContractBankAccount) OptExaminationInfoUpdatingResponseContractBankAccount {
	return OptExaminationInfoUpdatingResponseContractBankAccount{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseContractBankAccount is optional ExaminationInfoUpdatingResponseContractBankAccount.
type OptExaminationInfoUpdatingResponseContractBankAccount struct {
	Value ExaminationInfoUpdatingResponseContractBankAccount
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseContractBankAccount was set.
func (o OptExaminationInfoUpdatingResponseContractBankAccount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseContractBankAccount) Reset() {
	var v ExaminationInfoUpdatingResponseContractBankAccount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseContractBankAccount) SetTo(v ExaminationInfoUpdatingResponseContractBankAccount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseContractBankAccount) Get() (v ExaminationInfoUpdatingResponseContractBankAccount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseContractBankAccount) Or(d ExaminationInfoUpdatingResponseContractBankAccount) ExaminationInfoUpdatingResponseContractBankAccount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseContractBankAccountAccountKind returns new OptExaminationInfoUpdatingResponseContractBankAccountAccountKind with value set to v.
func NewOptExaminationInfoUpdatingResponseContractBankAccountAccountKind(v ExaminationInfoUpdatingResponseContractBankAccountAccountKind) OptExaminationInfoUpdatingResponseContractBankAccountAccountKind {
	return OptExaminationInfoUpdatingResponseContractBankAccountAccountKind{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseContractBankAccountAccountKind is optional ExaminationInfoUpdatingResponseContractBankAccountAccountKind.
type OptExaminationInfoUpdatingResponseContractBankAccountAccountKind struct {
	Value ExaminationInfoUpdatingResponseContractBankAccountAccountKind
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseContractBankAccountAccountKind was set.
func (o OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) Reset() {
	var v ExaminationInfoUpdatingResponseContractBankAccountAccountKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) SetTo(v ExaminationInfoUpdatingResponseContractBankAccountAccountKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) Get() (v ExaminationInfoUpdatingResponseContractBankAccountAccountKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) Or(d ExaminationInfoUpdatingResponseContractBankAccountAccountKind) ExaminationInfoUpdatingResponseContractBankAccountAccountKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseContractDetail returns new OptExaminationInfoUpdatingResponseContractDetail with value set to v.
func NewOptExaminationInfoUpdatingResponseContractDetail(v ExaminationInfoUpdatingResponseContractDetail) OptExaminationInfoUpdatingResponseContractDetail {
	return OptExaminationInfoUpdatingResponseContractDetail{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseContractDetail is optional ExaminationInfoUpdatingResponseContractDetail.
type OptExaminationInfoUpdatingResponseContractDetail struct {
	Value ExaminationInfoUpdatingResponseContractDetail
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseContractDetail was set.
func (o OptExaminationInfoUpdatingResponseContractDetail) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseContractDetail) Reset() {
	var v ExaminationInfoUpdatingResponseContractDetail
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseContractDetail) SetTo(v ExaminationInfoUpdatingResponseContractDetail) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseContractDetail) Get() (v ExaminationInfoUpdatingResponseContractDetail, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseContractDetail) Or(d ExaminationInfoUpdatingResponseContractDetail) ExaminationInfoUpdatingResponseContractDetail {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseContractDetailPayBy returns new OptExaminationInfoUpdatingResponseContractDetailPayBy with value set to v.
func NewOptExaminationInfoUpdatingResponseContractDetailPayBy(v ExaminationInfoUpdatingResponseContractDetailPayBy) OptExaminationInfoUpdatingResponseContractDetailPayBy {
	return OptExaminationInfoUpdatingResponseContractDetailPayBy{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseContractDetailPayBy is optional ExaminationInfoUpdatingResponseContractDetailPayBy.
type OptExaminationInfoUpdatingResponseContractDetailPayBy struct {
	Value ExaminationInfoUpdatingResponseContractDetailPayBy
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseContractDetailPayBy was set.
func (o OptExaminationInfoUpdatingResponseContractDetailPayBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseContractDetailPayBy) Reset() {
	var v ExaminationInfoUpdatingResponseContractDetailPayBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseContractDetailPayBy) SetTo(v ExaminationInfoUpdatingResponseContractDetailPayBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseContractDetailPayBy) Get() (v ExaminationInfoUpdatingResponseContractDetailPayBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseContractDetailPayBy) Or(d ExaminationInfoUpdatingResponseContractDetailPayBy) ExaminationInfoUpdatingResponseContractDetailPayBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseContractDetailSiteExisting returns new OptExaminationInfoUpdatingResponseContractDetailSiteExisting with value set to v.
func NewOptExaminationInfoUpdatingResponseContractDetailSiteExisting(v ExaminationInfoUpdatingResponseContractDetailSiteExisting) OptExaminationInfoUpdatingResponseContractDetailSiteExisting {
	return OptExaminationInfoUpdatingResponseContractDetailSiteExisting{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseContractDetailSiteExisting is optional ExaminationInfoUpdatingResponseContractDetailSiteExisting.
type OptExaminationInfoUpdatingResponseContractDetailSiteExisting struct {
	Value ExaminationInfoUpdatingResponseContractDetailSiteExisting
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseContractDetailSiteExisting was set.
func (o OptExaminationInfoUpdatingResponseContractDetailSiteExisting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseContractDetailSiteExisting) Reset() {
	var v ExaminationInfoUpdatingResponseContractDetailSiteExisting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseContractDetailSiteExisting) SetTo(v ExaminationInfoUpdatingResponseContractDetailSiteExisting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseContractDetailSiteExisting) Get() (v ExaminationInfoUpdatingResponseContractDetailSiteExisting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseContractDetailSiteExisting) Or(d ExaminationInfoUpdatingResponseContractDetailSiteExisting) ExaminationInfoUpdatingResponseContractDetailSiteExisting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseContractInputStatus returns new OptExaminationInfoUpdatingResponseContractInputStatus with value set to v.
func NewOptExaminationInfoUpdatingResponseContractInputStatus(v ExaminationInfoUpdatingResponseContractInputStatus) OptExaminationInfoUpdatingResponseContractInputStatus {
	return OptExaminationInfoUpdatingResponseContractInputStatus{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseContractInputStatus is optional ExaminationInfoUpdatingResponseContractInputStatus.
type OptExaminationInfoUpdatingResponseContractInputStatus struct {
	Value ExaminationInfoUpdatingResponseContractInputStatus
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseContractInputStatus was set.
func (o OptExaminationInfoUpdatingResponseContractInputStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseContractInputStatus) Reset() {
	var v ExaminationInfoUpdatingResponseContractInputStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseContractInputStatus) SetTo(v ExaminationInfoUpdatingResponseContractInputStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseContractInputStatus) Get() (v ExaminationInfoUpdatingResponseContractInputStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseContractInputStatus) Or(d ExaminationInfoUpdatingResponseContractInputStatus) ExaminationInfoUpdatingResponseContractInputStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseContractInputStatusStatusCode returns new OptExaminationInfoUpdatingResponseContractInputStatusStatusCode with value set to v.
func NewOptExaminationInfoUpdatingResponseContractInputStatusStatusCode(v ExaminationInfoUpdatingResponseContractInputStatusStatusCode) OptExaminationInfoUpdatingResponseContractInputStatusStatusCode {
	return OptExaminationInfoUpdatingResponseContractInputStatusStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseContractInputStatusStatusCode is optional ExaminationInfoUpdatingResponseContractInputStatusStatusCode.
type OptExaminationInfoUpdatingResponseContractInputStatusStatusCode struct {
	Value ExaminationInfoUpdatingResponseContractInputStatusStatusCode
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseContractInputStatusStatusCode was set.
func (o OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) Reset() {
	var v ExaminationInfoUpdatingResponseContractInputStatusStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) SetTo(v ExaminationInfoUpdatingResponseContractInputStatusStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) Get() (v ExaminationInfoUpdatingResponseContractInputStatusStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) Or(d ExaminationInfoUpdatingResponseContractInputStatusStatusCode) ExaminationInfoUpdatingResponseContractInputStatusStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseDepositCycleMasterID returns new OptExaminationInfoUpdatingResponseDepositCycleMasterID with value set to v.
func NewOptExaminationInfoUpdatingResponseDepositCycleMasterID(v ExaminationInfoUpdatingResponseDepositCycleMasterID) OptExaminationInfoUpdatingResponseDepositCycleMasterID {
	return OptExaminationInfoUpdatingResponseDepositCycleMasterID{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseDepositCycleMasterID is optional ExaminationInfoUpdatingResponseDepositCycleMasterID.
type OptExaminationInfoUpdatingResponseDepositCycleMasterID struct {
	Value ExaminationInfoUpdatingResponseDepositCycleMasterID
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseDepositCycleMasterID was set.
func (o OptExaminationInfoUpdatingResponseDepositCycleMasterID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseDepositCycleMasterID) Reset() {
	var v ExaminationInfoUpdatingResponseDepositCycleMasterID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseDepositCycleMasterID) SetTo(v ExaminationInfoUpdatingResponseDepositCycleMasterID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseDepositCycleMasterID) Get() (v ExaminationInfoUpdatingResponseDepositCycleMasterID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseDepositCycleMasterID) Or(d ExaminationInfoUpdatingResponseDepositCycleMasterID) ExaminationInfoUpdatingResponseDepositCycleMasterID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseShopItemDetailItemType returns new OptExaminationInfoUpdatingResponseShopItemDetailItemType with value set to v.
func NewOptExaminationInfoUpdatingResponseShopItemDetailItemType(v ExaminationInfoUpdatingResponseShopItemDetailItemType) OptExaminationInfoUpdatingResponseShopItemDetailItemType {
	return OptExaminationInfoUpdatingResponseShopItemDetailItemType{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseShopItemDetailItemType is optional ExaminationInfoUpdatingResponseShopItemDetailItemType.
type OptExaminationInfoUpdatingResponseShopItemDetailItemType struct {
	Value ExaminationInfoUpdatingResponseShopItemDetailItemType
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseShopItemDetailItemType was set.
func (o OptExaminationInfoUpdatingResponseShopItemDetailItemType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseShopItemDetailItemType) Reset() {
	var v ExaminationInfoUpdatingResponseShopItemDetailItemType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseShopItemDetailItemType) SetTo(v ExaminationInfoUpdatingResponseShopItemDetailItemType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseShopItemDetailItemType) Get() (v ExaminationInfoUpdatingResponseShopItemDetailItemType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseShopItemDetailItemType) Or(d ExaminationInfoUpdatingResponseShopItemDetailItemType) ExaminationInfoUpdatingResponseShopItemDetailItemType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoUpdatingResponseStatusCode returns new OptExaminationInfoUpdatingResponseStatusCode with value set to v.
func NewOptExaminationInfoUpdatingResponseStatusCode(v ExaminationInfoUpdatingResponseStatusCode) OptExaminationInfoUpdatingResponseStatusCode {
	return OptExaminationInfoUpdatingResponseStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoUpdatingResponseStatusCode is optional ExaminationInfoUpdatingResponseStatusCode.
type OptExaminationInfoUpdatingResponseStatusCode struct {
	Value ExaminationInfoUpdatingResponseStatusCode
	Set   bool
}

// IsSet returns true if OptExaminationInfoUpdatingResponseStatusCode was set.
func (o OptExaminationInfoUpdatingResponseStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoUpdatingResponseStatusCode) Reset() {
	var v ExaminationInfoUpdatingResponseStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoUpdatingResponseStatusCode) SetTo(v ExaminationInfoUpdatingResponseStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoUpdatingResponseStatusCode) Get() (v ExaminationInfoUpdatingResponseStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoUpdatingResponseStatusCode) Or(d ExaminationInfoUpdatingResponseStatusCode) ExaminationInfoUpdatingResponseStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2RetrievingResponseBankAccountInfo returns new OptExaminationInfoV2RetrievingResponseBankAccountInfo with value set to v.
func NewOptExaminationInfoV2RetrievingResponseBankAccountInfo(v ExaminationInfoV2RetrievingResponseBankAccountInfo) OptExaminationInfoV2RetrievingResponseBankAccountInfo {
	return OptExaminationInfoV2RetrievingResponseBankAccountInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2RetrievingResponseBankAccountInfo is optional ExaminationInfoV2RetrievingResponseBankAccountInfo.
type OptExaminationInfoV2RetrievingResponseBankAccountInfo struct {
	Value ExaminationInfoV2RetrievingResponseBankAccountInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2RetrievingResponseBankAccountInfo was set.
func (o OptExaminationInfoV2RetrievingResponseBankAccountInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2RetrievingResponseBankAccountInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseBankAccountInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2RetrievingResponseBankAccountInfo) SetTo(v ExaminationInfoV2RetrievingResponseBankAccountInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2RetrievingResponseBankAccountInfo) Get() (v ExaminationInfoV2RetrievingResponseBankAccountInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2RetrievingResponseBankAccountInfo) Or(d ExaminationInfoV2RetrievingResponseBankAccountInfo) ExaminationInfoV2RetrievingResponseBankAccountInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2RetrievingResponseContractInfo returns new OptExaminationInfoV2RetrievingResponseContractInfo with value set to v.
func NewOptExaminationInfoV2RetrievingResponseContractInfo(v ExaminationInfoV2RetrievingResponseContractInfo) OptExaminationInfoV2RetrievingResponseContractInfo {
	return OptExaminationInfoV2RetrievingResponseContractInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2RetrievingResponseContractInfo is optional ExaminationInfoV2RetrievingResponseContractInfo.
type OptExaminationInfoV2RetrievingResponseContractInfo struct {
	Value ExaminationInfoV2RetrievingResponseContractInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2RetrievingResponseContractInfo was set.
func (o OptExaminationInfoV2RetrievingResponseContractInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2RetrievingResponseContractInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseContractInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2RetrievingResponseContractInfo) SetTo(v ExaminationInfoV2RetrievingResponseContractInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2RetrievingResponseContractInfo) Get() (v ExaminationInfoV2RetrievingResponseContractInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2RetrievingResponseContractInfo) Or(d ExaminationInfoV2RetrievingResponseContractInfo) ExaminationInfoV2RetrievingResponseContractInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2RetrievingResponseDepositCycleInfo returns new OptExaminationInfoV2RetrievingResponseDepositCycleInfo with value set to v.
func NewOptExaminationInfoV2RetrievingResponseDepositCycleInfo(v ExaminationInfoV2RetrievingResponseDepositCycleInfo) OptExaminationInfoV2RetrievingResponseDepositCycleInfo {
	return OptExaminationInfoV2RetrievingResponseDepositCycleInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2RetrievingResponseDepositCycleInfo is optional ExaminationInfoV2RetrievingResponseDepositCycleInfo.
type OptExaminationInfoV2RetrievingResponseDepositCycleInfo struct {
	Value ExaminationInfoV2RetrievingResponseDepositCycleInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2RetrievingResponseDepositCycleInfo was set.
func (o OptExaminationInfoV2RetrievingResponseDepositCycleInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2RetrievingResponseDepositCycleInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseDepositCycleInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2RetrievingResponseDepositCycleInfo) SetTo(v ExaminationInfoV2RetrievingResponseDepositCycleInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2RetrievingResponseDepositCycleInfo) Get() (v ExaminationInfoV2RetrievingResponseDepositCycleInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2RetrievingResponseDepositCycleInfo) Or(d ExaminationInfoV2RetrievingResponseDepositCycleInfo) ExaminationInfoV2RetrievingResponseDepositCycleInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2RetrievingResponseShopInfo returns new OptExaminationInfoV2RetrievingResponseShopInfo with value set to v.
func NewOptExaminationInfoV2RetrievingResponseShopInfo(v ExaminationInfoV2RetrievingResponseShopInfo) OptExaminationInfoV2RetrievingResponseShopInfo {
	return OptExaminationInfoV2RetrievingResponseShopInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2RetrievingResponseShopInfo is optional ExaminationInfoV2RetrievingResponseShopInfo.
type OptExaminationInfoV2RetrievingResponseShopInfo struct {
	Value ExaminationInfoV2RetrievingResponseShopInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2RetrievingResponseShopInfo was set.
func (o OptExaminationInfoV2RetrievingResponseShopInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2RetrievingResponseShopInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseShopInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2RetrievingResponseShopInfo) SetTo(v ExaminationInfoV2RetrievingResponseShopInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2RetrievingResponseShopInfo) Get() (v ExaminationInfoV2RetrievingResponseShopInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2RetrievingResponseShopInfo) Or(d ExaminationInfoV2RetrievingResponseShopInfo) ExaminationInfoV2RetrievingResponseShopInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo returns new OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo with value set to v.
func NewOptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo(v ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo {
	return OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo is optional ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo.
type OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo struct {
	Value ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo was set.
func (o OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) SetTo(v ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Get() (v ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Or(d ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2RetrievingResponseShopInfoSiteInfo returns new OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo with value set to v.
func NewOptExaminationInfoV2RetrievingResponseShopInfoSiteInfo(v ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo {
	return OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo is optional ExaminationInfoV2RetrievingResponseShopInfoSiteInfo.
type OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo struct {
	Value ExaminationInfoV2RetrievingResponseShopInfoSiteInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo was set.
func (o OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseShopInfoSiteInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) SetTo(v ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Get() (v ExaminationInfoV2RetrievingResponseShopInfoSiteInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Or(d ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) ExaminationInfoV2RetrievingResponseShopInfoSiteInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2RetrievingResponseStatusCode returns new OptExaminationInfoV2RetrievingResponseStatusCode with value set to v.
func NewOptExaminationInfoV2RetrievingResponseStatusCode(v ExaminationInfoV2RetrievingResponseStatusCode) OptExaminationInfoV2RetrievingResponseStatusCode {
	return OptExaminationInfoV2RetrievingResponseStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2RetrievingResponseStatusCode is optional ExaminationInfoV2RetrievingResponseStatusCode.
type OptExaminationInfoV2RetrievingResponseStatusCode struct {
	Value ExaminationInfoV2RetrievingResponseStatusCode
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2RetrievingResponseStatusCode was set.
func (o OptExaminationInfoV2RetrievingResponseStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2RetrievingResponseStatusCode) Reset() {
	var v ExaminationInfoV2RetrievingResponseStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2RetrievingResponseStatusCode) SetTo(v ExaminationInfoV2RetrievingResponseStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2RetrievingResponseStatusCode) Get() (v ExaminationInfoV2RetrievingResponseStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2RetrievingResponseStatusCode) Or(d ExaminationInfoV2RetrievingResponseStatusCode) ExaminationInfoV2RetrievingResponseStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingRequestBankAccountInfo returns new OptExaminationInfoV2UpdatingRequestBankAccountInfo with value set to v.
func NewOptExaminationInfoV2UpdatingRequestBankAccountInfo(v ExaminationInfoV2UpdatingRequestBankAccountInfo) OptExaminationInfoV2UpdatingRequestBankAccountInfo {
	return OptExaminationInfoV2UpdatingRequestBankAccountInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingRequestBankAccountInfo is optional ExaminationInfoV2UpdatingRequestBankAccountInfo.
type OptExaminationInfoV2UpdatingRequestBankAccountInfo struct {
	Value ExaminationInfoV2UpdatingRequestBankAccountInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingRequestBankAccountInfo was set.
func (o OptExaminationInfoV2UpdatingRequestBankAccountInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingRequestBankAccountInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestBankAccountInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingRequestBankAccountInfo) SetTo(v ExaminationInfoV2UpdatingRequestBankAccountInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingRequestBankAccountInfo) Get() (v ExaminationInfoV2UpdatingRequestBankAccountInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingRequestBankAccountInfo) Or(d ExaminationInfoV2UpdatingRequestBankAccountInfo) ExaminationInfoV2UpdatingRequestBankAccountInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingRequestContractInfo returns new OptExaminationInfoV2UpdatingRequestContractInfo with value set to v.
func NewOptExaminationInfoV2UpdatingRequestContractInfo(v ExaminationInfoV2UpdatingRequestContractInfo) OptExaminationInfoV2UpdatingRequestContractInfo {
	return OptExaminationInfoV2UpdatingRequestContractInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingRequestContractInfo is optional ExaminationInfoV2UpdatingRequestContractInfo.
type OptExaminationInfoV2UpdatingRequestContractInfo struct {
	Value ExaminationInfoV2UpdatingRequestContractInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingRequestContractInfo was set.
func (o OptExaminationInfoV2UpdatingRequestContractInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingRequestContractInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestContractInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingRequestContractInfo) SetTo(v ExaminationInfoV2UpdatingRequestContractInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingRequestContractInfo) Get() (v ExaminationInfoV2UpdatingRequestContractInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingRequestContractInfo) Or(d ExaminationInfoV2UpdatingRequestContractInfo) ExaminationInfoV2UpdatingRequestContractInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingRequestDepositCycleInfo returns new OptExaminationInfoV2UpdatingRequestDepositCycleInfo with value set to v.
func NewOptExaminationInfoV2UpdatingRequestDepositCycleInfo(v ExaminationInfoV2UpdatingRequestDepositCycleInfo) OptExaminationInfoV2UpdatingRequestDepositCycleInfo {
	return OptExaminationInfoV2UpdatingRequestDepositCycleInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingRequestDepositCycleInfo is optional ExaminationInfoV2UpdatingRequestDepositCycleInfo.
type OptExaminationInfoV2UpdatingRequestDepositCycleInfo struct {
	Value ExaminationInfoV2UpdatingRequestDepositCycleInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingRequestDepositCycleInfo was set.
func (o OptExaminationInfoV2UpdatingRequestDepositCycleInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingRequestDepositCycleInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestDepositCycleInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingRequestDepositCycleInfo) SetTo(v ExaminationInfoV2UpdatingRequestDepositCycleInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingRequestDepositCycleInfo) Get() (v ExaminationInfoV2UpdatingRequestDepositCycleInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingRequestDepositCycleInfo) Or(d ExaminationInfoV2UpdatingRequestDepositCycleInfo) ExaminationInfoV2UpdatingRequestDepositCycleInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingRequestShopInfo returns new OptExaminationInfoV2UpdatingRequestShopInfo with value set to v.
func NewOptExaminationInfoV2UpdatingRequestShopInfo(v ExaminationInfoV2UpdatingRequestShopInfo) OptExaminationInfoV2UpdatingRequestShopInfo {
	return OptExaminationInfoV2UpdatingRequestShopInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingRequestShopInfo is optional ExaminationInfoV2UpdatingRequestShopInfo.
type OptExaminationInfoV2UpdatingRequestShopInfo struct {
	Value ExaminationInfoV2UpdatingRequestShopInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingRequestShopInfo was set.
func (o OptExaminationInfoV2UpdatingRequestShopInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingRequestShopInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestShopInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingRequestShopInfo) SetTo(v ExaminationInfoV2UpdatingRequestShopInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingRequestShopInfo) Get() (v ExaminationInfoV2UpdatingRequestShopInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingRequestShopInfo) Or(d ExaminationInfoV2UpdatingRequestShopInfo) ExaminationInfoV2UpdatingRequestShopInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo returns new OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo with value set to v.
func NewOptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo(v ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo {
	return OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo is optional ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo.
type OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo struct {
	Value ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo was set.
func (o OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) SetTo(v ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Get() (v ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Or(d ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingRequestShopInfoSiteInfo returns new OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo with value set to v.
func NewOptExaminationInfoV2UpdatingRequestShopInfoSiteInfo(v ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo {
	return OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo is optional ExaminationInfoV2UpdatingRequestShopInfoSiteInfo.
type OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo struct {
	Value ExaminationInfoV2UpdatingRequestShopInfoSiteInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo was set.
func (o OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestShopInfoSiteInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) SetTo(v ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Get() (v ExaminationInfoV2UpdatingRequestShopInfoSiteInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Or(d ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) ExaminationInfoV2UpdatingRequestShopInfoSiteInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingResponseBankAccountInfo returns new OptExaminationInfoV2UpdatingResponseBankAccountInfo with value set to v.
func NewOptExaminationInfoV2UpdatingResponseBankAccountInfo(v ExaminationInfoV2UpdatingResponseBankAccountInfo) OptExaminationInfoV2UpdatingResponseBankAccountInfo {
	return OptExaminationInfoV2UpdatingResponseBankAccountInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingResponseBankAccountInfo is optional ExaminationInfoV2UpdatingResponseBankAccountInfo.
type OptExaminationInfoV2UpdatingResponseBankAccountInfo struct {
	Value ExaminationInfoV2UpdatingResponseBankAccountInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingResponseBankAccountInfo was set.
func (o OptExaminationInfoV2UpdatingResponseBankAccountInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingResponseBankAccountInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseBankAccountInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingResponseBankAccountInfo) SetTo(v ExaminationInfoV2UpdatingResponseBankAccountInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingResponseBankAccountInfo) Get() (v ExaminationInfoV2UpdatingResponseBankAccountInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingResponseBankAccountInfo) Or(d ExaminationInfoV2UpdatingResponseBankAccountInfo) ExaminationInfoV2UpdatingResponseBankAccountInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingResponseContractInfo returns new OptExaminationInfoV2UpdatingResponseContractInfo with value set to v.
func NewOptExaminationInfoV2UpdatingResponseContractInfo(v ExaminationInfoV2UpdatingResponseContractInfo) OptExaminationInfoV2UpdatingResponseContractInfo {
	return OptExaminationInfoV2UpdatingResponseContractInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingResponseContractInfo is optional ExaminationInfoV2UpdatingResponseContractInfo.
type OptExaminationInfoV2UpdatingResponseContractInfo struct {
	Value ExaminationInfoV2UpdatingResponseContractInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingResponseContractInfo was set.
func (o OptExaminationInfoV2UpdatingResponseContractInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingResponseContractInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseContractInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingResponseContractInfo) SetTo(v ExaminationInfoV2UpdatingResponseContractInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingResponseContractInfo) Get() (v ExaminationInfoV2UpdatingResponseContractInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingResponseContractInfo) Or(d ExaminationInfoV2UpdatingResponseContractInfo) ExaminationInfoV2UpdatingResponseContractInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingResponseDepositCycleInfo returns new OptExaminationInfoV2UpdatingResponseDepositCycleInfo with value set to v.
func NewOptExaminationInfoV2UpdatingResponseDepositCycleInfo(v ExaminationInfoV2UpdatingResponseDepositCycleInfo) OptExaminationInfoV2UpdatingResponseDepositCycleInfo {
	return OptExaminationInfoV2UpdatingResponseDepositCycleInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingResponseDepositCycleInfo is optional ExaminationInfoV2UpdatingResponseDepositCycleInfo.
type OptExaminationInfoV2UpdatingResponseDepositCycleInfo struct {
	Value ExaminationInfoV2UpdatingResponseDepositCycleInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingResponseDepositCycleInfo was set.
func (o OptExaminationInfoV2UpdatingResponseDepositCycleInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingResponseDepositCycleInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseDepositCycleInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingResponseDepositCycleInfo) SetTo(v ExaminationInfoV2UpdatingResponseDepositCycleInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingResponseDepositCycleInfo) Get() (v ExaminationInfoV2UpdatingResponseDepositCycleInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingResponseDepositCycleInfo) Or(d ExaminationInfoV2UpdatingResponseDepositCycleInfo) ExaminationInfoV2UpdatingResponseDepositCycleInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingResponseShopInfo returns new OptExaminationInfoV2UpdatingResponseShopInfo with value set to v.
func NewOptExaminationInfoV2UpdatingResponseShopInfo(v ExaminationInfoV2UpdatingResponseShopInfo) OptExaminationInfoV2UpdatingResponseShopInfo {
	return OptExaminationInfoV2UpdatingResponseShopInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingResponseShopInfo is optional ExaminationInfoV2UpdatingResponseShopInfo.
type OptExaminationInfoV2UpdatingResponseShopInfo struct {
	Value ExaminationInfoV2UpdatingResponseShopInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingResponseShopInfo was set.
func (o OptExaminationInfoV2UpdatingResponseShopInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingResponseShopInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseShopInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingResponseShopInfo) SetTo(v ExaminationInfoV2UpdatingResponseShopInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingResponseShopInfo) Get() (v ExaminationInfoV2UpdatingResponseShopInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingResponseShopInfo) Or(d ExaminationInfoV2UpdatingResponseShopInfo) ExaminationInfoV2UpdatingResponseShopInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo returns new OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo with value set to v.
func NewOptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo(v ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo {
	return OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo is optional ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo.
type OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo struct {
	Value ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo was set.
func (o OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) SetTo(v ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Get() (v ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Or(d ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingResponseShopInfoSiteInfo returns new OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo with value set to v.
func NewOptExaminationInfoV2UpdatingResponseShopInfoSiteInfo(v ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo {
	return OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo is optional ExaminationInfoV2UpdatingResponseShopInfoSiteInfo.
type OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo struct {
	Value ExaminationInfoV2UpdatingResponseShopInfoSiteInfo
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo was set.
func (o OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseShopInfoSiteInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) SetTo(v ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Get() (v ExaminationInfoV2UpdatingResponseShopInfoSiteInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Or(d ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) ExaminationInfoV2UpdatingResponseShopInfoSiteInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExaminationInfoV2UpdatingResponseStatusCode returns new OptExaminationInfoV2UpdatingResponseStatusCode with value set to v.
func NewOptExaminationInfoV2UpdatingResponseStatusCode(v ExaminationInfoV2UpdatingResponseStatusCode) OptExaminationInfoV2UpdatingResponseStatusCode {
	return OptExaminationInfoV2UpdatingResponseStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptExaminationInfoV2UpdatingResponseStatusCode is optional ExaminationInfoV2UpdatingResponseStatusCode.
type OptExaminationInfoV2UpdatingResponseStatusCode struct {
	Value ExaminationInfoV2UpdatingResponseStatusCode
	Set   bool
}

// IsSet returns true if OptExaminationInfoV2UpdatingResponseStatusCode was set.
func (o OptExaminationInfoV2UpdatingResponseStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExaminationInfoV2UpdatingResponseStatusCode) Reset() {
	var v ExaminationInfoV2UpdatingResponseStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExaminationInfoV2UpdatingResponseStatusCode) SetTo(v ExaminationInfoV2UpdatingResponseStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExaminationInfoV2UpdatingResponseStatusCode) Get() (v ExaminationInfoV2UpdatingResponseStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExaminationInfoV2UpdatingResponseStatusCode) Or(d ExaminationInfoV2UpdatingResponseStatusCode) ExaminationInfoV2UpdatingResponseStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentAfter3DSecureOKJobCode returns new OptExecutePaymentAfter3DSecureOKJobCode with value set to v.
func NewOptExecutePaymentAfter3DSecureOKJobCode(v ExecutePaymentAfter3DSecureOKJobCode) OptExecutePaymentAfter3DSecureOKJobCode {
	return OptExecutePaymentAfter3DSecureOKJobCode{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentAfter3DSecureOKJobCode is optional ExecutePaymentAfter3DSecureOKJobCode.
type OptExecutePaymentAfter3DSecureOKJobCode struct {
	Value ExecutePaymentAfter3DSecureOKJobCode
	Set   bool
}

// IsSet returns true if OptExecutePaymentAfter3DSecureOKJobCode was set.
func (o OptExecutePaymentAfter3DSecureOKJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentAfter3DSecureOKJobCode) Reset() {
	var v ExecutePaymentAfter3DSecureOKJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentAfter3DSecureOKJobCode) SetTo(v ExecutePaymentAfter3DSecureOKJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentAfter3DSecureOKJobCode) Get() (v ExecutePaymentAfter3DSecureOKJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentAfter3DSecureOKJobCode) Or(d ExecutePaymentAfter3DSecureOKJobCode) ExecutePaymentAfter3DSecureOKJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentAfter3DSecureOKMethod returns new OptExecutePaymentAfter3DSecureOKMethod with value set to v.
func NewOptExecutePaymentAfter3DSecureOKMethod(v ExecutePaymentAfter3DSecureOKMethod) OptExecutePaymentAfter3DSecureOKMethod {
	return OptExecutePaymentAfter3DSecureOKMethod{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentAfter3DSecureOKMethod is optional ExecutePaymentAfter3DSecureOKMethod.
type OptExecutePaymentAfter3DSecureOKMethod struct {
	Value ExecutePaymentAfter3DSecureOKMethod
	Set   bool
}

// IsSet returns true if OptExecutePaymentAfter3DSecureOKMethod was set.
func (o OptExecutePaymentAfter3DSecureOKMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentAfter3DSecureOKMethod) Reset() {
	var v ExecutePaymentAfter3DSecureOKMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentAfter3DSecureOKMethod) SetTo(v ExecutePaymentAfter3DSecureOKMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentAfter3DSecureOKMethod) Get() (v ExecutePaymentAfter3DSecureOKMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentAfter3DSecureOKMethod) Or(d ExecutePaymentAfter3DSecureOKMethod) ExecutePaymentAfter3DSecureOKMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentAfter3DSecureOKPayType returns new OptExecutePaymentAfter3DSecureOKPayType with value set to v.
func NewOptExecutePaymentAfter3DSecureOKPayType(v ExecutePaymentAfter3DSecureOKPayType) OptExecutePaymentAfter3DSecureOKPayType {
	return OptExecutePaymentAfter3DSecureOKPayType{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentAfter3DSecureOKPayType is optional ExecutePaymentAfter3DSecureOKPayType.
type OptExecutePaymentAfter3DSecureOKPayType struct {
	Value ExecutePaymentAfter3DSecureOKPayType
	Set   bool
}

// IsSet returns true if OptExecutePaymentAfter3DSecureOKPayType was set.
func (o OptExecutePaymentAfter3DSecureOKPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentAfter3DSecureOKPayType) Reset() {
	var v ExecutePaymentAfter3DSecureOKPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentAfter3DSecureOKPayType) SetTo(v ExecutePaymentAfter3DSecureOKPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentAfter3DSecureOKPayType) Get() (v ExecutePaymentAfter3DSecureOKPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentAfter3DSecureOKPayType) Or(d ExecutePaymentAfter3DSecureOKPayType) ExecutePaymentAfter3DSecureOKPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentAfter3DSecureOKStatus returns new OptExecutePaymentAfter3DSecureOKStatus with value set to v.
func NewOptExecutePaymentAfter3DSecureOKStatus(v ExecutePaymentAfter3DSecureOKStatus) OptExecutePaymentAfter3DSecureOKStatus {
	return OptExecutePaymentAfter3DSecureOKStatus{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentAfter3DSecureOKStatus is optional ExecutePaymentAfter3DSecureOKStatus.
type OptExecutePaymentAfter3DSecureOKStatus struct {
	Value ExecutePaymentAfter3DSecureOKStatus
	Set   bool
}

// IsSet returns true if OptExecutePaymentAfter3DSecureOKStatus was set.
func (o OptExecutePaymentAfter3DSecureOKStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentAfter3DSecureOKStatus) Reset() {
	var v ExecutePaymentAfter3DSecureOKStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentAfter3DSecureOKStatus) SetTo(v ExecutePaymentAfter3DSecureOKStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentAfter3DSecureOKStatus) Get() (v ExecutePaymentAfter3DSecureOKStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentAfter3DSecureOKStatus) Or(d ExecutePaymentAfter3DSecureOKStatus) ExecutePaymentAfter3DSecureOKStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK0JobCode returns new OptExecutePaymentOK0JobCode with value set to v.
func NewOptExecutePaymentOK0JobCode(v ExecutePaymentOK0JobCode) OptExecutePaymentOK0JobCode {
	return OptExecutePaymentOK0JobCode{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK0JobCode is optional ExecutePaymentOK0JobCode.
type OptExecutePaymentOK0JobCode struct {
	Value ExecutePaymentOK0JobCode
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK0JobCode was set.
func (o OptExecutePaymentOK0JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK0JobCode) Reset() {
	var v ExecutePaymentOK0JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK0JobCode) SetTo(v ExecutePaymentOK0JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK0JobCode) Get() (v ExecutePaymentOK0JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK0JobCode) Or(d ExecutePaymentOK0JobCode) ExecutePaymentOK0JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK0Method returns new OptExecutePaymentOK0Method with value set to v.
func NewOptExecutePaymentOK0Method(v ExecutePaymentOK0Method) OptExecutePaymentOK0Method {
	return OptExecutePaymentOK0Method{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK0Method is optional ExecutePaymentOK0Method.
type OptExecutePaymentOK0Method struct {
	Value ExecutePaymentOK0Method
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK0Method was set.
func (o OptExecutePaymentOK0Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK0Method) Reset() {
	var v ExecutePaymentOK0Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK0Method) SetTo(v ExecutePaymentOK0Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK0Method) Get() (v ExecutePaymentOK0Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK0Method) Or(d ExecutePaymentOK0Method) ExecutePaymentOK0Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK0PayType returns new OptExecutePaymentOK0PayType with value set to v.
func NewOptExecutePaymentOK0PayType(v ExecutePaymentOK0PayType) OptExecutePaymentOK0PayType {
	return OptExecutePaymentOK0PayType{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK0PayType is optional ExecutePaymentOK0PayType.
type OptExecutePaymentOK0PayType struct {
	Value ExecutePaymentOK0PayType
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK0PayType was set.
func (o OptExecutePaymentOK0PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK0PayType) Reset() {
	var v ExecutePaymentOK0PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK0PayType) SetTo(v ExecutePaymentOK0PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK0PayType) Get() (v ExecutePaymentOK0PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK0PayType) Or(d ExecutePaymentOK0PayType) ExecutePaymentOK0PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK0Status returns new OptExecutePaymentOK0Status with value set to v.
func NewOptExecutePaymentOK0Status(v ExecutePaymentOK0Status) OptExecutePaymentOK0Status {
	return OptExecutePaymentOK0Status{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK0Status is optional ExecutePaymentOK0Status.
type OptExecutePaymentOK0Status struct {
	Value ExecutePaymentOK0Status
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK0Status was set.
func (o OptExecutePaymentOK0Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK0Status) Reset() {
	var v ExecutePaymentOK0Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK0Status) SetTo(v ExecutePaymentOK0Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK0Status) Get() (v ExecutePaymentOK0Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK0Status) Or(d ExecutePaymentOK0Status) ExecutePaymentOK0Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK1JobCode returns new OptExecutePaymentOK1JobCode with value set to v.
func NewOptExecutePaymentOK1JobCode(v ExecutePaymentOK1JobCode) OptExecutePaymentOK1JobCode {
	return OptExecutePaymentOK1JobCode{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK1JobCode is optional ExecutePaymentOK1JobCode.
type OptExecutePaymentOK1JobCode struct {
	Value ExecutePaymentOK1JobCode
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK1JobCode was set.
func (o OptExecutePaymentOK1JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK1JobCode) Reset() {
	var v ExecutePaymentOK1JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK1JobCode) SetTo(v ExecutePaymentOK1JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK1JobCode) Get() (v ExecutePaymentOK1JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK1JobCode) Or(d ExecutePaymentOK1JobCode) ExecutePaymentOK1JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK1Method returns new OptExecutePaymentOK1Method with value set to v.
func NewOptExecutePaymentOK1Method(v ExecutePaymentOK1Method) OptExecutePaymentOK1Method {
	return OptExecutePaymentOK1Method{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK1Method is optional ExecutePaymentOK1Method.
type OptExecutePaymentOK1Method struct {
	Value ExecutePaymentOK1Method
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK1Method was set.
func (o OptExecutePaymentOK1Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK1Method) Reset() {
	var v ExecutePaymentOK1Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK1Method) SetTo(v ExecutePaymentOK1Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK1Method) Get() (v ExecutePaymentOK1Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK1Method) Or(d ExecutePaymentOK1Method) ExecutePaymentOK1Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK1PayType returns new OptExecutePaymentOK1PayType with value set to v.
func NewOptExecutePaymentOK1PayType(v ExecutePaymentOK1PayType) OptExecutePaymentOK1PayType {
	return OptExecutePaymentOK1PayType{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK1PayType is optional ExecutePaymentOK1PayType.
type OptExecutePaymentOK1PayType struct {
	Value ExecutePaymentOK1PayType
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK1PayType was set.
func (o OptExecutePaymentOK1PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK1PayType) Reset() {
	var v ExecutePaymentOK1PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK1PayType) SetTo(v ExecutePaymentOK1PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK1PayType) Get() (v ExecutePaymentOK1PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK1PayType) Or(d ExecutePaymentOK1PayType) ExecutePaymentOK1PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK1Status returns new OptExecutePaymentOK1Status with value set to v.
func NewOptExecutePaymentOK1Status(v ExecutePaymentOK1Status) OptExecutePaymentOK1Status {
	return OptExecutePaymentOK1Status{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK1Status is optional ExecutePaymentOK1Status.
type OptExecutePaymentOK1Status struct {
	Value ExecutePaymentOK1Status
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK1Status was set.
func (o OptExecutePaymentOK1Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK1Status) Reset() {
	var v ExecutePaymentOK1Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK1Status) SetTo(v ExecutePaymentOK1Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK1Status) Get() (v ExecutePaymentOK1Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK1Status) Or(d ExecutePaymentOK1Status) ExecutePaymentOK1Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK2CancelOverpaymentFlag returns new OptExecutePaymentOK2CancelOverpaymentFlag with value set to v.
func NewOptExecutePaymentOK2CancelOverpaymentFlag(v ExecutePaymentOK2CancelOverpaymentFlag) OptExecutePaymentOK2CancelOverpaymentFlag {
	return OptExecutePaymentOK2CancelOverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK2CancelOverpaymentFlag is optional ExecutePaymentOK2CancelOverpaymentFlag.
type OptExecutePaymentOK2CancelOverpaymentFlag struct {
	Value ExecutePaymentOK2CancelOverpaymentFlag
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK2CancelOverpaymentFlag was set.
func (o OptExecutePaymentOK2CancelOverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK2CancelOverpaymentFlag) Reset() {
	var v ExecutePaymentOK2CancelOverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK2CancelOverpaymentFlag) SetTo(v ExecutePaymentOK2CancelOverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK2CancelOverpaymentFlag) Get() (v ExecutePaymentOK2CancelOverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK2CancelOverpaymentFlag) Or(d ExecutePaymentOK2CancelOverpaymentFlag) ExecutePaymentOK2CancelOverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK2OverpaymentFlag returns new OptExecutePaymentOK2OverpaymentFlag with value set to v.
func NewOptExecutePaymentOK2OverpaymentFlag(v ExecutePaymentOK2OverpaymentFlag) OptExecutePaymentOK2OverpaymentFlag {
	return OptExecutePaymentOK2OverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK2OverpaymentFlag is optional ExecutePaymentOK2OverpaymentFlag.
type OptExecutePaymentOK2OverpaymentFlag struct {
	Value ExecutePaymentOK2OverpaymentFlag
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK2OverpaymentFlag was set.
func (o OptExecutePaymentOK2OverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK2OverpaymentFlag) Reset() {
	var v ExecutePaymentOK2OverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK2OverpaymentFlag) SetTo(v ExecutePaymentOK2OverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK2OverpaymentFlag) Get() (v ExecutePaymentOK2OverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK2OverpaymentFlag) Or(d ExecutePaymentOK2OverpaymentFlag) ExecutePaymentOK2OverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK2PayType returns new OptExecutePaymentOK2PayType with value set to v.
func NewOptExecutePaymentOK2PayType(v ExecutePaymentOK2PayType) OptExecutePaymentOK2PayType {
	return OptExecutePaymentOK2PayType{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK2PayType is optional ExecutePaymentOK2PayType.
type OptExecutePaymentOK2PayType struct {
	Value ExecutePaymentOK2PayType
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK2PayType was set.
func (o OptExecutePaymentOK2PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK2PayType) Reset() {
	var v ExecutePaymentOK2PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK2PayType) SetTo(v ExecutePaymentOK2PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK2PayType) Get() (v ExecutePaymentOK2PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK2PayType) Or(d ExecutePaymentOK2PayType) ExecutePaymentOK2PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK2Result returns new OptExecutePaymentOK2Result with value set to v.
func NewOptExecutePaymentOK2Result(v ExecutePaymentOK2Result) OptExecutePaymentOK2Result {
	return OptExecutePaymentOK2Result{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK2Result is optional ExecutePaymentOK2Result.
type OptExecutePaymentOK2Result struct {
	Value ExecutePaymentOK2Result
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK2Result was set.
func (o OptExecutePaymentOK2Result) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK2Result) Reset() {
	var v ExecutePaymentOK2Result
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK2Result) SetTo(v ExecutePaymentOK2Result) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK2Result) Get() (v ExecutePaymentOK2Result, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK2Result) Or(d ExecutePaymentOK2Result) ExecutePaymentOK2Result {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK2Status returns new OptExecutePaymentOK2Status with value set to v.
func NewOptExecutePaymentOK2Status(v ExecutePaymentOK2Status) OptExecutePaymentOK2Status {
	return OptExecutePaymentOK2Status{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK2Status is optional ExecutePaymentOK2Status.
type OptExecutePaymentOK2Status struct {
	Value ExecutePaymentOK2Status
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK2Status was set.
func (o OptExecutePaymentOK2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK2Status) Reset() {
	var v ExecutePaymentOK2Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK2Status) SetTo(v ExecutePaymentOK2Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK2Status) Get() (v ExecutePaymentOK2Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK2Status) Or(d ExecutePaymentOK2Status) ExecutePaymentOK2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK3JobCode returns new OptExecutePaymentOK3JobCode with value set to v.
func NewOptExecutePaymentOK3JobCode(v ExecutePaymentOK3JobCode) OptExecutePaymentOK3JobCode {
	return OptExecutePaymentOK3JobCode{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK3JobCode is optional ExecutePaymentOK3JobCode.
type OptExecutePaymentOK3JobCode struct {
	Value ExecutePaymentOK3JobCode
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK3JobCode was set.
func (o OptExecutePaymentOK3JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK3JobCode) Reset() {
	var v ExecutePaymentOK3JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK3JobCode) SetTo(v ExecutePaymentOK3JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK3JobCode) Get() (v ExecutePaymentOK3JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK3JobCode) Or(d ExecutePaymentOK3JobCode) ExecutePaymentOK3JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK3PayType returns new OptExecutePaymentOK3PayType with value set to v.
func NewOptExecutePaymentOK3PayType(v ExecutePaymentOK3PayType) OptExecutePaymentOK3PayType {
	return OptExecutePaymentOK3PayType{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK3PayType is optional ExecutePaymentOK3PayType.
type OptExecutePaymentOK3PayType struct {
	Value ExecutePaymentOK3PayType
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK3PayType was set.
func (o OptExecutePaymentOK3PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK3PayType) Reset() {
	var v ExecutePaymentOK3PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK3PayType) SetTo(v ExecutePaymentOK3PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK3PayType) Get() (v ExecutePaymentOK3PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK3PayType) Or(d ExecutePaymentOK3PayType) ExecutePaymentOK3PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK3Status returns new OptExecutePaymentOK3Status with value set to v.
func NewOptExecutePaymentOK3Status(v ExecutePaymentOK3Status) OptExecutePaymentOK3Status {
	return OptExecutePaymentOK3Status{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK3Status is optional ExecutePaymentOK3Status.
type OptExecutePaymentOK3Status struct {
	Value ExecutePaymentOK3Status
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK3Status was set.
func (o OptExecutePaymentOK3Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK3Status) Reset() {
	var v ExecutePaymentOK3Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK3Status) SetTo(v ExecutePaymentOK3Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK3Status) Get() (v ExecutePaymentOK3Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK3Status) Or(d ExecutePaymentOK3Status) ExecutePaymentOK3Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK4PayType returns new OptExecutePaymentOK4PayType with value set to v.
func NewOptExecutePaymentOK4PayType(v ExecutePaymentOK4PayType) OptExecutePaymentOK4PayType {
	return OptExecutePaymentOK4PayType{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK4PayType is optional ExecutePaymentOK4PayType.
type OptExecutePaymentOK4PayType struct {
	Value ExecutePaymentOK4PayType
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK4PayType was set.
func (o OptExecutePaymentOK4PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK4PayType) Reset() {
	var v ExecutePaymentOK4PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK4PayType) SetTo(v ExecutePaymentOK4PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK4PayType) Get() (v ExecutePaymentOK4PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK4PayType) Or(d ExecutePaymentOK4PayType) ExecutePaymentOK4PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentOK4Status returns new OptExecutePaymentOK4Status with value set to v.
func NewOptExecutePaymentOK4Status(v ExecutePaymentOK4Status) OptExecutePaymentOK4Status {
	return OptExecutePaymentOK4Status{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentOK4Status is optional ExecutePaymentOK4Status.
type OptExecutePaymentOK4Status struct {
	Value ExecutePaymentOK4Status
	Set   bool
}

// IsSet returns true if OptExecutePaymentOK4Status was set.
func (o OptExecutePaymentOK4Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentOK4Status) Reset() {
	var v ExecutePaymentOK4Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentOK4Status) SetTo(v ExecutePaymentOK4Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentOK4Status) Get() (v ExecutePaymentOK4Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentOK4Status) Or(d ExecutePaymentOK4Status) ExecutePaymentOK4Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentReq0Method returns new OptExecutePaymentReq0Method with value set to v.
func NewOptExecutePaymentReq0Method(v ExecutePaymentReq0Method) OptExecutePaymentReq0Method {
	return OptExecutePaymentReq0Method{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentReq0Method is optional ExecutePaymentReq0Method.
type OptExecutePaymentReq0Method struct {
	Value ExecutePaymentReq0Method
	Set   bool
}

// IsSet returns true if OptExecutePaymentReq0Method was set.
func (o OptExecutePaymentReq0Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentReq0Method) Reset() {
	var v ExecutePaymentReq0Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentReq0Method) SetTo(v ExecutePaymentReq0Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentReq0Method) Get() (v ExecutePaymentReq0Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentReq0Method) Or(d ExecutePaymentReq0Method) ExecutePaymentReq0Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExecutePaymentReq3PayType returns new OptExecutePaymentReq3PayType with value set to v.
func NewOptExecutePaymentReq3PayType(v ExecutePaymentReq3PayType) OptExecutePaymentReq3PayType {
	return OptExecutePaymentReq3PayType{
		Value: v,
		Set:   true,
	}
}

// OptExecutePaymentReq3PayType is optional ExecutePaymentReq3PayType.
type OptExecutePaymentReq3PayType struct {
	Value ExecutePaymentReq3PayType
	Set   bool
}

// IsSet returns true if OptExecutePaymentReq3PayType was set.
func (o OptExecutePaymentReq3PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExecutePaymentReq3PayType) Reset() {
	var v ExecutePaymentReq3PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExecutePaymentReq3PayType) SetTo(v ExecutePaymentReq3PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExecutePaymentReq3PayType) Get() (v ExecutePaymentReq3PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExecutePaymentReq3PayType) Or(d ExecutePaymentReq3PayType) ExecutePaymentReq3PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag returns new OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag with value set to v.
func NewOptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag(v GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag {
	return OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag is optional GenerateBarcodeOfPaymentOKCancelOverpaymentFlag.
type OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag struct {
	Value GenerateBarcodeOfPaymentOKCancelOverpaymentFlag
	Set   bool
}

// IsSet returns true if OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag was set.
func (o OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Reset() {
	var v GenerateBarcodeOfPaymentOKCancelOverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) SetTo(v GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Get() (v GenerateBarcodeOfPaymentOKCancelOverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Or(d GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) GenerateBarcodeOfPaymentOKCancelOverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenerateBarcodeOfPaymentOKOverpaymentFlag returns new OptGenerateBarcodeOfPaymentOKOverpaymentFlag with value set to v.
func NewOptGenerateBarcodeOfPaymentOKOverpaymentFlag(v GenerateBarcodeOfPaymentOKOverpaymentFlag) OptGenerateBarcodeOfPaymentOKOverpaymentFlag {
	return OptGenerateBarcodeOfPaymentOKOverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptGenerateBarcodeOfPaymentOKOverpaymentFlag is optional GenerateBarcodeOfPaymentOKOverpaymentFlag.
type OptGenerateBarcodeOfPaymentOKOverpaymentFlag struct {
	Value GenerateBarcodeOfPaymentOKOverpaymentFlag
	Set   bool
}

// IsSet returns true if OptGenerateBarcodeOfPaymentOKOverpaymentFlag was set.
func (o OptGenerateBarcodeOfPaymentOKOverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenerateBarcodeOfPaymentOKOverpaymentFlag) Reset() {
	var v GenerateBarcodeOfPaymentOKOverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenerateBarcodeOfPaymentOKOverpaymentFlag) SetTo(v GenerateBarcodeOfPaymentOKOverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenerateBarcodeOfPaymentOKOverpaymentFlag) Get() (v GenerateBarcodeOfPaymentOKOverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenerateBarcodeOfPaymentOKOverpaymentFlag) Or(d GenerateBarcodeOfPaymentOKOverpaymentFlag) GenerateBarcodeOfPaymentOKOverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenerateBarcodeOfPaymentOKPayType returns new OptGenerateBarcodeOfPaymentOKPayType with value set to v.
func NewOptGenerateBarcodeOfPaymentOKPayType(v GenerateBarcodeOfPaymentOKPayType) OptGenerateBarcodeOfPaymentOKPayType {
	return OptGenerateBarcodeOfPaymentOKPayType{
		Value: v,
		Set:   true,
	}
}

// OptGenerateBarcodeOfPaymentOKPayType is optional GenerateBarcodeOfPaymentOKPayType.
type OptGenerateBarcodeOfPaymentOKPayType struct {
	Value GenerateBarcodeOfPaymentOKPayType
	Set   bool
}

// IsSet returns true if OptGenerateBarcodeOfPaymentOKPayType was set.
func (o OptGenerateBarcodeOfPaymentOKPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenerateBarcodeOfPaymentOKPayType) Reset() {
	var v GenerateBarcodeOfPaymentOKPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenerateBarcodeOfPaymentOKPayType) SetTo(v GenerateBarcodeOfPaymentOKPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenerateBarcodeOfPaymentOKPayType) Get() (v GenerateBarcodeOfPaymentOKPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenerateBarcodeOfPaymentOKPayType) Or(d GenerateBarcodeOfPaymentOKPayType) GenerateBarcodeOfPaymentOKPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenerateBarcodeOfPaymentOKResult returns new OptGenerateBarcodeOfPaymentOKResult with value set to v.
func NewOptGenerateBarcodeOfPaymentOKResult(v GenerateBarcodeOfPaymentOKResult) OptGenerateBarcodeOfPaymentOKResult {
	return OptGenerateBarcodeOfPaymentOKResult{
		Value: v,
		Set:   true,
	}
}

// OptGenerateBarcodeOfPaymentOKResult is optional GenerateBarcodeOfPaymentOKResult.
type OptGenerateBarcodeOfPaymentOKResult struct {
	Value GenerateBarcodeOfPaymentOKResult
	Set   bool
}

// IsSet returns true if OptGenerateBarcodeOfPaymentOKResult was set.
func (o OptGenerateBarcodeOfPaymentOKResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenerateBarcodeOfPaymentOKResult) Reset() {
	var v GenerateBarcodeOfPaymentOKResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenerateBarcodeOfPaymentOKResult) SetTo(v GenerateBarcodeOfPaymentOKResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenerateBarcodeOfPaymentOKResult) Get() (v GenerateBarcodeOfPaymentOKResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenerateBarcodeOfPaymentOKResult) Or(d GenerateBarcodeOfPaymentOKResult) GenerateBarcodeOfPaymentOKResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenerateBarcodeOfPaymentOKStatus returns new OptGenerateBarcodeOfPaymentOKStatus with value set to v.
func NewOptGenerateBarcodeOfPaymentOKStatus(v GenerateBarcodeOfPaymentOKStatus) OptGenerateBarcodeOfPaymentOKStatus {
	return OptGenerateBarcodeOfPaymentOKStatus{
		Value: v,
		Set:   true,
	}
}

// OptGenerateBarcodeOfPaymentOKStatus is optional GenerateBarcodeOfPaymentOKStatus.
type OptGenerateBarcodeOfPaymentOKStatus struct {
	Value GenerateBarcodeOfPaymentOKStatus
	Set   bool
}

// IsSet returns true if OptGenerateBarcodeOfPaymentOKStatus was set.
func (o OptGenerateBarcodeOfPaymentOKStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenerateBarcodeOfPaymentOKStatus) Reset() {
	var v GenerateBarcodeOfPaymentOKStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenerateBarcodeOfPaymentOKStatus) SetTo(v GenerateBarcodeOfPaymentOKStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenerateBarcodeOfPaymentOKStatus) Get() (v GenerateBarcodeOfPaymentOKStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenerateBarcodeOfPaymentOKStatus) Or(d GenerateBarcodeOfPaymentOKStatus) GenerateBarcodeOfPaymentOKStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAccountDetailApplyType returns new OptNilAccountDetailApplyType with value set to v.
func NewOptNilAccountDetailApplyType(v AccountDetailApplyType) OptNilAccountDetailApplyType {
	return OptNilAccountDetailApplyType{
		Value: v,
		Set:   true,
	}
}

// OptNilAccountDetailApplyType is optional nullable AccountDetailApplyType.
type OptNilAccountDetailApplyType struct {
	Value AccountDetailApplyType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAccountDetailApplyType was set.
func (o OptNilAccountDetailApplyType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAccountDetailApplyType) Reset() {
	var v AccountDetailApplyType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAccountDetailApplyType) SetTo(v AccountDetailApplyType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAccountDetailApplyType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAccountDetailApplyType) SetToNull() {
	o.Set = true
	o.Null = true
	var v AccountDetailApplyType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAccountDetailApplyType) Get() (v AccountDetailApplyType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAccountDetailApplyType) Or(d AccountDetailApplyType) AccountDetailApplyType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAccountDetailApplyTypeForPlatformFee returns new OptNilAccountDetailApplyTypeForPlatformFee with value set to v.
func NewOptNilAccountDetailApplyTypeForPlatformFee(v AccountDetailApplyTypeForPlatformFee) OptNilAccountDetailApplyTypeForPlatformFee {
	return OptNilAccountDetailApplyTypeForPlatformFee{
		Value: v,
		Set:   true,
	}
}

// OptNilAccountDetailApplyTypeForPlatformFee is optional nullable AccountDetailApplyTypeForPlatformFee.
type OptNilAccountDetailApplyTypeForPlatformFee struct {
	Value AccountDetailApplyTypeForPlatformFee
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAccountDetailApplyTypeForPlatformFee was set.
func (o OptNilAccountDetailApplyTypeForPlatformFee) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAccountDetailApplyTypeForPlatformFee) Reset() {
	var v AccountDetailApplyTypeForPlatformFee
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAccountDetailApplyTypeForPlatformFee) SetTo(v AccountDetailApplyTypeForPlatformFee) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAccountDetailApplyTypeForPlatformFee) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAccountDetailApplyTypeForPlatformFee) SetToNull() {
	o.Set = true
	o.Null = true
	var v AccountDetailApplyTypeForPlatformFee
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAccountDetailApplyTypeForPlatformFee) Get() (v AccountDetailApplyTypeForPlatformFee, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAccountDetailApplyTypeForPlatformFee) Or(d AccountDetailApplyTypeForPlatformFee) AccountDetailApplyTypeForPlatformFee {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuthorizePaymentOKBrand returns new OptNilAuthorizePaymentOKBrand with value set to v.
func NewOptNilAuthorizePaymentOKBrand(v AuthorizePaymentOKBrand) OptNilAuthorizePaymentOKBrand {
	return OptNilAuthorizePaymentOKBrand{
		Value: v,
		Set:   true,
	}
}

// OptNilAuthorizePaymentOKBrand is optional nullable AuthorizePaymentOKBrand.
type OptNilAuthorizePaymentOKBrand struct {
	Value AuthorizePaymentOKBrand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAuthorizePaymentOKBrand was set.
func (o OptNilAuthorizePaymentOKBrand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuthorizePaymentOKBrand) Reset() {
	var v AuthorizePaymentOKBrand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAuthorizePaymentOKBrand) SetTo(v AuthorizePaymentOKBrand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAuthorizePaymentOKBrand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAuthorizePaymentOKBrand) SetToNull() {
	o.Set = true
	o.Null = true
	var v AuthorizePaymentOKBrand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuthorizePaymentOKBrand) Get() (v AuthorizePaymentOKBrand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuthorizePaymentOKBrand) Or(d AuthorizePaymentOKBrand) AuthorizePaymentOKBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuthorizePaymentOKPayTimes returns new OptNilAuthorizePaymentOKPayTimes with value set to v.
func NewOptNilAuthorizePaymentOKPayTimes(v AuthorizePaymentOKPayTimes) OptNilAuthorizePaymentOKPayTimes {
	return OptNilAuthorizePaymentOKPayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilAuthorizePaymentOKPayTimes is optional nullable AuthorizePaymentOKPayTimes.
type OptNilAuthorizePaymentOKPayTimes struct {
	Value AuthorizePaymentOKPayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAuthorizePaymentOKPayTimes was set.
func (o OptNilAuthorizePaymentOKPayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuthorizePaymentOKPayTimes) Reset() {
	var v AuthorizePaymentOKPayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAuthorizePaymentOKPayTimes) SetTo(v AuthorizePaymentOKPayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAuthorizePaymentOKPayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAuthorizePaymentOKPayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v AuthorizePaymentOKPayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuthorizePaymentOKPayTimes) Get() (v AuthorizePaymentOKPayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuthorizePaymentOKPayTimes) Or(d AuthorizePaymentOKPayTimes) AuthorizePaymentOKPayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuthorizePaymentOKTds2Status returns new OptNilAuthorizePaymentOKTds2Status with value set to v.
func NewOptNilAuthorizePaymentOKTds2Status(v AuthorizePaymentOKTds2Status) OptNilAuthorizePaymentOKTds2Status {
	return OptNilAuthorizePaymentOKTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilAuthorizePaymentOKTds2Status is optional nullable AuthorizePaymentOKTds2Status.
type OptNilAuthorizePaymentOKTds2Status struct {
	Value AuthorizePaymentOKTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAuthorizePaymentOKTds2Status was set.
func (o OptNilAuthorizePaymentOKTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuthorizePaymentOKTds2Status) Reset() {
	var v AuthorizePaymentOKTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAuthorizePaymentOKTds2Status) SetTo(v AuthorizePaymentOKTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAuthorizePaymentOKTds2Status) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAuthorizePaymentOKTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v AuthorizePaymentOKTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuthorizePaymentOKTds2Status) Get() (v AuthorizePaymentOKTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuthorizePaymentOKTds2Status) Or(d AuthorizePaymentOKTds2Status) AuthorizePaymentOKTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuthorizePaymentOKTds2Type returns new OptNilAuthorizePaymentOKTds2Type with value set to v.
func NewOptNilAuthorizePaymentOKTds2Type(v *NilAuthorizePaymentOKTds2Type) OptNilAuthorizePaymentOKTds2Type {
	return OptNilAuthorizePaymentOKTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilAuthorizePaymentOKTds2Type is optional *NilAuthorizePaymentOKTds2Type.
type OptNilAuthorizePaymentOKTds2Type struct {
	Value *NilAuthorizePaymentOKTds2Type
	Set   bool
}

// IsSet returns true if OptNilAuthorizePaymentOKTds2Type was set.
func (o OptNilAuthorizePaymentOKTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuthorizePaymentOKTds2Type) Reset() {
	var v *NilAuthorizePaymentOKTds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilAuthorizePaymentOKTds2Type) SetTo(v *NilAuthorizePaymentOKTds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuthorizePaymentOKTds2Type) Get() (v *NilAuthorizePaymentOKTds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuthorizePaymentOKTds2Type) Or(d *NilAuthorizePaymentOKTds2Type) *NilAuthorizePaymentOKTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuthorizePaymentOKTdsType returns new OptNilAuthorizePaymentOKTdsType with value set to v.
func NewOptNilAuthorizePaymentOKTdsType(v *NilAuthorizePaymentOKTdsType) OptNilAuthorizePaymentOKTdsType {
	return OptNilAuthorizePaymentOKTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilAuthorizePaymentOKTdsType is optional *NilAuthorizePaymentOKTdsType.
type OptNilAuthorizePaymentOKTdsType struct {
	Value *NilAuthorizePaymentOKTdsType
	Set   bool
}

// IsSet returns true if OptNilAuthorizePaymentOKTdsType was set.
func (o OptNilAuthorizePaymentOKTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuthorizePaymentOKTdsType) Reset() {
	var v *NilAuthorizePaymentOKTdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilAuthorizePaymentOKTdsType) SetTo(v *NilAuthorizePaymentOKTdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuthorizePaymentOKTdsType) Get() (v *NilAuthorizePaymentOKTdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuthorizePaymentOKTdsType) Or(d *NilAuthorizePaymentOKTdsType) *NilAuthorizePaymentOKTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAuthorizePaymentReqPayTimes returns new OptNilAuthorizePaymentReqPayTimes with value set to v.
func NewOptNilAuthorizePaymentReqPayTimes(v AuthorizePaymentReqPayTimes) OptNilAuthorizePaymentReqPayTimes {
	return OptNilAuthorizePaymentReqPayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilAuthorizePaymentReqPayTimes is optional nullable AuthorizePaymentReqPayTimes.
type OptNilAuthorizePaymentReqPayTimes struct {
	Value AuthorizePaymentReqPayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAuthorizePaymentReqPayTimes was set.
func (o OptNilAuthorizePaymentReqPayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAuthorizePaymentReqPayTimes) Reset() {
	var v AuthorizePaymentReqPayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAuthorizePaymentReqPayTimes) SetTo(v AuthorizePaymentReqPayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAuthorizePaymentReqPayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAuthorizePaymentReqPayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v AuthorizePaymentReqPayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAuthorizePaymentReqPayTimes) Get() (v AuthorizePaymentReqPayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAuthorizePaymentReqPayTimes) Or(d AuthorizePaymentReqPayTimes) AuthorizePaymentReqPayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK0Brand returns new OptNilCapturePaymentOK0Brand with value set to v.
func NewOptNilCapturePaymentOK0Brand(v CapturePaymentOK0Brand) OptNilCapturePaymentOK0Brand {
	return OptNilCapturePaymentOK0Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK0Brand is optional nullable CapturePaymentOK0Brand.
type OptNilCapturePaymentOK0Brand struct {
	Value CapturePaymentOK0Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapturePaymentOK0Brand was set.
func (o OptNilCapturePaymentOK0Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK0Brand) Reset() {
	var v CapturePaymentOK0Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK0Brand) SetTo(v CapturePaymentOK0Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapturePaymentOK0Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapturePaymentOK0Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v CapturePaymentOK0Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK0Brand) Get() (v CapturePaymentOK0Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK0Brand) Or(d CapturePaymentOK0Brand) CapturePaymentOK0Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK0PayTimes returns new OptNilCapturePaymentOK0PayTimes with value set to v.
func NewOptNilCapturePaymentOK0PayTimes(v CapturePaymentOK0PayTimes) OptNilCapturePaymentOK0PayTimes {
	return OptNilCapturePaymentOK0PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK0PayTimes is optional nullable CapturePaymentOK0PayTimes.
type OptNilCapturePaymentOK0PayTimes struct {
	Value CapturePaymentOK0PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapturePaymentOK0PayTimes was set.
func (o OptNilCapturePaymentOK0PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK0PayTimes) Reset() {
	var v CapturePaymentOK0PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK0PayTimes) SetTo(v CapturePaymentOK0PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapturePaymentOK0PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapturePaymentOK0PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v CapturePaymentOK0PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK0PayTimes) Get() (v CapturePaymentOK0PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK0PayTimes) Or(d CapturePaymentOK0PayTimes) CapturePaymentOK0PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK0Tds2Status returns new OptNilCapturePaymentOK0Tds2Status with value set to v.
func NewOptNilCapturePaymentOK0Tds2Status(v CapturePaymentOK0Tds2Status) OptNilCapturePaymentOK0Tds2Status {
	return OptNilCapturePaymentOK0Tds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK0Tds2Status is optional nullable CapturePaymentOK0Tds2Status.
type OptNilCapturePaymentOK0Tds2Status struct {
	Value CapturePaymentOK0Tds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapturePaymentOK0Tds2Status was set.
func (o OptNilCapturePaymentOK0Tds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK0Tds2Status) Reset() {
	var v CapturePaymentOK0Tds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK0Tds2Status) SetTo(v CapturePaymentOK0Tds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapturePaymentOK0Tds2Status) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapturePaymentOK0Tds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v CapturePaymentOK0Tds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK0Tds2Status) Get() (v CapturePaymentOK0Tds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK0Tds2Status) Or(d CapturePaymentOK0Tds2Status) CapturePaymentOK0Tds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK0Tds2Type returns new OptNilCapturePaymentOK0Tds2Type with value set to v.
func NewOptNilCapturePaymentOK0Tds2Type(v *NilCapturePaymentOK0Tds2Type) OptNilCapturePaymentOK0Tds2Type {
	return OptNilCapturePaymentOK0Tds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK0Tds2Type is optional *NilCapturePaymentOK0Tds2Type.
type OptNilCapturePaymentOK0Tds2Type struct {
	Value *NilCapturePaymentOK0Tds2Type
	Set   bool
}

// IsSet returns true if OptNilCapturePaymentOK0Tds2Type was set.
func (o OptNilCapturePaymentOK0Tds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK0Tds2Type) Reset() {
	var v *NilCapturePaymentOK0Tds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK0Tds2Type) SetTo(v *NilCapturePaymentOK0Tds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK0Tds2Type) Get() (v *NilCapturePaymentOK0Tds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK0Tds2Type) Or(d *NilCapturePaymentOK0Tds2Type) *NilCapturePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK0TdsType returns new OptNilCapturePaymentOK0TdsType with value set to v.
func NewOptNilCapturePaymentOK0TdsType(v *NilCapturePaymentOK0TdsType) OptNilCapturePaymentOK0TdsType {
	return OptNilCapturePaymentOK0TdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK0TdsType is optional *NilCapturePaymentOK0TdsType.
type OptNilCapturePaymentOK0TdsType struct {
	Value *NilCapturePaymentOK0TdsType
	Set   bool
}

// IsSet returns true if OptNilCapturePaymentOK0TdsType was set.
func (o OptNilCapturePaymentOK0TdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK0TdsType) Reset() {
	var v *NilCapturePaymentOK0TdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK0TdsType) SetTo(v *NilCapturePaymentOK0TdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK0TdsType) Get() (v *NilCapturePaymentOK0TdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK0TdsType) Or(d *NilCapturePaymentOK0TdsType) *NilCapturePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK1Brand returns new OptNilCapturePaymentOK1Brand with value set to v.
func NewOptNilCapturePaymentOK1Brand(v CapturePaymentOK1Brand) OptNilCapturePaymentOK1Brand {
	return OptNilCapturePaymentOK1Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK1Brand is optional nullable CapturePaymentOK1Brand.
type OptNilCapturePaymentOK1Brand struct {
	Value CapturePaymentOK1Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapturePaymentOK1Brand was set.
func (o OptNilCapturePaymentOK1Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK1Brand) Reset() {
	var v CapturePaymentOK1Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK1Brand) SetTo(v CapturePaymentOK1Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapturePaymentOK1Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapturePaymentOK1Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v CapturePaymentOK1Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK1Brand) Get() (v CapturePaymentOK1Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK1Brand) Or(d CapturePaymentOK1Brand) CapturePaymentOK1Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK1PayTimes returns new OptNilCapturePaymentOK1PayTimes with value set to v.
func NewOptNilCapturePaymentOK1PayTimes(v CapturePaymentOK1PayTimes) OptNilCapturePaymentOK1PayTimes {
	return OptNilCapturePaymentOK1PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK1PayTimes is optional nullable CapturePaymentOK1PayTimes.
type OptNilCapturePaymentOK1PayTimes struct {
	Value CapturePaymentOK1PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapturePaymentOK1PayTimes was set.
func (o OptNilCapturePaymentOK1PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK1PayTimes) Reset() {
	var v CapturePaymentOK1PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK1PayTimes) SetTo(v CapturePaymentOK1PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapturePaymentOK1PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapturePaymentOK1PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v CapturePaymentOK1PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK1PayTimes) Get() (v CapturePaymentOK1PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK1PayTimes) Or(d CapturePaymentOK1PayTimes) CapturePaymentOK1PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentOK2RedirectType returns new OptNilCapturePaymentOK2RedirectType with value set to v.
func NewOptNilCapturePaymentOK2RedirectType(v CapturePaymentOK2RedirectType) OptNilCapturePaymentOK2RedirectType {
	return OptNilCapturePaymentOK2RedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentOK2RedirectType is optional nullable CapturePaymentOK2RedirectType.
type OptNilCapturePaymentOK2RedirectType struct {
	Value CapturePaymentOK2RedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapturePaymentOK2RedirectType was set.
func (o OptNilCapturePaymentOK2RedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentOK2RedirectType) Reset() {
	var v CapturePaymentOK2RedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentOK2RedirectType) SetTo(v CapturePaymentOK2RedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapturePaymentOK2RedirectType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapturePaymentOK2RedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v CapturePaymentOK2RedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentOK2RedirectType) Get() (v CapturePaymentOK2RedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentOK2RedirectType) Or(d CapturePaymentOK2RedirectType) CapturePaymentOK2RedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCapturePaymentReq0PayTimes returns new OptNilCapturePaymentReq0PayTimes with value set to v.
func NewOptNilCapturePaymentReq0PayTimes(v CapturePaymentReq0PayTimes) OptNilCapturePaymentReq0PayTimes {
	return OptNilCapturePaymentReq0PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilCapturePaymentReq0PayTimes is optional nullable CapturePaymentReq0PayTimes.
type OptNilCapturePaymentReq0PayTimes struct {
	Value CapturePaymentReq0PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCapturePaymentReq0PayTimes was set.
func (o OptNilCapturePaymentReq0PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCapturePaymentReq0PayTimes) Reset() {
	var v CapturePaymentReq0PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCapturePaymentReq0PayTimes) SetTo(v CapturePaymentReq0PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCapturePaymentReq0PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCapturePaymentReq0PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v CapturePaymentReq0PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCapturePaymentReq0PayTimes) Get() (v CapturePaymentReq0PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCapturePaymentReq0PayTimes) Or(d CapturePaymentReq0PayTimes) CapturePaymentReq0PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilChangeAmountOfPaymentOK0Brand returns new OptNilChangeAmountOfPaymentOK0Brand with value set to v.
func NewOptNilChangeAmountOfPaymentOK0Brand(v ChangeAmountOfPaymentOK0Brand) OptNilChangeAmountOfPaymentOK0Brand {
	return OptNilChangeAmountOfPaymentOK0Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilChangeAmountOfPaymentOK0Brand is optional nullable ChangeAmountOfPaymentOK0Brand.
type OptNilChangeAmountOfPaymentOK0Brand struct {
	Value ChangeAmountOfPaymentOK0Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilChangeAmountOfPaymentOK0Brand was set.
func (o OptNilChangeAmountOfPaymentOK0Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilChangeAmountOfPaymentOK0Brand) Reset() {
	var v ChangeAmountOfPaymentOK0Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilChangeAmountOfPaymentOK0Brand) SetTo(v ChangeAmountOfPaymentOK0Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilChangeAmountOfPaymentOK0Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilChangeAmountOfPaymentOK0Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v ChangeAmountOfPaymentOK0Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilChangeAmountOfPaymentOK0Brand) Get() (v ChangeAmountOfPaymentOK0Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilChangeAmountOfPaymentOK0Brand) Or(d ChangeAmountOfPaymentOK0Brand) ChangeAmountOfPaymentOK0Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilChangeAmountOfPaymentOK0PayTimes returns new OptNilChangeAmountOfPaymentOK0PayTimes with value set to v.
func NewOptNilChangeAmountOfPaymentOK0PayTimes(v ChangeAmountOfPaymentOK0PayTimes) OptNilChangeAmountOfPaymentOK0PayTimes {
	return OptNilChangeAmountOfPaymentOK0PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilChangeAmountOfPaymentOK0PayTimes is optional nullable ChangeAmountOfPaymentOK0PayTimes.
type OptNilChangeAmountOfPaymentOK0PayTimes struct {
	Value ChangeAmountOfPaymentOK0PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilChangeAmountOfPaymentOK0PayTimes was set.
func (o OptNilChangeAmountOfPaymentOK0PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilChangeAmountOfPaymentOK0PayTimes) Reset() {
	var v ChangeAmountOfPaymentOK0PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilChangeAmountOfPaymentOK0PayTimes) SetTo(v ChangeAmountOfPaymentOK0PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilChangeAmountOfPaymentOK0PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilChangeAmountOfPaymentOK0PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v ChangeAmountOfPaymentOK0PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilChangeAmountOfPaymentOK0PayTimes) Get() (v ChangeAmountOfPaymentOK0PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilChangeAmountOfPaymentOK0PayTimes) Or(d ChangeAmountOfPaymentOK0PayTimes) ChangeAmountOfPaymentOK0PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilChangeAmountOfPaymentOK0Tds2Status returns new OptNilChangeAmountOfPaymentOK0Tds2Status with value set to v.
func NewOptNilChangeAmountOfPaymentOK0Tds2Status(v ChangeAmountOfPaymentOK0Tds2Status) OptNilChangeAmountOfPaymentOK0Tds2Status {
	return OptNilChangeAmountOfPaymentOK0Tds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilChangeAmountOfPaymentOK0Tds2Status is optional nullable ChangeAmountOfPaymentOK0Tds2Status.
type OptNilChangeAmountOfPaymentOK0Tds2Status struct {
	Value ChangeAmountOfPaymentOK0Tds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilChangeAmountOfPaymentOK0Tds2Status was set.
func (o OptNilChangeAmountOfPaymentOK0Tds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilChangeAmountOfPaymentOK0Tds2Status) Reset() {
	var v ChangeAmountOfPaymentOK0Tds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilChangeAmountOfPaymentOK0Tds2Status) SetTo(v ChangeAmountOfPaymentOK0Tds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilChangeAmountOfPaymentOK0Tds2Status) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilChangeAmountOfPaymentOK0Tds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v ChangeAmountOfPaymentOK0Tds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilChangeAmountOfPaymentOK0Tds2Status) Get() (v ChangeAmountOfPaymentOK0Tds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilChangeAmountOfPaymentOK0Tds2Status) Or(d ChangeAmountOfPaymentOK0Tds2Status) ChangeAmountOfPaymentOK0Tds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilChangeAmountOfPaymentOK0Tds2Type returns new OptNilChangeAmountOfPaymentOK0Tds2Type with value set to v.
func NewOptNilChangeAmountOfPaymentOK0Tds2Type(v *NilChangeAmountOfPaymentOK0Tds2Type) OptNilChangeAmountOfPaymentOK0Tds2Type {
	return OptNilChangeAmountOfPaymentOK0Tds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilChangeAmountOfPaymentOK0Tds2Type is optional *NilChangeAmountOfPaymentOK0Tds2Type.
type OptNilChangeAmountOfPaymentOK0Tds2Type struct {
	Value *NilChangeAmountOfPaymentOK0Tds2Type
	Set   bool
}

// IsSet returns true if OptNilChangeAmountOfPaymentOK0Tds2Type was set.
func (o OptNilChangeAmountOfPaymentOK0Tds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilChangeAmountOfPaymentOK0Tds2Type) Reset() {
	var v *NilChangeAmountOfPaymentOK0Tds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilChangeAmountOfPaymentOK0Tds2Type) SetTo(v *NilChangeAmountOfPaymentOK0Tds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilChangeAmountOfPaymentOK0Tds2Type) Get() (v *NilChangeAmountOfPaymentOK0Tds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilChangeAmountOfPaymentOK0Tds2Type) Or(d *NilChangeAmountOfPaymentOK0Tds2Type) *NilChangeAmountOfPaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilChangeAmountOfPaymentOK0TdsType returns new OptNilChangeAmountOfPaymentOK0TdsType with value set to v.
func NewOptNilChangeAmountOfPaymentOK0TdsType(v *NilChangeAmountOfPaymentOK0TdsType) OptNilChangeAmountOfPaymentOK0TdsType {
	return OptNilChangeAmountOfPaymentOK0TdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilChangeAmountOfPaymentOK0TdsType is optional *NilChangeAmountOfPaymentOK0TdsType.
type OptNilChangeAmountOfPaymentOK0TdsType struct {
	Value *NilChangeAmountOfPaymentOK0TdsType
	Set   bool
}

// IsSet returns true if OptNilChangeAmountOfPaymentOK0TdsType was set.
func (o OptNilChangeAmountOfPaymentOK0TdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilChangeAmountOfPaymentOK0TdsType) Reset() {
	var v *NilChangeAmountOfPaymentOK0TdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilChangeAmountOfPaymentOK0TdsType) SetTo(v *NilChangeAmountOfPaymentOK0TdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilChangeAmountOfPaymentOK0TdsType) Get() (v *NilChangeAmountOfPaymentOK0TdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilChangeAmountOfPaymentOK0TdsType) Or(d *NilChangeAmountOfPaymentOK0TdsType) *NilChangeAmountOfPaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilChangeAmountOfPaymentOK1RedirectType returns new OptNilChangeAmountOfPaymentOK1RedirectType with value set to v.
func NewOptNilChangeAmountOfPaymentOK1RedirectType(v ChangeAmountOfPaymentOK1RedirectType) OptNilChangeAmountOfPaymentOK1RedirectType {
	return OptNilChangeAmountOfPaymentOK1RedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilChangeAmountOfPaymentOK1RedirectType is optional nullable ChangeAmountOfPaymentOK1RedirectType.
type OptNilChangeAmountOfPaymentOK1RedirectType struct {
	Value ChangeAmountOfPaymentOK1RedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilChangeAmountOfPaymentOK1RedirectType was set.
func (o OptNilChangeAmountOfPaymentOK1RedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilChangeAmountOfPaymentOK1RedirectType) Reset() {
	var v ChangeAmountOfPaymentOK1RedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilChangeAmountOfPaymentOK1RedirectType) SetTo(v ChangeAmountOfPaymentOK1RedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilChangeAmountOfPaymentOK1RedirectType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilChangeAmountOfPaymentOK1RedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v ChangeAmountOfPaymentOK1RedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilChangeAmountOfPaymentOK1RedirectType) Get() (v ChangeAmountOfPaymentOK1RedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilChangeAmountOfPaymentOK1RedirectType) Or(d ChangeAmountOfPaymentOK1RedirectType) ChangeAmountOfPaymentOK1RedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilChangeAmountOfPaymentOK2ResultCode returns new OptNilChangeAmountOfPaymentOK2ResultCode with value set to v.
func NewOptNilChangeAmountOfPaymentOK2ResultCode(v ChangeAmountOfPaymentOK2ResultCode) OptNilChangeAmountOfPaymentOK2ResultCode {
	return OptNilChangeAmountOfPaymentOK2ResultCode{
		Value: v,
		Set:   true,
	}
}

// OptNilChangeAmountOfPaymentOK2ResultCode is optional nullable ChangeAmountOfPaymentOK2ResultCode.
type OptNilChangeAmountOfPaymentOK2ResultCode struct {
	Value ChangeAmountOfPaymentOK2ResultCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilChangeAmountOfPaymentOK2ResultCode was set.
func (o OptNilChangeAmountOfPaymentOK2ResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilChangeAmountOfPaymentOK2ResultCode) Reset() {
	var v ChangeAmountOfPaymentOK2ResultCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilChangeAmountOfPaymentOK2ResultCode) SetTo(v ChangeAmountOfPaymentOK2ResultCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilChangeAmountOfPaymentOK2ResultCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilChangeAmountOfPaymentOK2ResultCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v ChangeAmountOfPaymentOK2ResultCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilChangeAmountOfPaymentOK2ResultCode) Get() (v ChangeAmountOfPaymentOK2ResultCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilChangeAmountOfPaymentOK2ResultCode) Or(d ChangeAmountOfPaymentOK2ResultCode) ChangeAmountOfPaymentOK2ResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID returns new OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID with value set to v.
func NewOptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID(v ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID {
	return OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID{
		Value: v,
		Set:   true,
	}
}

// OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID is optional nullable ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID.
type OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID struct {
	Value ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID was set.
func (o OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Reset() {
	var v ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) SetTo(v ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Get() (v ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Or(d ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContractsRetrievingResponseSalesDepositStatusCode returns new OptNilContractsRetrievingResponseSalesDepositStatusCode with value set to v.
func NewOptNilContractsRetrievingResponseSalesDepositStatusCode(v ContractsRetrievingResponseSalesDepositStatusCode) OptNilContractsRetrievingResponseSalesDepositStatusCode {
	return OptNilContractsRetrievingResponseSalesDepositStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptNilContractsRetrievingResponseSalesDepositStatusCode is optional nullable ContractsRetrievingResponseSalesDepositStatusCode.
type OptNilContractsRetrievingResponseSalesDepositStatusCode struct {
	Value ContractsRetrievingResponseSalesDepositStatusCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilContractsRetrievingResponseSalesDepositStatusCode was set.
func (o OptNilContractsRetrievingResponseSalesDepositStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContractsRetrievingResponseSalesDepositStatusCode) Reset() {
	var v ContractsRetrievingResponseSalesDepositStatusCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilContractsRetrievingResponseSalesDepositStatusCode) SetTo(v ContractsRetrievingResponseSalesDepositStatusCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilContractsRetrievingResponseSalesDepositStatusCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilContractsRetrievingResponseSalesDepositStatusCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v ContractsRetrievingResponseSalesDepositStatusCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContractsRetrievingResponseSalesDepositStatusCode) Get() (v ContractsRetrievingResponseSalesDepositStatusCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContractsRetrievingResponseSalesDepositStatusCode) Or(d ContractsRetrievingResponseSalesDepositStatusCode) ContractsRetrievingResponseSalesDepositStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilContractsRetrievingResponseShopType returns new OptNilContractsRetrievingResponseShopType with value set to v.
func NewOptNilContractsRetrievingResponseShopType(v *NilContractsRetrievingResponseShopType) OptNilContractsRetrievingResponseShopType {
	return OptNilContractsRetrievingResponseShopType{
		Value: v,
		Set:   true,
	}
}

// OptNilContractsRetrievingResponseShopType is optional *NilContractsRetrievingResponseShopType.
type OptNilContractsRetrievingResponseShopType struct {
	Value *NilContractsRetrievingResponseShopType
	Set   bool
}

// IsSet returns true if OptNilContractsRetrievingResponseShopType was set.
func (o OptNilContractsRetrievingResponseShopType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilContractsRetrievingResponseShopType) Reset() {
	var v *NilContractsRetrievingResponseShopType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilContractsRetrievingResponseShopType) SetTo(v *NilContractsRetrievingResponseShopType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilContractsRetrievingResponseShopType) Get() (v *NilContractsRetrievingResponseShopType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilContractsRetrievingResponseShopType) Or(d *NilContractsRetrievingResponseShopType) *NilContractsRetrievingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK0Brand returns new OptNilCreatePaymentOK0Brand with value set to v.
func NewOptNilCreatePaymentOK0Brand(v CreatePaymentOK0Brand) OptNilCreatePaymentOK0Brand {
	return OptNilCreatePaymentOK0Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK0Brand is optional nullable CreatePaymentOK0Brand.
type OptNilCreatePaymentOK0Brand struct {
	Value CreatePaymentOK0Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK0Brand was set.
func (o OptNilCreatePaymentOK0Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK0Brand) Reset() {
	var v CreatePaymentOK0Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK0Brand) SetTo(v CreatePaymentOK0Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK0Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK0Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK0Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK0Brand) Get() (v CreatePaymentOK0Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK0Brand) Or(d CreatePaymentOK0Brand) CreatePaymentOK0Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK0PayTimes returns new OptNilCreatePaymentOK0PayTimes with value set to v.
func NewOptNilCreatePaymentOK0PayTimes(v CreatePaymentOK0PayTimes) OptNilCreatePaymentOK0PayTimes {
	return OptNilCreatePaymentOK0PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK0PayTimes is optional nullable CreatePaymentOK0PayTimes.
type OptNilCreatePaymentOK0PayTimes struct {
	Value CreatePaymentOK0PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK0PayTimes was set.
func (o OptNilCreatePaymentOK0PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK0PayTimes) Reset() {
	var v CreatePaymentOK0PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK0PayTimes) SetTo(v CreatePaymentOK0PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK0PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK0PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK0PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK0PayTimes) Get() (v CreatePaymentOK0PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK0PayTimes) Or(d CreatePaymentOK0PayTimes) CreatePaymentOK0PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK0Tds2Status returns new OptNilCreatePaymentOK0Tds2Status with value set to v.
func NewOptNilCreatePaymentOK0Tds2Status(v CreatePaymentOK0Tds2Status) OptNilCreatePaymentOK0Tds2Status {
	return OptNilCreatePaymentOK0Tds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK0Tds2Status is optional nullable CreatePaymentOK0Tds2Status.
type OptNilCreatePaymentOK0Tds2Status struct {
	Value CreatePaymentOK0Tds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK0Tds2Status was set.
func (o OptNilCreatePaymentOK0Tds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK0Tds2Status) Reset() {
	var v CreatePaymentOK0Tds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK0Tds2Status) SetTo(v CreatePaymentOK0Tds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK0Tds2Status) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK0Tds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK0Tds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK0Tds2Status) Get() (v CreatePaymentOK0Tds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK0Tds2Status) Or(d CreatePaymentOK0Tds2Status) CreatePaymentOK0Tds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK0Tds2Type returns new OptNilCreatePaymentOK0Tds2Type with value set to v.
func NewOptNilCreatePaymentOK0Tds2Type(v *NilCreatePaymentOK0Tds2Type) OptNilCreatePaymentOK0Tds2Type {
	return OptNilCreatePaymentOK0Tds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK0Tds2Type is optional *NilCreatePaymentOK0Tds2Type.
type OptNilCreatePaymentOK0Tds2Type struct {
	Value *NilCreatePaymentOK0Tds2Type
	Set   bool
}

// IsSet returns true if OptNilCreatePaymentOK0Tds2Type was set.
func (o OptNilCreatePaymentOK0Tds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK0Tds2Type) Reset() {
	var v *NilCreatePaymentOK0Tds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK0Tds2Type) SetTo(v *NilCreatePaymentOK0Tds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK0Tds2Type) Get() (v *NilCreatePaymentOK0Tds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK0Tds2Type) Or(d *NilCreatePaymentOK0Tds2Type) *NilCreatePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK0TdsType returns new OptNilCreatePaymentOK0TdsType with value set to v.
func NewOptNilCreatePaymentOK0TdsType(v *NilCreatePaymentOK0TdsType) OptNilCreatePaymentOK0TdsType {
	return OptNilCreatePaymentOK0TdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK0TdsType is optional *NilCreatePaymentOK0TdsType.
type OptNilCreatePaymentOK0TdsType struct {
	Value *NilCreatePaymentOK0TdsType
	Set   bool
}

// IsSet returns true if OptNilCreatePaymentOK0TdsType was set.
func (o OptNilCreatePaymentOK0TdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK0TdsType) Reset() {
	var v *NilCreatePaymentOK0TdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK0TdsType) SetTo(v *NilCreatePaymentOK0TdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK0TdsType) Get() (v *NilCreatePaymentOK0TdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK0TdsType) Or(d *NilCreatePaymentOK0TdsType) *NilCreatePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK1Brand returns new OptNilCreatePaymentOK1Brand with value set to v.
func NewOptNilCreatePaymentOK1Brand(v CreatePaymentOK1Brand) OptNilCreatePaymentOK1Brand {
	return OptNilCreatePaymentOK1Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK1Brand is optional nullable CreatePaymentOK1Brand.
type OptNilCreatePaymentOK1Brand struct {
	Value CreatePaymentOK1Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK1Brand was set.
func (o OptNilCreatePaymentOK1Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK1Brand) Reset() {
	var v CreatePaymentOK1Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK1Brand) SetTo(v CreatePaymentOK1Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK1Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK1Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK1Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK1Brand) Get() (v CreatePaymentOK1Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK1Brand) Or(d CreatePaymentOK1Brand) CreatePaymentOK1Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK1PayTimes returns new OptNilCreatePaymentOK1PayTimes with value set to v.
func NewOptNilCreatePaymentOK1PayTimes(v CreatePaymentOK1PayTimes) OptNilCreatePaymentOK1PayTimes {
	return OptNilCreatePaymentOK1PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK1PayTimes is optional nullable CreatePaymentOK1PayTimes.
type OptNilCreatePaymentOK1PayTimes struct {
	Value CreatePaymentOK1PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK1PayTimes was set.
func (o OptNilCreatePaymentOK1PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK1PayTimes) Reset() {
	var v CreatePaymentOK1PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK1PayTimes) SetTo(v CreatePaymentOK1PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK1PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK1PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK1PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK1PayTimes) Get() (v CreatePaymentOK1PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK1PayTimes) Or(d CreatePaymentOK1PayTimes) CreatePaymentOK1PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK2BarcodeFormat returns new OptNilCreatePaymentOK2BarcodeFormat with value set to v.
func NewOptNilCreatePaymentOK2BarcodeFormat(v CreatePaymentOK2BarcodeFormat) OptNilCreatePaymentOK2BarcodeFormat {
	return OptNilCreatePaymentOK2BarcodeFormat{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK2BarcodeFormat is optional nullable CreatePaymentOK2BarcodeFormat.
type OptNilCreatePaymentOK2BarcodeFormat struct {
	Value CreatePaymentOK2BarcodeFormat
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK2BarcodeFormat was set.
func (o OptNilCreatePaymentOK2BarcodeFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK2BarcodeFormat) Reset() {
	var v CreatePaymentOK2BarcodeFormat
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK2BarcodeFormat) SetTo(v CreatePaymentOK2BarcodeFormat) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK2BarcodeFormat) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK2BarcodeFormat) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK2BarcodeFormat
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK2BarcodeFormat) Get() (v CreatePaymentOK2BarcodeFormat, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK2BarcodeFormat) Or(d CreatePaymentOK2BarcodeFormat) CreatePaymentOK2BarcodeFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK2KonbiniCode returns new OptNilCreatePaymentOK2KonbiniCode with value set to v.
func NewOptNilCreatePaymentOK2KonbiniCode(v CreatePaymentOK2KonbiniCode) OptNilCreatePaymentOK2KonbiniCode {
	return OptNilCreatePaymentOK2KonbiniCode{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK2KonbiniCode is optional nullable CreatePaymentOK2KonbiniCode.
type OptNilCreatePaymentOK2KonbiniCode struct {
	Value CreatePaymentOK2KonbiniCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK2KonbiniCode was set.
func (o OptNilCreatePaymentOK2KonbiniCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK2KonbiniCode) Reset() {
	var v CreatePaymentOK2KonbiniCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK2KonbiniCode) SetTo(v CreatePaymentOK2KonbiniCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK2KonbiniCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK2KonbiniCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK2KonbiniCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK2KonbiniCode) Get() (v CreatePaymentOK2KonbiniCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK2KonbiniCode) Or(d CreatePaymentOK2KonbiniCode) CreatePaymentOK2KonbiniCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK3RedirectType returns new OptNilCreatePaymentOK3RedirectType with value set to v.
func NewOptNilCreatePaymentOK3RedirectType(v CreatePaymentOK3RedirectType) OptNilCreatePaymentOK3RedirectType {
	return OptNilCreatePaymentOK3RedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK3RedirectType is optional nullable CreatePaymentOK3RedirectType.
type OptNilCreatePaymentOK3RedirectType struct {
	Value CreatePaymentOK3RedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK3RedirectType was set.
func (o OptNilCreatePaymentOK3RedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK3RedirectType) Reset() {
	var v CreatePaymentOK3RedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK3RedirectType) SetTo(v CreatePaymentOK3RedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK3RedirectType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK3RedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK3RedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK3RedirectType) Get() (v CreatePaymentOK3RedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK3RedirectType) Or(d CreatePaymentOK3RedirectType) CreatePaymentOK3RedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentOK4ResultCode returns new OptNilCreatePaymentOK4ResultCode with value set to v.
func NewOptNilCreatePaymentOK4ResultCode(v CreatePaymentOK4ResultCode) OptNilCreatePaymentOK4ResultCode {
	return OptNilCreatePaymentOK4ResultCode{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentOK4ResultCode is optional nullable CreatePaymentOK4ResultCode.
type OptNilCreatePaymentOK4ResultCode struct {
	Value CreatePaymentOK4ResultCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreatePaymentOK4ResultCode was set.
func (o OptNilCreatePaymentOK4ResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentOK4ResultCode) Reset() {
	var v CreatePaymentOK4ResultCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentOK4ResultCode) SetTo(v CreatePaymentOK4ResultCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreatePaymentOK4ResultCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreatePaymentOK4ResultCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreatePaymentOK4ResultCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentOK4ResultCode) Get() (v CreatePaymentOK4ResultCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentOK4ResultCode) Or(d CreatePaymentOK4ResultCode) CreatePaymentOK4ResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentReq0Tds2Type returns new OptNilCreatePaymentReq0Tds2Type with value set to v.
func NewOptNilCreatePaymentReq0Tds2Type(v *NilCreatePaymentReq0Tds2Type) OptNilCreatePaymentReq0Tds2Type {
	return OptNilCreatePaymentReq0Tds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentReq0Tds2Type is optional *NilCreatePaymentReq0Tds2Type.
type OptNilCreatePaymentReq0Tds2Type struct {
	Value *NilCreatePaymentReq0Tds2Type
	Set   bool
}

// IsSet returns true if OptNilCreatePaymentReq0Tds2Type was set.
func (o OptNilCreatePaymentReq0Tds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentReq0Tds2Type) Reset() {
	var v *NilCreatePaymentReq0Tds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentReq0Tds2Type) SetTo(v *NilCreatePaymentReq0Tds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentReq0Tds2Type) Get() (v *NilCreatePaymentReq0Tds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentReq0Tds2Type) Or(d *NilCreatePaymentReq0Tds2Type) *NilCreatePaymentReq0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreatePaymentReq0TdsType returns new OptNilCreatePaymentReq0TdsType with value set to v.
func NewOptNilCreatePaymentReq0TdsType(v *NilCreatePaymentReq0TdsType) OptNilCreatePaymentReq0TdsType {
	return OptNilCreatePaymentReq0TdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilCreatePaymentReq0TdsType is optional *NilCreatePaymentReq0TdsType.
type OptNilCreatePaymentReq0TdsType struct {
	Value *NilCreatePaymentReq0TdsType
	Set   bool
}

// IsSet returns true if OptNilCreatePaymentReq0TdsType was set.
func (o OptNilCreatePaymentReq0TdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreatePaymentReq0TdsType) Reset() {
	var v *NilCreatePaymentReq0TdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCreatePaymentReq0TdsType) SetTo(v *NilCreatePaymentReq0TdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreatePaymentReq0TdsType) Get() (v *NilCreatePaymentReq0TdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreatePaymentReq0TdsType) Or(d *NilCreatePaymentReq0TdsType) *NilCreatePaymentReq0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerCardRegistration returns new OptNilCustomerCardRegistration with value set to v.
func NewOptNilCustomerCardRegistration(v CustomerCardRegistration) OptNilCustomerCardRegistration {
	return OptNilCustomerCardRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerCardRegistration is optional nullable CustomerCardRegistration.
type OptNilCustomerCardRegistration struct {
	Value CustomerCardRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerCardRegistration was set.
func (o OptNilCustomerCardRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerCardRegistration) Reset() {
	var v CustomerCardRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerCardRegistration) SetTo(v CustomerCardRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerCardRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerCardRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerCardRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerCardRegistration) Get() (v CustomerCardRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerCardRegistration) Or(d CustomerCardRegistration) CustomerCardRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerCreatingResponseCardRegistration returns new OptNilCustomerCreatingResponseCardRegistration with value set to v.
func NewOptNilCustomerCreatingResponseCardRegistration(v CustomerCreatingResponseCardRegistration) OptNilCustomerCreatingResponseCardRegistration {
	return OptNilCustomerCreatingResponseCardRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerCreatingResponseCardRegistration is optional nullable CustomerCreatingResponseCardRegistration.
type OptNilCustomerCreatingResponseCardRegistration struct {
	Value CustomerCreatingResponseCardRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerCreatingResponseCardRegistration was set.
func (o OptNilCustomerCreatingResponseCardRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerCreatingResponseCardRegistration) Reset() {
	var v CustomerCreatingResponseCardRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerCreatingResponseCardRegistration) SetTo(v CustomerCreatingResponseCardRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerCreatingResponseCardRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerCreatingResponseCardRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerCreatingResponseCardRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerCreatingResponseCardRegistration) Get() (v CustomerCreatingResponseCardRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerCreatingResponseCardRegistration) Or(d CustomerCreatingResponseCardRegistration) CustomerCreatingResponseCardRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerCreatingResponseDirectdebitRegistration returns new OptNilCustomerCreatingResponseDirectdebitRegistration with value set to v.
func NewOptNilCustomerCreatingResponseDirectdebitRegistration(v CustomerCreatingResponseDirectdebitRegistration) OptNilCustomerCreatingResponseDirectdebitRegistration {
	return OptNilCustomerCreatingResponseDirectdebitRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerCreatingResponseDirectdebitRegistration is optional nullable CustomerCreatingResponseDirectdebitRegistration.
type OptNilCustomerCreatingResponseDirectdebitRegistration struct {
	Value CustomerCreatingResponseDirectdebitRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerCreatingResponseDirectdebitRegistration was set.
func (o OptNilCustomerCreatingResponseDirectdebitRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerCreatingResponseDirectdebitRegistration) Reset() {
	var v CustomerCreatingResponseDirectdebitRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerCreatingResponseDirectdebitRegistration) SetTo(v CustomerCreatingResponseDirectdebitRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerCreatingResponseDirectdebitRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerCreatingResponseDirectdebitRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerCreatingResponseDirectdebitRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerCreatingResponseDirectdebitRegistration) Get() (v CustomerCreatingResponseDirectdebitRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerCreatingResponseDirectdebitRegistration) Or(d CustomerCreatingResponseDirectdebitRegistration) CustomerCreatingResponseDirectdebitRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerDirectdebitRegistration returns new OptNilCustomerDirectdebitRegistration with value set to v.
func NewOptNilCustomerDirectdebitRegistration(v CustomerDirectdebitRegistration) OptNilCustomerDirectdebitRegistration {
	return OptNilCustomerDirectdebitRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerDirectdebitRegistration is optional nullable CustomerDirectdebitRegistration.
type OptNilCustomerDirectdebitRegistration struct {
	Value CustomerDirectdebitRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerDirectdebitRegistration was set.
func (o OptNilCustomerDirectdebitRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerDirectdebitRegistration) Reset() {
	var v CustomerDirectdebitRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerDirectdebitRegistration) SetTo(v CustomerDirectdebitRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerDirectdebitRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerDirectdebitRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerDirectdebitRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerDirectdebitRegistration) Get() (v CustomerDirectdebitRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerDirectdebitRegistration) Or(d CustomerDirectdebitRegistration) CustomerDirectdebitRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCard returns new OptNilCustomerPaymentMethodCreatingRequestCard with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCard(v CustomerPaymentMethodCreatingRequestCard) OptNilCustomerPaymentMethodCreatingRequestCard {
	return OptNilCustomerPaymentMethodCreatingRequestCard{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCard is optional nullable CustomerPaymentMethodCreatingRequestCard.
type OptNilCustomerPaymentMethodCreatingRequestCard struct {
	Value CustomerPaymentMethodCreatingRequestCard
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCard was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCard) Reset() {
	var v CustomerPaymentMethodCreatingRequestCard
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCard) SetTo(v CustomerPaymentMethodCreatingRequestCard) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingRequestCard) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingRequestCard) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestCard
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCard) Get() (v CustomerPaymentMethodCreatingRequestCard, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCard) Or(d CustomerPaymentMethodCreatingRequestCard) CustomerPaymentMethodCreatingRequestCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch(v *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch is optional *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe(v *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe is optional *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd(v *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd is optional *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd(v *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd is optional *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd(v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd is optional *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd(v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd is optional *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity(v *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity is optional *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod(v *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod is optional *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTds2Type returns new OptNilCustomerPaymentMethodCreatingRequestCardTds2Type with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTds2Type(v *NilCustomerPaymentMethodCreatingRequestCardTds2Type) OptNilCustomerPaymentMethodCreatingRequestCardTds2Type {
	return OptNilCustomerPaymentMethodCreatingRequestCardTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTds2Type is optional *NilCustomerPaymentMethodCreatingRequestCardTds2Type.
type OptNilCustomerPaymentMethodCreatingRequestCardTds2Type struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTds2Type
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTds2Type was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) Or(d *NilCustomerPaymentMethodCreatingRequestCardTds2Type) *NilCustomerPaymentMethodCreatingRequestCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestCardTdsType returns new OptNilCustomerPaymentMethodCreatingRequestCardTdsType with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestCardTdsType(v *NilCustomerPaymentMethodCreatingRequestCardTdsType) OptNilCustomerPaymentMethodCreatingRequestCardTdsType {
	return OptNilCustomerPaymentMethodCreatingRequestCardTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestCardTdsType is optional *NilCustomerPaymentMethodCreatingRequestCardTdsType.
type OptNilCustomerPaymentMethodCreatingRequestCardTdsType struct {
	Value *NilCustomerPaymentMethodCreatingRequestCardTdsType
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestCardTdsType was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTdsType) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestCardTdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTdsType) SetTo(v *NilCustomerPaymentMethodCreatingRequestCardTdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTdsType) Get() (v *NilCustomerPaymentMethodCreatingRequestCardTdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTdsType) Or(d *NilCustomerPaymentMethodCreatingRequestCardTdsType) *NilCustomerPaymentMethodCreatingRequestCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestDirectdebit returns new OptNilCustomerPaymentMethodCreatingRequestDirectdebit with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestDirectdebit(v CustomerPaymentMethodCreatingRequestDirectdebit) OptNilCustomerPaymentMethodCreatingRequestDirectdebit {
	return OptNilCustomerPaymentMethodCreatingRequestDirectdebit{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestDirectdebit is optional nullable CustomerPaymentMethodCreatingRequestDirectdebit.
type OptNilCustomerPaymentMethodCreatingRequestDirectdebit struct {
	Value CustomerPaymentMethodCreatingRequestDirectdebit
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestDirectdebit was set.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebit) Reset() {
	var v CustomerPaymentMethodCreatingRequestDirectdebit
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebit) SetTo(v CustomerPaymentMethodCreatingRequestDirectdebit) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebit) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingRequestDirectdebit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebit) Get() (v CustomerPaymentMethodCreatingRequestDirectdebit, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebit) Or(d CustomerPaymentMethodCreatingRequestDirectdebit) CustomerPaymentMethodCreatingRequestDirectdebit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType returns new OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType with value set to v.
func NewOptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType(v *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType {
	return OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType is optional *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType.
type OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType struct {
	Value *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType
	Set   bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType was set.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Reset() {
	var v *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) SetTo(v *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Get() (v *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Or(d *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingResponseCard returns new OptNilCustomerPaymentMethodCreatingResponseCard with value set to v.
func NewOptNilCustomerPaymentMethodCreatingResponseCard(v CustomerPaymentMethodCreatingResponseCard) OptNilCustomerPaymentMethodCreatingResponseCard {
	return OptNilCustomerPaymentMethodCreatingResponseCard{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingResponseCard is optional nullable CustomerPaymentMethodCreatingResponseCard.
type OptNilCustomerPaymentMethodCreatingResponseCard struct {
	Value CustomerPaymentMethodCreatingResponseCard
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingResponseCard was set.
func (o OptNilCustomerPaymentMethodCreatingResponseCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingResponseCard) Reset() {
	var v CustomerPaymentMethodCreatingResponseCard
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingResponseCard) SetTo(v CustomerPaymentMethodCreatingResponseCard) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingResponseCard) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingResponseCard) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseCard
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingResponseCard) Get() (v CustomerPaymentMethodCreatingResponseCard, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingResponseCard) Or(d CustomerPaymentMethodCreatingResponseCard) CustomerPaymentMethodCreatingResponseCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingResponseDirectdebit returns new OptNilCustomerPaymentMethodCreatingResponseDirectdebit with value set to v.
func NewOptNilCustomerPaymentMethodCreatingResponseDirectdebit(v CustomerPaymentMethodCreatingResponseDirectdebit) OptNilCustomerPaymentMethodCreatingResponseDirectdebit {
	return OptNilCustomerPaymentMethodCreatingResponseDirectdebit{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingResponseDirectdebit is optional nullable CustomerPaymentMethodCreatingResponseDirectdebit.
type OptNilCustomerPaymentMethodCreatingResponseDirectdebit struct {
	Value CustomerPaymentMethodCreatingResponseDirectdebit
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingResponseDirectdebit was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebit) Reset() {
	var v CustomerPaymentMethodCreatingResponseDirectdebit
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebit) SetTo(v CustomerPaymentMethodCreatingResponseDirectdebit) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebit) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseDirectdebit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebit) Get() (v CustomerPaymentMethodCreatingResponseDirectdebit, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebit) Or(d CustomerPaymentMethodCreatingResponseDirectdebit) CustomerPaymentMethodCreatingResponseDirectdebit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType returns new OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType with value set to v.
func NewOptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType(v CustomerPaymentMethodCreatingResponseDirectdebitAccountType) OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType {
	return OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType is optional nullable CustomerPaymentMethodCreatingResponseDirectdebitAccountType.
type OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType struct {
	Value CustomerPaymentMethodCreatingResponseDirectdebitAccountType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) Reset() {
	var v CustomerPaymentMethodCreatingResponseDirectdebitAccountType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) SetTo(v CustomerPaymentMethodCreatingResponseDirectdebitAccountType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseDirectdebitAccountType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) Get() (v CustomerPaymentMethodCreatingResponseDirectdebitAccountType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) Or(d CustomerPaymentMethodCreatingResponseDirectdebitAccountType) CustomerPaymentMethodCreatingResponseDirectdebitAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType returns new OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType with value set to v.
func NewOptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType(v CustomerPaymentMethodCreatingResponseDirectdebitBankType) OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType {
	return OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType is optional nullable CustomerPaymentMethodCreatingResponseDirectdebitBankType.
type OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType struct {
	Value CustomerPaymentMethodCreatingResponseDirectdebitBankType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) Reset() {
	var v CustomerPaymentMethodCreatingResponseDirectdebitBankType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) SetTo(v CustomerPaymentMethodCreatingResponseDirectdebitBankType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseDirectdebitBankType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) Get() (v CustomerPaymentMethodCreatingResponseDirectdebitBankType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) Or(d CustomerPaymentMethodCreatingResponseDirectdebitBankType) CustomerPaymentMethodCreatingResponseDirectdebitBankType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication returns new OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication with value set to v.
func NewOptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication(v CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication {
	return OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication is optional nullable CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication.
type OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication struct {
	Value CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Reset() {
	var v CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) SetTo(v CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Get() (v CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Or(d CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag returns new OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag with value set to v.
func NewOptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag(v CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag {
	return OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag is optional nullable CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag.
type OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag struct {
	Value CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag was set.
func (o OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Reset() {
	var v CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) SetTo(v CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Get() (v CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Or(d CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodRetrievingResponseCard returns new OptNilCustomerPaymentMethodRetrievingResponseCard with value set to v.
func NewOptNilCustomerPaymentMethodRetrievingResponseCard(v CustomerPaymentMethodRetrievingResponseCard) OptNilCustomerPaymentMethodRetrievingResponseCard {
	return OptNilCustomerPaymentMethodRetrievingResponseCard{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodRetrievingResponseCard is optional nullable CustomerPaymentMethodRetrievingResponseCard.
type OptNilCustomerPaymentMethodRetrievingResponseCard struct {
	Value CustomerPaymentMethodRetrievingResponseCard
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodRetrievingResponseCard was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodRetrievingResponseCard) Reset() {
	var v CustomerPaymentMethodRetrievingResponseCard
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodRetrievingResponseCard) SetTo(v CustomerPaymentMethodRetrievingResponseCard) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodRetrievingResponseCard) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodRetrievingResponseCard) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseCard
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseCard) Get() (v CustomerPaymentMethodRetrievingResponseCard, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodRetrievingResponseCard) Or(d CustomerPaymentMethodRetrievingResponseCard) CustomerPaymentMethodRetrievingResponseCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebit returns new OptNilCustomerPaymentMethodRetrievingResponseDirectdebit with value set to v.
func NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebit(v CustomerPaymentMethodRetrievingResponseDirectdebit) OptNilCustomerPaymentMethodRetrievingResponseDirectdebit {
	return OptNilCustomerPaymentMethodRetrievingResponseDirectdebit{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodRetrievingResponseDirectdebit is optional nullable CustomerPaymentMethodRetrievingResponseDirectdebit.
type OptNilCustomerPaymentMethodRetrievingResponseDirectdebit struct {
	Value CustomerPaymentMethodRetrievingResponseDirectdebit
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodRetrievingResponseDirectdebit was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) Reset() {
	var v CustomerPaymentMethodRetrievingResponseDirectdebit
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) SetTo(v CustomerPaymentMethodRetrievingResponseDirectdebit) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseDirectdebit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) Get() (v CustomerPaymentMethodRetrievingResponseDirectdebit, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) Or(d CustomerPaymentMethodRetrievingResponseDirectdebit) CustomerPaymentMethodRetrievingResponseDirectdebit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType returns new OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType with value set to v.
func NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType(v CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType {
	return OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType is optional nullable CustomerPaymentMethodRetrievingResponseDirectdebitAccountType.
type OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType struct {
	Value CustomerPaymentMethodRetrievingResponseDirectdebitAccountType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Reset() {
	var v CustomerPaymentMethodRetrievingResponseDirectdebitAccountType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) SetTo(v CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseDirectdebitAccountType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Get() (v CustomerPaymentMethodRetrievingResponseDirectdebitAccountType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Or(d CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) CustomerPaymentMethodRetrievingResponseDirectdebitAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType returns new OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType with value set to v.
func NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType(v CustomerPaymentMethodRetrievingResponseDirectdebitBankType) OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType {
	return OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType is optional nullable CustomerPaymentMethodRetrievingResponseDirectdebitBankType.
type OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType struct {
	Value CustomerPaymentMethodRetrievingResponseDirectdebitBankType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) Reset() {
	var v CustomerPaymentMethodRetrievingResponseDirectdebitBankType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) SetTo(v CustomerPaymentMethodRetrievingResponseDirectdebitBankType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseDirectdebitBankType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) Get() (v CustomerPaymentMethodRetrievingResponseDirectdebitBankType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) Or(d CustomerPaymentMethodRetrievingResponseDirectdebitBankType) CustomerPaymentMethodRetrievingResponseDirectdebitBankType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication returns new OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication with value set to v.
func NewOptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication(v CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication {
	return OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication is optional nullable CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication.
type OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication struct {
	Value CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Reset() {
	var v CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) SetTo(v CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Get() (v CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Or(d CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag returns new OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag with value set to v.
func NewOptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag(v CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag {
	return OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag is optional nullable CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag.
type OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag struct {
	Value CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Reset() {
	var v CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) SetTo(v CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Get() (v CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Or(d CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerRetrievingResponseCardRegistration returns new OptNilCustomerRetrievingResponseCardRegistration with value set to v.
func NewOptNilCustomerRetrievingResponseCardRegistration(v CustomerRetrievingResponseCardRegistration) OptNilCustomerRetrievingResponseCardRegistration {
	return OptNilCustomerRetrievingResponseCardRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerRetrievingResponseCardRegistration is optional nullable CustomerRetrievingResponseCardRegistration.
type OptNilCustomerRetrievingResponseCardRegistration struct {
	Value CustomerRetrievingResponseCardRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerRetrievingResponseCardRegistration was set.
func (o OptNilCustomerRetrievingResponseCardRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerRetrievingResponseCardRegistration) Reset() {
	var v CustomerRetrievingResponseCardRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerRetrievingResponseCardRegistration) SetTo(v CustomerRetrievingResponseCardRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerRetrievingResponseCardRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerRetrievingResponseCardRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerRetrievingResponseCardRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerRetrievingResponseCardRegistration) Get() (v CustomerRetrievingResponseCardRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerRetrievingResponseCardRegistration) Or(d CustomerRetrievingResponseCardRegistration) CustomerRetrievingResponseCardRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerRetrievingResponseDirectdebitRegistration returns new OptNilCustomerRetrievingResponseDirectdebitRegistration with value set to v.
func NewOptNilCustomerRetrievingResponseDirectdebitRegistration(v CustomerRetrievingResponseDirectdebitRegistration) OptNilCustomerRetrievingResponseDirectdebitRegistration {
	return OptNilCustomerRetrievingResponseDirectdebitRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerRetrievingResponseDirectdebitRegistration is optional nullable CustomerRetrievingResponseDirectdebitRegistration.
type OptNilCustomerRetrievingResponseDirectdebitRegistration struct {
	Value CustomerRetrievingResponseDirectdebitRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerRetrievingResponseDirectdebitRegistration was set.
func (o OptNilCustomerRetrievingResponseDirectdebitRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerRetrievingResponseDirectdebitRegistration) Reset() {
	var v CustomerRetrievingResponseDirectdebitRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerRetrievingResponseDirectdebitRegistration) SetTo(v CustomerRetrievingResponseDirectdebitRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerRetrievingResponseDirectdebitRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerRetrievingResponseDirectdebitRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerRetrievingResponseDirectdebitRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerRetrievingResponseDirectdebitRegistration) Get() (v CustomerRetrievingResponseDirectdebitRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerRetrievingResponseDirectdebitRegistration) Or(d CustomerRetrievingResponseDirectdebitRegistration) CustomerRetrievingResponseDirectdebitRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerUpdatingResponseCardRegistration returns new OptNilCustomerUpdatingResponseCardRegistration with value set to v.
func NewOptNilCustomerUpdatingResponseCardRegistration(v CustomerUpdatingResponseCardRegistration) OptNilCustomerUpdatingResponseCardRegistration {
	return OptNilCustomerUpdatingResponseCardRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerUpdatingResponseCardRegistration is optional nullable CustomerUpdatingResponseCardRegistration.
type OptNilCustomerUpdatingResponseCardRegistration struct {
	Value CustomerUpdatingResponseCardRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerUpdatingResponseCardRegistration was set.
func (o OptNilCustomerUpdatingResponseCardRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerUpdatingResponseCardRegistration) Reset() {
	var v CustomerUpdatingResponseCardRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerUpdatingResponseCardRegistration) SetTo(v CustomerUpdatingResponseCardRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerUpdatingResponseCardRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerUpdatingResponseCardRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerUpdatingResponseCardRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerUpdatingResponseCardRegistration) Get() (v CustomerUpdatingResponseCardRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerUpdatingResponseCardRegistration) Or(d CustomerUpdatingResponseCardRegistration) CustomerUpdatingResponseCardRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCustomerUpdatingResponseDirectdebitRegistration returns new OptNilCustomerUpdatingResponseDirectdebitRegistration with value set to v.
func NewOptNilCustomerUpdatingResponseDirectdebitRegistration(v CustomerUpdatingResponseDirectdebitRegistration) OptNilCustomerUpdatingResponseDirectdebitRegistration {
	return OptNilCustomerUpdatingResponseDirectdebitRegistration{
		Value: v,
		Set:   true,
	}
}

// OptNilCustomerUpdatingResponseDirectdebitRegistration is optional nullable CustomerUpdatingResponseDirectdebitRegistration.
type OptNilCustomerUpdatingResponseDirectdebitRegistration struct {
	Value CustomerUpdatingResponseDirectdebitRegistration
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCustomerUpdatingResponseDirectdebitRegistration was set.
func (o OptNilCustomerUpdatingResponseDirectdebitRegistration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCustomerUpdatingResponseDirectdebitRegistration) Reset() {
	var v CustomerUpdatingResponseDirectdebitRegistration
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCustomerUpdatingResponseDirectdebitRegistration) SetTo(v CustomerUpdatingResponseDirectdebitRegistration) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCustomerUpdatingResponseDirectdebitRegistration) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCustomerUpdatingResponseDirectdebitRegistration) SetToNull() {
	o.Set = true
	o.Null = true
	var v CustomerUpdatingResponseDirectdebitRegistration
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCustomerUpdatingResponseDirectdebitRegistration) Get() (v CustomerUpdatingResponseDirectdebitRegistration, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCustomerUpdatingResponseDirectdebitRegistration) Or(d CustomerUpdatingResponseDirectdebitRegistration) CustomerUpdatingResponseDirectdebitRegistration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDate returns new OptNilDate with value set to v.
func NewOptNilDate(v time.Time) OptNilDate {
	return OptNilDate{
		Value: v,
		Set:   true,
	}
}

// OptNilDate is optional nullable time.Time.
type OptNilDate struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDate was set.
func (o OptNilDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDate) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDate) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDate) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDirectDebitApplicationType returns new OptNilDirectDebitApplicationType with value set to v.
func NewOptNilDirectDebitApplicationType(v DirectDebitApplicationType) OptNilDirectDebitApplicationType {
	return OptNilDirectDebitApplicationType{
		Value: v,
		Set:   true,
	}
}

// OptNilDirectDebitApplicationType is optional nullable DirectDebitApplicationType.
type OptNilDirectDebitApplicationType struct {
	Value DirectDebitApplicationType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDirectDebitApplicationType was set.
func (o OptNilDirectDebitApplicationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDirectDebitApplicationType) Reset() {
	var v DirectDebitApplicationType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDirectDebitApplicationType) SetTo(v DirectDebitApplicationType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDirectDebitApplicationType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDirectDebitApplicationType) SetToNull() {
	o.Set = true
	o.Null = true
	var v DirectDebitApplicationType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDirectDebitApplicationType) Get() (v DirectDebitApplicationType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDirectDebitApplicationType) Or(d DirectDebitApplicationType) DirectDebitApplicationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDirectDebitLastResultCode returns new OptNilDirectDebitLastResultCode with value set to v.
func NewOptNilDirectDebitLastResultCode(v DirectDebitLastResultCode) OptNilDirectDebitLastResultCode {
	return OptNilDirectDebitLastResultCode{
		Value: v,
		Set:   true,
	}
}

// OptNilDirectDebitLastResultCode is optional nullable DirectDebitLastResultCode.
type OptNilDirectDebitLastResultCode struct {
	Value DirectDebitLastResultCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDirectDebitLastResultCode was set.
func (o OptNilDirectDebitLastResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDirectDebitLastResultCode) Reset() {
	var v DirectDebitLastResultCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDirectDebitLastResultCode) SetTo(v DirectDebitLastResultCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDirectDebitLastResultCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDirectDebitLastResultCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v DirectDebitLastResultCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDirectDebitLastResultCode) Get() (v DirectDebitLastResultCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDirectDebitLastResultCode) Or(d DirectDebitLastResultCode) DirectDebitLastResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoRetrievingResponseShopType returns new OptNilExaminationInfoRetrievingResponseShopType with value set to v.
func NewOptNilExaminationInfoRetrievingResponseShopType(v *NilExaminationInfoRetrievingResponseShopType) OptNilExaminationInfoRetrievingResponseShopType {
	return OptNilExaminationInfoRetrievingResponseShopType{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoRetrievingResponseShopType is optional *NilExaminationInfoRetrievingResponseShopType.
type OptNilExaminationInfoRetrievingResponseShopType struct {
	Value *NilExaminationInfoRetrievingResponseShopType
	Set   bool
}

// IsSet returns true if OptNilExaminationInfoRetrievingResponseShopType was set.
func (o OptNilExaminationInfoRetrievingResponseShopType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExaminationInfoRetrievingResponseShopType) Reset() {
	var v *NilExaminationInfoRetrievingResponseShopType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoRetrievingResponseShopType) SetTo(v *NilExaminationInfoRetrievingResponseShopType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoRetrievingResponseShopType) Get() (v *NilExaminationInfoRetrievingResponseShopType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoRetrievingResponseShopType) Or(d *NilExaminationInfoRetrievingResponseShopType) *NilExaminationInfoRetrievingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoUpdatingResponseShopType returns new OptNilExaminationInfoUpdatingResponseShopType with value set to v.
func NewOptNilExaminationInfoUpdatingResponseShopType(v *NilExaminationInfoUpdatingResponseShopType) OptNilExaminationInfoUpdatingResponseShopType {
	return OptNilExaminationInfoUpdatingResponseShopType{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoUpdatingResponseShopType is optional *NilExaminationInfoUpdatingResponseShopType.
type OptNilExaminationInfoUpdatingResponseShopType struct {
	Value *NilExaminationInfoUpdatingResponseShopType
	Set   bool
}

// IsSet returns true if OptNilExaminationInfoUpdatingResponseShopType was set.
func (o OptNilExaminationInfoUpdatingResponseShopType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExaminationInfoUpdatingResponseShopType) Reset() {
	var v *NilExaminationInfoUpdatingResponseShopType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoUpdatingResponseShopType) SetTo(v *NilExaminationInfoUpdatingResponseShopType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoUpdatingResponseShopType) Get() (v *NilExaminationInfoUpdatingResponseShopType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoUpdatingResponseShopType) Or(d *NilExaminationInfoUpdatingResponseShopType) *NilExaminationInfoUpdatingResponseShopType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo returns new OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo with value set to v.
func NewOptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo(v ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo {
	return OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo is optional nullable ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo.
type OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo struct {
	Value ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo was set.
func (o OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetTo(v ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Get() (v ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Or(d ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo returns new OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo with value set to v.
func NewOptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo(v ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo {
	return OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo is optional nullable ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo.
type OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo struct {
	Value ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo was set.
func (o OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Reset() {
	var v ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetTo(v ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Get() (v ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Or(d ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo returns new OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo with value set to v.
func NewOptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo(v ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo {
	return OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo is optional nullable ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo.
type OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo struct {
	Value ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo was set.
func (o OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetTo(v ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Get() (v ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Or(d ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo returns new OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo with value set to v.
func NewOptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo(v ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo {
	return OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo is optional nullable ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo.
type OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo struct {
	Value ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo was set.
func (o OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Reset() {
	var v ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetTo(v ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Get() (v ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Or(d ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo returns new OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo with value set to v.
func NewOptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo(v ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo {
	return OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo is optional nullable ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo.
type OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo struct {
	Value ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo was set.
func (o OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetTo(v ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) IsNull() bool {
	return o.Null
}

// SetNull sets value to null.
func (o *OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Get() (v ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Or(d ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo returns new OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo with value set to v.
func NewOptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo(v ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo {
	return OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo{
		Value: v,
		Set:   true,
	}
}

// OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo is optional nullable ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo.
type OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo struct {
	Value ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo was set.
func (o OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Reset() {
	var v ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetTo(v ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Get() (v ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Or(d ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentAfter3DSecureOKBrand returns new OptNilExecutePaymentAfter3DSecureOKBrand with value set to v.
func NewOptNilExecutePaymentAfter3DSecureOKBrand(v ExecutePaymentAfter3DSecureOKBrand) OptNilExecutePaymentAfter3DSecureOKBrand {
	return OptNilExecutePaymentAfter3DSecureOKBrand{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentAfter3DSecureOKBrand is optional nullable ExecutePaymentAfter3DSecureOKBrand.
type OptNilExecutePaymentAfter3DSecureOKBrand struct {
	Value ExecutePaymentAfter3DSecureOKBrand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentAfter3DSecureOKBrand was set.
func (o OptNilExecutePaymentAfter3DSecureOKBrand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentAfter3DSecureOKBrand) Reset() {
	var v ExecutePaymentAfter3DSecureOKBrand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentAfter3DSecureOKBrand) SetTo(v ExecutePaymentAfter3DSecureOKBrand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentAfter3DSecureOKBrand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentAfter3DSecureOKBrand) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentAfter3DSecureOKBrand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentAfter3DSecureOKBrand) Get() (v ExecutePaymentAfter3DSecureOKBrand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentAfter3DSecureOKBrand) Or(d ExecutePaymentAfter3DSecureOKBrand) ExecutePaymentAfter3DSecureOKBrand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentAfter3DSecureOKPayTimes returns new OptNilExecutePaymentAfter3DSecureOKPayTimes with value set to v.
func NewOptNilExecutePaymentAfter3DSecureOKPayTimes(v ExecutePaymentAfter3DSecureOKPayTimes) OptNilExecutePaymentAfter3DSecureOKPayTimes {
	return OptNilExecutePaymentAfter3DSecureOKPayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentAfter3DSecureOKPayTimes is optional nullable ExecutePaymentAfter3DSecureOKPayTimes.
type OptNilExecutePaymentAfter3DSecureOKPayTimes struct {
	Value ExecutePaymentAfter3DSecureOKPayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentAfter3DSecureOKPayTimes was set.
func (o OptNilExecutePaymentAfter3DSecureOKPayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentAfter3DSecureOKPayTimes) Reset() {
	var v ExecutePaymentAfter3DSecureOKPayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentAfter3DSecureOKPayTimes) SetTo(v ExecutePaymentAfter3DSecureOKPayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentAfter3DSecureOKPayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentAfter3DSecureOKPayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentAfter3DSecureOKPayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentAfter3DSecureOKPayTimes) Get() (v ExecutePaymentAfter3DSecureOKPayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentAfter3DSecureOKPayTimes) Or(d ExecutePaymentAfter3DSecureOKPayTimes) ExecutePaymentAfter3DSecureOKPayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentAfter3DSecureOKTds2Status returns new OptNilExecutePaymentAfter3DSecureOKTds2Status with value set to v.
func NewOptNilExecutePaymentAfter3DSecureOKTds2Status(v ExecutePaymentAfter3DSecureOKTds2Status) OptNilExecutePaymentAfter3DSecureOKTds2Status {
	return OptNilExecutePaymentAfter3DSecureOKTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentAfter3DSecureOKTds2Status is optional nullable ExecutePaymentAfter3DSecureOKTds2Status.
type OptNilExecutePaymentAfter3DSecureOKTds2Status struct {
	Value ExecutePaymentAfter3DSecureOKTds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentAfter3DSecureOKTds2Status was set.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentAfter3DSecureOKTds2Status) Reset() {
	var v ExecutePaymentAfter3DSecureOKTds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentAfter3DSecureOKTds2Status) SetTo(v ExecutePaymentAfter3DSecureOKTds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Status) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentAfter3DSecureOKTds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentAfter3DSecureOKTds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Status) Get() (v ExecutePaymentAfter3DSecureOKTds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Status) Or(d ExecutePaymentAfter3DSecureOKTds2Status) ExecutePaymentAfter3DSecureOKTds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentAfter3DSecureOKTds2Type returns new OptNilExecutePaymentAfter3DSecureOKTds2Type with value set to v.
func NewOptNilExecutePaymentAfter3DSecureOKTds2Type(v *NilExecutePaymentAfter3DSecureOKTds2Type) OptNilExecutePaymentAfter3DSecureOKTds2Type {
	return OptNilExecutePaymentAfter3DSecureOKTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentAfter3DSecureOKTds2Type is optional *NilExecutePaymentAfter3DSecureOKTds2Type.
type OptNilExecutePaymentAfter3DSecureOKTds2Type struct {
	Value *NilExecutePaymentAfter3DSecureOKTds2Type
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentAfter3DSecureOKTds2Type was set.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentAfter3DSecureOKTds2Type) Reset() {
	var v *NilExecutePaymentAfter3DSecureOKTds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentAfter3DSecureOKTds2Type) SetTo(v *NilExecutePaymentAfter3DSecureOKTds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Type) Get() (v *NilExecutePaymentAfter3DSecureOKTds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Type) Or(d *NilExecutePaymentAfter3DSecureOKTds2Type) *NilExecutePaymentAfter3DSecureOKTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentAfter3DSecureOKTdsType returns new OptNilExecutePaymentAfter3DSecureOKTdsType with value set to v.
func NewOptNilExecutePaymentAfter3DSecureOKTdsType(v *NilExecutePaymentAfter3DSecureOKTdsType) OptNilExecutePaymentAfter3DSecureOKTdsType {
	return OptNilExecutePaymentAfter3DSecureOKTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentAfter3DSecureOKTdsType is optional *NilExecutePaymentAfter3DSecureOKTdsType.
type OptNilExecutePaymentAfter3DSecureOKTdsType struct {
	Value *NilExecutePaymentAfter3DSecureOKTdsType
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentAfter3DSecureOKTdsType was set.
func (o OptNilExecutePaymentAfter3DSecureOKTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentAfter3DSecureOKTdsType) Reset() {
	var v *NilExecutePaymentAfter3DSecureOKTdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentAfter3DSecureOKTdsType) SetTo(v *NilExecutePaymentAfter3DSecureOKTdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentAfter3DSecureOKTdsType) Get() (v *NilExecutePaymentAfter3DSecureOKTdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentAfter3DSecureOKTdsType) Or(d *NilExecutePaymentAfter3DSecureOKTdsType) *NilExecutePaymentAfter3DSecureOKTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK0Brand returns new OptNilExecutePaymentOK0Brand with value set to v.
func NewOptNilExecutePaymentOK0Brand(v ExecutePaymentOK0Brand) OptNilExecutePaymentOK0Brand {
	return OptNilExecutePaymentOK0Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK0Brand is optional nullable ExecutePaymentOK0Brand.
type OptNilExecutePaymentOK0Brand struct {
	Value ExecutePaymentOK0Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK0Brand was set.
func (o OptNilExecutePaymentOK0Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK0Brand) Reset() {
	var v ExecutePaymentOK0Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK0Brand) SetTo(v ExecutePaymentOK0Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK0Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK0Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK0Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK0Brand) Get() (v ExecutePaymentOK0Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK0Brand) Or(d ExecutePaymentOK0Brand) ExecutePaymentOK0Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK0PayTimes returns new OptNilExecutePaymentOK0PayTimes with value set to v.
func NewOptNilExecutePaymentOK0PayTimes(v ExecutePaymentOK0PayTimes) OptNilExecutePaymentOK0PayTimes {
	return OptNilExecutePaymentOK0PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK0PayTimes is optional nullable ExecutePaymentOK0PayTimes.
type OptNilExecutePaymentOK0PayTimes struct {
	Value ExecutePaymentOK0PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK0PayTimes was set.
func (o OptNilExecutePaymentOK0PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK0PayTimes) Reset() {
	var v ExecutePaymentOK0PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK0PayTimes) SetTo(v ExecutePaymentOK0PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK0PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK0PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK0PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK0PayTimes) Get() (v ExecutePaymentOK0PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK0PayTimes) Or(d ExecutePaymentOK0PayTimes) ExecutePaymentOK0PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK0Tds2Status returns new OptNilExecutePaymentOK0Tds2Status with value set to v.
func NewOptNilExecutePaymentOK0Tds2Status(v ExecutePaymentOK0Tds2Status) OptNilExecutePaymentOK0Tds2Status {
	return OptNilExecutePaymentOK0Tds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK0Tds2Status is optional nullable ExecutePaymentOK0Tds2Status.
type OptNilExecutePaymentOK0Tds2Status struct {
	Value ExecutePaymentOK0Tds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK0Tds2Status was set.
func (o OptNilExecutePaymentOK0Tds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK0Tds2Status) Reset() {
	var v ExecutePaymentOK0Tds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK0Tds2Status) SetTo(v ExecutePaymentOK0Tds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK0Tds2Status) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK0Tds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK0Tds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK0Tds2Status) Get() (v ExecutePaymentOK0Tds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK0Tds2Status) Or(d ExecutePaymentOK0Tds2Status) ExecutePaymentOK0Tds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK0Tds2Type returns new OptNilExecutePaymentOK0Tds2Type with value set to v.
func NewOptNilExecutePaymentOK0Tds2Type(v *NilExecutePaymentOK0Tds2Type) OptNilExecutePaymentOK0Tds2Type {
	return OptNilExecutePaymentOK0Tds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK0Tds2Type is optional *NilExecutePaymentOK0Tds2Type.
type OptNilExecutePaymentOK0Tds2Type struct {
	Value *NilExecutePaymentOK0Tds2Type
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentOK0Tds2Type was set.
func (o OptNilExecutePaymentOK0Tds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK0Tds2Type) Reset() {
	var v *NilExecutePaymentOK0Tds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK0Tds2Type) SetTo(v *NilExecutePaymentOK0Tds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK0Tds2Type) Get() (v *NilExecutePaymentOK0Tds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK0Tds2Type) Or(d *NilExecutePaymentOK0Tds2Type) *NilExecutePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK0TdsType returns new OptNilExecutePaymentOK0TdsType with value set to v.
func NewOptNilExecutePaymentOK0TdsType(v *NilExecutePaymentOK0TdsType) OptNilExecutePaymentOK0TdsType {
	return OptNilExecutePaymentOK0TdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK0TdsType is optional *NilExecutePaymentOK0TdsType.
type OptNilExecutePaymentOK0TdsType struct {
	Value *NilExecutePaymentOK0TdsType
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentOK0TdsType was set.
func (o OptNilExecutePaymentOK0TdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK0TdsType) Reset() {
	var v *NilExecutePaymentOK0TdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK0TdsType) SetTo(v *NilExecutePaymentOK0TdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK0TdsType) Get() (v *NilExecutePaymentOK0TdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK0TdsType) Or(d *NilExecutePaymentOK0TdsType) *NilExecutePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK1Brand returns new OptNilExecutePaymentOK1Brand with value set to v.
func NewOptNilExecutePaymentOK1Brand(v ExecutePaymentOK1Brand) OptNilExecutePaymentOK1Brand {
	return OptNilExecutePaymentOK1Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK1Brand is optional nullable ExecutePaymentOK1Brand.
type OptNilExecutePaymentOK1Brand struct {
	Value ExecutePaymentOK1Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK1Brand was set.
func (o OptNilExecutePaymentOK1Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK1Brand) Reset() {
	var v ExecutePaymentOK1Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK1Brand) SetTo(v ExecutePaymentOK1Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK1Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK1Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK1Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK1Brand) Get() (v ExecutePaymentOK1Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK1Brand) Or(d ExecutePaymentOK1Brand) ExecutePaymentOK1Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK1PayTimes returns new OptNilExecutePaymentOK1PayTimes with value set to v.
func NewOptNilExecutePaymentOK1PayTimes(v ExecutePaymentOK1PayTimes) OptNilExecutePaymentOK1PayTimes {
	return OptNilExecutePaymentOK1PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK1PayTimes is optional nullable ExecutePaymentOK1PayTimes.
type OptNilExecutePaymentOK1PayTimes struct {
	Value ExecutePaymentOK1PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK1PayTimes was set.
func (o OptNilExecutePaymentOK1PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK1PayTimes) Reset() {
	var v ExecutePaymentOK1PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK1PayTimes) SetTo(v ExecutePaymentOK1PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK1PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK1PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK1PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK1PayTimes) Get() (v ExecutePaymentOK1PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK1PayTimes) Or(d ExecutePaymentOK1PayTimes) ExecutePaymentOK1PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK2BarcodeFormat returns new OptNilExecutePaymentOK2BarcodeFormat with value set to v.
func NewOptNilExecutePaymentOK2BarcodeFormat(v ExecutePaymentOK2BarcodeFormat) OptNilExecutePaymentOK2BarcodeFormat {
	return OptNilExecutePaymentOK2BarcodeFormat{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK2BarcodeFormat is optional nullable ExecutePaymentOK2BarcodeFormat.
type OptNilExecutePaymentOK2BarcodeFormat struct {
	Value ExecutePaymentOK2BarcodeFormat
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK2BarcodeFormat was set.
func (o OptNilExecutePaymentOK2BarcodeFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK2BarcodeFormat) Reset() {
	var v ExecutePaymentOK2BarcodeFormat
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK2BarcodeFormat) SetTo(v ExecutePaymentOK2BarcodeFormat) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK2BarcodeFormat) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK2BarcodeFormat) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK2BarcodeFormat
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK2BarcodeFormat) Get() (v ExecutePaymentOK2BarcodeFormat, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK2BarcodeFormat) Or(d ExecutePaymentOK2BarcodeFormat) ExecutePaymentOK2BarcodeFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK2KonbiniCode returns new OptNilExecutePaymentOK2KonbiniCode with value set to v.
func NewOptNilExecutePaymentOK2KonbiniCode(v ExecutePaymentOK2KonbiniCode) OptNilExecutePaymentOK2KonbiniCode {
	return OptNilExecutePaymentOK2KonbiniCode{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK2KonbiniCode is optional nullable ExecutePaymentOK2KonbiniCode.
type OptNilExecutePaymentOK2KonbiniCode struct {
	Value ExecutePaymentOK2KonbiniCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK2KonbiniCode was set.
func (o OptNilExecutePaymentOK2KonbiniCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK2KonbiniCode) Reset() {
	var v ExecutePaymentOK2KonbiniCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK2KonbiniCode) SetTo(v ExecutePaymentOK2KonbiniCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK2KonbiniCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK2KonbiniCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK2KonbiniCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK2KonbiniCode) Get() (v ExecutePaymentOK2KonbiniCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK2KonbiniCode) Or(d ExecutePaymentOK2KonbiniCode) ExecutePaymentOK2KonbiniCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK3RedirectType returns new OptNilExecutePaymentOK3RedirectType with value set to v.
func NewOptNilExecutePaymentOK3RedirectType(v ExecutePaymentOK3RedirectType) OptNilExecutePaymentOK3RedirectType {
	return OptNilExecutePaymentOK3RedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK3RedirectType is optional nullable ExecutePaymentOK3RedirectType.
type OptNilExecutePaymentOK3RedirectType struct {
	Value ExecutePaymentOK3RedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK3RedirectType was set.
func (o OptNilExecutePaymentOK3RedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK3RedirectType) Reset() {
	var v ExecutePaymentOK3RedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK3RedirectType) SetTo(v ExecutePaymentOK3RedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK3RedirectType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK3RedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK3RedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK3RedirectType) Get() (v ExecutePaymentOK3RedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK3RedirectType) Or(d ExecutePaymentOK3RedirectType) ExecutePaymentOK3RedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentOK4ResultCode returns new OptNilExecutePaymentOK4ResultCode with value set to v.
func NewOptNilExecutePaymentOK4ResultCode(v ExecutePaymentOK4ResultCode) OptNilExecutePaymentOK4ResultCode {
	return OptNilExecutePaymentOK4ResultCode{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentOK4ResultCode is optional nullable ExecutePaymentOK4ResultCode.
type OptNilExecutePaymentOK4ResultCode struct {
	Value ExecutePaymentOK4ResultCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentOK4ResultCode was set.
func (o OptNilExecutePaymentOK4ResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentOK4ResultCode) Reset() {
	var v ExecutePaymentOK4ResultCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentOK4ResultCode) SetTo(v ExecutePaymentOK4ResultCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentOK4ResultCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentOK4ResultCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentOK4ResultCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentOK4ResultCode) Get() (v ExecutePaymentOK4ResultCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentOK4ResultCode) Or(d ExecutePaymentOK4ResultCode) ExecutePaymentOK4ResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0PayTimes returns new OptNilExecutePaymentReq0PayTimes with value set to v.
func NewOptNilExecutePaymentReq0PayTimes(v ExecutePaymentReq0PayTimes) OptNilExecutePaymentReq0PayTimes {
	return OptNilExecutePaymentReq0PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0PayTimes is optional nullable ExecutePaymentReq0PayTimes.
type OptNilExecutePaymentReq0PayTimes struct {
	Value ExecutePaymentReq0PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilExecutePaymentReq0PayTimes was set.
func (o OptNilExecutePaymentReq0PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0PayTimes) Reset() {
	var v ExecutePaymentReq0PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0PayTimes) SetTo(v ExecutePaymentReq0PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilExecutePaymentReq0PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilExecutePaymentReq0PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v ExecutePaymentReq0PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0PayTimes) Get() (v ExecutePaymentReq0PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0PayTimes) Or(d ExecutePaymentReq0PayTimes) ExecutePaymentReq0PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2AddrMatch returns new OptNilExecutePaymentReq0Tds2AddrMatch with value set to v.
func NewOptNilExecutePaymentReq0Tds2AddrMatch(v *NilExecutePaymentReq0Tds2AddrMatch) OptNilExecutePaymentReq0Tds2AddrMatch {
	return OptNilExecutePaymentReq0Tds2AddrMatch{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2AddrMatch is optional *NilExecutePaymentReq0Tds2AddrMatch.
type OptNilExecutePaymentReq0Tds2AddrMatch struct {
	Value *NilExecutePaymentReq0Tds2AddrMatch
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2AddrMatch was set.
func (o OptNilExecutePaymentReq0Tds2AddrMatch) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2AddrMatch) Reset() {
	var v *NilExecutePaymentReq0Tds2AddrMatch
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2AddrMatch) SetTo(v *NilExecutePaymentReq0Tds2AddrMatch) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2AddrMatch) Get() (v *NilExecutePaymentReq0Tds2AddrMatch, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2AddrMatch) Or(d *NilExecutePaymentReq0Tds2AddrMatch) *NilExecutePaymentReq0Tds2AddrMatch {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2DeliveryTimeframe returns new OptNilExecutePaymentReq0Tds2DeliveryTimeframe with value set to v.
func NewOptNilExecutePaymentReq0Tds2DeliveryTimeframe(v *NilExecutePaymentReq0Tds2DeliveryTimeframe) OptNilExecutePaymentReq0Tds2DeliveryTimeframe {
	return OptNilExecutePaymentReq0Tds2DeliveryTimeframe{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2DeliveryTimeframe is optional *NilExecutePaymentReq0Tds2DeliveryTimeframe.
type OptNilExecutePaymentReq0Tds2DeliveryTimeframe struct {
	Value *NilExecutePaymentReq0Tds2DeliveryTimeframe
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2DeliveryTimeframe was set.
func (o OptNilExecutePaymentReq0Tds2DeliveryTimeframe) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2DeliveryTimeframe) Reset() {
	var v *NilExecutePaymentReq0Tds2DeliveryTimeframe
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2DeliveryTimeframe) SetTo(v *NilExecutePaymentReq0Tds2DeliveryTimeframe) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2DeliveryTimeframe) Get() (v *NilExecutePaymentReq0Tds2DeliveryTimeframe, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2DeliveryTimeframe) Or(d *NilExecutePaymentReq0Tds2DeliveryTimeframe) *NilExecutePaymentReq0Tds2DeliveryTimeframe {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2PreOrderPurchaseInd returns new OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd with value set to v.
func NewOptNilExecutePaymentReq0Tds2PreOrderPurchaseInd(v *NilExecutePaymentReq0Tds2PreOrderPurchaseInd) OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd {
	return OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd is optional *NilExecutePaymentReq0Tds2PreOrderPurchaseInd.
type OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd struct {
	Value *NilExecutePaymentReq0Tds2PreOrderPurchaseInd
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd was set.
func (o OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) Reset() {
	var v *NilExecutePaymentReq0Tds2PreOrderPurchaseInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) SetTo(v *NilExecutePaymentReq0Tds2PreOrderPurchaseInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) Get() (v *NilExecutePaymentReq0Tds2PreOrderPurchaseInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) Or(d *NilExecutePaymentReq0Tds2PreOrderPurchaseInd) *NilExecutePaymentReq0Tds2PreOrderPurchaseInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2ReorderItemsInd returns new OptNilExecutePaymentReq0Tds2ReorderItemsInd with value set to v.
func NewOptNilExecutePaymentReq0Tds2ReorderItemsInd(v *NilExecutePaymentReq0Tds2ReorderItemsInd) OptNilExecutePaymentReq0Tds2ReorderItemsInd {
	return OptNilExecutePaymentReq0Tds2ReorderItemsInd{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2ReorderItemsInd is optional *NilExecutePaymentReq0Tds2ReorderItemsInd.
type OptNilExecutePaymentReq0Tds2ReorderItemsInd struct {
	Value *NilExecutePaymentReq0Tds2ReorderItemsInd
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2ReorderItemsInd was set.
func (o OptNilExecutePaymentReq0Tds2ReorderItemsInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2ReorderItemsInd) Reset() {
	var v *NilExecutePaymentReq0Tds2ReorderItemsInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2ReorderItemsInd) SetTo(v *NilExecutePaymentReq0Tds2ReorderItemsInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2ReorderItemsInd) Get() (v *NilExecutePaymentReq0Tds2ReorderItemsInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2ReorderItemsInd) Or(d *NilExecutePaymentReq0Tds2ReorderItemsInd) *NilExecutePaymentReq0Tds2ReorderItemsInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2ShipInd returns new OptNilExecutePaymentReq0Tds2ShipInd with value set to v.
func NewOptNilExecutePaymentReq0Tds2ShipInd(v *NilExecutePaymentReq0Tds2ShipInd) OptNilExecutePaymentReq0Tds2ShipInd {
	return OptNilExecutePaymentReq0Tds2ShipInd{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2ShipInd is optional *NilExecutePaymentReq0Tds2ShipInd.
type OptNilExecutePaymentReq0Tds2ShipInd struct {
	Value *NilExecutePaymentReq0Tds2ShipInd
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2ShipInd was set.
func (o OptNilExecutePaymentReq0Tds2ShipInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2ShipInd) Reset() {
	var v *NilExecutePaymentReq0Tds2ShipInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2ShipInd) SetTo(v *NilExecutePaymentReq0Tds2ShipInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2ShipInd) Get() (v *NilExecutePaymentReq0Tds2ShipInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2ShipInd) Or(d *NilExecutePaymentReq0Tds2ShipInd) *NilExecutePaymentReq0Tds2ShipInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2ShipNameInd returns new OptNilExecutePaymentReq0Tds2ShipNameInd with value set to v.
func NewOptNilExecutePaymentReq0Tds2ShipNameInd(v *NilExecutePaymentReq0Tds2ShipNameInd) OptNilExecutePaymentReq0Tds2ShipNameInd {
	return OptNilExecutePaymentReq0Tds2ShipNameInd{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2ShipNameInd is optional *NilExecutePaymentReq0Tds2ShipNameInd.
type OptNilExecutePaymentReq0Tds2ShipNameInd struct {
	Value *NilExecutePaymentReq0Tds2ShipNameInd
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2ShipNameInd was set.
func (o OptNilExecutePaymentReq0Tds2ShipNameInd) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2ShipNameInd) Reset() {
	var v *NilExecutePaymentReq0Tds2ShipNameInd
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2ShipNameInd) SetTo(v *NilExecutePaymentReq0Tds2ShipNameInd) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2ShipNameInd) Get() (v *NilExecutePaymentReq0Tds2ShipNameInd, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2ShipNameInd) Or(d *NilExecutePaymentReq0Tds2ShipNameInd) *NilExecutePaymentReq0Tds2ShipNameInd {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2SuspiciousAccActivity returns new OptNilExecutePaymentReq0Tds2SuspiciousAccActivity with value set to v.
func NewOptNilExecutePaymentReq0Tds2SuspiciousAccActivity(v *NilExecutePaymentReq0Tds2SuspiciousAccActivity) OptNilExecutePaymentReq0Tds2SuspiciousAccActivity {
	return OptNilExecutePaymentReq0Tds2SuspiciousAccActivity{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2SuspiciousAccActivity is optional *NilExecutePaymentReq0Tds2SuspiciousAccActivity.
type OptNilExecutePaymentReq0Tds2SuspiciousAccActivity struct {
	Value *NilExecutePaymentReq0Tds2SuspiciousAccActivity
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2SuspiciousAccActivity was set.
func (o OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) Reset() {
	var v *NilExecutePaymentReq0Tds2SuspiciousAccActivity
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) SetTo(v *NilExecutePaymentReq0Tds2SuspiciousAccActivity) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) Get() (v *NilExecutePaymentReq0Tds2SuspiciousAccActivity, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) Or(d *NilExecutePaymentReq0Tds2SuspiciousAccActivity) *NilExecutePaymentReq0Tds2SuspiciousAccActivity {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod returns new OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod with value set to v.
func NewOptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod(v *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod {
	return OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod{
		Value: v,
		Set:   true,
	}
}

// OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod is optional *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod.
type OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod struct {
	Value *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod
	Set   bool
}

// IsSet returns true if OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod was set.
func (o OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Reset() {
	var v *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) SetTo(v *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Get() (v *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Or(d *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFloat64 returns new OptNilFloat64 with value set to v.
func NewOptNilFloat64(v float64) OptNilFloat64 {
	return OptNilFloat64{
		Value: v,
		Set:   true,
	}
}

// OptNilFloat64 is optional nullable float64.
type OptNilFloat64 struct {
	Value float64
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFloat64 was set.
func (o OptNilFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFloat64) SetTo(v float64) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFloat64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilFloat64) SetToNull() {
	o.Set = true
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGenerateBarcodeOfPaymentOKBarcodeFormat returns new OptNilGenerateBarcodeOfPaymentOKBarcodeFormat with value set to v.
func NewOptNilGenerateBarcodeOfPaymentOKBarcodeFormat(v GenerateBarcodeOfPaymentOKBarcodeFormat) OptNilGenerateBarcodeOfPaymentOKBarcodeFormat {
	return OptNilGenerateBarcodeOfPaymentOKBarcodeFormat{
		Value: v,
		Set:   true,
	}
}

// OptNilGenerateBarcodeOfPaymentOKBarcodeFormat is optional nullable GenerateBarcodeOfPaymentOKBarcodeFormat.
type OptNilGenerateBarcodeOfPaymentOKBarcodeFormat struct {
	Value GenerateBarcodeOfPaymentOKBarcodeFormat
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGenerateBarcodeOfPaymentOKBarcodeFormat was set.
func (o OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) Reset() {
	var v GenerateBarcodeOfPaymentOKBarcodeFormat
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) SetTo(v GenerateBarcodeOfPaymentOKBarcodeFormat) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) SetToNull() {
	o.Set = true
	o.Null = true
	var v GenerateBarcodeOfPaymentOKBarcodeFormat
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) Get() (v GenerateBarcodeOfPaymentOKBarcodeFormat, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) Or(d GenerateBarcodeOfPaymentOKBarcodeFormat) GenerateBarcodeOfPaymentOKBarcodeFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilGenerateBarcodeOfPaymentOKKonbiniCode returns new OptNilGenerateBarcodeOfPaymentOKKonbiniCode with value set to v.
func NewOptNilGenerateBarcodeOfPaymentOKKonbiniCode(v GenerateBarcodeOfPaymentOKKonbiniCode) OptNilGenerateBarcodeOfPaymentOKKonbiniCode {
	return OptNilGenerateBarcodeOfPaymentOKKonbiniCode{
		Value: v,
		Set:   true,
	}
}

// OptNilGenerateBarcodeOfPaymentOKKonbiniCode is optional nullable GenerateBarcodeOfPaymentOKKonbiniCode.
type OptNilGenerateBarcodeOfPaymentOKKonbiniCode struct {
	Value GenerateBarcodeOfPaymentOKKonbiniCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilGenerateBarcodeOfPaymentOKKonbiniCode was set.
func (o OptNilGenerateBarcodeOfPaymentOKKonbiniCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilGenerateBarcodeOfPaymentOKKonbiniCode) Reset() {
	var v GenerateBarcodeOfPaymentOKKonbiniCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilGenerateBarcodeOfPaymentOKKonbiniCode) SetTo(v GenerateBarcodeOfPaymentOKKonbiniCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilGenerateBarcodeOfPaymentOKKonbiniCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilGenerateBarcodeOfPaymentOKKonbiniCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v GenerateBarcodeOfPaymentOKKonbiniCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilGenerateBarcodeOfPaymentOKKonbiniCode) Get() (v GenerateBarcodeOfPaymentOKKonbiniCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilGenerateBarcodeOfPaymentOKKonbiniCode) Or(d GenerateBarcodeOfPaymentOKKonbiniCode) GenerateBarcodeOfPaymentOKKonbiniCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt32 returns new OptNilInt32 with value set to v.
func NewOptNilInt32(v int32) OptNilInt32 {
	return OptNilInt32{
		Value: v,
		Set:   true,
	}
}

// OptNilInt32 is optional nullable int32.
type OptNilInt32 struct {
	Value int32
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt32 was set.
func (o OptNilInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt32) SetTo(v int32) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt32) SetToNull() {
	o.Set = true
	o.Null = true
	var v int32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt32) Get() (v int32, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodCard returns new OptNilPaymentMethodCard with value set to v.
func NewOptNilPaymentMethodCard(v PaymentMethodCard) OptNilPaymentMethodCard {
	return OptNilPaymentMethodCard{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodCard is optional nullable PaymentMethodCard.
type OptNilPaymentMethodCard struct {
	Value PaymentMethodCard
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodCard was set.
func (o OptNilPaymentMethodCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodCard) Reset() {
	var v PaymentMethodCard
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodCard) SetTo(v PaymentMethodCard) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentMethodCard) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentMethodCard) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodCard
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodCard) Get() (v PaymentMethodCard, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodCard) Or(d PaymentMethodCard) PaymentMethodCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodDirectdebit returns new OptNilPaymentMethodDirectdebit with value set to v.
func NewOptNilPaymentMethodDirectdebit(v PaymentMethodDirectdebit) OptNilPaymentMethodDirectdebit {
	return OptNilPaymentMethodDirectdebit{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodDirectdebit is optional nullable PaymentMethodDirectdebit.
type OptNilPaymentMethodDirectdebit struct {
	Value PaymentMethodDirectdebit
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodDirectdebit was set.
func (o OptNilPaymentMethodDirectdebit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodDirectdebit) Reset() {
	var v PaymentMethodDirectdebit
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodDirectdebit) SetTo(v PaymentMethodDirectdebit) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentMethodDirectdebit) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentMethodDirectdebit) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodDirectdebit
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodDirectdebit) Get() (v PaymentMethodDirectdebit, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodDirectdebit) Or(d PaymentMethodDirectdebit) PaymentMethodDirectdebit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodDirectdebitAccountType returns new OptNilPaymentMethodDirectdebitAccountType with value set to v.
func NewOptNilPaymentMethodDirectdebitAccountType(v PaymentMethodDirectdebitAccountType) OptNilPaymentMethodDirectdebitAccountType {
	return OptNilPaymentMethodDirectdebitAccountType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodDirectdebitAccountType is optional nullable PaymentMethodDirectdebitAccountType.
type OptNilPaymentMethodDirectdebitAccountType struct {
	Value PaymentMethodDirectdebitAccountType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodDirectdebitAccountType was set.
func (o OptNilPaymentMethodDirectdebitAccountType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodDirectdebitAccountType) Reset() {
	var v PaymentMethodDirectdebitAccountType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodDirectdebitAccountType) SetTo(v PaymentMethodDirectdebitAccountType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentMethodDirectdebitAccountType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentMethodDirectdebitAccountType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodDirectdebitAccountType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodDirectdebitAccountType) Get() (v PaymentMethodDirectdebitAccountType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodDirectdebitAccountType) Or(d PaymentMethodDirectdebitAccountType) PaymentMethodDirectdebitAccountType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodDirectdebitBankType returns new OptNilPaymentMethodDirectdebitBankType with value set to v.
func NewOptNilPaymentMethodDirectdebitBankType(v PaymentMethodDirectdebitBankType) OptNilPaymentMethodDirectdebitBankType {
	return OptNilPaymentMethodDirectdebitBankType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodDirectdebitBankType is optional nullable PaymentMethodDirectdebitBankType.
type OptNilPaymentMethodDirectdebitBankType struct {
	Value PaymentMethodDirectdebitBankType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodDirectdebitBankType was set.
func (o OptNilPaymentMethodDirectdebitBankType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodDirectdebitBankType) Reset() {
	var v PaymentMethodDirectdebitBankType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodDirectdebitBankType) SetTo(v PaymentMethodDirectdebitBankType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentMethodDirectdebitBankType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentMethodDirectdebitBankType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodDirectdebitBankType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodDirectdebitBankType) Get() (v PaymentMethodDirectdebitBankType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodDirectdebitBankType) Or(d PaymentMethodDirectdebitBankType) PaymentMethodDirectdebitBankType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodDirectdebitPaperApplication returns new OptNilPaymentMethodDirectdebitPaperApplication with value set to v.
func NewOptNilPaymentMethodDirectdebitPaperApplication(v PaymentMethodDirectdebitPaperApplication) OptNilPaymentMethodDirectdebitPaperApplication {
	return OptNilPaymentMethodDirectdebitPaperApplication{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodDirectdebitPaperApplication is optional nullable PaymentMethodDirectdebitPaperApplication.
type OptNilPaymentMethodDirectdebitPaperApplication struct {
	Value PaymentMethodDirectdebitPaperApplication
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodDirectdebitPaperApplication was set.
func (o OptNilPaymentMethodDirectdebitPaperApplication) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodDirectdebitPaperApplication) Reset() {
	var v PaymentMethodDirectdebitPaperApplication
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodDirectdebitPaperApplication) SetTo(v PaymentMethodDirectdebitPaperApplication) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentMethodDirectdebitPaperApplication) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentMethodDirectdebitPaperApplication) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodDirectdebitPaperApplication
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodDirectdebitPaperApplication) Get() (v PaymentMethodDirectdebitPaperApplication, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodDirectdebitPaperApplication) Or(d PaymentMethodDirectdebitPaperApplication) PaymentMethodDirectdebitPaperApplication {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentMethodRedirectURLAccessedFlag returns new OptNilPaymentMethodRedirectURLAccessedFlag with value set to v.
func NewOptNilPaymentMethodRedirectURLAccessedFlag(v PaymentMethodRedirectURLAccessedFlag) OptNilPaymentMethodRedirectURLAccessedFlag {
	return OptNilPaymentMethodRedirectURLAccessedFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentMethodRedirectURLAccessedFlag is optional nullable PaymentMethodRedirectURLAccessedFlag.
type OptNilPaymentMethodRedirectURLAccessedFlag struct {
	Value PaymentMethodRedirectURLAccessedFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentMethodRedirectURLAccessedFlag was set.
func (o OptNilPaymentMethodRedirectURLAccessedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentMethodRedirectURLAccessedFlag) Reset() {
	var v PaymentMethodRedirectURLAccessedFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentMethodRedirectURLAccessedFlag) SetTo(v PaymentMethodRedirectURLAccessedFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentMethodRedirectURLAccessedFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentMethodRedirectURLAccessedFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentMethodRedirectURLAccessedFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentMethodRedirectURLAccessedFlag) Get() (v PaymentMethodRedirectURLAccessedFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentMethodRedirectURLAccessedFlag) Or(d PaymentMethodRedirectURLAccessedFlag) PaymentMethodRedirectURLAccessedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestCard returns new OptNilPaymentSessionCreatingRequestCard with value set to v.
func NewOptNilPaymentSessionCreatingRequestCard(v PaymentSessionCreatingRequestCard) OptNilPaymentSessionCreatingRequestCard {
	return OptNilPaymentSessionCreatingRequestCard{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestCard is optional nullable PaymentSessionCreatingRequestCard.
type OptNilPaymentSessionCreatingRequestCard struct {
	Value PaymentSessionCreatingRequestCard
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestCard was set.
func (o OptNilPaymentSessionCreatingRequestCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestCard) Reset() {
	var v PaymentSessionCreatingRequestCard
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestCard) SetTo(v PaymentSessionCreatingRequestCard) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentSessionCreatingRequestCard) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentSessionCreatingRequestCard) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentSessionCreatingRequestCard
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestCard) Get() (v PaymentSessionCreatingRequestCard, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestCard) Or(d PaymentSessionCreatingRequestCard) PaymentSessionCreatingRequestCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestCardTds2Type returns new OptNilPaymentSessionCreatingRequestCardTds2Type with value set to v.
func NewOptNilPaymentSessionCreatingRequestCardTds2Type(v *NilPaymentSessionCreatingRequestCardTds2Type) OptNilPaymentSessionCreatingRequestCardTds2Type {
	return OptNilPaymentSessionCreatingRequestCardTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestCardTds2Type is optional *NilPaymentSessionCreatingRequestCardTds2Type.
type OptNilPaymentSessionCreatingRequestCardTds2Type struct {
	Value *NilPaymentSessionCreatingRequestCardTds2Type
	Set   bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestCardTds2Type was set.
func (o OptNilPaymentSessionCreatingRequestCardTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestCardTds2Type) Reset() {
	var v *NilPaymentSessionCreatingRequestCardTds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestCardTds2Type) SetTo(v *NilPaymentSessionCreatingRequestCardTds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestCardTds2Type) Get() (v *NilPaymentSessionCreatingRequestCardTds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestCardTds2Type) Or(d *NilPaymentSessionCreatingRequestCardTds2Type) *NilPaymentSessionCreatingRequestCardTds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestCardTdsType returns new OptNilPaymentSessionCreatingRequestCardTdsType with value set to v.
func NewOptNilPaymentSessionCreatingRequestCardTdsType(v *NilPaymentSessionCreatingRequestCardTdsType) OptNilPaymentSessionCreatingRequestCardTdsType {
	return OptNilPaymentSessionCreatingRequestCardTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestCardTdsType is optional *NilPaymentSessionCreatingRequestCardTdsType.
type OptNilPaymentSessionCreatingRequestCardTdsType struct {
	Value *NilPaymentSessionCreatingRequestCardTdsType
	Set   bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestCardTdsType was set.
func (o OptNilPaymentSessionCreatingRequestCardTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestCardTdsType) Reset() {
	var v *NilPaymentSessionCreatingRequestCardTdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestCardTdsType) SetTo(v *NilPaymentSessionCreatingRequestCardTdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestCardTdsType) Get() (v *NilPaymentSessionCreatingRequestCardTdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestCardTdsType) Or(d *NilPaymentSessionCreatingRequestCardTdsType) *NilPaymentSessionCreatingRequestCardTdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestGuideMailSendFlag returns new OptNilPaymentSessionCreatingRequestGuideMailSendFlag with value set to v.
func NewOptNilPaymentSessionCreatingRequestGuideMailSendFlag(v PaymentSessionCreatingRequestGuideMailSendFlag) OptNilPaymentSessionCreatingRequestGuideMailSendFlag {
	return OptNilPaymentSessionCreatingRequestGuideMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestGuideMailSendFlag is optional nullable PaymentSessionCreatingRequestGuideMailSendFlag.
type OptNilPaymentSessionCreatingRequestGuideMailSendFlag struct {
	Value PaymentSessionCreatingRequestGuideMailSendFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestGuideMailSendFlag was set.
func (o OptNilPaymentSessionCreatingRequestGuideMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestGuideMailSendFlag) Reset() {
	var v PaymentSessionCreatingRequestGuideMailSendFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestGuideMailSendFlag) SetTo(v PaymentSessionCreatingRequestGuideMailSendFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentSessionCreatingRequestGuideMailSendFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentSessionCreatingRequestGuideMailSendFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentSessionCreatingRequestGuideMailSendFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestGuideMailSendFlag) Get() (v PaymentSessionCreatingRequestGuideMailSendFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestGuideMailSendFlag) Or(d PaymentSessionCreatingRequestGuideMailSendFlag) PaymentSessionCreatingRequestGuideMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestKonbini returns new OptNilPaymentSessionCreatingRequestKonbini with value set to v.
func NewOptNilPaymentSessionCreatingRequestKonbini(v PaymentSessionCreatingRequestKonbini) OptNilPaymentSessionCreatingRequestKonbini {
	return OptNilPaymentSessionCreatingRequestKonbini{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestKonbini is optional nullable PaymentSessionCreatingRequestKonbini.
type OptNilPaymentSessionCreatingRequestKonbini struct {
	Value PaymentSessionCreatingRequestKonbini
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestKonbini was set.
func (o OptNilPaymentSessionCreatingRequestKonbini) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestKonbini) Reset() {
	var v PaymentSessionCreatingRequestKonbini
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestKonbini) SetTo(v PaymentSessionCreatingRequestKonbini) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentSessionCreatingRequestKonbini) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentSessionCreatingRequestKonbini) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentSessionCreatingRequestKonbini
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestKonbini) Get() (v PaymentSessionCreatingRequestKonbini, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestKonbini) Or(d PaymentSessionCreatingRequestKonbini) PaymentSessionCreatingRequestKonbini {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestPaypay returns new OptNilPaymentSessionCreatingRequestPaypay with value set to v.
func NewOptNilPaymentSessionCreatingRequestPaypay(v PaymentSessionCreatingRequestPaypay) OptNilPaymentSessionCreatingRequestPaypay {
	return OptNilPaymentSessionCreatingRequestPaypay{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestPaypay is optional nullable PaymentSessionCreatingRequestPaypay.
type OptNilPaymentSessionCreatingRequestPaypay struct {
	Value PaymentSessionCreatingRequestPaypay
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestPaypay was set.
func (o OptNilPaymentSessionCreatingRequestPaypay) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestPaypay) Reset() {
	var v PaymentSessionCreatingRequestPaypay
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestPaypay) SetTo(v PaymentSessionCreatingRequestPaypay) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentSessionCreatingRequestPaypay) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentSessionCreatingRequestPaypay) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentSessionCreatingRequestPaypay
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestPaypay) Get() (v PaymentSessionCreatingRequestPaypay, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestPaypay) Or(d PaymentSessionCreatingRequestPaypay) PaymentSessionCreatingRequestPaypay {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestThanksMailSendFlag returns new OptNilPaymentSessionCreatingRequestThanksMailSendFlag with value set to v.
func NewOptNilPaymentSessionCreatingRequestThanksMailSendFlag(v PaymentSessionCreatingRequestThanksMailSendFlag) OptNilPaymentSessionCreatingRequestThanksMailSendFlag {
	return OptNilPaymentSessionCreatingRequestThanksMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestThanksMailSendFlag is optional nullable PaymentSessionCreatingRequestThanksMailSendFlag.
type OptNilPaymentSessionCreatingRequestThanksMailSendFlag struct {
	Value PaymentSessionCreatingRequestThanksMailSendFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestThanksMailSendFlag was set.
func (o OptNilPaymentSessionCreatingRequestThanksMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestThanksMailSendFlag) Reset() {
	var v PaymentSessionCreatingRequestThanksMailSendFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestThanksMailSendFlag) SetTo(v PaymentSessionCreatingRequestThanksMailSendFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentSessionCreatingRequestThanksMailSendFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentSessionCreatingRequestThanksMailSendFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentSessionCreatingRequestThanksMailSendFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestThanksMailSendFlag) Get() (v PaymentSessionCreatingRequestThanksMailSendFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestThanksMailSendFlag) Or(d PaymentSessionCreatingRequestThanksMailSendFlag) PaymentSessionCreatingRequestThanksMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray returns new OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray with value set to v.
func NewOptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray(v []PaymentSessionCreatingRequestTransactionPayTypeItem) OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray {
	return OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray is optional nullable []PaymentSessionCreatingRequestTransactionPayTypeItem.
type OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray struct {
	Value []PaymentSessionCreatingRequestTransactionPayTypeItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray was set.
func (o OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) Reset() {
	var v []PaymentSessionCreatingRequestTransactionPayTypeItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) SetTo(v []PaymentSessionCreatingRequestTransactionPayTypeItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []PaymentSessionCreatingRequestTransactionPayTypeItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) Get() (v []PaymentSessionCreatingRequestTransactionPayTypeItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) Or(d []PaymentSessionCreatingRequestTransactionPayTypeItem) []PaymentSessionCreatingRequestTransactionPayTypeItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPaymentSessionCreatingResponsePaypayJobCode returns new OptNilPaymentSessionCreatingResponsePaypayJobCode with value set to v.
func NewOptNilPaymentSessionCreatingResponsePaypayJobCode(v PaymentSessionCreatingResponsePaypayJobCode) OptNilPaymentSessionCreatingResponsePaypayJobCode {
	return OptNilPaymentSessionCreatingResponsePaypayJobCode{
		Value: v,
		Set:   true,
	}
}

// OptNilPaymentSessionCreatingResponsePaypayJobCode is optional nullable PaymentSessionCreatingResponsePaypayJobCode.
type OptNilPaymentSessionCreatingResponsePaypayJobCode struct {
	Value PaymentSessionCreatingResponsePaypayJobCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPaymentSessionCreatingResponsePaypayJobCode was set.
func (o OptNilPaymentSessionCreatingResponsePaypayJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPaymentSessionCreatingResponsePaypayJobCode) Reset() {
	var v PaymentSessionCreatingResponsePaypayJobCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPaymentSessionCreatingResponsePaypayJobCode) SetTo(v PaymentSessionCreatingResponsePaypayJobCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPaymentSessionCreatingResponsePaypayJobCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPaymentSessionCreatingResponsePaypayJobCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v PaymentSessionCreatingResponsePaypayJobCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPaymentSessionCreatingResponsePaypayJobCode) Get() (v PaymentSessionCreatingResponsePaypayJobCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPaymentSessionCreatingResponsePaypayJobCode) Or(d PaymentSessionCreatingResponsePaypayJobCode) PaymentSessionCreatingResponsePaypayJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPlatformRateConfigPaypayContentCategoryType returns new OptNilPlatformRateConfigPaypayContentCategoryType with value set to v.
func NewOptNilPlatformRateConfigPaypayContentCategoryType(v PlatformRateConfigPaypayContentCategoryType) OptNilPlatformRateConfigPaypayContentCategoryType {
	return OptNilPlatformRateConfigPaypayContentCategoryType{
		Value: v,
		Set:   true,
	}
}

// OptNilPlatformRateConfigPaypayContentCategoryType is optional nullable PlatformRateConfigPaypayContentCategoryType.
type OptNilPlatformRateConfigPaypayContentCategoryType struct {
	Value PlatformRateConfigPaypayContentCategoryType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPlatformRateConfigPaypayContentCategoryType was set.
func (o OptNilPlatformRateConfigPaypayContentCategoryType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPlatformRateConfigPaypayContentCategoryType) Reset() {
	var v PlatformRateConfigPaypayContentCategoryType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPlatformRateConfigPaypayContentCategoryType) SetTo(v PlatformRateConfigPaypayContentCategoryType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPlatformRateConfigPaypayContentCategoryType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPlatformRateConfigPaypayContentCategoryType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PlatformRateConfigPaypayContentCategoryType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPlatformRateConfigPaypayContentCategoryType) Get() (v PlatformRateConfigPaypayContentCategoryType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPlatformRateConfigPaypayContentCategoryType) Or(d PlatformRateConfigPaypayContentCategoryType) PlatformRateConfigPaypayContentCategoryType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag returns new OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag with value set to v.
func NewOptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag(v PlatformShopRetrievingResponseAPIKeyDisplayFlag) OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag {
	return OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag is optional nullable PlatformShopRetrievingResponseAPIKeyDisplayFlag.
type OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag struct {
	Value PlatformShopRetrievingResponseAPIKeyDisplayFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag was set.
func (o OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) Reset() {
	var v PlatformShopRetrievingResponseAPIKeyDisplayFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) SetTo(v PlatformShopRetrievingResponseAPIKeyDisplayFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v PlatformShopRetrievingResponseAPIKeyDisplayFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) Get() (v PlatformShopRetrievingResponseAPIKeyDisplayFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) Or(d PlatformShopRetrievingResponseAPIKeyDisplayFlag) PlatformShopRetrievingResponseAPIKeyDisplayFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPlatformShopRetrievingResponseSharedCustomerFlag returns new OptNilPlatformShopRetrievingResponseSharedCustomerFlag with value set to v.
func NewOptNilPlatformShopRetrievingResponseSharedCustomerFlag(v PlatformShopRetrievingResponseSharedCustomerFlag) OptNilPlatformShopRetrievingResponseSharedCustomerFlag {
	return OptNilPlatformShopRetrievingResponseSharedCustomerFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilPlatformShopRetrievingResponseSharedCustomerFlag is optional nullable PlatformShopRetrievingResponseSharedCustomerFlag.
type OptNilPlatformShopRetrievingResponseSharedCustomerFlag struct {
	Value PlatformShopRetrievingResponseSharedCustomerFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPlatformShopRetrievingResponseSharedCustomerFlag was set.
func (o OptNilPlatformShopRetrievingResponseSharedCustomerFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPlatformShopRetrievingResponseSharedCustomerFlag) Reset() {
	var v PlatformShopRetrievingResponseSharedCustomerFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPlatformShopRetrievingResponseSharedCustomerFlag) SetTo(v PlatformShopRetrievingResponseSharedCustomerFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPlatformShopRetrievingResponseSharedCustomerFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPlatformShopRetrievingResponseSharedCustomerFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v PlatformShopRetrievingResponseSharedCustomerFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPlatformShopRetrievingResponseSharedCustomerFlag) Get() (v PlatformShopRetrievingResponseSharedCustomerFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPlatformShopRetrievingResponseSharedCustomerFlag) Or(d PlatformShopRetrievingResponseSharedCustomerFlag) PlatformShopRetrievingResponseSharedCustomerFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag returns new OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag with value set to v.
func NewOptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag(v PlatformShopUpdatingResponseAPIKeyDisplayFlag) OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag {
	return OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag is optional nullable PlatformShopUpdatingResponseAPIKeyDisplayFlag.
type OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag struct {
	Value PlatformShopUpdatingResponseAPIKeyDisplayFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag was set.
func (o OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) Reset() {
	var v PlatformShopUpdatingResponseAPIKeyDisplayFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) SetTo(v PlatformShopUpdatingResponseAPIKeyDisplayFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v PlatformShopUpdatingResponseAPIKeyDisplayFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) Get() (v PlatformShopUpdatingResponseAPIKeyDisplayFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) Or(d PlatformShopUpdatingResponseAPIKeyDisplayFlag) PlatformShopUpdatingResponseAPIKeyDisplayFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPlatformShopUpdatingResponseSharedCustomerFlag returns new OptNilPlatformShopUpdatingResponseSharedCustomerFlag with value set to v.
func NewOptNilPlatformShopUpdatingResponseSharedCustomerFlag(v PlatformShopUpdatingResponseSharedCustomerFlag) OptNilPlatformShopUpdatingResponseSharedCustomerFlag {
	return OptNilPlatformShopUpdatingResponseSharedCustomerFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilPlatformShopUpdatingResponseSharedCustomerFlag is optional nullable PlatformShopUpdatingResponseSharedCustomerFlag.
type OptNilPlatformShopUpdatingResponseSharedCustomerFlag struct {
	Value PlatformShopUpdatingResponseSharedCustomerFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPlatformShopUpdatingResponseSharedCustomerFlag was set.
func (o OptNilPlatformShopUpdatingResponseSharedCustomerFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPlatformShopUpdatingResponseSharedCustomerFlag) Reset() {
	var v PlatformShopUpdatingResponseSharedCustomerFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPlatformShopUpdatingResponseSharedCustomerFlag) SetTo(v PlatformShopUpdatingResponseSharedCustomerFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPlatformShopUpdatingResponseSharedCustomerFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPlatformShopUpdatingResponseSharedCustomerFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v PlatformShopUpdatingResponseSharedCustomerFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPlatformShopUpdatingResponseSharedCustomerFlag) Get() (v PlatformShopUpdatingResponseSharedCustomerFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPlatformShopUpdatingResponseSharedCustomerFlag) Or(d PlatformShopUpdatingResponseSharedCustomerFlag) PlatformShopUpdatingResponseSharedCustomerFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK0Brand returns new OptNilRetrievePaymentOK0Brand with value set to v.
func NewOptNilRetrievePaymentOK0Brand(v RetrievePaymentOK0Brand) OptNilRetrievePaymentOK0Brand {
	return OptNilRetrievePaymentOK0Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK0Brand is optional nullable RetrievePaymentOK0Brand.
type OptNilRetrievePaymentOK0Brand struct {
	Value RetrievePaymentOK0Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK0Brand was set.
func (o OptNilRetrievePaymentOK0Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK0Brand) Reset() {
	var v RetrievePaymentOK0Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK0Brand) SetTo(v RetrievePaymentOK0Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK0Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK0Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK0Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK0Brand) Get() (v RetrievePaymentOK0Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK0Brand) Or(d RetrievePaymentOK0Brand) RetrievePaymentOK0Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK0PayTimes returns new OptNilRetrievePaymentOK0PayTimes with value set to v.
func NewOptNilRetrievePaymentOK0PayTimes(v RetrievePaymentOK0PayTimes) OptNilRetrievePaymentOK0PayTimes {
	return OptNilRetrievePaymentOK0PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK0PayTimes is optional nullable RetrievePaymentOK0PayTimes.
type OptNilRetrievePaymentOK0PayTimes struct {
	Value RetrievePaymentOK0PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK0PayTimes was set.
func (o OptNilRetrievePaymentOK0PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK0PayTimes) Reset() {
	var v RetrievePaymentOK0PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK0PayTimes) SetTo(v RetrievePaymentOK0PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK0PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK0PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK0PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK0PayTimes) Get() (v RetrievePaymentOK0PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK0PayTimes) Or(d RetrievePaymentOK0PayTimes) RetrievePaymentOK0PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK0Tds2Status returns new OptNilRetrievePaymentOK0Tds2Status with value set to v.
func NewOptNilRetrievePaymentOK0Tds2Status(v RetrievePaymentOK0Tds2Status) OptNilRetrievePaymentOK0Tds2Status {
	return OptNilRetrievePaymentOK0Tds2Status{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK0Tds2Status is optional nullable RetrievePaymentOK0Tds2Status.
type OptNilRetrievePaymentOK0Tds2Status struct {
	Value RetrievePaymentOK0Tds2Status
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK0Tds2Status was set.
func (o OptNilRetrievePaymentOK0Tds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK0Tds2Status) Reset() {
	var v RetrievePaymentOK0Tds2Status
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK0Tds2Status) SetTo(v RetrievePaymentOK0Tds2Status) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK0Tds2Status) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK0Tds2Status) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK0Tds2Status
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK0Tds2Status) Get() (v RetrievePaymentOK0Tds2Status, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK0Tds2Status) Or(d RetrievePaymentOK0Tds2Status) RetrievePaymentOK0Tds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK0Tds2Type returns new OptNilRetrievePaymentOK0Tds2Type with value set to v.
func NewOptNilRetrievePaymentOK0Tds2Type(v *NilRetrievePaymentOK0Tds2Type) OptNilRetrievePaymentOK0Tds2Type {
	return OptNilRetrievePaymentOK0Tds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK0Tds2Type is optional *NilRetrievePaymentOK0Tds2Type.
type OptNilRetrievePaymentOK0Tds2Type struct {
	Value *NilRetrievePaymentOK0Tds2Type
	Set   bool
}

// IsSet returns true if OptNilRetrievePaymentOK0Tds2Type was set.
func (o OptNilRetrievePaymentOK0Tds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK0Tds2Type) Reset() {
	var v *NilRetrievePaymentOK0Tds2Type
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK0Tds2Type) SetTo(v *NilRetrievePaymentOK0Tds2Type) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK0Tds2Type) Get() (v *NilRetrievePaymentOK0Tds2Type, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK0Tds2Type) Or(d *NilRetrievePaymentOK0Tds2Type) *NilRetrievePaymentOK0Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK0TdsType returns new OptNilRetrievePaymentOK0TdsType with value set to v.
func NewOptNilRetrievePaymentOK0TdsType(v *NilRetrievePaymentOK0TdsType) OptNilRetrievePaymentOK0TdsType {
	return OptNilRetrievePaymentOK0TdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK0TdsType is optional *NilRetrievePaymentOK0TdsType.
type OptNilRetrievePaymentOK0TdsType struct {
	Value *NilRetrievePaymentOK0TdsType
	Set   bool
}

// IsSet returns true if OptNilRetrievePaymentOK0TdsType was set.
func (o OptNilRetrievePaymentOK0TdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK0TdsType) Reset() {
	var v *NilRetrievePaymentOK0TdsType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK0TdsType) SetTo(v *NilRetrievePaymentOK0TdsType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK0TdsType) Get() (v *NilRetrievePaymentOK0TdsType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK0TdsType) Or(d *NilRetrievePaymentOK0TdsType) *NilRetrievePaymentOK0TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK1Brand returns new OptNilRetrievePaymentOK1Brand with value set to v.
func NewOptNilRetrievePaymentOK1Brand(v RetrievePaymentOK1Brand) OptNilRetrievePaymentOK1Brand {
	return OptNilRetrievePaymentOK1Brand{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK1Brand is optional nullable RetrievePaymentOK1Brand.
type OptNilRetrievePaymentOK1Brand struct {
	Value RetrievePaymentOK1Brand
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK1Brand was set.
func (o OptNilRetrievePaymentOK1Brand) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK1Brand) Reset() {
	var v RetrievePaymentOK1Brand
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK1Brand) SetTo(v RetrievePaymentOK1Brand) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK1Brand) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK1Brand) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK1Brand
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK1Brand) Get() (v RetrievePaymentOK1Brand, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK1Brand) Or(d RetrievePaymentOK1Brand) RetrievePaymentOK1Brand {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK1PayTimes returns new OptNilRetrievePaymentOK1PayTimes with value set to v.
func NewOptNilRetrievePaymentOK1PayTimes(v RetrievePaymentOK1PayTimes) OptNilRetrievePaymentOK1PayTimes {
	return OptNilRetrievePaymentOK1PayTimes{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK1PayTimes is optional nullable RetrievePaymentOK1PayTimes.
type OptNilRetrievePaymentOK1PayTimes struct {
	Value RetrievePaymentOK1PayTimes
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK1PayTimes was set.
func (o OptNilRetrievePaymentOK1PayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK1PayTimes) Reset() {
	var v RetrievePaymentOK1PayTimes
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK1PayTimes) SetTo(v RetrievePaymentOK1PayTimes) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK1PayTimes) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK1PayTimes) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK1PayTimes
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK1PayTimes) Get() (v RetrievePaymentOK1PayTimes, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK1PayTimes) Or(d RetrievePaymentOK1PayTimes) RetrievePaymentOK1PayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK2BarcodeFormat returns new OptNilRetrievePaymentOK2BarcodeFormat with value set to v.
func NewOptNilRetrievePaymentOK2BarcodeFormat(v RetrievePaymentOK2BarcodeFormat) OptNilRetrievePaymentOK2BarcodeFormat {
	return OptNilRetrievePaymentOK2BarcodeFormat{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK2BarcodeFormat is optional nullable RetrievePaymentOK2BarcodeFormat.
type OptNilRetrievePaymentOK2BarcodeFormat struct {
	Value RetrievePaymentOK2BarcodeFormat
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK2BarcodeFormat was set.
func (o OptNilRetrievePaymentOK2BarcodeFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK2BarcodeFormat) Reset() {
	var v RetrievePaymentOK2BarcodeFormat
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK2BarcodeFormat) SetTo(v RetrievePaymentOK2BarcodeFormat) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK2BarcodeFormat) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK2BarcodeFormat) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK2BarcodeFormat
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK2BarcodeFormat) Get() (v RetrievePaymentOK2BarcodeFormat, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK2BarcodeFormat) Or(d RetrievePaymentOK2BarcodeFormat) RetrievePaymentOK2BarcodeFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK2KonbiniCode returns new OptNilRetrievePaymentOK2KonbiniCode with value set to v.
func NewOptNilRetrievePaymentOK2KonbiniCode(v RetrievePaymentOK2KonbiniCode) OptNilRetrievePaymentOK2KonbiniCode {
	return OptNilRetrievePaymentOK2KonbiniCode{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK2KonbiniCode is optional nullable RetrievePaymentOK2KonbiniCode.
type OptNilRetrievePaymentOK2KonbiniCode struct {
	Value RetrievePaymentOK2KonbiniCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK2KonbiniCode was set.
func (o OptNilRetrievePaymentOK2KonbiniCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK2KonbiniCode) Reset() {
	var v RetrievePaymentOK2KonbiniCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK2KonbiniCode) SetTo(v RetrievePaymentOK2KonbiniCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK2KonbiniCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK2KonbiniCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK2KonbiniCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK2KonbiniCode) Get() (v RetrievePaymentOK2KonbiniCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK2KonbiniCode) Or(d RetrievePaymentOK2KonbiniCode) RetrievePaymentOK2KonbiniCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK3RedirectType returns new OptNilRetrievePaymentOK3RedirectType with value set to v.
func NewOptNilRetrievePaymentOK3RedirectType(v RetrievePaymentOK3RedirectType) OptNilRetrievePaymentOK3RedirectType {
	return OptNilRetrievePaymentOK3RedirectType{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK3RedirectType is optional nullable RetrievePaymentOK3RedirectType.
type OptNilRetrievePaymentOK3RedirectType struct {
	Value RetrievePaymentOK3RedirectType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK3RedirectType was set.
func (o OptNilRetrievePaymentOK3RedirectType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK3RedirectType) Reset() {
	var v RetrievePaymentOK3RedirectType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK3RedirectType) SetTo(v RetrievePaymentOK3RedirectType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK3RedirectType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK3RedirectType) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK3RedirectType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK3RedirectType) Get() (v RetrievePaymentOK3RedirectType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK3RedirectType) Or(d RetrievePaymentOK3RedirectType) RetrievePaymentOK3RedirectType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePaymentOK4ResultCode returns new OptNilRetrievePaymentOK4ResultCode with value set to v.
func NewOptNilRetrievePaymentOK4ResultCode(v RetrievePaymentOK4ResultCode) OptNilRetrievePaymentOK4ResultCode {
	return OptNilRetrievePaymentOK4ResultCode{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePaymentOK4ResultCode is optional nullable RetrievePaymentOK4ResultCode.
type OptNilRetrievePaymentOK4ResultCode struct {
	Value RetrievePaymentOK4ResultCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePaymentOK4ResultCode was set.
func (o OptNilRetrievePaymentOK4ResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePaymentOK4ResultCode) Reset() {
	var v RetrievePaymentOK4ResultCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePaymentOK4ResultCode) SetTo(v RetrievePaymentOK4ResultCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePaymentOK4ResultCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePaymentOK4ResultCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePaymentOK4ResultCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePaymentOK4ResultCode) Get() (v RetrievePaymentOK4ResultCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePaymentOK4ResultCode) Or(d RetrievePaymentOK4ResultCode) RetrievePaymentOK4ResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilRetrievePlanListQueryDeleteFlag returns new OptNilRetrievePlanListQueryDeleteFlag with value set to v.
func NewOptNilRetrievePlanListQueryDeleteFlag(v RetrievePlanListQueryDeleteFlag) OptNilRetrievePlanListQueryDeleteFlag {
	return OptNilRetrievePlanListQueryDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilRetrievePlanListQueryDeleteFlag is optional nullable RetrievePlanListQueryDeleteFlag.
type OptNilRetrievePlanListQueryDeleteFlag struct {
	Value RetrievePlanListQueryDeleteFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilRetrievePlanListQueryDeleteFlag was set.
func (o OptNilRetrievePlanListQueryDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilRetrievePlanListQueryDeleteFlag) Reset() {
	var v RetrievePlanListQueryDeleteFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilRetrievePlanListQueryDeleteFlag) SetTo(v RetrievePlanListQueryDeleteFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilRetrievePlanListQueryDeleteFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilRetrievePlanListQueryDeleteFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v RetrievePlanListQueryDeleteFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilRetrievePlanListQueryDeleteFlag) Get() (v RetrievePlanListQueryDeleteFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilRetrievePlanListQueryDeleteFlag) Or(d RetrievePlanListQueryDeleteFlag) RetrievePlanListQueryDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShopAPIKeyDisplayFlag returns new OptNilShopAPIKeyDisplayFlag with value set to v.
func NewOptNilShopAPIKeyDisplayFlag(v ShopAPIKeyDisplayFlag) OptNilShopAPIKeyDisplayFlag {
	return OptNilShopAPIKeyDisplayFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilShopAPIKeyDisplayFlag is optional nullable ShopAPIKeyDisplayFlag.
type OptNilShopAPIKeyDisplayFlag struct {
	Value ShopAPIKeyDisplayFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShopAPIKeyDisplayFlag was set.
func (o OptNilShopAPIKeyDisplayFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShopAPIKeyDisplayFlag) Reset() {
	var v ShopAPIKeyDisplayFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShopAPIKeyDisplayFlag) SetTo(v ShopAPIKeyDisplayFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShopAPIKeyDisplayFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShopAPIKeyDisplayFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v ShopAPIKeyDisplayFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShopAPIKeyDisplayFlag) Get() (v ShopAPIKeyDisplayFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShopAPIKeyDisplayFlag) Or(d ShopAPIKeyDisplayFlag) ShopAPIKeyDisplayFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShopSharedCustomerFlag returns new OptNilShopSharedCustomerFlag with value set to v.
func NewOptNilShopSharedCustomerFlag(v ShopSharedCustomerFlag) OptNilShopSharedCustomerFlag {
	return OptNilShopSharedCustomerFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilShopSharedCustomerFlag is optional nullable ShopSharedCustomerFlag.
type OptNilShopSharedCustomerFlag struct {
	Value ShopSharedCustomerFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShopSharedCustomerFlag was set.
func (o OptNilShopSharedCustomerFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShopSharedCustomerFlag) Reset() {
	var v ShopSharedCustomerFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShopSharedCustomerFlag) SetTo(v ShopSharedCustomerFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShopSharedCustomerFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShopSharedCustomerFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v ShopSharedCustomerFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShopSharedCustomerFlag) Get() (v ShopSharedCustomerFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShopSharedCustomerFlag) Or(d ShopSharedCustomerFlag) ShopSharedCustomerFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTds2Type returns new OptNilTds2Type with value set to v.
func NewOptNilTds2Type(v Tds2Type) OptNilTds2Type {
	return OptNilTds2Type{
		Value: v,
		Set:   true,
	}
}

// OptNilTds2Type is optional nullable Tds2Type.
type OptNilTds2Type struct {
	Value Tds2Type
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTds2Type was set.
func (o OptNilTds2Type) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTds2Type) Reset() {
	var v Tds2Type
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTds2Type) SetTo(v Tds2Type) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTds2Type) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTds2Type) SetToNull() {
	o.Set = true
	o.Null = true
	var v Tds2Type
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTds2Type) Get() (v Tds2Type, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTds2Type) Or(d Tds2Type) Tds2Type {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTdsType returns new OptNilTdsType with value set to v.
func NewOptNilTdsType(v TdsType) OptNilTdsType {
	return OptNilTdsType{
		Value: v,
		Set:   true,
	}
}

// OptNilTdsType is optional nullable TdsType.
type OptNilTdsType struct {
	Value TdsType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTdsType was set.
func (o OptNilTdsType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTdsType) Reset() {
	var v TdsType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTdsType) SetTo(v TdsType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTdsType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTdsType) SetToNull() {
	o.Set = true
	o.Null = true
	var v TdsType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTdsType) Get() (v TdsType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTdsType) Or(d TdsType) TdsType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTenantShopRetrievingResponseAPIKeyDisplayFlag returns new OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag with value set to v.
func NewOptNilTenantShopRetrievingResponseAPIKeyDisplayFlag(v TenantShopRetrievingResponseAPIKeyDisplayFlag) OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag {
	return OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag is optional nullable TenantShopRetrievingResponseAPIKeyDisplayFlag.
type OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag struct {
	Value TenantShopRetrievingResponseAPIKeyDisplayFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag was set.
func (o OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) Reset() {
	var v TenantShopRetrievingResponseAPIKeyDisplayFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) SetTo(v TenantShopRetrievingResponseAPIKeyDisplayFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v TenantShopRetrievingResponseAPIKeyDisplayFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) Get() (v TenantShopRetrievingResponseAPIKeyDisplayFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) Or(d TenantShopRetrievingResponseAPIKeyDisplayFlag) TenantShopRetrievingResponseAPIKeyDisplayFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTenantShopRetrievingResponseSharedCustomerFlag returns new OptNilTenantShopRetrievingResponseSharedCustomerFlag with value set to v.
func NewOptNilTenantShopRetrievingResponseSharedCustomerFlag(v TenantShopRetrievingResponseSharedCustomerFlag) OptNilTenantShopRetrievingResponseSharedCustomerFlag {
	return OptNilTenantShopRetrievingResponseSharedCustomerFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilTenantShopRetrievingResponseSharedCustomerFlag is optional nullable TenantShopRetrievingResponseSharedCustomerFlag.
type OptNilTenantShopRetrievingResponseSharedCustomerFlag struct {
	Value TenantShopRetrievingResponseSharedCustomerFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTenantShopRetrievingResponseSharedCustomerFlag was set.
func (o OptNilTenantShopRetrievingResponseSharedCustomerFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTenantShopRetrievingResponseSharedCustomerFlag) Reset() {
	var v TenantShopRetrievingResponseSharedCustomerFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTenantShopRetrievingResponseSharedCustomerFlag) SetTo(v TenantShopRetrievingResponseSharedCustomerFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTenantShopRetrievingResponseSharedCustomerFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTenantShopRetrievingResponseSharedCustomerFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v TenantShopRetrievingResponseSharedCustomerFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTenantShopRetrievingResponseSharedCustomerFlag) Get() (v TenantShopRetrievingResponseSharedCustomerFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTenantShopRetrievingResponseSharedCustomerFlag) Or(d TenantShopRetrievingResponseSharedCustomerFlag) TenantShopRetrievingResponseSharedCustomerFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTenantShopUpdatingResponseAPIKeyDisplayFlag returns new OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag with value set to v.
func NewOptNilTenantShopUpdatingResponseAPIKeyDisplayFlag(v TenantShopUpdatingResponseAPIKeyDisplayFlag) OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag {
	return OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag is optional nullable TenantShopUpdatingResponseAPIKeyDisplayFlag.
type OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag struct {
	Value TenantShopUpdatingResponseAPIKeyDisplayFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag was set.
func (o OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) Reset() {
	var v TenantShopUpdatingResponseAPIKeyDisplayFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) SetTo(v TenantShopUpdatingResponseAPIKeyDisplayFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v TenantShopUpdatingResponseAPIKeyDisplayFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) Get() (v TenantShopUpdatingResponseAPIKeyDisplayFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) Or(d TenantShopUpdatingResponseAPIKeyDisplayFlag) TenantShopUpdatingResponseAPIKeyDisplayFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTenantShopUpdatingResponseSharedCustomerFlag returns new OptNilTenantShopUpdatingResponseSharedCustomerFlag with value set to v.
func NewOptNilTenantShopUpdatingResponseSharedCustomerFlag(v TenantShopUpdatingResponseSharedCustomerFlag) OptNilTenantShopUpdatingResponseSharedCustomerFlag {
	return OptNilTenantShopUpdatingResponseSharedCustomerFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilTenantShopUpdatingResponseSharedCustomerFlag is optional nullable TenantShopUpdatingResponseSharedCustomerFlag.
type OptNilTenantShopUpdatingResponseSharedCustomerFlag struct {
	Value TenantShopUpdatingResponseSharedCustomerFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTenantShopUpdatingResponseSharedCustomerFlag was set.
func (o OptNilTenantShopUpdatingResponseSharedCustomerFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTenantShopUpdatingResponseSharedCustomerFlag) Reset() {
	var v TenantShopUpdatingResponseSharedCustomerFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTenantShopUpdatingResponseSharedCustomerFlag) SetTo(v TenantShopUpdatingResponseSharedCustomerFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTenantShopUpdatingResponseSharedCustomerFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTenantShopUpdatingResponseSharedCustomerFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v TenantShopUpdatingResponseSharedCustomerFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTenantShopUpdatingResponseSharedCustomerFlag) Get() (v TenantShopUpdatingResponseSharedCustomerFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTenantShopUpdatingResponseSharedCustomerFlag) Or(d TenantShopUpdatingResponseSharedCustomerFlag) TenantShopUpdatingResponseSharedCustomerFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventPaymentDirectDebitResultCode returns new OptNilWebhookEventPaymentDirectDebitResultCode with value set to v.
func NewOptNilWebhookEventPaymentDirectDebitResultCode(v WebhookEventPaymentDirectDebitResultCode) OptNilWebhookEventPaymentDirectDebitResultCode {
	return OptNilWebhookEventPaymentDirectDebitResultCode{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventPaymentDirectDebitResultCode is optional nullable WebhookEventPaymentDirectDebitResultCode.
type OptNilWebhookEventPaymentDirectDebitResultCode struct {
	Value WebhookEventPaymentDirectDebitResultCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventPaymentDirectDebitResultCode was set.
func (o OptNilWebhookEventPaymentDirectDebitResultCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventPaymentDirectDebitResultCode) Reset() {
	var v WebhookEventPaymentDirectDebitResultCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventPaymentDirectDebitResultCode) SetTo(v WebhookEventPaymentDirectDebitResultCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventPaymentDirectDebitResultCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventPaymentDirectDebitResultCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventPaymentDirectDebitResultCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventPaymentDirectDebitResultCode) Get() (v WebhookEventPaymentDirectDebitResultCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventPaymentDirectDebitResultCode) Or(d WebhookEventPaymentDirectDebitResultCode) WebhookEventPaymentDirectDebitResultCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag returns new OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag with value set to v.
func NewOptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag(v WebhookEventPaymentKonbiniCancelOverpaymentFlag) OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag {
	return OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag is optional nullable WebhookEventPaymentKonbiniCancelOverpaymentFlag.
type OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag struct {
	Value WebhookEventPaymentKonbiniCancelOverpaymentFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag was set.
func (o OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) Reset() {
	var v WebhookEventPaymentKonbiniCancelOverpaymentFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) SetTo(v WebhookEventPaymentKonbiniCancelOverpaymentFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventPaymentKonbiniCancelOverpaymentFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) Get() (v WebhookEventPaymentKonbiniCancelOverpaymentFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) Or(d WebhookEventPaymentKonbiniCancelOverpaymentFlag) WebhookEventPaymentKonbiniCancelOverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventPaymentKonbiniKonbiniCode returns new OptNilWebhookEventPaymentKonbiniKonbiniCode with value set to v.
func NewOptNilWebhookEventPaymentKonbiniKonbiniCode(v WebhookEventPaymentKonbiniKonbiniCode) OptNilWebhookEventPaymentKonbiniKonbiniCode {
	return OptNilWebhookEventPaymentKonbiniKonbiniCode{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventPaymentKonbiniKonbiniCode is optional nullable WebhookEventPaymentKonbiniKonbiniCode.
type OptNilWebhookEventPaymentKonbiniKonbiniCode struct {
	Value WebhookEventPaymentKonbiniKonbiniCode
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventPaymentKonbiniKonbiniCode was set.
func (o OptNilWebhookEventPaymentKonbiniKonbiniCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventPaymentKonbiniKonbiniCode) Reset() {
	var v WebhookEventPaymentKonbiniKonbiniCode
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventPaymentKonbiniKonbiniCode) SetTo(v WebhookEventPaymentKonbiniKonbiniCode) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventPaymentKonbiniKonbiniCode) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventPaymentKonbiniKonbiniCode) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventPaymentKonbiniKonbiniCode
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventPaymentKonbiniKonbiniCode) Get() (v WebhookEventPaymentKonbiniKonbiniCode, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventPaymentKonbiniKonbiniCode) Or(d WebhookEventPaymentKonbiniKonbiniCode) WebhookEventPaymentKonbiniKonbiniCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventPaymentKonbiniOverpaymentFlag returns new OptNilWebhookEventPaymentKonbiniOverpaymentFlag with value set to v.
func NewOptNilWebhookEventPaymentKonbiniOverpaymentFlag(v WebhookEventPaymentKonbiniOverpaymentFlag) OptNilWebhookEventPaymentKonbiniOverpaymentFlag {
	return OptNilWebhookEventPaymentKonbiniOverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventPaymentKonbiniOverpaymentFlag is optional nullable WebhookEventPaymentKonbiniOverpaymentFlag.
type OptNilWebhookEventPaymentKonbiniOverpaymentFlag struct {
	Value WebhookEventPaymentKonbiniOverpaymentFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventPaymentKonbiniOverpaymentFlag was set.
func (o OptNilWebhookEventPaymentKonbiniOverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventPaymentKonbiniOverpaymentFlag) Reset() {
	var v WebhookEventPaymentKonbiniOverpaymentFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventPaymentKonbiniOverpaymentFlag) SetTo(v WebhookEventPaymentKonbiniOverpaymentFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventPaymentKonbiniOverpaymentFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventPaymentKonbiniOverpaymentFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventPaymentKonbiniOverpaymentFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventPaymentKonbiniOverpaymentFlag) Get() (v WebhookEventPaymentKonbiniOverpaymentFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventPaymentKonbiniOverpaymentFlag) Or(d WebhookEventPaymentKonbiniOverpaymentFlag) WebhookEventPaymentKonbiniOverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventSubscriptionCardDefaultCardFlag returns new OptNilWebhookEventSubscriptionCardDefaultCardFlag with value set to v.
func NewOptNilWebhookEventSubscriptionCardDefaultCardFlag(v WebhookEventSubscriptionCardDefaultCardFlag) OptNilWebhookEventSubscriptionCardDefaultCardFlag {
	return OptNilWebhookEventSubscriptionCardDefaultCardFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventSubscriptionCardDefaultCardFlag is optional nullable WebhookEventSubscriptionCardDefaultCardFlag.
type OptNilWebhookEventSubscriptionCardDefaultCardFlag struct {
	Value WebhookEventSubscriptionCardDefaultCardFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventSubscriptionCardDefaultCardFlag was set.
func (o OptNilWebhookEventSubscriptionCardDefaultCardFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventSubscriptionCardDefaultCardFlag) Reset() {
	var v WebhookEventSubscriptionCardDefaultCardFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventSubscriptionCardDefaultCardFlag) SetTo(v WebhookEventSubscriptionCardDefaultCardFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventSubscriptionCardDefaultCardFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventSubscriptionCardDefaultCardFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventSubscriptionCardDefaultCardFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventSubscriptionCardDefaultCardFlag) Get() (v WebhookEventSubscriptionCardDefaultCardFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventSubscriptionCardDefaultCardFlag) Or(d WebhookEventSubscriptionCardDefaultCardFlag) WebhookEventSubscriptionCardDefaultCardFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventSubscriptionCardEndMonthFlag returns new OptNilWebhookEventSubscriptionCardEndMonthFlag with value set to v.
func NewOptNilWebhookEventSubscriptionCardEndMonthFlag(v WebhookEventSubscriptionCardEndMonthFlag) OptNilWebhookEventSubscriptionCardEndMonthFlag {
	return OptNilWebhookEventSubscriptionCardEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventSubscriptionCardEndMonthFlag is optional nullable WebhookEventSubscriptionCardEndMonthFlag.
type OptNilWebhookEventSubscriptionCardEndMonthFlag struct {
	Value WebhookEventSubscriptionCardEndMonthFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventSubscriptionCardEndMonthFlag was set.
func (o OptNilWebhookEventSubscriptionCardEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventSubscriptionCardEndMonthFlag) Reset() {
	var v WebhookEventSubscriptionCardEndMonthFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventSubscriptionCardEndMonthFlag) SetTo(v WebhookEventSubscriptionCardEndMonthFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventSubscriptionCardEndMonthFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventSubscriptionCardEndMonthFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventSubscriptionCardEndMonthFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventSubscriptionCardEndMonthFlag) Get() (v WebhookEventSubscriptionCardEndMonthFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventSubscriptionCardEndMonthFlag) Or(d WebhookEventSubscriptionCardEndMonthFlag) WebhookEventSubscriptionCardEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventSubscriptionDirectDebitDefaultFlag returns new OptNilWebhookEventSubscriptionDirectDebitDefaultFlag with value set to v.
func NewOptNilWebhookEventSubscriptionDirectDebitDefaultFlag(v WebhookEventSubscriptionDirectDebitDefaultFlag) OptNilWebhookEventSubscriptionDirectDebitDefaultFlag {
	return OptNilWebhookEventSubscriptionDirectDebitDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventSubscriptionDirectDebitDefaultFlag is optional nullable WebhookEventSubscriptionDirectDebitDefaultFlag.
type OptNilWebhookEventSubscriptionDirectDebitDefaultFlag struct {
	Value WebhookEventSubscriptionDirectDebitDefaultFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventSubscriptionDirectDebitDefaultFlag was set.
func (o OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) Reset() {
	var v WebhookEventSubscriptionDirectDebitDefaultFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) SetTo(v WebhookEventSubscriptionDirectDebitDefaultFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventSubscriptionDirectDebitDefaultFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) Get() (v WebhookEventSubscriptionDirectDebitDefaultFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) Or(d WebhookEventSubscriptionDirectDebitDefaultFlag) WebhookEventSubscriptionDirectDebitDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilWebhookEventSubscriptionDirectDebitEndMonthFlag returns new OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag with value set to v.
func NewOptNilWebhookEventSubscriptionDirectDebitEndMonthFlag(v WebhookEventSubscriptionDirectDebitEndMonthFlag) OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag {
	return OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag is optional nullable WebhookEventSubscriptionDirectDebitEndMonthFlag.
type OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag struct {
	Value WebhookEventSubscriptionDirectDebitEndMonthFlag
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag was set.
func (o OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) Reset() {
	var v WebhookEventSubscriptionDirectDebitEndMonthFlag
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) SetTo(v WebhookEventSubscriptionDirectDebitEndMonthFlag) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) SetToNull() {
	o.Set = true
	o.Null = true
	var v WebhookEventSubscriptionDirectDebitEndMonthFlag
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) Get() (v WebhookEventSubscriptionDirectDebitEndMonthFlag, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) Or(d WebhookEventSubscriptionDirectDebitEndMonthFlag) WebhookEventSubscriptionDirectDebitEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTContractsExaminationsRequestMultipartEnableImmediateUse returns new OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse with value set to v.
func NewOptPOSTContractsExaminationsRequestMultipartEnableImmediateUse(v POSTContractsExaminationsRequestMultipartEnableImmediateUse) OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse {
	return OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse{
		Value: v,
		Set:   true,
	}
}

// OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse is optional POSTContractsExaminationsRequestMultipartEnableImmediateUse.
type OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse struct {
	Value POSTContractsExaminationsRequestMultipartEnableImmediateUse
	Set   bool
}

// IsSet returns true if OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse was set.
func (o OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) Reset() {
	var v POSTContractsExaminationsRequestMultipartEnableImmediateUse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) SetTo(v POSTContractsExaminationsRequestMultipartEnableImmediateUse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) Get() (v POSTContractsExaminationsRequestMultipartEnableImmediateUse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) Or(d POSTContractsExaminationsRequestMultipartEnableImmediateUse) POSTContractsExaminationsRequestMultipartEnableImmediateUse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTContractsExaminationsResponseEnableImmediateUse returns new OptPOSTContractsExaminationsResponseEnableImmediateUse with value set to v.
func NewOptPOSTContractsExaminationsResponseEnableImmediateUse(v POSTContractsExaminationsResponseEnableImmediateUse) OptPOSTContractsExaminationsResponseEnableImmediateUse {
	return OptPOSTContractsExaminationsResponseEnableImmediateUse{
		Value: v,
		Set:   true,
	}
}

// OptPOSTContractsExaminationsResponseEnableImmediateUse is optional POSTContractsExaminationsResponseEnableImmediateUse.
type OptPOSTContractsExaminationsResponseEnableImmediateUse struct {
	Value POSTContractsExaminationsResponseEnableImmediateUse
	Set   bool
}

// IsSet returns true if OptPOSTContractsExaminationsResponseEnableImmediateUse was set.
func (o OptPOSTContractsExaminationsResponseEnableImmediateUse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTContractsExaminationsResponseEnableImmediateUse) Reset() {
	var v POSTContractsExaminationsResponseEnableImmediateUse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTContractsExaminationsResponseEnableImmediateUse) SetTo(v POSTContractsExaminationsResponseEnableImmediateUse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTContractsExaminationsResponseEnableImmediateUse) Get() (v POSTContractsExaminationsResponseEnableImmediateUse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTContractsExaminationsResponseEnableImmediateUse) Or(d POSTContractsExaminationsResponseEnableImmediateUse) POSTContractsExaminationsResponseEnableImmediateUse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTProviderReserveResponseReservationListItemProvider returns new OptPOSTProviderReserveResponseReservationListItemProvider with value set to v.
func NewOptPOSTProviderReserveResponseReservationListItemProvider(v POSTProviderReserveResponseReservationListItemProvider) OptPOSTProviderReserveResponseReservationListItemProvider {
	return OptPOSTProviderReserveResponseReservationListItemProvider{
		Value: v,
		Set:   true,
	}
}

// OptPOSTProviderReserveResponseReservationListItemProvider is optional POSTProviderReserveResponseReservationListItemProvider.
type OptPOSTProviderReserveResponseReservationListItemProvider struct {
	Value POSTProviderReserveResponseReservationListItemProvider
	Set   bool
}

// IsSet returns true if OptPOSTProviderReserveResponseReservationListItemProvider was set.
func (o OptPOSTProviderReserveResponseReservationListItemProvider) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTProviderReserveResponseReservationListItemProvider) Reset() {
	var v POSTProviderReserveResponseReservationListItemProvider
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTProviderReserveResponseReservationListItemProvider) SetTo(v POSTProviderReserveResponseReservationListItemProvider) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTProviderReserveResponseReservationListItemProvider) Get() (v POSTProviderReserveResponseReservationListItemProvider, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTProviderReserveResponseReservationListItemProvider) Or(d POSTProviderReserveResponseReservationListItemProvider) POSTProviderReserveResponseReservationListItemProvider {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTTenantEntriesResponseUserData returns new OptPOSTTenantEntriesResponseUserData with value set to v.
func NewOptPOSTTenantEntriesResponseUserData(v POSTTenantEntriesResponseUserData) OptPOSTTenantEntriesResponseUserData {
	return OptPOSTTenantEntriesResponseUserData{
		Value: v,
		Set:   true,
	}
}

// OptPOSTTenantEntriesResponseUserData is optional POSTTenantEntriesResponseUserData.
type OptPOSTTenantEntriesResponseUserData struct {
	Value POSTTenantEntriesResponseUserData
	Set   bool
}

// IsSet returns true if OptPOSTTenantEntriesResponseUserData was set.
func (o OptPOSTTenantEntriesResponseUserData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTTenantEntriesResponseUserData) Reset() {
	var v POSTTenantEntriesResponseUserData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTTenantEntriesResponseUserData) SetTo(v POSTTenantEntriesResponseUserData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTTenantEntriesResponseUserData) Get() (v POSTTenantEntriesResponseUserData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTTenantEntriesResponseUserData) Or(d POSTTenantEntriesResponseUserData) POSTTenantEntriesResponseUserData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTTenantEntriesResponseUserDataAccountStatus returns new OptPOSTTenantEntriesResponseUserDataAccountStatus with value set to v.
func NewOptPOSTTenantEntriesResponseUserDataAccountStatus(v POSTTenantEntriesResponseUserDataAccountStatus) OptPOSTTenantEntriesResponseUserDataAccountStatus {
	return OptPOSTTenantEntriesResponseUserDataAccountStatus{
		Value: v,
		Set:   true,
	}
}

// OptPOSTTenantEntriesResponseUserDataAccountStatus is optional POSTTenantEntriesResponseUserDataAccountStatus.
type OptPOSTTenantEntriesResponseUserDataAccountStatus struct {
	Value POSTTenantEntriesResponseUserDataAccountStatus
	Set   bool
}

// IsSet returns true if OptPOSTTenantEntriesResponseUserDataAccountStatus was set.
func (o OptPOSTTenantEntriesResponseUserDataAccountStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTTenantEntriesResponseUserDataAccountStatus) Reset() {
	var v POSTTenantEntriesResponseUserDataAccountStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTTenantEntriesResponseUserDataAccountStatus) SetTo(v POSTTenantEntriesResponseUserDataAccountStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTTenantEntriesResponseUserDataAccountStatus) Get() (v POSTTenantEntriesResponseUserDataAccountStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTTenantEntriesResponseUserDataAccountStatus) Or(d POSTTenantEntriesResponseUserDataAccountStatus) POSTTenantEntriesResponseUserDataAccountStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTTenantEntriesResponseUserDataInviteStatus returns new OptPOSTTenantEntriesResponseUserDataInviteStatus with value set to v.
func NewOptPOSTTenantEntriesResponseUserDataInviteStatus(v POSTTenantEntriesResponseUserDataInviteStatus) OptPOSTTenantEntriesResponseUserDataInviteStatus {
	return OptPOSTTenantEntriesResponseUserDataInviteStatus{
		Value: v,
		Set:   true,
	}
}

// OptPOSTTenantEntriesResponseUserDataInviteStatus is optional POSTTenantEntriesResponseUserDataInviteStatus.
type OptPOSTTenantEntriesResponseUserDataInviteStatus struct {
	Value POSTTenantEntriesResponseUserDataInviteStatus
	Set   bool
}

// IsSet returns true if OptPOSTTenantEntriesResponseUserDataInviteStatus was set.
func (o OptPOSTTenantEntriesResponseUserDataInviteStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTTenantEntriesResponseUserDataInviteStatus) Reset() {
	var v POSTTenantEntriesResponseUserDataInviteStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTTenantEntriesResponseUserDataInviteStatus) SetTo(v POSTTenantEntriesResponseUserDataInviteStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTTenantEntriesResponseUserDataInviteStatus) Get() (v POSTTenantEntriesResponseUserDataInviteStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTTenantEntriesResponseUserDataInviteStatus) Or(d POSTTenantEntriesResponseUserDataInviteStatus) POSTTenantEntriesResponseUserDataInviteStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTTenantEntriesResponseUserDataMailAuthStatus returns new OptPOSTTenantEntriesResponseUserDataMailAuthStatus with value set to v.
func NewOptPOSTTenantEntriesResponseUserDataMailAuthStatus(v POSTTenantEntriesResponseUserDataMailAuthStatus) OptPOSTTenantEntriesResponseUserDataMailAuthStatus {
	return OptPOSTTenantEntriesResponseUserDataMailAuthStatus{
		Value: v,
		Set:   true,
	}
}

// OptPOSTTenantEntriesResponseUserDataMailAuthStatus is optional POSTTenantEntriesResponseUserDataMailAuthStatus.
type OptPOSTTenantEntriesResponseUserDataMailAuthStatus struct {
	Value POSTTenantEntriesResponseUserDataMailAuthStatus
	Set   bool
}

// IsSet returns true if OptPOSTTenantEntriesResponseUserDataMailAuthStatus was set.
func (o OptPOSTTenantEntriesResponseUserDataMailAuthStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTTenantEntriesResponseUserDataMailAuthStatus) Reset() {
	var v POSTTenantEntriesResponseUserDataMailAuthStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTTenantEntriesResponseUserDataMailAuthStatus) SetTo(v POSTTenantEntriesResponseUserDataMailAuthStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTTenantEntriesResponseUserDataMailAuthStatus) Get() (v POSTTenantEntriesResponseUserDataMailAuthStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTTenantEntriesResponseUserDataMailAuthStatus) Or(d POSTTenantEntriesResponseUserDataMailAuthStatus) POSTTenantEntriesResponseUserDataMailAuthStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTTenantEntriesResponseUserDataPasswordLockStatus returns new OptPOSTTenantEntriesResponseUserDataPasswordLockStatus with value set to v.
func NewOptPOSTTenantEntriesResponseUserDataPasswordLockStatus(v POSTTenantEntriesResponseUserDataPasswordLockStatus) OptPOSTTenantEntriesResponseUserDataPasswordLockStatus {
	return OptPOSTTenantEntriesResponseUserDataPasswordLockStatus{
		Value: v,
		Set:   true,
	}
}

// OptPOSTTenantEntriesResponseUserDataPasswordLockStatus is optional POSTTenantEntriesResponseUserDataPasswordLockStatus.
type OptPOSTTenantEntriesResponseUserDataPasswordLockStatus struct {
	Value POSTTenantEntriesResponseUserDataPasswordLockStatus
	Set   bool
}

// IsSet returns true if OptPOSTTenantEntriesResponseUserDataPasswordLockStatus was set.
func (o OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) Reset() {
	var v POSTTenantEntriesResponseUserDataPasswordLockStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) SetTo(v POSTTenantEntriesResponseUserDataPasswordLockStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) Get() (v POSTTenantEntriesResponseUserDataPasswordLockStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) Or(d POSTTenantEntriesResponseUserDataPasswordLockStatus) POSTTenantEntriesResponseUserDataPasswordLockStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus returns new OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus with value set to v.
func NewOptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus(v POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus {
	return OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus{
		Value: v,
		Set:   true,
	}
}

// OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus is optional POSTTenantEntriesResponseUserDataTwoFactorAuthStatus.
type OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus struct {
	Value POSTTenantEntriesResponseUserDataTwoFactorAuthStatus
	Set   bool
}

// IsSet returns true if OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus was set.
func (o OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Reset() {
	var v POSTTenantEntriesResponseUserDataTwoFactorAuthStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) SetTo(v POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Get() (v POSTTenantEntriesResponseUserDataTwoFactorAuthStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Or(d POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) POSTTenantEntriesResponseUserDataTwoFactorAuthStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPOSTTenantEntriesResponseUserDataType returns new OptPOSTTenantEntriesResponseUserDataType with value set to v.
func NewOptPOSTTenantEntriesResponseUserDataType(v POSTTenantEntriesResponseUserDataType) OptPOSTTenantEntriesResponseUserDataType {
	return OptPOSTTenantEntriesResponseUserDataType{
		Value: v,
		Set:   true,
	}
}

// OptPOSTTenantEntriesResponseUserDataType is optional POSTTenantEntriesResponseUserDataType.
type OptPOSTTenantEntriesResponseUserDataType struct {
	Value POSTTenantEntriesResponseUserDataType
	Set   bool
}

// IsSet returns true if OptPOSTTenantEntriesResponseUserDataType was set.
func (o OptPOSTTenantEntriesResponseUserDataType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPOSTTenantEntriesResponseUserDataType) Reset() {
	var v POSTTenantEntriesResponseUserDataType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPOSTTenantEntriesResponseUserDataType) SetTo(v POSTTenantEntriesResponseUserDataType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPOSTTenantEntriesResponseUserDataType) Get() (v POSTTenantEntriesResponseUserDataType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPOSTTenantEntriesResponseUserDataType) Or(d POSTTenantEntriesResponseUserDataType) POSTTenantEntriesResponseUserDataType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkCreatingResponseDeleteFlag returns new OptPaymentBulkCreatingResponseDeleteFlag with value set to v.
func NewOptPaymentBulkCreatingResponseDeleteFlag(v PaymentBulkCreatingResponseDeleteFlag) OptPaymentBulkCreatingResponseDeleteFlag {
	return OptPaymentBulkCreatingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkCreatingResponseDeleteFlag is optional PaymentBulkCreatingResponseDeleteFlag.
type OptPaymentBulkCreatingResponseDeleteFlag struct {
	Value PaymentBulkCreatingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptPaymentBulkCreatingResponseDeleteFlag was set.
func (o OptPaymentBulkCreatingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkCreatingResponseDeleteFlag) Reset() {
	var v PaymentBulkCreatingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkCreatingResponseDeleteFlag) SetTo(v PaymentBulkCreatingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkCreatingResponseDeleteFlag) Get() (v PaymentBulkCreatingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkCreatingResponseDeleteFlag) Or(d PaymentBulkCreatingResponseDeleteFlag) PaymentBulkCreatingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkCreatingResponsePayType returns new OptPaymentBulkCreatingResponsePayType with value set to v.
func NewOptPaymentBulkCreatingResponsePayType(v PaymentBulkCreatingResponsePayType) OptPaymentBulkCreatingResponsePayType {
	return OptPaymentBulkCreatingResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkCreatingResponsePayType is optional PaymentBulkCreatingResponsePayType.
type OptPaymentBulkCreatingResponsePayType struct {
	Value PaymentBulkCreatingResponsePayType
	Set   bool
}

// IsSet returns true if OptPaymentBulkCreatingResponsePayType was set.
func (o OptPaymentBulkCreatingResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkCreatingResponsePayType) Reset() {
	var v PaymentBulkCreatingResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkCreatingResponsePayType) SetTo(v PaymentBulkCreatingResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkCreatingResponsePayType) Get() (v PaymentBulkCreatingResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkCreatingResponsePayType) Or(d PaymentBulkCreatingResponsePayType) PaymentBulkCreatingResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkCreatingResponseStatus returns new OptPaymentBulkCreatingResponseStatus with value set to v.
func NewOptPaymentBulkCreatingResponseStatus(v PaymentBulkCreatingResponseStatus) OptPaymentBulkCreatingResponseStatus {
	return OptPaymentBulkCreatingResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkCreatingResponseStatus is optional PaymentBulkCreatingResponseStatus.
type OptPaymentBulkCreatingResponseStatus struct {
	Value PaymentBulkCreatingResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentBulkCreatingResponseStatus was set.
func (o OptPaymentBulkCreatingResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkCreatingResponseStatus) Reset() {
	var v PaymentBulkCreatingResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkCreatingResponseStatus) SetTo(v PaymentBulkCreatingResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkCreatingResponseStatus) Get() (v PaymentBulkCreatingResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkCreatingResponseStatus) Or(d PaymentBulkCreatingResponseStatus) PaymentBulkCreatingResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkDeleteFlag returns new OptPaymentBulkDeleteFlag with value set to v.
func NewOptPaymentBulkDeleteFlag(v PaymentBulkDeleteFlag) OptPaymentBulkDeleteFlag {
	return OptPaymentBulkDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkDeleteFlag is optional PaymentBulkDeleteFlag.
type OptPaymentBulkDeleteFlag struct {
	Value PaymentBulkDeleteFlag
	Set   bool
}

// IsSet returns true if OptPaymentBulkDeleteFlag was set.
func (o OptPaymentBulkDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkDeleteFlag) Reset() {
	var v PaymentBulkDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkDeleteFlag) SetTo(v PaymentBulkDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkDeleteFlag) Get() (v PaymentBulkDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkDeleteFlag) Or(d PaymentBulkDeleteFlag) PaymentBulkDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkDeletingResponseDeleteFlag returns new OptPaymentBulkDeletingResponseDeleteFlag with value set to v.
func NewOptPaymentBulkDeletingResponseDeleteFlag(v PaymentBulkDeletingResponseDeleteFlag) OptPaymentBulkDeletingResponseDeleteFlag {
	return OptPaymentBulkDeletingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkDeletingResponseDeleteFlag is optional PaymentBulkDeletingResponseDeleteFlag.
type OptPaymentBulkDeletingResponseDeleteFlag struct {
	Value PaymentBulkDeletingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptPaymentBulkDeletingResponseDeleteFlag was set.
func (o OptPaymentBulkDeletingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkDeletingResponseDeleteFlag) Reset() {
	var v PaymentBulkDeletingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkDeletingResponseDeleteFlag) SetTo(v PaymentBulkDeletingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkDeletingResponseDeleteFlag) Get() (v PaymentBulkDeletingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkDeletingResponseDeleteFlag) Or(d PaymentBulkDeletingResponseDeleteFlag) PaymentBulkDeletingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkDetailJobCode returns new OptPaymentBulkDetailJobCode with value set to v.
func NewOptPaymentBulkDetailJobCode(v PaymentBulkDetailJobCode) OptPaymentBulkDetailJobCode {
	return OptPaymentBulkDetailJobCode{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkDetailJobCode is optional PaymentBulkDetailJobCode.
type OptPaymentBulkDetailJobCode struct {
	Value PaymentBulkDetailJobCode
	Set   bool
}

// IsSet returns true if OptPaymentBulkDetailJobCode was set.
func (o OptPaymentBulkDetailJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkDetailJobCode) Reset() {
	var v PaymentBulkDetailJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkDetailJobCode) SetTo(v PaymentBulkDetailJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkDetailJobCode) Get() (v PaymentBulkDetailJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkDetailJobCode) Or(d PaymentBulkDetailJobCode) PaymentBulkDetailJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkDetailMethod returns new OptPaymentBulkDetailMethod with value set to v.
func NewOptPaymentBulkDetailMethod(v PaymentBulkDetailMethod) OptPaymentBulkDetailMethod {
	return OptPaymentBulkDetailMethod{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkDetailMethod is optional PaymentBulkDetailMethod.
type OptPaymentBulkDetailMethod struct {
	Value PaymentBulkDetailMethod
	Set   bool
}

// IsSet returns true if OptPaymentBulkDetailMethod was set.
func (o OptPaymentBulkDetailMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkDetailMethod) Reset() {
	var v PaymentBulkDetailMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkDetailMethod) SetTo(v PaymentBulkDetailMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkDetailMethod) Get() (v PaymentBulkDetailMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkDetailMethod) Or(d PaymentBulkDetailMethod) PaymentBulkDetailMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkDetailPayTimes returns new OptPaymentBulkDetailPayTimes with value set to v.
func NewOptPaymentBulkDetailPayTimes(v PaymentBulkDetailPayTimes) OptPaymentBulkDetailPayTimes {
	return OptPaymentBulkDetailPayTimes{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkDetailPayTimes is optional PaymentBulkDetailPayTimes.
type OptPaymentBulkDetailPayTimes struct {
	Value PaymentBulkDetailPayTimes
	Set   bool
}

// IsSet returns true if OptPaymentBulkDetailPayTimes was set.
func (o OptPaymentBulkDetailPayTimes) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkDetailPayTimes) Reset() {
	var v PaymentBulkDetailPayTimes
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkDetailPayTimes) SetTo(v PaymentBulkDetailPayTimes) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkDetailPayTimes) Get() (v PaymentBulkDetailPayTimes, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkDetailPayTimes) Or(d PaymentBulkDetailPayTimes) PaymentBulkDetailPayTimes {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkPayType returns new OptPaymentBulkPayType with value set to v.
func NewOptPaymentBulkPayType(v PaymentBulkPayType) OptPaymentBulkPayType {
	return OptPaymentBulkPayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkPayType is optional PaymentBulkPayType.
type OptPaymentBulkPayType struct {
	Value PaymentBulkPayType
	Set   bool
}

// IsSet returns true if OptPaymentBulkPayType was set.
func (o OptPaymentBulkPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkPayType) Reset() {
	var v PaymentBulkPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkPayType) SetTo(v PaymentBulkPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkPayType) Get() (v PaymentBulkPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkPayType) Or(d PaymentBulkPayType) PaymentBulkPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentBulkStatus returns new OptPaymentBulkStatus with value set to v.
func NewOptPaymentBulkStatus(v PaymentBulkStatus) OptPaymentBulkStatus {
	return OptPaymentBulkStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentBulkStatus is optional PaymentBulkStatus.
type OptPaymentBulkStatus struct {
	Value PaymentBulkStatus
	Set   bool
}

// IsSet returns true if OptPaymentBulkStatus was set.
func (o OptPaymentBulkStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentBulkStatus) Reset() {
	var v PaymentBulkStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentBulkStatus) SetTo(v PaymentBulkStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentBulkStatus) Get() (v PaymentBulkStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentBulkStatus) Or(d PaymentBulkStatus) PaymentBulkStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDefaultFlag returns new OptPaymentMethodDefaultFlag with value set to v.
func NewOptPaymentMethodDefaultFlag(v PaymentMethodDefaultFlag) OptPaymentMethodDefaultFlag {
	return OptPaymentMethodDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDefaultFlag is optional PaymentMethodDefaultFlag.
type OptPaymentMethodDefaultFlag struct {
	Value PaymentMethodDefaultFlag
	Set   bool
}

// IsSet returns true if OptPaymentMethodDefaultFlag was set.
func (o OptPaymentMethodDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDefaultFlag) Reset() {
	var v PaymentMethodDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDefaultFlag) SetTo(v PaymentMethodDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDefaultFlag) Get() (v PaymentMethodDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDefaultFlag) Or(d PaymentMethodDefaultFlag) PaymentMethodDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodDeleteFlag returns new OptPaymentMethodDeleteFlag with value set to v.
func NewOptPaymentMethodDeleteFlag(v PaymentMethodDeleteFlag) OptPaymentMethodDeleteFlag {
	return OptPaymentMethodDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodDeleteFlag is optional PaymentMethodDeleteFlag.
type OptPaymentMethodDeleteFlag struct {
	Value PaymentMethodDeleteFlag
	Set   bool
}

// IsSet returns true if OptPaymentMethodDeleteFlag was set.
func (o OptPaymentMethodDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodDeleteFlag) Reset() {
	var v PaymentMethodDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodDeleteFlag) SetTo(v PaymentMethodDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodDeleteFlag) Get() (v PaymentMethodDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodDeleteFlag) Or(d PaymentMethodDeleteFlag) PaymentMethodDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodPayType returns new OptPaymentMethodPayType with value set to v.
func NewOptPaymentMethodPayType(v PaymentMethodPayType) OptPaymentMethodPayType {
	return OptPaymentMethodPayType{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodPayType is optional PaymentMethodPayType.
type OptPaymentMethodPayType struct {
	Value PaymentMethodPayType
	Set   bool
}

// IsSet returns true if OptPaymentMethodPayType was set.
func (o OptPaymentMethodPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodPayType) Reset() {
	var v PaymentMethodPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodPayType) SetTo(v PaymentMethodPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodPayType) Get() (v PaymentMethodPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodPayType) Or(d PaymentMethodPayType) PaymentMethodPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentMethodStatus returns new OptPaymentMethodStatus with value set to v.
func NewOptPaymentMethodStatus(v PaymentMethodStatus) OptPaymentMethodStatus {
	return OptPaymentMethodStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentMethodStatus is optional PaymentMethodStatus.
type OptPaymentMethodStatus struct {
	Value PaymentMethodStatus
	Set   bool
}

// IsSet returns true if OptPaymentMethodStatus was set.
func (o OptPaymentMethodStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentMethodStatus) Reset() {
	var v PaymentMethodStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentMethodStatus) SetTo(v PaymentMethodStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentMethodStatus) Get() (v PaymentMethodStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentMethodStatus) Or(d PaymentMethodStatus) PaymentMethodStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponseCard returns new OptPaymentSessionCreatingResponseCard with value set to v.
func NewOptPaymentSessionCreatingResponseCard(v PaymentSessionCreatingResponseCard) OptPaymentSessionCreatingResponseCard {
	return OptPaymentSessionCreatingResponseCard{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponseCard is optional PaymentSessionCreatingResponseCard.
type OptPaymentSessionCreatingResponseCard struct {
	Value PaymentSessionCreatingResponseCard
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponseCard was set.
func (o OptPaymentSessionCreatingResponseCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponseCard) Reset() {
	var v PaymentSessionCreatingResponseCard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponseCard) SetTo(v PaymentSessionCreatingResponseCard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponseCard) Get() (v PaymentSessionCreatingResponseCard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponseCard) Or(d PaymentSessionCreatingResponseCard) PaymentSessionCreatingResponseCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponseGuideMailSendFlag returns new OptPaymentSessionCreatingResponseGuideMailSendFlag with value set to v.
func NewOptPaymentSessionCreatingResponseGuideMailSendFlag(v PaymentSessionCreatingResponseGuideMailSendFlag) OptPaymentSessionCreatingResponseGuideMailSendFlag {
	return OptPaymentSessionCreatingResponseGuideMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponseGuideMailSendFlag is optional PaymentSessionCreatingResponseGuideMailSendFlag.
type OptPaymentSessionCreatingResponseGuideMailSendFlag struct {
	Value PaymentSessionCreatingResponseGuideMailSendFlag
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponseGuideMailSendFlag was set.
func (o OptPaymentSessionCreatingResponseGuideMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponseGuideMailSendFlag) Reset() {
	var v PaymentSessionCreatingResponseGuideMailSendFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponseGuideMailSendFlag) SetTo(v PaymentSessionCreatingResponseGuideMailSendFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponseGuideMailSendFlag) Get() (v PaymentSessionCreatingResponseGuideMailSendFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponseGuideMailSendFlag) Or(d PaymentSessionCreatingResponseGuideMailSendFlag) PaymentSessionCreatingResponseGuideMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponseKonbini returns new OptPaymentSessionCreatingResponseKonbini with value set to v.
func NewOptPaymentSessionCreatingResponseKonbini(v PaymentSessionCreatingResponseKonbini) OptPaymentSessionCreatingResponseKonbini {
	return OptPaymentSessionCreatingResponseKonbini{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponseKonbini is optional PaymentSessionCreatingResponseKonbini.
type OptPaymentSessionCreatingResponseKonbini struct {
	Value PaymentSessionCreatingResponseKonbini
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponseKonbini was set.
func (o OptPaymentSessionCreatingResponseKonbini) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponseKonbini) Reset() {
	var v PaymentSessionCreatingResponseKonbini
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponseKonbini) SetTo(v PaymentSessionCreatingResponseKonbini) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponseKonbini) Get() (v PaymentSessionCreatingResponseKonbini, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponseKonbini) Or(d PaymentSessionCreatingResponseKonbini) PaymentSessionCreatingResponseKonbini {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag returns new OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag with value set to v.
func NewOptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag(v PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag {
	return OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag is optional PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag.
type OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag struct {
	Value PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag was set.
func (o OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Reset() {
	var v PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) SetTo(v PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Get() (v PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Or(d PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponsePaypay returns new OptPaymentSessionCreatingResponsePaypay with value set to v.
func NewOptPaymentSessionCreatingResponsePaypay(v PaymentSessionCreatingResponsePaypay) OptPaymentSessionCreatingResponsePaypay {
	return OptPaymentSessionCreatingResponsePaypay{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponsePaypay is optional PaymentSessionCreatingResponsePaypay.
type OptPaymentSessionCreatingResponsePaypay struct {
	Value PaymentSessionCreatingResponsePaypay
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponsePaypay was set.
func (o OptPaymentSessionCreatingResponsePaypay) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponsePaypay) Reset() {
	var v PaymentSessionCreatingResponsePaypay
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponsePaypay) SetTo(v PaymentSessionCreatingResponsePaypay) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponsePaypay) Get() (v PaymentSessionCreatingResponsePaypay, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponsePaypay) Or(d PaymentSessionCreatingResponsePaypay) PaymentSessionCreatingResponsePaypay {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponseStatus returns new OptPaymentSessionCreatingResponseStatus with value set to v.
func NewOptPaymentSessionCreatingResponseStatus(v PaymentSessionCreatingResponseStatus) OptPaymentSessionCreatingResponseStatus {
	return OptPaymentSessionCreatingResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponseStatus is optional PaymentSessionCreatingResponseStatus.
type OptPaymentSessionCreatingResponseStatus struct {
	Value PaymentSessionCreatingResponseStatus
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponseStatus was set.
func (o OptPaymentSessionCreatingResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponseStatus) Reset() {
	var v PaymentSessionCreatingResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponseStatus) SetTo(v PaymentSessionCreatingResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponseStatus) Get() (v PaymentSessionCreatingResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponseStatus) Or(d PaymentSessionCreatingResponseStatus) PaymentSessionCreatingResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponseThanksMailSendFlag returns new OptPaymentSessionCreatingResponseThanksMailSendFlag with value set to v.
func NewOptPaymentSessionCreatingResponseThanksMailSendFlag(v PaymentSessionCreatingResponseThanksMailSendFlag) OptPaymentSessionCreatingResponseThanksMailSendFlag {
	return OptPaymentSessionCreatingResponseThanksMailSendFlag{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponseThanksMailSendFlag is optional PaymentSessionCreatingResponseThanksMailSendFlag.
type OptPaymentSessionCreatingResponseThanksMailSendFlag struct {
	Value PaymentSessionCreatingResponseThanksMailSendFlag
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponseThanksMailSendFlag was set.
func (o OptPaymentSessionCreatingResponseThanksMailSendFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponseThanksMailSendFlag) Reset() {
	var v PaymentSessionCreatingResponseThanksMailSendFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponseThanksMailSendFlag) SetTo(v PaymentSessionCreatingResponseThanksMailSendFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponseThanksMailSendFlag) Get() (v PaymentSessionCreatingResponseThanksMailSendFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponseThanksMailSendFlag) Or(d PaymentSessionCreatingResponseThanksMailSendFlag) PaymentSessionCreatingResponseThanksMailSendFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentSessionCreatingResponseTransaction returns new OptPaymentSessionCreatingResponseTransaction with value set to v.
func NewOptPaymentSessionCreatingResponseTransaction(v PaymentSessionCreatingResponseTransaction) OptPaymentSessionCreatingResponseTransaction {
	return OptPaymentSessionCreatingResponseTransaction{
		Value: v,
		Set:   true,
	}
}

// OptPaymentSessionCreatingResponseTransaction is optional PaymentSessionCreatingResponseTransaction.
type OptPaymentSessionCreatingResponseTransaction struct {
	Value PaymentSessionCreatingResponseTransaction
	Set   bool
}

// IsSet returns true if OptPaymentSessionCreatingResponseTransaction was set.
func (o OptPaymentSessionCreatingResponseTransaction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentSessionCreatingResponseTransaction) Reset() {
	var v PaymentSessionCreatingResponseTransaction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentSessionCreatingResponseTransaction) SetTo(v PaymentSessionCreatingResponseTransaction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentSessionCreatingResponseTransaction) Get() (v PaymentSessionCreatingResponseTransaction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentSessionCreatingResponseTransaction) Or(d PaymentSessionCreatingResponseTransaction) PaymentSessionCreatingResponseTransaction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanCreatingRequestIntervalCount returns new OptPlanCreatingRequestIntervalCount with value set to v.
func NewOptPlanCreatingRequestIntervalCount(v PlanCreatingRequestIntervalCount) OptPlanCreatingRequestIntervalCount {
	return OptPlanCreatingRequestIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptPlanCreatingRequestIntervalCount is optional PlanCreatingRequestIntervalCount.
type OptPlanCreatingRequestIntervalCount struct {
	Value PlanCreatingRequestIntervalCount
	Set   bool
}

// IsSet returns true if OptPlanCreatingRequestIntervalCount was set.
func (o OptPlanCreatingRequestIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanCreatingRequestIntervalCount) Reset() {
	var v PlanCreatingRequestIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanCreatingRequestIntervalCount) SetTo(v PlanCreatingRequestIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanCreatingRequestIntervalCount) Get() (v PlanCreatingRequestIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanCreatingRequestIntervalCount) Or(d PlanCreatingRequestIntervalCount) PlanCreatingRequestIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanCreatingRequestIntervalPattern returns new OptPlanCreatingRequestIntervalPattern with value set to v.
func NewOptPlanCreatingRequestIntervalPattern(v PlanCreatingRequestIntervalPattern) OptPlanCreatingRequestIntervalPattern {
	return OptPlanCreatingRequestIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptPlanCreatingRequestIntervalPattern is optional PlanCreatingRequestIntervalPattern.
type OptPlanCreatingRequestIntervalPattern struct {
	Value PlanCreatingRequestIntervalPattern
	Set   bool
}

// IsSet returns true if OptPlanCreatingRequestIntervalPattern was set.
func (o OptPlanCreatingRequestIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanCreatingRequestIntervalPattern) Reset() {
	var v PlanCreatingRequestIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanCreatingRequestIntervalPattern) SetTo(v PlanCreatingRequestIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanCreatingRequestIntervalPattern) Get() (v PlanCreatingRequestIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanCreatingRequestIntervalPattern) Or(d PlanCreatingRequestIntervalPattern) PlanCreatingRequestIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanCreatingResponseDeleteFlag returns new OptPlanCreatingResponseDeleteFlag with value set to v.
func NewOptPlanCreatingResponseDeleteFlag(v PlanCreatingResponseDeleteFlag) OptPlanCreatingResponseDeleteFlag {
	return OptPlanCreatingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanCreatingResponseDeleteFlag is optional PlanCreatingResponseDeleteFlag.
type OptPlanCreatingResponseDeleteFlag struct {
	Value PlanCreatingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptPlanCreatingResponseDeleteFlag was set.
func (o OptPlanCreatingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanCreatingResponseDeleteFlag) Reset() {
	var v PlanCreatingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanCreatingResponseDeleteFlag) SetTo(v PlanCreatingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanCreatingResponseDeleteFlag) Get() (v PlanCreatingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanCreatingResponseDeleteFlag) Or(d PlanCreatingResponseDeleteFlag) PlanCreatingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanCreatingResponseIntervalCount returns new OptPlanCreatingResponseIntervalCount with value set to v.
func NewOptPlanCreatingResponseIntervalCount(v PlanCreatingResponseIntervalCount) OptPlanCreatingResponseIntervalCount {
	return OptPlanCreatingResponseIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptPlanCreatingResponseIntervalCount is optional PlanCreatingResponseIntervalCount.
type OptPlanCreatingResponseIntervalCount struct {
	Value PlanCreatingResponseIntervalCount
	Set   bool
}

// IsSet returns true if OptPlanCreatingResponseIntervalCount was set.
func (o OptPlanCreatingResponseIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanCreatingResponseIntervalCount) Reset() {
	var v PlanCreatingResponseIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanCreatingResponseIntervalCount) SetTo(v PlanCreatingResponseIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanCreatingResponseIntervalCount) Get() (v PlanCreatingResponseIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanCreatingResponseIntervalCount) Or(d PlanCreatingResponseIntervalCount) PlanCreatingResponseIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanCreatingResponseIntervalPattern returns new OptPlanCreatingResponseIntervalPattern with value set to v.
func NewOptPlanCreatingResponseIntervalPattern(v PlanCreatingResponseIntervalPattern) OptPlanCreatingResponseIntervalPattern {
	return OptPlanCreatingResponseIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptPlanCreatingResponseIntervalPattern is optional PlanCreatingResponseIntervalPattern.
type OptPlanCreatingResponseIntervalPattern struct {
	Value PlanCreatingResponseIntervalPattern
	Set   bool
}

// IsSet returns true if OptPlanCreatingResponseIntervalPattern was set.
func (o OptPlanCreatingResponseIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanCreatingResponseIntervalPattern) Reset() {
	var v PlanCreatingResponseIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanCreatingResponseIntervalPattern) SetTo(v PlanCreatingResponseIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanCreatingResponseIntervalPattern) Get() (v PlanCreatingResponseIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanCreatingResponseIntervalPattern) Or(d PlanCreatingResponseIntervalPattern) PlanCreatingResponseIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanCreatingResponseUsedFlag returns new OptPlanCreatingResponseUsedFlag with value set to v.
func NewOptPlanCreatingResponseUsedFlag(v PlanCreatingResponseUsedFlag) OptPlanCreatingResponseUsedFlag {
	return OptPlanCreatingResponseUsedFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanCreatingResponseUsedFlag is optional PlanCreatingResponseUsedFlag.
type OptPlanCreatingResponseUsedFlag struct {
	Value PlanCreatingResponseUsedFlag
	Set   bool
}

// IsSet returns true if OptPlanCreatingResponseUsedFlag was set.
func (o OptPlanCreatingResponseUsedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanCreatingResponseUsedFlag) Reset() {
	var v PlanCreatingResponseUsedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanCreatingResponseUsedFlag) SetTo(v PlanCreatingResponseUsedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanCreatingResponseUsedFlag) Get() (v PlanCreatingResponseUsedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanCreatingResponseUsedFlag) Or(d PlanCreatingResponseUsedFlag) PlanCreatingResponseUsedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanDeleteFlag returns new OptPlanDeleteFlag with value set to v.
func NewOptPlanDeleteFlag(v PlanDeleteFlag) OptPlanDeleteFlag {
	return OptPlanDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanDeleteFlag is optional PlanDeleteFlag.
type OptPlanDeleteFlag struct {
	Value PlanDeleteFlag
	Set   bool
}

// IsSet returns true if OptPlanDeleteFlag was set.
func (o OptPlanDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanDeleteFlag) Reset() {
	var v PlanDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanDeleteFlag) SetTo(v PlanDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanDeleteFlag) Get() (v PlanDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanDeleteFlag) Or(d PlanDeleteFlag) PlanDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanDeletingResponseDeleteFlag returns new OptPlanDeletingResponseDeleteFlag with value set to v.
func NewOptPlanDeletingResponseDeleteFlag(v PlanDeletingResponseDeleteFlag) OptPlanDeletingResponseDeleteFlag {
	return OptPlanDeletingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanDeletingResponseDeleteFlag is optional PlanDeletingResponseDeleteFlag.
type OptPlanDeletingResponseDeleteFlag struct {
	Value PlanDeletingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptPlanDeletingResponseDeleteFlag was set.
func (o OptPlanDeletingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanDeletingResponseDeleteFlag) Reset() {
	var v PlanDeletingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanDeletingResponseDeleteFlag) SetTo(v PlanDeletingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanDeletingResponseDeleteFlag) Get() (v PlanDeletingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanDeletingResponseDeleteFlag) Or(d PlanDeletingResponseDeleteFlag) PlanDeletingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanDeletingResponseIntervalCount returns new OptPlanDeletingResponseIntervalCount with value set to v.
func NewOptPlanDeletingResponseIntervalCount(v PlanDeletingResponseIntervalCount) OptPlanDeletingResponseIntervalCount {
	return OptPlanDeletingResponseIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptPlanDeletingResponseIntervalCount is optional PlanDeletingResponseIntervalCount.
type OptPlanDeletingResponseIntervalCount struct {
	Value PlanDeletingResponseIntervalCount
	Set   bool
}

// IsSet returns true if OptPlanDeletingResponseIntervalCount was set.
func (o OptPlanDeletingResponseIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanDeletingResponseIntervalCount) Reset() {
	var v PlanDeletingResponseIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanDeletingResponseIntervalCount) SetTo(v PlanDeletingResponseIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanDeletingResponseIntervalCount) Get() (v PlanDeletingResponseIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanDeletingResponseIntervalCount) Or(d PlanDeletingResponseIntervalCount) PlanDeletingResponseIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanDeletingResponseIntervalPattern returns new OptPlanDeletingResponseIntervalPattern with value set to v.
func NewOptPlanDeletingResponseIntervalPattern(v PlanDeletingResponseIntervalPattern) OptPlanDeletingResponseIntervalPattern {
	return OptPlanDeletingResponseIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptPlanDeletingResponseIntervalPattern is optional PlanDeletingResponseIntervalPattern.
type OptPlanDeletingResponseIntervalPattern struct {
	Value PlanDeletingResponseIntervalPattern
	Set   bool
}

// IsSet returns true if OptPlanDeletingResponseIntervalPattern was set.
func (o OptPlanDeletingResponseIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanDeletingResponseIntervalPattern) Reset() {
	var v PlanDeletingResponseIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanDeletingResponseIntervalPattern) SetTo(v PlanDeletingResponseIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanDeletingResponseIntervalPattern) Get() (v PlanDeletingResponseIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanDeletingResponseIntervalPattern) Or(d PlanDeletingResponseIntervalPattern) PlanDeletingResponseIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanDeletingResponseUsedFlag returns new OptPlanDeletingResponseUsedFlag with value set to v.
func NewOptPlanDeletingResponseUsedFlag(v PlanDeletingResponseUsedFlag) OptPlanDeletingResponseUsedFlag {
	return OptPlanDeletingResponseUsedFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanDeletingResponseUsedFlag is optional PlanDeletingResponseUsedFlag.
type OptPlanDeletingResponseUsedFlag struct {
	Value PlanDeletingResponseUsedFlag
	Set   bool
}

// IsSet returns true if OptPlanDeletingResponseUsedFlag was set.
func (o OptPlanDeletingResponseUsedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanDeletingResponseUsedFlag) Reset() {
	var v PlanDeletingResponseUsedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanDeletingResponseUsedFlag) SetTo(v PlanDeletingResponseUsedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanDeletingResponseUsedFlag) Get() (v PlanDeletingResponseUsedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanDeletingResponseUsedFlag) Or(d PlanDeletingResponseUsedFlag) PlanDeletingResponseUsedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanIntervalCount returns new OptPlanIntervalCount with value set to v.
func NewOptPlanIntervalCount(v PlanIntervalCount) OptPlanIntervalCount {
	return OptPlanIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptPlanIntervalCount is optional PlanIntervalCount.
type OptPlanIntervalCount struct {
	Value PlanIntervalCount
	Set   bool
}

// IsSet returns true if OptPlanIntervalCount was set.
func (o OptPlanIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanIntervalCount) Reset() {
	var v PlanIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanIntervalCount) SetTo(v PlanIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanIntervalCount) Get() (v PlanIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanIntervalCount) Or(d PlanIntervalCount) PlanIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanIntervalPattern returns new OptPlanIntervalPattern with value set to v.
func NewOptPlanIntervalPattern(v PlanIntervalPattern) OptPlanIntervalPattern {
	return OptPlanIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptPlanIntervalPattern is optional PlanIntervalPattern.
type OptPlanIntervalPattern struct {
	Value PlanIntervalPattern
	Set   bool
}

// IsSet returns true if OptPlanIntervalPattern was set.
func (o OptPlanIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanIntervalPattern) Reset() {
	var v PlanIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanIntervalPattern) SetTo(v PlanIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanIntervalPattern) Get() (v PlanIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanIntervalPattern) Or(d PlanIntervalPattern) PlanIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanRetrievingResponseDeleteFlag returns new OptPlanRetrievingResponseDeleteFlag with value set to v.
func NewOptPlanRetrievingResponseDeleteFlag(v PlanRetrievingResponseDeleteFlag) OptPlanRetrievingResponseDeleteFlag {
	return OptPlanRetrievingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanRetrievingResponseDeleteFlag is optional PlanRetrievingResponseDeleteFlag.
type OptPlanRetrievingResponseDeleteFlag struct {
	Value PlanRetrievingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptPlanRetrievingResponseDeleteFlag was set.
func (o OptPlanRetrievingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanRetrievingResponseDeleteFlag) Reset() {
	var v PlanRetrievingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanRetrievingResponseDeleteFlag) SetTo(v PlanRetrievingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanRetrievingResponseDeleteFlag) Get() (v PlanRetrievingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanRetrievingResponseDeleteFlag) Or(d PlanRetrievingResponseDeleteFlag) PlanRetrievingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanRetrievingResponseIntervalCount returns new OptPlanRetrievingResponseIntervalCount with value set to v.
func NewOptPlanRetrievingResponseIntervalCount(v PlanRetrievingResponseIntervalCount) OptPlanRetrievingResponseIntervalCount {
	return OptPlanRetrievingResponseIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptPlanRetrievingResponseIntervalCount is optional PlanRetrievingResponseIntervalCount.
type OptPlanRetrievingResponseIntervalCount struct {
	Value PlanRetrievingResponseIntervalCount
	Set   bool
}

// IsSet returns true if OptPlanRetrievingResponseIntervalCount was set.
func (o OptPlanRetrievingResponseIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanRetrievingResponseIntervalCount) Reset() {
	var v PlanRetrievingResponseIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanRetrievingResponseIntervalCount) SetTo(v PlanRetrievingResponseIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanRetrievingResponseIntervalCount) Get() (v PlanRetrievingResponseIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanRetrievingResponseIntervalCount) Or(d PlanRetrievingResponseIntervalCount) PlanRetrievingResponseIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanRetrievingResponseIntervalPattern returns new OptPlanRetrievingResponseIntervalPattern with value set to v.
func NewOptPlanRetrievingResponseIntervalPattern(v PlanRetrievingResponseIntervalPattern) OptPlanRetrievingResponseIntervalPattern {
	return OptPlanRetrievingResponseIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptPlanRetrievingResponseIntervalPattern is optional PlanRetrievingResponseIntervalPattern.
type OptPlanRetrievingResponseIntervalPattern struct {
	Value PlanRetrievingResponseIntervalPattern
	Set   bool
}

// IsSet returns true if OptPlanRetrievingResponseIntervalPattern was set.
func (o OptPlanRetrievingResponseIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanRetrievingResponseIntervalPattern) Reset() {
	var v PlanRetrievingResponseIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanRetrievingResponseIntervalPattern) SetTo(v PlanRetrievingResponseIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanRetrievingResponseIntervalPattern) Get() (v PlanRetrievingResponseIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanRetrievingResponseIntervalPattern) Or(d PlanRetrievingResponseIntervalPattern) PlanRetrievingResponseIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanRetrievingResponseUsedFlag returns new OptPlanRetrievingResponseUsedFlag with value set to v.
func NewOptPlanRetrievingResponseUsedFlag(v PlanRetrievingResponseUsedFlag) OptPlanRetrievingResponseUsedFlag {
	return OptPlanRetrievingResponseUsedFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanRetrievingResponseUsedFlag is optional PlanRetrievingResponseUsedFlag.
type OptPlanRetrievingResponseUsedFlag struct {
	Value PlanRetrievingResponseUsedFlag
	Set   bool
}

// IsSet returns true if OptPlanRetrievingResponseUsedFlag was set.
func (o OptPlanRetrievingResponseUsedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanRetrievingResponseUsedFlag) Reset() {
	var v PlanRetrievingResponseUsedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanRetrievingResponseUsedFlag) SetTo(v PlanRetrievingResponseUsedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanRetrievingResponseUsedFlag) Get() (v PlanRetrievingResponseUsedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanRetrievingResponseUsedFlag) Or(d PlanRetrievingResponseUsedFlag) PlanRetrievingResponseUsedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanUpdatingRequestIntervalCount returns new OptPlanUpdatingRequestIntervalCount with value set to v.
func NewOptPlanUpdatingRequestIntervalCount(v PlanUpdatingRequestIntervalCount) OptPlanUpdatingRequestIntervalCount {
	return OptPlanUpdatingRequestIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptPlanUpdatingRequestIntervalCount is optional PlanUpdatingRequestIntervalCount.
type OptPlanUpdatingRequestIntervalCount struct {
	Value PlanUpdatingRequestIntervalCount
	Set   bool
}

// IsSet returns true if OptPlanUpdatingRequestIntervalCount was set.
func (o OptPlanUpdatingRequestIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanUpdatingRequestIntervalCount) Reset() {
	var v PlanUpdatingRequestIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanUpdatingRequestIntervalCount) SetTo(v PlanUpdatingRequestIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanUpdatingRequestIntervalCount) Get() (v PlanUpdatingRequestIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanUpdatingRequestIntervalCount) Or(d PlanUpdatingRequestIntervalCount) PlanUpdatingRequestIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanUpdatingRequestIntervalPattern returns new OptPlanUpdatingRequestIntervalPattern with value set to v.
func NewOptPlanUpdatingRequestIntervalPattern(v PlanUpdatingRequestIntervalPattern) OptPlanUpdatingRequestIntervalPattern {
	return OptPlanUpdatingRequestIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptPlanUpdatingRequestIntervalPattern is optional PlanUpdatingRequestIntervalPattern.
type OptPlanUpdatingRequestIntervalPattern struct {
	Value PlanUpdatingRequestIntervalPattern
	Set   bool
}

// IsSet returns true if OptPlanUpdatingRequestIntervalPattern was set.
func (o OptPlanUpdatingRequestIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanUpdatingRequestIntervalPattern) Reset() {
	var v PlanUpdatingRequestIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanUpdatingRequestIntervalPattern) SetTo(v PlanUpdatingRequestIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanUpdatingRequestIntervalPattern) Get() (v PlanUpdatingRequestIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanUpdatingRequestIntervalPattern) Or(d PlanUpdatingRequestIntervalPattern) PlanUpdatingRequestIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanUpdatingResponseDeleteFlag returns new OptPlanUpdatingResponseDeleteFlag with value set to v.
func NewOptPlanUpdatingResponseDeleteFlag(v PlanUpdatingResponseDeleteFlag) OptPlanUpdatingResponseDeleteFlag {
	return OptPlanUpdatingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanUpdatingResponseDeleteFlag is optional PlanUpdatingResponseDeleteFlag.
type OptPlanUpdatingResponseDeleteFlag struct {
	Value PlanUpdatingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptPlanUpdatingResponseDeleteFlag was set.
func (o OptPlanUpdatingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanUpdatingResponseDeleteFlag) Reset() {
	var v PlanUpdatingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanUpdatingResponseDeleteFlag) SetTo(v PlanUpdatingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanUpdatingResponseDeleteFlag) Get() (v PlanUpdatingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanUpdatingResponseDeleteFlag) Or(d PlanUpdatingResponseDeleteFlag) PlanUpdatingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanUpdatingResponseIntervalCount returns new OptPlanUpdatingResponseIntervalCount with value set to v.
func NewOptPlanUpdatingResponseIntervalCount(v PlanUpdatingResponseIntervalCount) OptPlanUpdatingResponseIntervalCount {
	return OptPlanUpdatingResponseIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptPlanUpdatingResponseIntervalCount is optional PlanUpdatingResponseIntervalCount.
type OptPlanUpdatingResponseIntervalCount struct {
	Value PlanUpdatingResponseIntervalCount
	Set   bool
}

// IsSet returns true if OptPlanUpdatingResponseIntervalCount was set.
func (o OptPlanUpdatingResponseIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanUpdatingResponseIntervalCount) Reset() {
	var v PlanUpdatingResponseIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanUpdatingResponseIntervalCount) SetTo(v PlanUpdatingResponseIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanUpdatingResponseIntervalCount) Get() (v PlanUpdatingResponseIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanUpdatingResponseIntervalCount) Or(d PlanUpdatingResponseIntervalCount) PlanUpdatingResponseIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanUpdatingResponseIntervalPattern returns new OptPlanUpdatingResponseIntervalPattern with value set to v.
func NewOptPlanUpdatingResponseIntervalPattern(v PlanUpdatingResponseIntervalPattern) OptPlanUpdatingResponseIntervalPattern {
	return OptPlanUpdatingResponseIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptPlanUpdatingResponseIntervalPattern is optional PlanUpdatingResponseIntervalPattern.
type OptPlanUpdatingResponseIntervalPattern struct {
	Value PlanUpdatingResponseIntervalPattern
	Set   bool
}

// IsSet returns true if OptPlanUpdatingResponseIntervalPattern was set.
func (o OptPlanUpdatingResponseIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanUpdatingResponseIntervalPattern) Reset() {
	var v PlanUpdatingResponseIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanUpdatingResponseIntervalPattern) SetTo(v PlanUpdatingResponseIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanUpdatingResponseIntervalPattern) Get() (v PlanUpdatingResponseIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanUpdatingResponseIntervalPattern) Or(d PlanUpdatingResponseIntervalPattern) PlanUpdatingResponseIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanUpdatingResponseUsedFlag returns new OptPlanUpdatingResponseUsedFlag with value set to v.
func NewOptPlanUpdatingResponseUsedFlag(v PlanUpdatingResponseUsedFlag) OptPlanUpdatingResponseUsedFlag {
	return OptPlanUpdatingResponseUsedFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanUpdatingResponseUsedFlag is optional PlanUpdatingResponseUsedFlag.
type OptPlanUpdatingResponseUsedFlag struct {
	Value PlanUpdatingResponseUsedFlag
	Set   bool
}

// IsSet returns true if OptPlanUpdatingResponseUsedFlag was set.
func (o OptPlanUpdatingResponseUsedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanUpdatingResponseUsedFlag) Reset() {
	var v PlanUpdatingResponseUsedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanUpdatingResponseUsedFlag) SetTo(v PlanUpdatingResponseUsedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanUpdatingResponseUsedFlag) Get() (v PlanUpdatingResponseUsedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanUpdatingResponseUsedFlag) Or(d PlanUpdatingResponseUsedFlag) PlanUpdatingResponseUsedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanUsedFlag returns new OptPlanUsedFlag with value set to v.
func NewOptPlanUsedFlag(v PlanUsedFlag) OptPlanUsedFlag {
	return OptPlanUsedFlag{
		Value: v,
		Set:   true,
	}
}

// OptPlanUsedFlag is optional PlanUsedFlag.
type OptPlanUsedFlag struct {
	Value PlanUsedFlag
	Set   bool
}

// IsSet returns true if OptPlanUsedFlag was set.
func (o OptPlanUsedFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanUsedFlag) Reset() {
	var v PlanUsedFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanUsedFlag) SetTo(v PlanUsedFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanUsedFlag) Get() (v PlanUsedFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanUsedFlag) Or(d PlanUsedFlag) PlanUsedFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlatformAccountRetrievingResponseDepositDestination returns new OptPlatformAccountRetrievingResponseDepositDestination with value set to v.
func NewOptPlatformAccountRetrievingResponseDepositDestination(v PlatformAccountRetrievingResponseDepositDestination) OptPlatformAccountRetrievingResponseDepositDestination {
	return OptPlatformAccountRetrievingResponseDepositDestination{
		Value: v,
		Set:   true,
	}
}

// OptPlatformAccountRetrievingResponseDepositDestination is optional PlatformAccountRetrievingResponseDepositDestination.
type OptPlatformAccountRetrievingResponseDepositDestination struct {
	Value PlatformAccountRetrievingResponseDepositDestination
	Set   bool
}

// IsSet returns true if OptPlatformAccountRetrievingResponseDepositDestination was set.
func (o OptPlatformAccountRetrievingResponseDepositDestination) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlatformAccountRetrievingResponseDepositDestination) Reset() {
	var v PlatformAccountRetrievingResponseDepositDestination
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlatformAccountRetrievingResponseDepositDestination) SetTo(v PlatformAccountRetrievingResponseDepositDestination) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlatformAccountRetrievingResponseDepositDestination) Get() (v PlatformAccountRetrievingResponseDepositDestination, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlatformAccountRetrievingResponseDepositDestination) Or(d PlatformAccountRetrievingResponseDepositDestination) PlatformAccountRetrievingResponseDepositDestination {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlatformAccountRetrievingResponseDepositDestinationAccountKind returns new OptPlatformAccountRetrievingResponseDepositDestinationAccountKind with value set to v.
func NewOptPlatformAccountRetrievingResponseDepositDestinationAccountKind(v PlatformAccountRetrievingResponseDepositDestinationAccountKind) OptPlatformAccountRetrievingResponseDepositDestinationAccountKind {
	return OptPlatformAccountRetrievingResponseDepositDestinationAccountKind{
		Value: v,
		Set:   true,
	}
}

// OptPlatformAccountRetrievingResponseDepositDestinationAccountKind is optional PlatformAccountRetrievingResponseDepositDestinationAccountKind.
type OptPlatformAccountRetrievingResponseDepositDestinationAccountKind struct {
	Value PlatformAccountRetrievingResponseDepositDestinationAccountKind
	Set   bool
}

// IsSet returns true if OptPlatformAccountRetrievingResponseDepositDestinationAccountKind was set.
func (o OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) Reset() {
	var v PlatformAccountRetrievingResponseDepositDestinationAccountKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) SetTo(v PlatformAccountRetrievingResponseDepositDestinationAccountKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) Get() (v PlatformAccountRetrievingResponseDepositDestinationAccountKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) Or(d PlatformAccountRetrievingResponseDepositDestinationAccountKind) PlatformAccountRetrievingResponseDepositDestinationAccountKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlatformRateConfigID returns new OptPlatformRateConfigID with value set to v.
func NewOptPlatformRateConfigID(v PlatformRateConfigID) OptPlatformRateConfigID {
	return OptPlatformRateConfigID{
		Value: v,
		Set:   true,
	}
}

// OptPlatformRateConfigID is optional PlatformRateConfigID.
type OptPlatformRateConfigID struct {
	Value PlatformRateConfigID
	Set   bool
}

// IsSet returns true if OptPlatformRateConfigID was set.
func (o OptPlatformRateConfigID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlatformRateConfigID) Reset() {
	var v PlatformRateConfigID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlatformRateConfigID) SetTo(v PlatformRateConfigID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlatformRateConfigID) Get() (v PlatformRateConfigID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlatformRateConfigID) Or(d PlatformRateConfigID) PlatformRateConfigID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR3DSAuthorizingResponseTds2TransResult returns new OptR3DSAuthorizingResponseTds2TransResult with value set to v.
func NewOptR3DSAuthorizingResponseTds2TransResult(v R3DSAuthorizingResponseTds2TransResult) OptR3DSAuthorizingResponseTds2TransResult {
	return OptR3DSAuthorizingResponseTds2TransResult{
		Value: v,
		Set:   true,
	}
}

// OptR3DSAuthorizingResponseTds2TransResult is optional R3DSAuthorizingResponseTds2TransResult.
type OptR3DSAuthorizingResponseTds2TransResult struct {
	Value R3DSAuthorizingResponseTds2TransResult
	Set   bool
}

// IsSet returns true if OptR3DSAuthorizingResponseTds2TransResult was set.
func (o OptR3DSAuthorizingResponseTds2TransResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR3DSAuthorizingResponseTds2TransResult) Reset() {
	var v R3DSAuthorizingResponseTds2TransResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR3DSAuthorizingResponseTds2TransResult) SetTo(v R3DSAuthorizingResponseTds2TransResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR3DSAuthorizingResponseTds2TransResult) Get() (v R3DSAuthorizingResponseTds2TransResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR3DSAuthorizingResponseTds2TransResult) Or(d R3DSAuthorizingResponseTds2TransResult) R3DSAuthorizingResponseTds2TransResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR3DSAuthorizingResponseTds2TransResultReason returns new OptR3DSAuthorizingResponseTds2TransResultReason with value set to v.
func NewOptR3DSAuthorizingResponseTds2TransResultReason(v R3DSAuthorizingResponseTds2TransResultReason) OptR3DSAuthorizingResponseTds2TransResultReason {
	return OptR3DSAuthorizingResponseTds2TransResultReason{
		Value: v,
		Set:   true,
	}
}

// OptR3DSAuthorizingResponseTds2TransResultReason is optional R3DSAuthorizingResponseTds2TransResultReason.
type OptR3DSAuthorizingResponseTds2TransResultReason struct {
	Value R3DSAuthorizingResponseTds2TransResultReason
	Set   bool
}

// IsSet returns true if OptR3DSAuthorizingResponseTds2TransResultReason was set.
func (o OptR3DSAuthorizingResponseTds2TransResultReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR3DSAuthorizingResponseTds2TransResultReason) Reset() {
	var v R3DSAuthorizingResponseTds2TransResultReason
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR3DSAuthorizingResponseTds2TransResultReason) SetTo(v R3DSAuthorizingResponseTds2TransResultReason) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR3DSAuthorizingResponseTds2TransResultReason) Get() (v R3DSAuthorizingResponseTds2TransResultReason, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR3DSAuthorizingResponseTds2TransResultReason) Or(d R3DSAuthorizingResponseTds2TransResultReason) R3DSAuthorizingResponseTds2TransResultReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR3DSConfirmingResponseTds2TransResult returns new OptR3DSConfirmingResponseTds2TransResult with value set to v.
func NewOptR3DSConfirmingResponseTds2TransResult(v R3DSConfirmingResponseTds2TransResult) OptR3DSConfirmingResponseTds2TransResult {
	return OptR3DSConfirmingResponseTds2TransResult{
		Value: v,
		Set:   true,
	}
}

// OptR3DSConfirmingResponseTds2TransResult is optional R3DSConfirmingResponseTds2TransResult.
type OptR3DSConfirmingResponseTds2TransResult struct {
	Value R3DSConfirmingResponseTds2TransResult
	Set   bool
}

// IsSet returns true if OptR3DSConfirmingResponseTds2TransResult was set.
func (o OptR3DSConfirmingResponseTds2TransResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR3DSConfirmingResponseTds2TransResult) Reset() {
	var v R3DSConfirmingResponseTds2TransResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR3DSConfirmingResponseTds2TransResult) SetTo(v R3DSConfirmingResponseTds2TransResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR3DSConfirmingResponseTds2TransResult) Get() (v R3DSConfirmingResponseTds2TransResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR3DSConfirmingResponseTds2TransResult) Or(d R3DSConfirmingResponseTds2TransResult) R3DSConfirmingResponseTds2TransResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptR3DSConfirmingResponseTds2TransResultReason returns new OptR3DSConfirmingResponseTds2TransResultReason with value set to v.
func NewOptR3DSConfirmingResponseTds2TransResultReason(v R3DSConfirmingResponseTds2TransResultReason) OptR3DSConfirmingResponseTds2TransResultReason {
	return OptR3DSConfirmingResponseTds2TransResultReason{
		Value: v,
		Set:   true,
	}
}

// OptR3DSConfirmingResponseTds2TransResultReason is optional R3DSConfirmingResponseTds2TransResultReason.
type OptR3DSConfirmingResponseTds2TransResultReason struct {
	Value R3DSConfirmingResponseTds2TransResultReason
	Set   bool
}

// IsSet returns true if OptR3DSConfirmingResponseTds2TransResultReason was set.
func (o OptR3DSConfirmingResponseTds2TransResultReason) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptR3DSConfirmingResponseTds2TransResultReason) Reset() {
	var v R3DSConfirmingResponseTds2TransResultReason
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptR3DSConfirmingResponseTds2TransResultReason) SetTo(v R3DSConfirmingResponseTds2TransResultReason) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptR3DSConfirmingResponseTds2TransResultReason) Get() (v R3DSConfirmingResponseTds2TransResultReason, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptR3DSConfirmingResponseTds2TransResultReason) Or(d R3DSConfirmingResponseTds2TransResultReason) R3DSConfirmingResponseTds2TransResultReason {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrieveAccountDetailListQuery returns new OptRetrieveAccountDetailListQuery with value set to v.
func NewOptRetrieveAccountDetailListQuery(v RetrieveAccountDetailListQuery) OptRetrieveAccountDetailListQuery {
	return OptRetrieveAccountDetailListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrieveAccountDetailListQuery is optional RetrieveAccountDetailListQuery.
type OptRetrieveAccountDetailListQuery struct {
	Value RetrieveAccountDetailListQuery
	Set   bool
}

// IsSet returns true if OptRetrieveAccountDetailListQuery was set.
func (o OptRetrieveAccountDetailListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrieveAccountDetailListQuery) Reset() {
	var v RetrieveAccountDetailListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrieveAccountDetailListQuery) SetTo(v RetrieveAccountDetailListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrieveAccountDetailListQuery) Get() (v RetrieveAccountDetailListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrieveAccountDetailListQuery) Or(d RetrieveAccountDetailListQuery) RetrieveAccountDetailListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrieveAccountListQuery returns new OptRetrieveAccountListQuery with value set to v.
func NewOptRetrieveAccountListQuery(v RetrieveAccountListQuery) OptRetrieveAccountListQuery {
	return OptRetrieveAccountListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrieveAccountListQuery is optional RetrieveAccountListQuery.
type OptRetrieveAccountListQuery struct {
	Value RetrieveAccountListQuery
	Set   bool
}

// IsSet returns true if OptRetrieveAccountListQuery was set.
func (o OptRetrieveAccountListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrieveAccountListQuery) Reset() {
	var v RetrieveAccountListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrieveAccountListQuery) SetTo(v RetrieveAccountListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrieveAccountListQuery) Get() (v RetrieveAccountListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrieveAccountListQuery) Or(d RetrieveAccountListQuery) RetrieveAccountListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrieveCustomerListQuery returns new OptRetrieveCustomerListQuery with value set to v.
func NewOptRetrieveCustomerListQuery(v RetrieveCustomerListQuery) OptRetrieveCustomerListQuery {
	return OptRetrieveCustomerListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrieveCustomerListQuery is optional RetrieveCustomerListQuery.
type OptRetrieveCustomerListQuery struct {
	Value RetrieveCustomerListQuery
	Set   bool
}

// IsSet returns true if OptRetrieveCustomerListQuery was set.
func (o OptRetrieveCustomerListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrieveCustomerListQuery) Reset() {
	var v RetrieveCustomerListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrieveCustomerListQuery) SetTo(v RetrieveCustomerListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrieveCustomerListQuery) Get() (v RetrieveCustomerListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrieveCustomerListQuery) Or(d RetrieveCustomerListQuery) RetrieveCustomerListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentBulkDetailListQueryStatus returns new OptRetrievePaymentBulkDetailListQueryStatus with value set to v.
func NewOptRetrievePaymentBulkDetailListQueryStatus(v RetrievePaymentBulkDetailListQueryStatus) OptRetrievePaymentBulkDetailListQueryStatus {
	return OptRetrievePaymentBulkDetailListQueryStatus{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentBulkDetailListQueryStatus is optional RetrievePaymentBulkDetailListQueryStatus.
type OptRetrievePaymentBulkDetailListQueryStatus struct {
	Value RetrievePaymentBulkDetailListQueryStatus
	Set   bool
}

// IsSet returns true if OptRetrievePaymentBulkDetailListQueryStatus was set.
func (o OptRetrievePaymentBulkDetailListQueryStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentBulkDetailListQueryStatus) Reset() {
	var v RetrievePaymentBulkDetailListQueryStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentBulkDetailListQueryStatus) SetTo(v RetrievePaymentBulkDetailListQueryStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentBulkDetailListQueryStatus) Get() (v RetrievePaymentBulkDetailListQueryStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentBulkDetailListQueryStatus) Or(d RetrievePaymentBulkDetailListQueryStatus) RetrievePaymentBulkDetailListQueryStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentBulkListQuery returns new OptRetrievePaymentBulkListQuery with value set to v.
func NewOptRetrievePaymentBulkListQuery(v RetrievePaymentBulkListQuery) OptRetrievePaymentBulkListQuery {
	return OptRetrievePaymentBulkListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentBulkListQuery is optional RetrievePaymentBulkListQuery.
type OptRetrievePaymentBulkListQuery struct {
	Value RetrievePaymentBulkListQuery
	Set   bool
}

// IsSet returns true if OptRetrievePaymentBulkListQuery was set.
func (o OptRetrievePaymentBulkListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentBulkListQuery) Reset() {
	var v RetrievePaymentBulkListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentBulkListQuery) SetTo(v RetrievePaymentBulkListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentBulkListQuery) Get() (v RetrievePaymentBulkListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentBulkListQuery) Or(d RetrievePaymentBulkListQuery) RetrievePaymentBulkListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentBulkListQueryDeleteFlag returns new OptRetrievePaymentBulkListQueryDeleteFlag with value set to v.
func NewOptRetrievePaymentBulkListQueryDeleteFlag(v RetrievePaymentBulkListQueryDeleteFlag) OptRetrievePaymentBulkListQueryDeleteFlag {
	return OptRetrievePaymentBulkListQueryDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentBulkListQueryDeleteFlag is optional RetrievePaymentBulkListQueryDeleteFlag.
type OptRetrievePaymentBulkListQueryDeleteFlag struct {
	Value RetrievePaymentBulkListQueryDeleteFlag
	Set   bool
}

// IsSet returns true if OptRetrievePaymentBulkListQueryDeleteFlag was set.
func (o OptRetrievePaymentBulkListQueryDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentBulkListQueryDeleteFlag) Reset() {
	var v RetrievePaymentBulkListQueryDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentBulkListQueryDeleteFlag) SetTo(v RetrievePaymentBulkListQueryDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentBulkListQueryDeleteFlag) Get() (v RetrievePaymentBulkListQueryDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentBulkListQueryDeleteFlag) Or(d RetrievePaymentBulkListQueryDeleteFlag) RetrievePaymentBulkListQueryDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentBulkListQueryPayType returns new OptRetrievePaymentBulkListQueryPayType with value set to v.
func NewOptRetrievePaymentBulkListQueryPayType(v RetrievePaymentBulkListQueryPayType) OptRetrievePaymentBulkListQueryPayType {
	return OptRetrievePaymentBulkListQueryPayType{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentBulkListQueryPayType is optional RetrievePaymentBulkListQueryPayType.
type OptRetrievePaymentBulkListQueryPayType struct {
	Value RetrievePaymentBulkListQueryPayType
	Set   bool
}

// IsSet returns true if OptRetrievePaymentBulkListQueryPayType was set.
func (o OptRetrievePaymentBulkListQueryPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentBulkListQueryPayType) Reset() {
	var v RetrievePaymentBulkListQueryPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentBulkListQueryPayType) SetTo(v RetrievePaymentBulkListQueryPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentBulkListQueryPayType) Get() (v RetrievePaymentBulkListQueryPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentBulkListQueryPayType) Or(d RetrievePaymentBulkListQueryPayType) RetrievePaymentBulkListQueryPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentBulkListQueryStatus returns new OptRetrievePaymentBulkListQueryStatus with value set to v.
func NewOptRetrievePaymentBulkListQueryStatus(v RetrievePaymentBulkListQueryStatus) OptRetrievePaymentBulkListQueryStatus {
	return OptRetrievePaymentBulkListQueryStatus{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentBulkListQueryStatus is optional RetrievePaymentBulkListQueryStatus.
type OptRetrievePaymentBulkListQueryStatus struct {
	Value RetrievePaymentBulkListQueryStatus
	Set   bool
}

// IsSet returns true if OptRetrievePaymentBulkListQueryStatus was set.
func (o OptRetrievePaymentBulkListQueryStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentBulkListQueryStatus) Reset() {
	var v RetrievePaymentBulkListQueryStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentBulkListQueryStatus) SetTo(v RetrievePaymentBulkListQueryStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentBulkListQueryStatus) Get() (v RetrievePaymentBulkListQueryStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentBulkListQueryStatus) Or(d RetrievePaymentBulkListQueryStatus) RetrievePaymentBulkListQueryStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK0JobCode returns new OptRetrievePaymentOK0JobCode with value set to v.
func NewOptRetrievePaymentOK0JobCode(v RetrievePaymentOK0JobCode) OptRetrievePaymentOK0JobCode {
	return OptRetrievePaymentOK0JobCode{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK0JobCode is optional RetrievePaymentOK0JobCode.
type OptRetrievePaymentOK0JobCode struct {
	Value RetrievePaymentOK0JobCode
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK0JobCode was set.
func (o OptRetrievePaymentOK0JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK0JobCode) Reset() {
	var v RetrievePaymentOK0JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK0JobCode) SetTo(v RetrievePaymentOK0JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK0JobCode) Get() (v RetrievePaymentOK0JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK0JobCode) Or(d RetrievePaymentOK0JobCode) RetrievePaymentOK0JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK0Method returns new OptRetrievePaymentOK0Method with value set to v.
func NewOptRetrievePaymentOK0Method(v RetrievePaymentOK0Method) OptRetrievePaymentOK0Method {
	return OptRetrievePaymentOK0Method{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK0Method is optional RetrievePaymentOK0Method.
type OptRetrievePaymentOK0Method struct {
	Value RetrievePaymentOK0Method
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK0Method was set.
func (o OptRetrievePaymentOK0Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK0Method) Reset() {
	var v RetrievePaymentOK0Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK0Method) SetTo(v RetrievePaymentOK0Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK0Method) Get() (v RetrievePaymentOK0Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK0Method) Or(d RetrievePaymentOK0Method) RetrievePaymentOK0Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK0PayType returns new OptRetrievePaymentOK0PayType with value set to v.
func NewOptRetrievePaymentOK0PayType(v RetrievePaymentOK0PayType) OptRetrievePaymentOK0PayType {
	return OptRetrievePaymentOK0PayType{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK0PayType is optional RetrievePaymentOK0PayType.
type OptRetrievePaymentOK0PayType struct {
	Value RetrievePaymentOK0PayType
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK0PayType was set.
func (o OptRetrievePaymentOK0PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK0PayType) Reset() {
	var v RetrievePaymentOK0PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK0PayType) SetTo(v RetrievePaymentOK0PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK0PayType) Get() (v RetrievePaymentOK0PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK0PayType) Or(d RetrievePaymentOK0PayType) RetrievePaymentOK0PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK0Status returns new OptRetrievePaymentOK0Status with value set to v.
func NewOptRetrievePaymentOK0Status(v RetrievePaymentOK0Status) OptRetrievePaymentOK0Status {
	return OptRetrievePaymentOK0Status{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK0Status is optional RetrievePaymentOK0Status.
type OptRetrievePaymentOK0Status struct {
	Value RetrievePaymentOK0Status
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK0Status was set.
func (o OptRetrievePaymentOK0Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK0Status) Reset() {
	var v RetrievePaymentOK0Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK0Status) SetTo(v RetrievePaymentOK0Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK0Status) Get() (v RetrievePaymentOK0Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK0Status) Or(d RetrievePaymentOK0Status) RetrievePaymentOK0Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK1JobCode returns new OptRetrievePaymentOK1JobCode with value set to v.
func NewOptRetrievePaymentOK1JobCode(v RetrievePaymentOK1JobCode) OptRetrievePaymentOK1JobCode {
	return OptRetrievePaymentOK1JobCode{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK1JobCode is optional RetrievePaymentOK1JobCode.
type OptRetrievePaymentOK1JobCode struct {
	Value RetrievePaymentOK1JobCode
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK1JobCode was set.
func (o OptRetrievePaymentOK1JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK1JobCode) Reset() {
	var v RetrievePaymentOK1JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK1JobCode) SetTo(v RetrievePaymentOK1JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK1JobCode) Get() (v RetrievePaymentOK1JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK1JobCode) Or(d RetrievePaymentOK1JobCode) RetrievePaymentOK1JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK1Method returns new OptRetrievePaymentOK1Method with value set to v.
func NewOptRetrievePaymentOK1Method(v RetrievePaymentOK1Method) OptRetrievePaymentOK1Method {
	return OptRetrievePaymentOK1Method{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK1Method is optional RetrievePaymentOK1Method.
type OptRetrievePaymentOK1Method struct {
	Value RetrievePaymentOK1Method
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK1Method was set.
func (o OptRetrievePaymentOK1Method) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK1Method) Reset() {
	var v RetrievePaymentOK1Method
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK1Method) SetTo(v RetrievePaymentOK1Method) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK1Method) Get() (v RetrievePaymentOK1Method, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK1Method) Or(d RetrievePaymentOK1Method) RetrievePaymentOK1Method {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK1PayType returns new OptRetrievePaymentOK1PayType with value set to v.
func NewOptRetrievePaymentOK1PayType(v RetrievePaymentOK1PayType) OptRetrievePaymentOK1PayType {
	return OptRetrievePaymentOK1PayType{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK1PayType is optional RetrievePaymentOK1PayType.
type OptRetrievePaymentOK1PayType struct {
	Value RetrievePaymentOK1PayType
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK1PayType was set.
func (o OptRetrievePaymentOK1PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK1PayType) Reset() {
	var v RetrievePaymentOK1PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK1PayType) SetTo(v RetrievePaymentOK1PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK1PayType) Get() (v RetrievePaymentOK1PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK1PayType) Or(d RetrievePaymentOK1PayType) RetrievePaymentOK1PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK1Status returns new OptRetrievePaymentOK1Status with value set to v.
func NewOptRetrievePaymentOK1Status(v RetrievePaymentOK1Status) OptRetrievePaymentOK1Status {
	return OptRetrievePaymentOK1Status{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK1Status is optional RetrievePaymentOK1Status.
type OptRetrievePaymentOK1Status struct {
	Value RetrievePaymentOK1Status
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK1Status was set.
func (o OptRetrievePaymentOK1Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK1Status) Reset() {
	var v RetrievePaymentOK1Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK1Status) SetTo(v RetrievePaymentOK1Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK1Status) Get() (v RetrievePaymentOK1Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK1Status) Or(d RetrievePaymentOK1Status) RetrievePaymentOK1Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK2CancelOverpaymentFlag returns new OptRetrievePaymentOK2CancelOverpaymentFlag with value set to v.
func NewOptRetrievePaymentOK2CancelOverpaymentFlag(v RetrievePaymentOK2CancelOverpaymentFlag) OptRetrievePaymentOK2CancelOverpaymentFlag {
	return OptRetrievePaymentOK2CancelOverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK2CancelOverpaymentFlag is optional RetrievePaymentOK2CancelOverpaymentFlag.
type OptRetrievePaymentOK2CancelOverpaymentFlag struct {
	Value RetrievePaymentOK2CancelOverpaymentFlag
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK2CancelOverpaymentFlag was set.
func (o OptRetrievePaymentOK2CancelOverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK2CancelOverpaymentFlag) Reset() {
	var v RetrievePaymentOK2CancelOverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK2CancelOverpaymentFlag) SetTo(v RetrievePaymentOK2CancelOverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK2CancelOverpaymentFlag) Get() (v RetrievePaymentOK2CancelOverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK2CancelOverpaymentFlag) Or(d RetrievePaymentOK2CancelOverpaymentFlag) RetrievePaymentOK2CancelOverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK2OverpaymentFlag returns new OptRetrievePaymentOK2OverpaymentFlag with value set to v.
func NewOptRetrievePaymentOK2OverpaymentFlag(v RetrievePaymentOK2OverpaymentFlag) OptRetrievePaymentOK2OverpaymentFlag {
	return OptRetrievePaymentOK2OverpaymentFlag{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK2OverpaymentFlag is optional RetrievePaymentOK2OverpaymentFlag.
type OptRetrievePaymentOK2OverpaymentFlag struct {
	Value RetrievePaymentOK2OverpaymentFlag
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK2OverpaymentFlag was set.
func (o OptRetrievePaymentOK2OverpaymentFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK2OverpaymentFlag) Reset() {
	var v RetrievePaymentOK2OverpaymentFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK2OverpaymentFlag) SetTo(v RetrievePaymentOK2OverpaymentFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK2OverpaymentFlag) Get() (v RetrievePaymentOK2OverpaymentFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK2OverpaymentFlag) Or(d RetrievePaymentOK2OverpaymentFlag) RetrievePaymentOK2OverpaymentFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK2PayType returns new OptRetrievePaymentOK2PayType with value set to v.
func NewOptRetrievePaymentOK2PayType(v RetrievePaymentOK2PayType) OptRetrievePaymentOK2PayType {
	return OptRetrievePaymentOK2PayType{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK2PayType is optional RetrievePaymentOK2PayType.
type OptRetrievePaymentOK2PayType struct {
	Value RetrievePaymentOK2PayType
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK2PayType was set.
func (o OptRetrievePaymentOK2PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK2PayType) Reset() {
	var v RetrievePaymentOK2PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK2PayType) SetTo(v RetrievePaymentOK2PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK2PayType) Get() (v RetrievePaymentOK2PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK2PayType) Or(d RetrievePaymentOK2PayType) RetrievePaymentOK2PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK2Result returns new OptRetrievePaymentOK2Result with value set to v.
func NewOptRetrievePaymentOK2Result(v RetrievePaymentOK2Result) OptRetrievePaymentOK2Result {
	return OptRetrievePaymentOK2Result{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK2Result is optional RetrievePaymentOK2Result.
type OptRetrievePaymentOK2Result struct {
	Value RetrievePaymentOK2Result
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK2Result was set.
func (o OptRetrievePaymentOK2Result) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK2Result) Reset() {
	var v RetrievePaymentOK2Result
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK2Result) SetTo(v RetrievePaymentOK2Result) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK2Result) Get() (v RetrievePaymentOK2Result, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK2Result) Or(d RetrievePaymentOK2Result) RetrievePaymentOK2Result {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK2Status returns new OptRetrievePaymentOK2Status with value set to v.
func NewOptRetrievePaymentOK2Status(v RetrievePaymentOK2Status) OptRetrievePaymentOK2Status {
	return OptRetrievePaymentOK2Status{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK2Status is optional RetrievePaymentOK2Status.
type OptRetrievePaymentOK2Status struct {
	Value RetrievePaymentOK2Status
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK2Status was set.
func (o OptRetrievePaymentOK2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK2Status) Reset() {
	var v RetrievePaymentOK2Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK2Status) SetTo(v RetrievePaymentOK2Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK2Status) Get() (v RetrievePaymentOK2Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK2Status) Or(d RetrievePaymentOK2Status) RetrievePaymentOK2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK3JobCode returns new OptRetrievePaymentOK3JobCode with value set to v.
func NewOptRetrievePaymentOK3JobCode(v RetrievePaymentOK3JobCode) OptRetrievePaymentOK3JobCode {
	return OptRetrievePaymentOK3JobCode{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK3JobCode is optional RetrievePaymentOK3JobCode.
type OptRetrievePaymentOK3JobCode struct {
	Value RetrievePaymentOK3JobCode
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK3JobCode was set.
func (o OptRetrievePaymentOK3JobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK3JobCode) Reset() {
	var v RetrievePaymentOK3JobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK3JobCode) SetTo(v RetrievePaymentOK3JobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK3JobCode) Get() (v RetrievePaymentOK3JobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK3JobCode) Or(d RetrievePaymentOK3JobCode) RetrievePaymentOK3JobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK3PayType returns new OptRetrievePaymentOK3PayType with value set to v.
func NewOptRetrievePaymentOK3PayType(v RetrievePaymentOK3PayType) OptRetrievePaymentOK3PayType {
	return OptRetrievePaymentOK3PayType{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK3PayType is optional RetrievePaymentOK3PayType.
type OptRetrievePaymentOK3PayType struct {
	Value RetrievePaymentOK3PayType
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK3PayType was set.
func (o OptRetrievePaymentOK3PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK3PayType) Reset() {
	var v RetrievePaymentOK3PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK3PayType) SetTo(v RetrievePaymentOK3PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK3PayType) Get() (v RetrievePaymentOK3PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK3PayType) Or(d RetrievePaymentOK3PayType) RetrievePaymentOK3PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK3Status returns new OptRetrievePaymentOK3Status with value set to v.
func NewOptRetrievePaymentOK3Status(v RetrievePaymentOK3Status) OptRetrievePaymentOK3Status {
	return OptRetrievePaymentOK3Status{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK3Status is optional RetrievePaymentOK3Status.
type OptRetrievePaymentOK3Status struct {
	Value RetrievePaymentOK3Status
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK3Status was set.
func (o OptRetrievePaymentOK3Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK3Status) Reset() {
	var v RetrievePaymentOK3Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK3Status) SetTo(v RetrievePaymentOK3Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK3Status) Get() (v RetrievePaymentOK3Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK3Status) Or(d RetrievePaymentOK3Status) RetrievePaymentOK3Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK4PayType returns new OptRetrievePaymentOK4PayType with value set to v.
func NewOptRetrievePaymentOK4PayType(v RetrievePaymentOK4PayType) OptRetrievePaymentOK4PayType {
	return OptRetrievePaymentOK4PayType{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK4PayType is optional RetrievePaymentOK4PayType.
type OptRetrievePaymentOK4PayType struct {
	Value RetrievePaymentOK4PayType
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK4PayType was set.
func (o OptRetrievePaymentOK4PayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK4PayType) Reset() {
	var v RetrievePaymentOK4PayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK4PayType) SetTo(v RetrievePaymentOK4PayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK4PayType) Get() (v RetrievePaymentOK4PayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK4PayType) Or(d RetrievePaymentOK4PayType) RetrievePaymentOK4PayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePaymentOK4Status returns new OptRetrievePaymentOK4Status with value set to v.
func NewOptRetrievePaymentOK4Status(v RetrievePaymentOK4Status) OptRetrievePaymentOK4Status {
	return OptRetrievePaymentOK4Status{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePaymentOK4Status is optional RetrievePaymentOK4Status.
type OptRetrievePaymentOK4Status struct {
	Value RetrievePaymentOK4Status
	Set   bool
}

// IsSet returns true if OptRetrievePaymentOK4Status was set.
func (o OptRetrievePaymentOK4Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePaymentOK4Status) Reset() {
	var v RetrievePaymentOK4Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePaymentOK4Status) SetTo(v RetrievePaymentOK4Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePaymentOK4Status) Get() (v RetrievePaymentOK4Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePaymentOK4Status) Or(d RetrievePaymentOK4Status) RetrievePaymentOK4Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePlanListQuery returns new OptRetrievePlanListQuery with value set to v.
func NewOptRetrievePlanListQuery(v RetrievePlanListQuery) OptRetrievePlanListQuery {
	return OptRetrievePlanListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePlanListQuery is optional RetrievePlanListQuery.
type OptRetrievePlanListQuery struct {
	Value RetrievePlanListQuery
	Set   bool
}

// IsSet returns true if OptRetrievePlanListQuery was set.
func (o OptRetrievePlanListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePlanListQuery) Reset() {
	var v RetrievePlanListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePlanListQuery) SetTo(v RetrievePlanListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePlanListQuery) Get() (v RetrievePlanListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePlanListQuery) Or(d RetrievePlanListQuery) RetrievePlanListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePlanListQueryIntervalPattern returns new OptRetrievePlanListQueryIntervalPattern with value set to v.
func NewOptRetrievePlanListQueryIntervalPattern(v RetrievePlanListQueryIntervalPattern) OptRetrievePlanListQueryIntervalPattern {
	return OptRetrievePlanListQueryIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePlanListQueryIntervalPattern is optional RetrievePlanListQueryIntervalPattern.
type OptRetrievePlanListQueryIntervalPattern struct {
	Value RetrievePlanListQueryIntervalPattern
	Set   bool
}

// IsSet returns true if OptRetrievePlanListQueryIntervalPattern was set.
func (o OptRetrievePlanListQueryIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePlanListQueryIntervalPattern) Reset() {
	var v RetrievePlanListQueryIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePlanListQueryIntervalPattern) SetTo(v RetrievePlanListQueryIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePlanListQueryIntervalPattern) Get() (v RetrievePlanListQueryIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePlanListQueryIntervalPattern) Or(d RetrievePlanListQueryIntervalPattern) RetrievePlanListQueryIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePlatformAccountListQuery returns new OptRetrievePlatformAccountListQuery with value set to v.
func NewOptRetrievePlatformAccountListQuery(v RetrievePlatformAccountListQuery) OptRetrievePlatformAccountListQuery {
	return OptRetrievePlatformAccountListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePlatformAccountListQuery is optional RetrievePlatformAccountListQuery.
type OptRetrievePlatformAccountListQuery struct {
	Value RetrievePlatformAccountListQuery
	Set   bool
}

// IsSet returns true if OptRetrievePlatformAccountListQuery was set.
func (o OptRetrievePlatformAccountListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePlatformAccountListQuery) Reset() {
	var v RetrievePlatformAccountListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePlatformAccountListQuery) SetTo(v RetrievePlatformAccountListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePlatformAccountListQuery) Get() (v RetrievePlatformAccountListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePlatformAccountListQuery) Or(d RetrievePlatformAccountListQuery) RetrievePlatformAccountListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePlatformAccountSummaryListQuery returns new OptRetrievePlatformAccountSummaryListQuery with value set to v.
func NewOptRetrievePlatformAccountSummaryListQuery(v RetrievePlatformAccountSummaryListQuery) OptRetrievePlatformAccountSummaryListQuery {
	return OptRetrievePlatformAccountSummaryListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePlatformAccountSummaryListQuery is optional RetrievePlatformAccountSummaryListQuery.
type OptRetrievePlatformAccountSummaryListQuery struct {
	Value RetrievePlatformAccountSummaryListQuery
	Set   bool
}

// IsSet returns true if OptRetrievePlatformAccountSummaryListQuery was set.
func (o OptRetrievePlatformAccountSummaryListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePlatformAccountSummaryListQuery) Reset() {
	var v RetrievePlatformAccountSummaryListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePlatformAccountSummaryListQuery) SetTo(v RetrievePlatformAccountSummaryListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePlatformAccountSummaryListQuery) Get() (v RetrievePlatformAccountSummaryListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePlatformAccountSummaryListQuery) Or(d RetrievePlatformAccountSummaryListQuery) RetrievePlatformAccountSummaryListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrievePlatformShopListQuery returns new OptRetrievePlatformShopListQuery with value set to v.
func NewOptRetrievePlatformShopListQuery(v RetrievePlatformShopListQuery) OptRetrievePlatformShopListQuery {
	return OptRetrievePlatformShopListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrievePlatformShopListQuery is optional RetrievePlatformShopListQuery.
type OptRetrievePlatformShopListQuery struct {
	Value RetrievePlatformShopListQuery
	Set   bool
}

// IsSet returns true if OptRetrievePlatformShopListQuery was set.
func (o OptRetrievePlatformShopListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrievePlatformShopListQuery) Reset() {
	var v RetrievePlatformShopListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrievePlatformShopListQuery) SetTo(v RetrievePlatformShopListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrievePlatformShopListQuery) Get() (v RetrievePlatformShopListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrievePlatformShopListQuery) Or(d RetrievePlatformShopListQuery) RetrievePlatformShopListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrieveSubscriptionListQueryIntervalPattern returns new OptRetrieveSubscriptionListQueryIntervalPattern with value set to v.
func NewOptRetrieveSubscriptionListQueryIntervalPattern(v RetrieveSubscriptionListQueryIntervalPattern) OptRetrieveSubscriptionListQueryIntervalPattern {
	return OptRetrieveSubscriptionListQueryIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptRetrieveSubscriptionListQueryIntervalPattern is optional RetrieveSubscriptionListQueryIntervalPattern.
type OptRetrieveSubscriptionListQueryIntervalPattern struct {
	Value RetrieveSubscriptionListQueryIntervalPattern
	Set   bool
}

// IsSet returns true if OptRetrieveSubscriptionListQueryIntervalPattern was set.
func (o OptRetrieveSubscriptionListQueryIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrieveSubscriptionListQueryIntervalPattern) Reset() {
	var v RetrieveSubscriptionListQueryIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrieveSubscriptionListQueryIntervalPattern) SetTo(v RetrieveSubscriptionListQueryIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrieveSubscriptionListQueryIntervalPattern) Get() (v RetrieveSubscriptionListQueryIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrieveSubscriptionListQueryIntervalPattern) Or(d RetrieveSubscriptionListQueryIntervalPattern) RetrieveSubscriptionListQueryIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrieveSubscriptionListQueryStatus returns new OptRetrieveSubscriptionListQueryStatus with value set to v.
func NewOptRetrieveSubscriptionListQueryStatus(v RetrieveSubscriptionListQueryStatus) OptRetrieveSubscriptionListQueryStatus {
	return OptRetrieveSubscriptionListQueryStatus{
		Value: v,
		Set:   true,
	}
}

// OptRetrieveSubscriptionListQueryStatus is optional RetrieveSubscriptionListQueryStatus.
type OptRetrieveSubscriptionListQueryStatus struct {
	Value RetrieveSubscriptionListQueryStatus
	Set   bool
}

// IsSet returns true if OptRetrieveSubscriptionListQueryStatus was set.
func (o OptRetrieveSubscriptionListQueryStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrieveSubscriptionListQueryStatus) Reset() {
	var v RetrieveSubscriptionListQueryStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrieveSubscriptionListQueryStatus) SetTo(v RetrieveSubscriptionListQueryStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrieveSubscriptionListQueryStatus) Get() (v RetrieveSubscriptionListQueryStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrieveSubscriptionListQueryStatus) Or(d RetrieveSubscriptionListQueryStatus) RetrieveSubscriptionListQueryStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrieveTenantShopListQuery returns new OptRetrieveTenantShopListQuery with value set to v.
func NewOptRetrieveTenantShopListQuery(v RetrieveTenantShopListQuery) OptRetrieveTenantShopListQuery {
	return OptRetrieveTenantShopListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrieveTenantShopListQuery is optional RetrieveTenantShopListQuery.
type OptRetrieveTenantShopListQuery struct {
	Value RetrieveTenantShopListQuery
	Set   bool
}

// IsSet returns true if OptRetrieveTenantShopListQuery was set.
func (o OptRetrieveTenantShopListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrieveTenantShopListQuery) Reset() {
	var v RetrieveTenantShopListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrieveTenantShopListQuery) SetTo(v RetrieveTenantShopListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrieveTenantShopListQuery) Get() (v RetrieveTenantShopListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrieveTenantShopListQuery) Or(d RetrieveTenantShopListQuery) RetrieveTenantShopListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRetrieveWebhookSettingListQuery returns new OptRetrieveWebhookSettingListQuery with value set to v.
func NewOptRetrieveWebhookSettingListQuery(v RetrieveWebhookSettingListQuery) OptRetrieveWebhookSettingListQuery {
	return OptRetrieveWebhookSettingListQuery{
		Value: v,
		Set:   true,
	}
}

// OptRetrieveWebhookSettingListQuery is optional RetrieveWebhookSettingListQuery.
type OptRetrieveWebhookSettingListQuery struct {
	Value RetrieveWebhookSettingListQuery
	Set   bool
}

// IsSet returns true if OptRetrieveWebhookSettingListQuery was set.
func (o OptRetrieveWebhookSettingListQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRetrieveWebhookSettingListQuery) Reset() {
	var v RetrieveWebhookSettingListQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRetrieveWebhookSettingListQuery) SetTo(v RetrieveWebhookSettingListQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRetrieveWebhookSettingListQuery) Get() (v RetrieveWebhookSettingListQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRetrieveWebhookSettingListQuery) Or(d RetrieveWebhookSettingListQuery) RetrieveWebhookSettingListQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionCreatingRequestEndMonthFlag returns new OptSubscriptionCreatingRequestEndMonthFlag with value set to v.
func NewOptSubscriptionCreatingRequestEndMonthFlag(v SubscriptionCreatingRequestEndMonthFlag) OptSubscriptionCreatingRequestEndMonthFlag {
	return OptSubscriptionCreatingRequestEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionCreatingRequestEndMonthFlag is optional SubscriptionCreatingRequestEndMonthFlag.
type OptSubscriptionCreatingRequestEndMonthFlag struct {
	Value SubscriptionCreatingRequestEndMonthFlag
	Set   bool
}

// IsSet returns true if OptSubscriptionCreatingRequestEndMonthFlag was set.
func (o OptSubscriptionCreatingRequestEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionCreatingRequestEndMonthFlag) Reset() {
	var v SubscriptionCreatingRequestEndMonthFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionCreatingRequestEndMonthFlag) SetTo(v SubscriptionCreatingRequestEndMonthFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionCreatingRequestEndMonthFlag) Get() (v SubscriptionCreatingRequestEndMonthFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionCreatingRequestEndMonthFlag) Or(d SubscriptionCreatingRequestEndMonthFlag) SubscriptionCreatingRequestEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionCreatingResponseEndMonthFlag returns new OptSubscriptionCreatingResponseEndMonthFlag with value set to v.
func NewOptSubscriptionCreatingResponseEndMonthFlag(v SubscriptionCreatingResponseEndMonthFlag) OptSubscriptionCreatingResponseEndMonthFlag {
	return OptSubscriptionCreatingResponseEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionCreatingResponseEndMonthFlag is optional SubscriptionCreatingResponseEndMonthFlag.
type OptSubscriptionCreatingResponseEndMonthFlag struct {
	Value SubscriptionCreatingResponseEndMonthFlag
	Set   bool
}

// IsSet returns true if OptSubscriptionCreatingResponseEndMonthFlag was set.
func (o OptSubscriptionCreatingResponseEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionCreatingResponseEndMonthFlag) Reset() {
	var v SubscriptionCreatingResponseEndMonthFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionCreatingResponseEndMonthFlag) SetTo(v SubscriptionCreatingResponseEndMonthFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionCreatingResponseEndMonthFlag) Get() (v SubscriptionCreatingResponseEndMonthFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionCreatingResponseEndMonthFlag) Or(d SubscriptionCreatingResponseEndMonthFlag) SubscriptionCreatingResponseEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionCreatingResponsePayType returns new OptSubscriptionCreatingResponsePayType with value set to v.
func NewOptSubscriptionCreatingResponsePayType(v SubscriptionCreatingResponsePayType) OptSubscriptionCreatingResponsePayType {
	return OptSubscriptionCreatingResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionCreatingResponsePayType is optional SubscriptionCreatingResponsePayType.
type OptSubscriptionCreatingResponsePayType struct {
	Value SubscriptionCreatingResponsePayType
	Set   bool
}

// IsSet returns true if OptSubscriptionCreatingResponsePayType was set.
func (o OptSubscriptionCreatingResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionCreatingResponsePayType) Reset() {
	var v SubscriptionCreatingResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionCreatingResponsePayType) SetTo(v SubscriptionCreatingResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionCreatingResponsePayType) Get() (v SubscriptionCreatingResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionCreatingResponsePayType) Or(d SubscriptionCreatingResponsePayType) SubscriptionCreatingResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionCreatingResponseStatus returns new OptSubscriptionCreatingResponseStatus with value set to v.
func NewOptSubscriptionCreatingResponseStatus(v SubscriptionCreatingResponseStatus) OptSubscriptionCreatingResponseStatus {
	return OptSubscriptionCreatingResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionCreatingResponseStatus is optional SubscriptionCreatingResponseStatus.
type OptSubscriptionCreatingResponseStatus struct {
	Value SubscriptionCreatingResponseStatus
	Set   bool
}

// IsSet returns true if OptSubscriptionCreatingResponseStatus was set.
func (o OptSubscriptionCreatingResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionCreatingResponseStatus) Reset() {
	var v SubscriptionCreatingResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionCreatingResponseStatus) SetTo(v SubscriptionCreatingResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionCreatingResponseStatus) Get() (v SubscriptionCreatingResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionCreatingResponseStatus) Or(d SubscriptionCreatingResponseStatus) SubscriptionCreatingResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionEndMonthFlag returns new OptSubscriptionEndMonthFlag with value set to v.
func NewOptSubscriptionEndMonthFlag(v SubscriptionEndMonthFlag) OptSubscriptionEndMonthFlag {
	return OptSubscriptionEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionEndMonthFlag is optional SubscriptionEndMonthFlag.
type OptSubscriptionEndMonthFlag struct {
	Value SubscriptionEndMonthFlag
	Set   bool
}

// IsSet returns true if OptSubscriptionEndMonthFlag was set.
func (o OptSubscriptionEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionEndMonthFlag) Reset() {
	var v SubscriptionEndMonthFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionEndMonthFlag) SetTo(v SubscriptionEndMonthFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionEndMonthFlag) Get() (v SubscriptionEndMonthFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionEndMonthFlag) Or(d SubscriptionEndMonthFlag) SubscriptionEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionPayType returns new OptSubscriptionPayType with value set to v.
func NewOptSubscriptionPayType(v SubscriptionPayType) OptSubscriptionPayType {
	return OptSubscriptionPayType{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionPayType is optional SubscriptionPayType.
type OptSubscriptionPayType struct {
	Value SubscriptionPayType
	Set   bool
}

// IsSet returns true if OptSubscriptionPayType was set.
func (o OptSubscriptionPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionPayType) Reset() {
	var v SubscriptionPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionPayType) SetTo(v SubscriptionPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionPayType) Get() (v SubscriptionPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionPayType) Or(d SubscriptionPayType) SubscriptionPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionResultIntervalCount returns new OptSubscriptionResultIntervalCount with value set to v.
func NewOptSubscriptionResultIntervalCount(v SubscriptionResultIntervalCount) OptSubscriptionResultIntervalCount {
	return OptSubscriptionResultIntervalCount{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionResultIntervalCount is optional SubscriptionResultIntervalCount.
type OptSubscriptionResultIntervalCount struct {
	Value SubscriptionResultIntervalCount
	Set   bool
}

// IsSet returns true if OptSubscriptionResultIntervalCount was set.
func (o OptSubscriptionResultIntervalCount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionResultIntervalCount) Reset() {
	var v SubscriptionResultIntervalCount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionResultIntervalCount) SetTo(v SubscriptionResultIntervalCount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionResultIntervalCount) Get() (v SubscriptionResultIntervalCount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionResultIntervalCount) Or(d SubscriptionResultIntervalCount) SubscriptionResultIntervalCount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionResultIntervalPattern returns new OptSubscriptionResultIntervalPattern with value set to v.
func NewOptSubscriptionResultIntervalPattern(v SubscriptionResultIntervalPattern) OptSubscriptionResultIntervalPattern {
	return OptSubscriptionResultIntervalPattern{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionResultIntervalPattern is optional SubscriptionResultIntervalPattern.
type OptSubscriptionResultIntervalPattern struct {
	Value SubscriptionResultIntervalPattern
	Set   bool
}

// IsSet returns true if OptSubscriptionResultIntervalPattern was set.
func (o OptSubscriptionResultIntervalPattern) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionResultIntervalPattern) Reset() {
	var v SubscriptionResultIntervalPattern
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionResultIntervalPattern) SetTo(v SubscriptionResultIntervalPattern) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionResultIntervalPattern) Get() (v SubscriptionResultIntervalPattern, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionResultIntervalPattern) Or(d SubscriptionResultIntervalPattern) SubscriptionResultIntervalPattern {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionResultPayType returns new OptSubscriptionResultPayType with value set to v.
func NewOptSubscriptionResultPayType(v SubscriptionResultPayType) OptSubscriptionResultPayType {
	return OptSubscriptionResultPayType{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionResultPayType is optional SubscriptionResultPayType.
type OptSubscriptionResultPayType struct {
	Value SubscriptionResultPayType
	Set   bool
}

// IsSet returns true if OptSubscriptionResultPayType was set.
func (o OptSubscriptionResultPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionResultPayType) Reset() {
	var v SubscriptionResultPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionResultPayType) SetTo(v SubscriptionResultPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionResultPayType) Get() (v SubscriptionResultPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionResultPayType) Or(d SubscriptionResultPayType) SubscriptionResultPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionResultStatus returns new OptSubscriptionResultStatus with value set to v.
func NewOptSubscriptionResultStatus(v SubscriptionResultStatus) OptSubscriptionResultStatus {
	return OptSubscriptionResultStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionResultStatus is optional SubscriptionResultStatus.
type OptSubscriptionResultStatus struct {
	Value SubscriptionResultStatus
	Set   bool
}

// IsSet returns true if OptSubscriptionResultStatus was set.
func (o OptSubscriptionResultStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionResultStatus) Reset() {
	var v SubscriptionResultStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionResultStatus) SetTo(v SubscriptionResultStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionResultStatus) Get() (v SubscriptionResultStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionResultStatus) Or(d SubscriptionResultStatus) SubscriptionResultStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionRetrievingResponseEndMonthFlag returns new OptSubscriptionRetrievingResponseEndMonthFlag with value set to v.
func NewOptSubscriptionRetrievingResponseEndMonthFlag(v SubscriptionRetrievingResponseEndMonthFlag) OptSubscriptionRetrievingResponseEndMonthFlag {
	return OptSubscriptionRetrievingResponseEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionRetrievingResponseEndMonthFlag is optional SubscriptionRetrievingResponseEndMonthFlag.
type OptSubscriptionRetrievingResponseEndMonthFlag struct {
	Value SubscriptionRetrievingResponseEndMonthFlag
	Set   bool
}

// IsSet returns true if OptSubscriptionRetrievingResponseEndMonthFlag was set.
func (o OptSubscriptionRetrievingResponseEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionRetrievingResponseEndMonthFlag) Reset() {
	var v SubscriptionRetrievingResponseEndMonthFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionRetrievingResponseEndMonthFlag) SetTo(v SubscriptionRetrievingResponseEndMonthFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionRetrievingResponseEndMonthFlag) Get() (v SubscriptionRetrievingResponseEndMonthFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionRetrievingResponseEndMonthFlag) Or(d SubscriptionRetrievingResponseEndMonthFlag) SubscriptionRetrievingResponseEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionRetrievingResponsePayType returns new OptSubscriptionRetrievingResponsePayType with value set to v.
func NewOptSubscriptionRetrievingResponsePayType(v SubscriptionRetrievingResponsePayType) OptSubscriptionRetrievingResponsePayType {
	return OptSubscriptionRetrievingResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionRetrievingResponsePayType is optional SubscriptionRetrievingResponsePayType.
type OptSubscriptionRetrievingResponsePayType struct {
	Value SubscriptionRetrievingResponsePayType
	Set   bool
}

// IsSet returns true if OptSubscriptionRetrievingResponsePayType was set.
func (o OptSubscriptionRetrievingResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionRetrievingResponsePayType) Reset() {
	var v SubscriptionRetrievingResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionRetrievingResponsePayType) SetTo(v SubscriptionRetrievingResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionRetrievingResponsePayType) Get() (v SubscriptionRetrievingResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionRetrievingResponsePayType) Or(d SubscriptionRetrievingResponsePayType) SubscriptionRetrievingResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionRetrievingResponseStatus returns new OptSubscriptionRetrievingResponseStatus with value set to v.
func NewOptSubscriptionRetrievingResponseStatus(v SubscriptionRetrievingResponseStatus) OptSubscriptionRetrievingResponseStatus {
	return OptSubscriptionRetrievingResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionRetrievingResponseStatus is optional SubscriptionRetrievingResponseStatus.
type OptSubscriptionRetrievingResponseStatus struct {
	Value SubscriptionRetrievingResponseStatus
	Set   bool
}

// IsSet returns true if OptSubscriptionRetrievingResponseStatus was set.
func (o OptSubscriptionRetrievingResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionRetrievingResponseStatus) Reset() {
	var v SubscriptionRetrievingResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionRetrievingResponseStatus) SetTo(v SubscriptionRetrievingResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionRetrievingResponseStatus) Get() (v SubscriptionRetrievingResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionRetrievingResponseStatus) Or(d SubscriptionRetrievingResponseStatus) SubscriptionRetrievingResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionStatus returns new OptSubscriptionStatus with value set to v.
func NewOptSubscriptionStatus(v SubscriptionStatus) OptSubscriptionStatus {
	return OptSubscriptionStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionStatus is optional SubscriptionStatus.
type OptSubscriptionStatus struct {
	Value SubscriptionStatus
	Set   bool
}

// IsSet returns true if OptSubscriptionStatus was set.
func (o OptSubscriptionStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionStatus) Reset() {
	var v SubscriptionStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionStatus) SetTo(v SubscriptionStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionStatus) Get() (v SubscriptionStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionStatus) Or(d SubscriptionStatus) SubscriptionStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionUnsubscribingResponseEndMonthFlag returns new OptSubscriptionUnsubscribingResponseEndMonthFlag with value set to v.
func NewOptSubscriptionUnsubscribingResponseEndMonthFlag(v SubscriptionUnsubscribingResponseEndMonthFlag) OptSubscriptionUnsubscribingResponseEndMonthFlag {
	return OptSubscriptionUnsubscribingResponseEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionUnsubscribingResponseEndMonthFlag is optional SubscriptionUnsubscribingResponseEndMonthFlag.
type OptSubscriptionUnsubscribingResponseEndMonthFlag struct {
	Value SubscriptionUnsubscribingResponseEndMonthFlag
	Set   bool
}

// IsSet returns true if OptSubscriptionUnsubscribingResponseEndMonthFlag was set.
func (o OptSubscriptionUnsubscribingResponseEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionUnsubscribingResponseEndMonthFlag) Reset() {
	var v SubscriptionUnsubscribingResponseEndMonthFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionUnsubscribingResponseEndMonthFlag) SetTo(v SubscriptionUnsubscribingResponseEndMonthFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionUnsubscribingResponseEndMonthFlag) Get() (v SubscriptionUnsubscribingResponseEndMonthFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionUnsubscribingResponseEndMonthFlag) Or(d SubscriptionUnsubscribingResponseEndMonthFlag) SubscriptionUnsubscribingResponseEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionUnsubscribingResponsePayType returns new OptSubscriptionUnsubscribingResponsePayType with value set to v.
func NewOptSubscriptionUnsubscribingResponsePayType(v SubscriptionUnsubscribingResponsePayType) OptSubscriptionUnsubscribingResponsePayType {
	return OptSubscriptionUnsubscribingResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionUnsubscribingResponsePayType is optional SubscriptionUnsubscribingResponsePayType.
type OptSubscriptionUnsubscribingResponsePayType struct {
	Value SubscriptionUnsubscribingResponsePayType
	Set   bool
}

// IsSet returns true if OptSubscriptionUnsubscribingResponsePayType was set.
func (o OptSubscriptionUnsubscribingResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionUnsubscribingResponsePayType) Reset() {
	var v SubscriptionUnsubscribingResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionUnsubscribingResponsePayType) SetTo(v SubscriptionUnsubscribingResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionUnsubscribingResponsePayType) Get() (v SubscriptionUnsubscribingResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionUnsubscribingResponsePayType) Or(d SubscriptionUnsubscribingResponsePayType) SubscriptionUnsubscribingResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionUnsubscribingResponseStatus returns new OptSubscriptionUnsubscribingResponseStatus with value set to v.
func NewOptSubscriptionUnsubscribingResponseStatus(v SubscriptionUnsubscribingResponseStatus) OptSubscriptionUnsubscribingResponseStatus {
	return OptSubscriptionUnsubscribingResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionUnsubscribingResponseStatus is optional SubscriptionUnsubscribingResponseStatus.
type OptSubscriptionUnsubscribingResponseStatus struct {
	Value SubscriptionUnsubscribingResponseStatus
	Set   bool
}

// IsSet returns true if OptSubscriptionUnsubscribingResponseStatus was set.
func (o OptSubscriptionUnsubscribingResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionUnsubscribingResponseStatus) Reset() {
	var v SubscriptionUnsubscribingResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionUnsubscribingResponseStatus) SetTo(v SubscriptionUnsubscribingResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionUnsubscribingResponseStatus) Get() (v SubscriptionUnsubscribingResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionUnsubscribingResponseStatus) Or(d SubscriptionUnsubscribingResponseStatus) SubscriptionUnsubscribingResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionUpdatingRequestEndMonthFlag returns new OptSubscriptionUpdatingRequestEndMonthFlag with value set to v.
func NewOptSubscriptionUpdatingRequestEndMonthFlag(v SubscriptionUpdatingRequestEndMonthFlag) OptSubscriptionUpdatingRequestEndMonthFlag {
	return OptSubscriptionUpdatingRequestEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionUpdatingRequestEndMonthFlag is optional SubscriptionUpdatingRequestEndMonthFlag.
type OptSubscriptionUpdatingRequestEndMonthFlag struct {
	Value SubscriptionUpdatingRequestEndMonthFlag
	Set   bool
}

// IsSet returns true if OptSubscriptionUpdatingRequestEndMonthFlag was set.
func (o OptSubscriptionUpdatingRequestEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionUpdatingRequestEndMonthFlag) Reset() {
	var v SubscriptionUpdatingRequestEndMonthFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionUpdatingRequestEndMonthFlag) SetTo(v SubscriptionUpdatingRequestEndMonthFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionUpdatingRequestEndMonthFlag) Get() (v SubscriptionUpdatingRequestEndMonthFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionUpdatingRequestEndMonthFlag) Or(d SubscriptionUpdatingRequestEndMonthFlag) SubscriptionUpdatingRequestEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionUpdatingResponseEndMonthFlag returns new OptSubscriptionUpdatingResponseEndMonthFlag with value set to v.
func NewOptSubscriptionUpdatingResponseEndMonthFlag(v SubscriptionUpdatingResponseEndMonthFlag) OptSubscriptionUpdatingResponseEndMonthFlag {
	return OptSubscriptionUpdatingResponseEndMonthFlag{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionUpdatingResponseEndMonthFlag is optional SubscriptionUpdatingResponseEndMonthFlag.
type OptSubscriptionUpdatingResponseEndMonthFlag struct {
	Value SubscriptionUpdatingResponseEndMonthFlag
	Set   bool
}

// IsSet returns true if OptSubscriptionUpdatingResponseEndMonthFlag was set.
func (o OptSubscriptionUpdatingResponseEndMonthFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionUpdatingResponseEndMonthFlag) Reset() {
	var v SubscriptionUpdatingResponseEndMonthFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionUpdatingResponseEndMonthFlag) SetTo(v SubscriptionUpdatingResponseEndMonthFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionUpdatingResponseEndMonthFlag) Get() (v SubscriptionUpdatingResponseEndMonthFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionUpdatingResponseEndMonthFlag) Or(d SubscriptionUpdatingResponseEndMonthFlag) SubscriptionUpdatingResponseEndMonthFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionUpdatingResponsePayType returns new OptSubscriptionUpdatingResponsePayType with value set to v.
func NewOptSubscriptionUpdatingResponsePayType(v SubscriptionUpdatingResponsePayType) OptSubscriptionUpdatingResponsePayType {
	return OptSubscriptionUpdatingResponsePayType{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionUpdatingResponsePayType is optional SubscriptionUpdatingResponsePayType.
type OptSubscriptionUpdatingResponsePayType struct {
	Value SubscriptionUpdatingResponsePayType
	Set   bool
}

// IsSet returns true if OptSubscriptionUpdatingResponsePayType was set.
func (o OptSubscriptionUpdatingResponsePayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionUpdatingResponsePayType) Reset() {
	var v SubscriptionUpdatingResponsePayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionUpdatingResponsePayType) SetTo(v SubscriptionUpdatingResponsePayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionUpdatingResponsePayType) Get() (v SubscriptionUpdatingResponsePayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionUpdatingResponsePayType) Or(d SubscriptionUpdatingResponsePayType) SubscriptionUpdatingResponsePayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSubscriptionUpdatingResponseStatus returns new OptSubscriptionUpdatingResponseStatus with value set to v.
func NewOptSubscriptionUpdatingResponseStatus(v SubscriptionUpdatingResponseStatus) OptSubscriptionUpdatingResponseStatus {
	return OptSubscriptionUpdatingResponseStatus{
		Value: v,
		Set:   true,
	}
}

// OptSubscriptionUpdatingResponseStatus is optional SubscriptionUpdatingResponseStatus.
type OptSubscriptionUpdatingResponseStatus struct {
	Value SubscriptionUpdatingResponseStatus
	Set   bool
}

// IsSet returns true if OptSubscriptionUpdatingResponseStatus was set.
func (o OptSubscriptionUpdatingResponseStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSubscriptionUpdatingResponseStatus) Reset() {
	var v SubscriptionUpdatingResponseStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSubscriptionUpdatingResponseStatus) SetTo(v SubscriptionUpdatingResponseStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSubscriptionUpdatingResponseStatus) Get() (v SubscriptionUpdatingResponseStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSubscriptionUpdatingResponseStatus) Or(d SubscriptionUpdatingResponseStatus) SubscriptionUpdatingResponseStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTdTenantName returns new OptTdTenantName with value set to v.
func NewOptTdTenantName(v TdTenantName) OptTdTenantName {
	return OptTdTenantName{
		Value: v,
		Set:   true,
	}
}

// OptTdTenantName is optional TdTenantName.
type OptTdTenantName struct {
	Value TdTenantName
	Set   bool
}

// IsSet returns true if OptTdTenantName was set.
func (o OptTdTenantName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTdTenantName) Reset() {
	var v TdTenantName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTdTenantName) SetTo(v TdTenantName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTdTenantName) Get() (v TdTenantName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTdTenantName) Or(d TdTenantName) TdTenantName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTds2Status returns new OptTds2Status with value set to v.
func NewOptTds2Status(v Tds2Status) OptTds2Status {
	return OptTds2Status{
		Value: v,
		Set:   true,
	}
}

// OptTds2Status is optional Tds2Status.
type OptTds2Status struct {
	Value Tds2Status
	Set   bool
}

// IsSet returns true if OptTds2Status was set.
func (o OptTds2Status) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTds2Status) Reset() {
	var v Tds2Status
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTds2Status) SetTo(v Tds2Status) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTds2Status) Get() (v Tds2Status, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTds2Status) Or(d Tds2Status) Tds2Status {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTenantShopUpdatingRequestExaminationMasterID returns new OptTenantShopUpdatingRequestExaminationMasterID with value set to v.
func NewOptTenantShopUpdatingRequestExaminationMasterID(v TenantShopUpdatingRequestExaminationMasterID) OptTenantShopUpdatingRequestExaminationMasterID {
	return OptTenantShopUpdatingRequestExaminationMasterID{
		Value: v,
		Set:   true,
	}
}

// OptTenantShopUpdatingRequestExaminationMasterID is optional TenantShopUpdatingRequestExaminationMasterID.
type OptTenantShopUpdatingRequestExaminationMasterID struct {
	Value TenantShopUpdatingRequestExaminationMasterID
	Set   bool
}

// IsSet returns true if OptTenantShopUpdatingRequestExaminationMasterID was set.
func (o OptTenantShopUpdatingRequestExaminationMasterID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTenantShopUpdatingRequestExaminationMasterID) Reset() {
	var v TenantShopUpdatingRequestExaminationMasterID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTenantShopUpdatingRequestExaminationMasterID) SetTo(v TenantShopUpdatingRequestExaminationMasterID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTenantShopUpdatingRequestExaminationMasterID) Get() (v TenantShopUpdatingRequestExaminationMasterID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTenantShopUpdatingRequestExaminationMasterID) Or(d TenantShopUpdatingRequestExaminationMasterID) TenantShopUpdatingRequestExaminationMasterID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventCardDefaultFlag returns new OptWebhookEventCardDefaultFlag with value set to v.
func NewOptWebhookEventCardDefaultFlag(v WebhookEventCardDefaultFlag) OptWebhookEventCardDefaultFlag {
	return OptWebhookEventCardDefaultFlag{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventCardDefaultFlag is optional WebhookEventCardDefaultFlag.
type OptWebhookEventCardDefaultFlag struct {
	Value WebhookEventCardDefaultFlag
	Set   bool
}

// IsSet returns true if OptWebhookEventCardDefaultFlag was set.
func (o OptWebhookEventCardDefaultFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventCardDefaultFlag) Reset() {
	var v WebhookEventCardDefaultFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventCardDefaultFlag) SetTo(v WebhookEventCardDefaultFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventCardDefaultFlag) Get() (v WebhookEventCardDefaultFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventCardDefaultFlag) Or(d WebhookEventCardDefaultFlag) WebhookEventCardDefaultFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventCardEvent returns new OptWebhookEventCardEvent with value set to v.
func NewOptWebhookEventCardEvent(v WebhookEventCardEvent) OptWebhookEventCardEvent {
	return OptWebhookEventCardEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventCardEvent is optional WebhookEventCardEvent.
type OptWebhookEventCardEvent struct {
	Value WebhookEventCardEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventCardEvent was set.
func (o OptWebhookEventCardEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventCardEvent) Reset() {
	var v WebhookEventCardEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventCardEvent) SetTo(v WebhookEventCardEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventCardEvent) Get() (v WebhookEventCardEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventCardEvent) Or(d WebhookEventCardEvent) WebhookEventCardEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventCardPayType returns new OptWebhookEventCardPayType with value set to v.
func NewOptWebhookEventCardPayType(v WebhookEventCardPayType) OptWebhookEventCardPayType {
	return OptWebhookEventCardPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventCardPayType is optional WebhookEventCardPayType.
type OptWebhookEventCardPayType struct {
	Value WebhookEventCardPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventCardPayType was set.
func (o OptWebhookEventCardPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventCardPayType) Reset() {
	var v WebhookEventCardPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventCardPayType) SetTo(v WebhookEventCardPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventCardPayType) Get() (v WebhookEventCardPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventCardPayType) Or(d WebhookEventCardPayType) WebhookEventCardPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventCardProcessType returns new OptWebhookEventCardProcessType with value set to v.
func NewOptWebhookEventCardProcessType(v WebhookEventCardProcessType) OptWebhookEventCardProcessType {
	return OptWebhookEventCardProcessType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventCardProcessType is optional WebhookEventCardProcessType.
type OptWebhookEventCardProcessType struct {
	Value WebhookEventCardProcessType
	Set   bool
}

// IsSet returns true if OptWebhookEventCardProcessType was set.
func (o OptWebhookEventCardProcessType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventCardProcessType) Reset() {
	var v WebhookEventCardProcessType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventCardProcessType) SetTo(v WebhookEventCardProcessType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventCardProcessType) Get() (v WebhookEventCardProcessType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventCardProcessType) Or(d WebhookEventCardProcessType) WebhookEventCardProcessType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventContractBodyItemAcquirer returns new OptWebhookEventContractBodyItemAcquirer with value set to v.
func NewOptWebhookEventContractBodyItemAcquirer(v WebhookEventContractBodyItemAcquirer) OptWebhookEventContractBodyItemAcquirer {
	return OptWebhookEventContractBodyItemAcquirer{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventContractBodyItemAcquirer is optional WebhookEventContractBodyItemAcquirer.
type OptWebhookEventContractBodyItemAcquirer struct {
	Value WebhookEventContractBodyItemAcquirer
	Set   bool
}

// IsSet returns true if OptWebhookEventContractBodyItemAcquirer was set.
func (o OptWebhookEventContractBodyItemAcquirer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventContractBodyItemAcquirer) Reset() {
	var v WebhookEventContractBodyItemAcquirer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventContractBodyItemAcquirer) SetTo(v WebhookEventContractBodyItemAcquirer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventContractBodyItemAcquirer) Get() (v WebhookEventContractBodyItemAcquirer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventContractBodyItemAcquirer) Or(d WebhookEventContractBodyItemAcquirer) WebhookEventContractBodyItemAcquirer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventContractBodyItemStatusCode returns new OptWebhookEventContractBodyItemStatusCode with value set to v.
func NewOptWebhookEventContractBodyItemStatusCode(v WebhookEventContractBodyItemStatusCode) OptWebhookEventContractBodyItemStatusCode {
	return OptWebhookEventContractBodyItemStatusCode{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventContractBodyItemStatusCode is optional WebhookEventContractBodyItemStatusCode.
type OptWebhookEventContractBodyItemStatusCode struct {
	Value WebhookEventContractBodyItemStatusCode
	Set   bool
}

// IsSet returns true if OptWebhookEventContractBodyItemStatusCode was set.
func (o OptWebhookEventContractBodyItemStatusCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventContractBodyItemStatusCode) Reset() {
	var v WebhookEventContractBodyItemStatusCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventContractBodyItemStatusCode) SetTo(v WebhookEventContractBodyItemStatusCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventContractBodyItemStatusCode) Get() (v WebhookEventContractBodyItemStatusCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventContractBodyItemStatusCode) Or(d WebhookEventContractBodyItemStatusCode) WebhookEventContractBodyItemStatusCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventContractEvent returns new OptWebhookEventContractEvent with value set to v.
func NewOptWebhookEventContractEvent(v WebhookEventContractEvent) OptWebhookEventContractEvent {
	return OptWebhookEventContractEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventContractEvent is optional WebhookEventContractEvent.
type OptWebhookEventContractEvent struct {
	Value WebhookEventContractEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventContractEvent was set.
func (o OptWebhookEventContractEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventContractEvent) Reset() {
	var v WebhookEventContractEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventContractEvent) SetTo(v WebhookEventContractEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventContractEvent) Get() (v WebhookEventContractEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventContractEvent) Or(d WebhookEventContractEvent) WebhookEventContractEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventCustomerPaymentMethodEvent returns new OptWebhookEventCustomerPaymentMethodEvent with value set to v.
func NewOptWebhookEventCustomerPaymentMethodEvent(v WebhookEventCustomerPaymentMethodEvent) OptWebhookEventCustomerPaymentMethodEvent {
	return OptWebhookEventCustomerPaymentMethodEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventCustomerPaymentMethodEvent is optional WebhookEventCustomerPaymentMethodEvent.
type OptWebhookEventCustomerPaymentMethodEvent struct {
	Value WebhookEventCustomerPaymentMethodEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventCustomerPaymentMethodEvent was set.
func (o OptWebhookEventCustomerPaymentMethodEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventCustomerPaymentMethodEvent) Reset() {
	var v WebhookEventCustomerPaymentMethodEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventCustomerPaymentMethodEvent) SetTo(v WebhookEventCustomerPaymentMethodEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventCustomerPaymentMethodEvent) Get() (v WebhookEventCustomerPaymentMethodEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventCustomerPaymentMethodEvent) Or(d WebhookEventCustomerPaymentMethodEvent) WebhookEventCustomerPaymentMethodEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventCustomerPaymentMethodPayType returns new OptWebhookEventCustomerPaymentMethodPayType with value set to v.
func NewOptWebhookEventCustomerPaymentMethodPayType(v WebhookEventCustomerPaymentMethodPayType) OptWebhookEventCustomerPaymentMethodPayType {
	return OptWebhookEventCustomerPaymentMethodPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventCustomerPaymentMethodPayType is optional WebhookEventCustomerPaymentMethodPayType.
type OptWebhookEventCustomerPaymentMethodPayType struct {
	Value WebhookEventCustomerPaymentMethodPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventCustomerPaymentMethodPayType was set.
func (o OptWebhookEventCustomerPaymentMethodPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventCustomerPaymentMethodPayType) Reset() {
	var v WebhookEventCustomerPaymentMethodPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventCustomerPaymentMethodPayType) SetTo(v WebhookEventCustomerPaymentMethodPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventCustomerPaymentMethodPayType) Get() (v WebhookEventCustomerPaymentMethodPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventCustomerPaymentMethodPayType) Or(d WebhookEventCustomerPaymentMethodPayType) WebhookEventCustomerPaymentMethodPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventCustomerPaymentMethodStatus returns new OptWebhookEventCustomerPaymentMethodStatus with value set to v.
func NewOptWebhookEventCustomerPaymentMethodStatus(v WebhookEventCustomerPaymentMethodStatus) OptWebhookEventCustomerPaymentMethodStatus {
	return OptWebhookEventCustomerPaymentMethodStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventCustomerPaymentMethodStatus is optional WebhookEventCustomerPaymentMethodStatus.
type OptWebhookEventCustomerPaymentMethodStatus struct {
	Value WebhookEventCustomerPaymentMethodStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventCustomerPaymentMethodStatus was set.
func (o OptWebhookEventCustomerPaymentMethodStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventCustomerPaymentMethodStatus) Reset() {
	var v WebhookEventCustomerPaymentMethodStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventCustomerPaymentMethodStatus) SetTo(v WebhookEventCustomerPaymentMethodStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventCustomerPaymentMethodStatus) Get() (v WebhookEventCustomerPaymentMethodStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventCustomerPaymentMethodStatus) Or(d WebhookEventCustomerPaymentMethodStatus) WebhookEventCustomerPaymentMethodStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentApplePayCurrency returns new OptWebhookEventPaymentApplePayCurrency with value set to v.
func NewOptWebhookEventPaymentApplePayCurrency(v WebhookEventPaymentApplePayCurrency) OptWebhookEventPaymentApplePayCurrency {
	return OptWebhookEventPaymentApplePayCurrency{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentApplePayCurrency is optional WebhookEventPaymentApplePayCurrency.
type OptWebhookEventPaymentApplePayCurrency struct {
	Value WebhookEventPaymentApplePayCurrency
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentApplePayCurrency was set.
func (o OptWebhookEventPaymentApplePayCurrency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentApplePayCurrency) Reset() {
	var v WebhookEventPaymentApplePayCurrency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentApplePayCurrency) SetTo(v WebhookEventPaymentApplePayCurrency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentApplePayCurrency) Get() (v WebhookEventPaymentApplePayCurrency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentApplePayCurrency) Or(d WebhookEventPaymentApplePayCurrency) WebhookEventPaymentApplePayCurrency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentApplePayEvent returns new OptWebhookEventPaymentApplePayEvent with value set to v.
func NewOptWebhookEventPaymentApplePayEvent(v WebhookEventPaymentApplePayEvent) OptWebhookEventPaymentApplePayEvent {
	return OptWebhookEventPaymentApplePayEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentApplePayEvent is optional WebhookEventPaymentApplePayEvent.
type OptWebhookEventPaymentApplePayEvent struct {
	Value WebhookEventPaymentApplePayEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentApplePayEvent was set.
func (o OptWebhookEventPaymentApplePayEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentApplePayEvent) Reset() {
	var v WebhookEventPaymentApplePayEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentApplePayEvent) SetTo(v WebhookEventPaymentApplePayEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentApplePayEvent) Get() (v WebhookEventPaymentApplePayEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentApplePayEvent) Or(d WebhookEventPaymentApplePayEvent) WebhookEventPaymentApplePayEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentApplePayJobCode returns new OptWebhookEventPaymentApplePayJobCode with value set to v.
func NewOptWebhookEventPaymentApplePayJobCode(v WebhookEventPaymentApplePayJobCode) OptWebhookEventPaymentApplePayJobCode {
	return OptWebhookEventPaymentApplePayJobCode{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentApplePayJobCode is optional WebhookEventPaymentApplePayJobCode.
type OptWebhookEventPaymentApplePayJobCode struct {
	Value WebhookEventPaymentApplePayJobCode
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentApplePayJobCode was set.
func (o OptWebhookEventPaymentApplePayJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentApplePayJobCode) Reset() {
	var v WebhookEventPaymentApplePayJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentApplePayJobCode) SetTo(v WebhookEventPaymentApplePayJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentApplePayJobCode) Get() (v WebhookEventPaymentApplePayJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentApplePayJobCode) Or(d WebhookEventPaymentApplePayJobCode) WebhookEventPaymentApplePayJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentApplePayMethod returns new OptWebhookEventPaymentApplePayMethod with value set to v.
func NewOptWebhookEventPaymentApplePayMethod(v WebhookEventPaymentApplePayMethod) OptWebhookEventPaymentApplePayMethod {
	return OptWebhookEventPaymentApplePayMethod{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentApplePayMethod is optional WebhookEventPaymentApplePayMethod.
type OptWebhookEventPaymentApplePayMethod struct {
	Value WebhookEventPaymentApplePayMethod
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentApplePayMethod was set.
func (o OptWebhookEventPaymentApplePayMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentApplePayMethod) Reset() {
	var v WebhookEventPaymentApplePayMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentApplePayMethod) SetTo(v WebhookEventPaymentApplePayMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentApplePayMethod) Get() (v WebhookEventPaymentApplePayMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentApplePayMethod) Or(d WebhookEventPaymentApplePayMethod) WebhookEventPaymentApplePayMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentApplePayPayType returns new OptWebhookEventPaymentApplePayPayType with value set to v.
func NewOptWebhookEventPaymentApplePayPayType(v WebhookEventPaymentApplePayPayType) OptWebhookEventPaymentApplePayPayType {
	return OptWebhookEventPaymentApplePayPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentApplePayPayType is optional WebhookEventPaymentApplePayPayType.
type OptWebhookEventPaymentApplePayPayType struct {
	Value WebhookEventPaymentApplePayPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentApplePayPayType was set.
func (o OptWebhookEventPaymentApplePayPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentApplePayPayType) Reset() {
	var v WebhookEventPaymentApplePayPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentApplePayPayType) SetTo(v WebhookEventPaymentApplePayPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentApplePayPayType) Get() (v WebhookEventPaymentApplePayPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentApplePayPayType) Or(d WebhookEventPaymentApplePayPayType) WebhookEventPaymentApplePayPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentApplePayStatus returns new OptWebhookEventPaymentApplePayStatus with value set to v.
func NewOptWebhookEventPaymentApplePayStatus(v WebhookEventPaymentApplePayStatus) OptWebhookEventPaymentApplePayStatus {
	return OptWebhookEventPaymentApplePayStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentApplePayStatus is optional WebhookEventPaymentApplePayStatus.
type OptWebhookEventPaymentApplePayStatus struct {
	Value WebhookEventPaymentApplePayStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentApplePayStatus was set.
func (o OptWebhookEventPaymentApplePayStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentApplePayStatus) Reset() {
	var v WebhookEventPaymentApplePayStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentApplePayStatus) SetTo(v WebhookEventPaymentApplePayStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentApplePayStatus) Get() (v WebhookEventPaymentApplePayStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentApplePayStatus) Or(d WebhookEventPaymentApplePayStatus) WebhookEventPaymentApplePayStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentBulkBatchCardEvent returns new OptWebhookEventPaymentBulkBatchCardEvent with value set to v.
func NewOptWebhookEventPaymentBulkBatchCardEvent(v WebhookEventPaymentBulkBatchCardEvent) OptWebhookEventPaymentBulkBatchCardEvent {
	return OptWebhookEventPaymentBulkBatchCardEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentBulkBatchCardEvent is optional WebhookEventPaymentBulkBatchCardEvent.
type OptWebhookEventPaymentBulkBatchCardEvent struct {
	Value WebhookEventPaymentBulkBatchCardEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentBulkBatchCardEvent was set.
func (o OptWebhookEventPaymentBulkBatchCardEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentBulkBatchCardEvent) Reset() {
	var v WebhookEventPaymentBulkBatchCardEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentBulkBatchCardEvent) SetTo(v WebhookEventPaymentBulkBatchCardEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentBulkBatchCardEvent) Get() (v WebhookEventPaymentBulkBatchCardEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentBulkBatchCardEvent) Or(d WebhookEventPaymentBulkBatchCardEvent) WebhookEventPaymentBulkBatchCardEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentBulkBatchCardPayType returns new OptWebhookEventPaymentBulkBatchCardPayType with value set to v.
func NewOptWebhookEventPaymentBulkBatchCardPayType(v WebhookEventPaymentBulkBatchCardPayType) OptWebhookEventPaymentBulkBatchCardPayType {
	return OptWebhookEventPaymentBulkBatchCardPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentBulkBatchCardPayType is optional WebhookEventPaymentBulkBatchCardPayType.
type OptWebhookEventPaymentBulkBatchCardPayType struct {
	Value WebhookEventPaymentBulkBatchCardPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentBulkBatchCardPayType was set.
func (o OptWebhookEventPaymentBulkBatchCardPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentBulkBatchCardPayType) Reset() {
	var v WebhookEventPaymentBulkBatchCardPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentBulkBatchCardPayType) SetTo(v WebhookEventPaymentBulkBatchCardPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentBulkBatchCardPayType) Get() (v WebhookEventPaymentBulkBatchCardPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentBulkBatchCardPayType) Or(d WebhookEventPaymentBulkBatchCardPayType) WebhookEventPaymentBulkBatchCardPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentBulkBatchCardStatus returns new OptWebhookEventPaymentBulkBatchCardStatus with value set to v.
func NewOptWebhookEventPaymentBulkBatchCardStatus(v WebhookEventPaymentBulkBatchCardStatus) OptWebhookEventPaymentBulkBatchCardStatus {
	return OptWebhookEventPaymentBulkBatchCardStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentBulkBatchCardStatus is optional WebhookEventPaymentBulkBatchCardStatus.
type OptWebhookEventPaymentBulkBatchCardStatus struct {
	Value WebhookEventPaymentBulkBatchCardStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentBulkBatchCardStatus was set.
func (o OptWebhookEventPaymentBulkBatchCardStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentBulkBatchCardStatus) Reset() {
	var v WebhookEventPaymentBulkBatchCardStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentBulkBatchCardStatus) SetTo(v WebhookEventPaymentBulkBatchCardStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentBulkBatchCardStatus) Get() (v WebhookEventPaymentBulkBatchCardStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentBulkBatchCardStatus) Or(d WebhookEventPaymentBulkBatchCardStatus) WebhookEventPaymentBulkBatchCardStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentBulkRegistCardEvent returns new OptWebhookEventPaymentBulkRegistCardEvent with value set to v.
func NewOptWebhookEventPaymentBulkRegistCardEvent(v WebhookEventPaymentBulkRegistCardEvent) OptWebhookEventPaymentBulkRegistCardEvent {
	return OptWebhookEventPaymentBulkRegistCardEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentBulkRegistCardEvent is optional WebhookEventPaymentBulkRegistCardEvent.
type OptWebhookEventPaymentBulkRegistCardEvent struct {
	Value WebhookEventPaymentBulkRegistCardEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentBulkRegistCardEvent was set.
func (o OptWebhookEventPaymentBulkRegistCardEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentBulkRegistCardEvent) Reset() {
	var v WebhookEventPaymentBulkRegistCardEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentBulkRegistCardEvent) SetTo(v WebhookEventPaymentBulkRegistCardEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentBulkRegistCardEvent) Get() (v WebhookEventPaymentBulkRegistCardEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentBulkRegistCardEvent) Or(d WebhookEventPaymentBulkRegistCardEvent) WebhookEventPaymentBulkRegistCardEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentBulkRegistCardPayType returns new OptWebhookEventPaymentBulkRegistCardPayType with value set to v.
func NewOptWebhookEventPaymentBulkRegistCardPayType(v WebhookEventPaymentBulkRegistCardPayType) OptWebhookEventPaymentBulkRegistCardPayType {
	return OptWebhookEventPaymentBulkRegistCardPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentBulkRegistCardPayType is optional WebhookEventPaymentBulkRegistCardPayType.
type OptWebhookEventPaymentBulkRegistCardPayType struct {
	Value WebhookEventPaymentBulkRegistCardPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentBulkRegistCardPayType was set.
func (o OptWebhookEventPaymentBulkRegistCardPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentBulkRegistCardPayType) Reset() {
	var v WebhookEventPaymentBulkRegistCardPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentBulkRegistCardPayType) SetTo(v WebhookEventPaymentBulkRegistCardPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentBulkRegistCardPayType) Get() (v WebhookEventPaymentBulkRegistCardPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentBulkRegistCardPayType) Or(d WebhookEventPaymentBulkRegistCardPayType) WebhookEventPaymentBulkRegistCardPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentBulkRegistCardStatus returns new OptWebhookEventPaymentBulkRegistCardStatus with value set to v.
func NewOptWebhookEventPaymentBulkRegistCardStatus(v WebhookEventPaymentBulkRegistCardStatus) OptWebhookEventPaymentBulkRegistCardStatus {
	return OptWebhookEventPaymentBulkRegistCardStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentBulkRegistCardStatus is optional WebhookEventPaymentBulkRegistCardStatus.
type OptWebhookEventPaymentBulkRegistCardStatus struct {
	Value WebhookEventPaymentBulkRegistCardStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentBulkRegistCardStatus was set.
func (o OptWebhookEventPaymentBulkRegistCardStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentBulkRegistCardStatus) Reset() {
	var v WebhookEventPaymentBulkRegistCardStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentBulkRegistCardStatus) SetTo(v WebhookEventPaymentBulkRegistCardStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentBulkRegistCardStatus) Get() (v WebhookEventPaymentBulkRegistCardStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentBulkRegistCardStatus) Or(d WebhookEventPaymentBulkRegistCardStatus) WebhookEventPaymentBulkRegistCardStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentCardCurrency returns new OptWebhookEventPaymentCardCurrency with value set to v.
func NewOptWebhookEventPaymentCardCurrency(v WebhookEventPaymentCardCurrency) OptWebhookEventPaymentCardCurrency {
	return OptWebhookEventPaymentCardCurrency{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentCardCurrency is optional WebhookEventPaymentCardCurrency.
type OptWebhookEventPaymentCardCurrency struct {
	Value WebhookEventPaymentCardCurrency
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentCardCurrency was set.
func (o OptWebhookEventPaymentCardCurrency) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentCardCurrency) Reset() {
	var v WebhookEventPaymentCardCurrency
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentCardCurrency) SetTo(v WebhookEventPaymentCardCurrency) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentCardCurrency) Get() (v WebhookEventPaymentCardCurrency, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentCardCurrency) Or(d WebhookEventPaymentCardCurrency) WebhookEventPaymentCardCurrency {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentCardEvent returns new OptWebhookEventPaymentCardEvent with value set to v.
func NewOptWebhookEventPaymentCardEvent(v WebhookEventPaymentCardEvent) OptWebhookEventPaymentCardEvent {
	return OptWebhookEventPaymentCardEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentCardEvent is optional WebhookEventPaymentCardEvent.
type OptWebhookEventPaymentCardEvent struct {
	Value WebhookEventPaymentCardEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentCardEvent was set.
func (o OptWebhookEventPaymentCardEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentCardEvent) Reset() {
	var v WebhookEventPaymentCardEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentCardEvent) SetTo(v WebhookEventPaymentCardEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentCardEvent) Get() (v WebhookEventPaymentCardEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentCardEvent) Or(d WebhookEventPaymentCardEvent) WebhookEventPaymentCardEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentCardJobCode returns new OptWebhookEventPaymentCardJobCode with value set to v.
func NewOptWebhookEventPaymentCardJobCode(v WebhookEventPaymentCardJobCode) OptWebhookEventPaymentCardJobCode {
	return OptWebhookEventPaymentCardJobCode{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentCardJobCode is optional WebhookEventPaymentCardJobCode.
type OptWebhookEventPaymentCardJobCode struct {
	Value WebhookEventPaymentCardJobCode
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentCardJobCode was set.
func (o OptWebhookEventPaymentCardJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentCardJobCode) Reset() {
	var v WebhookEventPaymentCardJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentCardJobCode) SetTo(v WebhookEventPaymentCardJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentCardJobCode) Get() (v WebhookEventPaymentCardJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentCardJobCode) Or(d WebhookEventPaymentCardJobCode) WebhookEventPaymentCardJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentCardMethod returns new OptWebhookEventPaymentCardMethod with value set to v.
func NewOptWebhookEventPaymentCardMethod(v WebhookEventPaymentCardMethod) OptWebhookEventPaymentCardMethod {
	return OptWebhookEventPaymentCardMethod{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentCardMethod is optional WebhookEventPaymentCardMethod.
type OptWebhookEventPaymentCardMethod struct {
	Value WebhookEventPaymentCardMethod
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentCardMethod was set.
func (o OptWebhookEventPaymentCardMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentCardMethod) Reset() {
	var v WebhookEventPaymentCardMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentCardMethod) SetTo(v WebhookEventPaymentCardMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentCardMethod) Get() (v WebhookEventPaymentCardMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentCardMethod) Or(d WebhookEventPaymentCardMethod) WebhookEventPaymentCardMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentCardPayType returns new OptWebhookEventPaymentCardPayType with value set to v.
func NewOptWebhookEventPaymentCardPayType(v WebhookEventPaymentCardPayType) OptWebhookEventPaymentCardPayType {
	return OptWebhookEventPaymentCardPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentCardPayType is optional WebhookEventPaymentCardPayType.
type OptWebhookEventPaymentCardPayType struct {
	Value WebhookEventPaymentCardPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentCardPayType was set.
func (o OptWebhookEventPaymentCardPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentCardPayType) Reset() {
	var v WebhookEventPaymentCardPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentCardPayType) SetTo(v WebhookEventPaymentCardPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentCardPayType) Get() (v WebhookEventPaymentCardPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentCardPayType) Or(d WebhookEventPaymentCardPayType) WebhookEventPaymentCardPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentCardStatus returns new OptWebhookEventPaymentCardStatus with value set to v.
func NewOptWebhookEventPaymentCardStatus(v WebhookEventPaymentCardStatus) OptWebhookEventPaymentCardStatus {
	return OptWebhookEventPaymentCardStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentCardStatus is optional WebhookEventPaymentCardStatus.
type OptWebhookEventPaymentCardStatus struct {
	Value WebhookEventPaymentCardStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentCardStatus was set.
func (o OptWebhookEventPaymentCardStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentCardStatus) Reset() {
	var v WebhookEventPaymentCardStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentCardStatus) SetTo(v WebhookEventPaymentCardStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentCardStatus) Get() (v WebhookEventPaymentCardStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentCardStatus) Or(d WebhookEventPaymentCardStatus) WebhookEventPaymentCardStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentDirectDebitEvent returns new OptWebhookEventPaymentDirectDebitEvent with value set to v.
func NewOptWebhookEventPaymentDirectDebitEvent(v WebhookEventPaymentDirectDebitEvent) OptWebhookEventPaymentDirectDebitEvent {
	return OptWebhookEventPaymentDirectDebitEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentDirectDebitEvent is optional WebhookEventPaymentDirectDebitEvent.
type OptWebhookEventPaymentDirectDebitEvent struct {
	Value WebhookEventPaymentDirectDebitEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentDirectDebitEvent was set.
func (o OptWebhookEventPaymentDirectDebitEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentDirectDebitEvent) Reset() {
	var v WebhookEventPaymentDirectDebitEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentDirectDebitEvent) SetTo(v WebhookEventPaymentDirectDebitEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentDirectDebitEvent) Get() (v WebhookEventPaymentDirectDebitEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentDirectDebitEvent) Or(d WebhookEventPaymentDirectDebitEvent) WebhookEventPaymentDirectDebitEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentDirectDebitPayType returns new OptWebhookEventPaymentDirectDebitPayType with value set to v.
func NewOptWebhookEventPaymentDirectDebitPayType(v WebhookEventPaymentDirectDebitPayType) OptWebhookEventPaymentDirectDebitPayType {
	return OptWebhookEventPaymentDirectDebitPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentDirectDebitPayType is optional WebhookEventPaymentDirectDebitPayType.
type OptWebhookEventPaymentDirectDebitPayType struct {
	Value WebhookEventPaymentDirectDebitPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentDirectDebitPayType was set.
func (o OptWebhookEventPaymentDirectDebitPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentDirectDebitPayType) Reset() {
	var v WebhookEventPaymentDirectDebitPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentDirectDebitPayType) SetTo(v WebhookEventPaymentDirectDebitPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentDirectDebitPayType) Get() (v WebhookEventPaymentDirectDebitPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentDirectDebitPayType) Or(d WebhookEventPaymentDirectDebitPayType) WebhookEventPaymentDirectDebitPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentDirectDebitStatus returns new OptWebhookEventPaymentDirectDebitStatus with value set to v.
func NewOptWebhookEventPaymentDirectDebitStatus(v WebhookEventPaymentDirectDebitStatus) OptWebhookEventPaymentDirectDebitStatus {
	return OptWebhookEventPaymentDirectDebitStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentDirectDebitStatus is optional WebhookEventPaymentDirectDebitStatus.
type OptWebhookEventPaymentDirectDebitStatus struct {
	Value WebhookEventPaymentDirectDebitStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentDirectDebitStatus was set.
func (o OptWebhookEventPaymentDirectDebitStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentDirectDebitStatus) Reset() {
	var v WebhookEventPaymentDirectDebitStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentDirectDebitStatus) SetTo(v WebhookEventPaymentDirectDebitStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentDirectDebitStatus) Get() (v WebhookEventPaymentDirectDebitStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentDirectDebitStatus) Or(d WebhookEventPaymentDirectDebitStatus) WebhookEventPaymentDirectDebitStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentKonbiniEvent returns new OptWebhookEventPaymentKonbiniEvent with value set to v.
func NewOptWebhookEventPaymentKonbiniEvent(v WebhookEventPaymentKonbiniEvent) OptWebhookEventPaymentKonbiniEvent {
	return OptWebhookEventPaymentKonbiniEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentKonbiniEvent is optional WebhookEventPaymentKonbiniEvent.
type OptWebhookEventPaymentKonbiniEvent struct {
	Value WebhookEventPaymentKonbiniEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentKonbiniEvent was set.
func (o OptWebhookEventPaymentKonbiniEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentKonbiniEvent) Reset() {
	var v WebhookEventPaymentKonbiniEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentKonbiniEvent) SetTo(v WebhookEventPaymentKonbiniEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentKonbiniEvent) Get() (v WebhookEventPaymentKonbiniEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentKonbiniEvent) Or(d WebhookEventPaymentKonbiniEvent) WebhookEventPaymentKonbiniEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentKonbiniPayType returns new OptWebhookEventPaymentKonbiniPayType with value set to v.
func NewOptWebhookEventPaymentKonbiniPayType(v WebhookEventPaymentKonbiniPayType) OptWebhookEventPaymentKonbiniPayType {
	return OptWebhookEventPaymentKonbiniPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentKonbiniPayType is optional WebhookEventPaymentKonbiniPayType.
type OptWebhookEventPaymentKonbiniPayType struct {
	Value WebhookEventPaymentKonbiniPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentKonbiniPayType was set.
func (o OptWebhookEventPaymentKonbiniPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentKonbiniPayType) Reset() {
	var v WebhookEventPaymentKonbiniPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentKonbiniPayType) SetTo(v WebhookEventPaymentKonbiniPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentKonbiniPayType) Get() (v WebhookEventPaymentKonbiniPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentKonbiniPayType) Or(d WebhookEventPaymentKonbiniPayType) WebhookEventPaymentKonbiniPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentKonbiniStatus returns new OptWebhookEventPaymentKonbiniStatus with value set to v.
func NewOptWebhookEventPaymentKonbiniStatus(v WebhookEventPaymentKonbiniStatus) OptWebhookEventPaymentKonbiniStatus {
	return OptWebhookEventPaymentKonbiniStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentKonbiniStatus is optional WebhookEventPaymentKonbiniStatus.
type OptWebhookEventPaymentKonbiniStatus struct {
	Value WebhookEventPaymentKonbiniStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentKonbiniStatus was set.
func (o OptWebhookEventPaymentKonbiniStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentKonbiniStatus) Reset() {
	var v WebhookEventPaymentKonbiniStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentKonbiniStatus) SetTo(v WebhookEventPaymentKonbiniStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentKonbiniStatus) Get() (v WebhookEventPaymentKonbiniStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentKonbiniStatus) Or(d WebhookEventPaymentKonbiniStatus) WebhookEventPaymentKonbiniStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentPayPayEvent returns new OptWebhookEventPaymentPayPayEvent with value set to v.
func NewOptWebhookEventPaymentPayPayEvent(v WebhookEventPaymentPayPayEvent) OptWebhookEventPaymentPayPayEvent {
	return OptWebhookEventPaymentPayPayEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentPayPayEvent is optional WebhookEventPaymentPayPayEvent.
type OptWebhookEventPaymentPayPayEvent struct {
	Value WebhookEventPaymentPayPayEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentPayPayEvent was set.
func (o OptWebhookEventPaymentPayPayEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentPayPayEvent) Reset() {
	var v WebhookEventPaymentPayPayEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentPayPayEvent) SetTo(v WebhookEventPaymentPayPayEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentPayPayEvent) Get() (v WebhookEventPaymentPayPayEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentPayPayEvent) Or(d WebhookEventPaymentPayPayEvent) WebhookEventPaymentPayPayEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentPayPayJobCode returns new OptWebhookEventPaymentPayPayJobCode with value set to v.
func NewOptWebhookEventPaymentPayPayJobCode(v WebhookEventPaymentPayPayJobCode) OptWebhookEventPaymentPayPayJobCode {
	return OptWebhookEventPaymentPayPayJobCode{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentPayPayJobCode is optional WebhookEventPaymentPayPayJobCode.
type OptWebhookEventPaymentPayPayJobCode struct {
	Value WebhookEventPaymentPayPayJobCode
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentPayPayJobCode was set.
func (o OptWebhookEventPaymentPayPayJobCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentPayPayJobCode) Reset() {
	var v WebhookEventPaymentPayPayJobCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentPayPayJobCode) SetTo(v WebhookEventPaymentPayPayJobCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentPayPayJobCode) Get() (v WebhookEventPaymentPayPayJobCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentPayPayJobCode) Or(d WebhookEventPaymentPayPayJobCode) WebhookEventPaymentPayPayJobCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentPayPayPayType returns new OptWebhookEventPaymentPayPayPayType with value set to v.
func NewOptWebhookEventPaymentPayPayPayType(v WebhookEventPaymentPayPayPayType) OptWebhookEventPaymentPayPayPayType {
	return OptWebhookEventPaymentPayPayPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentPayPayPayType is optional WebhookEventPaymentPayPayPayType.
type OptWebhookEventPaymentPayPayPayType struct {
	Value WebhookEventPaymentPayPayPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentPayPayPayType was set.
func (o OptWebhookEventPaymentPayPayPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentPayPayPayType) Reset() {
	var v WebhookEventPaymentPayPayPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentPayPayPayType) SetTo(v WebhookEventPaymentPayPayPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentPayPayPayType) Get() (v WebhookEventPaymentPayPayPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentPayPayPayType) Or(d WebhookEventPaymentPayPayPayType) WebhookEventPaymentPayPayPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventPaymentPayPayStatus returns new OptWebhookEventPaymentPayPayStatus with value set to v.
func NewOptWebhookEventPaymentPayPayStatus(v WebhookEventPaymentPayPayStatus) OptWebhookEventPaymentPayPayStatus {
	return OptWebhookEventPaymentPayPayStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventPaymentPayPayStatus is optional WebhookEventPaymentPayPayStatus.
type OptWebhookEventPaymentPayPayStatus struct {
	Value WebhookEventPaymentPayPayStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventPaymentPayPayStatus was set.
func (o OptWebhookEventPaymentPayPayStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventPaymentPayPayStatus) Reset() {
	var v WebhookEventPaymentPayPayStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventPaymentPayPayStatus) SetTo(v WebhookEventPaymentPayPayStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventPaymentPayPayStatus) Get() (v WebhookEventPaymentPayPayStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventPaymentPayPayStatus) Or(d WebhookEventPaymentPayPayStatus) WebhookEventPaymentPayPayStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventRecurringBatchCardEvent returns new OptWebhookEventRecurringBatchCardEvent with value set to v.
func NewOptWebhookEventRecurringBatchCardEvent(v WebhookEventRecurringBatchCardEvent) OptWebhookEventRecurringBatchCardEvent {
	return OptWebhookEventRecurringBatchCardEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventRecurringBatchCardEvent is optional WebhookEventRecurringBatchCardEvent.
type OptWebhookEventRecurringBatchCardEvent struct {
	Value WebhookEventRecurringBatchCardEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventRecurringBatchCardEvent was set.
func (o OptWebhookEventRecurringBatchCardEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventRecurringBatchCardEvent) Reset() {
	var v WebhookEventRecurringBatchCardEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventRecurringBatchCardEvent) SetTo(v WebhookEventRecurringBatchCardEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventRecurringBatchCardEvent) Get() (v WebhookEventRecurringBatchCardEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventRecurringBatchCardEvent) Or(d WebhookEventRecurringBatchCardEvent) WebhookEventRecurringBatchCardEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventRecurringBatchCardPayType returns new OptWebhookEventRecurringBatchCardPayType with value set to v.
func NewOptWebhookEventRecurringBatchCardPayType(v WebhookEventRecurringBatchCardPayType) OptWebhookEventRecurringBatchCardPayType {
	return OptWebhookEventRecurringBatchCardPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventRecurringBatchCardPayType is optional WebhookEventRecurringBatchCardPayType.
type OptWebhookEventRecurringBatchCardPayType struct {
	Value WebhookEventRecurringBatchCardPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventRecurringBatchCardPayType was set.
func (o OptWebhookEventRecurringBatchCardPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventRecurringBatchCardPayType) Reset() {
	var v WebhookEventRecurringBatchCardPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventRecurringBatchCardPayType) SetTo(v WebhookEventRecurringBatchCardPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventRecurringBatchCardPayType) Get() (v WebhookEventRecurringBatchCardPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventRecurringBatchCardPayType) Or(d WebhookEventRecurringBatchCardPayType) WebhookEventRecurringBatchCardPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventRecurringBatchDirectDebitEvent returns new OptWebhookEventRecurringBatchDirectDebitEvent with value set to v.
func NewOptWebhookEventRecurringBatchDirectDebitEvent(v WebhookEventRecurringBatchDirectDebitEvent) OptWebhookEventRecurringBatchDirectDebitEvent {
	return OptWebhookEventRecurringBatchDirectDebitEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventRecurringBatchDirectDebitEvent is optional WebhookEventRecurringBatchDirectDebitEvent.
type OptWebhookEventRecurringBatchDirectDebitEvent struct {
	Value WebhookEventRecurringBatchDirectDebitEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventRecurringBatchDirectDebitEvent was set.
func (o OptWebhookEventRecurringBatchDirectDebitEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventRecurringBatchDirectDebitEvent) Reset() {
	var v WebhookEventRecurringBatchDirectDebitEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventRecurringBatchDirectDebitEvent) SetTo(v WebhookEventRecurringBatchDirectDebitEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventRecurringBatchDirectDebitEvent) Get() (v WebhookEventRecurringBatchDirectDebitEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventRecurringBatchDirectDebitEvent) Or(d WebhookEventRecurringBatchDirectDebitEvent) WebhookEventRecurringBatchDirectDebitEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventRecurringBatchDirectDebitPayType returns new OptWebhookEventRecurringBatchDirectDebitPayType with value set to v.
func NewOptWebhookEventRecurringBatchDirectDebitPayType(v WebhookEventRecurringBatchDirectDebitPayType) OptWebhookEventRecurringBatchDirectDebitPayType {
	return OptWebhookEventRecurringBatchDirectDebitPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventRecurringBatchDirectDebitPayType is optional WebhookEventRecurringBatchDirectDebitPayType.
type OptWebhookEventRecurringBatchDirectDebitPayType struct {
	Value WebhookEventRecurringBatchDirectDebitPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventRecurringBatchDirectDebitPayType was set.
func (o OptWebhookEventRecurringBatchDirectDebitPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventRecurringBatchDirectDebitPayType) Reset() {
	var v WebhookEventRecurringBatchDirectDebitPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventRecurringBatchDirectDebitPayType) SetTo(v WebhookEventRecurringBatchDirectDebitPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventRecurringBatchDirectDebitPayType) Get() (v WebhookEventRecurringBatchDirectDebitPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventRecurringBatchDirectDebitPayType) Or(d WebhookEventRecurringBatchDirectDebitPayType) WebhookEventRecurringBatchDirectDebitPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventSubscriptionCardEvent returns new OptWebhookEventSubscriptionCardEvent with value set to v.
func NewOptWebhookEventSubscriptionCardEvent(v WebhookEventSubscriptionCardEvent) OptWebhookEventSubscriptionCardEvent {
	return OptWebhookEventSubscriptionCardEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventSubscriptionCardEvent is optional WebhookEventSubscriptionCardEvent.
type OptWebhookEventSubscriptionCardEvent struct {
	Value WebhookEventSubscriptionCardEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventSubscriptionCardEvent was set.
func (o OptWebhookEventSubscriptionCardEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventSubscriptionCardEvent) Reset() {
	var v WebhookEventSubscriptionCardEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventSubscriptionCardEvent) SetTo(v WebhookEventSubscriptionCardEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventSubscriptionCardEvent) Get() (v WebhookEventSubscriptionCardEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventSubscriptionCardEvent) Or(d WebhookEventSubscriptionCardEvent) WebhookEventSubscriptionCardEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventSubscriptionCardPayType returns new OptWebhookEventSubscriptionCardPayType with value set to v.
func NewOptWebhookEventSubscriptionCardPayType(v WebhookEventSubscriptionCardPayType) OptWebhookEventSubscriptionCardPayType {
	return OptWebhookEventSubscriptionCardPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventSubscriptionCardPayType is optional WebhookEventSubscriptionCardPayType.
type OptWebhookEventSubscriptionCardPayType struct {
	Value WebhookEventSubscriptionCardPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventSubscriptionCardPayType was set.
func (o OptWebhookEventSubscriptionCardPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventSubscriptionCardPayType) Reset() {
	var v WebhookEventSubscriptionCardPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventSubscriptionCardPayType) SetTo(v WebhookEventSubscriptionCardPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventSubscriptionCardPayType) Get() (v WebhookEventSubscriptionCardPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventSubscriptionCardPayType) Or(d WebhookEventSubscriptionCardPayType) WebhookEventSubscriptionCardPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventSubscriptionCardStatus returns new OptWebhookEventSubscriptionCardStatus with value set to v.
func NewOptWebhookEventSubscriptionCardStatus(v WebhookEventSubscriptionCardStatus) OptWebhookEventSubscriptionCardStatus {
	return OptWebhookEventSubscriptionCardStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventSubscriptionCardStatus is optional WebhookEventSubscriptionCardStatus.
type OptWebhookEventSubscriptionCardStatus struct {
	Value WebhookEventSubscriptionCardStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventSubscriptionCardStatus was set.
func (o OptWebhookEventSubscriptionCardStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventSubscriptionCardStatus) Reset() {
	var v WebhookEventSubscriptionCardStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventSubscriptionCardStatus) SetTo(v WebhookEventSubscriptionCardStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventSubscriptionCardStatus) Get() (v WebhookEventSubscriptionCardStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventSubscriptionCardStatus) Or(d WebhookEventSubscriptionCardStatus) WebhookEventSubscriptionCardStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventSubscriptionDirectDebitEvent returns new OptWebhookEventSubscriptionDirectDebitEvent with value set to v.
func NewOptWebhookEventSubscriptionDirectDebitEvent(v WebhookEventSubscriptionDirectDebitEvent) OptWebhookEventSubscriptionDirectDebitEvent {
	return OptWebhookEventSubscriptionDirectDebitEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventSubscriptionDirectDebitEvent is optional WebhookEventSubscriptionDirectDebitEvent.
type OptWebhookEventSubscriptionDirectDebitEvent struct {
	Value WebhookEventSubscriptionDirectDebitEvent
	Set   bool
}

// IsSet returns true if OptWebhookEventSubscriptionDirectDebitEvent was set.
func (o OptWebhookEventSubscriptionDirectDebitEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventSubscriptionDirectDebitEvent) Reset() {
	var v WebhookEventSubscriptionDirectDebitEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventSubscriptionDirectDebitEvent) SetTo(v WebhookEventSubscriptionDirectDebitEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventSubscriptionDirectDebitEvent) Get() (v WebhookEventSubscriptionDirectDebitEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventSubscriptionDirectDebitEvent) Or(d WebhookEventSubscriptionDirectDebitEvent) WebhookEventSubscriptionDirectDebitEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventSubscriptionDirectDebitPayType returns new OptWebhookEventSubscriptionDirectDebitPayType with value set to v.
func NewOptWebhookEventSubscriptionDirectDebitPayType(v WebhookEventSubscriptionDirectDebitPayType) OptWebhookEventSubscriptionDirectDebitPayType {
	return OptWebhookEventSubscriptionDirectDebitPayType{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventSubscriptionDirectDebitPayType is optional WebhookEventSubscriptionDirectDebitPayType.
type OptWebhookEventSubscriptionDirectDebitPayType struct {
	Value WebhookEventSubscriptionDirectDebitPayType
	Set   bool
}

// IsSet returns true if OptWebhookEventSubscriptionDirectDebitPayType was set.
func (o OptWebhookEventSubscriptionDirectDebitPayType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventSubscriptionDirectDebitPayType) Reset() {
	var v WebhookEventSubscriptionDirectDebitPayType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventSubscriptionDirectDebitPayType) SetTo(v WebhookEventSubscriptionDirectDebitPayType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventSubscriptionDirectDebitPayType) Get() (v WebhookEventSubscriptionDirectDebitPayType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventSubscriptionDirectDebitPayType) Or(d WebhookEventSubscriptionDirectDebitPayType) WebhookEventSubscriptionDirectDebitPayType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookEventSubscriptionDirectDebitStatus returns new OptWebhookEventSubscriptionDirectDebitStatus with value set to v.
func NewOptWebhookEventSubscriptionDirectDebitStatus(v WebhookEventSubscriptionDirectDebitStatus) OptWebhookEventSubscriptionDirectDebitStatus {
	return OptWebhookEventSubscriptionDirectDebitStatus{
		Value: v,
		Set:   true,
	}
}

// OptWebhookEventSubscriptionDirectDebitStatus is optional WebhookEventSubscriptionDirectDebitStatus.
type OptWebhookEventSubscriptionDirectDebitStatus struct {
	Value WebhookEventSubscriptionDirectDebitStatus
	Set   bool
}

// IsSet returns true if OptWebhookEventSubscriptionDirectDebitStatus was set.
func (o OptWebhookEventSubscriptionDirectDebitStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookEventSubscriptionDirectDebitStatus) Reset() {
	var v WebhookEventSubscriptionDirectDebitStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookEventSubscriptionDirectDebitStatus) SetTo(v WebhookEventSubscriptionDirectDebitStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookEventSubscriptionDirectDebitStatus) Get() (v WebhookEventSubscriptionDirectDebitStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookEventSubscriptionDirectDebitStatus) Or(d WebhookEventSubscriptionDirectDebitStatus) WebhookEventSubscriptionDirectDebitStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookResponseReceive returns new OptWebhookResponseReceive with value set to v.
func NewOptWebhookResponseReceive(v WebhookResponseReceive) OptWebhookResponseReceive {
	return OptWebhookResponseReceive{
		Value: v,
		Set:   true,
	}
}

// OptWebhookResponseReceive is optional WebhookResponseReceive.
type OptWebhookResponseReceive struct {
	Value WebhookResponseReceive
	Set   bool
}

// IsSet returns true if OptWebhookResponseReceive was set.
func (o OptWebhookResponseReceive) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookResponseReceive) Reset() {
	var v WebhookResponseReceive
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookResponseReceive) SetTo(v WebhookResponseReceive) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookResponseReceive) Get() (v WebhookResponseReceive, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookResponseReceive) Or(d WebhookResponseReceive) WebhookResponseReceive {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookSettingCreatingResponseEvent returns new OptWebhookSettingCreatingResponseEvent with value set to v.
func NewOptWebhookSettingCreatingResponseEvent(v WebhookSettingCreatingResponseEvent) OptWebhookSettingCreatingResponseEvent {
	return OptWebhookSettingCreatingResponseEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookSettingCreatingResponseEvent is optional WebhookSettingCreatingResponseEvent.
type OptWebhookSettingCreatingResponseEvent struct {
	Value WebhookSettingCreatingResponseEvent
	Set   bool
}

// IsSet returns true if OptWebhookSettingCreatingResponseEvent was set.
func (o OptWebhookSettingCreatingResponseEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookSettingCreatingResponseEvent) Reset() {
	var v WebhookSettingCreatingResponseEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookSettingCreatingResponseEvent) SetTo(v WebhookSettingCreatingResponseEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookSettingCreatingResponseEvent) Get() (v WebhookSettingCreatingResponseEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookSettingCreatingResponseEvent) Or(d WebhookSettingCreatingResponseEvent) WebhookSettingCreatingResponseEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookSettingDeletingResponseDeleteFlag returns new OptWebhookSettingDeletingResponseDeleteFlag with value set to v.
func NewOptWebhookSettingDeletingResponseDeleteFlag(v WebhookSettingDeletingResponseDeleteFlag) OptWebhookSettingDeletingResponseDeleteFlag {
	return OptWebhookSettingDeletingResponseDeleteFlag{
		Value: v,
		Set:   true,
	}
}

// OptWebhookSettingDeletingResponseDeleteFlag is optional WebhookSettingDeletingResponseDeleteFlag.
type OptWebhookSettingDeletingResponseDeleteFlag struct {
	Value WebhookSettingDeletingResponseDeleteFlag
	Set   bool
}

// IsSet returns true if OptWebhookSettingDeletingResponseDeleteFlag was set.
func (o OptWebhookSettingDeletingResponseDeleteFlag) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookSettingDeletingResponseDeleteFlag) Reset() {
	var v WebhookSettingDeletingResponseDeleteFlag
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookSettingDeletingResponseDeleteFlag) SetTo(v WebhookSettingDeletingResponseDeleteFlag) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookSettingDeletingResponseDeleteFlag) Get() (v WebhookSettingDeletingResponseDeleteFlag, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookSettingDeletingResponseDeleteFlag) Or(d WebhookSettingDeletingResponseDeleteFlag) WebhookSettingDeletingResponseDeleteFlag {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookSettingEvent returns new OptWebhookSettingEvent with value set to v.
func NewOptWebhookSettingEvent(v WebhookSettingEvent) OptWebhookSettingEvent {
	return OptWebhookSettingEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookSettingEvent is optional WebhookSettingEvent.
type OptWebhookSettingEvent struct {
	Value WebhookSettingEvent
	Set   bool
}

// IsSet returns true if OptWebhookSettingEvent was set.
func (o OptWebhookSettingEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookSettingEvent) Reset() {
	var v WebhookSettingEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookSettingEvent) SetTo(v WebhookSettingEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookSettingEvent) Get() (v WebhookSettingEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookSettingEvent) Or(d WebhookSettingEvent) WebhookSettingEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookSettingRetrievingResponseEvent returns new OptWebhookSettingRetrievingResponseEvent with value set to v.
func NewOptWebhookSettingRetrievingResponseEvent(v WebhookSettingRetrievingResponseEvent) OptWebhookSettingRetrievingResponseEvent {
	return OptWebhookSettingRetrievingResponseEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookSettingRetrievingResponseEvent is optional WebhookSettingRetrievingResponseEvent.
type OptWebhookSettingRetrievingResponseEvent struct {
	Value WebhookSettingRetrievingResponseEvent
	Set   bool
}

// IsSet returns true if OptWebhookSettingRetrievingResponseEvent was set.
func (o OptWebhookSettingRetrievingResponseEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookSettingRetrievingResponseEvent) Reset() {
	var v WebhookSettingRetrievingResponseEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookSettingRetrievingResponseEvent) SetTo(v WebhookSettingRetrievingResponseEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookSettingRetrievingResponseEvent) Get() (v WebhookSettingRetrievingResponseEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookSettingRetrievingResponseEvent) Or(d WebhookSettingRetrievingResponseEvent) WebhookSettingRetrievingResponseEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookSettingUpdatingRequestEvent returns new OptWebhookSettingUpdatingRequestEvent with value set to v.
func NewOptWebhookSettingUpdatingRequestEvent(v WebhookSettingUpdatingRequestEvent) OptWebhookSettingUpdatingRequestEvent {
	return OptWebhookSettingUpdatingRequestEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookSettingUpdatingRequestEvent is optional WebhookSettingUpdatingRequestEvent.
type OptWebhookSettingUpdatingRequestEvent struct {
	Value WebhookSettingUpdatingRequestEvent
	Set   bool
}

// IsSet returns true if OptWebhookSettingUpdatingRequestEvent was set.
func (o OptWebhookSettingUpdatingRequestEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookSettingUpdatingRequestEvent) Reset() {
	var v WebhookSettingUpdatingRequestEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookSettingUpdatingRequestEvent) SetTo(v WebhookSettingUpdatingRequestEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookSettingUpdatingRequestEvent) Get() (v WebhookSettingUpdatingRequestEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookSettingUpdatingRequestEvent) Or(d WebhookSettingUpdatingRequestEvent) WebhookSettingUpdatingRequestEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookSettingUpdatingResponseEvent returns new OptWebhookSettingUpdatingResponseEvent with value set to v.
func NewOptWebhookSettingUpdatingResponseEvent(v WebhookSettingUpdatingResponseEvent) OptWebhookSettingUpdatingResponseEvent {
	return OptWebhookSettingUpdatingResponseEvent{
		Value: v,
		Set:   true,
	}
}

// OptWebhookSettingUpdatingResponseEvent is optional WebhookSettingUpdatingResponseEvent.
type OptWebhookSettingUpdatingResponseEvent struct {
	Value WebhookSettingUpdatingResponseEvent
	Set   bool
}

// IsSet returns true if OptWebhookSettingUpdatingResponseEvent was set.
func (o OptWebhookSettingUpdatingResponseEvent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookSettingUpdatingResponseEvent) Reset() {
	var v WebhookSettingUpdatingResponseEvent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookSettingUpdatingResponseEvent) SetTo(v WebhookSettingUpdatingResponseEvent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookSettingUpdatingResponseEvent) Get() (v WebhookSettingUpdatingResponseEvent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookSettingUpdatingResponseEvent) Or(d WebhookSettingUpdatingResponseEvent) WebhookSettingUpdatingResponseEvent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/POST.ContractsExaminations.Request
type POSTContractsExaminationsRequestMultipart struct {
	ShopID OptString `json:"shop_id"`
	// VISA/Mastercard即時利用をリクエストするかどうか\
	// \
	// 即時利用は以下の条件すべてに合致しないとき利用をリクエストできます。
	// - `本番環境申請情報.contract_info.
	// site_published`が`true`でない（審査時点でWebサイトが用意されていない）
	// - `本番環境申請情報.shop_info.
	// deals_long_apply_content`が`true`である（審査に時間がかかる商材を取り扱うと表明している）.
	EnableImmediateUse OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse `json:"enable_immediate_use"`
}

// GetShopID returns the value of ShopID.
func (s *POSTContractsExaminationsRequestMultipart) GetShopID() OptString {
	return s.ShopID
}

// GetEnableImmediateUse returns the value of EnableImmediateUse.
func (s *POSTContractsExaminationsRequestMultipart) GetEnableImmediateUse() OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse {
	return s.EnableImmediateUse
}

// SetShopID sets the value of ShopID.
func (s *POSTContractsExaminationsRequestMultipart) SetShopID(val OptString) {
	s.ShopID = val
}

// SetEnableImmediateUse sets the value of EnableImmediateUse.
func (s *POSTContractsExaminationsRequestMultipart) SetEnableImmediateUse(val OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) {
	s.EnableImmediateUse = val
}

// VISA/Mastercard即時利用 結果
// - `1`: OK<br /><span
// class="smallText">即時利用が認められました。VISA/Mastercardブランドの決済受付が可能な状態です。</span>
// - `2`: NG<br /><span
// class="smallText">ネガティブチェックにより、fincodeの利用が認められませんでした。</span>
// - `3`: 保留<br /><span
// class="smallText">即時利用が認められませんでした。審査は継続して行われます。</span>.
type POSTContractsExaminationsRequestMultipartEnableImmediateUse float64

const (
	POSTContractsExaminationsRequestMultipartEnableImmediateUse1 POSTContractsExaminationsRequestMultipartEnableImmediateUse = 1
	POSTContractsExaminationsRequestMultipartEnableImmediateUse2 POSTContractsExaminationsRequestMultipartEnableImmediateUse = 2
	POSTContractsExaminationsRequestMultipartEnableImmediateUse3 POSTContractsExaminationsRequestMultipartEnableImmediateUse = 3
)

// AllValues returns all POSTContractsExaminationsRequestMultipartEnableImmediateUse values.
func (POSTContractsExaminationsRequestMultipartEnableImmediateUse) AllValues() []POSTContractsExaminationsRequestMultipartEnableImmediateUse {
	return []POSTContractsExaminationsRequestMultipartEnableImmediateUse{
		POSTContractsExaminationsRequestMultipartEnableImmediateUse1,
		POSTContractsExaminationsRequestMultipartEnableImmediateUse2,
		POSTContractsExaminationsRequestMultipartEnableImmediateUse3,
	}
}

// Ref: #/components/schemas/POST.ContractsExaminations.Response
type POSTContractsExaminationsResponse struct {
	// ショップID（テナント）\
	// \
	// 審査申請を行うテナントのショップID.
	ShopID OptString `json:"shop_id"`
	// VISA/Mastercard即時利用 結果
	// - `1`: OK<br /><span
	// class="smallText">即時利用が認められました。VISA/Mastercardブランドの決済受付が可能な状態です。</span>
	// - `2`: NG<br /><span
	// class="smallText">ネガティブチェックにより、fincodeの利用が認められませんでした。</span>
	// - `3`: 保留<br /><span
	// class="smallText">即時利用が認められませんでした。審査は継続して行われます。</span>.
	EnableImmediateUse OptPOSTContractsExaminationsResponseEnableImmediateUse `json:"enable_immediate_use"`
}

// GetShopID returns the value of ShopID.
func (s *POSTContractsExaminationsResponse) GetShopID() OptString {
	return s.ShopID
}

// GetEnableImmediateUse returns the value of EnableImmediateUse.
func (s *POSTContractsExaminationsResponse) GetEnableImmediateUse() OptPOSTContractsExaminationsResponseEnableImmediateUse {
	return s.EnableImmediateUse
}

// SetShopID sets the value of ShopID.
func (s *POSTContractsExaminationsResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetEnableImmediateUse sets the value of EnableImmediateUse.
func (s *POSTContractsExaminationsResponse) SetEnableImmediateUse(val OptPOSTContractsExaminationsResponseEnableImmediateUse) {
	s.EnableImmediateUse = val
}

func (*POSTContractsExaminationsResponse) requestProductionEnvironmentRes() {}

// VISA/Mastercard即時利用 結果
// - `1`: OK<br /><span
// class="smallText">即時利用が認められました。VISA/Mastercardブランドの決済受付が可能な状態です。</span>
// - `2`: NG<br /><span
// class="smallText">ネガティブチェックにより、fincodeの利用が認められませんでした。</span>
// - `3`: 保留<br /><span
// class="smallText">即時利用が認められませんでした。審査は継続して行われます。</span>.
type POSTContractsExaminationsResponseEnableImmediateUse float64

const (
	POSTContractsExaminationsResponseEnableImmediateUse1 POSTContractsExaminationsResponseEnableImmediateUse = 1
	POSTContractsExaminationsResponseEnableImmediateUse2 POSTContractsExaminationsResponseEnableImmediateUse = 2
	POSTContractsExaminationsResponseEnableImmediateUse3 POSTContractsExaminationsResponseEnableImmediateUse = 3
)

// AllValues returns all POSTContractsExaminationsResponseEnableImmediateUse values.
func (POSTContractsExaminationsResponseEnableImmediateUse) AllValues() []POSTContractsExaminationsResponseEnableImmediateUse {
	return []POSTContractsExaminationsResponseEnableImmediateUse{
		POSTContractsExaminationsResponseEnableImmediateUse1,
		POSTContractsExaminationsResponseEnableImmediateUse2,
		POSTContractsExaminationsResponseEnableImmediateUse3,
	}
}

// Ref: #/components/schemas/POST.JoinTenants.Request
type POSTJoinTenantsRequest struct {
	Email       string `json:"email"`
	Password    string `json:"password"`
	TenantURLID string `json:"tenant_url_id"`
}

// GetEmail returns the value of Email.
func (s *POSTJoinTenantsRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *POSTJoinTenantsRequest) GetPassword() string {
	return s.Password
}

// GetTenantURLID returns the value of TenantURLID.
func (s *POSTJoinTenantsRequest) GetTenantURLID() string {
	return s.TenantURLID
}

// SetEmail sets the value of Email.
func (s *POSTJoinTenantsRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *POSTJoinTenantsRequest) SetPassword(val string) {
	s.Password = val
}

// SetTenantURLID sets the value of TenantURLID.
func (s *POSTJoinTenantsRequest) SetTenantURLID(val string) {
	s.TenantURLID = val
}

// Ref: #/components/schemas/POST.JoinTenants.Response
type POSTJoinTenantsResponse struct {
	ID                 OptString                                     `json:"id"`
	ShopName           *NilString                                    `json:"shop_name"`
	ShopNameKana       *NilString                                    `json:"shop_name_kana"`
	ShopType           *NilPOSTJoinTenantsResponseShopType           `json:"shop_type"`
	PlatformID         OptString                                     `json:"platform_id"`
	PlatformName       *NilString                                    `json:"platform_name"`
	SharedCustomerFlag *NilPOSTJoinTenantsResponseSharedCustomerFlag `json:"shared_customer_flag"`
	CustomerGroupID    *NilString                                    `json:"customer_group_id"`
	SendMailAddress    *NilString                                    `json:"send_mail_address"`
	ShopMailAddress    *NilString                                    `json:"shop_mail_address"`
	LogKeepDays        *NilString                                    `json:"log_keep_days"`
	APIVersion         *NilString                                    `json:"api_version"`
	APIKeyDisplayFlag  *NilPOSTJoinTenantsResponseAPIKeyDisplayFlag  `json:"api_key_display_flag"`
	Created            OptString                                     `json:"created"`
	Updated            *NilString                                    `json:"updated"`
}

// GetID returns the value of ID.
func (s *POSTJoinTenantsResponse) GetID() OptString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *POSTJoinTenantsResponse) GetShopName() *NilString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *POSTJoinTenantsResponse) GetShopNameKana() *NilString {
	return s.ShopNameKana
}

// GetShopType returns the value of ShopType.
func (s *POSTJoinTenantsResponse) GetShopType() *NilPOSTJoinTenantsResponseShopType {
	return s.ShopType
}

// GetPlatformID returns the value of PlatformID.
func (s *POSTJoinTenantsResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetPlatformName returns the value of PlatformName.
func (s *POSTJoinTenantsResponse) GetPlatformName() *NilString {
	return s.PlatformName
}

// GetSharedCustomerFlag returns the value of SharedCustomerFlag.
func (s *POSTJoinTenantsResponse) GetSharedCustomerFlag() *NilPOSTJoinTenantsResponseSharedCustomerFlag {
	return s.SharedCustomerFlag
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *POSTJoinTenantsResponse) GetCustomerGroupID() *NilString {
	return s.CustomerGroupID
}

// GetSendMailAddress returns the value of SendMailAddress.
func (s *POSTJoinTenantsResponse) GetSendMailAddress() *NilString {
	return s.SendMailAddress
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *POSTJoinTenantsResponse) GetShopMailAddress() *NilString {
	return s.ShopMailAddress
}

// GetLogKeepDays returns the value of LogKeepDays.
func (s *POSTJoinTenantsResponse) GetLogKeepDays() *NilString {
	return s.LogKeepDays
}

// GetAPIVersion returns the value of APIVersion.
func (s *POSTJoinTenantsResponse) GetAPIVersion() *NilString {
	return s.APIVersion
}

// GetAPIKeyDisplayFlag returns the value of APIKeyDisplayFlag.
func (s *POSTJoinTenantsResponse) GetAPIKeyDisplayFlag() *NilPOSTJoinTenantsResponseAPIKeyDisplayFlag {
	return s.APIKeyDisplayFlag
}

// GetCreated returns the value of Created.
func (s *POSTJoinTenantsResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *POSTJoinTenantsResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *POSTJoinTenantsResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *POSTJoinTenantsResponse) SetShopName(val *NilString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *POSTJoinTenantsResponse) SetShopNameKana(val *NilString) {
	s.ShopNameKana = val
}

// SetShopType sets the value of ShopType.
func (s *POSTJoinTenantsResponse) SetShopType(val *NilPOSTJoinTenantsResponseShopType) {
	s.ShopType = val
}

// SetPlatformID sets the value of PlatformID.
func (s *POSTJoinTenantsResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetPlatformName sets the value of PlatformName.
func (s *POSTJoinTenantsResponse) SetPlatformName(val *NilString) {
	s.PlatformName = val
}

// SetSharedCustomerFlag sets the value of SharedCustomerFlag.
func (s *POSTJoinTenantsResponse) SetSharedCustomerFlag(val *NilPOSTJoinTenantsResponseSharedCustomerFlag) {
	s.SharedCustomerFlag = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *POSTJoinTenantsResponse) SetCustomerGroupID(val *NilString) {
	s.CustomerGroupID = val
}

// SetSendMailAddress sets the value of SendMailAddress.
func (s *POSTJoinTenantsResponse) SetSendMailAddress(val *NilString) {
	s.SendMailAddress = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *POSTJoinTenantsResponse) SetShopMailAddress(val *NilString) {
	s.ShopMailAddress = val
}

// SetLogKeepDays sets the value of LogKeepDays.
func (s *POSTJoinTenantsResponse) SetLogKeepDays(val *NilString) {
	s.LogKeepDays = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *POSTJoinTenantsResponse) SetAPIVersion(val *NilString) {
	s.APIVersion = val
}

// SetAPIKeyDisplayFlag sets the value of APIKeyDisplayFlag.
func (s *POSTJoinTenantsResponse) SetAPIKeyDisplayFlag(val *NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) {
	s.APIKeyDisplayFlag = val
}

// SetCreated sets the value of Created.
func (s *POSTJoinTenantsResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *POSTJoinTenantsResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*POSTJoinTenantsResponse) createTenantWithExistingUserRes() {}

// 管理画面におけるAPIキー表示フラグ。
// - `0`: 表示しない
// - `1`: 表示する.
type POSTJoinTenantsResponseAPIKeyDisplayFlag string

const (
	POSTJoinTenantsResponseAPIKeyDisplayFlag0 POSTJoinTenantsResponseAPIKeyDisplayFlag = "0"
	POSTJoinTenantsResponseAPIKeyDisplayFlag1 POSTJoinTenantsResponseAPIKeyDisplayFlag = "1"
)

// AllValues returns all POSTJoinTenantsResponseAPIKeyDisplayFlag values.
func (POSTJoinTenantsResponseAPIKeyDisplayFlag) AllValues() []POSTJoinTenantsResponseAPIKeyDisplayFlag {
	return []POSTJoinTenantsResponseAPIKeyDisplayFlag{
		POSTJoinTenantsResponseAPIKeyDisplayFlag0,
		POSTJoinTenantsResponseAPIKeyDisplayFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTJoinTenantsResponseAPIKeyDisplayFlag) MarshalText() ([]byte, error) {
	switch s {
	case POSTJoinTenantsResponseAPIKeyDisplayFlag0:
		return []byte(s), nil
	case POSTJoinTenantsResponseAPIKeyDisplayFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTJoinTenantsResponseAPIKeyDisplayFlag) UnmarshalText(data []byte) error {
	switch POSTJoinTenantsResponseAPIKeyDisplayFlag(data) {
	case POSTJoinTenantsResponseAPIKeyDisplayFlag0:
		*s = POSTJoinTenantsResponseAPIKeyDisplayFlag0
		return nil
	case POSTJoinTenantsResponseAPIKeyDisplayFlag1:
		*s = POSTJoinTenantsResponseAPIKeyDisplayFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 顧客情報共有フラグ
// - `0`: 顧客情報を共有しない<br /><span
// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
// - `1`: 顧客情報を共有する<br /><span
// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
type POSTJoinTenantsResponseSharedCustomerFlag string

const (
	POSTJoinTenantsResponseSharedCustomerFlag0 POSTJoinTenantsResponseSharedCustomerFlag = "0"
	POSTJoinTenantsResponseSharedCustomerFlag1 POSTJoinTenantsResponseSharedCustomerFlag = "1"
)

// AllValues returns all POSTJoinTenantsResponseSharedCustomerFlag values.
func (POSTJoinTenantsResponseSharedCustomerFlag) AllValues() []POSTJoinTenantsResponseSharedCustomerFlag {
	return []POSTJoinTenantsResponseSharedCustomerFlag{
		POSTJoinTenantsResponseSharedCustomerFlag0,
		POSTJoinTenantsResponseSharedCustomerFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTJoinTenantsResponseSharedCustomerFlag) MarshalText() ([]byte, error) {
	switch s {
	case POSTJoinTenantsResponseSharedCustomerFlag0:
		return []byte(s), nil
	case POSTJoinTenantsResponseSharedCustomerFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTJoinTenantsResponseSharedCustomerFlag) UnmarshalText(data []byte) error {
	switch POSTJoinTenantsResponseSharedCustomerFlag(data) {
	case POSTJoinTenantsResponseSharedCustomerFlag0:
		*s = POSTJoinTenantsResponseSharedCustomerFlag0
		return nil
	case POSTJoinTenantsResponseSharedCustomerFlag1:
		*s = POSTJoinTenantsResponseSharedCustomerFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type POSTJoinTenantsResponseShopType string

const (
	POSTJoinTenantsResponseShopTypePlatform POSTJoinTenantsResponseShopType = "platform"
	POSTJoinTenantsResponseShopTypeTenant   POSTJoinTenantsResponseShopType = "tenant"
)

// AllValues returns all POSTJoinTenantsResponseShopType values.
func (POSTJoinTenantsResponseShopType) AllValues() []POSTJoinTenantsResponseShopType {
	return []POSTJoinTenantsResponseShopType{
		POSTJoinTenantsResponseShopTypePlatform,
		POSTJoinTenantsResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTJoinTenantsResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case POSTJoinTenantsResponseShopTypePlatform:
		return []byte(s), nil
	case POSTJoinTenantsResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTJoinTenantsResponseShopType) UnmarshalText(data []byte) error {
	switch POSTJoinTenantsResponseShopType(data) {
	case POSTJoinTenantsResponseShopTypePlatform:
		*s = POSTJoinTenantsResponseShopTypePlatform
		return nil
	case POSTJoinTenantsResponseShopTypeTenant:
		*s = POSTJoinTenantsResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/POST.ProviderReserve.Request
type POSTProviderReserveRequestMultipart struct {
	Provider []POSTProviderReserveRequestMultipartProviderItem `json:"provider"`
}

// GetProvider returns the value of Provider.
func (s *POSTProviderReserveRequestMultipart) GetProvider() []POSTProviderReserveRequestMultipartProviderItem {
	return s.Provider
}

// SetProvider sets the value of Provider.
func (s *POSTProviderReserveRequestMultipart) SetProvider(val []POSTProviderReserveRequestMultipartProviderItem) {
	s.Provider = val
}

// - `PAYSLE`: コンビニ決済
// - `PAYPAY`: PayPay
// - `APPLE_PAY_UC`: Apple Pay（VISA/Mastercard）
// - `APPLE_PAY_JCB`: Apple Pay（JCB/American Express/Diners Club）
// - `DIRECT_DEBIT`: 口座振替
// - `VIRTUAL_ACCOUNT`: 銀行振込（バーチャル口座）.
type POSTProviderReserveRequestMultipartProviderItem string

const (
	POSTProviderReserveRequestMultipartProviderItemPAYSLE         POSTProviderReserveRequestMultipartProviderItem = "PAYSLE"
	POSTProviderReserveRequestMultipartProviderItemPAYPAY         POSTProviderReserveRequestMultipartProviderItem = "PAYPAY"
	POSTProviderReserveRequestMultipartProviderItemAPPLEPAYUC     POSTProviderReserveRequestMultipartProviderItem = "APPLE_PAY_UC"
	POSTProviderReserveRequestMultipartProviderItemAPPLEPAYJCB    POSTProviderReserveRequestMultipartProviderItem = "APPLE_PAY_JCB"
	POSTProviderReserveRequestMultipartProviderItemDIRECTDEBIT    POSTProviderReserveRequestMultipartProviderItem = "DIRECT_DEBIT"
	POSTProviderReserveRequestMultipartProviderItemVIRTUALACCOUNT POSTProviderReserveRequestMultipartProviderItem = "VIRTUAL_ACCOUNT"
)

// AllValues returns all POSTProviderReserveRequestMultipartProviderItem values.
func (POSTProviderReserveRequestMultipartProviderItem) AllValues() []POSTProviderReserveRequestMultipartProviderItem {
	return []POSTProviderReserveRequestMultipartProviderItem{
		POSTProviderReserveRequestMultipartProviderItemPAYSLE,
		POSTProviderReserveRequestMultipartProviderItemPAYPAY,
		POSTProviderReserveRequestMultipartProviderItemAPPLEPAYUC,
		POSTProviderReserveRequestMultipartProviderItemAPPLEPAYJCB,
		POSTProviderReserveRequestMultipartProviderItemDIRECTDEBIT,
		POSTProviderReserveRequestMultipartProviderItemVIRTUALACCOUNT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTProviderReserveRequestMultipartProviderItem) MarshalText() ([]byte, error) {
	switch s {
	case POSTProviderReserveRequestMultipartProviderItemPAYSLE:
		return []byte(s), nil
	case POSTProviderReserveRequestMultipartProviderItemPAYPAY:
		return []byte(s), nil
	case POSTProviderReserveRequestMultipartProviderItemAPPLEPAYUC:
		return []byte(s), nil
	case POSTProviderReserveRequestMultipartProviderItemAPPLEPAYJCB:
		return []byte(s), nil
	case POSTProviderReserveRequestMultipartProviderItemDIRECTDEBIT:
		return []byte(s), nil
	case POSTProviderReserveRequestMultipartProviderItemVIRTUALACCOUNT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTProviderReserveRequestMultipartProviderItem) UnmarshalText(data []byte) error {
	switch POSTProviderReserveRequestMultipartProviderItem(data) {
	case POSTProviderReserveRequestMultipartProviderItemPAYSLE:
		*s = POSTProviderReserveRequestMultipartProviderItemPAYSLE
		return nil
	case POSTProviderReserveRequestMultipartProviderItemPAYPAY:
		*s = POSTProviderReserveRequestMultipartProviderItemPAYPAY
		return nil
	case POSTProviderReserveRequestMultipartProviderItemAPPLEPAYUC:
		*s = POSTProviderReserveRequestMultipartProviderItemAPPLEPAYUC
		return nil
	case POSTProviderReserveRequestMultipartProviderItemAPPLEPAYJCB:
		*s = POSTProviderReserveRequestMultipartProviderItemAPPLEPAYJCB
		return nil
	case POSTProviderReserveRequestMultipartProviderItemDIRECTDEBIT:
		*s = POSTProviderReserveRequestMultipartProviderItemDIRECTDEBIT
		return nil
	case POSTProviderReserveRequestMultipartProviderItemVIRTUALACCOUNT:
		*s = POSTProviderReserveRequestMultipartProviderItemVIRTUALACCOUNT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/POST.ProviderReserve.Response
type POSTProviderReserveResponse struct {
	// 決済手段追加 申請リスト\
	// \
	// 申請中の決済手段のリストです。.
	ReservationList []POSTProviderReserveResponseReservationListItem `json:"reservation_list"`
}

// GetReservationList returns the value of ReservationList.
func (s *POSTProviderReserveResponse) GetReservationList() []POSTProviderReserveResponseReservationListItem {
	return s.ReservationList
}

// SetReservationList sets the value of ReservationList.
func (s *POSTProviderReserveResponse) SetReservationList(val []POSTProviderReserveResponseReservationListItem) {
	s.ReservationList = val
}

func (*POSTProviderReserveResponse) reserveProviderRes() {}

type POSTProviderReserveResponseReservationListItem struct {
	// 追加申請ID.
	ReservationID OptInt                                                    `json:"reservation_id"`
	ShopID        OptString                                                 `json:"shop_id"`
	Provider      OptPOSTProviderReserveResponseReservationListItemProvider `json:"provider"`
}

// GetReservationID returns the value of ReservationID.
func (s *POSTProviderReserveResponseReservationListItem) GetReservationID() OptInt {
	return s.ReservationID
}

// GetShopID returns the value of ShopID.
func (s *POSTProviderReserveResponseReservationListItem) GetShopID() OptString {
	return s.ShopID
}

// GetProvider returns the value of Provider.
func (s *POSTProviderReserveResponseReservationListItem) GetProvider() OptPOSTProviderReserveResponseReservationListItemProvider {
	return s.Provider
}

// SetReservationID sets the value of ReservationID.
func (s *POSTProviderReserveResponseReservationListItem) SetReservationID(val OptInt) {
	s.ReservationID = val
}

// SetShopID sets the value of ShopID.
func (s *POSTProviderReserveResponseReservationListItem) SetShopID(val OptString) {
	s.ShopID = val
}

// SetProvider sets the value of Provider.
func (s *POSTProviderReserveResponseReservationListItem) SetProvider(val OptPOSTProviderReserveResponseReservationListItemProvider) {
	s.Provider = val
}

// - `PAYSLE`: コンビニ決済
// - `PAYPAY`: PayPay
// - `APPLE_PAY_UC`: Apple Pay（VISA/Mastercard）
// - `APPLE_PAY_JCB`: Apple Pay（JCB/American Express/Diners Club）
// - `DIRECT_DEBIT`: 口座振替
// - `VIRTUAL_ACCOUNT`: 銀行振込（バーチャル口座）.
type POSTProviderReserveResponseReservationListItemProvider string

const (
	POSTProviderReserveResponseReservationListItemProviderPAYSLE         POSTProviderReserveResponseReservationListItemProvider = "PAYSLE"
	POSTProviderReserveResponseReservationListItemProviderPAYPAY         POSTProviderReserveResponseReservationListItemProvider = "PAYPAY"
	POSTProviderReserveResponseReservationListItemProviderAPPLEPAYUC     POSTProviderReserveResponseReservationListItemProvider = "APPLE_PAY_UC"
	POSTProviderReserveResponseReservationListItemProviderAPPLEPAYJCB    POSTProviderReserveResponseReservationListItemProvider = "APPLE_PAY_JCB"
	POSTProviderReserveResponseReservationListItemProviderDIRECTDEBIT    POSTProviderReserveResponseReservationListItemProvider = "DIRECT_DEBIT"
	POSTProviderReserveResponseReservationListItemProviderVIRTUALACCOUNT POSTProviderReserveResponseReservationListItemProvider = "VIRTUAL_ACCOUNT"
)

// AllValues returns all POSTProviderReserveResponseReservationListItemProvider values.
func (POSTProviderReserveResponseReservationListItemProvider) AllValues() []POSTProviderReserveResponseReservationListItemProvider {
	return []POSTProviderReserveResponseReservationListItemProvider{
		POSTProviderReserveResponseReservationListItemProviderPAYSLE,
		POSTProviderReserveResponseReservationListItemProviderPAYPAY,
		POSTProviderReserveResponseReservationListItemProviderAPPLEPAYUC,
		POSTProviderReserveResponseReservationListItemProviderAPPLEPAYJCB,
		POSTProviderReserveResponseReservationListItemProviderDIRECTDEBIT,
		POSTProviderReserveResponseReservationListItemProviderVIRTUALACCOUNT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTProviderReserveResponseReservationListItemProvider) MarshalText() ([]byte, error) {
	switch s {
	case POSTProviderReserveResponseReservationListItemProviderPAYSLE:
		return []byte(s), nil
	case POSTProviderReserveResponseReservationListItemProviderPAYPAY:
		return []byte(s), nil
	case POSTProviderReserveResponseReservationListItemProviderAPPLEPAYUC:
		return []byte(s), nil
	case POSTProviderReserveResponseReservationListItemProviderAPPLEPAYJCB:
		return []byte(s), nil
	case POSTProviderReserveResponseReservationListItemProviderDIRECTDEBIT:
		return []byte(s), nil
	case POSTProviderReserveResponseReservationListItemProviderVIRTUALACCOUNT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTProviderReserveResponseReservationListItemProvider) UnmarshalText(data []byte) error {
	switch POSTProviderReserveResponseReservationListItemProvider(data) {
	case POSTProviderReserveResponseReservationListItemProviderPAYSLE:
		*s = POSTProviderReserveResponseReservationListItemProviderPAYSLE
		return nil
	case POSTProviderReserveResponseReservationListItemProviderPAYPAY:
		*s = POSTProviderReserveResponseReservationListItemProviderPAYPAY
		return nil
	case POSTProviderReserveResponseReservationListItemProviderAPPLEPAYUC:
		*s = POSTProviderReserveResponseReservationListItemProviderAPPLEPAYUC
		return nil
	case POSTProviderReserveResponseReservationListItemProviderAPPLEPAYJCB:
		*s = POSTProviderReserveResponseReservationListItemProviderAPPLEPAYJCB
		return nil
	case POSTProviderReserveResponseReservationListItemProviderDIRECTDEBIT:
		*s = POSTProviderReserveResponseReservationListItemProviderDIRECTDEBIT
		return nil
	case POSTProviderReserveResponseReservationListItemProviderVIRTUALACCOUNT:
		*s = POSTProviderReserveResponseReservationListItemProviderVIRTUALACCOUNT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/POST.TenantEntries.Request
type POSTTenantEntriesRequest struct {
	Email       string `json:"email"`
	Password    string `json:"password"`
	Name        string `json:"name"`
	TenantURLID string `json:"tenant_url_id"`
}

// GetEmail returns the value of Email.
func (s *POSTTenantEntriesRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *POSTTenantEntriesRequest) GetPassword() string {
	return s.Password
}

// GetName returns the value of Name.
func (s *POSTTenantEntriesRequest) GetName() string {
	return s.Name
}

// GetTenantURLID returns the value of TenantURLID.
func (s *POSTTenantEntriesRequest) GetTenantURLID() string {
	return s.TenantURLID
}

// SetEmail sets the value of Email.
func (s *POSTTenantEntriesRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *POSTTenantEntriesRequest) SetPassword(val string) {
	s.Password = val
}

// SetName sets the value of Name.
func (s *POSTTenantEntriesRequest) SetName(val string) {
	s.Name = val
}

// SetTenantURLID sets the value of TenantURLID.
func (s *POSTTenantEntriesRequest) SetTenantURLID(val string) {
	s.TenantURLID = val
}

// Ref: #/components/schemas/POST.TenantEntries.Response
type POSTTenantEntriesResponse struct {
	// 新規作成されたユーザー情報（このAPIによって新規作成されたテナントのショップIDを含む）.
	UserData OptPOSTTenantEntriesResponseUserData `json:"user_data"`
	// アクセストークン.
	AccessToken OptString `json:"access_token"`
	// ユーザーの権限情報\
	// \
	// このユーザーが実行可能なエンドポイントとHTTPメソッドの情報.
	Authorities []POSTTenantEntriesResponseAuthoritiesItem `json:"authorities"`
}

// GetUserData returns the value of UserData.
func (s *POSTTenantEntriesResponse) GetUserData() OptPOSTTenantEntriesResponseUserData {
	return s.UserData
}

// GetAccessToken returns the value of AccessToken.
func (s *POSTTenantEntriesResponse) GetAccessToken() OptString {
	return s.AccessToken
}

// GetAuthorities returns the value of Authorities.
func (s *POSTTenantEntriesResponse) GetAuthorities() []POSTTenantEntriesResponseAuthoritiesItem {
	return s.Authorities
}

// SetUserData sets the value of UserData.
func (s *POSTTenantEntriesResponse) SetUserData(val OptPOSTTenantEntriesResponseUserData) {
	s.UserData = val
}

// SetAccessToken sets the value of AccessToken.
func (s *POSTTenantEntriesResponse) SetAccessToken(val OptString) {
	s.AccessToken = val
}

// SetAuthorities sets the value of Authorities.
func (s *POSTTenantEntriesResponse) SetAuthorities(val []POSTTenantEntriesResponseAuthoritiesItem) {
	s.Authorities = val
}

func (*POSTTenantEntriesResponse) createTenantWithNewUserRes() {}

type POSTTenantEntriesResponseAuthoritiesItem struct {
	// 権限ID.
	AuthID OptInt `json:"auth_id"`
	// エンドポイント.
	Endpoint OptString `json:"endpoint"`
	// HTTPメソッド.
	Method OptString `json:"method"`
}

// GetAuthID returns the value of AuthID.
func (s *POSTTenantEntriesResponseAuthoritiesItem) GetAuthID() OptInt {
	return s.AuthID
}

// GetEndpoint returns the value of Endpoint.
func (s *POSTTenantEntriesResponseAuthoritiesItem) GetEndpoint() OptString {
	return s.Endpoint
}

// GetMethod returns the value of Method.
func (s *POSTTenantEntriesResponseAuthoritiesItem) GetMethod() OptString {
	return s.Method
}

// SetAuthID sets the value of AuthID.
func (s *POSTTenantEntriesResponseAuthoritiesItem) SetAuthID(val OptInt) {
	s.AuthID = val
}

// SetEndpoint sets the value of Endpoint.
func (s *POSTTenantEntriesResponseAuthoritiesItem) SetEndpoint(val OptString) {
	s.Endpoint = val
}

// SetMethod sets the value of Method.
func (s *POSTTenantEntriesResponseAuthoritiesItem) SetMethod(val OptString) {
	s.Method = val
}

type POSTTenantEntriesResponseUserData struct {
	// ユーザーID.
	ID OptString `json:"id"`
	// デフォルトショップID\
	// \
	// このユーザーがログインした際、どのショップにログインするかを示すID.
	DefaultShopID OptString `json:"default_shop_id"`
	RoleID        OptInt    `json:"role_id"`
	// ユーザー名.
	Name OptString `json:"name"`
	// メールアドレス.
	Email OptString `json:"email"`
	// ユーザー種別
	// - `01`: ショップユーザー.
	Type OptPOSTTenantEntriesResponseUserDataType `json:"type"`
	// 二要素認証ステータス
	// - `00`: 未設定\
	// - `01`: 設定済み.
	TwoFactorAuthStatus OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus `json:"two_factor_auth_status"`
	// メールアドレス認証ステータス
	// - `00`: 未設定\
	// - `01`: 設定済み.
	MailAuthStatus OptPOSTTenantEntriesResponseUserDataMailAuthStatus `json:"mail_auth_status"`
	// パスワードロックステータス
	// - `00`: ロックされていない\
	// - `01`: ロック中.
	PasswordLockStatus OptPOSTTenantEntriesResponseUserDataPasswordLockStatus `json:"password_lock_status"`
	// 最終ログイン日時\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	LastLoginDate OptNilString `json:"last_login_date"`
	// ログイン失敗日時\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	LoginFailureDate OptNilString `json:"login_failure_date"`
	// ログイン失敗回数.
	LoginFailureTimes OptInt `json:"login_failure_times"`
	// パスワード有効期限\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PasswordExpire OptNilString `json:"password_expire"`
	// アカウントステータス
	// - `00`: 有効
	// - `01`: 無効.
	AccountStatus OptPOSTTenantEntriesResponseUserDataAccountStatus `json:"account_status"`
	// 招待ステータス
	// - `01`: 招待中
	// - `02`: 参加済み.
	InviteStatus OptPOSTTenantEntriesResponseUserDataInviteStatus `json:"invite_status"`
	Created      OptString                                        `json:"created"`
	Updated      *NilString                                       `json:"updated"`
}

// GetID returns the value of ID.
func (s *POSTTenantEntriesResponseUserData) GetID() OptString {
	return s.ID
}

// GetDefaultShopID returns the value of DefaultShopID.
func (s *POSTTenantEntriesResponseUserData) GetDefaultShopID() OptString {
	return s.DefaultShopID
}

// GetRoleID returns the value of RoleID.
func (s *POSTTenantEntriesResponseUserData) GetRoleID() OptInt {
	return s.RoleID
}

// GetName returns the value of Name.
func (s *POSTTenantEntriesResponseUserData) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *POSTTenantEntriesResponseUserData) GetEmail() OptString {
	return s.Email
}

// GetType returns the value of Type.
func (s *POSTTenantEntriesResponseUserData) GetType() OptPOSTTenantEntriesResponseUserDataType {
	return s.Type
}

// GetTwoFactorAuthStatus returns the value of TwoFactorAuthStatus.
func (s *POSTTenantEntriesResponseUserData) GetTwoFactorAuthStatus() OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus {
	return s.TwoFactorAuthStatus
}

// GetMailAuthStatus returns the value of MailAuthStatus.
func (s *POSTTenantEntriesResponseUserData) GetMailAuthStatus() OptPOSTTenantEntriesResponseUserDataMailAuthStatus {
	return s.MailAuthStatus
}

// GetPasswordLockStatus returns the value of PasswordLockStatus.
func (s *POSTTenantEntriesResponseUserData) GetPasswordLockStatus() OptPOSTTenantEntriesResponseUserDataPasswordLockStatus {
	return s.PasswordLockStatus
}

// GetLastLoginDate returns the value of LastLoginDate.
func (s *POSTTenantEntriesResponseUserData) GetLastLoginDate() OptNilString {
	return s.LastLoginDate
}

// GetLoginFailureDate returns the value of LoginFailureDate.
func (s *POSTTenantEntriesResponseUserData) GetLoginFailureDate() OptNilString {
	return s.LoginFailureDate
}

// GetLoginFailureTimes returns the value of LoginFailureTimes.
func (s *POSTTenantEntriesResponseUserData) GetLoginFailureTimes() OptInt {
	return s.LoginFailureTimes
}

// GetPasswordExpire returns the value of PasswordExpire.
func (s *POSTTenantEntriesResponseUserData) GetPasswordExpire() OptNilString {
	return s.PasswordExpire
}

// GetAccountStatus returns the value of AccountStatus.
func (s *POSTTenantEntriesResponseUserData) GetAccountStatus() OptPOSTTenantEntriesResponseUserDataAccountStatus {
	return s.AccountStatus
}

// GetInviteStatus returns the value of InviteStatus.
func (s *POSTTenantEntriesResponseUserData) GetInviteStatus() OptPOSTTenantEntriesResponseUserDataInviteStatus {
	return s.InviteStatus
}

// GetCreated returns the value of Created.
func (s *POSTTenantEntriesResponseUserData) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *POSTTenantEntriesResponseUserData) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *POSTTenantEntriesResponseUserData) SetID(val OptString) {
	s.ID = val
}

// SetDefaultShopID sets the value of DefaultShopID.
func (s *POSTTenantEntriesResponseUserData) SetDefaultShopID(val OptString) {
	s.DefaultShopID = val
}

// SetRoleID sets the value of RoleID.
func (s *POSTTenantEntriesResponseUserData) SetRoleID(val OptInt) {
	s.RoleID = val
}

// SetName sets the value of Name.
func (s *POSTTenantEntriesResponseUserData) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *POSTTenantEntriesResponseUserData) SetEmail(val OptString) {
	s.Email = val
}

// SetType sets the value of Type.
func (s *POSTTenantEntriesResponseUserData) SetType(val OptPOSTTenantEntriesResponseUserDataType) {
	s.Type = val
}

// SetTwoFactorAuthStatus sets the value of TwoFactorAuthStatus.
func (s *POSTTenantEntriesResponseUserData) SetTwoFactorAuthStatus(val OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) {
	s.TwoFactorAuthStatus = val
}

// SetMailAuthStatus sets the value of MailAuthStatus.
func (s *POSTTenantEntriesResponseUserData) SetMailAuthStatus(val OptPOSTTenantEntriesResponseUserDataMailAuthStatus) {
	s.MailAuthStatus = val
}

// SetPasswordLockStatus sets the value of PasswordLockStatus.
func (s *POSTTenantEntriesResponseUserData) SetPasswordLockStatus(val OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) {
	s.PasswordLockStatus = val
}

// SetLastLoginDate sets the value of LastLoginDate.
func (s *POSTTenantEntriesResponseUserData) SetLastLoginDate(val OptNilString) {
	s.LastLoginDate = val
}

// SetLoginFailureDate sets the value of LoginFailureDate.
func (s *POSTTenantEntriesResponseUserData) SetLoginFailureDate(val OptNilString) {
	s.LoginFailureDate = val
}

// SetLoginFailureTimes sets the value of LoginFailureTimes.
func (s *POSTTenantEntriesResponseUserData) SetLoginFailureTimes(val OptInt) {
	s.LoginFailureTimes = val
}

// SetPasswordExpire sets the value of PasswordExpire.
func (s *POSTTenantEntriesResponseUserData) SetPasswordExpire(val OptNilString) {
	s.PasswordExpire = val
}

// SetAccountStatus sets the value of AccountStatus.
func (s *POSTTenantEntriesResponseUserData) SetAccountStatus(val OptPOSTTenantEntriesResponseUserDataAccountStatus) {
	s.AccountStatus = val
}

// SetInviteStatus sets the value of InviteStatus.
func (s *POSTTenantEntriesResponseUserData) SetInviteStatus(val OptPOSTTenantEntriesResponseUserDataInviteStatus) {
	s.InviteStatus = val
}

// SetCreated sets the value of Created.
func (s *POSTTenantEntriesResponseUserData) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *POSTTenantEntriesResponseUserData) SetUpdated(val *NilString) {
	s.Updated = val
}

// アカウントステータス
// - `00`: 有効
// - `01`: 無効.
type POSTTenantEntriesResponseUserDataAccountStatus string

const (
	POSTTenantEntriesResponseUserDataAccountStatus00 POSTTenantEntriesResponseUserDataAccountStatus = "00"
	POSTTenantEntriesResponseUserDataAccountStatus01 POSTTenantEntriesResponseUserDataAccountStatus = "01"
)

// AllValues returns all POSTTenantEntriesResponseUserDataAccountStatus values.
func (POSTTenantEntriesResponseUserDataAccountStatus) AllValues() []POSTTenantEntriesResponseUserDataAccountStatus {
	return []POSTTenantEntriesResponseUserDataAccountStatus{
		POSTTenantEntriesResponseUserDataAccountStatus00,
		POSTTenantEntriesResponseUserDataAccountStatus01,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTTenantEntriesResponseUserDataAccountStatus) MarshalText() ([]byte, error) {
	switch s {
	case POSTTenantEntriesResponseUserDataAccountStatus00:
		return []byte(s), nil
	case POSTTenantEntriesResponseUserDataAccountStatus01:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTTenantEntriesResponseUserDataAccountStatus) UnmarshalText(data []byte) error {
	switch POSTTenantEntriesResponseUserDataAccountStatus(data) {
	case POSTTenantEntriesResponseUserDataAccountStatus00:
		*s = POSTTenantEntriesResponseUserDataAccountStatus00
		return nil
	case POSTTenantEntriesResponseUserDataAccountStatus01:
		*s = POSTTenantEntriesResponseUserDataAccountStatus01
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 招待ステータス
// - `01`: 招待中
// - `02`: 参加済み.
type POSTTenantEntriesResponseUserDataInviteStatus string

const (
	POSTTenantEntriesResponseUserDataInviteStatus01 POSTTenantEntriesResponseUserDataInviteStatus = "01"
	POSTTenantEntriesResponseUserDataInviteStatus02 POSTTenantEntriesResponseUserDataInviteStatus = "02"
)

// AllValues returns all POSTTenantEntriesResponseUserDataInviteStatus values.
func (POSTTenantEntriesResponseUserDataInviteStatus) AllValues() []POSTTenantEntriesResponseUserDataInviteStatus {
	return []POSTTenantEntriesResponseUserDataInviteStatus{
		POSTTenantEntriesResponseUserDataInviteStatus01,
		POSTTenantEntriesResponseUserDataInviteStatus02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTTenantEntriesResponseUserDataInviteStatus) MarshalText() ([]byte, error) {
	switch s {
	case POSTTenantEntriesResponseUserDataInviteStatus01:
		return []byte(s), nil
	case POSTTenantEntriesResponseUserDataInviteStatus02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTTenantEntriesResponseUserDataInviteStatus) UnmarshalText(data []byte) error {
	switch POSTTenantEntriesResponseUserDataInviteStatus(data) {
	case POSTTenantEntriesResponseUserDataInviteStatus01:
		*s = POSTTenantEntriesResponseUserDataInviteStatus01
		return nil
	case POSTTenantEntriesResponseUserDataInviteStatus02:
		*s = POSTTenantEntriesResponseUserDataInviteStatus02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// メールアドレス認証ステータス
// - `00`: 未設定\
// - `01`: 設定済み.
type POSTTenantEntriesResponseUserDataMailAuthStatus string

const (
	POSTTenantEntriesResponseUserDataMailAuthStatus00 POSTTenantEntriesResponseUserDataMailAuthStatus = "00"
	POSTTenantEntriesResponseUserDataMailAuthStatus01 POSTTenantEntriesResponseUserDataMailAuthStatus = "01"
)

// AllValues returns all POSTTenantEntriesResponseUserDataMailAuthStatus values.
func (POSTTenantEntriesResponseUserDataMailAuthStatus) AllValues() []POSTTenantEntriesResponseUserDataMailAuthStatus {
	return []POSTTenantEntriesResponseUserDataMailAuthStatus{
		POSTTenantEntriesResponseUserDataMailAuthStatus00,
		POSTTenantEntriesResponseUserDataMailAuthStatus01,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTTenantEntriesResponseUserDataMailAuthStatus) MarshalText() ([]byte, error) {
	switch s {
	case POSTTenantEntriesResponseUserDataMailAuthStatus00:
		return []byte(s), nil
	case POSTTenantEntriesResponseUserDataMailAuthStatus01:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTTenantEntriesResponseUserDataMailAuthStatus) UnmarshalText(data []byte) error {
	switch POSTTenantEntriesResponseUserDataMailAuthStatus(data) {
	case POSTTenantEntriesResponseUserDataMailAuthStatus00:
		*s = POSTTenantEntriesResponseUserDataMailAuthStatus00
		return nil
	case POSTTenantEntriesResponseUserDataMailAuthStatus01:
		*s = POSTTenantEntriesResponseUserDataMailAuthStatus01
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// パスワードロックステータス
// - `00`: ロックされていない\
// - `01`: ロック中.
type POSTTenantEntriesResponseUserDataPasswordLockStatus string

const (
	POSTTenantEntriesResponseUserDataPasswordLockStatus00 POSTTenantEntriesResponseUserDataPasswordLockStatus = "00"
	POSTTenantEntriesResponseUserDataPasswordLockStatus01 POSTTenantEntriesResponseUserDataPasswordLockStatus = "01"
)

// AllValues returns all POSTTenantEntriesResponseUserDataPasswordLockStatus values.
func (POSTTenantEntriesResponseUserDataPasswordLockStatus) AllValues() []POSTTenantEntriesResponseUserDataPasswordLockStatus {
	return []POSTTenantEntriesResponseUserDataPasswordLockStatus{
		POSTTenantEntriesResponseUserDataPasswordLockStatus00,
		POSTTenantEntriesResponseUserDataPasswordLockStatus01,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTTenantEntriesResponseUserDataPasswordLockStatus) MarshalText() ([]byte, error) {
	switch s {
	case POSTTenantEntriesResponseUserDataPasswordLockStatus00:
		return []byte(s), nil
	case POSTTenantEntriesResponseUserDataPasswordLockStatus01:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTTenantEntriesResponseUserDataPasswordLockStatus) UnmarshalText(data []byte) error {
	switch POSTTenantEntriesResponseUserDataPasswordLockStatus(data) {
	case POSTTenantEntriesResponseUserDataPasswordLockStatus00:
		*s = POSTTenantEntriesResponseUserDataPasswordLockStatus00
		return nil
	case POSTTenantEntriesResponseUserDataPasswordLockStatus01:
		*s = POSTTenantEntriesResponseUserDataPasswordLockStatus01
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 二要素認証ステータス
// - `00`: 未設定\
// - `01`: 設定済み.
type POSTTenantEntriesResponseUserDataTwoFactorAuthStatus string

const (
	POSTTenantEntriesResponseUserDataTwoFactorAuthStatus00 POSTTenantEntriesResponseUserDataTwoFactorAuthStatus = "00"
	POSTTenantEntriesResponseUserDataTwoFactorAuthStatus01 POSTTenantEntriesResponseUserDataTwoFactorAuthStatus = "01"
)

// AllValues returns all POSTTenantEntriesResponseUserDataTwoFactorAuthStatus values.
func (POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) AllValues() []POSTTenantEntriesResponseUserDataTwoFactorAuthStatus {
	return []POSTTenantEntriesResponseUserDataTwoFactorAuthStatus{
		POSTTenantEntriesResponseUserDataTwoFactorAuthStatus00,
		POSTTenantEntriesResponseUserDataTwoFactorAuthStatus01,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) MarshalText() ([]byte, error) {
	switch s {
	case POSTTenantEntriesResponseUserDataTwoFactorAuthStatus00:
		return []byte(s), nil
	case POSTTenantEntriesResponseUserDataTwoFactorAuthStatus01:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) UnmarshalText(data []byte) error {
	switch POSTTenantEntriesResponseUserDataTwoFactorAuthStatus(data) {
	case POSTTenantEntriesResponseUserDataTwoFactorAuthStatus00:
		*s = POSTTenantEntriesResponseUserDataTwoFactorAuthStatus00
		return nil
	case POSTTenantEntriesResponseUserDataTwoFactorAuthStatus01:
		*s = POSTTenantEntriesResponseUserDataTwoFactorAuthStatus01
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ユーザー種別
// - `01`: ショップユーザー.
type POSTTenantEntriesResponseUserDataType string

const (
	POSTTenantEntriesResponseUserDataType01 POSTTenantEntriesResponseUserDataType = "01"
)

// AllValues returns all POSTTenantEntriesResponseUserDataType values.
func (POSTTenantEntriesResponseUserDataType) AllValues() []POSTTenantEntriesResponseUserDataType {
	return []POSTTenantEntriesResponseUserDataType{
		POSTTenantEntriesResponseUserDataType01,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s POSTTenantEntriesResponseUserDataType) MarshalText() ([]byte, error) {
	switch s {
	case POSTTenantEntriesResponseUserDataType01:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *POSTTenantEntriesResponseUserDataType) UnmarshalText(data []byte) error {
	switch POSTTenantEntriesResponseUserDataType(data) {
	case POSTTenantEntriesResponseUserDataType01:
		*s = POSTTenantEntriesResponseUserDataType01
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentBulk
type PaymentBulk struct {
	// 一括決済ID.
	ID      OptString             `json:"id"`
	ShopID  OptString             `json:"shop_id"`
	PayType OptPaymentBulkPayType `json:"pay_type"`
	Status  OptPaymentBulkStatus  `json:"status"`
	// 一括決済 処理予定日\
	// この一括決済の処理予定日です。\
	// \
	// 形式：`yyyy/MM/dd`.
	ProcessPlanDate OptString `json:"process_plan_date"`
	// 一括決済データファイル名.
	FileName OptString `json:"file_name"`
	// 一括決済 処理開始日時\
	// この一括決済の処理開始日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ProcessStartDate OptNilString `json:"process_start_date"`
	// 一括決済 処理終了日時\
	// この一括決済の処理終了日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ProcessEndDate OptNilString `json:"process_end_date"`
	// 一括決済 総件数\
	// この一括決済に含まれる決済の件数です。.
	TotalCount OptInt32 `json:"total_count"`
	// 一括決済 成功件数\
	// この一括決済の処理に成功した決済の件数です。.
	ProcessSuccessCount OptInt32 `json:"process_success_count"`
	// 一括決済 失敗件数\
	// この一括決済の処理に失敗した決済の件数です。.
	ProcessFailureCount OptInt32 `json:"process_failure_count"`
	// この一括決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode  OptNilString             `json:"error_code"`
	DeleteFlag OptPaymentBulkDeleteFlag `json:"delete_flag"`
	Created    OptString                `json:"created"`
	Updated    *NilString               `json:"updated"`
}

// GetID returns the value of ID.
func (s *PaymentBulk) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *PaymentBulk) GetShopID() OptString {
	return s.ShopID
}

// GetPayType returns the value of PayType.
func (s *PaymentBulk) GetPayType() OptPaymentBulkPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentBulk) GetStatus() OptPaymentBulkStatus {
	return s.Status
}

// GetProcessPlanDate returns the value of ProcessPlanDate.
func (s *PaymentBulk) GetProcessPlanDate() OptString {
	return s.ProcessPlanDate
}

// GetFileName returns the value of FileName.
func (s *PaymentBulk) GetFileName() OptString {
	return s.FileName
}

// GetProcessStartDate returns the value of ProcessStartDate.
func (s *PaymentBulk) GetProcessStartDate() OptNilString {
	return s.ProcessStartDate
}

// GetProcessEndDate returns the value of ProcessEndDate.
func (s *PaymentBulk) GetProcessEndDate() OptNilString {
	return s.ProcessEndDate
}

// GetTotalCount returns the value of TotalCount.
func (s *PaymentBulk) GetTotalCount() OptInt32 {
	return s.TotalCount
}

// GetProcessSuccessCount returns the value of ProcessSuccessCount.
func (s *PaymentBulk) GetProcessSuccessCount() OptInt32 {
	return s.ProcessSuccessCount
}

// GetProcessFailureCount returns the value of ProcessFailureCount.
func (s *PaymentBulk) GetProcessFailureCount() OptInt32 {
	return s.ProcessFailureCount
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentBulk) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PaymentBulk) GetDeleteFlag() OptPaymentBulkDeleteFlag {
	return s.DeleteFlag
}

// GetCreated returns the value of Created.
func (s *PaymentBulk) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentBulk) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PaymentBulk) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *PaymentBulk) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentBulk) SetPayType(val OptPaymentBulkPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentBulk) SetStatus(val OptPaymentBulkStatus) {
	s.Status = val
}

// SetProcessPlanDate sets the value of ProcessPlanDate.
func (s *PaymentBulk) SetProcessPlanDate(val OptString) {
	s.ProcessPlanDate = val
}

// SetFileName sets the value of FileName.
func (s *PaymentBulk) SetFileName(val OptString) {
	s.FileName = val
}

// SetProcessStartDate sets the value of ProcessStartDate.
func (s *PaymentBulk) SetProcessStartDate(val OptNilString) {
	s.ProcessStartDate = val
}

// SetProcessEndDate sets the value of ProcessEndDate.
func (s *PaymentBulk) SetProcessEndDate(val OptNilString) {
	s.ProcessEndDate = val
}

// SetTotalCount sets the value of TotalCount.
func (s *PaymentBulk) SetTotalCount(val OptInt32) {
	s.TotalCount = val
}

// SetProcessSuccessCount sets the value of ProcessSuccessCount.
func (s *PaymentBulk) SetProcessSuccessCount(val OptInt32) {
	s.ProcessSuccessCount = val
}

// SetProcessFailureCount sets the value of ProcessFailureCount.
func (s *PaymentBulk) SetProcessFailureCount(val OptInt32) {
	s.ProcessFailureCount = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentBulk) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PaymentBulk) SetDeleteFlag(val OptPaymentBulkDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreated sets the value of Created.
func (s *PaymentBulk) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentBulk) SetUpdated(val *NilString) {
	s.Updated = val
}

// Ref: #/components/schemas/PaymentBulk.Creating.Request
type PaymentBulkCreatingRequestMultipart struct {
	File OptString `json:"file"`
}

// GetFile returns the value of File.
func (s *PaymentBulkCreatingRequestMultipart) GetFile() OptString {
	return s.File
}

// SetFile sets the value of File.
func (s *PaymentBulkCreatingRequestMultipart) SetFile(val OptString) {
	s.File = val
}

// Ref: #/components/schemas/PaymentBulk.Creating.Response
type PaymentBulkCreatingResponse struct {
	// 一括決済ID.
	ID      OptString                             `json:"id"`
	ShopID  OptString                             `json:"shop_id"`
	PayType OptPaymentBulkCreatingResponsePayType `json:"pay_type"`
	Status  OptPaymentBulkCreatingResponseStatus  `json:"status"`
	// 一括決済 処理予定日\
	// この一括決済の処理予定日です。\
	// \
	// 形式：`yyyy/MM/dd`.
	ProcessPlanDate OptString `json:"process_plan_date"`
	// 一括決済データファイル名.
	FileName OptString `json:"file_name"`
	// 一括決済 処理開始日時\
	// この一括決済の処理開始日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ProcessStartDate OptNilString `json:"process_start_date"`
	// 一括決済 処理終了日時\
	// この一括決済の処理終了日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ProcessEndDate OptNilString `json:"process_end_date"`
	// 一括決済 総件数\
	// この一括決済に含まれる決済の件数です。.
	TotalCount OptInt32 `json:"total_count"`
	// 一括決済 成功件数\
	// この一括決済の処理に成功した決済の件数です。.
	ProcessSuccessCount OptInt32 `json:"process_success_count"`
	// 一括決済 失敗件数\
	// この一括決済の処理に失敗した決済の件数です。.
	ProcessFailureCount OptInt32 `json:"process_failure_count"`
	// この一括決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode  OptNilString                             `json:"error_code"`
	DeleteFlag OptPaymentBulkCreatingResponseDeleteFlag `json:"delete_flag"`
	Created    OptString                                `json:"created"`
	Updated    *NilString                               `json:"updated"`
}

// GetID returns the value of ID.
func (s *PaymentBulkCreatingResponse) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *PaymentBulkCreatingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPayType returns the value of PayType.
func (s *PaymentBulkCreatingResponse) GetPayType() OptPaymentBulkCreatingResponsePayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *PaymentBulkCreatingResponse) GetStatus() OptPaymentBulkCreatingResponseStatus {
	return s.Status
}

// GetProcessPlanDate returns the value of ProcessPlanDate.
func (s *PaymentBulkCreatingResponse) GetProcessPlanDate() OptString {
	return s.ProcessPlanDate
}

// GetFileName returns the value of FileName.
func (s *PaymentBulkCreatingResponse) GetFileName() OptString {
	return s.FileName
}

// GetProcessStartDate returns the value of ProcessStartDate.
func (s *PaymentBulkCreatingResponse) GetProcessStartDate() OptNilString {
	return s.ProcessStartDate
}

// GetProcessEndDate returns the value of ProcessEndDate.
func (s *PaymentBulkCreatingResponse) GetProcessEndDate() OptNilString {
	return s.ProcessEndDate
}

// GetTotalCount returns the value of TotalCount.
func (s *PaymentBulkCreatingResponse) GetTotalCount() OptInt32 {
	return s.TotalCount
}

// GetProcessSuccessCount returns the value of ProcessSuccessCount.
func (s *PaymentBulkCreatingResponse) GetProcessSuccessCount() OptInt32 {
	return s.ProcessSuccessCount
}

// GetProcessFailureCount returns the value of ProcessFailureCount.
func (s *PaymentBulkCreatingResponse) GetProcessFailureCount() OptInt32 {
	return s.ProcessFailureCount
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentBulkCreatingResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PaymentBulkCreatingResponse) GetDeleteFlag() OptPaymentBulkCreatingResponseDeleteFlag {
	return s.DeleteFlag
}

// GetCreated returns the value of Created.
func (s *PaymentBulkCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentBulkCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PaymentBulkCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *PaymentBulkCreatingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentBulkCreatingResponse) SetPayType(val OptPaymentBulkCreatingResponsePayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *PaymentBulkCreatingResponse) SetStatus(val OptPaymentBulkCreatingResponseStatus) {
	s.Status = val
}

// SetProcessPlanDate sets the value of ProcessPlanDate.
func (s *PaymentBulkCreatingResponse) SetProcessPlanDate(val OptString) {
	s.ProcessPlanDate = val
}

// SetFileName sets the value of FileName.
func (s *PaymentBulkCreatingResponse) SetFileName(val OptString) {
	s.FileName = val
}

// SetProcessStartDate sets the value of ProcessStartDate.
func (s *PaymentBulkCreatingResponse) SetProcessStartDate(val OptNilString) {
	s.ProcessStartDate = val
}

// SetProcessEndDate sets the value of ProcessEndDate.
func (s *PaymentBulkCreatingResponse) SetProcessEndDate(val OptNilString) {
	s.ProcessEndDate = val
}

// SetTotalCount sets the value of TotalCount.
func (s *PaymentBulkCreatingResponse) SetTotalCount(val OptInt32) {
	s.TotalCount = val
}

// SetProcessSuccessCount sets the value of ProcessSuccessCount.
func (s *PaymentBulkCreatingResponse) SetProcessSuccessCount(val OptInt32) {
	s.ProcessSuccessCount = val
}

// SetProcessFailureCount sets the value of ProcessFailureCount.
func (s *PaymentBulkCreatingResponse) SetProcessFailureCount(val OptInt32) {
	s.ProcessFailureCount = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentBulkCreatingResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PaymentBulkCreatingResponse) SetDeleteFlag(val OptPaymentBulkCreatingResponseDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreated sets the value of Created.
func (s *PaymentBulkCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentBulkCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PaymentBulkCreatingResponse) createPaymentBulkRes() {}

// 削除フラグ.
type PaymentBulkCreatingResponseDeleteFlag string

const (
	PaymentBulkCreatingResponseDeleteFlag1 PaymentBulkCreatingResponseDeleteFlag = "1"
	PaymentBulkCreatingResponseDeleteFlag0 PaymentBulkCreatingResponseDeleteFlag = "0"
)

// AllValues returns all PaymentBulkCreatingResponseDeleteFlag values.
func (PaymentBulkCreatingResponseDeleteFlag) AllValues() []PaymentBulkCreatingResponseDeleteFlag {
	return []PaymentBulkCreatingResponseDeleteFlag{
		PaymentBulkCreatingResponseDeleteFlag1,
		PaymentBulkCreatingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkCreatingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkCreatingResponseDeleteFlag1:
		return []byte(s), nil
	case PaymentBulkCreatingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkCreatingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch PaymentBulkCreatingResponseDeleteFlag(data) {
	case PaymentBulkCreatingResponseDeleteFlag1:
		*s = PaymentBulkCreatingResponseDeleteFlag1
		return nil
	case PaymentBulkCreatingResponseDeleteFlag0:
		*s = PaymentBulkCreatingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（一括決済に対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード.
type PaymentBulkCreatingResponsePayType string

const (
	PaymentBulkCreatingResponsePayTypeCard PaymentBulkCreatingResponsePayType = "Card"
)

// AllValues returns all PaymentBulkCreatingResponsePayType values.
func (PaymentBulkCreatingResponsePayType) AllValues() []PaymentBulkCreatingResponsePayType {
	return []PaymentBulkCreatingResponsePayType{
		PaymentBulkCreatingResponsePayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkCreatingResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkCreatingResponsePayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkCreatingResponsePayType) UnmarshalText(data []byte) error {
	switch PaymentBulkCreatingResponsePayType(data) {
	case PaymentBulkCreatingResponsePayTypeCard:
		*s = PaymentBulkCreatingResponsePayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `CHECKED`: チェック済み<br /><span
// class="smallText">データのチェックが完了し、決済処理の実行を待っています。</span>
// - `SUCCEEDED`: 決済成功<br /><span
// class="smallText">この決済の処理においてエラーが発生せず請求が完了しました。</span>
// - `FAILED`: 決済失敗<br /><span
// class="smallText">この決済の処理において1件以上のエラーが発生しました。</span>.
type PaymentBulkCreatingResponseStatus string

const (
	PaymentBulkCreatingResponseStatusCHECKED   PaymentBulkCreatingResponseStatus = "CHECKED"
	PaymentBulkCreatingResponseStatusSUCCEEDED PaymentBulkCreatingResponseStatus = "SUCCEEDED"
	PaymentBulkCreatingResponseStatusFAILED    PaymentBulkCreatingResponseStatus = "FAILED"
)

// AllValues returns all PaymentBulkCreatingResponseStatus values.
func (PaymentBulkCreatingResponseStatus) AllValues() []PaymentBulkCreatingResponseStatus {
	return []PaymentBulkCreatingResponseStatus{
		PaymentBulkCreatingResponseStatusCHECKED,
		PaymentBulkCreatingResponseStatusSUCCEEDED,
		PaymentBulkCreatingResponseStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkCreatingResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkCreatingResponseStatusCHECKED:
		return []byte(s), nil
	case PaymentBulkCreatingResponseStatusSUCCEEDED:
		return []byte(s), nil
	case PaymentBulkCreatingResponseStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkCreatingResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentBulkCreatingResponseStatus(data) {
	case PaymentBulkCreatingResponseStatusCHECKED:
		*s = PaymentBulkCreatingResponseStatusCHECKED
		return nil
	case PaymentBulkCreatingResponseStatusSUCCEEDED:
		*s = PaymentBulkCreatingResponseStatusSUCCEEDED
		return nil
	case PaymentBulkCreatingResponseStatusFAILED:
		*s = PaymentBulkCreatingResponseStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 削除フラグ.
type PaymentBulkDeleteFlag string

const (
	PaymentBulkDeleteFlag1 PaymentBulkDeleteFlag = "1"
	PaymentBulkDeleteFlag0 PaymentBulkDeleteFlag = "0"
)

// AllValues returns all PaymentBulkDeleteFlag values.
func (PaymentBulkDeleteFlag) AllValues() []PaymentBulkDeleteFlag {
	return []PaymentBulkDeleteFlag{
		PaymentBulkDeleteFlag1,
		PaymentBulkDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkDeleteFlag1:
		return []byte(s), nil
	case PaymentBulkDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkDeleteFlag) UnmarshalText(data []byte) error {
	switch PaymentBulkDeleteFlag(data) {
	case PaymentBulkDeleteFlag1:
		*s = PaymentBulkDeleteFlag1
		return nil
	case PaymentBulkDeleteFlag0:
		*s = PaymentBulkDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentBulk.Deleting.Response
type PaymentBulkDeletingResponse struct {
	// 削除された一括決済のID.
	ID         OptString                                `json:"id"`
	DeleteFlag OptPaymentBulkDeletingResponseDeleteFlag `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *PaymentBulkDeletingResponse) GetID() OptString {
	return s.ID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PaymentBulkDeletingResponse) GetDeleteFlag() OptPaymentBulkDeletingResponseDeleteFlag {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *PaymentBulkDeletingResponse) SetID(val OptString) {
	s.ID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PaymentBulkDeletingResponse) SetDeleteFlag(val OptPaymentBulkDeletingResponseDeleteFlag) {
	s.DeleteFlag = val
}

func (*PaymentBulkDeletingResponse) deletePaymentBulkRes() {}

// 削除フラグ.
type PaymentBulkDeletingResponseDeleteFlag string

const (
	PaymentBulkDeletingResponseDeleteFlag1 PaymentBulkDeletingResponseDeleteFlag = "1"
	PaymentBulkDeletingResponseDeleteFlag0 PaymentBulkDeletingResponseDeleteFlag = "0"
)

// AllValues returns all PaymentBulkDeletingResponseDeleteFlag values.
func (PaymentBulkDeletingResponseDeleteFlag) AllValues() []PaymentBulkDeletingResponseDeleteFlag {
	return []PaymentBulkDeletingResponseDeleteFlag{
		PaymentBulkDeletingResponseDeleteFlag1,
		PaymentBulkDeletingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkDeletingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkDeletingResponseDeleteFlag1:
		return []byte(s), nil
	case PaymentBulkDeletingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkDeletingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch PaymentBulkDeletingResponseDeleteFlag(data) {
	case PaymentBulkDeletingResponseDeleteFlag1:
		*s = PaymentBulkDeletingResponseDeleteFlag1
		return nil
	case PaymentBulkDeletingResponseDeleteFlag0:
		*s = PaymentBulkDeletingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentBulkDetail
type PaymentBulkDetail struct {
	ID       OptString `json:"id"`
	ShopID   OptString `json:"shop_id"`
	OrderID  OptString `json:"order_id"`
	AccessID OptString `json:"access_id"`
	// 取引種別
	// - `CAPTURE`：売上確定.
	JobCode     OptPaymentBulkDetailJobCode  `json:"job_code"`
	Amount      OptInt                       `json:"amount"`
	Tax         OptInt                       `json:"tax"`
	TotalAmount OptInt64                     `json:"total_amount"`
	Method      OptPaymentBulkDetailMethod   `json:"method"`
	PayTimes    OptPaymentBulkDetailPayTimes `json:"pay_times"`
	CustomerID  OptString                    `json:"customer_id"`
	CardID      OptString                    `json:"card_id"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode     OptNilString `json:"error_code"`
	Created       OptString    `json:"created"`
	Updated       *NilString   `json:"updated"`
	ItemCode      *NilString   `json:"item_code"`
	TransactionID *NilString   `json:"transaction_id"`
	Approve       *NilString   `json:"approve"`
	Forward       *NilString   `json:"forward"`
}

// GetID returns the value of ID.
func (s *PaymentBulkDetail) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *PaymentBulkDetail) GetShopID() OptString {
	return s.ShopID
}

// GetOrderID returns the value of OrderID.
func (s *PaymentBulkDetail) GetOrderID() OptString {
	return s.OrderID
}

// GetAccessID returns the value of AccessID.
func (s *PaymentBulkDetail) GetAccessID() OptString {
	return s.AccessID
}

// GetJobCode returns the value of JobCode.
func (s *PaymentBulkDetail) GetJobCode() OptPaymentBulkDetailJobCode {
	return s.JobCode
}

// GetAmount returns the value of Amount.
func (s *PaymentBulkDetail) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentBulkDetail) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PaymentBulkDetail) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetMethod returns the value of Method.
func (s *PaymentBulkDetail) GetMethod() OptPaymentBulkDetailMethod {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *PaymentBulkDetail) GetPayTimes() OptPaymentBulkDetailPayTimes {
	return s.PayTimes
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentBulkDetail) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *PaymentBulkDetail) GetCardID() OptString {
	return s.CardID
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentBulkDetail) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentBulkDetail) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentBulkDetail) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentBulkDetail) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *PaymentBulkDetail) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentBulkDetail) GetUpdated() *NilString {
	return s.Updated
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentBulkDetail) GetItemCode() *NilString {
	return s.ItemCode
}

// GetTransactionID returns the value of TransactionID.
func (s *PaymentBulkDetail) GetTransactionID() *NilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *PaymentBulkDetail) GetApprove() *NilString {
	return s.Approve
}

// GetForward returns the value of Forward.
func (s *PaymentBulkDetail) GetForward() *NilString {
	return s.Forward
}

// SetID sets the value of ID.
func (s *PaymentBulkDetail) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *PaymentBulkDetail) SetShopID(val OptString) {
	s.ShopID = val
}

// SetOrderID sets the value of OrderID.
func (s *PaymentBulkDetail) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentBulkDetail) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetJobCode sets the value of JobCode.
func (s *PaymentBulkDetail) SetJobCode(val OptPaymentBulkDetailJobCode) {
	s.JobCode = val
}

// SetAmount sets the value of Amount.
func (s *PaymentBulkDetail) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentBulkDetail) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PaymentBulkDetail) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetMethod sets the value of Method.
func (s *PaymentBulkDetail) SetMethod(val OptPaymentBulkDetailMethod) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *PaymentBulkDetail) SetPayTimes(val OptPaymentBulkDetailPayTimes) {
	s.PayTimes = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentBulkDetail) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *PaymentBulkDetail) SetCardID(val OptString) {
	s.CardID = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentBulkDetail) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentBulkDetail) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentBulkDetail) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentBulkDetail) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *PaymentBulkDetail) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentBulkDetail) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentBulkDetail) SetItemCode(val *NilString) {
	s.ItemCode = val
}

// SetTransactionID sets the value of TransactionID.
func (s *PaymentBulkDetail) SetTransactionID(val *NilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *PaymentBulkDetail) SetApprove(val *NilString) {
	s.Approve = val
}

// SetForward sets the value of Forward.
func (s *PaymentBulkDetail) SetForward(val *NilString) {
	s.Forward = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type PaymentBulkDetailJobCode string

const (
	PaymentBulkDetailJobCodeCHECK   PaymentBulkDetailJobCode = "CHECK"
	PaymentBulkDetailJobCodeAUTH    PaymentBulkDetailJobCode = "AUTH"
	PaymentBulkDetailJobCodeCAPTURE PaymentBulkDetailJobCode = "CAPTURE"
)

// AllValues returns all PaymentBulkDetailJobCode values.
func (PaymentBulkDetailJobCode) AllValues() []PaymentBulkDetailJobCode {
	return []PaymentBulkDetailJobCode{
		PaymentBulkDetailJobCodeCHECK,
		PaymentBulkDetailJobCodeAUTH,
		PaymentBulkDetailJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkDetailJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkDetailJobCodeCHECK:
		return []byte(s), nil
	case PaymentBulkDetailJobCodeAUTH:
		return []byte(s), nil
	case PaymentBulkDetailJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkDetailJobCode) UnmarshalText(data []byte) error {
	switch PaymentBulkDetailJobCode(data) {
	case PaymentBulkDetailJobCodeCHECK:
		*s = PaymentBulkDetailJobCodeCHECK
		return nil
	case PaymentBulkDetailJobCodeAUTH:
		*s = PaymentBulkDetailJobCodeAUTH
		return nil
	case PaymentBulkDetailJobCodeCAPTURE:
		*s = PaymentBulkDetailJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/PaymentBulkDetail.ListRetrieving.Response
type PaymentBulkDetailListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString `json:"link_previous"`
	// この一括決済処理において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	// 一括決済詳細リスト\
	// \
	// 決済1件につき1オブジェクトが格納され、オブジェクト内には決済情報が格納されます。.
	List []PaymentBulkDetail `json:"list"`
	// 一括決済エラー詳細リスト\
	// \
	// エラー1件につき1オブジェクトが格納され、オブジェクト内にはエラーが発生した決済のIDとその決済で発生したエラーのリストが格納されます。.
	ErrorDetail []PaymentBulkErrorDetail `json:"error_detail"`
}

// GetTotalCount returns the value of TotalCount.
func (s *PaymentBulkDetailListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *PaymentBulkDetailListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *PaymentBulkDetailListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *PaymentBulkDetailListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *PaymentBulkDetailListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *PaymentBulkDetailListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetErrorCode returns the value of ErrorCode.
func (s *PaymentBulkDetailListRetrievingResponse) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetList returns the value of List.
func (s *PaymentBulkDetailListRetrievingResponse) GetList() []PaymentBulkDetail {
	return s.List
}

// GetErrorDetail returns the value of ErrorDetail.
func (s *PaymentBulkDetailListRetrievingResponse) GetErrorDetail() []PaymentBulkErrorDetail {
	return s.ErrorDetail
}

// SetTotalCount sets the value of TotalCount.
func (s *PaymentBulkDetailListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *PaymentBulkDetailListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *PaymentBulkDetailListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *PaymentBulkDetailListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *PaymentBulkDetailListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *PaymentBulkDetailListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *PaymentBulkDetailListRetrievingResponse) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetList sets the value of List.
func (s *PaymentBulkDetailListRetrievingResponse) SetList(val []PaymentBulkDetail) {
	s.List = val
}

// SetErrorDetail sets the value of ErrorDetail.
func (s *PaymentBulkDetailListRetrievingResponse) SetErrorDetail(val []PaymentBulkErrorDetail) {
	s.ErrorDetail = val
}

func (*PaymentBulkDetailListRetrievingResponse) retrievePaymentBulkDetailListRes() {}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type PaymentBulkDetailMethod string

const (
	PaymentBulkDetailMethod1 PaymentBulkDetailMethod = "1"
	PaymentBulkDetailMethod2 PaymentBulkDetailMethod = "2"
	PaymentBulkDetailMethod5 PaymentBulkDetailMethod = "5"
)

// AllValues returns all PaymentBulkDetailMethod values.
func (PaymentBulkDetailMethod) AllValues() []PaymentBulkDetailMethod {
	return []PaymentBulkDetailMethod{
		PaymentBulkDetailMethod1,
		PaymentBulkDetailMethod2,
		PaymentBulkDetailMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkDetailMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkDetailMethod1:
		return []byte(s), nil
	case PaymentBulkDetailMethod2:
		return []byte(s), nil
	case PaymentBulkDetailMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkDetailMethod) UnmarshalText(data []byte) error {
	switch PaymentBulkDetailMethod(data) {
	case PaymentBulkDetailMethod1:
		*s = PaymentBulkDetailMethod1
		return nil
	case PaymentBulkDetailMethod2:
		*s = PaymentBulkDetailMethod2
		return nil
	case PaymentBulkDetailMethod5:
		*s = PaymentBulkDetailMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type PaymentBulkDetailPayTimes string

const (
	PaymentBulkDetailPayTimes3  PaymentBulkDetailPayTimes = "3"
	PaymentBulkDetailPayTimes5  PaymentBulkDetailPayTimes = "5"
	PaymentBulkDetailPayTimes6  PaymentBulkDetailPayTimes = "6"
	PaymentBulkDetailPayTimes10 PaymentBulkDetailPayTimes = "10"
	PaymentBulkDetailPayTimes12 PaymentBulkDetailPayTimes = "12"
	PaymentBulkDetailPayTimes15 PaymentBulkDetailPayTimes = "15"
	PaymentBulkDetailPayTimes18 PaymentBulkDetailPayTimes = "18"
	PaymentBulkDetailPayTimes20 PaymentBulkDetailPayTimes = "20"
	PaymentBulkDetailPayTimes24 PaymentBulkDetailPayTimes = "24"
)

// AllValues returns all PaymentBulkDetailPayTimes values.
func (PaymentBulkDetailPayTimes) AllValues() []PaymentBulkDetailPayTimes {
	return []PaymentBulkDetailPayTimes{
		PaymentBulkDetailPayTimes3,
		PaymentBulkDetailPayTimes5,
		PaymentBulkDetailPayTimes6,
		PaymentBulkDetailPayTimes10,
		PaymentBulkDetailPayTimes12,
		PaymentBulkDetailPayTimes15,
		PaymentBulkDetailPayTimes18,
		PaymentBulkDetailPayTimes20,
		PaymentBulkDetailPayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkDetailPayTimes) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkDetailPayTimes3:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes5:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes6:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes10:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes12:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes15:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes18:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes20:
		return []byte(s), nil
	case PaymentBulkDetailPayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkDetailPayTimes) UnmarshalText(data []byte) error {
	switch PaymentBulkDetailPayTimes(data) {
	case PaymentBulkDetailPayTimes3:
		*s = PaymentBulkDetailPayTimes3
		return nil
	case PaymentBulkDetailPayTimes5:
		*s = PaymentBulkDetailPayTimes5
		return nil
	case PaymentBulkDetailPayTimes6:
		*s = PaymentBulkDetailPayTimes6
		return nil
	case PaymentBulkDetailPayTimes10:
		*s = PaymentBulkDetailPayTimes10
		return nil
	case PaymentBulkDetailPayTimes12:
		*s = PaymentBulkDetailPayTimes12
		return nil
	case PaymentBulkDetailPayTimes15:
		*s = PaymentBulkDetailPayTimes15
		return nil
	case PaymentBulkDetailPayTimes18:
		*s = PaymentBulkDetailPayTimes18
		return nil
	case PaymentBulkDetailPayTimes20:
		*s = PaymentBulkDetailPayTimes20
		return nil
	case PaymentBulkDetailPayTimes24:
		*s = PaymentBulkDetailPayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentBulkErrorDetail
type PaymentBulkErrorDetail struct {
	// 行数.
	Number  OptString         `json:"number"`
	OrderID OptString         `json:"order_id"`
	Errors  []FincodeAPIError `json:"errors"`
}

// GetNumber returns the value of Number.
func (s *PaymentBulkErrorDetail) GetNumber() OptString {
	return s.Number
}

// GetOrderID returns the value of OrderID.
func (s *PaymentBulkErrorDetail) GetOrderID() OptString {
	return s.OrderID
}

// GetErrors returns the value of Errors.
func (s *PaymentBulkErrorDetail) GetErrors() []FincodeAPIError {
	return s.Errors
}

// SetNumber sets the value of Number.
func (s *PaymentBulkErrorDetail) SetNumber(val OptString) {
	s.Number = val
}

// SetOrderID sets the value of OrderID.
func (s *PaymentBulkErrorDetail) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetErrors sets the value of Errors.
func (s *PaymentBulkErrorDetail) SetErrors(val []FincodeAPIError) {
	s.Errors = val
}

type PaymentBulkIdSchema string

// Merged schema.
// Ref: #/components/schemas/PaymentBulk.ListRetrieving.Response
type PaymentBulkListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString  `json:"link_previous"`
	List         []PaymentBulk `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *PaymentBulkListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *PaymentBulkListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *PaymentBulkListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *PaymentBulkListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *PaymentBulkListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *PaymentBulkListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *PaymentBulkListRetrievingResponse) GetList() []PaymentBulk {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *PaymentBulkListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *PaymentBulkListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *PaymentBulkListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *PaymentBulkListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *PaymentBulkListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *PaymentBulkListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *PaymentBulkListRetrievingResponse) SetList(val []PaymentBulk) {
	s.List = val
}

func (*PaymentBulkListRetrievingResponse) retrievePaymentBulkListRes() {}

// 決済種別（一括決済に対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード.
type PaymentBulkPayType string

const (
	PaymentBulkPayTypeCard PaymentBulkPayType = "Card"
)

// AllValues returns all PaymentBulkPayType values.
func (PaymentBulkPayType) AllValues() []PaymentBulkPayType {
	return []PaymentBulkPayType{
		PaymentBulkPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkPayType) UnmarshalText(data []byte) error {
	switch PaymentBulkPayType(data) {
	case PaymentBulkPayTypeCard:
		*s = PaymentBulkPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `CHECKED`: チェック済み<br /><span
// class="smallText">データのチェックが完了し、決済処理の実行を待っています。</span>
// - `SUCCEEDED`: 決済成功<br /><span
// class="smallText">この決済の処理においてエラーが発生せず請求が完了しました。</span>
// - `FAILED`: 決済失敗<br /><span
// class="smallText">この決済の処理において1件以上のエラーが発生しました。</span>.
type PaymentBulkStatus string

const (
	PaymentBulkStatusCHECKED   PaymentBulkStatus = "CHECKED"
	PaymentBulkStatusSUCCEEDED PaymentBulkStatus = "SUCCEEDED"
	PaymentBulkStatusFAILED    PaymentBulkStatus = "FAILED"
)

// AllValues returns all PaymentBulkStatus values.
func (PaymentBulkStatus) AllValues() []PaymentBulkStatus {
	return []PaymentBulkStatus{
		PaymentBulkStatusCHECKED,
		PaymentBulkStatusSUCCEEDED,
		PaymentBulkStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentBulkStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentBulkStatusCHECKED:
		return []byte(s), nil
	case PaymentBulkStatusSUCCEEDED:
		return []byte(s), nil
	case PaymentBulkStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentBulkStatus) UnmarshalText(data []byte) error {
	switch PaymentBulkStatus(data) {
	case PaymentBulkStatusCHECKED:
		*s = PaymentBulkStatusCHECKED
		return nil
	case PaymentBulkStatusSUCCEEDED:
		*s = PaymentBulkStatusSUCCEEDED
		return nil
	case PaymentBulkStatusFAILED:
		*s = PaymentBulkStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentMethod
type PaymentMethod struct {
	// 決済手段ID.
	ID OptString `json:"id"`
	// 決済手段の種別。\
	// この決済手段の実体の種別を示します。
	// - `Card`:
	// この決済手段はクレジットカード/デビットカード/プリペイドカードです。
	// - `Directdebit`: この決済手段は口座振替用口座情報です。.
	PayType OptPaymentMethodPayType `json:"pay_type"`
	// この決済手段が紐づく顧客のID.
	CustomerID OptString              `json:"customer_id"`
	Status     OptPaymentMethodStatus `json:"status"`
	// リダイレクトURL。\
	// 購入者にこのURLを提供することで、ステータスが`AWAITING_CUSTOMER_ACTION`
	// の決済手段を有効化するためのアクションを購入者にとらせることができます。
	// - 振替口座登録の場合：
	// このURLにアクセスして振替口座登録の承認を行います。このURLには1度だけアクセスできます。
	// - カード登録の場合： このURLにアクセスして3Dセキュア認証を行います。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクトURLアクセス済みフラグ\
	// 購入者が`redirect_url`にアクセスしたことがあるかどうかを示すフラグです。
	// - `0`: 未アクセス
	// - `1`: 1回以上アクセス済み.
	RedirectURLAccessedFlag OptNilPaymentMethodRedirectURLAccessedFlag `json:"redirect_url_accessed_flag"`
	// 加盟店戻りURL。（成功時）\
	// 購入者がアクションを完了し、決済手段の登録に成功した際にリダイレクトされるURLです。\
	// POSTメソッドでリダイレクトがされます。.
	ReturnURL OptNilString `json:"return_url"`
	// 加盟店戻りURL。（失敗時）\
	// 購入者がアクションを完了し、決済手段の登録に失敗した際にリダイレクトされるURLです。\
	// POSTメソッドでリダイレクトがされます。.
	ReturnURLOnFailure OptNilString `json:"return_url_on_failure"`
	// デフォルトフラグ。\
	// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
	// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
	// - `0`: デフォルト決済手段ではない
	// - `1`: デフォルト決済手段.
	DefaultFlag  OptPaymentMethodDefaultFlag `json:"default_flag"`
	ClientField1 *NilString                  `json:"client_field_1"`
	ClientField2 *NilString                  `json:"client_field_2"`
	ClientField3 *NilString                  `json:"client_field_3"`
	DeleteFlag   OptPaymentMethodDeleteFlag  `json:"delete_flag"`
	ProcessDate  *NilString                  `json:"process_date"`
	Created      OptString                   `json:"created"`
	Updated      *NilString                  `json:"updated"`
	// <span class="smallText">この決済手段がカードを表す（`pay_type =
	// Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span>.
	Card OptNilPaymentMethodCard `json:"card"`
	// <span class="smallText">この決済手段が振替用口座を表す（`pay_type =
	// Directdebit`）とき、口座情報の詳細がこの`directdebit`オブジェクトに格納されます。</span>.
	Directdebit OptNilPaymentMethodDirectdebit `json:"directdebit"`
}

// GetID returns the value of ID.
func (s *PaymentMethod) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *PaymentMethod) GetPayType() OptPaymentMethodPayType {
	return s.PayType
}

// GetCustomerID returns the value of CustomerID.
func (s *PaymentMethod) GetCustomerID() OptString {
	return s.CustomerID
}

// GetStatus returns the value of Status.
func (s *PaymentMethod) GetStatus() OptPaymentMethodStatus {
	return s.Status
}

// GetRedirectURL returns the value of RedirectURL.
func (s *PaymentMethod) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectURLAccessedFlag returns the value of RedirectURLAccessedFlag.
func (s *PaymentMethod) GetRedirectURLAccessedFlag() OptNilPaymentMethodRedirectURLAccessedFlag {
	return s.RedirectURLAccessedFlag
}

// GetReturnURL returns the value of ReturnURL.
func (s *PaymentMethod) GetReturnURL() OptNilString {
	return s.ReturnURL
}

// GetReturnURLOnFailure returns the value of ReturnURLOnFailure.
func (s *PaymentMethod) GetReturnURLOnFailure() OptNilString {
	return s.ReturnURLOnFailure
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *PaymentMethod) GetDefaultFlag() OptPaymentMethodDefaultFlag {
	return s.DefaultFlag
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentMethod) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentMethod) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentMethod) GetClientField3() *NilString {
	return s.ClientField3
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PaymentMethod) GetDeleteFlag() OptPaymentMethodDeleteFlag {
	return s.DeleteFlag
}

// GetProcessDate returns the value of ProcessDate.
func (s *PaymentMethod) GetProcessDate() *NilString {
	return s.ProcessDate
}

// GetCreated returns the value of Created.
func (s *PaymentMethod) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentMethod) GetUpdated() *NilString {
	return s.Updated
}

// GetCard returns the value of Card.
func (s *PaymentMethod) GetCard() OptNilPaymentMethodCard {
	return s.Card
}

// GetDirectdebit returns the value of Directdebit.
func (s *PaymentMethod) GetDirectdebit() OptNilPaymentMethodDirectdebit {
	return s.Directdebit
}

// SetID sets the value of ID.
func (s *PaymentMethod) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *PaymentMethod) SetPayType(val OptPaymentMethodPayType) {
	s.PayType = val
}

// SetCustomerID sets the value of CustomerID.
func (s *PaymentMethod) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetStatus sets the value of Status.
func (s *PaymentMethod) SetStatus(val OptPaymentMethodStatus) {
	s.Status = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *PaymentMethod) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectURLAccessedFlag sets the value of RedirectURLAccessedFlag.
func (s *PaymentMethod) SetRedirectURLAccessedFlag(val OptNilPaymentMethodRedirectURLAccessedFlag) {
	s.RedirectURLAccessedFlag = val
}

// SetReturnURL sets the value of ReturnURL.
func (s *PaymentMethod) SetReturnURL(val OptNilString) {
	s.ReturnURL = val
}

// SetReturnURLOnFailure sets the value of ReturnURLOnFailure.
func (s *PaymentMethod) SetReturnURLOnFailure(val OptNilString) {
	s.ReturnURLOnFailure = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *PaymentMethod) SetDefaultFlag(val OptPaymentMethodDefaultFlag) {
	s.DefaultFlag = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentMethod) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentMethod) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentMethod) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PaymentMethod) SetDeleteFlag(val OptPaymentMethodDeleteFlag) {
	s.DeleteFlag = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *PaymentMethod) SetProcessDate(val *NilString) {
	s.ProcessDate = val
}

// SetCreated sets the value of Created.
func (s *PaymentMethod) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentMethod) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetCard sets the value of Card.
func (s *PaymentMethod) SetCard(val OptNilPaymentMethodCard) {
	s.Card = val
}

// SetDirectdebit sets the value of Directdebit.
func (s *PaymentMethod) SetDirectdebit(val OptNilPaymentMethodDirectdebit) {
	s.Directdebit = val
}

// <span class="smallText">この決済手段がカードを表す（`pay_type =
// Card`）とき、カード情報の詳細がこの`card`オブジェクトに格納されます。</span>.
type PaymentMethodCard struct {
	// マスク済みカード番号。\
	// <span class="smallText">
	// 下4桁以外をマスクしたカード番号です。\
	// カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。\
	// </span>
	// 形式：`************1234`.
	CardNo OptString `json:"card_no"`
	// カード有効期限。\
	// 形式：`YYMM`.
	Expire OptNilString `json:"expire"`
	// カード名義人名。.
	HolderName OptNilString               `json:"holder_name"`
	Type       *NilPaymentMethodCardType  `json:"type"`
	Brand      *NilPaymentMethodCardBrand `json:"brand"`
	// カード番号をもとに生成されたハッシュ値。\
	// <span class="smallText">
	// おなじカード番号に対しては常に同じ値が返されます。\
	// カード情報非保持の原則に基づき、fincodeユーザーはマスクされていないカード番号の代わりにこの値を保持することができます。
	// </span>.
	CardNoHash OptString `json:"card_no_hash"`
	// カード登録時3Dセキュア認証を利用するか。
	// - `0`: 3Dセキュア認証を利用しない（デフォルト）
	// - `2`: 3Dセキュア2.0認証を利用する.
	TdsType *NilPaymentMethodCardTdsType `json:"tds_type"`
	// 3Dセキュア2.0非対応時の挙動設定\
	// 購入者がこの決済に利用したカードが3Dセキュア2.
	// 0に非対応である場合の後続処理を設定します。
	// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
	// - `3`: 3Dセキュア認証なしで登録を行う。.
	Tds2Type     *NilPaymentMethodCardTds2Type `json:"tds2_type"`
	Tds2Status   OptTds2Status                 `json:"tds2_status"`
	MerchantName OptString                     `json:"merchant_name"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// ACS呼出判定。.
	Acs OptNilString `json:"acs"`
}

// GetCardNo returns the value of CardNo.
func (s *PaymentMethodCard) GetCardNo() OptString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *PaymentMethodCard) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *PaymentMethodCard) GetHolderName() OptNilString {
	return s.HolderName
}

// GetType returns the value of Type.
func (s *PaymentMethodCard) GetType() *NilPaymentMethodCardType {
	return s.Type
}

// GetBrand returns the value of Brand.
func (s *PaymentMethodCard) GetBrand() *NilPaymentMethodCardBrand {
	return s.Brand
}

// GetCardNoHash returns the value of CardNoHash.
func (s *PaymentMethodCard) GetCardNoHash() OptString {
	return s.CardNoHash
}

// GetTdsType returns the value of TdsType.
func (s *PaymentMethodCard) GetTdsType() *NilPaymentMethodCardTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentMethodCard) GetTds2Type() *NilPaymentMethodCardTds2Type {
	return s.Tds2Type
}

// GetTds2Status returns the value of Tds2Status.
func (s *PaymentMethodCard) GetTds2Status() OptTds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *PaymentMethodCard) GetMerchantName() OptString {
	return s.MerchantName
}

// GetAccessID returns the value of AccessID.
func (s *PaymentMethodCard) GetAccessID() OptString {
	return s.AccessID
}

// GetAcs returns the value of Acs.
func (s *PaymentMethodCard) GetAcs() OptNilString {
	return s.Acs
}

// SetCardNo sets the value of CardNo.
func (s *PaymentMethodCard) SetCardNo(val OptString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *PaymentMethodCard) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *PaymentMethodCard) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetType sets the value of Type.
func (s *PaymentMethodCard) SetType(val *NilPaymentMethodCardType) {
	s.Type = val
}

// SetBrand sets the value of Brand.
func (s *PaymentMethodCard) SetBrand(val *NilPaymentMethodCardBrand) {
	s.Brand = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *PaymentMethodCard) SetCardNoHash(val OptString) {
	s.CardNoHash = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentMethodCard) SetTdsType(val *NilPaymentMethodCardTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentMethodCard) SetTds2Type(val *NilPaymentMethodCardTds2Type) {
	s.Tds2Type = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *PaymentMethodCard) SetTds2Status(val OptTds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *PaymentMethodCard) SetMerchantName(val OptString) {
	s.MerchantName = val
}

// SetAccessID sets the value of AccessID.
func (s *PaymentMethodCard) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAcs sets the value of Acs.
func (s *PaymentMethodCard) SetAcs(val OptNilString) {
	s.Acs = val
}

// Merged schema.
type PaymentMethodCardBrand string

const (
	PaymentMethodCardBrandVISA     PaymentMethodCardBrand = "VISA"
	PaymentMethodCardBrandMASTER   PaymentMethodCardBrand = "MASTER"
	PaymentMethodCardBrandJCB      PaymentMethodCardBrand = "JCB"
	PaymentMethodCardBrandAMEX     PaymentMethodCardBrand = "AMEX"
	PaymentMethodCardBrandDINERS   PaymentMethodCardBrand = "DINERS"
	PaymentMethodCardBrandDISCOVER PaymentMethodCardBrand = "DISCOVER"
	PaymentMethodCardBrandEmpty    PaymentMethodCardBrand = ""
)

// AllValues returns all PaymentMethodCardBrand values.
func (PaymentMethodCardBrand) AllValues() []PaymentMethodCardBrand {
	return []PaymentMethodCardBrand{
		PaymentMethodCardBrandVISA,
		PaymentMethodCardBrandMASTER,
		PaymentMethodCardBrandJCB,
		PaymentMethodCardBrandAMEX,
		PaymentMethodCardBrandDINERS,
		PaymentMethodCardBrandDISCOVER,
		PaymentMethodCardBrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardBrand) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardBrandVISA:
		return []byte(s), nil
	case PaymentMethodCardBrandMASTER:
		return []byte(s), nil
	case PaymentMethodCardBrandJCB:
		return []byte(s), nil
	case PaymentMethodCardBrandAMEX:
		return []byte(s), nil
	case PaymentMethodCardBrandDINERS:
		return []byte(s), nil
	case PaymentMethodCardBrandDISCOVER:
		return []byte(s), nil
	case PaymentMethodCardBrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardBrand) UnmarshalText(data []byte) error {
	switch PaymentMethodCardBrand(data) {
	case PaymentMethodCardBrandVISA:
		*s = PaymentMethodCardBrandVISA
		return nil
	case PaymentMethodCardBrandMASTER:
		*s = PaymentMethodCardBrandMASTER
		return nil
	case PaymentMethodCardBrandJCB:
		*s = PaymentMethodCardBrandJCB
		return nil
	case PaymentMethodCardBrandAMEX:
		*s = PaymentMethodCardBrandAMEX
		return nil
	case PaymentMethodCardBrandDINERS:
		*s = PaymentMethodCardBrandDINERS
		return nil
	case PaymentMethodCardBrandDISCOVER:
		*s = PaymentMethodCardBrandDISCOVER
		return nil
	case PaymentMethodCardBrandEmpty:
		*s = PaymentMethodCardBrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type PaymentMethodCardTds2Type string

const (
	PaymentMethodCardTds2Type2 PaymentMethodCardTds2Type = "2"
	PaymentMethodCardTds2Type3 PaymentMethodCardTds2Type = "3"
)

// AllValues returns all PaymentMethodCardTds2Type values.
func (PaymentMethodCardTds2Type) AllValues() []PaymentMethodCardTds2Type {
	return []PaymentMethodCardTds2Type{
		PaymentMethodCardTds2Type2,
		PaymentMethodCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardTds2Type2:
		return []byte(s), nil
	case PaymentMethodCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardTds2Type) UnmarshalText(data []byte) error {
	switch PaymentMethodCardTds2Type(data) {
	case PaymentMethodCardTds2Type2:
		*s = PaymentMethodCardTds2Type2
		return nil
	case PaymentMethodCardTds2Type3:
		*s = PaymentMethodCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type PaymentMethodCardTdsType string

const (
	PaymentMethodCardTdsType0 PaymentMethodCardTdsType = "0"
	PaymentMethodCardTdsType2 PaymentMethodCardTdsType = "2"
)

// AllValues returns all PaymentMethodCardTdsType values.
func (PaymentMethodCardTdsType) AllValues() []PaymentMethodCardTdsType {
	return []PaymentMethodCardTdsType{
		PaymentMethodCardTdsType0,
		PaymentMethodCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardTdsType0:
		return []byte(s), nil
	case PaymentMethodCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardTdsType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardTdsType(data) {
	case PaymentMethodCardTdsType0:
		*s = PaymentMethodCardTdsType0
		return nil
	case PaymentMethodCardTdsType2:
		*s = PaymentMethodCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type PaymentMethodCardType string

const (
	PaymentMethodCardType0 PaymentMethodCardType = "0"
	PaymentMethodCardType1 PaymentMethodCardType = "1"
	PaymentMethodCardType2 PaymentMethodCardType = "2"
	PaymentMethodCardType3 PaymentMethodCardType = "3"
)

// AllValues returns all PaymentMethodCardType values.
func (PaymentMethodCardType) AllValues() []PaymentMethodCardType {
	return []PaymentMethodCardType{
		PaymentMethodCardType0,
		PaymentMethodCardType1,
		PaymentMethodCardType2,
		PaymentMethodCardType3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodCardType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodCardType0:
		return []byte(s), nil
	case PaymentMethodCardType1:
		return []byte(s), nil
	case PaymentMethodCardType2:
		return []byte(s), nil
	case PaymentMethodCardType3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodCardType) UnmarshalText(data []byte) error {
	switch PaymentMethodCardType(data) {
	case PaymentMethodCardType0:
		*s = PaymentMethodCardType0
		return nil
	case PaymentMethodCardType1:
		*s = PaymentMethodCardType1
		return nil
	case PaymentMethodCardType2:
		*s = PaymentMethodCardType2
		return nil
	case PaymentMethodCardType3:
		*s = PaymentMethodCardType3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// デフォルトフラグ。\
// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
// - `0`: デフォルト決済手段ではない
// - `1`: デフォルト決済手段.
type PaymentMethodDefaultFlag string

const (
	PaymentMethodDefaultFlag0 PaymentMethodDefaultFlag = "0"
	PaymentMethodDefaultFlag1 PaymentMethodDefaultFlag = "1"
)

// AllValues returns all PaymentMethodDefaultFlag values.
func (PaymentMethodDefaultFlag) AllValues() []PaymentMethodDefaultFlag {
	return []PaymentMethodDefaultFlag{
		PaymentMethodDefaultFlag0,
		PaymentMethodDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDefaultFlag0:
		return []byte(s), nil
	case PaymentMethodDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDefaultFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodDefaultFlag(data) {
	case PaymentMethodDefaultFlag0:
		*s = PaymentMethodDefaultFlag0
		return nil
	case PaymentMethodDefaultFlag1:
		*s = PaymentMethodDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 削除フラグ.
type PaymentMethodDeleteFlag string

const (
	PaymentMethodDeleteFlag1 PaymentMethodDeleteFlag = "1"
	PaymentMethodDeleteFlag0 PaymentMethodDeleteFlag = "0"
)

// AllValues returns all PaymentMethodDeleteFlag values.
func (PaymentMethodDeleteFlag) AllValues() []PaymentMethodDeleteFlag {
	return []PaymentMethodDeleteFlag{
		PaymentMethodDeleteFlag1,
		PaymentMethodDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDeleteFlag1:
		return []byte(s), nil
	case PaymentMethodDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDeleteFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodDeleteFlag(data) {
	case PaymentMethodDeleteFlag1:
		*s = PaymentMethodDeleteFlag1
		return nil
	case PaymentMethodDeleteFlag0:
		*s = PaymentMethodDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText">この決済手段が振替用口座を表す（`pay_type =
// Directdebit`）とき、口座情報の詳細がこの`directdebit`オブジェクトに格納されます。</span>.
type PaymentMethodDirectdebit struct {
	ApplicationType OptNilDirectDebitApplicationType `json:"application_type"`
	// 請求可能予定日。\
	// 口座登録後、実際に請求依頼が可能となると予定される日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ExpectedBillableDate OptNilString `json:"expected_billable_date"`
	// 最終引落日。\
	// 金融機関によってこの口座から実際に引き落とされた実績日のうち、最も新しい日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	LastWithdrawalDate OptNilString                    `json:"last_withdrawal_date"`
	LastResultCode     OptNilDirectDebitLastResultCode `json:"last_result_code"`
	// 金融機関種別。
	// - `0`: ゆうちょ銀行以外の金融機関
	// - `1`: ゆうちょ銀行.
	BankType OptNilPaymentMethodDirectdebitBankType `json:"bank_type"`
	// 金融機関コード。\
	// 金融機関のコードです。\
	// 例：`0310`.
	BankCode OptNilString `json:"bank_code"`
	// 金融機関名.
	BankName OptNilString `json:"bank_name"`
	// 支店コード。\
	// 金融機関の支店コードです。\
	// 例：`001`.
	BranchCode OptNilString `json:"branch_code"`
	// 支店名.
	BranchName OptString `json:"branch_name"`
	// 口座種別。
	// - `0`: 普通預金
	// - `1`: 当座預金.
	AccountType OptNilPaymentMethodDirectdebitAccountType `json:"account_type"`
	// 口座番号.
	AccountNumber OptNilString `json:"account_number"`
	// ゆうちょ 預金記号.
	PostalAccountNumber1 OptNilString `json:"postal_account_number_1"`
	// ゆうちょ 預金番号.
	PostalAccountNumber2 OptNilString `json:"postal_account_number_2"`
	// 口座名義.
	AccountName OptNilString `json:"account_name"`
	// 口座名義（カナ）.
	AccountNameKana OptNilString `json:"account_name_kana"`
	// 依頼書登録のパラメータ<br />
	// <span class="smallText">
	// ※
	// 依頼書登録により登録された口座の場合、この`paper_application`オブジェクトに依頼書からfincodeに転記した内容が含められます。
	// </span>.
	PaperApplication OptNilPaymentMethodDirectdebitPaperApplication `json:"paper_application"`
}

// GetApplicationType returns the value of ApplicationType.
func (s *PaymentMethodDirectdebit) GetApplicationType() OptNilDirectDebitApplicationType {
	return s.ApplicationType
}

// GetExpectedBillableDate returns the value of ExpectedBillableDate.
func (s *PaymentMethodDirectdebit) GetExpectedBillableDate() OptNilString {
	return s.ExpectedBillableDate
}

// GetLastWithdrawalDate returns the value of LastWithdrawalDate.
func (s *PaymentMethodDirectdebit) GetLastWithdrawalDate() OptNilString {
	return s.LastWithdrawalDate
}

// GetLastResultCode returns the value of LastResultCode.
func (s *PaymentMethodDirectdebit) GetLastResultCode() OptNilDirectDebitLastResultCode {
	return s.LastResultCode
}

// GetBankType returns the value of BankType.
func (s *PaymentMethodDirectdebit) GetBankType() OptNilPaymentMethodDirectdebitBankType {
	return s.BankType
}

// GetBankCode returns the value of BankCode.
func (s *PaymentMethodDirectdebit) GetBankCode() OptNilString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *PaymentMethodDirectdebit) GetBankName() OptNilString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *PaymentMethodDirectdebit) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *PaymentMethodDirectdebit) GetBranchName() OptString {
	return s.BranchName
}

// GetAccountType returns the value of AccountType.
func (s *PaymentMethodDirectdebit) GetAccountType() OptNilPaymentMethodDirectdebitAccountType {
	return s.AccountType
}

// GetAccountNumber returns the value of AccountNumber.
func (s *PaymentMethodDirectdebit) GetAccountNumber() OptNilString {
	return s.AccountNumber
}

// GetPostalAccountNumber1 returns the value of PostalAccountNumber1.
func (s *PaymentMethodDirectdebit) GetPostalAccountNumber1() OptNilString {
	return s.PostalAccountNumber1
}

// GetPostalAccountNumber2 returns the value of PostalAccountNumber2.
func (s *PaymentMethodDirectdebit) GetPostalAccountNumber2() OptNilString {
	return s.PostalAccountNumber2
}

// GetAccountName returns the value of AccountName.
func (s *PaymentMethodDirectdebit) GetAccountName() OptNilString {
	return s.AccountName
}

// GetAccountNameKana returns the value of AccountNameKana.
func (s *PaymentMethodDirectdebit) GetAccountNameKana() OptNilString {
	return s.AccountNameKana
}

// GetPaperApplication returns the value of PaperApplication.
func (s *PaymentMethodDirectdebit) GetPaperApplication() OptNilPaymentMethodDirectdebitPaperApplication {
	return s.PaperApplication
}

// SetApplicationType sets the value of ApplicationType.
func (s *PaymentMethodDirectdebit) SetApplicationType(val OptNilDirectDebitApplicationType) {
	s.ApplicationType = val
}

// SetExpectedBillableDate sets the value of ExpectedBillableDate.
func (s *PaymentMethodDirectdebit) SetExpectedBillableDate(val OptNilString) {
	s.ExpectedBillableDate = val
}

// SetLastWithdrawalDate sets the value of LastWithdrawalDate.
func (s *PaymentMethodDirectdebit) SetLastWithdrawalDate(val OptNilString) {
	s.LastWithdrawalDate = val
}

// SetLastResultCode sets the value of LastResultCode.
func (s *PaymentMethodDirectdebit) SetLastResultCode(val OptNilDirectDebitLastResultCode) {
	s.LastResultCode = val
}

// SetBankType sets the value of BankType.
func (s *PaymentMethodDirectdebit) SetBankType(val OptNilPaymentMethodDirectdebitBankType) {
	s.BankType = val
}

// SetBankCode sets the value of BankCode.
func (s *PaymentMethodDirectdebit) SetBankCode(val OptNilString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *PaymentMethodDirectdebit) SetBankName(val OptNilString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *PaymentMethodDirectdebit) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *PaymentMethodDirectdebit) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetAccountType sets the value of AccountType.
func (s *PaymentMethodDirectdebit) SetAccountType(val OptNilPaymentMethodDirectdebitAccountType) {
	s.AccountType = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *PaymentMethodDirectdebit) SetAccountNumber(val OptNilString) {
	s.AccountNumber = val
}

// SetPostalAccountNumber1 sets the value of PostalAccountNumber1.
func (s *PaymentMethodDirectdebit) SetPostalAccountNumber1(val OptNilString) {
	s.PostalAccountNumber1 = val
}

// SetPostalAccountNumber2 sets the value of PostalAccountNumber2.
func (s *PaymentMethodDirectdebit) SetPostalAccountNumber2(val OptNilString) {
	s.PostalAccountNumber2 = val
}

// SetAccountName sets the value of AccountName.
func (s *PaymentMethodDirectdebit) SetAccountName(val OptNilString) {
	s.AccountName = val
}

// SetAccountNameKana sets the value of AccountNameKana.
func (s *PaymentMethodDirectdebit) SetAccountNameKana(val OptNilString) {
	s.AccountNameKana = val
}

// SetPaperApplication sets the value of PaperApplication.
func (s *PaymentMethodDirectdebit) SetPaperApplication(val OptNilPaymentMethodDirectdebitPaperApplication) {
	s.PaperApplication = val
}

// 口座種別。
// - `0`: 普通預金
// - `1`: 当座預金.
type PaymentMethodDirectdebitAccountType string

const (
	PaymentMethodDirectdebitAccountType0 PaymentMethodDirectdebitAccountType = "0"
	PaymentMethodDirectdebitAccountType1 PaymentMethodDirectdebitAccountType = "1"
)

// AllValues returns all PaymentMethodDirectdebitAccountType values.
func (PaymentMethodDirectdebitAccountType) AllValues() []PaymentMethodDirectdebitAccountType {
	return []PaymentMethodDirectdebitAccountType{
		PaymentMethodDirectdebitAccountType0,
		PaymentMethodDirectdebitAccountType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectdebitAccountType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectdebitAccountType0:
		return []byte(s), nil
	case PaymentMethodDirectdebitAccountType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectdebitAccountType) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectdebitAccountType(data) {
	case PaymentMethodDirectdebitAccountType0:
		*s = PaymentMethodDirectdebitAccountType0
		return nil
	case PaymentMethodDirectdebitAccountType1:
		*s = PaymentMethodDirectdebitAccountType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 金融機関種別。
// - `0`: ゆうちょ銀行以外の金融機関
// - `1`: ゆうちょ銀行.
type PaymentMethodDirectdebitBankType string

const (
	PaymentMethodDirectdebitBankType0 PaymentMethodDirectdebitBankType = "0"
	PaymentMethodDirectdebitBankType1 PaymentMethodDirectdebitBankType = "1"
)

// AllValues returns all PaymentMethodDirectdebitBankType values.
func (PaymentMethodDirectdebitBankType) AllValues() []PaymentMethodDirectdebitBankType {
	return []PaymentMethodDirectdebitBankType{
		PaymentMethodDirectdebitBankType0,
		PaymentMethodDirectdebitBankType1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodDirectdebitBankType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodDirectdebitBankType0:
		return []byte(s), nil
	case PaymentMethodDirectdebitBankType1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodDirectdebitBankType) UnmarshalText(data []byte) error {
	switch PaymentMethodDirectdebitBankType(data) {
	case PaymentMethodDirectdebitBankType0:
		*s = PaymentMethodDirectdebitBankType0
		return nil
	case PaymentMethodDirectdebitBankType1:
		*s = PaymentMethodDirectdebitBankType1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 依頼書登録のパラメータ<br />
// <span class="smallText">
// ※
// 依頼書登録により登録された口座の場合、この`paper_application`オブジェクトに依頼書からfincodeに転記した内容が含められます。
// </span>.
type PaymentMethodDirectdebitPaperApplication struct {
	// 依頼書 仮登録日時。\
	// 依頼書を仮登録した日時です。\
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PreregisteredDate OptNilString `json:"preregistered_date"`
	// 依頼書ID。\
	// 依頼書を管理画面から登録した際に登録者が指定した、依頼書を一意に識別するIDです。.
	RequestFormID OptNilString `json:"request_form_id"`
	// 依頼書登録に失敗した理由。.
	PaperFailureDescription OptNilString `json:"paper_failure_description"`
}

// GetPreregisteredDate returns the value of PreregisteredDate.
func (s *PaymentMethodDirectdebitPaperApplication) GetPreregisteredDate() OptNilString {
	return s.PreregisteredDate
}

// GetRequestFormID returns the value of RequestFormID.
func (s *PaymentMethodDirectdebitPaperApplication) GetRequestFormID() OptNilString {
	return s.RequestFormID
}

// GetPaperFailureDescription returns the value of PaperFailureDescription.
func (s *PaymentMethodDirectdebitPaperApplication) GetPaperFailureDescription() OptNilString {
	return s.PaperFailureDescription
}

// SetPreregisteredDate sets the value of PreregisteredDate.
func (s *PaymentMethodDirectdebitPaperApplication) SetPreregisteredDate(val OptNilString) {
	s.PreregisteredDate = val
}

// SetRequestFormID sets the value of RequestFormID.
func (s *PaymentMethodDirectdebitPaperApplication) SetRequestFormID(val OptNilString) {
	s.RequestFormID = val
}

// SetPaperFailureDescription sets the value of PaperFailureDescription.
func (s *PaymentMethodDirectdebitPaperApplication) SetPaperFailureDescription(val OptNilString) {
	s.PaperFailureDescription = val
}

// 決済種別（決済手段APIに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type PaymentMethodPayType string

const (
	PaymentMethodPayTypeCard        PaymentMethodPayType = "Card"
	PaymentMethodPayTypeDirectdebit PaymentMethodPayType = "Directdebit"
)

// AllValues returns all PaymentMethodPayType values.
func (PaymentMethodPayType) AllValues() []PaymentMethodPayType {
	return []PaymentMethodPayType{
		PaymentMethodPayTypeCard,
		PaymentMethodPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodPayType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodPayTypeCard:
		return []byte(s), nil
	case PaymentMethodPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodPayType) UnmarshalText(data []byte) error {
	switch PaymentMethodPayType(data) {
	case PaymentMethodPayTypeCard:
		*s = PaymentMethodPayTypeCard
		return nil
	case PaymentMethodPayTypeDirectdebit:
		*s = PaymentMethodPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクトURLアクセス済みフラグ\
// 購入者が`redirect_url`にアクセスしたことがあるかどうかを示すフラグです。
// - `0`: 未アクセス
// - `1`: 1回以上アクセス済み.
type PaymentMethodRedirectURLAccessedFlag string

const (
	PaymentMethodRedirectURLAccessedFlag0 PaymentMethodRedirectURLAccessedFlag = "0"
	PaymentMethodRedirectURLAccessedFlag1 PaymentMethodRedirectURLAccessedFlag = "1"
)

// AllValues returns all PaymentMethodRedirectURLAccessedFlag values.
func (PaymentMethodRedirectURLAccessedFlag) AllValues() []PaymentMethodRedirectURLAccessedFlag {
	return []PaymentMethodRedirectURLAccessedFlag{
		PaymentMethodRedirectURLAccessedFlag0,
		PaymentMethodRedirectURLAccessedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodRedirectURLAccessedFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodRedirectURLAccessedFlag0:
		return []byte(s), nil
	case PaymentMethodRedirectURLAccessedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodRedirectURLAccessedFlag) UnmarshalText(data []byte) error {
	switch PaymentMethodRedirectURLAccessedFlag(data) {
	case PaymentMethodRedirectURLAccessedFlag0:
		*s = PaymentMethodRedirectURLAccessedFlag0
		return nil
	case PaymentMethodRedirectURLAccessedFlag1:
		*s = PaymentMethodRedirectURLAccessedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済手段のステータス
// - `INACTIVATED`: 有効化前<br /><span
// class="smallText">まだこの決済手段は決済に使用できません。</span>
// - `AWAITING_CUSTOMER_ACTION`: 顧客のアクション待ち<br /><span
// class="smallText">この決済手段は登録のための購入者の承認がされていない状態です。まだこの決済手段は決済に使用できません。</span>
// - `ACTIVATED`: 有効化済み<br /><span
// class="smallText">この決済手段は決済に使用できます。</span>
// - `FAILED`: 失敗<br /><span
// class="smallText">この決済手段は決済に使用できません。</span>.
// Ref: #/components/schemas/PaymentMethodStatus
type PaymentMethodStatus string

const (
	PaymentMethodStatusINACTIVATED            PaymentMethodStatus = "INACTIVATED"
	PaymentMethodStatusAWAITINGCUSTOMERACTION PaymentMethodStatus = "AWAITING_CUSTOMER_ACTION"
	PaymentMethodStatusACTIVATED              PaymentMethodStatus = "ACTIVATED"
	PaymentMethodStatusFAILED                 PaymentMethodStatus = "FAILED"
)

// AllValues returns all PaymentMethodStatus values.
func (PaymentMethodStatus) AllValues() []PaymentMethodStatus {
	return []PaymentMethodStatus{
		PaymentMethodStatusINACTIVATED,
		PaymentMethodStatusAWAITINGCUSTOMERACTION,
		PaymentMethodStatusACTIVATED,
		PaymentMethodStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentMethodStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentMethodStatusINACTIVATED:
		return []byte(s), nil
	case PaymentMethodStatusAWAITINGCUSTOMERACTION:
		return []byte(s), nil
	case PaymentMethodStatusACTIVATED:
		return []byte(s), nil
	case PaymentMethodStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentMethodStatus) UnmarshalText(data []byte) error {
	switch PaymentMethodStatus(data) {
	case PaymentMethodStatusINACTIVATED:
		*s = PaymentMethodStatusINACTIVATED
		return nil
	case PaymentMethodStatusAWAITINGCUSTOMERACTION:
		*s = PaymentMethodStatusAWAITINGCUSTOMERACTION
		return nil
	case PaymentMethodStatusACTIVATED:
		*s = PaymentMethodStatusACTIVATED
		return nil
	case PaymentMethodStatusFAILED:
		*s = PaymentMethodStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentSession.Creating.Request
type PaymentSessionCreatingRequest struct {
	// 決済共通項目\
	// 決済手段を問わず共通して使用される決済に関するパラメータです。.
	Transaction PaymentSessionCreatingRequestTransaction `json:"transaction"`
	// カード決済パラメータ\
	// `pay_type`に`Card`を含めた場合に用いられる、カード決済に関するパラメータです。.
	Card OptNilPaymentSessionCreatingRequestCard `json:"card"`
	// コンビニ決済パラメータ\
	// `pay_type`に`Konbini`を含めた場合に用いられる、コンビニ決済に関するパラメータです。.
	Konbini OptNilPaymentSessionCreatingRequestKonbini `json:"konbini"`
	// PayPayパラメータ\
	// `pay_type`に`Paypay`を含めた場合に用いられる、PayPayによる決済に関するパラメータです。.
	Paypay     OptNilPaymentSessionCreatingRequestPaypay `json:"paypay"`
	SuccessURL OptNilString                              `json:"success_url"`
	CancelURL  OptNilString                              `json:"cancel_url"`
	// リダイレクト型決済URL 有効期限\
	// 形式： `yyyy/MM/dd HH.MM.SS.SSS`
	// - デフォルト： URL発行時点から24時間
	// - 最長： 30日
	// - 最短： 5分.
	Expire          OptNilString `json:"expire"`
	ShopServiceName OptNilString `json:"shop_service_name"`
	// 購入メール 送信フラグ\
	// リダイレクト型決済URLを添付したメールをfincodeから送信するかどうかを指定します。
	// - `0`：送信しない（デフォルト）
	// - `1`：送信する.
	GuideMailSendFlag  OptNilPaymentSessionCreatingRequestGuideMailSendFlag  `json:"guide_mail_send_flag"`
	ReceiverMail       OptNilString                                          `json:"receiver_mail"`
	MailCustomerName   OptNilString                                          `json:"mail_customer_name"`
	ThanksMailSendFlag OptNilPaymentSessionCreatingRequestThanksMailSendFlag `json:"thanks_mail_send_flag"`
	ShopMailTemplateID OptNilString                                          `json:"shop_mail_template_id"`
}

// GetTransaction returns the value of Transaction.
func (s *PaymentSessionCreatingRequest) GetTransaction() PaymentSessionCreatingRequestTransaction {
	return s.Transaction
}

// GetCard returns the value of Card.
func (s *PaymentSessionCreatingRequest) GetCard() OptNilPaymentSessionCreatingRequestCard {
	return s.Card
}

// GetKonbini returns the value of Konbini.
func (s *PaymentSessionCreatingRequest) GetKonbini() OptNilPaymentSessionCreatingRequestKonbini {
	return s.Konbini
}

// GetPaypay returns the value of Paypay.
func (s *PaymentSessionCreatingRequest) GetPaypay() OptNilPaymentSessionCreatingRequestPaypay {
	return s.Paypay
}

// GetSuccessURL returns the value of SuccessURL.
func (s *PaymentSessionCreatingRequest) GetSuccessURL() OptNilString {
	return s.SuccessURL
}

// GetCancelURL returns the value of CancelURL.
func (s *PaymentSessionCreatingRequest) GetCancelURL() OptNilString {
	return s.CancelURL
}

// GetExpire returns the value of Expire.
func (s *PaymentSessionCreatingRequest) GetExpire() OptNilString {
	return s.Expire
}

// GetShopServiceName returns the value of ShopServiceName.
func (s *PaymentSessionCreatingRequest) GetShopServiceName() OptNilString {
	return s.ShopServiceName
}

// GetGuideMailSendFlag returns the value of GuideMailSendFlag.
func (s *PaymentSessionCreatingRequest) GetGuideMailSendFlag() OptNilPaymentSessionCreatingRequestGuideMailSendFlag {
	return s.GuideMailSendFlag
}

// GetReceiverMail returns the value of ReceiverMail.
func (s *PaymentSessionCreatingRequest) GetReceiverMail() OptNilString {
	return s.ReceiverMail
}

// GetMailCustomerName returns the value of MailCustomerName.
func (s *PaymentSessionCreatingRequest) GetMailCustomerName() OptNilString {
	return s.MailCustomerName
}

// GetThanksMailSendFlag returns the value of ThanksMailSendFlag.
func (s *PaymentSessionCreatingRequest) GetThanksMailSendFlag() OptNilPaymentSessionCreatingRequestThanksMailSendFlag {
	return s.ThanksMailSendFlag
}

// GetShopMailTemplateID returns the value of ShopMailTemplateID.
func (s *PaymentSessionCreatingRequest) GetShopMailTemplateID() OptNilString {
	return s.ShopMailTemplateID
}

// SetTransaction sets the value of Transaction.
func (s *PaymentSessionCreatingRequest) SetTransaction(val PaymentSessionCreatingRequestTransaction) {
	s.Transaction = val
}

// SetCard sets the value of Card.
func (s *PaymentSessionCreatingRequest) SetCard(val OptNilPaymentSessionCreatingRequestCard) {
	s.Card = val
}

// SetKonbini sets the value of Konbini.
func (s *PaymentSessionCreatingRequest) SetKonbini(val OptNilPaymentSessionCreatingRequestKonbini) {
	s.Konbini = val
}

// SetPaypay sets the value of Paypay.
func (s *PaymentSessionCreatingRequest) SetPaypay(val OptNilPaymentSessionCreatingRequestPaypay) {
	s.Paypay = val
}

// SetSuccessURL sets the value of SuccessURL.
func (s *PaymentSessionCreatingRequest) SetSuccessURL(val OptNilString) {
	s.SuccessURL = val
}

// SetCancelURL sets the value of CancelURL.
func (s *PaymentSessionCreatingRequest) SetCancelURL(val OptNilString) {
	s.CancelURL = val
}

// SetExpire sets the value of Expire.
func (s *PaymentSessionCreatingRequest) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetShopServiceName sets the value of ShopServiceName.
func (s *PaymentSessionCreatingRequest) SetShopServiceName(val OptNilString) {
	s.ShopServiceName = val
}

// SetGuideMailSendFlag sets the value of GuideMailSendFlag.
func (s *PaymentSessionCreatingRequest) SetGuideMailSendFlag(val OptNilPaymentSessionCreatingRequestGuideMailSendFlag) {
	s.GuideMailSendFlag = val
}

// SetReceiverMail sets the value of ReceiverMail.
func (s *PaymentSessionCreatingRequest) SetReceiverMail(val OptNilString) {
	s.ReceiverMail = val
}

// SetMailCustomerName sets the value of MailCustomerName.
func (s *PaymentSessionCreatingRequest) SetMailCustomerName(val OptNilString) {
	s.MailCustomerName = val
}

// SetThanksMailSendFlag sets the value of ThanksMailSendFlag.
func (s *PaymentSessionCreatingRequest) SetThanksMailSendFlag(val OptNilPaymentSessionCreatingRequestThanksMailSendFlag) {
	s.ThanksMailSendFlag = val
}

// SetShopMailTemplateID sets the value of ShopMailTemplateID.
func (s *PaymentSessionCreatingRequest) SetShopMailTemplateID(val OptNilString) {
	s.ShopMailTemplateID = val
}

// カード決済パラメータ\
// `pay_type`に`Card`を含めた場合に用いられる、カード決済に関するパラメータです。.
type PaymentSessionCreatingRequestCard struct {
	JobCode                   NilPaymentSessionCreatingRequestCardJobCode                    `json:"job_code"`
	TdsType                   OptNilPaymentSessionCreatingRequestCardTdsType                 `json:"tds_type"`
	Tds2Type                  OptNilPaymentSessionCreatingRequestCardTds2Type                `json:"tds2_type"`
	TdTenantName              OptNilString                                                   `json:"td_tenant_name"`
	Tds2ChAccChange           *NilString                                                     `json:"tds2_ch_acc_change"`
	Tds2ChAccDate             *NilString                                                     `json:"tds2_ch_acc_date"`
	Tds2ChAccPwChange         *NilString                                                     `json:"tds2_ch_acc_pw_change"`
	Tds2NbPurchaseAccount     *NilString                                                     `json:"tds2_nb_purchase_account"`
	Tds2PaymentAccAge         *NilString                                                     `json:"tds2_payment_acc_age"`
	Tds2ProvisionAttemptsDay  *NilString                                                     `json:"tds2_provision_attempts_day"`
	Tds2ShipAddressUsage      *NilString                                                     `json:"tds2_ship_address_usage"`
	Tds2ShipNameInd           *NilPaymentSessionCreatingRequestCardTds2ShipNameInd           `json:"tds2_ship_name_ind"`
	Tds2SuspiciousAccActivity *NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity `json:"tds2_suspicious_acc_activity"`
	Tds2TxnActivityDay        *NilString                                                     `json:"tds2_txn_activity_day"`
	Tds2TxnActivityYear       *NilString                                                     `json:"tds2_txn_activity_year"`
	Tds2ThreeDsReqAuthData    *NilString                                                     `json:"tds2_three_ds_req_auth_data"`
	Tds2ThreeDsReqAuthMethod  *NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod  `json:"tds2_three_ds_req_auth_method"`
	Tds2AddrMatch             *NilPaymentSessionCreatingRequestCardTds2AddrMatch             `json:"tds2_addr_match"`
	Tds2BillAddrCountry       *NilString                                                     `json:"tds2_bill_addr_country"`
	Tds2BillAddrState         *NilString                                                     `json:"tds2_bill_addr_state"`
	Tds2BillAddrCity          *NilString                                                     `json:"tds2_bill_addr_city"`
	Tds2BillAddrLine1         *NilString                                                     `json:"tds2_bill_addr_line_1"`
	Tds2BillAddrLine2         *NilString                                                     `json:"tds2_bill_addr_line_2"`
	Tds2BillAddrLine3         OptString                                                      `json:"tds2_bill_addr_line_3"`
	Tds2BillAddrPostCode      *NilString                                                     `json:"tds2_bill_addr_post_code"`
	Tds2ShipAddrCountry       *NilString                                                     `json:"tds2_ship_addr_country"`
	Tds2ShipAddrState         *NilString                                                     `json:"tds2_ship_addr_state"`
	Tds2ShipAddrCity          *NilString                                                     `json:"tds2_ship_addr_city"`
	Tds2ShipAddrLine1         *NilString                                                     `json:"tds2_ship_addr_line_1"`
	Tds2ShipAddrLine2         *NilString                                                     `json:"tds2_ship_addr_line_2"`
	Tds2ShipAddrLine3         *NilString                                                     `json:"tds2_ship_addr_line_3"`
	Tds2ShipAddrPostCode      *NilString                                                     `json:"tds2_ship_addr_post_code"`
	Tds2ShipInd               *NilPaymentSessionCreatingRequestCardTds2ShipInd               `json:"tds2_ship_ind"`
	Tds2DeliveryEmailAddress  *NilString                                                     `json:"tds2_delivery_email_address"`
	Tds2HomePhoneCc           *NilString                                                     `json:"tds2_home_phone_cc"`
	Tds2HomePhoneNo           *NilString                                                     `json:"tds2_home_phone_no"`
	Tds2MobilePhoneCc         *NilString                                                     `json:"tds2_mobile_phone_cc"`
	Tds2MobilePhoneNo         *NilString                                                     `json:"tds2_mobile_phone_no"`
	Tds2WorkPhoneCc           *NilString                                                     `json:"tds2_work_phone_cc"`
	Tds2WorkPhoneNo           *NilString                                                     `json:"tds2_work_phone_no"`
	Tds2DeliveryTimeframe     *NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe     `json:"tds2_delivery_timeframe"`
	Tds2PreOrderDate          *NilString                                                     `json:"tds2_pre_order_date"`
	Tds2PreOrderPurchaseInd   *NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd   `json:"tds2_pre_order_purchase_ind"`
	Tds2ReorderItemsInd       *NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd       `json:"tds2_reorder_items_ind"`
	Tds2RecurringExpiry       *NilString                                                     `json:"tds2_recurring_expiry"`
	Tds2RecurringFrequency    *NilString                                                     `json:"tds2_recurring_frequency"`
	Tds2GiftCardAmount        *NilString                                                     `json:"tds2_gift_card_amount"`
	Tds2GiftCardCount         *NilString                                                     `json:"tds2_gift_card_count"`
	Tds2GiftCardCurr          *NilString                                                     `json:"tds2_gift_card_curr"`
}

// GetJobCode returns the value of JobCode.
func (s *PaymentSessionCreatingRequestCard) GetJobCode() NilPaymentSessionCreatingRequestCardJobCode {
	return s.JobCode
}

// GetTdsType returns the value of TdsType.
func (s *PaymentSessionCreatingRequestCard) GetTdsType() OptNilPaymentSessionCreatingRequestCardTdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentSessionCreatingRequestCard) GetTds2Type() OptNilPaymentSessionCreatingRequestCardTds2Type {
	return s.Tds2Type
}

// GetTdTenantName returns the value of TdTenantName.
func (s *PaymentSessionCreatingRequestCard) GetTdTenantName() OptNilString {
	return s.TdTenantName
}

// GetTds2ChAccChange returns the value of Tds2ChAccChange.
func (s *PaymentSessionCreatingRequestCard) GetTds2ChAccChange() *NilString {
	return s.Tds2ChAccChange
}

// GetTds2ChAccDate returns the value of Tds2ChAccDate.
func (s *PaymentSessionCreatingRequestCard) GetTds2ChAccDate() *NilString {
	return s.Tds2ChAccDate
}

// GetTds2ChAccPwChange returns the value of Tds2ChAccPwChange.
func (s *PaymentSessionCreatingRequestCard) GetTds2ChAccPwChange() *NilString {
	return s.Tds2ChAccPwChange
}

// GetTds2NbPurchaseAccount returns the value of Tds2NbPurchaseAccount.
func (s *PaymentSessionCreatingRequestCard) GetTds2NbPurchaseAccount() *NilString {
	return s.Tds2NbPurchaseAccount
}

// GetTds2PaymentAccAge returns the value of Tds2PaymentAccAge.
func (s *PaymentSessionCreatingRequestCard) GetTds2PaymentAccAge() *NilString {
	return s.Tds2PaymentAccAge
}

// GetTds2ProvisionAttemptsDay returns the value of Tds2ProvisionAttemptsDay.
func (s *PaymentSessionCreatingRequestCard) GetTds2ProvisionAttemptsDay() *NilString {
	return s.Tds2ProvisionAttemptsDay
}

// GetTds2ShipAddressUsage returns the value of Tds2ShipAddressUsage.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddressUsage() *NilString {
	return s.Tds2ShipAddressUsage
}

// GetTds2ShipNameInd returns the value of Tds2ShipNameInd.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipNameInd() *NilPaymentSessionCreatingRequestCardTds2ShipNameInd {
	return s.Tds2ShipNameInd
}

// GetTds2SuspiciousAccActivity returns the value of Tds2SuspiciousAccActivity.
func (s *PaymentSessionCreatingRequestCard) GetTds2SuspiciousAccActivity() *NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity {
	return s.Tds2SuspiciousAccActivity
}

// GetTds2TxnActivityDay returns the value of Tds2TxnActivityDay.
func (s *PaymentSessionCreatingRequestCard) GetTds2TxnActivityDay() *NilString {
	return s.Tds2TxnActivityDay
}

// GetTds2TxnActivityYear returns the value of Tds2TxnActivityYear.
func (s *PaymentSessionCreatingRequestCard) GetTds2TxnActivityYear() *NilString {
	return s.Tds2TxnActivityYear
}

// GetTds2ThreeDsReqAuthData returns the value of Tds2ThreeDsReqAuthData.
func (s *PaymentSessionCreatingRequestCard) GetTds2ThreeDsReqAuthData() *NilString {
	return s.Tds2ThreeDsReqAuthData
}

// GetTds2ThreeDsReqAuthMethod returns the value of Tds2ThreeDsReqAuthMethod.
func (s *PaymentSessionCreatingRequestCard) GetTds2ThreeDsReqAuthMethod() *NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod {
	return s.Tds2ThreeDsReqAuthMethod
}

// GetTds2AddrMatch returns the value of Tds2AddrMatch.
func (s *PaymentSessionCreatingRequestCard) GetTds2AddrMatch() *NilPaymentSessionCreatingRequestCardTds2AddrMatch {
	return s.Tds2AddrMatch
}

// GetTds2BillAddrCountry returns the value of Tds2BillAddrCountry.
func (s *PaymentSessionCreatingRequestCard) GetTds2BillAddrCountry() *NilString {
	return s.Tds2BillAddrCountry
}

// GetTds2BillAddrState returns the value of Tds2BillAddrState.
func (s *PaymentSessionCreatingRequestCard) GetTds2BillAddrState() *NilString {
	return s.Tds2BillAddrState
}

// GetTds2BillAddrCity returns the value of Tds2BillAddrCity.
func (s *PaymentSessionCreatingRequestCard) GetTds2BillAddrCity() *NilString {
	return s.Tds2BillAddrCity
}

// GetTds2BillAddrLine1 returns the value of Tds2BillAddrLine1.
func (s *PaymentSessionCreatingRequestCard) GetTds2BillAddrLine1() *NilString {
	return s.Tds2BillAddrLine1
}

// GetTds2BillAddrLine2 returns the value of Tds2BillAddrLine2.
func (s *PaymentSessionCreatingRequestCard) GetTds2BillAddrLine2() *NilString {
	return s.Tds2BillAddrLine2
}

// GetTds2BillAddrLine3 returns the value of Tds2BillAddrLine3.
func (s *PaymentSessionCreatingRequestCard) GetTds2BillAddrLine3() OptString {
	return s.Tds2BillAddrLine3
}

// GetTds2BillAddrPostCode returns the value of Tds2BillAddrPostCode.
func (s *PaymentSessionCreatingRequestCard) GetTds2BillAddrPostCode() *NilString {
	return s.Tds2BillAddrPostCode
}

// GetTds2ShipAddrCountry returns the value of Tds2ShipAddrCountry.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddrCountry() *NilString {
	return s.Tds2ShipAddrCountry
}

// GetTds2ShipAddrState returns the value of Tds2ShipAddrState.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddrState() *NilString {
	return s.Tds2ShipAddrState
}

// GetTds2ShipAddrCity returns the value of Tds2ShipAddrCity.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddrCity() *NilString {
	return s.Tds2ShipAddrCity
}

// GetTds2ShipAddrLine1 returns the value of Tds2ShipAddrLine1.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddrLine1() *NilString {
	return s.Tds2ShipAddrLine1
}

// GetTds2ShipAddrLine2 returns the value of Tds2ShipAddrLine2.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddrLine2() *NilString {
	return s.Tds2ShipAddrLine2
}

// GetTds2ShipAddrLine3 returns the value of Tds2ShipAddrLine3.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddrLine3() *NilString {
	return s.Tds2ShipAddrLine3
}

// GetTds2ShipAddrPostCode returns the value of Tds2ShipAddrPostCode.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipAddrPostCode() *NilString {
	return s.Tds2ShipAddrPostCode
}

// GetTds2ShipInd returns the value of Tds2ShipInd.
func (s *PaymentSessionCreatingRequestCard) GetTds2ShipInd() *NilPaymentSessionCreatingRequestCardTds2ShipInd {
	return s.Tds2ShipInd
}

// GetTds2DeliveryEmailAddress returns the value of Tds2DeliveryEmailAddress.
func (s *PaymentSessionCreatingRequestCard) GetTds2DeliveryEmailAddress() *NilString {
	return s.Tds2DeliveryEmailAddress
}

// GetTds2HomePhoneCc returns the value of Tds2HomePhoneCc.
func (s *PaymentSessionCreatingRequestCard) GetTds2HomePhoneCc() *NilString {
	return s.Tds2HomePhoneCc
}

// GetTds2HomePhoneNo returns the value of Tds2HomePhoneNo.
func (s *PaymentSessionCreatingRequestCard) GetTds2HomePhoneNo() *NilString {
	return s.Tds2HomePhoneNo
}

// GetTds2MobilePhoneCc returns the value of Tds2MobilePhoneCc.
func (s *PaymentSessionCreatingRequestCard) GetTds2MobilePhoneCc() *NilString {
	return s.Tds2MobilePhoneCc
}

// GetTds2MobilePhoneNo returns the value of Tds2MobilePhoneNo.
func (s *PaymentSessionCreatingRequestCard) GetTds2MobilePhoneNo() *NilString {
	return s.Tds2MobilePhoneNo
}

// GetTds2WorkPhoneCc returns the value of Tds2WorkPhoneCc.
func (s *PaymentSessionCreatingRequestCard) GetTds2WorkPhoneCc() *NilString {
	return s.Tds2WorkPhoneCc
}

// GetTds2WorkPhoneNo returns the value of Tds2WorkPhoneNo.
func (s *PaymentSessionCreatingRequestCard) GetTds2WorkPhoneNo() *NilString {
	return s.Tds2WorkPhoneNo
}

// GetTds2DeliveryTimeframe returns the value of Tds2DeliveryTimeframe.
func (s *PaymentSessionCreatingRequestCard) GetTds2DeliveryTimeframe() *NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe {
	return s.Tds2DeliveryTimeframe
}

// GetTds2PreOrderDate returns the value of Tds2PreOrderDate.
func (s *PaymentSessionCreatingRequestCard) GetTds2PreOrderDate() *NilString {
	return s.Tds2PreOrderDate
}

// GetTds2PreOrderPurchaseInd returns the value of Tds2PreOrderPurchaseInd.
func (s *PaymentSessionCreatingRequestCard) GetTds2PreOrderPurchaseInd() *NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd {
	return s.Tds2PreOrderPurchaseInd
}

// GetTds2ReorderItemsInd returns the value of Tds2ReorderItemsInd.
func (s *PaymentSessionCreatingRequestCard) GetTds2ReorderItemsInd() *NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd {
	return s.Tds2ReorderItemsInd
}

// GetTds2RecurringExpiry returns the value of Tds2RecurringExpiry.
func (s *PaymentSessionCreatingRequestCard) GetTds2RecurringExpiry() *NilString {
	return s.Tds2RecurringExpiry
}

// GetTds2RecurringFrequency returns the value of Tds2RecurringFrequency.
func (s *PaymentSessionCreatingRequestCard) GetTds2RecurringFrequency() *NilString {
	return s.Tds2RecurringFrequency
}

// GetTds2GiftCardAmount returns the value of Tds2GiftCardAmount.
func (s *PaymentSessionCreatingRequestCard) GetTds2GiftCardAmount() *NilString {
	return s.Tds2GiftCardAmount
}

// GetTds2GiftCardCount returns the value of Tds2GiftCardCount.
func (s *PaymentSessionCreatingRequestCard) GetTds2GiftCardCount() *NilString {
	return s.Tds2GiftCardCount
}

// GetTds2GiftCardCurr returns the value of Tds2GiftCardCurr.
func (s *PaymentSessionCreatingRequestCard) GetTds2GiftCardCurr() *NilString {
	return s.Tds2GiftCardCurr
}

// SetJobCode sets the value of JobCode.
func (s *PaymentSessionCreatingRequestCard) SetJobCode(val NilPaymentSessionCreatingRequestCardJobCode) {
	s.JobCode = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentSessionCreatingRequestCard) SetTdsType(val OptNilPaymentSessionCreatingRequestCardTdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentSessionCreatingRequestCard) SetTds2Type(val OptNilPaymentSessionCreatingRequestCardTds2Type) {
	s.Tds2Type = val
}

// SetTdTenantName sets the value of TdTenantName.
func (s *PaymentSessionCreatingRequestCard) SetTdTenantName(val OptNilString) {
	s.TdTenantName = val
}

// SetTds2ChAccChange sets the value of Tds2ChAccChange.
func (s *PaymentSessionCreatingRequestCard) SetTds2ChAccChange(val *NilString) {
	s.Tds2ChAccChange = val
}

// SetTds2ChAccDate sets the value of Tds2ChAccDate.
func (s *PaymentSessionCreatingRequestCard) SetTds2ChAccDate(val *NilString) {
	s.Tds2ChAccDate = val
}

// SetTds2ChAccPwChange sets the value of Tds2ChAccPwChange.
func (s *PaymentSessionCreatingRequestCard) SetTds2ChAccPwChange(val *NilString) {
	s.Tds2ChAccPwChange = val
}

// SetTds2NbPurchaseAccount sets the value of Tds2NbPurchaseAccount.
func (s *PaymentSessionCreatingRequestCard) SetTds2NbPurchaseAccount(val *NilString) {
	s.Tds2NbPurchaseAccount = val
}

// SetTds2PaymentAccAge sets the value of Tds2PaymentAccAge.
func (s *PaymentSessionCreatingRequestCard) SetTds2PaymentAccAge(val *NilString) {
	s.Tds2PaymentAccAge = val
}

// SetTds2ProvisionAttemptsDay sets the value of Tds2ProvisionAttemptsDay.
func (s *PaymentSessionCreatingRequestCard) SetTds2ProvisionAttemptsDay(val *NilString) {
	s.Tds2ProvisionAttemptsDay = val
}

// SetTds2ShipAddressUsage sets the value of Tds2ShipAddressUsage.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddressUsage(val *NilString) {
	s.Tds2ShipAddressUsage = val
}

// SetTds2ShipNameInd sets the value of Tds2ShipNameInd.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipNameInd(val *NilPaymentSessionCreatingRequestCardTds2ShipNameInd) {
	s.Tds2ShipNameInd = val
}

// SetTds2SuspiciousAccActivity sets the value of Tds2SuspiciousAccActivity.
func (s *PaymentSessionCreatingRequestCard) SetTds2SuspiciousAccActivity(val *NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) {
	s.Tds2SuspiciousAccActivity = val
}

// SetTds2TxnActivityDay sets the value of Tds2TxnActivityDay.
func (s *PaymentSessionCreatingRequestCard) SetTds2TxnActivityDay(val *NilString) {
	s.Tds2TxnActivityDay = val
}

// SetTds2TxnActivityYear sets the value of Tds2TxnActivityYear.
func (s *PaymentSessionCreatingRequestCard) SetTds2TxnActivityYear(val *NilString) {
	s.Tds2TxnActivityYear = val
}

// SetTds2ThreeDsReqAuthData sets the value of Tds2ThreeDsReqAuthData.
func (s *PaymentSessionCreatingRequestCard) SetTds2ThreeDsReqAuthData(val *NilString) {
	s.Tds2ThreeDsReqAuthData = val
}

// SetTds2ThreeDsReqAuthMethod sets the value of Tds2ThreeDsReqAuthMethod.
func (s *PaymentSessionCreatingRequestCard) SetTds2ThreeDsReqAuthMethod(val *NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) {
	s.Tds2ThreeDsReqAuthMethod = val
}

// SetTds2AddrMatch sets the value of Tds2AddrMatch.
func (s *PaymentSessionCreatingRequestCard) SetTds2AddrMatch(val *NilPaymentSessionCreatingRequestCardTds2AddrMatch) {
	s.Tds2AddrMatch = val
}

// SetTds2BillAddrCountry sets the value of Tds2BillAddrCountry.
func (s *PaymentSessionCreatingRequestCard) SetTds2BillAddrCountry(val *NilString) {
	s.Tds2BillAddrCountry = val
}

// SetTds2BillAddrState sets the value of Tds2BillAddrState.
func (s *PaymentSessionCreatingRequestCard) SetTds2BillAddrState(val *NilString) {
	s.Tds2BillAddrState = val
}

// SetTds2BillAddrCity sets the value of Tds2BillAddrCity.
func (s *PaymentSessionCreatingRequestCard) SetTds2BillAddrCity(val *NilString) {
	s.Tds2BillAddrCity = val
}

// SetTds2BillAddrLine1 sets the value of Tds2BillAddrLine1.
func (s *PaymentSessionCreatingRequestCard) SetTds2BillAddrLine1(val *NilString) {
	s.Tds2BillAddrLine1 = val
}

// SetTds2BillAddrLine2 sets the value of Tds2BillAddrLine2.
func (s *PaymentSessionCreatingRequestCard) SetTds2BillAddrLine2(val *NilString) {
	s.Tds2BillAddrLine2 = val
}

// SetTds2BillAddrLine3 sets the value of Tds2BillAddrLine3.
func (s *PaymentSessionCreatingRequestCard) SetTds2BillAddrLine3(val OptString) {
	s.Tds2BillAddrLine3 = val
}

// SetTds2BillAddrPostCode sets the value of Tds2BillAddrPostCode.
func (s *PaymentSessionCreatingRequestCard) SetTds2BillAddrPostCode(val *NilString) {
	s.Tds2BillAddrPostCode = val
}

// SetTds2ShipAddrCountry sets the value of Tds2ShipAddrCountry.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddrCountry(val *NilString) {
	s.Tds2ShipAddrCountry = val
}

// SetTds2ShipAddrState sets the value of Tds2ShipAddrState.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddrState(val *NilString) {
	s.Tds2ShipAddrState = val
}

// SetTds2ShipAddrCity sets the value of Tds2ShipAddrCity.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddrCity(val *NilString) {
	s.Tds2ShipAddrCity = val
}

// SetTds2ShipAddrLine1 sets the value of Tds2ShipAddrLine1.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddrLine1(val *NilString) {
	s.Tds2ShipAddrLine1 = val
}

// SetTds2ShipAddrLine2 sets the value of Tds2ShipAddrLine2.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddrLine2(val *NilString) {
	s.Tds2ShipAddrLine2 = val
}

// SetTds2ShipAddrLine3 sets the value of Tds2ShipAddrLine3.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddrLine3(val *NilString) {
	s.Tds2ShipAddrLine3 = val
}

// SetTds2ShipAddrPostCode sets the value of Tds2ShipAddrPostCode.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipAddrPostCode(val *NilString) {
	s.Tds2ShipAddrPostCode = val
}

// SetTds2ShipInd sets the value of Tds2ShipInd.
func (s *PaymentSessionCreatingRequestCard) SetTds2ShipInd(val *NilPaymentSessionCreatingRequestCardTds2ShipInd) {
	s.Tds2ShipInd = val
}

// SetTds2DeliveryEmailAddress sets the value of Tds2DeliveryEmailAddress.
func (s *PaymentSessionCreatingRequestCard) SetTds2DeliveryEmailAddress(val *NilString) {
	s.Tds2DeliveryEmailAddress = val
}

// SetTds2HomePhoneCc sets the value of Tds2HomePhoneCc.
func (s *PaymentSessionCreatingRequestCard) SetTds2HomePhoneCc(val *NilString) {
	s.Tds2HomePhoneCc = val
}

// SetTds2HomePhoneNo sets the value of Tds2HomePhoneNo.
func (s *PaymentSessionCreatingRequestCard) SetTds2HomePhoneNo(val *NilString) {
	s.Tds2HomePhoneNo = val
}

// SetTds2MobilePhoneCc sets the value of Tds2MobilePhoneCc.
func (s *PaymentSessionCreatingRequestCard) SetTds2MobilePhoneCc(val *NilString) {
	s.Tds2MobilePhoneCc = val
}

// SetTds2MobilePhoneNo sets the value of Tds2MobilePhoneNo.
func (s *PaymentSessionCreatingRequestCard) SetTds2MobilePhoneNo(val *NilString) {
	s.Tds2MobilePhoneNo = val
}

// SetTds2WorkPhoneCc sets the value of Tds2WorkPhoneCc.
func (s *PaymentSessionCreatingRequestCard) SetTds2WorkPhoneCc(val *NilString) {
	s.Tds2WorkPhoneCc = val
}

// SetTds2WorkPhoneNo sets the value of Tds2WorkPhoneNo.
func (s *PaymentSessionCreatingRequestCard) SetTds2WorkPhoneNo(val *NilString) {
	s.Tds2WorkPhoneNo = val
}

// SetTds2DeliveryTimeframe sets the value of Tds2DeliveryTimeframe.
func (s *PaymentSessionCreatingRequestCard) SetTds2DeliveryTimeframe(val *NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) {
	s.Tds2DeliveryTimeframe = val
}

// SetTds2PreOrderDate sets the value of Tds2PreOrderDate.
func (s *PaymentSessionCreatingRequestCard) SetTds2PreOrderDate(val *NilString) {
	s.Tds2PreOrderDate = val
}

// SetTds2PreOrderPurchaseInd sets the value of Tds2PreOrderPurchaseInd.
func (s *PaymentSessionCreatingRequestCard) SetTds2PreOrderPurchaseInd(val *NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) {
	s.Tds2PreOrderPurchaseInd = val
}

// SetTds2ReorderItemsInd sets the value of Tds2ReorderItemsInd.
func (s *PaymentSessionCreatingRequestCard) SetTds2ReorderItemsInd(val *NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) {
	s.Tds2ReorderItemsInd = val
}

// SetTds2RecurringExpiry sets the value of Tds2RecurringExpiry.
func (s *PaymentSessionCreatingRequestCard) SetTds2RecurringExpiry(val *NilString) {
	s.Tds2RecurringExpiry = val
}

// SetTds2RecurringFrequency sets the value of Tds2RecurringFrequency.
func (s *PaymentSessionCreatingRequestCard) SetTds2RecurringFrequency(val *NilString) {
	s.Tds2RecurringFrequency = val
}

// SetTds2GiftCardAmount sets the value of Tds2GiftCardAmount.
func (s *PaymentSessionCreatingRequestCard) SetTds2GiftCardAmount(val *NilString) {
	s.Tds2GiftCardAmount = val
}

// SetTds2GiftCardCount sets the value of Tds2GiftCardCount.
func (s *PaymentSessionCreatingRequestCard) SetTds2GiftCardCount(val *NilString) {
	s.Tds2GiftCardCount = val
}

// SetTds2GiftCardCurr sets the value of Tds2GiftCardCurr.
func (s *PaymentSessionCreatingRequestCard) SetTds2GiftCardCurr(val *NilString) {
	s.Tds2GiftCardCurr = val
}

// 取引種別\
// この決済URL上でカード決済を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする（デフォルト）
// - `CAPTURE`：即時売上.
type PaymentSessionCreatingRequestCardJobCode string

const (
	PaymentSessionCreatingRequestCardJobCodeAUTH    PaymentSessionCreatingRequestCardJobCode = "AUTH"
	PaymentSessionCreatingRequestCardJobCodeCAPTURE PaymentSessionCreatingRequestCardJobCode = "CAPTURE"
)

// AllValues returns all PaymentSessionCreatingRequestCardJobCode values.
func (PaymentSessionCreatingRequestCardJobCode) AllValues() []PaymentSessionCreatingRequestCardJobCode {
	return []PaymentSessionCreatingRequestCardJobCode{
		PaymentSessionCreatingRequestCardJobCodeAUTH,
		PaymentSessionCreatingRequestCardJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardJobCodeAUTH:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardJobCode) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardJobCode(data) {
	case PaymentSessionCreatingRequestCardJobCodeAUTH:
		*s = PaymentSessionCreatingRequestCardJobCodeAUTH
		return nil
	case PaymentSessionCreatingRequestCardJobCodeCAPTURE:
		*s = PaymentSessionCreatingRequestCardJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 請求先住所と配送先住所が一致しているか否か
// - `Y`: 住所は一致している
// - `N`: 住所は一致していない.
type PaymentSessionCreatingRequestCardTds2AddrMatch string

const (
	PaymentSessionCreatingRequestCardTds2AddrMatchY PaymentSessionCreatingRequestCardTds2AddrMatch = "Y"
	PaymentSessionCreatingRequestCardTds2AddrMatchN PaymentSessionCreatingRequestCardTds2AddrMatch = "N"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2AddrMatch values.
func (PaymentSessionCreatingRequestCardTds2AddrMatch) AllValues() []PaymentSessionCreatingRequestCardTds2AddrMatch {
	return []PaymentSessionCreatingRequestCardTds2AddrMatch{
		PaymentSessionCreatingRequestCardTds2AddrMatchY,
		PaymentSessionCreatingRequestCardTds2AddrMatchN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2AddrMatch) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2AddrMatchY:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2AddrMatchN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2AddrMatch) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2AddrMatch(data) {
	case PaymentSessionCreatingRequestCardTds2AddrMatchY:
		*s = PaymentSessionCreatingRequestCardTds2AddrMatchY
		return nil
	case PaymentSessionCreatingRequestCardTds2AddrMatchN:
		*s = PaymentSessionCreatingRequestCardTds2AddrMatchN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品納品時間枠
// - `01`: 電子デリバリー
// - `02`: 当日出荷
// - `03`: 翌日出荷
// - `04`: 2日目以降の出荷.
type PaymentSessionCreatingRequestCardTds2DeliveryTimeframe string

const (
	PaymentSessionCreatingRequestCardTds2DeliveryTimeframe01 PaymentSessionCreatingRequestCardTds2DeliveryTimeframe = "01"
	PaymentSessionCreatingRequestCardTds2DeliveryTimeframe02 PaymentSessionCreatingRequestCardTds2DeliveryTimeframe = "02"
	PaymentSessionCreatingRequestCardTds2DeliveryTimeframe03 PaymentSessionCreatingRequestCardTds2DeliveryTimeframe = "03"
	PaymentSessionCreatingRequestCardTds2DeliveryTimeframe04 PaymentSessionCreatingRequestCardTds2DeliveryTimeframe = "04"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2DeliveryTimeframe values.
func (PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) AllValues() []PaymentSessionCreatingRequestCardTds2DeliveryTimeframe {
	return []PaymentSessionCreatingRequestCardTds2DeliveryTimeframe{
		PaymentSessionCreatingRequestCardTds2DeliveryTimeframe01,
		PaymentSessionCreatingRequestCardTds2DeliveryTimeframe02,
		PaymentSessionCreatingRequestCardTds2DeliveryTimeframe03,
		PaymentSessionCreatingRequestCardTds2DeliveryTimeframe04,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe01:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe02:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe03:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe04:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2DeliveryTimeframe(data) {
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe01:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe01
		return nil
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe02:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe02
		return nil
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe03:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe03
		return nil
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe04:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe04
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の販売時期情報
// - `01`: 発売済み商品
// - `02`: 先行予約商品.
type PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd string

const (
	PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd01 PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd = "01"
	PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd02 PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd = "02"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd values.
func (PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) AllValues() []PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd {
	return []PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd{
		PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd01,
		PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd01:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd(data) {
	case PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd01:
		*s = PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd01
		return nil
	case PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd02:
		*s = PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 商品の注文が初回か再注文か
// - `01`: 初回注文
// - `02`: 再注文.
type PaymentSessionCreatingRequestCardTds2ReorderItemsInd string

const (
	PaymentSessionCreatingRequestCardTds2ReorderItemsInd01 PaymentSessionCreatingRequestCardTds2ReorderItemsInd = "01"
	PaymentSessionCreatingRequestCardTds2ReorderItemsInd02 PaymentSessionCreatingRequestCardTds2ReorderItemsInd = "02"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2ReorderItemsInd values.
func (PaymentSessionCreatingRequestCardTds2ReorderItemsInd) AllValues() []PaymentSessionCreatingRequestCardTds2ReorderItemsInd {
	return []PaymentSessionCreatingRequestCardTds2ReorderItemsInd{
		PaymentSessionCreatingRequestCardTds2ReorderItemsInd01,
		PaymentSessionCreatingRequestCardTds2ReorderItemsInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2ReorderItemsInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2ReorderItemsInd01:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ReorderItemsInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ReorderItemsInd) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2ReorderItemsInd(data) {
	case PaymentSessionCreatingRequestCardTds2ReorderItemsInd01:
		*s = PaymentSessionCreatingRequestCardTds2ReorderItemsInd01
		return nil
	case PaymentSessionCreatingRequestCardTds2ReorderItemsInd02:
		*s = PaymentSessionCreatingRequestCardTds2ReorderItemsInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// 取引商品の配送方法
// - `01`: カード顧客の請求先住所に配送
// - `02`: 加盟店が保持している確認済み住所（請求先住所でない）に配送
// - `03`: カード顧客の請求先住所と異なる住所に配送
// - `04`: 店舗への配送（店舗の住所は配送先住所で指定）
// - `05`:
// デジタル商品（オンラインサービス、電子ギフトカードおよび償還コードを含む）
// - `06`: 配送なし（旅行およびイベントのチケット）
// - `07`:
// その他（ゲーム、配送されないデジタルサービス、電子メディアの購読料など）.
type PaymentSessionCreatingRequestCardTds2ShipInd string

const (
	PaymentSessionCreatingRequestCardTds2ShipInd01 PaymentSessionCreatingRequestCardTds2ShipInd = "01"
	PaymentSessionCreatingRequestCardTds2ShipInd02 PaymentSessionCreatingRequestCardTds2ShipInd = "02"
	PaymentSessionCreatingRequestCardTds2ShipInd03 PaymentSessionCreatingRequestCardTds2ShipInd = "03"
	PaymentSessionCreatingRequestCardTds2ShipInd04 PaymentSessionCreatingRequestCardTds2ShipInd = "04"
	PaymentSessionCreatingRequestCardTds2ShipInd05 PaymentSessionCreatingRequestCardTds2ShipInd = "05"
	PaymentSessionCreatingRequestCardTds2ShipInd06 PaymentSessionCreatingRequestCardTds2ShipInd = "06"
	PaymentSessionCreatingRequestCardTds2ShipInd07 PaymentSessionCreatingRequestCardTds2ShipInd = "07"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2ShipInd values.
func (PaymentSessionCreatingRequestCardTds2ShipInd) AllValues() []PaymentSessionCreatingRequestCardTds2ShipInd {
	return []PaymentSessionCreatingRequestCardTds2ShipInd{
		PaymentSessionCreatingRequestCardTds2ShipInd01,
		PaymentSessionCreatingRequestCardTds2ShipInd02,
		PaymentSessionCreatingRequestCardTds2ShipInd03,
		PaymentSessionCreatingRequestCardTds2ShipInd04,
		PaymentSessionCreatingRequestCardTds2ShipInd05,
		PaymentSessionCreatingRequestCardTds2ShipInd06,
		PaymentSessionCreatingRequestCardTds2ShipInd07,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2ShipInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2ShipInd01:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ShipInd02:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ShipInd03:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ShipInd04:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ShipInd05:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ShipInd06:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ShipInd07:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ShipInd) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2ShipInd(data) {
	case PaymentSessionCreatingRequestCardTds2ShipInd01:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd01
		return nil
	case PaymentSessionCreatingRequestCardTds2ShipInd02:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd02
		return nil
	case PaymentSessionCreatingRequestCardTds2ShipInd03:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd03
		return nil
	case PaymentSessionCreatingRequestCardTds2ShipInd04:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd04
		return nil
	case PaymentSessionCreatingRequestCardTds2ShipInd05:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd05
		return nil
	case PaymentSessionCreatingRequestCardTds2ShipInd06:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd06
		return nil
	case PaymentSessionCreatingRequestCardTds2ShipInd07:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd07
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// カード顧客名と出荷先名が一致しているか否か\
// カード顧客の顧客名と登録に使用される配送先名の一致/不一致を設定
// - `01`: カード顧客名と出荷先名が一致
// - `02`: カード顧客名と出荷先名が不一致.
type PaymentSessionCreatingRequestCardTds2ShipNameInd string

const (
	PaymentSessionCreatingRequestCardTds2ShipNameInd01 PaymentSessionCreatingRequestCardTds2ShipNameInd = "01"
	PaymentSessionCreatingRequestCardTds2ShipNameInd02 PaymentSessionCreatingRequestCardTds2ShipNameInd = "02"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2ShipNameInd values.
func (PaymentSessionCreatingRequestCardTds2ShipNameInd) AllValues() []PaymentSessionCreatingRequestCardTds2ShipNameInd {
	return []PaymentSessionCreatingRequestCardTds2ShipNameInd{
		PaymentSessionCreatingRequestCardTds2ShipNameInd01,
		PaymentSessionCreatingRequestCardTds2ShipNameInd02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2ShipNameInd) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2ShipNameInd01:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ShipNameInd02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ShipNameInd) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2ShipNameInd(data) {
	case PaymentSessionCreatingRequestCardTds2ShipNameInd01:
		*s = PaymentSessionCreatingRequestCardTds2ShipNameInd01
		return nil
	case PaymentSessionCreatingRequestCardTds2ShipNameInd02:
		*s = PaymentSessionCreatingRequestCardTds2ShipNameInd02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// アカウントの不審行為情報\
// カード顧客で、不審な行動（過去の不正行為を含む）を加盟店様が発見したかどうかを設定
// - `01`: 不審な行動なし
// - `02`: 不審な行動あり.
type PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity string

const (
	PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity01 PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity = "01"
	PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity02 PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity = "02"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity values.
func (PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) AllValues() []PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity {
	return []PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity{
		PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity01,
		PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity02,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity01:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity02:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity(data) {
	case PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity01:
		*s = PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity01
		return nil
	case PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity02:
		*s = PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity02
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// <span class="smallText color--blue-400">[3Dセキュア認証パラメータ]</span>\
// ログイン方法\
// ログイン方法を設定する場合、ログイン証跡とログイン日時の設定が必要です。
// - `01`: 認証なし（ゲストとしてログイン）
// - `02`: 加盟店様自身の認証情報
// - `03`: SSO(シングルサインオン)
// - `04`: イシュアーの認証情報
// - `05`: サードパーティ認証
// - `06`: FIDO認証.
type PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod string

const (
	PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod01 PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod = "01"
	PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod02 PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod = "02"
	PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod03 PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod = "03"
	PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod04 PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod = "04"
	PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod05 PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod = "05"
	PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod06 PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod = "06"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod values.
func (PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) AllValues() []PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod {
	return []PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod{
		PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod01,
		PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod02,
		PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod03,
		PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod04,
		PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod05,
		PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod06,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod01:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod02:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod03:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod04:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod05:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod06:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod(data) {
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod01:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod01
		return nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod02:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod02
		return nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod03:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod03
		return nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod04:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod04
		return nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod05:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod05
		return nil
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod06:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod06
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type PaymentSessionCreatingRequestCardTds2Type string

const (
	PaymentSessionCreatingRequestCardTds2Type2 PaymentSessionCreatingRequestCardTds2Type = "2"
	PaymentSessionCreatingRequestCardTds2Type3 PaymentSessionCreatingRequestCardTds2Type = "3"
)

// AllValues returns all PaymentSessionCreatingRequestCardTds2Type values.
func (PaymentSessionCreatingRequestCardTds2Type) AllValues() []PaymentSessionCreatingRequestCardTds2Type {
	return []PaymentSessionCreatingRequestCardTds2Type{
		PaymentSessionCreatingRequestCardTds2Type2,
		PaymentSessionCreatingRequestCardTds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTds2Type) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTds2Type2:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2Type) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTds2Type(data) {
	case PaymentSessionCreatingRequestCardTds2Type2:
		*s = PaymentSessionCreatingRequestCardTds2Type2
		return nil
	case PaymentSessionCreatingRequestCardTds2Type3:
		*s = PaymentSessionCreatingRequestCardTds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type PaymentSessionCreatingRequestCardTdsType string

const (
	PaymentSessionCreatingRequestCardTdsType0 PaymentSessionCreatingRequestCardTdsType = "0"
	PaymentSessionCreatingRequestCardTdsType2 PaymentSessionCreatingRequestCardTdsType = "2"
)

// AllValues returns all PaymentSessionCreatingRequestCardTdsType values.
func (PaymentSessionCreatingRequestCardTdsType) AllValues() []PaymentSessionCreatingRequestCardTdsType {
	return []PaymentSessionCreatingRequestCardTdsType{
		PaymentSessionCreatingRequestCardTdsType0,
		PaymentSessionCreatingRequestCardTdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestCardTdsType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestCardTdsType0:
		return []byte(s), nil
	case PaymentSessionCreatingRequestCardTdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestCardTdsType) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestCardTdsType(data) {
	case PaymentSessionCreatingRequestCardTdsType0:
		*s = PaymentSessionCreatingRequestCardTdsType0
		return nil
	case PaymentSessionCreatingRequestCardTdsType2:
		*s = PaymentSessionCreatingRequestCardTdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 購入メール 送信フラグ\
// リダイレクト型決済URLをfincodeからのメール送信機能で送信したかどうかを示します。
// - `0`：送信しなかった（デフォルト）
// - `1`：送信した.
type PaymentSessionCreatingRequestGuideMailSendFlag string

const (
	PaymentSessionCreatingRequestGuideMailSendFlag0 PaymentSessionCreatingRequestGuideMailSendFlag = "0"
	PaymentSessionCreatingRequestGuideMailSendFlag1 PaymentSessionCreatingRequestGuideMailSendFlag = "1"
)

// AllValues returns all PaymentSessionCreatingRequestGuideMailSendFlag values.
func (PaymentSessionCreatingRequestGuideMailSendFlag) AllValues() []PaymentSessionCreatingRequestGuideMailSendFlag {
	return []PaymentSessionCreatingRequestGuideMailSendFlag{
		PaymentSessionCreatingRequestGuideMailSendFlag0,
		PaymentSessionCreatingRequestGuideMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestGuideMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestGuideMailSendFlag0:
		return []byte(s), nil
	case PaymentSessionCreatingRequestGuideMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestGuideMailSendFlag) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestGuideMailSendFlag(data) {
	case PaymentSessionCreatingRequestGuideMailSendFlag0:
		*s = PaymentSessionCreatingRequestGuideMailSendFlag0
		return nil
	case PaymentSessionCreatingRequestGuideMailSendFlag1:
		*s = PaymentSessionCreatingRequestGuideMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ決済パラメータ\
// `pay_type`に`Konbini`を含めた場合に用いられる、コンビニ決済に関するパラメータです。.
type PaymentSessionCreatingRequestKonbini struct {
	PaymentTermDay               OptNilInt32                                                         `json:"payment_term_day"`
	KonbiniReceptionMailSendFlag NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag `json:"konbini_reception_mail_send_flag"`
}

// GetPaymentTermDay returns the value of PaymentTermDay.
func (s *PaymentSessionCreatingRequestKonbini) GetPaymentTermDay() OptNilInt32 {
	return s.PaymentTermDay
}

// GetKonbiniReceptionMailSendFlag returns the value of KonbiniReceptionMailSendFlag.
func (s *PaymentSessionCreatingRequestKonbini) GetKonbiniReceptionMailSendFlag() NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag {
	return s.KonbiniReceptionMailSendFlag
}

// SetPaymentTermDay sets the value of PaymentTermDay.
func (s *PaymentSessionCreatingRequestKonbini) SetPaymentTermDay(val OptNilInt32) {
	s.PaymentTermDay = val
}

// SetKonbiniReceptionMailSendFlag sets the value of KonbiniReceptionMailSendFlag.
func (s *PaymentSessionCreatingRequestKonbini) SetKonbiniReceptionMailSendFlag(val NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) {
	s.KonbiniReceptionMailSendFlag = val
}

// コンビニ決済 支払い画面案内メール送信フラグ\
// コンビニ決済の支払い画面案内メールを送信するかどうかを設定します。
// - `0`：送信しない
// - `1`：送信する.
type PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag string

const (
	PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag0 PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag = "0"
	PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag1 PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag = "1"
)

// AllValues returns all PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag values.
func (PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) AllValues() []PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag {
	return []PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag{
		PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag0,
		PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag0:
		return []byte(s), nil
	case PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag(data) {
	case PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag0:
		*s = PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag0
		return nil
	case PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag1:
		*s = PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PayPayパラメータ\
// `pay_type`に`Paypay`を含めた場合に用いられる、PayPayによる決済に関するパラメータです。.
type PaymentSessionCreatingRequestPaypay struct {
	// この決済URL上でPayPayによる決済を行った際、仮売上にするか即座に売上確定するか指定します。
	// - `AUTH`：仮売上にする
	// - `CAPTURE`：即時売上.
	JobCode          NilPaymentSessionCreatingRequestPaypayJobCode `json:"job_code"`
	OrderDescription OptNilString                                  `json:"order_description"`
}

// GetJobCode returns the value of JobCode.
func (s *PaymentSessionCreatingRequestPaypay) GetJobCode() NilPaymentSessionCreatingRequestPaypayJobCode {
	return s.JobCode
}

// GetOrderDescription returns the value of OrderDescription.
func (s *PaymentSessionCreatingRequestPaypay) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// SetJobCode sets the value of JobCode.
func (s *PaymentSessionCreatingRequestPaypay) SetJobCode(val NilPaymentSessionCreatingRequestPaypayJobCode) {
	s.JobCode = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *PaymentSessionCreatingRequestPaypay) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type PaymentSessionCreatingRequestPaypayJobCode string

const (
	PaymentSessionCreatingRequestPaypayJobCodeAUTH    PaymentSessionCreatingRequestPaypayJobCode = "AUTH"
	PaymentSessionCreatingRequestPaypayJobCodeCAPTURE PaymentSessionCreatingRequestPaypayJobCode = "CAPTURE"
)

// AllValues returns all PaymentSessionCreatingRequestPaypayJobCode values.
func (PaymentSessionCreatingRequestPaypayJobCode) AllValues() []PaymentSessionCreatingRequestPaypayJobCode {
	return []PaymentSessionCreatingRequestPaypayJobCode{
		PaymentSessionCreatingRequestPaypayJobCodeAUTH,
		PaymentSessionCreatingRequestPaypayJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestPaypayJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestPaypayJobCodeAUTH:
		return []byte(s), nil
	case PaymentSessionCreatingRequestPaypayJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestPaypayJobCode) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestPaypayJobCode(data) {
	case PaymentSessionCreatingRequestPaypayJobCodeAUTH:
		*s = PaymentSessionCreatingRequestPaypayJobCodeAUTH
		return nil
	case PaymentSessionCreatingRequestPaypayJobCodeCAPTURE:
		*s = PaymentSessionCreatingRequestPaypayJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 完了メール 送信フラグ\
// 決済が完了した際に購入者に完了メールを送信するかどうかを示します。
// - `0`：送信しない（デフォルト）
// - `1`：送信する.
type PaymentSessionCreatingRequestThanksMailSendFlag string

const (
	PaymentSessionCreatingRequestThanksMailSendFlag0 PaymentSessionCreatingRequestThanksMailSendFlag = "0"
	PaymentSessionCreatingRequestThanksMailSendFlag1 PaymentSessionCreatingRequestThanksMailSendFlag = "1"
)

// AllValues returns all PaymentSessionCreatingRequestThanksMailSendFlag values.
func (PaymentSessionCreatingRequestThanksMailSendFlag) AllValues() []PaymentSessionCreatingRequestThanksMailSendFlag {
	return []PaymentSessionCreatingRequestThanksMailSendFlag{
		PaymentSessionCreatingRequestThanksMailSendFlag0,
		PaymentSessionCreatingRequestThanksMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestThanksMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestThanksMailSendFlag0:
		return []byte(s), nil
	case PaymentSessionCreatingRequestThanksMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestThanksMailSendFlag) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestThanksMailSendFlag(data) {
	case PaymentSessionCreatingRequestThanksMailSendFlag0:
		*s = PaymentSessionCreatingRequestThanksMailSendFlag0
		return nil
	case PaymentSessionCreatingRequestThanksMailSendFlag1:
		*s = PaymentSessionCreatingRequestThanksMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済共通項目\
// 決済手段を問わず共通して使用される決済に関するパラメータです。.
type PaymentSessionCreatingRequestTransaction struct {
	PayType OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray `json:"pay_type"`
	// 決済金額\
	// 決済金額を指定します。\
	// \
	// 指定可能な金額の範囲は各決済手段ごとの制限事項に準じます。.
	Amount string `json:"amount"`
	// オーダーID\
	// このリダイレクト型決済URL上で決済後生成される決済情報のIDを予め指定できます。.
	OrderID OptNilString `json:"order_id"`
	// 税送料\
	// 税送料を指定します。\
	// \
	// 指定可能な金額の範囲は各決済手段ごとの制限事項に準じます。.
	Tax OptNilString `json:"tax"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
}

// GetPayType returns the value of PayType.
func (s *PaymentSessionCreatingRequestTransaction) GetPayType() OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray {
	return s.PayType
}

// GetAmount returns the value of Amount.
func (s *PaymentSessionCreatingRequestTransaction) GetAmount() string {
	return s.Amount
}

// GetOrderID returns the value of OrderID.
func (s *PaymentSessionCreatingRequestTransaction) GetOrderID() OptNilString {
	return s.OrderID
}

// GetTax returns the value of Tax.
func (s *PaymentSessionCreatingRequestTransaction) GetTax() OptNilString {
	return s.Tax
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentSessionCreatingRequestTransaction) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentSessionCreatingRequestTransaction) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentSessionCreatingRequestTransaction) GetClientField3() OptNilString {
	return s.ClientField3
}

// SetPayType sets the value of PayType.
func (s *PaymentSessionCreatingRequestTransaction) SetPayType(val OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) {
	s.PayType = val
}

// SetAmount sets the value of Amount.
func (s *PaymentSessionCreatingRequestTransaction) SetAmount(val string) {
	s.Amount = val
}

// SetOrderID sets the value of OrderID.
func (s *PaymentSessionCreatingRequestTransaction) SetOrderID(val OptNilString) {
	s.OrderID = val
}

// SetTax sets the value of Tax.
func (s *PaymentSessionCreatingRequestTransaction) SetTax(val OptNilString) {
	s.Tax = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentSessionCreatingRequestTransaction) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentSessionCreatingRequestTransaction) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentSessionCreatingRequestTransaction) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// 決済方法\
// このリダイレクト型決済で利用できる決済方法です。\
// \
// - `Card`：カード決済\
// - `Konbini`：コンビニ決済\
// - `Paypay`：PayPay.
type PaymentSessionCreatingRequestTransactionPayTypeItem string

const (
	PaymentSessionCreatingRequestTransactionPayTypeItemCard    PaymentSessionCreatingRequestTransactionPayTypeItem = "Card"
	PaymentSessionCreatingRequestTransactionPayTypeItemKonbini PaymentSessionCreatingRequestTransactionPayTypeItem = "Konbini"
	PaymentSessionCreatingRequestTransactionPayTypeItemPaypay  PaymentSessionCreatingRequestTransactionPayTypeItem = "Paypay"
)

// AllValues returns all PaymentSessionCreatingRequestTransactionPayTypeItem values.
func (PaymentSessionCreatingRequestTransactionPayTypeItem) AllValues() []PaymentSessionCreatingRequestTransactionPayTypeItem {
	return []PaymentSessionCreatingRequestTransactionPayTypeItem{
		PaymentSessionCreatingRequestTransactionPayTypeItemCard,
		PaymentSessionCreatingRequestTransactionPayTypeItemKonbini,
		PaymentSessionCreatingRequestTransactionPayTypeItemPaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingRequestTransactionPayTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingRequestTransactionPayTypeItemCard:
		return []byte(s), nil
	case PaymentSessionCreatingRequestTransactionPayTypeItemKonbini:
		return []byte(s), nil
	case PaymentSessionCreatingRequestTransactionPayTypeItemPaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingRequestTransactionPayTypeItem) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingRequestTransactionPayTypeItem(data) {
	case PaymentSessionCreatingRequestTransactionPayTypeItemCard:
		*s = PaymentSessionCreatingRequestTransactionPayTypeItemCard
		return nil
	case PaymentSessionCreatingRequestTransactionPayTypeItemKonbini:
		*s = PaymentSessionCreatingRequestTransactionPayTypeItemKonbini
		return nil
	case PaymentSessionCreatingRequestTransactionPayTypeItemPaypay:
		*s = PaymentSessionCreatingRequestTransactionPayTypeItemPaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentSession.Creating.Response
type PaymentSessionCreatingResponse struct {
	// リダイレクト型決済URL ID.
	ID OptString `json:"id"`
	// リダイレクト型決済URL.
	LinkURL OptString `json:"link_url"`
	// 成功時リダイレクトURL\
	// `link_url`上で決済に成功すると、fincodeはこのURLにPOSTメソッドでリダイレクトします。.
	SuccessURL OptNilString `json:"success_url"`
	// キャンセル時リダイレクトURL\
	// `link_url`上で決済がキャンセルされると、fincodeはこのURLにPOSTメソッドでリダイレクトします。.
	CancelURL OptNilString                            `json:"cancel_url"`
	Status    OptPaymentSessionCreatingResponseStatus `json:"status"`
	// リダイレクト型決済URL 有効期限\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	Expire OptString `json:"expire"`
	// ショップ／サービス名\
	// 決済URL上で表示されるショップおよびサービスの名称です。\
	// \
	// デフォルトでは本番環境申請時に登録した「明細書表記」の値が設定されます。.
	ShopServiceName OptNilString `json:"shop_service_name"`
	// 購入メール 送信フラグ\
	// リダイレクト型決済URLをfincodeからのメール送信機能で送信したかどうかを示します。
	// - `0`：送信しなかった（デフォルト）
	// - `1`：送信した.
	GuideMailSendFlag OptPaymentSessionCreatingResponseGuideMailSendFlag `json:"guide_mail_send_flag"`
	// 購入メール 送信先メールアドレス\
	// リダイレクト型決済URLをfincodeからのメール送信機能で送信する場合の送信先メールアドレスです。.
	ReceiverMail OptNilString `json:"receiver_mail"`
	// 購入メール 購入者の名前\
	// リダイレクト型決済URLをfincodeからのメール送信機能で送信する場合のメール中で用いられる購入者の名前です。\
	// \
	// fincodeが提供するデフォルトのメールテンプレートでは敬称がテンプレート側に含まれています。.
	MailCustomerName OptNilString `json:"mail_customer_name"`
	// 完了メール 送信フラグ\
	// 決済が完了した際に購入者に完了メールを送信するかどうかを示します。
	// - `0`：送信しない（デフォルト）
	// - `1`：送信する.
	ThanksMailSendFlag OptPaymentSessionCreatingResponseThanksMailSendFlag `json:"thanks_mail_send_flag"`
	// メールテンプレートID\
	// メールテンプレートIDが設定されている場合、リダイレクト型決済URLの送信先メールアドレスに送信されるメールのテンプレートが変更されます。\
	// \
	// fincodeが提供するデフォルトのメールテンプレートを使用する場合は`null`を設定します。.
	ShopMailTemplateID OptNilString `json:"shop_mail_template_id"`
	// 決済共通項目\
	// 決済手段を問わず共通して使用される、決済に関するデータです。.
	Transaction OptPaymentSessionCreatingResponseTransaction `json:"transaction"`
	// カード決済に関する情報.
	Card OptPaymentSessionCreatingResponseCard `json:"card"`
	// コンビニ決済に関する情報.
	Konbini OptPaymentSessionCreatingResponseKonbini `json:"konbini"`
	// PayPayに関する情報.
	Paypay  OptPaymentSessionCreatingResponsePaypay `json:"paypay"`
	Created OptString                               `json:"created"`
	Updated *NilString                              `json:"updated"`
}

// GetID returns the value of ID.
func (s *PaymentSessionCreatingResponse) GetID() OptString {
	return s.ID
}

// GetLinkURL returns the value of LinkURL.
func (s *PaymentSessionCreatingResponse) GetLinkURL() OptString {
	return s.LinkURL
}

// GetSuccessURL returns the value of SuccessURL.
func (s *PaymentSessionCreatingResponse) GetSuccessURL() OptNilString {
	return s.SuccessURL
}

// GetCancelURL returns the value of CancelURL.
func (s *PaymentSessionCreatingResponse) GetCancelURL() OptNilString {
	return s.CancelURL
}

// GetStatus returns the value of Status.
func (s *PaymentSessionCreatingResponse) GetStatus() OptPaymentSessionCreatingResponseStatus {
	return s.Status
}

// GetExpire returns the value of Expire.
func (s *PaymentSessionCreatingResponse) GetExpire() OptString {
	return s.Expire
}

// GetShopServiceName returns the value of ShopServiceName.
func (s *PaymentSessionCreatingResponse) GetShopServiceName() OptNilString {
	return s.ShopServiceName
}

// GetGuideMailSendFlag returns the value of GuideMailSendFlag.
func (s *PaymentSessionCreatingResponse) GetGuideMailSendFlag() OptPaymentSessionCreatingResponseGuideMailSendFlag {
	return s.GuideMailSendFlag
}

// GetReceiverMail returns the value of ReceiverMail.
func (s *PaymentSessionCreatingResponse) GetReceiverMail() OptNilString {
	return s.ReceiverMail
}

// GetMailCustomerName returns the value of MailCustomerName.
func (s *PaymentSessionCreatingResponse) GetMailCustomerName() OptNilString {
	return s.MailCustomerName
}

// GetThanksMailSendFlag returns the value of ThanksMailSendFlag.
func (s *PaymentSessionCreatingResponse) GetThanksMailSendFlag() OptPaymentSessionCreatingResponseThanksMailSendFlag {
	return s.ThanksMailSendFlag
}

// GetShopMailTemplateID returns the value of ShopMailTemplateID.
func (s *PaymentSessionCreatingResponse) GetShopMailTemplateID() OptNilString {
	return s.ShopMailTemplateID
}

// GetTransaction returns the value of Transaction.
func (s *PaymentSessionCreatingResponse) GetTransaction() OptPaymentSessionCreatingResponseTransaction {
	return s.Transaction
}

// GetCard returns the value of Card.
func (s *PaymentSessionCreatingResponse) GetCard() OptPaymentSessionCreatingResponseCard {
	return s.Card
}

// GetKonbini returns the value of Konbini.
func (s *PaymentSessionCreatingResponse) GetKonbini() OptPaymentSessionCreatingResponseKonbini {
	return s.Konbini
}

// GetPaypay returns the value of Paypay.
func (s *PaymentSessionCreatingResponse) GetPaypay() OptPaymentSessionCreatingResponsePaypay {
	return s.Paypay
}

// GetCreated returns the value of Created.
func (s *PaymentSessionCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PaymentSessionCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PaymentSessionCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetLinkURL sets the value of LinkURL.
func (s *PaymentSessionCreatingResponse) SetLinkURL(val OptString) {
	s.LinkURL = val
}

// SetSuccessURL sets the value of SuccessURL.
func (s *PaymentSessionCreatingResponse) SetSuccessURL(val OptNilString) {
	s.SuccessURL = val
}

// SetCancelURL sets the value of CancelURL.
func (s *PaymentSessionCreatingResponse) SetCancelURL(val OptNilString) {
	s.CancelURL = val
}

// SetStatus sets the value of Status.
func (s *PaymentSessionCreatingResponse) SetStatus(val OptPaymentSessionCreatingResponseStatus) {
	s.Status = val
}

// SetExpire sets the value of Expire.
func (s *PaymentSessionCreatingResponse) SetExpire(val OptString) {
	s.Expire = val
}

// SetShopServiceName sets the value of ShopServiceName.
func (s *PaymentSessionCreatingResponse) SetShopServiceName(val OptNilString) {
	s.ShopServiceName = val
}

// SetGuideMailSendFlag sets the value of GuideMailSendFlag.
func (s *PaymentSessionCreatingResponse) SetGuideMailSendFlag(val OptPaymentSessionCreatingResponseGuideMailSendFlag) {
	s.GuideMailSendFlag = val
}

// SetReceiverMail sets the value of ReceiverMail.
func (s *PaymentSessionCreatingResponse) SetReceiverMail(val OptNilString) {
	s.ReceiverMail = val
}

// SetMailCustomerName sets the value of MailCustomerName.
func (s *PaymentSessionCreatingResponse) SetMailCustomerName(val OptNilString) {
	s.MailCustomerName = val
}

// SetThanksMailSendFlag sets the value of ThanksMailSendFlag.
func (s *PaymentSessionCreatingResponse) SetThanksMailSendFlag(val OptPaymentSessionCreatingResponseThanksMailSendFlag) {
	s.ThanksMailSendFlag = val
}

// SetShopMailTemplateID sets the value of ShopMailTemplateID.
func (s *PaymentSessionCreatingResponse) SetShopMailTemplateID(val OptNilString) {
	s.ShopMailTemplateID = val
}

// SetTransaction sets the value of Transaction.
func (s *PaymentSessionCreatingResponse) SetTransaction(val OptPaymentSessionCreatingResponseTransaction) {
	s.Transaction = val
}

// SetCard sets the value of Card.
func (s *PaymentSessionCreatingResponse) SetCard(val OptPaymentSessionCreatingResponseCard) {
	s.Card = val
}

// SetKonbini sets the value of Konbini.
func (s *PaymentSessionCreatingResponse) SetKonbini(val OptPaymentSessionCreatingResponseKonbini) {
	s.Konbini = val
}

// SetPaypay sets the value of Paypay.
func (s *PaymentSessionCreatingResponse) SetPaypay(val OptPaymentSessionCreatingResponsePaypay) {
	s.Paypay = val
}

// SetCreated sets the value of Created.
func (s *PaymentSessionCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PaymentSessionCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PaymentSessionCreatingResponse) createPaymentSessionRes() {}

type PaymentSessionCreatingResponseCard struct {
	JobCode      OptCardPaymentSessionJobCode `json:"job_code"`
	TdsType      OptNilTdsType                `json:"tds_type"`
	TdTenantName OptTdTenantName              `json:"td_tenant_name"`
	Tds2Type     OptNilTds2Type               `json:"tds2_type"`
	// 商品コード\
	// ※ 通常は`null`.
	ItemCode OptNilString `json:"item_code"`
}

// GetJobCode returns the value of JobCode.
func (s *PaymentSessionCreatingResponseCard) GetJobCode() OptCardPaymentSessionJobCode {
	return s.JobCode
}

// GetTdsType returns the value of TdsType.
func (s *PaymentSessionCreatingResponseCard) GetTdsType() OptNilTdsType {
	return s.TdsType
}

// GetTdTenantName returns the value of TdTenantName.
func (s *PaymentSessionCreatingResponseCard) GetTdTenantName() OptTdTenantName {
	return s.TdTenantName
}

// GetTds2Type returns the value of Tds2Type.
func (s *PaymentSessionCreatingResponseCard) GetTds2Type() OptNilTds2Type {
	return s.Tds2Type
}

// GetItemCode returns the value of ItemCode.
func (s *PaymentSessionCreatingResponseCard) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetJobCode sets the value of JobCode.
func (s *PaymentSessionCreatingResponseCard) SetJobCode(val OptCardPaymentSessionJobCode) {
	s.JobCode = val
}

// SetTdsType sets the value of TdsType.
func (s *PaymentSessionCreatingResponseCard) SetTdsType(val OptNilTdsType) {
	s.TdsType = val
}

// SetTdTenantName sets the value of TdTenantName.
func (s *PaymentSessionCreatingResponseCard) SetTdTenantName(val OptTdTenantName) {
	s.TdTenantName = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *PaymentSessionCreatingResponseCard) SetTds2Type(val OptNilTds2Type) {
	s.Tds2Type = val
}

// SetItemCode sets the value of ItemCode.
func (s *PaymentSessionCreatingResponseCard) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// 購入メール 送信フラグ\
// リダイレクト型決済URLをfincodeからのメール送信機能で送信したかどうかを示します。
// - `0`：送信しなかった（デフォルト）
// - `1`：送信した.
type PaymentSessionCreatingResponseGuideMailSendFlag string

const (
	PaymentSessionCreatingResponseGuideMailSendFlag0 PaymentSessionCreatingResponseGuideMailSendFlag = "0"
	PaymentSessionCreatingResponseGuideMailSendFlag1 PaymentSessionCreatingResponseGuideMailSendFlag = "1"
)

// AllValues returns all PaymentSessionCreatingResponseGuideMailSendFlag values.
func (PaymentSessionCreatingResponseGuideMailSendFlag) AllValues() []PaymentSessionCreatingResponseGuideMailSendFlag {
	return []PaymentSessionCreatingResponseGuideMailSendFlag{
		PaymentSessionCreatingResponseGuideMailSendFlag0,
		PaymentSessionCreatingResponseGuideMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingResponseGuideMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingResponseGuideMailSendFlag0:
		return []byte(s), nil
	case PaymentSessionCreatingResponseGuideMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingResponseGuideMailSendFlag) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingResponseGuideMailSendFlag(data) {
	case PaymentSessionCreatingResponseGuideMailSendFlag0:
		*s = PaymentSessionCreatingResponseGuideMailSendFlag0
		return nil
	case PaymentSessionCreatingResponseGuideMailSendFlag1:
		*s = PaymentSessionCreatingResponseGuideMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentSessionCreatingResponseKonbini struct {
	// コンビニ決済 支払い画面URL.
	KonbiniReceptionURL OptNilString `json:"konbini_reception_url"`
	// コンビニ決済 支払期限日数\
	// 店頭レジでの支払い期限日数です。.
	PaymentTermDay OptNilInt32 `json:"payment_term_day"`
	// コンビニ決済 支払い画面案内メール送信フラグ\
	// コンビニ決済の支払い画面案内メールを送信するかどうかを設定します。
	// - `0`：送信しない
	// - `1`：送信する.
	KonbiniReceptionMailSendFlag OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag `json:"konbini_reception_mail_send_flag"`
}

// GetKonbiniReceptionURL returns the value of KonbiniReceptionURL.
func (s *PaymentSessionCreatingResponseKonbini) GetKonbiniReceptionURL() OptNilString {
	return s.KonbiniReceptionURL
}

// GetPaymentTermDay returns the value of PaymentTermDay.
func (s *PaymentSessionCreatingResponseKonbini) GetPaymentTermDay() OptNilInt32 {
	return s.PaymentTermDay
}

// GetKonbiniReceptionMailSendFlag returns the value of KonbiniReceptionMailSendFlag.
func (s *PaymentSessionCreatingResponseKonbini) GetKonbiniReceptionMailSendFlag() OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag {
	return s.KonbiniReceptionMailSendFlag
}

// SetKonbiniReceptionURL sets the value of KonbiniReceptionURL.
func (s *PaymentSessionCreatingResponseKonbini) SetKonbiniReceptionURL(val OptNilString) {
	s.KonbiniReceptionURL = val
}

// SetPaymentTermDay sets the value of PaymentTermDay.
func (s *PaymentSessionCreatingResponseKonbini) SetPaymentTermDay(val OptNilInt32) {
	s.PaymentTermDay = val
}

// SetKonbiniReceptionMailSendFlag sets the value of KonbiniReceptionMailSendFlag.
func (s *PaymentSessionCreatingResponseKonbini) SetKonbiniReceptionMailSendFlag(val OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) {
	s.KonbiniReceptionMailSendFlag = val
}

// コンビニ決済 支払い画面案内メール送信フラグ\
// コンビニ決済の支払い画面案内メールを送信するかどうかを設定します。
// - `0`：送信しない
// - `1`：送信する.
type PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag string

const (
	PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag0 PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag = "0"
	PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag1 PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag = "1"
)

// AllValues returns all PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag values.
func (PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) AllValues() []PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag {
	return []PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag{
		PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag0,
		PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag0:
		return []byte(s), nil
	case PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag(data) {
	case PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag0:
		*s = PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag0
		return nil
	case PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag1:
		*s = PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PaymentSessionCreatingResponsePaypay struct {
	// この決済URL上でPayPayによる決済を行った際、仮売上にするか即座に売上確定するか指定します。
	// - `AUTH`：仮売上にする
	// - `CAPTURE`：即時売上.
	JobCode OptNilPaymentSessionCreatingResponsePaypayJobCode `json:"job_code"`
	// 注文内容の説明\
	// PayPayアプリ上で注文内容として表示されます。.
	OrderDescription OptNilString `json:"order_description"`
}

// GetJobCode returns the value of JobCode.
func (s *PaymentSessionCreatingResponsePaypay) GetJobCode() OptNilPaymentSessionCreatingResponsePaypayJobCode {
	return s.JobCode
}

// GetOrderDescription returns the value of OrderDescription.
func (s *PaymentSessionCreatingResponsePaypay) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// SetJobCode sets the value of JobCode.
func (s *PaymentSessionCreatingResponsePaypay) SetJobCode(val OptNilPaymentSessionCreatingResponsePaypayJobCode) {
	s.JobCode = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *PaymentSessionCreatingResponsePaypay) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type PaymentSessionCreatingResponsePaypayJobCode string

const (
	PaymentSessionCreatingResponsePaypayJobCodeAUTH    PaymentSessionCreatingResponsePaypayJobCode = "AUTH"
	PaymentSessionCreatingResponsePaypayJobCodeCAPTURE PaymentSessionCreatingResponsePaypayJobCode = "CAPTURE"
)

// AllValues returns all PaymentSessionCreatingResponsePaypayJobCode values.
func (PaymentSessionCreatingResponsePaypayJobCode) AllValues() []PaymentSessionCreatingResponsePaypayJobCode {
	return []PaymentSessionCreatingResponsePaypayJobCode{
		PaymentSessionCreatingResponsePaypayJobCodeAUTH,
		PaymentSessionCreatingResponsePaypayJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingResponsePaypayJobCode) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingResponsePaypayJobCodeAUTH:
		return []byte(s), nil
	case PaymentSessionCreatingResponsePaypayJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingResponsePaypayJobCode) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingResponsePaypayJobCode(data) {
	case PaymentSessionCreatingResponsePaypayJobCodeAUTH:
		*s = PaymentSessionCreatingResponsePaypayJobCodeAUTH
		return nil
	case PaymentSessionCreatingResponsePaypayJobCodeCAPTURE:
		*s = PaymentSessionCreatingResponsePaypayJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス\
// リダイレクト型決済URLのステータスを表します。
// - `CREATE`：決済URLが作成された状態.
type PaymentSessionCreatingResponseStatus string

const (
	PaymentSessionCreatingResponseStatusCREATE PaymentSessionCreatingResponseStatus = "CREATE"
)

// AllValues returns all PaymentSessionCreatingResponseStatus values.
func (PaymentSessionCreatingResponseStatus) AllValues() []PaymentSessionCreatingResponseStatus {
	return []PaymentSessionCreatingResponseStatus{
		PaymentSessionCreatingResponseStatusCREATE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingResponseStatusCREATE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingResponseStatus) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingResponseStatus(data) {
	case PaymentSessionCreatingResponseStatusCREATE:
		*s = PaymentSessionCreatingResponseStatusCREATE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 完了メール 送信フラグ\
// 決済が完了した際に購入者に完了メールを送信するかどうかを示します。
// - `0`：送信しない（デフォルト）
// - `1`：送信する.
type PaymentSessionCreatingResponseThanksMailSendFlag string

const (
	PaymentSessionCreatingResponseThanksMailSendFlag0 PaymentSessionCreatingResponseThanksMailSendFlag = "0"
	PaymentSessionCreatingResponseThanksMailSendFlag1 PaymentSessionCreatingResponseThanksMailSendFlag = "1"
)

// AllValues returns all PaymentSessionCreatingResponseThanksMailSendFlag values.
func (PaymentSessionCreatingResponseThanksMailSendFlag) AllValues() []PaymentSessionCreatingResponseThanksMailSendFlag {
	return []PaymentSessionCreatingResponseThanksMailSendFlag{
		PaymentSessionCreatingResponseThanksMailSendFlag0,
		PaymentSessionCreatingResponseThanksMailSendFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingResponseThanksMailSendFlag) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingResponseThanksMailSendFlag0:
		return []byte(s), nil
	case PaymentSessionCreatingResponseThanksMailSendFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingResponseThanksMailSendFlag) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingResponseThanksMailSendFlag(data) {
	case PaymentSessionCreatingResponseThanksMailSendFlag0:
		*s = PaymentSessionCreatingResponseThanksMailSendFlag0
		return nil
	case PaymentSessionCreatingResponseThanksMailSendFlag1:
		*s = PaymentSessionCreatingResponseThanksMailSendFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済共通項目\
// 決済手段を問わず共通して使用される、決済に関するデータです。.
type PaymentSessionCreatingResponseTransaction struct {
	// 決済手段\
	// この決済URL上で使用できる決済手段を複数指定します。
	// - `Card`：カード決済
	// - `Konbini`：コンビニ決済
	// - `Paypay`：PayPay.
	PayType []PaymentSessionCreatingResponseTransactionPayTypeItem `json:"pay_type"`
	// オーダーID\
	// このリダイレクト型決済URL上で決済後生成される決済情報のID.
	OrderID OptString `json:"order_id"`
	Amount  OptInt    `json:"amount"`
	Tax     OptInt    `json:"tax"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
}

// GetPayType returns the value of PayType.
func (s *PaymentSessionCreatingResponseTransaction) GetPayType() []PaymentSessionCreatingResponseTransactionPayTypeItem {
	return s.PayType
}

// GetOrderID returns the value of OrderID.
func (s *PaymentSessionCreatingResponseTransaction) GetOrderID() OptString {
	return s.OrderID
}

// GetAmount returns the value of Amount.
func (s *PaymentSessionCreatingResponseTransaction) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PaymentSessionCreatingResponseTransaction) GetTax() OptInt {
	return s.Tax
}

// GetClientField1 returns the value of ClientField1.
func (s *PaymentSessionCreatingResponseTransaction) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *PaymentSessionCreatingResponseTransaction) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *PaymentSessionCreatingResponseTransaction) GetClientField3() OptNilString {
	return s.ClientField3
}

// SetPayType sets the value of PayType.
func (s *PaymentSessionCreatingResponseTransaction) SetPayType(val []PaymentSessionCreatingResponseTransactionPayTypeItem) {
	s.PayType = val
}

// SetOrderID sets the value of OrderID.
func (s *PaymentSessionCreatingResponseTransaction) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetAmount sets the value of Amount.
func (s *PaymentSessionCreatingResponseTransaction) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PaymentSessionCreatingResponseTransaction) SetTax(val OptInt) {
	s.Tax = val
}

// SetClientField1 sets the value of ClientField1.
func (s *PaymentSessionCreatingResponseTransaction) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *PaymentSessionCreatingResponseTransaction) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *PaymentSessionCreatingResponseTransaction) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// 決済方法\
// このリダイレクト型決済で利用できる決済方法です。\
// \
// - `Card`：カード決済\
// - `Konbini`：コンビニ決済\
// - `Paypay`：PayPay.
type PaymentSessionCreatingResponseTransactionPayTypeItem string

const (
	PaymentSessionCreatingResponseTransactionPayTypeItemCard    PaymentSessionCreatingResponseTransactionPayTypeItem = "Card"
	PaymentSessionCreatingResponseTransactionPayTypeItemKonbini PaymentSessionCreatingResponseTransactionPayTypeItem = "Konbini"
	PaymentSessionCreatingResponseTransactionPayTypeItemPaypay  PaymentSessionCreatingResponseTransactionPayTypeItem = "Paypay"
)

// AllValues returns all PaymentSessionCreatingResponseTransactionPayTypeItem values.
func (PaymentSessionCreatingResponseTransactionPayTypeItem) AllValues() []PaymentSessionCreatingResponseTransactionPayTypeItem {
	return []PaymentSessionCreatingResponseTransactionPayTypeItem{
		PaymentSessionCreatingResponseTransactionPayTypeItemCard,
		PaymentSessionCreatingResponseTransactionPayTypeItemKonbini,
		PaymentSessionCreatingResponseTransactionPayTypeItemPaypay,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentSessionCreatingResponseTransactionPayTypeItem) MarshalText() ([]byte, error) {
	switch s {
	case PaymentSessionCreatingResponseTransactionPayTypeItemCard:
		return []byte(s), nil
	case PaymentSessionCreatingResponseTransactionPayTypeItemKonbini:
		return []byte(s), nil
	case PaymentSessionCreatingResponseTransactionPayTypeItemPaypay:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentSessionCreatingResponseTransactionPayTypeItem) UnmarshalText(data []byte) error {
	switch PaymentSessionCreatingResponseTransactionPayTypeItem(data) {
	case PaymentSessionCreatingResponseTransactionPayTypeItemCard:
		*s = PaymentSessionCreatingResponseTransactionPayTypeItemCard
		return nil
	case PaymentSessionCreatingResponseTransactionPayTypeItemKonbini:
		*s = PaymentSessionCreatingResponseTransactionPayTypeItemKonbini
		return nil
	case PaymentSessionCreatingResponseTransactionPayTypeItemPaypay:
		*s = PaymentSessionCreatingResponseTransactionPayTypeItemPaypay
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Plan
type Plan struct {
	// プランID.
	ID OptString `json:"id"`
	// プラン名.
	PlanName OptString `json:"plan_name"`
	// プランの説明.
	Description OptNilString `json:"description"`
	ShopID      OptString    `json:"shop_id"`
	// 利用金額.
	Amount OptInt64 `json:"amount"`
	// 税送料.
	Tax OptInt64 `json:"tax"`
	// 合計金額\
	// 利用金額と税送料の合計金額です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 課金間隔
	// - `month`：月
	// - `year`：年.
	IntervalPattern OptPlanIntervalPattern `json:"interval_pattern"`
	// 課金間隔数
	// - `1`：月次／年次の課金
	// - `2`：2ヶ月に1回の課金
	// - `3`：3ヶ月に1回の課金
	// - `6`：6ヶ月に1回の課金.
	IntervalCount OptPlanIntervalCount `json:"interval_count"`
	// 利用済みフラグ\
	// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
	// - `0`：このプランを用いたサブスクリプションはまだ存在しない
	// - `1`：このプランを用いたサブスクリプションが存在する.
	UsedFlag   OptPlanUsedFlag   `json:"used_flag"`
	DeleteFlag OptPlanDeleteFlag `json:"delete_flag"`
	Created    OptString         `json:"created"`
	Updated    *NilString        `json:"updated"`
}

// GetID returns the value of ID.
func (s *Plan) GetID() OptString {
	return s.ID
}

// GetPlanName returns the value of PlanName.
func (s *Plan) GetPlanName() OptString {
	return s.PlanName
}

// GetDescription returns the value of Description.
func (s *Plan) GetDescription() OptNilString {
	return s.Description
}

// GetShopID returns the value of ShopID.
func (s *Plan) GetShopID() OptString {
	return s.ShopID
}

// GetAmount returns the value of Amount.
func (s *Plan) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *Plan) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *Plan) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *Plan) GetIntervalPattern() OptPlanIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *Plan) GetIntervalCount() OptPlanIntervalCount {
	return s.IntervalCount
}

// GetUsedFlag returns the value of UsedFlag.
func (s *Plan) GetUsedFlag() OptPlanUsedFlag {
	return s.UsedFlag
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *Plan) GetDeleteFlag() OptPlanDeleteFlag {
	return s.DeleteFlag
}

// GetCreated returns the value of Created.
func (s *Plan) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *Plan) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *Plan) SetID(val OptString) {
	s.ID = val
}

// SetPlanName sets the value of PlanName.
func (s *Plan) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetDescription sets the value of Description.
func (s *Plan) SetDescription(val OptNilString) {
	s.Description = val
}

// SetShopID sets the value of ShopID.
func (s *Plan) SetShopID(val OptString) {
	s.ShopID = val
}

// SetAmount sets the value of Amount.
func (s *Plan) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *Plan) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *Plan) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *Plan) SetIntervalPattern(val OptPlanIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *Plan) SetIntervalCount(val OptPlanIntervalCount) {
	s.IntervalCount = val
}

// SetUsedFlag sets the value of UsedFlag.
func (s *Plan) SetUsedFlag(val OptPlanUsedFlag) {
	s.UsedFlag = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *Plan) SetDeleteFlag(val OptPlanDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreated sets the value of Created.
func (s *Plan) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *Plan) SetUpdated(val *NilString) {
	s.Updated = val
}

// Ref: #/components/schemas/Plan.Creating.Request
type PlanCreatingRequest struct {
	ID              OptString                             `json:"id"`
	PlanName        string                                `json:"plan_name"`
	Description     *NilString                            `json:"description"`
	Amount          string                                `json:"amount"`
	Tax             OptString                             `json:"tax"`
	IntervalPattern OptPlanCreatingRequestIntervalPattern `json:"interval_pattern"`
	IntervalCount   OptPlanCreatingRequestIntervalCount   `json:"interval_count"`
}

// GetID returns the value of ID.
func (s *PlanCreatingRequest) GetID() OptString {
	return s.ID
}

// GetPlanName returns the value of PlanName.
func (s *PlanCreatingRequest) GetPlanName() string {
	return s.PlanName
}

// GetDescription returns the value of Description.
func (s *PlanCreatingRequest) GetDescription() *NilString {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *PlanCreatingRequest) GetAmount() string {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PlanCreatingRequest) GetTax() OptString {
	return s.Tax
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *PlanCreatingRequest) GetIntervalPattern() OptPlanCreatingRequestIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *PlanCreatingRequest) GetIntervalCount() OptPlanCreatingRequestIntervalCount {
	return s.IntervalCount
}

// SetID sets the value of ID.
func (s *PlanCreatingRequest) SetID(val OptString) {
	s.ID = val
}

// SetPlanName sets the value of PlanName.
func (s *PlanCreatingRequest) SetPlanName(val string) {
	s.PlanName = val
}

// SetDescription sets the value of Description.
func (s *PlanCreatingRequest) SetDescription(val *NilString) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *PlanCreatingRequest) SetAmount(val string) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PlanCreatingRequest) SetTax(val OptString) {
	s.Tax = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *PlanCreatingRequest) SetIntervalPattern(val OptPlanCreatingRequestIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *PlanCreatingRequest) SetIntervalCount(val OptPlanCreatingRequestIntervalCount) {
	s.IntervalCount = val
}

// 課金間隔数\
// 課金間隔（`interval_pattern`）を指定した場合必須です。
// 省略した場合、`1`が設定されます。
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type PlanCreatingRequestIntervalCount string

const (
	PlanCreatingRequestIntervalCount1 PlanCreatingRequestIntervalCount = "1"
	PlanCreatingRequestIntervalCount2 PlanCreatingRequestIntervalCount = "2"
	PlanCreatingRequestIntervalCount3 PlanCreatingRequestIntervalCount = "3"
	PlanCreatingRequestIntervalCount6 PlanCreatingRequestIntervalCount = "6"
)

// AllValues returns all PlanCreatingRequestIntervalCount values.
func (PlanCreatingRequestIntervalCount) AllValues() []PlanCreatingRequestIntervalCount {
	return []PlanCreatingRequestIntervalCount{
		PlanCreatingRequestIntervalCount1,
		PlanCreatingRequestIntervalCount2,
		PlanCreatingRequestIntervalCount3,
		PlanCreatingRequestIntervalCount6,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanCreatingRequestIntervalCount) MarshalText() ([]byte, error) {
	switch s {
	case PlanCreatingRequestIntervalCount1:
		return []byte(s), nil
	case PlanCreatingRequestIntervalCount2:
		return []byte(s), nil
	case PlanCreatingRequestIntervalCount3:
		return []byte(s), nil
	case PlanCreatingRequestIntervalCount6:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanCreatingRequestIntervalCount) UnmarshalText(data []byte) error {
	switch PlanCreatingRequestIntervalCount(data) {
	case PlanCreatingRequestIntervalCount1:
		*s = PlanCreatingRequestIntervalCount1
		return nil
	case PlanCreatingRequestIntervalCount2:
		*s = PlanCreatingRequestIntervalCount2
		return nil
	case PlanCreatingRequestIntervalCount3:
		*s = PlanCreatingRequestIntervalCount3
		return nil
	case PlanCreatingRequestIntervalCount6:
		*s = PlanCreatingRequestIntervalCount6
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔\
// 課金間隔数（`interval_count`）を指定した場合必須です。
// 省略した場合、`month`が設定されます。
// - `month`：月
// - `year`：年.
type PlanCreatingRequestIntervalPattern string

const (
	PlanCreatingRequestIntervalPatternMonth PlanCreatingRequestIntervalPattern = "month"
	PlanCreatingRequestIntervalPatternYear  PlanCreatingRequestIntervalPattern = "year"
)

// AllValues returns all PlanCreatingRequestIntervalPattern values.
func (PlanCreatingRequestIntervalPattern) AllValues() []PlanCreatingRequestIntervalPattern {
	return []PlanCreatingRequestIntervalPattern{
		PlanCreatingRequestIntervalPatternMonth,
		PlanCreatingRequestIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanCreatingRequestIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case PlanCreatingRequestIntervalPatternMonth:
		return []byte(s), nil
	case PlanCreatingRequestIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanCreatingRequestIntervalPattern) UnmarshalText(data []byte) error {
	switch PlanCreatingRequestIntervalPattern(data) {
	case PlanCreatingRequestIntervalPatternMonth:
		*s = PlanCreatingRequestIntervalPatternMonth
		return nil
	case PlanCreatingRequestIntervalPatternYear:
		*s = PlanCreatingRequestIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Plan.Creating.Response
type PlanCreatingResponse struct {
	// プランID.
	ID OptString `json:"id"`
	// プラン名.
	PlanName OptString `json:"plan_name"`
	// プランの説明.
	Description OptNilString `json:"description"`
	ShopID      OptString    `json:"shop_id"`
	// 利用金額.
	Amount OptInt64 `json:"amount"`
	// 税送料.
	Tax OptInt64 `json:"tax"`
	// 合計金額\
	// 利用金額と税送料の合計金額です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 課金間隔
	// - `month`：月
	// - `year`：年.
	IntervalPattern OptPlanCreatingResponseIntervalPattern `json:"interval_pattern"`
	// 課金間隔数
	// - `1`：月次／年次の課金
	// - `2`：2ヶ月に1回の課金
	// - `3`：3ヶ月に1回の課金
	// - `6`：6ヶ月に1回の課金.
	IntervalCount OptPlanCreatingResponseIntervalCount `json:"interval_count"`
	// 利用済みフラグ\
	// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
	// - `0`：このプランを用いたサブスクリプションはまだ存在しない
	// - `1`：このプランを用いたサブスクリプションが存在する.
	UsedFlag   OptPlanCreatingResponseUsedFlag   `json:"used_flag"`
	DeleteFlag OptPlanCreatingResponseDeleteFlag `json:"delete_flag"`
	Created    OptString                         `json:"created"`
	Updated    *NilString                        `json:"updated"`
}

// GetID returns the value of ID.
func (s *PlanCreatingResponse) GetID() OptString {
	return s.ID
}

// GetPlanName returns the value of PlanName.
func (s *PlanCreatingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetDescription returns the value of Description.
func (s *PlanCreatingResponse) GetDescription() OptNilString {
	return s.Description
}

// GetShopID returns the value of ShopID.
func (s *PlanCreatingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetAmount returns the value of Amount.
func (s *PlanCreatingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PlanCreatingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PlanCreatingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *PlanCreatingResponse) GetIntervalPattern() OptPlanCreatingResponseIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *PlanCreatingResponse) GetIntervalCount() OptPlanCreatingResponseIntervalCount {
	return s.IntervalCount
}

// GetUsedFlag returns the value of UsedFlag.
func (s *PlanCreatingResponse) GetUsedFlag() OptPlanCreatingResponseUsedFlag {
	return s.UsedFlag
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PlanCreatingResponse) GetDeleteFlag() OptPlanCreatingResponseDeleteFlag {
	return s.DeleteFlag
}

// GetCreated returns the value of Created.
func (s *PlanCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlanCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PlanCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetPlanName sets the value of PlanName.
func (s *PlanCreatingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetDescription sets the value of Description.
func (s *PlanCreatingResponse) SetDescription(val OptNilString) {
	s.Description = val
}

// SetShopID sets the value of ShopID.
func (s *PlanCreatingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetAmount sets the value of Amount.
func (s *PlanCreatingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PlanCreatingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PlanCreatingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *PlanCreatingResponse) SetIntervalPattern(val OptPlanCreatingResponseIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *PlanCreatingResponse) SetIntervalCount(val OptPlanCreatingResponseIntervalCount) {
	s.IntervalCount = val
}

// SetUsedFlag sets the value of UsedFlag.
func (s *PlanCreatingResponse) SetUsedFlag(val OptPlanCreatingResponseUsedFlag) {
	s.UsedFlag = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PlanCreatingResponse) SetDeleteFlag(val OptPlanCreatingResponseDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreated sets the value of Created.
func (s *PlanCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlanCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PlanCreatingResponse) createPlanRes() {}

// 削除フラグ.
type PlanCreatingResponseDeleteFlag string

const (
	PlanCreatingResponseDeleteFlag1 PlanCreatingResponseDeleteFlag = "1"
	PlanCreatingResponseDeleteFlag0 PlanCreatingResponseDeleteFlag = "0"
)

// AllValues returns all PlanCreatingResponseDeleteFlag values.
func (PlanCreatingResponseDeleteFlag) AllValues() []PlanCreatingResponseDeleteFlag {
	return []PlanCreatingResponseDeleteFlag{
		PlanCreatingResponseDeleteFlag1,
		PlanCreatingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanCreatingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanCreatingResponseDeleteFlag1:
		return []byte(s), nil
	case PlanCreatingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanCreatingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch PlanCreatingResponseDeleteFlag(data) {
	case PlanCreatingResponseDeleteFlag1:
		*s = PlanCreatingResponseDeleteFlag1
		return nil
	case PlanCreatingResponseDeleteFlag0:
		*s = PlanCreatingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔数
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type PlanCreatingResponseIntervalCount float64

const (
	PlanCreatingResponseIntervalCount1 PlanCreatingResponseIntervalCount = 1
	PlanCreatingResponseIntervalCount2 PlanCreatingResponseIntervalCount = 2
	PlanCreatingResponseIntervalCount3 PlanCreatingResponseIntervalCount = 3
	PlanCreatingResponseIntervalCount6 PlanCreatingResponseIntervalCount = 6
)

// AllValues returns all PlanCreatingResponseIntervalCount values.
func (PlanCreatingResponseIntervalCount) AllValues() []PlanCreatingResponseIntervalCount {
	return []PlanCreatingResponseIntervalCount{
		PlanCreatingResponseIntervalCount1,
		PlanCreatingResponseIntervalCount2,
		PlanCreatingResponseIntervalCount3,
		PlanCreatingResponseIntervalCount6,
	}
}

// 課金間隔
// - `month`：月
// - `year`：年.
type PlanCreatingResponseIntervalPattern string

const (
	PlanCreatingResponseIntervalPatternMonth PlanCreatingResponseIntervalPattern = "month"
	PlanCreatingResponseIntervalPatternYear  PlanCreatingResponseIntervalPattern = "year"
)

// AllValues returns all PlanCreatingResponseIntervalPattern values.
func (PlanCreatingResponseIntervalPattern) AllValues() []PlanCreatingResponseIntervalPattern {
	return []PlanCreatingResponseIntervalPattern{
		PlanCreatingResponseIntervalPatternMonth,
		PlanCreatingResponseIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanCreatingResponseIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case PlanCreatingResponseIntervalPatternMonth:
		return []byte(s), nil
	case PlanCreatingResponseIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanCreatingResponseIntervalPattern) UnmarshalText(data []byte) error {
	switch PlanCreatingResponseIntervalPattern(data) {
	case PlanCreatingResponseIntervalPatternMonth:
		*s = PlanCreatingResponseIntervalPatternMonth
		return nil
	case PlanCreatingResponseIntervalPatternYear:
		*s = PlanCreatingResponseIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 利用済みフラグ\
// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
// - `0`：このプランを用いたサブスクリプションはまだ存在しない
// - `1`：このプランを用いたサブスクリプションが存在する.
type PlanCreatingResponseUsedFlag string

const (
	PlanCreatingResponseUsedFlag0 PlanCreatingResponseUsedFlag = "0"
	PlanCreatingResponseUsedFlag1 PlanCreatingResponseUsedFlag = "1"
)

// AllValues returns all PlanCreatingResponseUsedFlag values.
func (PlanCreatingResponseUsedFlag) AllValues() []PlanCreatingResponseUsedFlag {
	return []PlanCreatingResponseUsedFlag{
		PlanCreatingResponseUsedFlag0,
		PlanCreatingResponseUsedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanCreatingResponseUsedFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanCreatingResponseUsedFlag0:
		return []byte(s), nil
	case PlanCreatingResponseUsedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanCreatingResponseUsedFlag) UnmarshalText(data []byte) error {
	switch PlanCreatingResponseUsedFlag(data) {
	case PlanCreatingResponseUsedFlag0:
		*s = PlanCreatingResponseUsedFlag0
		return nil
	case PlanCreatingResponseUsedFlag1:
		*s = PlanCreatingResponseUsedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 削除フラグ.
type PlanDeleteFlag string

const (
	PlanDeleteFlag1 PlanDeleteFlag = "1"
	PlanDeleteFlag0 PlanDeleteFlag = "0"
)

// AllValues returns all PlanDeleteFlag values.
func (PlanDeleteFlag) AllValues() []PlanDeleteFlag {
	return []PlanDeleteFlag{
		PlanDeleteFlag1,
		PlanDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanDeleteFlag1:
		return []byte(s), nil
	case PlanDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanDeleteFlag) UnmarshalText(data []byte) error {
	switch PlanDeleteFlag(data) {
	case PlanDeleteFlag1:
		*s = PlanDeleteFlag1
		return nil
	case PlanDeleteFlag0:
		*s = PlanDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Plan.Deleting.Response
type PlanDeletingResponse struct {
	// プランID.
	ID OptString `json:"id"`
	// プラン名.
	PlanName OptString `json:"plan_name"`
	// プランの説明.
	Description OptNilString `json:"description"`
	ShopID      OptString    `json:"shop_id"`
	// 利用金額.
	Amount OptInt64 `json:"amount"`
	// 税送料.
	Tax OptInt64 `json:"tax"`
	// 合計金額\
	// 利用金額と税送料の合計金額です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 課金間隔
	// - `month`：月
	// - `year`：年.
	IntervalPattern OptPlanDeletingResponseIntervalPattern `json:"interval_pattern"`
	// 課金間隔数
	// - `1`：月次／年次の課金
	// - `2`：2ヶ月に1回の課金
	// - `3`：3ヶ月に1回の課金
	// - `6`：6ヶ月に1回の課金.
	IntervalCount OptPlanDeletingResponseIntervalCount `json:"interval_count"`
	// 利用済みフラグ\
	// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
	// - `0`：このプランを用いたサブスクリプションはまだ存在しない
	// - `1`：このプランを用いたサブスクリプションが存在する.
	UsedFlag   OptPlanDeletingResponseUsedFlag   `json:"used_flag"`
	DeleteFlag OptPlanDeletingResponseDeleteFlag `json:"delete_flag"`
	Created    OptString                         `json:"created"`
	Updated    *NilString                        `json:"updated"`
}

// GetID returns the value of ID.
func (s *PlanDeletingResponse) GetID() OptString {
	return s.ID
}

// GetPlanName returns the value of PlanName.
func (s *PlanDeletingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetDescription returns the value of Description.
func (s *PlanDeletingResponse) GetDescription() OptNilString {
	return s.Description
}

// GetShopID returns the value of ShopID.
func (s *PlanDeletingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetAmount returns the value of Amount.
func (s *PlanDeletingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PlanDeletingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PlanDeletingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *PlanDeletingResponse) GetIntervalPattern() OptPlanDeletingResponseIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *PlanDeletingResponse) GetIntervalCount() OptPlanDeletingResponseIntervalCount {
	return s.IntervalCount
}

// GetUsedFlag returns the value of UsedFlag.
func (s *PlanDeletingResponse) GetUsedFlag() OptPlanDeletingResponseUsedFlag {
	return s.UsedFlag
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PlanDeletingResponse) GetDeleteFlag() OptPlanDeletingResponseDeleteFlag {
	return s.DeleteFlag
}

// GetCreated returns the value of Created.
func (s *PlanDeletingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlanDeletingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PlanDeletingResponse) SetID(val OptString) {
	s.ID = val
}

// SetPlanName sets the value of PlanName.
func (s *PlanDeletingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetDescription sets the value of Description.
func (s *PlanDeletingResponse) SetDescription(val OptNilString) {
	s.Description = val
}

// SetShopID sets the value of ShopID.
func (s *PlanDeletingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetAmount sets the value of Amount.
func (s *PlanDeletingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PlanDeletingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PlanDeletingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *PlanDeletingResponse) SetIntervalPattern(val OptPlanDeletingResponseIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *PlanDeletingResponse) SetIntervalCount(val OptPlanDeletingResponseIntervalCount) {
	s.IntervalCount = val
}

// SetUsedFlag sets the value of UsedFlag.
func (s *PlanDeletingResponse) SetUsedFlag(val OptPlanDeletingResponseUsedFlag) {
	s.UsedFlag = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PlanDeletingResponse) SetDeleteFlag(val OptPlanDeletingResponseDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreated sets the value of Created.
func (s *PlanDeletingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlanDeletingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PlanDeletingResponse) deletePlanRes() {}

// 削除フラグ.
type PlanDeletingResponseDeleteFlag string

const (
	PlanDeletingResponseDeleteFlag1 PlanDeletingResponseDeleteFlag = "1"
	PlanDeletingResponseDeleteFlag0 PlanDeletingResponseDeleteFlag = "0"
)

// AllValues returns all PlanDeletingResponseDeleteFlag values.
func (PlanDeletingResponseDeleteFlag) AllValues() []PlanDeletingResponseDeleteFlag {
	return []PlanDeletingResponseDeleteFlag{
		PlanDeletingResponseDeleteFlag1,
		PlanDeletingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanDeletingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanDeletingResponseDeleteFlag1:
		return []byte(s), nil
	case PlanDeletingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanDeletingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch PlanDeletingResponseDeleteFlag(data) {
	case PlanDeletingResponseDeleteFlag1:
		*s = PlanDeletingResponseDeleteFlag1
		return nil
	case PlanDeletingResponseDeleteFlag0:
		*s = PlanDeletingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔数
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type PlanDeletingResponseIntervalCount float64

const (
	PlanDeletingResponseIntervalCount1 PlanDeletingResponseIntervalCount = 1
	PlanDeletingResponseIntervalCount2 PlanDeletingResponseIntervalCount = 2
	PlanDeletingResponseIntervalCount3 PlanDeletingResponseIntervalCount = 3
	PlanDeletingResponseIntervalCount6 PlanDeletingResponseIntervalCount = 6
)

// AllValues returns all PlanDeletingResponseIntervalCount values.
func (PlanDeletingResponseIntervalCount) AllValues() []PlanDeletingResponseIntervalCount {
	return []PlanDeletingResponseIntervalCount{
		PlanDeletingResponseIntervalCount1,
		PlanDeletingResponseIntervalCount2,
		PlanDeletingResponseIntervalCount3,
		PlanDeletingResponseIntervalCount6,
	}
}

// 課金間隔
// - `month`：月
// - `year`：年.
type PlanDeletingResponseIntervalPattern string

const (
	PlanDeletingResponseIntervalPatternMonth PlanDeletingResponseIntervalPattern = "month"
	PlanDeletingResponseIntervalPatternYear  PlanDeletingResponseIntervalPattern = "year"
)

// AllValues returns all PlanDeletingResponseIntervalPattern values.
func (PlanDeletingResponseIntervalPattern) AllValues() []PlanDeletingResponseIntervalPattern {
	return []PlanDeletingResponseIntervalPattern{
		PlanDeletingResponseIntervalPatternMonth,
		PlanDeletingResponseIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanDeletingResponseIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case PlanDeletingResponseIntervalPatternMonth:
		return []byte(s), nil
	case PlanDeletingResponseIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanDeletingResponseIntervalPattern) UnmarshalText(data []byte) error {
	switch PlanDeletingResponseIntervalPattern(data) {
	case PlanDeletingResponseIntervalPatternMonth:
		*s = PlanDeletingResponseIntervalPatternMonth
		return nil
	case PlanDeletingResponseIntervalPatternYear:
		*s = PlanDeletingResponseIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 利用済みフラグ\
// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
// - `0`：このプランを用いたサブスクリプションはまだ存在しない
// - `1`：このプランを用いたサブスクリプションが存在する.
type PlanDeletingResponseUsedFlag string

const (
	PlanDeletingResponseUsedFlag0 PlanDeletingResponseUsedFlag = "0"
	PlanDeletingResponseUsedFlag1 PlanDeletingResponseUsedFlag = "1"
)

// AllValues returns all PlanDeletingResponseUsedFlag values.
func (PlanDeletingResponseUsedFlag) AllValues() []PlanDeletingResponseUsedFlag {
	return []PlanDeletingResponseUsedFlag{
		PlanDeletingResponseUsedFlag0,
		PlanDeletingResponseUsedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanDeletingResponseUsedFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanDeletingResponseUsedFlag0:
		return []byte(s), nil
	case PlanDeletingResponseUsedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanDeletingResponseUsedFlag) UnmarshalText(data []byte) error {
	switch PlanDeletingResponseUsedFlag(data) {
	case PlanDeletingResponseUsedFlag0:
		*s = PlanDeletingResponseUsedFlag0
		return nil
	case PlanDeletingResponseUsedFlag1:
		*s = PlanDeletingResponseUsedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔数
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type PlanIntervalCount float64

const (
	PlanIntervalCount1 PlanIntervalCount = 1
	PlanIntervalCount2 PlanIntervalCount = 2
	PlanIntervalCount3 PlanIntervalCount = 3
	PlanIntervalCount6 PlanIntervalCount = 6
)

// AllValues returns all PlanIntervalCount values.
func (PlanIntervalCount) AllValues() []PlanIntervalCount {
	return []PlanIntervalCount{
		PlanIntervalCount1,
		PlanIntervalCount2,
		PlanIntervalCount3,
		PlanIntervalCount6,
	}
}

// 課金間隔
// - `month`：月
// - `year`：年.
type PlanIntervalPattern string

const (
	PlanIntervalPatternMonth PlanIntervalPattern = "month"
	PlanIntervalPatternYear  PlanIntervalPattern = "year"
)

// AllValues returns all PlanIntervalPattern values.
func (PlanIntervalPattern) AllValues() []PlanIntervalPattern {
	return []PlanIntervalPattern{
		PlanIntervalPatternMonth,
		PlanIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case PlanIntervalPatternMonth:
		return []byte(s), nil
	case PlanIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanIntervalPattern) UnmarshalText(data []byte) error {
	switch PlanIntervalPattern(data) {
	case PlanIntervalPatternMonth:
		*s = PlanIntervalPatternMonth
		return nil
	case PlanIntervalPatternYear:
		*s = PlanIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #/components/schemas/Plan.ListRetrieving.Response
type PlanListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString `json:"link_previous"`
	List         []Plan       `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *PlanListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *PlanListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *PlanListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *PlanListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *PlanListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *PlanListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *PlanListRetrievingResponse) GetList() []Plan {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *PlanListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *PlanListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *PlanListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *PlanListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *PlanListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *PlanListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *PlanListRetrievingResponse) SetList(val []Plan) {
	s.List = val
}

func (*PlanListRetrievingResponse) retrievePlanListRes() {}

// Ref: #/components/schemas/Plan.Retrieving.Response
type PlanRetrievingResponse struct {
	// プランID.
	ID OptString `json:"id"`
	// プラン名.
	PlanName OptString `json:"plan_name"`
	// プランの説明.
	Description OptNilString `json:"description"`
	ShopID      OptString    `json:"shop_id"`
	// 利用金額.
	Amount OptInt64 `json:"amount"`
	// 税送料.
	Tax OptInt64 `json:"tax"`
	// 合計金額\
	// 利用金額と税送料の合計金額です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 課金間隔
	// - `month`：月
	// - `year`：年.
	IntervalPattern OptPlanRetrievingResponseIntervalPattern `json:"interval_pattern"`
	// 課金間隔数
	// - `1`：月次／年次の課金
	// - `2`：2ヶ月に1回の課金
	// - `3`：3ヶ月に1回の課金
	// - `6`：6ヶ月に1回の課金.
	IntervalCount OptPlanRetrievingResponseIntervalCount `json:"interval_count"`
	// 利用済みフラグ\
	// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
	// - `0`：このプランを用いたサブスクリプションはまだ存在しない
	// - `1`：このプランを用いたサブスクリプションが存在する.
	UsedFlag   OptPlanRetrievingResponseUsedFlag   `json:"used_flag"`
	DeleteFlag OptPlanRetrievingResponseDeleteFlag `json:"delete_flag"`
	Created    OptString                           `json:"created"`
	Updated    *NilString                          `json:"updated"`
}

// GetID returns the value of ID.
func (s *PlanRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetPlanName returns the value of PlanName.
func (s *PlanRetrievingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetDescription returns the value of Description.
func (s *PlanRetrievingResponse) GetDescription() OptNilString {
	return s.Description
}

// GetShopID returns the value of ShopID.
func (s *PlanRetrievingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetAmount returns the value of Amount.
func (s *PlanRetrievingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PlanRetrievingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PlanRetrievingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *PlanRetrievingResponse) GetIntervalPattern() OptPlanRetrievingResponseIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *PlanRetrievingResponse) GetIntervalCount() OptPlanRetrievingResponseIntervalCount {
	return s.IntervalCount
}

// GetUsedFlag returns the value of UsedFlag.
func (s *PlanRetrievingResponse) GetUsedFlag() OptPlanRetrievingResponseUsedFlag {
	return s.UsedFlag
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PlanRetrievingResponse) GetDeleteFlag() OptPlanRetrievingResponseDeleteFlag {
	return s.DeleteFlag
}

// GetCreated returns the value of Created.
func (s *PlanRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlanRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PlanRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetPlanName sets the value of PlanName.
func (s *PlanRetrievingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetDescription sets the value of Description.
func (s *PlanRetrievingResponse) SetDescription(val OptNilString) {
	s.Description = val
}

// SetShopID sets the value of ShopID.
func (s *PlanRetrievingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetAmount sets the value of Amount.
func (s *PlanRetrievingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PlanRetrievingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PlanRetrievingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *PlanRetrievingResponse) SetIntervalPattern(val OptPlanRetrievingResponseIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *PlanRetrievingResponse) SetIntervalCount(val OptPlanRetrievingResponseIntervalCount) {
	s.IntervalCount = val
}

// SetUsedFlag sets the value of UsedFlag.
func (s *PlanRetrievingResponse) SetUsedFlag(val OptPlanRetrievingResponseUsedFlag) {
	s.UsedFlag = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PlanRetrievingResponse) SetDeleteFlag(val OptPlanRetrievingResponseDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreated sets the value of Created.
func (s *PlanRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlanRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PlanRetrievingResponse) retrievePlanRes() {}

// 削除フラグ.
type PlanRetrievingResponseDeleteFlag string

const (
	PlanRetrievingResponseDeleteFlag1 PlanRetrievingResponseDeleteFlag = "1"
	PlanRetrievingResponseDeleteFlag0 PlanRetrievingResponseDeleteFlag = "0"
)

// AllValues returns all PlanRetrievingResponseDeleteFlag values.
func (PlanRetrievingResponseDeleteFlag) AllValues() []PlanRetrievingResponseDeleteFlag {
	return []PlanRetrievingResponseDeleteFlag{
		PlanRetrievingResponseDeleteFlag1,
		PlanRetrievingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanRetrievingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanRetrievingResponseDeleteFlag1:
		return []byte(s), nil
	case PlanRetrievingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanRetrievingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch PlanRetrievingResponseDeleteFlag(data) {
	case PlanRetrievingResponseDeleteFlag1:
		*s = PlanRetrievingResponseDeleteFlag1
		return nil
	case PlanRetrievingResponseDeleteFlag0:
		*s = PlanRetrievingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔数
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type PlanRetrievingResponseIntervalCount float64

const (
	PlanRetrievingResponseIntervalCount1 PlanRetrievingResponseIntervalCount = 1
	PlanRetrievingResponseIntervalCount2 PlanRetrievingResponseIntervalCount = 2
	PlanRetrievingResponseIntervalCount3 PlanRetrievingResponseIntervalCount = 3
	PlanRetrievingResponseIntervalCount6 PlanRetrievingResponseIntervalCount = 6
)

// AllValues returns all PlanRetrievingResponseIntervalCount values.
func (PlanRetrievingResponseIntervalCount) AllValues() []PlanRetrievingResponseIntervalCount {
	return []PlanRetrievingResponseIntervalCount{
		PlanRetrievingResponseIntervalCount1,
		PlanRetrievingResponseIntervalCount2,
		PlanRetrievingResponseIntervalCount3,
		PlanRetrievingResponseIntervalCount6,
	}
}

// 課金間隔
// - `month`：月
// - `year`：年.
type PlanRetrievingResponseIntervalPattern string

const (
	PlanRetrievingResponseIntervalPatternMonth PlanRetrievingResponseIntervalPattern = "month"
	PlanRetrievingResponseIntervalPatternYear  PlanRetrievingResponseIntervalPattern = "year"
)

// AllValues returns all PlanRetrievingResponseIntervalPattern values.
func (PlanRetrievingResponseIntervalPattern) AllValues() []PlanRetrievingResponseIntervalPattern {
	return []PlanRetrievingResponseIntervalPattern{
		PlanRetrievingResponseIntervalPatternMonth,
		PlanRetrievingResponseIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanRetrievingResponseIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case PlanRetrievingResponseIntervalPatternMonth:
		return []byte(s), nil
	case PlanRetrievingResponseIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanRetrievingResponseIntervalPattern) UnmarshalText(data []byte) error {
	switch PlanRetrievingResponseIntervalPattern(data) {
	case PlanRetrievingResponseIntervalPatternMonth:
		*s = PlanRetrievingResponseIntervalPatternMonth
		return nil
	case PlanRetrievingResponseIntervalPatternYear:
		*s = PlanRetrievingResponseIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 利用済みフラグ\
// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
// - `0`：このプランを用いたサブスクリプションはまだ存在しない
// - `1`：このプランを用いたサブスクリプションが存在する.
type PlanRetrievingResponseUsedFlag string

const (
	PlanRetrievingResponseUsedFlag0 PlanRetrievingResponseUsedFlag = "0"
	PlanRetrievingResponseUsedFlag1 PlanRetrievingResponseUsedFlag = "1"
)

// AllValues returns all PlanRetrievingResponseUsedFlag values.
func (PlanRetrievingResponseUsedFlag) AllValues() []PlanRetrievingResponseUsedFlag {
	return []PlanRetrievingResponseUsedFlag{
		PlanRetrievingResponseUsedFlag0,
		PlanRetrievingResponseUsedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanRetrievingResponseUsedFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanRetrievingResponseUsedFlag0:
		return []byte(s), nil
	case PlanRetrievingResponseUsedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanRetrievingResponseUsedFlag) UnmarshalText(data []byte) error {
	switch PlanRetrievingResponseUsedFlag(data) {
	case PlanRetrievingResponseUsedFlag0:
		*s = PlanRetrievingResponseUsedFlag0
		return nil
	case PlanRetrievingResponseUsedFlag1:
		*s = PlanRetrievingResponseUsedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Plan.Updating.Request
type PlanUpdatingRequest struct {
	PlanName        OptString                             `json:"plan_name"`
	Description     *NilString                            `json:"description"`
	Amount          OptString                             `json:"amount"`
	Tax             OptString                             `json:"tax"`
	IntervalPattern OptPlanUpdatingRequestIntervalPattern `json:"interval_pattern"`
	IntervalCount   OptPlanUpdatingRequestIntervalCount   `json:"interval_count"`
}

// GetPlanName returns the value of PlanName.
func (s *PlanUpdatingRequest) GetPlanName() OptString {
	return s.PlanName
}

// GetDescription returns the value of Description.
func (s *PlanUpdatingRequest) GetDescription() *NilString {
	return s.Description
}

// GetAmount returns the value of Amount.
func (s *PlanUpdatingRequest) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PlanUpdatingRequest) GetTax() OptString {
	return s.Tax
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *PlanUpdatingRequest) GetIntervalPattern() OptPlanUpdatingRequestIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *PlanUpdatingRequest) GetIntervalCount() OptPlanUpdatingRequestIntervalCount {
	return s.IntervalCount
}

// SetPlanName sets the value of PlanName.
func (s *PlanUpdatingRequest) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetDescription sets the value of Description.
func (s *PlanUpdatingRequest) SetDescription(val *NilString) {
	s.Description = val
}

// SetAmount sets the value of Amount.
func (s *PlanUpdatingRequest) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PlanUpdatingRequest) SetTax(val OptString) {
	s.Tax = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *PlanUpdatingRequest) SetIntervalPattern(val OptPlanUpdatingRequestIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *PlanUpdatingRequest) SetIntervalCount(val OptPlanUpdatingRequestIntervalCount) {
	s.IntervalCount = val
}

// 課金間隔数\
// 課金間隔（`interval_pattern`）を指定した場合必須です。
// 省略した場合、`1`が設定されます。
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type PlanUpdatingRequestIntervalCount string

const (
	PlanUpdatingRequestIntervalCount1 PlanUpdatingRequestIntervalCount = "1"
	PlanUpdatingRequestIntervalCount2 PlanUpdatingRequestIntervalCount = "2"
	PlanUpdatingRequestIntervalCount3 PlanUpdatingRequestIntervalCount = "3"
	PlanUpdatingRequestIntervalCount6 PlanUpdatingRequestIntervalCount = "6"
)

// AllValues returns all PlanUpdatingRequestIntervalCount values.
func (PlanUpdatingRequestIntervalCount) AllValues() []PlanUpdatingRequestIntervalCount {
	return []PlanUpdatingRequestIntervalCount{
		PlanUpdatingRequestIntervalCount1,
		PlanUpdatingRequestIntervalCount2,
		PlanUpdatingRequestIntervalCount3,
		PlanUpdatingRequestIntervalCount6,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanUpdatingRequestIntervalCount) MarshalText() ([]byte, error) {
	switch s {
	case PlanUpdatingRequestIntervalCount1:
		return []byte(s), nil
	case PlanUpdatingRequestIntervalCount2:
		return []byte(s), nil
	case PlanUpdatingRequestIntervalCount3:
		return []byte(s), nil
	case PlanUpdatingRequestIntervalCount6:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanUpdatingRequestIntervalCount) UnmarshalText(data []byte) error {
	switch PlanUpdatingRequestIntervalCount(data) {
	case PlanUpdatingRequestIntervalCount1:
		*s = PlanUpdatingRequestIntervalCount1
		return nil
	case PlanUpdatingRequestIntervalCount2:
		*s = PlanUpdatingRequestIntervalCount2
		return nil
	case PlanUpdatingRequestIntervalCount3:
		*s = PlanUpdatingRequestIntervalCount3
		return nil
	case PlanUpdatingRequestIntervalCount6:
		*s = PlanUpdatingRequestIntervalCount6
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔\
// 課金間隔数（`interval_count`）を指定した場合必須です。
// 省略した場合、`month`が設定されます。
// - `month`：月
// - `year`：年.
type PlanUpdatingRequestIntervalPattern string

const (
	PlanUpdatingRequestIntervalPatternMonth PlanUpdatingRequestIntervalPattern = "month"
	PlanUpdatingRequestIntervalPatternYear  PlanUpdatingRequestIntervalPattern = "year"
)

// AllValues returns all PlanUpdatingRequestIntervalPattern values.
func (PlanUpdatingRequestIntervalPattern) AllValues() []PlanUpdatingRequestIntervalPattern {
	return []PlanUpdatingRequestIntervalPattern{
		PlanUpdatingRequestIntervalPatternMonth,
		PlanUpdatingRequestIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanUpdatingRequestIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case PlanUpdatingRequestIntervalPatternMonth:
		return []byte(s), nil
	case PlanUpdatingRequestIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanUpdatingRequestIntervalPattern) UnmarshalText(data []byte) error {
	switch PlanUpdatingRequestIntervalPattern(data) {
	case PlanUpdatingRequestIntervalPatternMonth:
		*s = PlanUpdatingRequestIntervalPatternMonth
		return nil
	case PlanUpdatingRequestIntervalPatternYear:
		*s = PlanUpdatingRequestIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Plan.Updating.Response
type PlanUpdatingResponse struct {
	// プランID.
	ID OptString `json:"id"`
	// プラン名.
	PlanName OptString `json:"plan_name"`
	// プランの説明.
	Description OptNilString `json:"description"`
	ShopID      OptString    `json:"shop_id"`
	// 利用金額.
	Amount OptInt64 `json:"amount"`
	// 税送料.
	Tax OptInt64 `json:"tax"`
	// 合計金額\
	// 利用金額と税送料の合計金額です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 課金間隔
	// - `month`：月
	// - `year`：年.
	IntervalPattern OptPlanUpdatingResponseIntervalPattern `json:"interval_pattern"`
	// 課金間隔数
	// - `1`：月次／年次の課金
	// - `2`：2ヶ月に1回の課金
	// - `3`：3ヶ月に1回の課金
	// - `6`：6ヶ月に1回の課金.
	IntervalCount OptPlanUpdatingResponseIntervalCount `json:"interval_count"`
	// 利用済みフラグ\
	// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
	// - `0`：このプランを用いたサブスクリプションはまだ存在しない
	// - `1`：このプランを用いたサブスクリプションが存在する.
	UsedFlag   OptPlanUpdatingResponseUsedFlag   `json:"used_flag"`
	DeleteFlag OptPlanUpdatingResponseDeleteFlag `json:"delete_flag"`
	Created    OptString                         `json:"created"`
	Updated    *NilString                        `json:"updated"`
}

// GetID returns the value of ID.
func (s *PlanUpdatingResponse) GetID() OptString {
	return s.ID
}

// GetPlanName returns the value of PlanName.
func (s *PlanUpdatingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetDescription returns the value of Description.
func (s *PlanUpdatingResponse) GetDescription() OptNilString {
	return s.Description
}

// GetShopID returns the value of ShopID.
func (s *PlanUpdatingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetAmount returns the value of Amount.
func (s *PlanUpdatingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *PlanUpdatingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PlanUpdatingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *PlanUpdatingResponse) GetIntervalPattern() OptPlanUpdatingResponseIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *PlanUpdatingResponse) GetIntervalCount() OptPlanUpdatingResponseIntervalCount {
	return s.IntervalCount
}

// GetUsedFlag returns the value of UsedFlag.
func (s *PlanUpdatingResponse) GetUsedFlag() OptPlanUpdatingResponseUsedFlag {
	return s.UsedFlag
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *PlanUpdatingResponse) GetDeleteFlag() OptPlanUpdatingResponseDeleteFlag {
	return s.DeleteFlag
}

// GetCreated returns the value of Created.
func (s *PlanUpdatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlanUpdatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PlanUpdatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetPlanName sets the value of PlanName.
func (s *PlanUpdatingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetDescription sets the value of Description.
func (s *PlanUpdatingResponse) SetDescription(val OptNilString) {
	s.Description = val
}

// SetShopID sets the value of ShopID.
func (s *PlanUpdatingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetAmount sets the value of Amount.
func (s *PlanUpdatingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *PlanUpdatingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PlanUpdatingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *PlanUpdatingResponse) SetIntervalPattern(val OptPlanUpdatingResponseIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *PlanUpdatingResponse) SetIntervalCount(val OptPlanUpdatingResponseIntervalCount) {
	s.IntervalCount = val
}

// SetUsedFlag sets the value of UsedFlag.
func (s *PlanUpdatingResponse) SetUsedFlag(val OptPlanUpdatingResponseUsedFlag) {
	s.UsedFlag = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *PlanUpdatingResponse) SetDeleteFlag(val OptPlanUpdatingResponseDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreated sets the value of Created.
func (s *PlanUpdatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlanUpdatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PlanUpdatingResponse) updatePlanRes() {}

// 削除フラグ.
type PlanUpdatingResponseDeleteFlag string

const (
	PlanUpdatingResponseDeleteFlag1 PlanUpdatingResponseDeleteFlag = "1"
	PlanUpdatingResponseDeleteFlag0 PlanUpdatingResponseDeleteFlag = "0"
)

// AllValues returns all PlanUpdatingResponseDeleteFlag values.
func (PlanUpdatingResponseDeleteFlag) AllValues() []PlanUpdatingResponseDeleteFlag {
	return []PlanUpdatingResponseDeleteFlag{
		PlanUpdatingResponseDeleteFlag1,
		PlanUpdatingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanUpdatingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanUpdatingResponseDeleteFlag1:
		return []byte(s), nil
	case PlanUpdatingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanUpdatingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch PlanUpdatingResponseDeleteFlag(data) {
	case PlanUpdatingResponseDeleteFlag1:
		*s = PlanUpdatingResponseDeleteFlag1
		return nil
	case PlanUpdatingResponseDeleteFlag0:
		*s = PlanUpdatingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔数
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type PlanUpdatingResponseIntervalCount float64

const (
	PlanUpdatingResponseIntervalCount1 PlanUpdatingResponseIntervalCount = 1
	PlanUpdatingResponseIntervalCount2 PlanUpdatingResponseIntervalCount = 2
	PlanUpdatingResponseIntervalCount3 PlanUpdatingResponseIntervalCount = 3
	PlanUpdatingResponseIntervalCount6 PlanUpdatingResponseIntervalCount = 6
)

// AllValues returns all PlanUpdatingResponseIntervalCount values.
func (PlanUpdatingResponseIntervalCount) AllValues() []PlanUpdatingResponseIntervalCount {
	return []PlanUpdatingResponseIntervalCount{
		PlanUpdatingResponseIntervalCount1,
		PlanUpdatingResponseIntervalCount2,
		PlanUpdatingResponseIntervalCount3,
		PlanUpdatingResponseIntervalCount6,
	}
}

// 課金間隔
// - `month`：月
// - `year`：年.
type PlanUpdatingResponseIntervalPattern string

const (
	PlanUpdatingResponseIntervalPatternMonth PlanUpdatingResponseIntervalPattern = "month"
	PlanUpdatingResponseIntervalPatternYear  PlanUpdatingResponseIntervalPattern = "year"
)

// AllValues returns all PlanUpdatingResponseIntervalPattern values.
func (PlanUpdatingResponseIntervalPattern) AllValues() []PlanUpdatingResponseIntervalPattern {
	return []PlanUpdatingResponseIntervalPattern{
		PlanUpdatingResponseIntervalPatternMonth,
		PlanUpdatingResponseIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanUpdatingResponseIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case PlanUpdatingResponseIntervalPatternMonth:
		return []byte(s), nil
	case PlanUpdatingResponseIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanUpdatingResponseIntervalPattern) UnmarshalText(data []byte) error {
	switch PlanUpdatingResponseIntervalPattern(data) {
	case PlanUpdatingResponseIntervalPatternMonth:
		*s = PlanUpdatingResponseIntervalPatternMonth
		return nil
	case PlanUpdatingResponseIntervalPatternYear:
		*s = PlanUpdatingResponseIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 利用済みフラグ\
// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
// - `0`：このプランを用いたサブスクリプションはまだ存在しない
// - `1`：このプランを用いたサブスクリプションが存在する.
type PlanUpdatingResponseUsedFlag string

const (
	PlanUpdatingResponseUsedFlag0 PlanUpdatingResponseUsedFlag = "0"
	PlanUpdatingResponseUsedFlag1 PlanUpdatingResponseUsedFlag = "1"
)

// AllValues returns all PlanUpdatingResponseUsedFlag values.
func (PlanUpdatingResponseUsedFlag) AllValues() []PlanUpdatingResponseUsedFlag {
	return []PlanUpdatingResponseUsedFlag{
		PlanUpdatingResponseUsedFlag0,
		PlanUpdatingResponseUsedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanUpdatingResponseUsedFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanUpdatingResponseUsedFlag0:
		return []byte(s), nil
	case PlanUpdatingResponseUsedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanUpdatingResponseUsedFlag) UnmarshalText(data []byte) error {
	switch PlanUpdatingResponseUsedFlag(data) {
	case PlanUpdatingResponseUsedFlag0:
		*s = PlanUpdatingResponseUsedFlag0
		return nil
	case PlanUpdatingResponseUsedFlag1:
		*s = PlanUpdatingResponseUsedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 利用済みフラグ\
// このプランを用いたサブスクリプション（解約含む）が1つ以上存在する場合`1`を返し、存在しない場合`0`を返します。
// - `0`：このプランを用いたサブスクリプションはまだ存在しない
// - `1`：このプランを用いたサブスクリプションが存在する.
type PlanUsedFlag string

const (
	PlanUsedFlag0 PlanUsedFlag = "0"
	PlanUsedFlag1 PlanUsedFlag = "1"
)

// AllValues returns all PlanUsedFlag values.
func (PlanUsedFlag) AllValues() []PlanUsedFlag {
	return []PlanUsedFlag{
		PlanUsedFlag0,
		PlanUsedFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlanUsedFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlanUsedFlag0:
		return []byte(s), nil
	case PlanUsedFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlanUsedFlag) UnmarshalText(data []byte) error {
	switch PlanUsedFlag(data) {
	case PlanUsedFlag0:
		*s = PlanUsedFlag0
		return nil
	case PlanUsedFlag1:
		*s = PlanUsedFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlatformAccountListItem
type PlatformAccountListItem struct {
	ID                    OptString            `json:"id"`
	AccountID             OptInt               `json:"account_id"`
	ShopID                OptString            `json:"shop_id"`
	DepositAmount         *NilInt              `json:"deposit_amount"`
	DepositDate           *NilString           `json:"deposit_date"`
	ScheduledDepositDate  *NilString           `json:"scheduled_deposit_date"`
	AggregateTermStart    *NilString           `json:"aggregate_term_start"`
	AggregateTermEnd      *NilString           `json:"aggregate_term_end"`
	PaymentDeadline       *NilString           `json:"payment_deadline"`
	PaymentCompletionDate *NilString           `json:"payment_completion_date"`
	StatusCode            OptDepositStatusCode `json:"status_code"`
	Count                 *NilInt              `json:"count"`
	SettlementAmount      *NilInt              `json:"settlement_amount"`
	BankTransferFee       *NilInt              `json:"bank_transfer_fee"`
	TotalAmount           *NilInt              `json:"total_amount"`
	FeeAmount             *NilInt              `json:"fee_amount"`
	PlatformFeeAmount     *NilInt              `json:"platform_fee_amount"`
	PlatformFeeTaxAmount  *NilInt              `json:"platform_fee_tax_amount"`
	TaxAmount             *NilInt              `json:"tax_amount"`
	Created               OptString            `json:"created"`
	Updated               *NilString           `json:"updated"`
	Verified              OptBool              `json:"verified"`
}

// GetID returns the value of ID.
func (s *PlatformAccountListItem) GetID() OptString {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *PlatformAccountListItem) GetAccountID() OptInt {
	return s.AccountID
}

// GetShopID returns the value of ShopID.
func (s *PlatformAccountListItem) GetShopID() OptString {
	return s.ShopID
}

// GetDepositAmount returns the value of DepositAmount.
func (s *PlatformAccountListItem) GetDepositAmount() *NilInt {
	return s.DepositAmount
}

// GetDepositDate returns the value of DepositDate.
func (s *PlatformAccountListItem) GetDepositDate() *NilString {
	return s.DepositDate
}

// GetScheduledDepositDate returns the value of ScheduledDepositDate.
func (s *PlatformAccountListItem) GetScheduledDepositDate() *NilString {
	return s.ScheduledDepositDate
}

// GetAggregateTermStart returns the value of AggregateTermStart.
func (s *PlatformAccountListItem) GetAggregateTermStart() *NilString {
	return s.AggregateTermStart
}

// GetAggregateTermEnd returns the value of AggregateTermEnd.
func (s *PlatformAccountListItem) GetAggregateTermEnd() *NilString {
	return s.AggregateTermEnd
}

// GetPaymentDeadline returns the value of PaymentDeadline.
func (s *PlatformAccountListItem) GetPaymentDeadline() *NilString {
	return s.PaymentDeadline
}

// GetPaymentCompletionDate returns the value of PaymentCompletionDate.
func (s *PlatformAccountListItem) GetPaymentCompletionDate() *NilString {
	return s.PaymentCompletionDate
}

// GetStatusCode returns the value of StatusCode.
func (s *PlatformAccountListItem) GetStatusCode() OptDepositStatusCode {
	return s.StatusCode
}

// GetCount returns the value of Count.
func (s *PlatformAccountListItem) GetCount() *NilInt {
	return s.Count
}

// GetSettlementAmount returns the value of SettlementAmount.
func (s *PlatformAccountListItem) GetSettlementAmount() *NilInt {
	return s.SettlementAmount
}

// GetBankTransferFee returns the value of BankTransferFee.
func (s *PlatformAccountListItem) GetBankTransferFee() *NilInt {
	return s.BankTransferFee
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PlatformAccountListItem) GetTotalAmount() *NilInt {
	return s.TotalAmount
}

// GetFeeAmount returns the value of FeeAmount.
func (s *PlatformAccountListItem) GetFeeAmount() *NilInt {
	return s.FeeAmount
}

// GetPlatformFeeAmount returns the value of PlatformFeeAmount.
func (s *PlatformAccountListItem) GetPlatformFeeAmount() *NilInt {
	return s.PlatformFeeAmount
}

// GetPlatformFeeTaxAmount returns the value of PlatformFeeTaxAmount.
func (s *PlatformAccountListItem) GetPlatformFeeTaxAmount() *NilInt {
	return s.PlatformFeeTaxAmount
}

// GetTaxAmount returns the value of TaxAmount.
func (s *PlatformAccountListItem) GetTaxAmount() *NilInt {
	return s.TaxAmount
}

// GetCreated returns the value of Created.
func (s *PlatformAccountListItem) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlatformAccountListItem) GetUpdated() *NilString {
	return s.Updated
}

// GetVerified returns the value of Verified.
func (s *PlatformAccountListItem) GetVerified() OptBool {
	return s.Verified
}

// SetID sets the value of ID.
func (s *PlatformAccountListItem) SetID(val OptString) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *PlatformAccountListItem) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetShopID sets the value of ShopID.
func (s *PlatformAccountListItem) SetShopID(val OptString) {
	s.ShopID = val
}

// SetDepositAmount sets the value of DepositAmount.
func (s *PlatformAccountListItem) SetDepositAmount(val *NilInt) {
	s.DepositAmount = val
}

// SetDepositDate sets the value of DepositDate.
func (s *PlatformAccountListItem) SetDepositDate(val *NilString) {
	s.DepositDate = val
}

// SetScheduledDepositDate sets the value of ScheduledDepositDate.
func (s *PlatformAccountListItem) SetScheduledDepositDate(val *NilString) {
	s.ScheduledDepositDate = val
}

// SetAggregateTermStart sets the value of AggregateTermStart.
func (s *PlatformAccountListItem) SetAggregateTermStart(val *NilString) {
	s.AggregateTermStart = val
}

// SetAggregateTermEnd sets the value of AggregateTermEnd.
func (s *PlatformAccountListItem) SetAggregateTermEnd(val *NilString) {
	s.AggregateTermEnd = val
}

// SetPaymentDeadline sets the value of PaymentDeadline.
func (s *PlatformAccountListItem) SetPaymentDeadline(val *NilString) {
	s.PaymentDeadline = val
}

// SetPaymentCompletionDate sets the value of PaymentCompletionDate.
func (s *PlatformAccountListItem) SetPaymentCompletionDate(val *NilString) {
	s.PaymentCompletionDate = val
}

// SetStatusCode sets the value of StatusCode.
func (s *PlatformAccountListItem) SetStatusCode(val OptDepositStatusCode) {
	s.StatusCode = val
}

// SetCount sets the value of Count.
func (s *PlatformAccountListItem) SetCount(val *NilInt) {
	s.Count = val
}

// SetSettlementAmount sets the value of SettlementAmount.
func (s *PlatformAccountListItem) SetSettlementAmount(val *NilInt) {
	s.SettlementAmount = val
}

// SetBankTransferFee sets the value of BankTransferFee.
func (s *PlatformAccountListItem) SetBankTransferFee(val *NilInt) {
	s.BankTransferFee = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PlatformAccountListItem) SetTotalAmount(val *NilInt) {
	s.TotalAmount = val
}

// SetFeeAmount sets the value of FeeAmount.
func (s *PlatformAccountListItem) SetFeeAmount(val *NilInt) {
	s.FeeAmount = val
}

// SetPlatformFeeAmount sets the value of PlatformFeeAmount.
func (s *PlatformAccountListItem) SetPlatformFeeAmount(val *NilInt) {
	s.PlatformFeeAmount = val
}

// SetPlatformFeeTaxAmount sets the value of PlatformFeeTaxAmount.
func (s *PlatformAccountListItem) SetPlatformFeeTaxAmount(val *NilInt) {
	s.PlatformFeeTaxAmount = val
}

// SetTaxAmount sets the value of TaxAmount.
func (s *PlatformAccountListItem) SetTaxAmount(val *NilInt) {
	s.TaxAmount = val
}

// SetCreated sets the value of Created.
func (s *PlatformAccountListItem) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlatformAccountListItem) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetVerified sets the value of Verified.
func (s *PlatformAccountListItem) SetVerified(val OptBool) {
	s.Verified = val
}

// Merged schema.
// Ref: #/components/schemas/PlatformAccount.ListRetrieving.Response
type PlatformAccountListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString `json:"link_previous"`
	// プラットフォーム利用料による売上入金情報のリスト.
	List []PlatformAccountListItem `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *PlatformAccountListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *PlatformAccountListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *PlatformAccountListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *PlatformAccountListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *PlatformAccountListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *PlatformAccountListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *PlatformAccountListRetrievingResponse) GetList() []PlatformAccountListItem {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *PlatformAccountListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *PlatformAccountListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *PlatformAccountListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *PlatformAccountListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *PlatformAccountListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *PlatformAccountListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *PlatformAccountListRetrievingResponse) SetList(val []PlatformAccountListItem) {
	s.List = val
}

func (*PlatformAccountListRetrievingResponse) retrievePlatformAccountListRes() {}

// Ref: #/components/schemas/PlatformAccount.Retrieving.Response
type PlatformAccountRetrievingResponse struct {
	// プラットフォーム利用料収入ID.
	ID OptString `json:"id"`
	// 精算ID.
	AccountID OptInt `json:"account_id"`
	// ショップID.
	ShopID OptString `json:"shop_id"`
	// プラットフォーム利用料収入 入金額\
	// \
	// プラットフォームショップに入金される（入金が予定されている）プラットフォーム利用料による売上金の額です。\
	// 精算金額（`settlement_amount`）から振込手数料（`bank_transfer_fee`）を引いた金額に一致します。.
	DepositAmount OptNilInt `json:"deposit_amount"`
	// プラットフォーム利用料収入 入金実績日\
	// 形式： `yyyy/MM/dd HH:MM`.
	DepositDate OptNilString `json:"deposit_date"`
	// プラットフォーム利用料収入 入金予定日\
	// 形式： `yyyy/MM/dd HH:MM`.
	ScheduledDepositDate OptNilString `json:"scheduled_deposit_date"`
	// プラットフォーム利用料収入 集計期間 開始日\
	// 形式： `yyyy/MM/dd HH:MM`.
	AggregateTermStart OptNilString `json:"aggregate_term_start"`
	// プラットフォーム利用料収入 集計期間 終了日\
	// 形式： `yyyy/MM/dd HH:MM`.
	AggregateTermEnd OptNilString `json:"aggregate_term_end"`
	// （請求が発生した場合）支払期限日\
	// 形式： `yyyy/MM/dd HH:MM`.
	PaymentDeadline OptNilString `json:"payment_deadline"`
	// （請求が発生した場合）請求日\
	// 形式： `yyyy/MM/dd HH:MM`.
	PaymentCompletionDate OptNilString         `json:"payment_completion_date"`
	StatusCode            OptDepositStatusCode `json:"status_code"`
	// このプラットフォーム利用料収入に含まれる決済の件数.
	Count OptNilInt `json:"count"`
	// 精算金額.
	SettlementAmount OptNilInt `json:"settlement_amount"`
	// 振込手数料.
	BankTransferFee OptNilInt `json:"bank_transfer_fee"`
	// このプラットフォーム利用料入金において精算の対象となった取引の総額。.
	TotalAmount OptNilInt `json:"total_amount"`
	// このプラットフォーム利用料入金において精算の対象となった取引にかかるfincodeへの手数料.
	FeeAmount OptNilInt `json:"fee_amount"`
	// 決済手数料 課税対象額.
	TaxableFeeAmount OptNilInt `json:"taxable_fee_amount"`
	// 決済手数料 非課税対象額.
	NontaxableFeeAmount OptNilInt `json:"nontaxable_fee_amount"`
	// 決済手数料 消費税額.
	TaxAmount OptNilInt `json:"tax_amount"`
	// このプラットフォーム利用料入金の精算期間中に発生した振替口座のWeb登録手数料\
	// ※ 口座振替のみ.
	WebRegistrationFeeAmount OptNilInt `json:"web_registration_fee_amount"`
	// このプラットフォーム利用料入金において精算の対象となった取引にかかるプラットフォーム利用料.
	PlatformFeeAmount OptNilInt `json:"platform_fee_amount"`
	// このプラットフォーム利用料入金において精算の対象となった取引にかかるプラットフォーム利用料の消費税.
	PlatformFeeTaxAmount OptNilInt `json:"platform_fee_tax_amount"`
	// このプラットフォーム利用料入金の精算期間中に発生した、プラットフォームが設定した振替口座のWeb登録手数料.
	PlatformWebRegistrationFeeAmount OptNilInt  `json:"platform_web_registration_fee_amount"`
	Created                          OptString  `json:"created"`
	Updated                          *NilString `json:"updated"`
	// プラットフォーム利用料収入 入金先口座情報.
	DepositDestination OptPlatformAccountRetrievingResponseDepositDestination `json:"deposit_destination"`
	// 検証確認フラグ.
	//
	// Deprecated: schema marks this property as deprecated.
	Verified OptBool `json:"verified"`
}

// GetID returns the value of ID.
func (s *PlatformAccountRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetAccountID returns the value of AccountID.
func (s *PlatformAccountRetrievingResponse) GetAccountID() OptInt {
	return s.AccountID
}

// GetShopID returns the value of ShopID.
func (s *PlatformAccountRetrievingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetDepositAmount returns the value of DepositAmount.
func (s *PlatformAccountRetrievingResponse) GetDepositAmount() OptNilInt {
	return s.DepositAmount
}

// GetDepositDate returns the value of DepositDate.
func (s *PlatformAccountRetrievingResponse) GetDepositDate() OptNilString {
	return s.DepositDate
}

// GetScheduledDepositDate returns the value of ScheduledDepositDate.
func (s *PlatformAccountRetrievingResponse) GetScheduledDepositDate() OptNilString {
	return s.ScheduledDepositDate
}

// GetAggregateTermStart returns the value of AggregateTermStart.
func (s *PlatformAccountRetrievingResponse) GetAggregateTermStart() OptNilString {
	return s.AggregateTermStart
}

// GetAggregateTermEnd returns the value of AggregateTermEnd.
func (s *PlatformAccountRetrievingResponse) GetAggregateTermEnd() OptNilString {
	return s.AggregateTermEnd
}

// GetPaymentDeadline returns the value of PaymentDeadline.
func (s *PlatformAccountRetrievingResponse) GetPaymentDeadline() OptNilString {
	return s.PaymentDeadline
}

// GetPaymentCompletionDate returns the value of PaymentCompletionDate.
func (s *PlatformAccountRetrievingResponse) GetPaymentCompletionDate() OptNilString {
	return s.PaymentCompletionDate
}

// GetStatusCode returns the value of StatusCode.
func (s *PlatformAccountRetrievingResponse) GetStatusCode() OptDepositStatusCode {
	return s.StatusCode
}

// GetCount returns the value of Count.
func (s *PlatformAccountRetrievingResponse) GetCount() OptNilInt {
	return s.Count
}

// GetSettlementAmount returns the value of SettlementAmount.
func (s *PlatformAccountRetrievingResponse) GetSettlementAmount() OptNilInt {
	return s.SettlementAmount
}

// GetBankTransferFee returns the value of BankTransferFee.
func (s *PlatformAccountRetrievingResponse) GetBankTransferFee() OptNilInt {
	return s.BankTransferFee
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PlatformAccountRetrievingResponse) GetTotalAmount() OptNilInt {
	return s.TotalAmount
}

// GetFeeAmount returns the value of FeeAmount.
func (s *PlatformAccountRetrievingResponse) GetFeeAmount() OptNilInt {
	return s.FeeAmount
}

// GetTaxableFeeAmount returns the value of TaxableFeeAmount.
func (s *PlatformAccountRetrievingResponse) GetTaxableFeeAmount() OptNilInt {
	return s.TaxableFeeAmount
}

// GetNontaxableFeeAmount returns the value of NontaxableFeeAmount.
func (s *PlatformAccountRetrievingResponse) GetNontaxableFeeAmount() OptNilInt {
	return s.NontaxableFeeAmount
}

// GetTaxAmount returns the value of TaxAmount.
func (s *PlatformAccountRetrievingResponse) GetTaxAmount() OptNilInt {
	return s.TaxAmount
}

// GetWebRegistrationFeeAmount returns the value of WebRegistrationFeeAmount.
func (s *PlatformAccountRetrievingResponse) GetWebRegistrationFeeAmount() OptNilInt {
	return s.WebRegistrationFeeAmount
}

// GetPlatformFeeAmount returns the value of PlatformFeeAmount.
func (s *PlatformAccountRetrievingResponse) GetPlatformFeeAmount() OptNilInt {
	return s.PlatformFeeAmount
}

// GetPlatformFeeTaxAmount returns the value of PlatformFeeTaxAmount.
func (s *PlatformAccountRetrievingResponse) GetPlatformFeeTaxAmount() OptNilInt {
	return s.PlatformFeeTaxAmount
}

// GetPlatformWebRegistrationFeeAmount returns the value of PlatformWebRegistrationFeeAmount.
func (s *PlatformAccountRetrievingResponse) GetPlatformWebRegistrationFeeAmount() OptNilInt {
	return s.PlatformWebRegistrationFeeAmount
}

// GetCreated returns the value of Created.
func (s *PlatformAccountRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlatformAccountRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// GetDepositDestination returns the value of DepositDestination.
func (s *PlatformAccountRetrievingResponse) GetDepositDestination() OptPlatformAccountRetrievingResponseDepositDestination {
	return s.DepositDestination
}

// GetVerified returns the value of Verified.
func (s *PlatformAccountRetrievingResponse) GetVerified() OptBool {
	return s.Verified
}

// SetID sets the value of ID.
func (s *PlatformAccountRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetAccountID sets the value of AccountID.
func (s *PlatformAccountRetrievingResponse) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetShopID sets the value of ShopID.
func (s *PlatformAccountRetrievingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetDepositAmount sets the value of DepositAmount.
func (s *PlatformAccountRetrievingResponse) SetDepositAmount(val OptNilInt) {
	s.DepositAmount = val
}

// SetDepositDate sets the value of DepositDate.
func (s *PlatformAccountRetrievingResponse) SetDepositDate(val OptNilString) {
	s.DepositDate = val
}

// SetScheduledDepositDate sets the value of ScheduledDepositDate.
func (s *PlatformAccountRetrievingResponse) SetScheduledDepositDate(val OptNilString) {
	s.ScheduledDepositDate = val
}

// SetAggregateTermStart sets the value of AggregateTermStart.
func (s *PlatformAccountRetrievingResponse) SetAggregateTermStart(val OptNilString) {
	s.AggregateTermStart = val
}

// SetAggregateTermEnd sets the value of AggregateTermEnd.
func (s *PlatformAccountRetrievingResponse) SetAggregateTermEnd(val OptNilString) {
	s.AggregateTermEnd = val
}

// SetPaymentDeadline sets the value of PaymentDeadline.
func (s *PlatformAccountRetrievingResponse) SetPaymentDeadline(val OptNilString) {
	s.PaymentDeadline = val
}

// SetPaymentCompletionDate sets the value of PaymentCompletionDate.
func (s *PlatformAccountRetrievingResponse) SetPaymentCompletionDate(val OptNilString) {
	s.PaymentCompletionDate = val
}

// SetStatusCode sets the value of StatusCode.
func (s *PlatformAccountRetrievingResponse) SetStatusCode(val OptDepositStatusCode) {
	s.StatusCode = val
}

// SetCount sets the value of Count.
func (s *PlatformAccountRetrievingResponse) SetCount(val OptNilInt) {
	s.Count = val
}

// SetSettlementAmount sets the value of SettlementAmount.
func (s *PlatformAccountRetrievingResponse) SetSettlementAmount(val OptNilInt) {
	s.SettlementAmount = val
}

// SetBankTransferFee sets the value of BankTransferFee.
func (s *PlatformAccountRetrievingResponse) SetBankTransferFee(val OptNilInt) {
	s.BankTransferFee = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PlatformAccountRetrievingResponse) SetTotalAmount(val OptNilInt) {
	s.TotalAmount = val
}

// SetFeeAmount sets the value of FeeAmount.
func (s *PlatformAccountRetrievingResponse) SetFeeAmount(val OptNilInt) {
	s.FeeAmount = val
}

// SetTaxableFeeAmount sets the value of TaxableFeeAmount.
func (s *PlatformAccountRetrievingResponse) SetTaxableFeeAmount(val OptNilInt) {
	s.TaxableFeeAmount = val
}

// SetNontaxableFeeAmount sets the value of NontaxableFeeAmount.
func (s *PlatformAccountRetrievingResponse) SetNontaxableFeeAmount(val OptNilInt) {
	s.NontaxableFeeAmount = val
}

// SetTaxAmount sets the value of TaxAmount.
func (s *PlatformAccountRetrievingResponse) SetTaxAmount(val OptNilInt) {
	s.TaxAmount = val
}

// SetWebRegistrationFeeAmount sets the value of WebRegistrationFeeAmount.
func (s *PlatformAccountRetrievingResponse) SetWebRegistrationFeeAmount(val OptNilInt) {
	s.WebRegistrationFeeAmount = val
}

// SetPlatformFeeAmount sets the value of PlatformFeeAmount.
func (s *PlatformAccountRetrievingResponse) SetPlatformFeeAmount(val OptNilInt) {
	s.PlatformFeeAmount = val
}

// SetPlatformFeeTaxAmount sets the value of PlatformFeeTaxAmount.
func (s *PlatformAccountRetrievingResponse) SetPlatformFeeTaxAmount(val OptNilInt) {
	s.PlatformFeeTaxAmount = val
}

// SetPlatformWebRegistrationFeeAmount sets the value of PlatformWebRegistrationFeeAmount.
func (s *PlatformAccountRetrievingResponse) SetPlatformWebRegistrationFeeAmount(val OptNilInt) {
	s.PlatformWebRegistrationFeeAmount = val
}

// SetCreated sets the value of Created.
func (s *PlatformAccountRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlatformAccountRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetDepositDestination sets the value of DepositDestination.
func (s *PlatformAccountRetrievingResponse) SetDepositDestination(val OptPlatformAccountRetrievingResponseDepositDestination) {
	s.DepositDestination = val
}

// SetVerified sets the value of Verified.
func (s *PlatformAccountRetrievingResponse) SetVerified(val OptBool) {
	s.Verified = val
}

func (*PlatformAccountRetrievingResponse) retrievePlatformAccountRes() {}

type PlatformAccountRetrievingResponseDepositDestination struct {
	// 法人口座か
	// - `true`: 法人口座
	// - `false`: 個人口座.
	Corporate OptBool `json:"corporate"`
	// 入金先法人名.
	RecipientCorporateName OptString `json:"recipient_corporate_name"`
	// 入金先代表者氏名 姓.
	RecipientRepresntativeLastName OptString `json:"recipient_represntative_last_name"`
	// 入金先代表者氏名 名.
	RecipientRepresntativeFirstName OptString `json:"recipient_represntative_first_name"`
	// 入金先 金融機関コード.
	BankCode OptString `json:"bank_code"`
	// 入金先 金融機関名.
	BankName OptString `json:"bank_name"`
	// 入金先 金融機関名 カナ.
	BankNameKana OptString `json:"bank_name_kana"`
	// 入金先 支店コード.
	BranchCode OptString `json:"branch_code"`
	// 入金先 支店名.
	BranchName OptString `json:"branch_name"`
	// 入金先 支店名 カナ.
	BranchNameKana OptString `json:"branch_name_kana"`
	// 入金先 口座種別
	// - `0`: 普通
	// - `1`: 当座.
	AccountKind OptPlatformAccountRetrievingResponseDepositDestinationAccountKind `json:"account_kind"`
	// 入金先 口座番号.
	AccountNumber OptString `json:"account_number"`
	// 入金先 口座名義.
	AccountName OptString `json:"account_name"`
}

// GetCorporate returns the value of Corporate.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetCorporate() OptBool {
	return s.Corporate
}

// GetRecipientCorporateName returns the value of RecipientCorporateName.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetRecipientCorporateName() OptString {
	return s.RecipientCorporateName
}

// GetRecipientRepresntativeLastName returns the value of RecipientRepresntativeLastName.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetRecipientRepresntativeLastName() OptString {
	return s.RecipientRepresntativeLastName
}

// GetRecipientRepresntativeFirstName returns the value of RecipientRepresntativeFirstName.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetRecipientRepresntativeFirstName() OptString {
	return s.RecipientRepresntativeFirstName
}

// GetBankCode returns the value of BankCode.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetBankCode() OptString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetBankName() OptString {
	return s.BankName
}

// GetBankNameKana returns the value of BankNameKana.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetBankNameKana() OptString {
	return s.BankNameKana
}

// GetBranchCode returns the value of BranchCode.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetBranchCode() OptString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetBranchName() OptString {
	return s.BranchName
}

// GetBranchNameKana returns the value of BranchNameKana.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetBranchNameKana() OptString {
	return s.BranchNameKana
}

// GetAccountKind returns the value of AccountKind.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetAccountKind() OptPlatformAccountRetrievingResponseDepositDestinationAccountKind {
	return s.AccountKind
}

// GetAccountNumber returns the value of AccountNumber.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetAccountNumber() OptString {
	return s.AccountNumber
}

// GetAccountName returns the value of AccountName.
func (s *PlatformAccountRetrievingResponseDepositDestination) GetAccountName() OptString {
	return s.AccountName
}

// SetCorporate sets the value of Corporate.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetCorporate(val OptBool) {
	s.Corporate = val
}

// SetRecipientCorporateName sets the value of RecipientCorporateName.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetRecipientCorporateName(val OptString) {
	s.RecipientCorporateName = val
}

// SetRecipientRepresntativeLastName sets the value of RecipientRepresntativeLastName.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetRecipientRepresntativeLastName(val OptString) {
	s.RecipientRepresntativeLastName = val
}

// SetRecipientRepresntativeFirstName sets the value of RecipientRepresntativeFirstName.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetRecipientRepresntativeFirstName(val OptString) {
	s.RecipientRepresntativeFirstName = val
}

// SetBankCode sets the value of BankCode.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetBankCode(val OptString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetBankName(val OptString) {
	s.BankName = val
}

// SetBankNameKana sets the value of BankNameKana.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetBankNameKana(val OptString) {
	s.BankNameKana = val
}

// SetBranchCode sets the value of BranchCode.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetBranchCode(val OptString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetBranchName(val OptString) {
	s.BranchName = val
}

// SetBranchNameKana sets the value of BranchNameKana.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetBranchNameKana(val OptString) {
	s.BranchNameKana = val
}

// SetAccountKind sets the value of AccountKind.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetAccountKind(val OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) {
	s.AccountKind = val
}

// SetAccountNumber sets the value of AccountNumber.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetAccountNumber(val OptString) {
	s.AccountNumber = val
}

// SetAccountName sets the value of AccountName.
func (s *PlatformAccountRetrievingResponseDepositDestination) SetAccountName(val OptString) {
	s.AccountName = val
}

// 入金先 口座種別
// - `0`: 普通
// - `1`: 当座.
type PlatformAccountRetrievingResponseDepositDestinationAccountKind string

const (
	PlatformAccountRetrievingResponseDepositDestinationAccountKind0 PlatformAccountRetrievingResponseDepositDestinationAccountKind = "0"
	PlatformAccountRetrievingResponseDepositDestinationAccountKind1 PlatformAccountRetrievingResponseDepositDestinationAccountKind = "1"
)

// AllValues returns all PlatformAccountRetrievingResponseDepositDestinationAccountKind values.
func (PlatformAccountRetrievingResponseDepositDestinationAccountKind) AllValues() []PlatformAccountRetrievingResponseDepositDestinationAccountKind {
	return []PlatformAccountRetrievingResponseDepositDestinationAccountKind{
		PlatformAccountRetrievingResponseDepositDestinationAccountKind0,
		PlatformAccountRetrievingResponseDepositDestinationAccountKind1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformAccountRetrievingResponseDepositDestinationAccountKind) MarshalText() ([]byte, error) {
	switch s {
	case PlatformAccountRetrievingResponseDepositDestinationAccountKind0:
		return []byte(s), nil
	case PlatformAccountRetrievingResponseDepositDestinationAccountKind1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformAccountRetrievingResponseDepositDestinationAccountKind) UnmarshalText(data []byte) error {
	switch PlatformAccountRetrievingResponseDepositDestinationAccountKind(data) {
	case PlatformAccountRetrievingResponseDepositDestinationAccountKind0:
		*s = PlatformAccountRetrievingResponseDepositDestinationAccountKind0
		return nil
	case PlatformAccountRetrievingResponseDepositDestinationAccountKind1:
		*s = PlatformAccountRetrievingResponseDepositDestinationAccountKind1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlatformAccountSummary
type PlatformAccountSummary struct {
	// プラットフォーム利用料収入サマリーID.
	SummaryID OptInt `json:"summary_id"`
	AccountID OptInt `json:"account_id"`
	// ショップID（プラットフォーム）.
	ShopID OptString `json:"shop_id"`
	// ショップID（テナント）\
	// \
	// この利用料収入サマリーはこのIDを持つテナントショップに関して作成されたものであることを示します。.
	TenantShopID OptString `json:"tenant_shop_id"`
	// ショップ名（テナント）.
	TenantShopName                   *NilString `json:"tenant_shop_name"`
	DepositAmount                    *NilInt    `json:"deposit_amount"`
	AggregateTermStart               *NilString `json:"aggregate_term_start"`
	AggregateTermEnd                 *NilString `json:"aggregate_term_end"`
	Count                            *NilInt    `json:"count"`
	TotalAmount                      *NilInt    `json:"total_amount"`
	FeeAmount                        *NilInt    `json:"fee_amount"`
	TaxableFeeAmount                 *NilInt    `json:"taxable_fee_amount"`
	NontaxableFeeAmount              *NilInt    `json:"nontaxable_fee_amount"`
	TaxAmount                        *NilInt    `json:"tax_amount"`
	WebRegistrationFeeAmount         *NilInt    `json:"web_registration_fee_amount"`
	PlatformWebRegistrationFeeAmount *NilInt    `json:"platform_web_registration_fee_amount"`
	PlatformFeeAmount                *NilInt    `json:"platform_fee_amount"`
	PlatformFeeTaxAmount             *NilInt    `json:"platform_fee_tax_amount"`
	Created                          OptString  `json:"created"`
	Updated                          *NilString `json:"updated"`
	// テナントショップにおける、このサマリーの集計対象となった売上入金IDのリスト.
	TenantAccountProcessIDList []string `json:"tenant_account_process_id_list"`
}

// GetSummaryID returns the value of SummaryID.
func (s *PlatformAccountSummary) GetSummaryID() OptInt {
	return s.SummaryID
}

// GetAccountID returns the value of AccountID.
func (s *PlatformAccountSummary) GetAccountID() OptInt {
	return s.AccountID
}

// GetShopID returns the value of ShopID.
func (s *PlatformAccountSummary) GetShopID() OptString {
	return s.ShopID
}

// GetTenantShopID returns the value of TenantShopID.
func (s *PlatformAccountSummary) GetTenantShopID() OptString {
	return s.TenantShopID
}

// GetTenantShopName returns the value of TenantShopName.
func (s *PlatformAccountSummary) GetTenantShopName() *NilString {
	return s.TenantShopName
}

// GetDepositAmount returns the value of DepositAmount.
func (s *PlatformAccountSummary) GetDepositAmount() *NilInt {
	return s.DepositAmount
}

// GetAggregateTermStart returns the value of AggregateTermStart.
func (s *PlatformAccountSummary) GetAggregateTermStart() *NilString {
	return s.AggregateTermStart
}

// GetAggregateTermEnd returns the value of AggregateTermEnd.
func (s *PlatformAccountSummary) GetAggregateTermEnd() *NilString {
	return s.AggregateTermEnd
}

// GetCount returns the value of Count.
func (s *PlatformAccountSummary) GetCount() *NilInt {
	return s.Count
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PlatformAccountSummary) GetTotalAmount() *NilInt {
	return s.TotalAmount
}

// GetFeeAmount returns the value of FeeAmount.
func (s *PlatformAccountSummary) GetFeeAmount() *NilInt {
	return s.FeeAmount
}

// GetTaxableFeeAmount returns the value of TaxableFeeAmount.
func (s *PlatformAccountSummary) GetTaxableFeeAmount() *NilInt {
	return s.TaxableFeeAmount
}

// GetNontaxableFeeAmount returns the value of NontaxableFeeAmount.
func (s *PlatformAccountSummary) GetNontaxableFeeAmount() *NilInt {
	return s.NontaxableFeeAmount
}

// GetTaxAmount returns the value of TaxAmount.
func (s *PlatformAccountSummary) GetTaxAmount() *NilInt {
	return s.TaxAmount
}

// GetWebRegistrationFeeAmount returns the value of WebRegistrationFeeAmount.
func (s *PlatformAccountSummary) GetWebRegistrationFeeAmount() *NilInt {
	return s.WebRegistrationFeeAmount
}

// GetPlatformWebRegistrationFeeAmount returns the value of PlatformWebRegistrationFeeAmount.
func (s *PlatformAccountSummary) GetPlatformWebRegistrationFeeAmount() *NilInt {
	return s.PlatformWebRegistrationFeeAmount
}

// GetPlatformFeeAmount returns the value of PlatformFeeAmount.
func (s *PlatformAccountSummary) GetPlatformFeeAmount() *NilInt {
	return s.PlatformFeeAmount
}

// GetPlatformFeeTaxAmount returns the value of PlatformFeeTaxAmount.
func (s *PlatformAccountSummary) GetPlatformFeeTaxAmount() *NilInt {
	return s.PlatformFeeTaxAmount
}

// GetCreated returns the value of Created.
func (s *PlatformAccountSummary) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlatformAccountSummary) GetUpdated() *NilString {
	return s.Updated
}

// GetTenantAccountProcessIDList returns the value of TenantAccountProcessIDList.
func (s *PlatformAccountSummary) GetTenantAccountProcessIDList() []string {
	return s.TenantAccountProcessIDList
}

// SetSummaryID sets the value of SummaryID.
func (s *PlatformAccountSummary) SetSummaryID(val OptInt) {
	s.SummaryID = val
}

// SetAccountID sets the value of AccountID.
func (s *PlatformAccountSummary) SetAccountID(val OptInt) {
	s.AccountID = val
}

// SetShopID sets the value of ShopID.
func (s *PlatformAccountSummary) SetShopID(val OptString) {
	s.ShopID = val
}

// SetTenantShopID sets the value of TenantShopID.
func (s *PlatformAccountSummary) SetTenantShopID(val OptString) {
	s.TenantShopID = val
}

// SetTenantShopName sets the value of TenantShopName.
func (s *PlatformAccountSummary) SetTenantShopName(val *NilString) {
	s.TenantShopName = val
}

// SetDepositAmount sets the value of DepositAmount.
func (s *PlatformAccountSummary) SetDepositAmount(val *NilInt) {
	s.DepositAmount = val
}

// SetAggregateTermStart sets the value of AggregateTermStart.
func (s *PlatformAccountSummary) SetAggregateTermStart(val *NilString) {
	s.AggregateTermStart = val
}

// SetAggregateTermEnd sets the value of AggregateTermEnd.
func (s *PlatformAccountSummary) SetAggregateTermEnd(val *NilString) {
	s.AggregateTermEnd = val
}

// SetCount sets the value of Count.
func (s *PlatformAccountSummary) SetCount(val *NilInt) {
	s.Count = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PlatformAccountSummary) SetTotalAmount(val *NilInt) {
	s.TotalAmount = val
}

// SetFeeAmount sets the value of FeeAmount.
func (s *PlatformAccountSummary) SetFeeAmount(val *NilInt) {
	s.FeeAmount = val
}

// SetTaxableFeeAmount sets the value of TaxableFeeAmount.
func (s *PlatformAccountSummary) SetTaxableFeeAmount(val *NilInt) {
	s.TaxableFeeAmount = val
}

// SetNontaxableFeeAmount sets the value of NontaxableFeeAmount.
func (s *PlatformAccountSummary) SetNontaxableFeeAmount(val *NilInt) {
	s.NontaxableFeeAmount = val
}

// SetTaxAmount sets the value of TaxAmount.
func (s *PlatformAccountSummary) SetTaxAmount(val *NilInt) {
	s.TaxAmount = val
}

// SetWebRegistrationFeeAmount sets the value of WebRegistrationFeeAmount.
func (s *PlatformAccountSummary) SetWebRegistrationFeeAmount(val *NilInt) {
	s.WebRegistrationFeeAmount = val
}

// SetPlatformWebRegistrationFeeAmount sets the value of PlatformWebRegistrationFeeAmount.
func (s *PlatformAccountSummary) SetPlatformWebRegistrationFeeAmount(val *NilInt) {
	s.PlatformWebRegistrationFeeAmount = val
}

// SetPlatformFeeAmount sets the value of PlatformFeeAmount.
func (s *PlatformAccountSummary) SetPlatformFeeAmount(val *NilInt) {
	s.PlatformFeeAmount = val
}

// SetPlatformFeeTaxAmount sets the value of PlatformFeeTaxAmount.
func (s *PlatformAccountSummary) SetPlatformFeeTaxAmount(val *NilInt) {
	s.PlatformFeeTaxAmount = val
}

// SetCreated sets the value of Created.
func (s *PlatformAccountSummary) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlatformAccountSummary) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetTenantAccountProcessIDList sets the value of TenantAccountProcessIDList.
func (s *PlatformAccountSummary) SetTenantAccountProcessIDList(val []string) {
	s.TenantAccountProcessIDList = val
}

// Merged schema.
// Ref: #/components/schemas/PlatformAccountSummary.ListRetrieving.Response
type PlatformAccountSummaryListRetrievingResponse struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString `json:"link_previous"`
	// プラットフォーム利用料収入のサマリー情報のリスト.
	List []PlatformAccountSummary `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *PlatformAccountSummaryListRetrievingResponse) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *PlatformAccountSummaryListRetrievingResponse) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *PlatformAccountSummaryListRetrievingResponse) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *PlatformAccountSummaryListRetrievingResponse) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *PlatformAccountSummaryListRetrievingResponse) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *PlatformAccountSummaryListRetrievingResponse) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *PlatformAccountSummaryListRetrievingResponse) GetList() []PlatformAccountSummary {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *PlatformAccountSummaryListRetrievingResponse) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *PlatformAccountSummaryListRetrievingResponse) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *PlatformAccountSummaryListRetrievingResponse) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *PlatformAccountSummaryListRetrievingResponse) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *PlatformAccountSummaryListRetrievingResponse) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *PlatformAccountSummaryListRetrievingResponse) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *PlatformAccountSummaryListRetrievingResponse) SetList(val []PlatformAccountSummary) {
	s.List = val
}

func (*PlatformAccountSummaryListRetrievingResponse) retrievePlatformAccountSummaryListRes() {}

// Ref: #/components/schemas/PlatformRateConfig
type PlatformRateConfig struct {
	ID OptPlatformRateConfigID `json:"id"`
	// （標準）プラットフォーム利用料率。\
	// 個別のプラットフォーム利用料率が設定されていないテナントが`id`で指定した決済手段で決済を行うと、このプラットフォーム利用料率が適用されます。\
	// \
	// 特定のテナントに個別のプラットフォーム利用料を適用するには
	// テナントショップ 更新API を使用します。.
	PlatformRate OptNilFloat64 `json:"platform_rate"`
	// （標準）プラットフォーム利用料 最低料金。\
	// テナントが`id`で指定した決済手段で決済を行った際、`platform_rate`による利用料がこの最低料金を下回ると、この最低料金が適用されます。.
	FixedFee OptNilInt32 `json:"fixed_fee"`
	// （標準）プラットフォーム利用料 Web登録手数料。\
	// テナントにおいて、口座振替における振替用口座登録（Web登録）に成功した際に適用されるWeb登録手数料です。\
	// ※ 口座振替のみ.
	WebRegistrationFee OptNilFloat64 `json:"web_registration_fee"`
	// PayPay審査により決定されるPayPay商材カテゴリー。
	// - `1`: 物販／サービスショップ
	// - `2`: デジタルコンテンツショップ
	// ※ PayPayのみ.
	PaypayContentCategoryType OptNilPlatformRateConfigPaypayContentCategoryType `json:"paypay_content_category_type"`
}

// GetID returns the value of ID.
func (s *PlatformRateConfig) GetID() OptPlatformRateConfigID {
	return s.ID
}

// GetPlatformRate returns the value of PlatformRate.
func (s *PlatformRateConfig) GetPlatformRate() OptNilFloat64 {
	return s.PlatformRate
}

// GetFixedFee returns the value of FixedFee.
func (s *PlatformRateConfig) GetFixedFee() OptNilInt32 {
	return s.FixedFee
}

// GetWebRegistrationFee returns the value of WebRegistrationFee.
func (s *PlatformRateConfig) GetWebRegistrationFee() OptNilFloat64 {
	return s.WebRegistrationFee
}

// GetPaypayContentCategoryType returns the value of PaypayContentCategoryType.
func (s *PlatformRateConfig) GetPaypayContentCategoryType() OptNilPlatformRateConfigPaypayContentCategoryType {
	return s.PaypayContentCategoryType
}

// SetID sets the value of ID.
func (s *PlatformRateConfig) SetID(val OptPlatformRateConfigID) {
	s.ID = val
}

// SetPlatformRate sets the value of PlatformRate.
func (s *PlatformRateConfig) SetPlatformRate(val OptNilFloat64) {
	s.PlatformRate = val
}

// SetFixedFee sets the value of FixedFee.
func (s *PlatformRateConfig) SetFixedFee(val OptNilInt32) {
	s.FixedFee = val
}

// SetWebRegistrationFee sets the value of WebRegistrationFee.
func (s *PlatformRateConfig) SetWebRegistrationFee(val OptNilFloat64) {
	s.WebRegistrationFee = val
}

// SetPaypayContentCategoryType sets the value of PaypayContentCategoryType.
func (s *PlatformRateConfig) SetPaypayContentCategoryType(val OptNilPlatformRateConfigPaypayContentCategoryType) {
	s.PaypayContentCategoryType = val
}

// 審査種別マスタID。\
// プラットフォーム料率の適用対象とする決済手段の種別を表します。
// - `vm`: カード決済（VISA / Mastercard）
// - `jad`: カード決済（JCB / American Express / Diners Club / Discover）
// - `applepay_vm`: Apple Pay（VISA / Mastercard）
// - `applepay_jad`: Apple Pay（JCB / American Express / Diners Club / Discover）
// - `konbini`: コンビニ決済
// - `paypay`: PayPay
// - `directdebit`: 口座振替.
type PlatformRateConfigID string

const (
	PlatformRateConfigIDVM          PlatformRateConfigID = "vm"
	PlatformRateConfigIDJad         PlatformRateConfigID = "jad"
	PlatformRateConfigIDApplepayVM  PlatformRateConfigID = "applepay_vm"
	PlatformRateConfigIDApplepayJad PlatformRateConfigID = "applepay_jad"
	PlatformRateConfigIDKonbini     PlatformRateConfigID = "konbini"
	PlatformRateConfigIDPaypay      PlatformRateConfigID = "paypay"
	PlatformRateConfigIDDirectdebit PlatformRateConfigID = "directdebit"
)

// AllValues returns all PlatformRateConfigID values.
func (PlatformRateConfigID) AllValues() []PlatformRateConfigID {
	return []PlatformRateConfigID{
		PlatformRateConfigIDVM,
		PlatformRateConfigIDJad,
		PlatformRateConfigIDApplepayVM,
		PlatformRateConfigIDApplepayJad,
		PlatformRateConfigIDKonbini,
		PlatformRateConfigIDPaypay,
		PlatformRateConfigIDDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformRateConfigID) MarshalText() ([]byte, error) {
	switch s {
	case PlatformRateConfigIDVM:
		return []byte(s), nil
	case PlatformRateConfigIDJad:
		return []byte(s), nil
	case PlatformRateConfigIDApplepayVM:
		return []byte(s), nil
	case PlatformRateConfigIDApplepayJad:
		return []byte(s), nil
	case PlatformRateConfigIDKonbini:
		return []byte(s), nil
	case PlatformRateConfigIDPaypay:
		return []byte(s), nil
	case PlatformRateConfigIDDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformRateConfigID) UnmarshalText(data []byte) error {
	switch PlatformRateConfigID(data) {
	case PlatformRateConfigIDVM:
		*s = PlatformRateConfigIDVM
		return nil
	case PlatformRateConfigIDJad:
		*s = PlatformRateConfigIDJad
		return nil
	case PlatformRateConfigIDApplepayVM:
		*s = PlatformRateConfigIDApplepayVM
		return nil
	case PlatformRateConfigIDApplepayJad:
		*s = PlatformRateConfigIDApplepayJad
		return nil
	case PlatformRateConfigIDKonbini:
		*s = PlatformRateConfigIDKonbini
		return nil
	case PlatformRateConfigIDPaypay:
		*s = PlatformRateConfigIDPaypay
		return nil
	case PlatformRateConfigIDDirectdebit:
		*s = PlatformRateConfigIDDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PayPay審査により決定されるPayPay商材カテゴリー。
// - `1`: 物販／サービスショップ
// - `2`: デジタルコンテンツショップ
// ※ PayPayのみ.
type PlatformRateConfigPaypayContentCategoryType int

const (
	PlatformRateConfigPaypayContentCategoryType1 PlatformRateConfigPaypayContentCategoryType = 1
	PlatformRateConfigPaypayContentCategoryType2 PlatformRateConfigPaypayContentCategoryType = 2
)

// AllValues returns all PlatformRateConfigPaypayContentCategoryType values.
func (PlatformRateConfigPaypayContentCategoryType) AllValues() []PlatformRateConfigPaypayContentCategoryType {
	return []PlatformRateConfigPaypayContentCategoryType{
		PlatformRateConfigPaypayContentCategoryType1,
		PlatformRateConfigPaypayContentCategoryType2,
	}
}

// Ref: #/components/schemas/PlatformShop.ListRetrieving.Response
type PlatformShopListRetrievingResponse struct {
	List []Shop `json:"list"`
}

// GetList returns the value of List.
func (s *PlatformShopListRetrievingResponse) GetList() []Shop {
	return s.List
}

// SetList sets the value of List.
func (s *PlatformShopListRetrievingResponse) SetList(val []Shop) {
	s.List = val
}

func (*PlatformShopListRetrievingResponse) retrievePlatformShopListRes() {}

// Ref: #/components/schemas/PlatformShop.Retrieving.Response
type PlatformShopRetrievingResponse struct {
	// ショップID.
	ID OptString `json:"id"`
	// ショップ名.
	ShopName OptNilString `json:"shop_name"`
	// ショップ名（カナ）.
	ShopNameKana OptNilString                               `json:"shop_name_kana"`
	ShopType     *NilPlatformShopRetrievingResponseShopType `json:"shop_type"`
	// プラットフォームID.
	PlatformID OptString `json:"platform_id"`
	// プラットフォーム名.
	PlatformName OptNilString `json:"platform_name"`
	// 顧客情報共有フラグ
	// - `0`: 顧客情報を共有しない<br /><span
	// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
	// - `1`: 顧客情報を共有する<br /><span
	// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
	SharedCustomerFlag OptNilPlatformShopRetrievingResponseSharedCustomerFlag `json:"shared_customer_flag"`
	// 顧客情報共有グループID\
	// fincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// 決済手段ごとに存在するプラットフォーム手数料設定のリスト.
	PlatformRateList []PlatformRateConfig `json:"platform_rate_list"`
	// 通知先メールアドレス.
	SendMailAddress OptNilString `json:"send_mail_address"`
	// ショップメールアドレス.
	ShopMailAddress OptNilString `json:"shop_mail_address"`
	// ログ保存日数.
	LogKeepDays OptNilString `json:"log_keep_days"`
	// APIバージョン.
	APIVersion OptNilString `json:"api_version"`
	// 管理画面におけるAPIキー表示フラグ。
	// - `0`: 表示しない
	// - `1`: 表示する.
	APIKeyDisplayFlag OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag `json:"api_key_display_flag"`
	Created           OptString                                             `json:"created"`
	Updated           *NilString                                            `json:"updated"`
}

// GetID returns the value of ID.
func (s *PlatformShopRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *PlatformShopRetrievingResponse) GetShopName() OptNilString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *PlatformShopRetrievingResponse) GetShopNameKana() OptNilString {
	return s.ShopNameKana
}

// GetShopType returns the value of ShopType.
func (s *PlatformShopRetrievingResponse) GetShopType() *NilPlatformShopRetrievingResponseShopType {
	return s.ShopType
}

// GetPlatformID returns the value of PlatformID.
func (s *PlatformShopRetrievingResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetPlatformName returns the value of PlatformName.
func (s *PlatformShopRetrievingResponse) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSharedCustomerFlag returns the value of SharedCustomerFlag.
func (s *PlatformShopRetrievingResponse) GetSharedCustomerFlag() OptNilPlatformShopRetrievingResponseSharedCustomerFlag {
	return s.SharedCustomerFlag
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PlatformShopRetrievingResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetPlatformRateList returns the value of PlatformRateList.
func (s *PlatformShopRetrievingResponse) GetPlatformRateList() []PlatformRateConfig {
	return s.PlatformRateList
}

// GetSendMailAddress returns the value of SendMailAddress.
func (s *PlatformShopRetrievingResponse) GetSendMailAddress() OptNilString {
	return s.SendMailAddress
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *PlatformShopRetrievingResponse) GetShopMailAddress() OptNilString {
	return s.ShopMailAddress
}

// GetLogKeepDays returns the value of LogKeepDays.
func (s *PlatformShopRetrievingResponse) GetLogKeepDays() OptNilString {
	return s.LogKeepDays
}

// GetAPIVersion returns the value of APIVersion.
func (s *PlatformShopRetrievingResponse) GetAPIVersion() OptNilString {
	return s.APIVersion
}

// GetAPIKeyDisplayFlag returns the value of APIKeyDisplayFlag.
func (s *PlatformShopRetrievingResponse) GetAPIKeyDisplayFlag() OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag {
	return s.APIKeyDisplayFlag
}

// GetCreated returns the value of Created.
func (s *PlatformShopRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlatformShopRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PlatformShopRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *PlatformShopRetrievingResponse) SetShopName(val OptNilString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *PlatformShopRetrievingResponse) SetShopNameKana(val OptNilString) {
	s.ShopNameKana = val
}

// SetShopType sets the value of ShopType.
func (s *PlatformShopRetrievingResponse) SetShopType(val *NilPlatformShopRetrievingResponseShopType) {
	s.ShopType = val
}

// SetPlatformID sets the value of PlatformID.
func (s *PlatformShopRetrievingResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetPlatformName sets the value of PlatformName.
func (s *PlatformShopRetrievingResponse) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSharedCustomerFlag sets the value of SharedCustomerFlag.
func (s *PlatformShopRetrievingResponse) SetSharedCustomerFlag(val OptNilPlatformShopRetrievingResponseSharedCustomerFlag) {
	s.SharedCustomerFlag = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PlatformShopRetrievingResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetPlatformRateList sets the value of PlatformRateList.
func (s *PlatformShopRetrievingResponse) SetPlatformRateList(val []PlatformRateConfig) {
	s.PlatformRateList = val
}

// SetSendMailAddress sets the value of SendMailAddress.
func (s *PlatformShopRetrievingResponse) SetSendMailAddress(val OptNilString) {
	s.SendMailAddress = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *PlatformShopRetrievingResponse) SetShopMailAddress(val OptNilString) {
	s.ShopMailAddress = val
}

// SetLogKeepDays sets the value of LogKeepDays.
func (s *PlatformShopRetrievingResponse) SetLogKeepDays(val OptNilString) {
	s.LogKeepDays = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *PlatformShopRetrievingResponse) SetAPIVersion(val OptNilString) {
	s.APIVersion = val
}

// SetAPIKeyDisplayFlag sets the value of APIKeyDisplayFlag.
func (s *PlatformShopRetrievingResponse) SetAPIKeyDisplayFlag(val OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) {
	s.APIKeyDisplayFlag = val
}

// SetCreated sets the value of Created.
func (s *PlatformShopRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlatformShopRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PlatformShopRetrievingResponse) retrievePlatformShopRes() {}

// 管理画面におけるAPIキー表示フラグ。
// - `0`: 表示しない
// - `1`: 表示する.
type PlatformShopRetrievingResponseAPIKeyDisplayFlag string

const (
	PlatformShopRetrievingResponseAPIKeyDisplayFlag0 PlatformShopRetrievingResponseAPIKeyDisplayFlag = "0"
	PlatformShopRetrievingResponseAPIKeyDisplayFlag1 PlatformShopRetrievingResponseAPIKeyDisplayFlag = "1"
)

// AllValues returns all PlatformShopRetrievingResponseAPIKeyDisplayFlag values.
func (PlatformShopRetrievingResponseAPIKeyDisplayFlag) AllValues() []PlatformShopRetrievingResponseAPIKeyDisplayFlag {
	return []PlatformShopRetrievingResponseAPIKeyDisplayFlag{
		PlatformShopRetrievingResponseAPIKeyDisplayFlag0,
		PlatformShopRetrievingResponseAPIKeyDisplayFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformShopRetrievingResponseAPIKeyDisplayFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlatformShopRetrievingResponseAPIKeyDisplayFlag0:
		return []byte(s), nil
	case PlatformShopRetrievingResponseAPIKeyDisplayFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformShopRetrievingResponseAPIKeyDisplayFlag) UnmarshalText(data []byte) error {
	switch PlatformShopRetrievingResponseAPIKeyDisplayFlag(data) {
	case PlatformShopRetrievingResponseAPIKeyDisplayFlag0:
		*s = PlatformShopRetrievingResponseAPIKeyDisplayFlag0
		return nil
	case PlatformShopRetrievingResponseAPIKeyDisplayFlag1:
		*s = PlatformShopRetrievingResponseAPIKeyDisplayFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 顧客情報共有フラグ
// - `0`: 顧客情報を共有しない<br /><span
// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
// - `1`: 顧客情報を共有する<br /><span
// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
type PlatformShopRetrievingResponseSharedCustomerFlag string

const (
	PlatformShopRetrievingResponseSharedCustomerFlag0 PlatformShopRetrievingResponseSharedCustomerFlag = "0"
	PlatformShopRetrievingResponseSharedCustomerFlag1 PlatformShopRetrievingResponseSharedCustomerFlag = "1"
)

// AllValues returns all PlatformShopRetrievingResponseSharedCustomerFlag values.
func (PlatformShopRetrievingResponseSharedCustomerFlag) AllValues() []PlatformShopRetrievingResponseSharedCustomerFlag {
	return []PlatformShopRetrievingResponseSharedCustomerFlag{
		PlatformShopRetrievingResponseSharedCustomerFlag0,
		PlatformShopRetrievingResponseSharedCustomerFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformShopRetrievingResponseSharedCustomerFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlatformShopRetrievingResponseSharedCustomerFlag0:
		return []byte(s), nil
	case PlatformShopRetrievingResponseSharedCustomerFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformShopRetrievingResponseSharedCustomerFlag) UnmarshalText(data []byte) error {
	switch PlatformShopRetrievingResponseSharedCustomerFlag(data) {
	case PlatformShopRetrievingResponseSharedCustomerFlag0:
		*s = PlatformShopRetrievingResponseSharedCustomerFlag0
		return nil
	case PlatformShopRetrievingResponseSharedCustomerFlag1:
		*s = PlatformShopRetrievingResponseSharedCustomerFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type PlatformShopRetrievingResponseShopType string

const (
	PlatformShopRetrievingResponseShopTypePlatform PlatformShopRetrievingResponseShopType = "platform"
	PlatformShopRetrievingResponseShopTypeTenant   PlatformShopRetrievingResponseShopType = "tenant"
)

// AllValues returns all PlatformShopRetrievingResponseShopType values.
func (PlatformShopRetrievingResponseShopType) AllValues() []PlatformShopRetrievingResponseShopType {
	return []PlatformShopRetrievingResponseShopType{
		PlatformShopRetrievingResponseShopTypePlatform,
		PlatformShopRetrievingResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformShopRetrievingResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case PlatformShopRetrievingResponseShopTypePlatform:
		return []byte(s), nil
	case PlatformShopRetrievingResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformShopRetrievingResponseShopType) UnmarshalText(data []byte) error {
	switch PlatformShopRetrievingResponseShopType(data) {
	case PlatformShopRetrievingResponseShopTypePlatform:
		*s = PlatformShopRetrievingResponseShopTypePlatform
		return nil
	case PlatformShopRetrievingResponseShopTypeTenant:
		*s = PlatformShopRetrievingResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlatformShop.Updating.Request
type PlatformShopUpdatingRequest struct {
	ExaminationMasterID PlatformShopUpdatingRequestExaminationMasterID `json:"examination_master_id"`
	PlatformRate        *NilString                                     `json:"platform_rate"`
	FixedFee            *NilString                                     `json:"fixed_fee"`
	WebRegistrationFee  *NilString                                     `json:"web_registration_fee"`
}

// GetExaminationMasterID returns the value of ExaminationMasterID.
func (s *PlatformShopUpdatingRequest) GetExaminationMasterID() PlatformShopUpdatingRequestExaminationMasterID {
	return s.ExaminationMasterID
}

// GetPlatformRate returns the value of PlatformRate.
func (s *PlatformShopUpdatingRequest) GetPlatformRate() *NilString {
	return s.PlatformRate
}

// GetFixedFee returns the value of FixedFee.
func (s *PlatformShopUpdatingRequest) GetFixedFee() *NilString {
	return s.FixedFee
}

// GetWebRegistrationFee returns the value of WebRegistrationFee.
func (s *PlatformShopUpdatingRequest) GetWebRegistrationFee() *NilString {
	return s.WebRegistrationFee
}

// SetExaminationMasterID sets the value of ExaminationMasterID.
func (s *PlatformShopUpdatingRequest) SetExaminationMasterID(val PlatformShopUpdatingRequestExaminationMasterID) {
	s.ExaminationMasterID = val
}

// SetPlatformRate sets the value of PlatformRate.
func (s *PlatformShopUpdatingRequest) SetPlatformRate(val *NilString) {
	s.PlatformRate = val
}

// SetFixedFee sets the value of FixedFee.
func (s *PlatformShopUpdatingRequest) SetFixedFee(val *NilString) {
	s.FixedFee = val
}

// SetWebRegistrationFee sets the value of WebRegistrationFee.
func (s *PlatformShopUpdatingRequest) SetWebRegistrationFee(val *NilString) {
	s.WebRegistrationFee = val
}

// 審査種別マスタID。\
// プラットフォーム料率の適用対象とする決済手段の種別を表します。
// - `vm`: カード決済（VISA / Mastercard）
// - `jad`: カード決済（JCB / American Express / Diners Club / Discover）
// - `applepay_vm`: Apple Pay（VISA / Mastercard）
// - `applepay_jad`: Apple Pay（JCB / American Express / Diners Club / Discover）
// - `konbini`: コンビニ決済
// - `paypay`: PayPay
// - `directdebit`: 口座振替.
type PlatformShopUpdatingRequestExaminationMasterID string

const (
	PlatformShopUpdatingRequestExaminationMasterIDVM          PlatformShopUpdatingRequestExaminationMasterID = "vm"
	PlatformShopUpdatingRequestExaminationMasterIDJad         PlatformShopUpdatingRequestExaminationMasterID = "jad"
	PlatformShopUpdatingRequestExaminationMasterIDApplepayVM  PlatformShopUpdatingRequestExaminationMasterID = "applepay_vm"
	PlatformShopUpdatingRequestExaminationMasterIDApplepayJad PlatformShopUpdatingRequestExaminationMasterID = "applepay_jad"
	PlatformShopUpdatingRequestExaminationMasterIDKonbini     PlatformShopUpdatingRequestExaminationMasterID = "konbini"
	PlatformShopUpdatingRequestExaminationMasterIDPaypay      PlatformShopUpdatingRequestExaminationMasterID = "paypay"
	PlatformShopUpdatingRequestExaminationMasterIDDirectdebit PlatformShopUpdatingRequestExaminationMasterID = "directdebit"
)

// AllValues returns all PlatformShopUpdatingRequestExaminationMasterID values.
func (PlatformShopUpdatingRequestExaminationMasterID) AllValues() []PlatformShopUpdatingRequestExaminationMasterID {
	return []PlatformShopUpdatingRequestExaminationMasterID{
		PlatformShopUpdatingRequestExaminationMasterIDVM,
		PlatformShopUpdatingRequestExaminationMasterIDJad,
		PlatformShopUpdatingRequestExaminationMasterIDApplepayVM,
		PlatformShopUpdatingRequestExaminationMasterIDApplepayJad,
		PlatformShopUpdatingRequestExaminationMasterIDKonbini,
		PlatformShopUpdatingRequestExaminationMasterIDPaypay,
		PlatformShopUpdatingRequestExaminationMasterIDDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformShopUpdatingRequestExaminationMasterID) MarshalText() ([]byte, error) {
	switch s {
	case PlatformShopUpdatingRequestExaminationMasterIDVM:
		return []byte(s), nil
	case PlatformShopUpdatingRequestExaminationMasterIDJad:
		return []byte(s), nil
	case PlatformShopUpdatingRequestExaminationMasterIDApplepayVM:
		return []byte(s), nil
	case PlatformShopUpdatingRequestExaminationMasterIDApplepayJad:
		return []byte(s), nil
	case PlatformShopUpdatingRequestExaminationMasterIDKonbini:
		return []byte(s), nil
	case PlatformShopUpdatingRequestExaminationMasterIDPaypay:
		return []byte(s), nil
	case PlatformShopUpdatingRequestExaminationMasterIDDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformShopUpdatingRequestExaminationMasterID) UnmarshalText(data []byte) error {
	switch PlatformShopUpdatingRequestExaminationMasterID(data) {
	case PlatformShopUpdatingRequestExaminationMasterIDVM:
		*s = PlatformShopUpdatingRequestExaminationMasterIDVM
		return nil
	case PlatformShopUpdatingRequestExaminationMasterIDJad:
		*s = PlatformShopUpdatingRequestExaminationMasterIDJad
		return nil
	case PlatformShopUpdatingRequestExaminationMasterIDApplepayVM:
		*s = PlatformShopUpdatingRequestExaminationMasterIDApplepayVM
		return nil
	case PlatformShopUpdatingRequestExaminationMasterIDApplepayJad:
		*s = PlatformShopUpdatingRequestExaminationMasterIDApplepayJad
		return nil
	case PlatformShopUpdatingRequestExaminationMasterIDKonbini:
		*s = PlatformShopUpdatingRequestExaminationMasterIDKonbini
		return nil
	case PlatformShopUpdatingRequestExaminationMasterIDPaypay:
		*s = PlatformShopUpdatingRequestExaminationMasterIDPaypay
		return nil
	case PlatformShopUpdatingRequestExaminationMasterIDDirectdebit:
		*s = PlatformShopUpdatingRequestExaminationMasterIDDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlatformShop.Updating.Response
type PlatformShopUpdatingResponse struct {
	// ショップID.
	ID OptString `json:"id"`
	// ショップ名.
	ShopName OptNilString `json:"shop_name"`
	// ショップ名（カナ）.
	ShopNameKana OptNilString                             `json:"shop_name_kana"`
	ShopType     *NilPlatformShopUpdatingResponseShopType `json:"shop_type"`
	// プラットフォームID.
	PlatformID OptString `json:"platform_id"`
	// プラットフォーム名.
	PlatformName OptNilString `json:"platform_name"`
	// 顧客情報共有フラグ
	// - `0`: 顧客情報を共有しない<br /><span
	// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
	// - `1`: 顧客情報を共有する<br /><span
	// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
	SharedCustomerFlag OptNilPlatformShopUpdatingResponseSharedCustomerFlag `json:"shared_customer_flag"`
	// 顧客情報共有グループID\
	// fincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// 決済手段ごとに存在するプラットフォーム手数料設定のリスト.
	PlatformRateList []PlatformRateConfig `json:"platform_rate_list"`
	// 通知先メールアドレス.
	SendMailAddress OptNilString `json:"send_mail_address"`
	// ショップメールアドレス.
	ShopMailAddress OptNilString `json:"shop_mail_address"`
	// ログ保存日数.
	LogKeepDays OptNilString `json:"log_keep_days"`
	// APIバージョン.
	APIVersion OptNilString `json:"api_version"`
	// 管理画面におけるAPIキー表示フラグ。
	// - `0`: 表示しない
	// - `1`: 表示する.
	APIKeyDisplayFlag OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag `json:"api_key_display_flag"`
	Created           OptString                                           `json:"created"`
	Updated           *NilString                                          `json:"updated"`
}

// GetID returns the value of ID.
func (s *PlatformShopUpdatingResponse) GetID() OptString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *PlatformShopUpdatingResponse) GetShopName() OptNilString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *PlatformShopUpdatingResponse) GetShopNameKana() OptNilString {
	return s.ShopNameKana
}

// GetShopType returns the value of ShopType.
func (s *PlatformShopUpdatingResponse) GetShopType() *NilPlatformShopUpdatingResponseShopType {
	return s.ShopType
}

// GetPlatformID returns the value of PlatformID.
func (s *PlatformShopUpdatingResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetPlatformName returns the value of PlatformName.
func (s *PlatformShopUpdatingResponse) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSharedCustomerFlag returns the value of SharedCustomerFlag.
func (s *PlatformShopUpdatingResponse) GetSharedCustomerFlag() OptNilPlatformShopUpdatingResponseSharedCustomerFlag {
	return s.SharedCustomerFlag
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *PlatformShopUpdatingResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetPlatformRateList returns the value of PlatformRateList.
func (s *PlatformShopUpdatingResponse) GetPlatformRateList() []PlatformRateConfig {
	return s.PlatformRateList
}

// GetSendMailAddress returns the value of SendMailAddress.
func (s *PlatformShopUpdatingResponse) GetSendMailAddress() OptNilString {
	return s.SendMailAddress
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *PlatformShopUpdatingResponse) GetShopMailAddress() OptNilString {
	return s.ShopMailAddress
}

// GetLogKeepDays returns the value of LogKeepDays.
func (s *PlatformShopUpdatingResponse) GetLogKeepDays() OptNilString {
	return s.LogKeepDays
}

// GetAPIVersion returns the value of APIVersion.
func (s *PlatformShopUpdatingResponse) GetAPIVersion() OptNilString {
	return s.APIVersion
}

// GetAPIKeyDisplayFlag returns the value of APIKeyDisplayFlag.
func (s *PlatformShopUpdatingResponse) GetAPIKeyDisplayFlag() OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag {
	return s.APIKeyDisplayFlag
}

// GetCreated returns the value of Created.
func (s *PlatformShopUpdatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *PlatformShopUpdatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *PlatformShopUpdatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *PlatformShopUpdatingResponse) SetShopName(val OptNilString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *PlatformShopUpdatingResponse) SetShopNameKana(val OptNilString) {
	s.ShopNameKana = val
}

// SetShopType sets the value of ShopType.
func (s *PlatformShopUpdatingResponse) SetShopType(val *NilPlatformShopUpdatingResponseShopType) {
	s.ShopType = val
}

// SetPlatformID sets the value of PlatformID.
func (s *PlatformShopUpdatingResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetPlatformName sets the value of PlatformName.
func (s *PlatformShopUpdatingResponse) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSharedCustomerFlag sets the value of SharedCustomerFlag.
func (s *PlatformShopUpdatingResponse) SetSharedCustomerFlag(val OptNilPlatformShopUpdatingResponseSharedCustomerFlag) {
	s.SharedCustomerFlag = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *PlatformShopUpdatingResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetPlatformRateList sets the value of PlatformRateList.
func (s *PlatformShopUpdatingResponse) SetPlatformRateList(val []PlatformRateConfig) {
	s.PlatformRateList = val
}

// SetSendMailAddress sets the value of SendMailAddress.
func (s *PlatformShopUpdatingResponse) SetSendMailAddress(val OptNilString) {
	s.SendMailAddress = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *PlatformShopUpdatingResponse) SetShopMailAddress(val OptNilString) {
	s.ShopMailAddress = val
}

// SetLogKeepDays sets the value of LogKeepDays.
func (s *PlatformShopUpdatingResponse) SetLogKeepDays(val OptNilString) {
	s.LogKeepDays = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *PlatformShopUpdatingResponse) SetAPIVersion(val OptNilString) {
	s.APIVersion = val
}

// SetAPIKeyDisplayFlag sets the value of APIKeyDisplayFlag.
func (s *PlatformShopUpdatingResponse) SetAPIKeyDisplayFlag(val OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) {
	s.APIKeyDisplayFlag = val
}

// SetCreated sets the value of Created.
func (s *PlatformShopUpdatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *PlatformShopUpdatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*PlatformShopUpdatingResponse) updatePlatformShopRes() {}

// 管理画面におけるAPIキー表示フラグ。
// - `0`: 表示しない
// - `1`: 表示する.
type PlatformShopUpdatingResponseAPIKeyDisplayFlag string

const (
	PlatformShopUpdatingResponseAPIKeyDisplayFlag0 PlatformShopUpdatingResponseAPIKeyDisplayFlag = "0"
	PlatformShopUpdatingResponseAPIKeyDisplayFlag1 PlatformShopUpdatingResponseAPIKeyDisplayFlag = "1"
)

// AllValues returns all PlatformShopUpdatingResponseAPIKeyDisplayFlag values.
func (PlatformShopUpdatingResponseAPIKeyDisplayFlag) AllValues() []PlatformShopUpdatingResponseAPIKeyDisplayFlag {
	return []PlatformShopUpdatingResponseAPIKeyDisplayFlag{
		PlatformShopUpdatingResponseAPIKeyDisplayFlag0,
		PlatformShopUpdatingResponseAPIKeyDisplayFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformShopUpdatingResponseAPIKeyDisplayFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlatformShopUpdatingResponseAPIKeyDisplayFlag0:
		return []byte(s), nil
	case PlatformShopUpdatingResponseAPIKeyDisplayFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformShopUpdatingResponseAPIKeyDisplayFlag) UnmarshalText(data []byte) error {
	switch PlatformShopUpdatingResponseAPIKeyDisplayFlag(data) {
	case PlatformShopUpdatingResponseAPIKeyDisplayFlag0:
		*s = PlatformShopUpdatingResponseAPIKeyDisplayFlag0
		return nil
	case PlatformShopUpdatingResponseAPIKeyDisplayFlag1:
		*s = PlatformShopUpdatingResponseAPIKeyDisplayFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 顧客情報共有フラグ
// - `0`: 顧客情報を共有しない<br /><span
// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
// - `1`: 顧客情報を共有する<br /><span
// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
type PlatformShopUpdatingResponseSharedCustomerFlag string

const (
	PlatformShopUpdatingResponseSharedCustomerFlag0 PlatformShopUpdatingResponseSharedCustomerFlag = "0"
	PlatformShopUpdatingResponseSharedCustomerFlag1 PlatformShopUpdatingResponseSharedCustomerFlag = "1"
)

// AllValues returns all PlatformShopUpdatingResponseSharedCustomerFlag values.
func (PlatformShopUpdatingResponseSharedCustomerFlag) AllValues() []PlatformShopUpdatingResponseSharedCustomerFlag {
	return []PlatformShopUpdatingResponseSharedCustomerFlag{
		PlatformShopUpdatingResponseSharedCustomerFlag0,
		PlatformShopUpdatingResponseSharedCustomerFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformShopUpdatingResponseSharedCustomerFlag) MarshalText() ([]byte, error) {
	switch s {
	case PlatformShopUpdatingResponseSharedCustomerFlag0:
		return []byte(s), nil
	case PlatformShopUpdatingResponseSharedCustomerFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformShopUpdatingResponseSharedCustomerFlag) UnmarshalText(data []byte) error {
	switch PlatformShopUpdatingResponseSharedCustomerFlag(data) {
	case PlatformShopUpdatingResponseSharedCustomerFlag0:
		*s = PlatformShopUpdatingResponseSharedCustomerFlag0
		return nil
	case PlatformShopUpdatingResponseSharedCustomerFlag1:
		*s = PlatformShopUpdatingResponseSharedCustomerFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type PlatformShopUpdatingResponseShopType string

const (
	PlatformShopUpdatingResponseShopTypePlatform PlatformShopUpdatingResponseShopType = "platform"
	PlatformShopUpdatingResponseShopTypeTenant   PlatformShopUpdatingResponseShopType = "tenant"
)

// AllValues returns all PlatformShopUpdatingResponseShopType values.
func (PlatformShopUpdatingResponseShopType) AllValues() []PlatformShopUpdatingResponseShopType {
	return []PlatformShopUpdatingResponseShopType{
		PlatformShopUpdatingResponseShopTypePlatform,
		PlatformShopUpdatingResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PlatformShopUpdatingResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case PlatformShopUpdatingResponseShopTypePlatform:
		return []byte(s), nil
	case PlatformShopUpdatingResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PlatformShopUpdatingResponseShopType) UnmarshalText(data []byte) error {
	switch PlatformShopUpdatingResponseShopType(data) {
	case PlatformShopUpdatingResponseShopTypePlatform:
		*s = PlatformShopUpdatingResponseShopTypePlatform
		return nil
	case PlatformShopUpdatingResponseShopTypeTenant:
		*s = PlatformShopUpdatingResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type PublicBearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *PublicBearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *PublicBearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/3DS.Authorizing.Request
type R3DSAuthorizingRequest struct {
	Param OptString `json:"param"`
}

// GetParam returns the value of Param.
func (s *R3DSAuthorizingRequest) GetParam() OptString {
	return s.Param
}

// SetParam sets the value of Param.
func (s *R3DSAuthorizingRequest) SetParam(val OptString) {
	s.Param = val
}

// Merged schema.
// Ref: #/components/schemas/3DS.Authorizing.Response
type R3DSAuthorizingResponse struct {
	// 3Dセキュア2.0認証チャレンジURL\
	// \
	// 購入者による`acs_url`へのアクセス後、カード発行会社によって追加のチャレンジ認証が必要と判定された場合、このパラメータにURLが設定されて返却されます。.
	ChallengeURL          OptNilString                                    `json:"challenge_url"`
	Tds2TransResult       OptR3DSAuthorizingResponseTds2TransResult       `json:"tds2_trans_result"`
	Tds2TransResultReason OptR3DSAuthorizingResponseTds2TransResultReason `json:"tds2_trans_result_reason"`
}

// GetChallengeURL returns the value of ChallengeURL.
func (s *R3DSAuthorizingResponse) GetChallengeURL() OptNilString {
	return s.ChallengeURL
}

// GetTds2TransResult returns the value of Tds2TransResult.
func (s *R3DSAuthorizingResponse) GetTds2TransResult() OptR3DSAuthorizingResponseTds2TransResult {
	return s.Tds2TransResult
}

// GetTds2TransResultReason returns the value of Tds2TransResultReason.
func (s *R3DSAuthorizingResponse) GetTds2TransResultReason() OptR3DSAuthorizingResponseTds2TransResultReason {
	return s.Tds2TransResultReason
}

// SetChallengeURL sets the value of ChallengeURL.
func (s *R3DSAuthorizingResponse) SetChallengeURL(val OptNilString) {
	s.ChallengeURL = val
}

// SetTds2TransResult sets the value of Tds2TransResult.
func (s *R3DSAuthorizingResponse) SetTds2TransResult(val OptR3DSAuthorizingResponseTds2TransResult) {
	s.Tds2TransResult = val
}

// SetTds2TransResultReason sets the value of Tds2TransResultReason.
func (s *R3DSAuthorizingResponse) SetTds2TransResultReason(val OptR3DSAuthorizingResponseTds2TransResultReason) {
	s.Tds2TransResultReason = val
}

func (*R3DSAuthorizingResponse) execute3DSecureAuthenticationRes() {}

// 3Dセキュア2.0認証処理 結果
// - `Y`: 認証に成功
// - `A`: 認証の試行が認められた<br><span class="smallText">認証 /
// 確認は行われなかったが、認証 /
// 確認を試行したことの証拠は提供されている</span>
// - `C`: 追加のチャレンジ認証が必要<br><span
// class="smallText">購入者による`challenge_url`上での追加認証が必要</span>
// - `N`: 取引拒否もしくは未認証・口座未確認
// - `R`: 認証・口座確認拒否<br><span
// class="smallText">カード発行会社が認証を拒否し、承認を試行しないよう要求している</span>
// - `U`: 認証・口座確認の実行失敗または技術的な問題.
type R3DSAuthorizingResponseTds2TransResult string

const (
	R3DSAuthorizingResponseTds2TransResultY R3DSAuthorizingResponseTds2TransResult = "Y"
	R3DSAuthorizingResponseTds2TransResultA R3DSAuthorizingResponseTds2TransResult = "A"
	R3DSAuthorizingResponseTds2TransResultC R3DSAuthorizingResponseTds2TransResult = "C"
	R3DSAuthorizingResponseTds2TransResultN R3DSAuthorizingResponseTds2TransResult = "N"
	R3DSAuthorizingResponseTds2TransResultU R3DSAuthorizingResponseTds2TransResult = "U"
	R3DSAuthorizingResponseTds2TransResultR R3DSAuthorizingResponseTds2TransResult = "R"
)

// AllValues returns all R3DSAuthorizingResponseTds2TransResult values.
func (R3DSAuthorizingResponseTds2TransResult) AllValues() []R3DSAuthorizingResponseTds2TransResult {
	return []R3DSAuthorizingResponseTds2TransResult{
		R3DSAuthorizingResponseTds2TransResultY,
		R3DSAuthorizingResponseTds2TransResultA,
		R3DSAuthorizingResponseTds2TransResultC,
		R3DSAuthorizingResponseTds2TransResultN,
		R3DSAuthorizingResponseTds2TransResultU,
		R3DSAuthorizingResponseTds2TransResultR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s R3DSAuthorizingResponseTds2TransResult) MarshalText() ([]byte, error) {
	switch s {
	case R3DSAuthorizingResponseTds2TransResultY:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultA:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultC:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultN:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultU:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *R3DSAuthorizingResponseTds2TransResult) UnmarshalText(data []byte) error {
	switch R3DSAuthorizingResponseTds2TransResult(data) {
	case R3DSAuthorizingResponseTds2TransResultY:
		*s = R3DSAuthorizingResponseTds2TransResultY
		return nil
	case R3DSAuthorizingResponseTds2TransResultA:
		*s = R3DSAuthorizingResponseTds2TransResultA
		return nil
	case R3DSAuthorizingResponseTds2TransResultC:
		*s = R3DSAuthorizingResponseTds2TransResultC
		return nil
	case R3DSAuthorizingResponseTds2TransResultN:
		*s = R3DSAuthorizingResponseTds2TransResultN
		return nil
	case R3DSAuthorizingResponseTds2TransResultU:
		*s = R3DSAuthorizingResponseTds2TransResultU
		return nil
	case R3DSAuthorizingResponseTds2TransResultR:
		*s = R3DSAuthorizingResponseTds2TransResultR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証結果の理由コード\
// \
// 3Dセキュア認証2.0の結果（`tds2_trans_result`）の理由を示すコードです。
// - `01`: カード認証に失敗
// - `02`: 不明なデバイス
// - `03`: サポートされていないデバイス
// - `04`: 認証頻度の上限を超えた
// - `05`: 有効期限切れのカード
// - `06`: 無効なカード番号
// - `07`: 無効な取引
// - `08`: カードのレコードが存在しない
// - `09`: セキュリティ障害
// - `10`: 盗難カード
// - `11`: 不正の疑い
// - `12`: カード会員に取引が許可されていない
// - `13`: カード会員がサービスに登録されていない
// - `14`: 取引が3Dセキュア処理サービスでタイムアウトした
// - `15`: 信頼度が低い
// - `16`: 信頼度が中程度
// - `17`: 信頼度が高い
// - `18`: 信頼度が非常に高い
// - `19`: 3Dセキュア処理サービスの最大チャレンジを超える
// - `20`: 非決済取引はサポートされていません
// - `21`: 3RIトランザクションはサポートされていません
// - `22`: 3Dセキュア処理サービスの技術的な問題
// - `23`:
// 3Dセキュア処理サービスによってデカップルド認証が必要と判断されたが、3DSリクエスターからは要求されていない
// - `24`: 3DS Requestor Decoupled Max Timeを超過
// - `25`:
// デカップルド認証のためのカード会員を認証するのに十分な時間が与えられなかった
// - `26`: 認証は試行されたが、カード会員によって実行されなかった.
type R3DSAuthorizingResponseTds2TransResultReason string

const (
	R3DSAuthorizingResponseTds2TransResultReason01   R3DSAuthorizingResponseTds2TransResultReason = "01"
	R3DSAuthorizingResponseTds2TransResultReason02   R3DSAuthorizingResponseTds2TransResultReason = "02"
	R3DSAuthorizingResponseTds2TransResultReason03   R3DSAuthorizingResponseTds2TransResultReason = "03"
	R3DSAuthorizingResponseTds2TransResultReason04   R3DSAuthorizingResponseTds2TransResultReason = "04"
	R3DSAuthorizingResponseTds2TransResultReason05   R3DSAuthorizingResponseTds2TransResultReason = "05"
	R3DSAuthorizingResponseTds2TransResultReason06   R3DSAuthorizingResponseTds2TransResultReason = "06"
	R3DSAuthorizingResponseTds2TransResultReason07   R3DSAuthorizingResponseTds2TransResultReason = "07"
	R3DSAuthorizingResponseTds2TransResultReason08   R3DSAuthorizingResponseTds2TransResultReason = "08"
	R3DSAuthorizingResponseTds2TransResultReason09   R3DSAuthorizingResponseTds2TransResultReason = "09"
	R3DSAuthorizingResponseTds2TransResultReason11   R3DSAuthorizingResponseTds2TransResultReason = "11"
	R3DSAuthorizingResponseTds2TransResultReason12   R3DSAuthorizingResponseTds2TransResultReason = "12"
	R3DSAuthorizingResponseTds2TransResultReason13   R3DSAuthorizingResponseTds2TransResultReason = "13"
	R3DSAuthorizingResponseTds2TransResultReason14   R3DSAuthorizingResponseTds2TransResultReason = "14"
	R3DSAuthorizingResponseTds2TransResultReason15   R3DSAuthorizingResponseTds2TransResultReason = "15"
	R3DSAuthorizingResponseTds2TransResultReason16   R3DSAuthorizingResponseTds2TransResultReason = "16"
	R3DSAuthorizingResponseTds2TransResultReason17   R3DSAuthorizingResponseTds2TransResultReason = "17"
	R3DSAuthorizingResponseTds2TransResultReason18   R3DSAuthorizingResponseTds2TransResultReason = "18"
	R3DSAuthorizingResponseTds2TransResultReason19   R3DSAuthorizingResponseTds2TransResultReason = "19"
	R3DSAuthorizingResponseTds2TransResultReason20   R3DSAuthorizingResponseTds2TransResultReason = "20"
	R3DSAuthorizingResponseTds2TransResultReason21   R3DSAuthorizingResponseTds2TransResultReason = "21"
	R3DSAuthorizingResponseTds2TransResultReason22   R3DSAuthorizingResponseTds2TransResultReason = "22"
	R3DSAuthorizingResponseTds2TransResultReason23   R3DSAuthorizingResponseTds2TransResultReason = "23"
	R3DSAuthorizingResponseTds2TransResultReason24   R3DSAuthorizingResponseTds2TransResultReason = "24"
	R3DSAuthorizingResponseTds2TransResultReason25   R3DSAuthorizingResponseTds2TransResultReason = "25"
	R3DSAuthorizingResponseTds2TransResultReason26   R3DSAuthorizingResponseTds2TransResultReason = "26"
	R3DSAuthorizingResponseTds2TransResultReason8099 R3DSAuthorizingResponseTds2TransResultReason = "80...99"
)

// AllValues returns all R3DSAuthorizingResponseTds2TransResultReason values.
func (R3DSAuthorizingResponseTds2TransResultReason) AllValues() []R3DSAuthorizingResponseTds2TransResultReason {
	return []R3DSAuthorizingResponseTds2TransResultReason{
		R3DSAuthorizingResponseTds2TransResultReason01,
		R3DSAuthorizingResponseTds2TransResultReason02,
		R3DSAuthorizingResponseTds2TransResultReason03,
		R3DSAuthorizingResponseTds2TransResultReason04,
		R3DSAuthorizingResponseTds2TransResultReason05,
		R3DSAuthorizingResponseTds2TransResultReason06,
		R3DSAuthorizingResponseTds2TransResultReason07,
		R3DSAuthorizingResponseTds2TransResultReason08,
		R3DSAuthorizingResponseTds2TransResultReason09,
		R3DSAuthorizingResponseTds2TransResultReason11,
		R3DSAuthorizingResponseTds2TransResultReason12,
		R3DSAuthorizingResponseTds2TransResultReason13,
		R3DSAuthorizingResponseTds2TransResultReason14,
		R3DSAuthorizingResponseTds2TransResultReason15,
		R3DSAuthorizingResponseTds2TransResultReason16,
		R3DSAuthorizingResponseTds2TransResultReason17,
		R3DSAuthorizingResponseTds2TransResultReason18,
		R3DSAuthorizingResponseTds2TransResultReason19,
		R3DSAuthorizingResponseTds2TransResultReason20,
		R3DSAuthorizingResponseTds2TransResultReason21,
		R3DSAuthorizingResponseTds2TransResultReason22,
		R3DSAuthorizingResponseTds2TransResultReason23,
		R3DSAuthorizingResponseTds2TransResultReason24,
		R3DSAuthorizingResponseTds2TransResultReason25,
		R3DSAuthorizingResponseTds2TransResultReason26,
		R3DSAuthorizingResponseTds2TransResultReason8099,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s R3DSAuthorizingResponseTds2TransResultReason) MarshalText() ([]byte, error) {
	switch s {
	case R3DSAuthorizingResponseTds2TransResultReason01:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason02:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason03:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason04:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason05:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason06:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason07:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason08:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason09:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason11:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason12:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason13:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason14:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason15:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason16:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason17:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason18:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason19:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason20:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason21:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason22:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason23:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason24:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason25:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason26:
		return []byte(s), nil
	case R3DSAuthorizingResponseTds2TransResultReason8099:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *R3DSAuthorizingResponseTds2TransResultReason) UnmarshalText(data []byte) error {
	switch R3DSAuthorizingResponseTds2TransResultReason(data) {
	case R3DSAuthorizingResponseTds2TransResultReason01:
		*s = R3DSAuthorizingResponseTds2TransResultReason01
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason02:
		*s = R3DSAuthorizingResponseTds2TransResultReason02
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason03:
		*s = R3DSAuthorizingResponseTds2TransResultReason03
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason04:
		*s = R3DSAuthorizingResponseTds2TransResultReason04
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason05:
		*s = R3DSAuthorizingResponseTds2TransResultReason05
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason06:
		*s = R3DSAuthorizingResponseTds2TransResultReason06
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason07:
		*s = R3DSAuthorizingResponseTds2TransResultReason07
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason08:
		*s = R3DSAuthorizingResponseTds2TransResultReason08
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason09:
		*s = R3DSAuthorizingResponseTds2TransResultReason09
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason11:
		*s = R3DSAuthorizingResponseTds2TransResultReason11
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason12:
		*s = R3DSAuthorizingResponseTds2TransResultReason12
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason13:
		*s = R3DSAuthorizingResponseTds2TransResultReason13
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason14:
		*s = R3DSAuthorizingResponseTds2TransResultReason14
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason15:
		*s = R3DSAuthorizingResponseTds2TransResultReason15
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason16:
		*s = R3DSAuthorizingResponseTds2TransResultReason16
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason17:
		*s = R3DSAuthorizingResponseTds2TransResultReason17
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason18:
		*s = R3DSAuthorizingResponseTds2TransResultReason18
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason19:
		*s = R3DSAuthorizingResponseTds2TransResultReason19
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason20:
		*s = R3DSAuthorizingResponseTds2TransResultReason20
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason21:
		*s = R3DSAuthorizingResponseTds2TransResultReason21
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason22:
		*s = R3DSAuthorizingResponseTds2TransResultReason22
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason23:
		*s = R3DSAuthorizingResponseTds2TransResultReason23
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason24:
		*s = R3DSAuthorizingResponseTds2TransResultReason24
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason25:
		*s = R3DSAuthorizingResponseTds2TransResultReason25
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason26:
		*s = R3DSAuthorizingResponseTds2TransResultReason26
		return nil
	case R3DSAuthorizingResponseTds2TransResultReason8099:
		*s = R3DSAuthorizingResponseTds2TransResultReason8099
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/3DS.Confirming.Response
type R3DSConfirmingResponse struct {
	Tds2TransResult       OptR3DSConfirmingResponseTds2TransResult       `json:"tds2_trans_result"`
	Tds2TransResultReason OptR3DSConfirmingResponseTds2TransResultReason `json:"tds2_trans_result_reason"`
}

// GetTds2TransResult returns the value of Tds2TransResult.
func (s *R3DSConfirmingResponse) GetTds2TransResult() OptR3DSConfirmingResponseTds2TransResult {
	return s.Tds2TransResult
}

// GetTds2TransResultReason returns the value of Tds2TransResultReason.
func (s *R3DSConfirmingResponse) GetTds2TransResultReason() OptR3DSConfirmingResponseTds2TransResultReason {
	return s.Tds2TransResultReason
}

// SetTds2TransResult sets the value of Tds2TransResult.
func (s *R3DSConfirmingResponse) SetTds2TransResult(val OptR3DSConfirmingResponseTds2TransResult) {
	s.Tds2TransResult = val
}

// SetTds2TransResultReason sets the value of Tds2TransResultReason.
func (s *R3DSConfirmingResponse) SetTds2TransResultReason(val OptR3DSConfirmingResponseTds2TransResultReason) {
	s.Tds2TransResultReason = val
}

func (*R3DSConfirmingResponse) confirm3DSecureAuthenticationRes() {}

// 3Dセキュア2.0認証処理 結果
// - `Y`: 認証に成功
// - `A`: 認証の試行が認められた<br><span class="smallText">認証 /
// 確認は行われなかったが、認証 /
// 確認を試行したことの証拠は提供されている</span>
// - `C`: 追加のチャレンジ認証が必要<br><span
// class="smallText">購入者による`challenge_url`上での追加認証が必要</span>
// - `N`: 取引拒否もしくは未認証・口座未確認
// - `R`: 認証・口座確認拒否<br><span
// class="smallText">カード発行会社が認証を拒否し、承認を試行しないよう要求している</span>
// - `U`: 認証・口座確認の実行失敗または技術的な問題.
type R3DSConfirmingResponseTds2TransResult string

const (
	R3DSConfirmingResponseTds2TransResultY R3DSConfirmingResponseTds2TransResult = "Y"
	R3DSConfirmingResponseTds2TransResultA R3DSConfirmingResponseTds2TransResult = "A"
	R3DSConfirmingResponseTds2TransResultC R3DSConfirmingResponseTds2TransResult = "C"
	R3DSConfirmingResponseTds2TransResultN R3DSConfirmingResponseTds2TransResult = "N"
	R3DSConfirmingResponseTds2TransResultU R3DSConfirmingResponseTds2TransResult = "U"
	R3DSConfirmingResponseTds2TransResultR R3DSConfirmingResponseTds2TransResult = "R"
)

// AllValues returns all R3DSConfirmingResponseTds2TransResult values.
func (R3DSConfirmingResponseTds2TransResult) AllValues() []R3DSConfirmingResponseTds2TransResult {
	return []R3DSConfirmingResponseTds2TransResult{
		R3DSConfirmingResponseTds2TransResultY,
		R3DSConfirmingResponseTds2TransResultA,
		R3DSConfirmingResponseTds2TransResultC,
		R3DSConfirmingResponseTds2TransResultN,
		R3DSConfirmingResponseTds2TransResultU,
		R3DSConfirmingResponseTds2TransResultR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s R3DSConfirmingResponseTds2TransResult) MarshalText() ([]byte, error) {
	switch s {
	case R3DSConfirmingResponseTds2TransResultY:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultA:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultC:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultN:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultU:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *R3DSConfirmingResponseTds2TransResult) UnmarshalText(data []byte) error {
	switch R3DSConfirmingResponseTds2TransResult(data) {
	case R3DSConfirmingResponseTds2TransResultY:
		*s = R3DSConfirmingResponseTds2TransResultY
		return nil
	case R3DSConfirmingResponseTds2TransResultA:
		*s = R3DSConfirmingResponseTds2TransResultA
		return nil
	case R3DSConfirmingResponseTds2TransResultC:
		*s = R3DSConfirmingResponseTds2TransResultC
		return nil
	case R3DSConfirmingResponseTds2TransResultN:
		*s = R3DSConfirmingResponseTds2TransResultN
		return nil
	case R3DSConfirmingResponseTds2TransResultU:
		*s = R3DSConfirmingResponseTds2TransResultU
		return nil
	case R3DSConfirmingResponseTds2TransResultR:
		*s = R3DSConfirmingResponseTds2TransResultR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証結果の理由コード\
// \
// 3Dセキュア認証2.0の結果（`tds2_trans_result`）の理由を示すコードです。
// - `01`: カード認証に失敗
// - `02`: 不明なデバイス
// - `03`: サポートされていないデバイス
// - `04`: 認証頻度の上限を超えた
// - `05`: 有効期限切れのカード
// - `06`: 無効なカード番号
// - `07`: 無効な取引
// - `08`: カードのレコードが存在しない
// - `09`: セキュリティ障害
// - `10`: 盗難カード
// - `11`: 不正の疑い
// - `12`: カード会員に取引が許可されていない
// - `13`: カード会員がサービスに登録されていない
// - `14`: 取引が3Dセキュア処理サービスでタイムアウトした
// - `15`: 信頼度が低い
// - `16`: 信頼度が中程度
// - `17`: 信頼度が高い
// - `18`: 信頼度が非常に高い
// - `19`: 3Dセキュア処理サービスの最大チャレンジを超える
// - `20`: 非決済取引はサポートされていません
// - `21`: 3RIトランザクションはサポートされていません
// - `22`: 3Dセキュア処理サービスの技術的な問題
// - `23`:
// 3Dセキュア処理サービスによってデカップルド認証が必要と判断されたが、3DSリクエスターからは要求されていない
// - `24`: 3DS Requestor Decoupled Max Timeを超過
// - `25`:
// デカップルド認証のためのカード会員を認証するのに十分な時間が与えられなかった
// - `26`: 認証は試行されたが、カード会員によって実行されなかった.
type R3DSConfirmingResponseTds2TransResultReason string

const (
	R3DSConfirmingResponseTds2TransResultReason01   R3DSConfirmingResponseTds2TransResultReason = "01"
	R3DSConfirmingResponseTds2TransResultReason02   R3DSConfirmingResponseTds2TransResultReason = "02"
	R3DSConfirmingResponseTds2TransResultReason03   R3DSConfirmingResponseTds2TransResultReason = "03"
	R3DSConfirmingResponseTds2TransResultReason04   R3DSConfirmingResponseTds2TransResultReason = "04"
	R3DSConfirmingResponseTds2TransResultReason05   R3DSConfirmingResponseTds2TransResultReason = "05"
	R3DSConfirmingResponseTds2TransResultReason06   R3DSConfirmingResponseTds2TransResultReason = "06"
	R3DSConfirmingResponseTds2TransResultReason07   R3DSConfirmingResponseTds2TransResultReason = "07"
	R3DSConfirmingResponseTds2TransResultReason08   R3DSConfirmingResponseTds2TransResultReason = "08"
	R3DSConfirmingResponseTds2TransResultReason09   R3DSConfirmingResponseTds2TransResultReason = "09"
	R3DSConfirmingResponseTds2TransResultReason11   R3DSConfirmingResponseTds2TransResultReason = "11"
	R3DSConfirmingResponseTds2TransResultReason12   R3DSConfirmingResponseTds2TransResultReason = "12"
	R3DSConfirmingResponseTds2TransResultReason13   R3DSConfirmingResponseTds2TransResultReason = "13"
	R3DSConfirmingResponseTds2TransResultReason14   R3DSConfirmingResponseTds2TransResultReason = "14"
	R3DSConfirmingResponseTds2TransResultReason15   R3DSConfirmingResponseTds2TransResultReason = "15"
	R3DSConfirmingResponseTds2TransResultReason16   R3DSConfirmingResponseTds2TransResultReason = "16"
	R3DSConfirmingResponseTds2TransResultReason17   R3DSConfirmingResponseTds2TransResultReason = "17"
	R3DSConfirmingResponseTds2TransResultReason18   R3DSConfirmingResponseTds2TransResultReason = "18"
	R3DSConfirmingResponseTds2TransResultReason19   R3DSConfirmingResponseTds2TransResultReason = "19"
	R3DSConfirmingResponseTds2TransResultReason20   R3DSConfirmingResponseTds2TransResultReason = "20"
	R3DSConfirmingResponseTds2TransResultReason21   R3DSConfirmingResponseTds2TransResultReason = "21"
	R3DSConfirmingResponseTds2TransResultReason22   R3DSConfirmingResponseTds2TransResultReason = "22"
	R3DSConfirmingResponseTds2TransResultReason23   R3DSConfirmingResponseTds2TransResultReason = "23"
	R3DSConfirmingResponseTds2TransResultReason24   R3DSConfirmingResponseTds2TransResultReason = "24"
	R3DSConfirmingResponseTds2TransResultReason25   R3DSConfirmingResponseTds2TransResultReason = "25"
	R3DSConfirmingResponseTds2TransResultReason26   R3DSConfirmingResponseTds2TransResultReason = "26"
	R3DSConfirmingResponseTds2TransResultReason8099 R3DSConfirmingResponseTds2TransResultReason = "80...99"
)

// AllValues returns all R3DSConfirmingResponseTds2TransResultReason values.
func (R3DSConfirmingResponseTds2TransResultReason) AllValues() []R3DSConfirmingResponseTds2TransResultReason {
	return []R3DSConfirmingResponseTds2TransResultReason{
		R3DSConfirmingResponseTds2TransResultReason01,
		R3DSConfirmingResponseTds2TransResultReason02,
		R3DSConfirmingResponseTds2TransResultReason03,
		R3DSConfirmingResponseTds2TransResultReason04,
		R3DSConfirmingResponseTds2TransResultReason05,
		R3DSConfirmingResponseTds2TransResultReason06,
		R3DSConfirmingResponseTds2TransResultReason07,
		R3DSConfirmingResponseTds2TransResultReason08,
		R3DSConfirmingResponseTds2TransResultReason09,
		R3DSConfirmingResponseTds2TransResultReason11,
		R3DSConfirmingResponseTds2TransResultReason12,
		R3DSConfirmingResponseTds2TransResultReason13,
		R3DSConfirmingResponseTds2TransResultReason14,
		R3DSConfirmingResponseTds2TransResultReason15,
		R3DSConfirmingResponseTds2TransResultReason16,
		R3DSConfirmingResponseTds2TransResultReason17,
		R3DSConfirmingResponseTds2TransResultReason18,
		R3DSConfirmingResponseTds2TransResultReason19,
		R3DSConfirmingResponseTds2TransResultReason20,
		R3DSConfirmingResponseTds2TransResultReason21,
		R3DSConfirmingResponseTds2TransResultReason22,
		R3DSConfirmingResponseTds2TransResultReason23,
		R3DSConfirmingResponseTds2TransResultReason24,
		R3DSConfirmingResponseTds2TransResultReason25,
		R3DSConfirmingResponseTds2TransResultReason26,
		R3DSConfirmingResponseTds2TransResultReason8099,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s R3DSConfirmingResponseTds2TransResultReason) MarshalText() ([]byte, error) {
	switch s {
	case R3DSConfirmingResponseTds2TransResultReason01:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason02:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason03:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason04:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason05:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason06:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason07:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason08:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason09:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason11:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason12:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason13:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason14:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason15:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason16:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason17:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason18:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason19:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason20:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason21:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason22:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason23:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason24:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason25:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason26:
		return []byte(s), nil
	case R3DSConfirmingResponseTds2TransResultReason8099:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *R3DSConfirmingResponseTds2TransResultReason) UnmarshalText(data []byte) error {
	switch R3DSConfirmingResponseTds2TransResultReason(data) {
	case R3DSConfirmingResponseTds2TransResultReason01:
		*s = R3DSConfirmingResponseTds2TransResultReason01
		return nil
	case R3DSConfirmingResponseTds2TransResultReason02:
		*s = R3DSConfirmingResponseTds2TransResultReason02
		return nil
	case R3DSConfirmingResponseTds2TransResultReason03:
		*s = R3DSConfirmingResponseTds2TransResultReason03
		return nil
	case R3DSConfirmingResponseTds2TransResultReason04:
		*s = R3DSConfirmingResponseTds2TransResultReason04
		return nil
	case R3DSConfirmingResponseTds2TransResultReason05:
		*s = R3DSConfirmingResponseTds2TransResultReason05
		return nil
	case R3DSConfirmingResponseTds2TransResultReason06:
		*s = R3DSConfirmingResponseTds2TransResultReason06
		return nil
	case R3DSConfirmingResponseTds2TransResultReason07:
		*s = R3DSConfirmingResponseTds2TransResultReason07
		return nil
	case R3DSConfirmingResponseTds2TransResultReason08:
		*s = R3DSConfirmingResponseTds2TransResultReason08
		return nil
	case R3DSConfirmingResponseTds2TransResultReason09:
		*s = R3DSConfirmingResponseTds2TransResultReason09
		return nil
	case R3DSConfirmingResponseTds2TransResultReason11:
		*s = R3DSConfirmingResponseTds2TransResultReason11
		return nil
	case R3DSConfirmingResponseTds2TransResultReason12:
		*s = R3DSConfirmingResponseTds2TransResultReason12
		return nil
	case R3DSConfirmingResponseTds2TransResultReason13:
		*s = R3DSConfirmingResponseTds2TransResultReason13
		return nil
	case R3DSConfirmingResponseTds2TransResultReason14:
		*s = R3DSConfirmingResponseTds2TransResultReason14
		return nil
	case R3DSConfirmingResponseTds2TransResultReason15:
		*s = R3DSConfirmingResponseTds2TransResultReason15
		return nil
	case R3DSConfirmingResponseTds2TransResultReason16:
		*s = R3DSConfirmingResponseTds2TransResultReason16
		return nil
	case R3DSConfirmingResponseTds2TransResultReason17:
		*s = R3DSConfirmingResponseTds2TransResultReason17
		return nil
	case R3DSConfirmingResponseTds2TransResultReason18:
		*s = R3DSConfirmingResponseTds2TransResultReason18
		return nil
	case R3DSConfirmingResponseTds2TransResultReason19:
		*s = R3DSConfirmingResponseTds2TransResultReason19
		return nil
	case R3DSConfirmingResponseTds2TransResultReason20:
		*s = R3DSConfirmingResponseTds2TransResultReason20
		return nil
	case R3DSConfirmingResponseTds2TransResultReason21:
		*s = R3DSConfirmingResponseTds2TransResultReason21
		return nil
	case R3DSConfirmingResponseTds2TransResultReason22:
		*s = R3DSConfirmingResponseTds2TransResultReason22
		return nil
	case R3DSConfirmingResponseTds2TransResultReason23:
		*s = R3DSConfirmingResponseTds2TransResultReason23
		return nil
	case R3DSConfirmingResponseTds2TransResultReason24:
		*s = R3DSConfirmingResponseTds2TransResultReason24
		return nil
	case R3DSConfirmingResponseTds2TransResultReason25:
		*s = R3DSConfirmingResponseTds2TransResultReason25
		return nil
	case R3DSConfirmingResponseTds2TransResultReason26:
		*s = R3DSConfirmingResponseTds2TransResultReason26
		return nil
	case R3DSConfirmingResponseTds2TransResultReason8099:
		*s = R3DSConfirmingResponseTds2TransResultReason8099
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ReceiveWebhookOfApplePayPaymentBadRequest is response for ReceiveWebhookOfApplePayPayment operation.
type ReceiveWebhookOfApplePayPaymentBadRequest struct{}

func (*ReceiveWebhookOfApplePayPaymentBadRequest) receiveWebhookOfApplePayPaymentRes() {}

// ReceiveWebhookOfCardBadRequest is response for ReceiveWebhookOfCard operation.
type ReceiveWebhookOfCardBadRequest struct{}

func (*ReceiveWebhookOfCardBadRequest) receiveWebhookOfCardRes() {}

// ReceiveWebhookOfCardPaymentBadRequest is response for ReceiveWebhookOfCardPayment operation.
type ReceiveWebhookOfCardPaymentBadRequest struct{}

func (*ReceiveWebhookOfCardPaymentBadRequest) receiveWebhookOfCardPaymentRes() {}

// ReceiveWebhookOfCardPaymentBulkBatchBadRequest is response for ReceiveWebhookOfCardPaymentBulkBatch operation.
type ReceiveWebhookOfCardPaymentBulkBatchBadRequest struct{}

func (*ReceiveWebhookOfCardPaymentBulkBatchBadRequest) receiveWebhookOfCardPaymentBulkBatchRes() {}

// ReceiveWebhookOfCardRecurringBatchBadRequest is response for ReceiveWebhookOfCardRecurringBatch operation.
type ReceiveWebhookOfCardRecurringBatchBadRequest struct{}

func (*ReceiveWebhookOfCardRecurringBatchBadRequest) receiveWebhookOfCardRecurringBatchRes() {}

// ReceiveWebhookOfCardSubscriptionBadRequest is response for ReceiveWebhookOfCardSubscription operation.
type ReceiveWebhookOfCardSubscriptionBadRequest struct{}

func (*ReceiveWebhookOfCardSubscriptionBadRequest) receiveWebhookOfCardSubscriptionRes() {}

// ReceiveWebhookOfContractBadRequest is response for ReceiveWebhookOfContract operation.
type ReceiveWebhookOfContractBadRequest struct{}

func (*ReceiveWebhookOfContractBadRequest) receiveWebhookOfContractRes() {}

// ReceiveWebhookOfCustomerPaymentMethodBadRequest is response for ReceiveWebhookOfCustomerPaymentMethod operation.
type ReceiveWebhookOfCustomerPaymentMethodBadRequest struct{}

func (*ReceiveWebhookOfCustomerPaymentMethodBadRequest) receiveWebhookOfCustomerPaymentMethodRes() {}

// ReceiveWebhookOfDirectDebitPaymentBadRequest is response for ReceiveWebhookOfDirectDebitPayment operation.
type ReceiveWebhookOfDirectDebitPaymentBadRequest struct{}

func (*ReceiveWebhookOfDirectDebitPaymentBadRequest) receiveWebhookOfDirectDebitPaymentRes() {}

// ReceiveWebhookOfDirectDebitRecurringBatchBadRequest is response for ReceiveWebhookOfDirectDebitRecurringBatch operation.
type ReceiveWebhookOfDirectDebitRecurringBatchBadRequest struct{}

func (*ReceiveWebhookOfDirectDebitRecurringBatchBadRequest) receiveWebhookOfDirectDebitRecurringBatchRes() {
}

// ReceiveWebhookOfDirectDebitSubscriptionBadRequest is response for ReceiveWebhookOfDirectDebitSubscription operation.
type ReceiveWebhookOfDirectDebitSubscriptionBadRequest struct{}

func (*ReceiveWebhookOfDirectDebitSubscriptionBadRequest) receiveWebhookOfDirectDebitSubscriptionRes() {
}

// ReceiveWebhookOfKonbiniPaymentBadRequest is response for ReceiveWebhookOfKonbiniPayment operation.
type ReceiveWebhookOfKonbiniPaymentBadRequest struct{}

func (*ReceiveWebhookOfKonbiniPaymentBadRequest) receiveWebhookOfKonbiniPaymentRes() {}

// ReceiveWebhookOfPayPayPaymentBadRequest is response for ReceiveWebhookOfPayPayPayment operation.
type ReceiveWebhookOfPayPayPaymentBadRequest struct{}

func (*ReceiveWebhookOfPayPayPaymentBadRequest) receiveWebhookOfPayPayPaymentRes() {}

// ReceiveWebhookOfRegisteringCardPaymentBulkBadRequest is response for ReceiveWebhookOfRegisteringCardPaymentBulk operation.
type ReceiveWebhookOfRegisteringCardPaymentBulkBadRequest struct{}

func (*ReceiveWebhookOfRegisteringCardPaymentBulkBadRequest) receiveWebhookOfRegisteringCardPaymentBulkRes() {
}

type RetrieveAccountDetailListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
}

// GetPage returns the value of Page.
func (s *RetrieveAccountDetailListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrieveAccountDetailListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrieveAccountDetailListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// SetPage sets the value of Page.
func (s *RetrieveAccountDetailListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveAccountDetailListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrieveAccountDetailListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// Merged schema.
type RetrieveAccountListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 確定日（入金サイクルの締め日）を月単位で絞り込みます。\
	// 形式： `yyyy/MM`.
	Processed OptNilString `json:"processed"`
	// 入金ステータス\
	// カンマ区切りにすることで複数指定（OR検索）できます。
	// - `3001`: 金額確定前
	// - `3002`: 金額確定済み
	// - `3003`: 入金済み
	// - `3004`: 入金停止中
	// - `3005`: 入金エラー
	// - `3006`: 請求中
	// - `3007`: 請求エラー
	// - `3008`: 請求停止中
	// - `3009`: 支払済み
	// - `3010`: 本人確認書類未確認
	// - `3011`: 精算済み
	// - `3012`: 入金開始前
	// - `3013`: 契約不成立.
	Status OptDepositStatusCode `json:"status"`
	// 入金予定日の範囲指定（開始日）を指定します。\
	// この日付以降に入金が行われた売上入金情報を検索できます。\
	// 形式： `yyyy/MM/dd`.
	ScheduledFrom OptNilDate `json:"scheduled_from"`
	// 入金予定日の範囲指定（終了日）を指定します。\
	// この日付以前に入金が行われた売上入金情報を検索できます。\
	// 形式： `yyyy/MM/dd`.
	ScheduledTo OptNilDate `json:"scheduled_to"`
}

// GetPage returns the value of Page.
func (s *RetrieveAccountListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrieveAccountListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrieveAccountListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetProcessed returns the value of Processed.
func (s *RetrieveAccountListQuery) GetProcessed() OptNilString {
	return s.Processed
}

// GetStatus returns the value of Status.
func (s *RetrieveAccountListQuery) GetStatus() OptDepositStatusCode {
	return s.Status
}

// GetScheduledFrom returns the value of ScheduledFrom.
func (s *RetrieveAccountListQuery) GetScheduledFrom() OptNilDate {
	return s.ScheduledFrom
}

// GetScheduledTo returns the value of ScheduledTo.
func (s *RetrieveAccountListQuery) GetScheduledTo() OptNilDate {
	return s.ScheduledTo
}

// SetPage sets the value of Page.
func (s *RetrieveAccountListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveAccountListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrieveAccountListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetProcessed sets the value of Processed.
func (s *RetrieveAccountListQuery) SetProcessed(val OptNilString) {
	s.Processed = val
}

// SetStatus sets the value of Status.
func (s *RetrieveAccountListQuery) SetStatus(val OptDepositStatusCode) {
	s.Status = val
}

// SetScheduledFrom sets the value of ScheduledFrom.
func (s *RetrieveAccountListQuery) SetScheduledFrom(val OptNilDate) {
	s.ScheduledFrom = val
}

// SetScheduledTo sets the value of ScheduledTo.
func (s *RetrieveAccountListQuery) SetScheduledTo(val OptNilDate) {
	s.ScheduledTo = val
}

// Merged schema.
type RetrieveCustomerListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 顧客ID.
	ID OptNilString `json:"id"`
	// 顧客名.
	Name OptNilString `json:"name"`
	// 顧客のメールアドレス.
	Email OptNilString `json:"email"`
	// 作成日の範囲指定 開始日\
	// この日付以降に作成された顧客情報を検索できます。\
	// 形式：`yyyy/MM/dd`.
	CreatedFrom OptNilString `json:"created_from"`
	// 作成日の範囲指定 終了日\
	// この日付以前に作成された顧客情報を検索できます。\
	// 形式：`yyyy/MM/dd`.
	CreatedTo OptNilString `json:"created_to"`
	// ソートする項目と順序を指定します。\
	// 例： `?sort=updated␣desc,created␣asc`\
	// \
	// ソート可能な項目
	// - `id`: 顧客ID
	// - `name`: 顧客名
	// - `email`: 顧客メールアドレス
	// - `created`: 作成日時
	// - `updated`: 更新日時.
	Sort OptNilString `json:"sort"`
}

// GetPage returns the value of Page.
func (s *RetrieveCustomerListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrieveCustomerListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrieveCustomerListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetID returns the value of ID.
func (s *RetrieveCustomerListQuery) GetID() OptNilString {
	return s.ID
}

// GetName returns the value of Name.
func (s *RetrieveCustomerListQuery) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *RetrieveCustomerListQuery) GetEmail() OptNilString {
	return s.Email
}

// GetCreatedFrom returns the value of CreatedFrom.
func (s *RetrieveCustomerListQuery) GetCreatedFrom() OptNilString {
	return s.CreatedFrom
}

// GetCreatedTo returns the value of CreatedTo.
func (s *RetrieveCustomerListQuery) GetCreatedTo() OptNilString {
	return s.CreatedTo
}

// GetSort returns the value of Sort.
func (s *RetrieveCustomerListQuery) GetSort() OptNilString {
	return s.Sort
}

// SetPage sets the value of Page.
func (s *RetrieveCustomerListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveCustomerListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrieveCustomerListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetID sets the value of ID.
func (s *RetrieveCustomerListQuery) SetID(val OptNilString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *RetrieveCustomerListQuery) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *RetrieveCustomerListQuery) SetEmail(val OptNilString) {
	s.Email = val
}

// SetCreatedFrom sets the value of CreatedFrom.
func (s *RetrieveCustomerListQuery) SetCreatedFrom(val OptNilString) {
	s.CreatedFrom = val
}

// SetCreatedTo sets the value of CreatedTo.
func (s *RetrieveCustomerListQuery) SetCreatedTo(val OptNilString) {
	s.CreatedTo = val
}

// SetSort sets the value of Sort.
func (s *RetrieveCustomerListQuery) SetSort(val OptNilString) {
	s.Sort = val
}

type RetrieveCustomerPaymentMethodListQuery struct {
	// 決済種別\
	// <span class="smallText">
	// ※
	// 現時点では`Directdebit`（口座振替）のみ指定可能です。カード情報を一覧で取得する場合は カード 一覧取得API を使用します。
	// </span>.
	PayType RetrieveCustomerPaymentMethodListQueryPayType `json:"pay_type"`
}

// GetPayType returns the value of PayType.
func (s *RetrieveCustomerPaymentMethodListQuery) GetPayType() RetrieveCustomerPaymentMethodListQueryPayType {
	return s.PayType
}

// SetPayType sets the value of PayType.
func (s *RetrieveCustomerPaymentMethodListQuery) SetPayType(val RetrieveCustomerPaymentMethodListQueryPayType) {
	s.PayType = val
}

// 決済種別（決済手段APIに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type RetrieveCustomerPaymentMethodListQueryPayType string

const (
	RetrieveCustomerPaymentMethodListQueryPayTypeCard        RetrieveCustomerPaymentMethodListQueryPayType = "Card"
	RetrieveCustomerPaymentMethodListQueryPayTypeDirectdebit RetrieveCustomerPaymentMethodListQueryPayType = "Directdebit"
)

// AllValues returns all RetrieveCustomerPaymentMethodListQueryPayType values.
func (RetrieveCustomerPaymentMethodListQueryPayType) AllValues() []RetrieveCustomerPaymentMethodListQueryPayType {
	return []RetrieveCustomerPaymentMethodListQueryPayType{
		RetrieveCustomerPaymentMethodListQueryPayTypeCard,
		RetrieveCustomerPaymentMethodListQueryPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrieveCustomerPaymentMethodListQueryPayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrieveCustomerPaymentMethodListQueryPayTypeCard:
		return []byte(s), nil
	case RetrieveCustomerPaymentMethodListQueryPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrieveCustomerPaymentMethodListQueryPayType) UnmarshalText(data []byte) error {
	switch RetrieveCustomerPaymentMethodListQueryPayType(data) {
	case RetrieveCustomerPaymentMethodListQueryPayTypeCard:
		*s = RetrieveCustomerPaymentMethodListQueryPayTypeCard
		return nil
	case RetrieveCustomerPaymentMethodListQueryPayTypeDirectdebit:
		*s = RetrieveCustomerPaymentMethodListQueryPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RetrieveCustomerPaymentMethodQuery struct {
	// 決済種別\
	// <span class="smallText">
	// ※
	// 現時点では`Directdebit`（口座振替）のみ指定可能です。カード情報を取得する場合は カード取得API を使用します。
	// </span>.
	PayType RetrieveCustomerPaymentMethodQueryPayType `json:"pay_type"`
}

// GetPayType returns the value of PayType.
func (s *RetrieveCustomerPaymentMethodQuery) GetPayType() RetrieveCustomerPaymentMethodQueryPayType {
	return s.PayType
}

// SetPayType sets the value of PayType.
func (s *RetrieveCustomerPaymentMethodQuery) SetPayType(val RetrieveCustomerPaymentMethodQueryPayType) {
	s.PayType = val
}

// 決済種別（決済手段APIに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type RetrieveCustomerPaymentMethodQueryPayType string

const (
	RetrieveCustomerPaymentMethodQueryPayTypeCard        RetrieveCustomerPaymentMethodQueryPayType = "Card"
	RetrieveCustomerPaymentMethodQueryPayTypeDirectdebit RetrieveCustomerPaymentMethodQueryPayType = "Directdebit"
)

// AllValues returns all RetrieveCustomerPaymentMethodQueryPayType values.
func (RetrieveCustomerPaymentMethodQueryPayType) AllValues() []RetrieveCustomerPaymentMethodQueryPayType {
	return []RetrieveCustomerPaymentMethodQueryPayType{
		RetrieveCustomerPaymentMethodQueryPayTypeCard,
		RetrieveCustomerPaymentMethodQueryPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrieveCustomerPaymentMethodQueryPayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrieveCustomerPaymentMethodQueryPayTypeCard:
		return []byte(s), nil
	case RetrieveCustomerPaymentMethodQueryPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrieveCustomerPaymentMethodQueryPayType) UnmarshalText(data []byte) error {
	switch RetrieveCustomerPaymentMethodQueryPayType(data) {
	case RetrieveCustomerPaymentMethodQueryPayTypeCard:
		*s = RetrieveCustomerPaymentMethodQueryPayTypeCard
		return nil
	case RetrieveCustomerPaymentMethodQueryPayTypeDirectdebit:
		*s = RetrieveCustomerPaymentMethodQueryPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePaymentBulkDetailListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 決済種別\
	// 決済種別を指定します。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType RetrievePaymentBulkDetailListQueryPayType `json:"pay_type"`
	OrderID OptString                                 `json:"order_id"`
	// ステータス\
	// 決済ステータスを指定します。カンマ区切りにすることで複数指定（OR検索）できます。
	// - `CHECKED`: チェック済み<br /><span
	// class="smallText">データのチェックが完了し、決済処理の実行を待っています。</span>
	// - `SUCCEEDED`: 決済成功<br /><span
	// class="smallText">この決済の処理においてエラーが発生せず請求が完了しました。</span>
	// - `FAILED`: 決済失敗<br /><span
	// class="smallText">この決済の処理において1件以上のエラーが発生しました。</span>.
	Status OptRetrievePaymentBulkDetailListQueryStatus `json:"status"`
}

// GetPage returns the value of Page.
func (s *RetrievePaymentBulkDetailListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrievePaymentBulkDetailListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrievePaymentBulkDetailListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentBulkDetailListQuery) GetPayType() RetrievePaymentBulkDetailListQueryPayType {
	return s.PayType
}

// GetOrderID returns the value of OrderID.
func (s *RetrievePaymentBulkDetailListQuery) GetOrderID() OptString {
	return s.OrderID
}

// GetStatus returns the value of Status.
func (s *RetrievePaymentBulkDetailListQuery) GetStatus() OptRetrievePaymentBulkDetailListQueryStatus {
	return s.Status
}

// SetPage sets the value of Page.
func (s *RetrievePaymentBulkDetailListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrievePaymentBulkDetailListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrievePaymentBulkDetailListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentBulkDetailListQuery) SetPayType(val RetrievePaymentBulkDetailListQueryPayType) {
	s.PayType = val
}

// SetOrderID sets the value of OrderID.
func (s *RetrievePaymentBulkDetailListQuery) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetStatus sets the value of Status.
func (s *RetrievePaymentBulkDetailListQuery) SetStatus(val OptRetrievePaymentBulkDetailListQueryStatus) {
	s.Status = val
}

// 決済種別（一括決済に対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード.
type RetrievePaymentBulkDetailListQueryPayType string

const (
	RetrievePaymentBulkDetailListQueryPayTypeCard RetrievePaymentBulkDetailListQueryPayType = "Card"
)

// AllValues returns all RetrievePaymentBulkDetailListQueryPayType values.
func (RetrievePaymentBulkDetailListQueryPayType) AllValues() []RetrievePaymentBulkDetailListQueryPayType {
	return []RetrievePaymentBulkDetailListQueryPayType{
		RetrievePaymentBulkDetailListQueryPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentBulkDetailListQueryPayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentBulkDetailListQueryPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentBulkDetailListQueryPayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentBulkDetailListQueryPayType(data) {
	case RetrievePaymentBulkDetailListQueryPayTypeCard:
		*s = RetrievePaymentBulkDetailListQueryPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `CHECKED`: チェック済み<br /><span
// class="smallText">データのチェックが完了し、決済処理の実行を待っています。</span>
// - `SUCCEEDED`: 決済成功<br /><span
// class="smallText">この決済の処理においてエラーが発生せず請求が完了しました。</span>
// - `FAILED`: 決済失敗<br /><span
// class="smallText">この決済の処理において1件以上のエラーが発生しました。</span>.
type RetrievePaymentBulkDetailListQueryStatus string

const (
	RetrievePaymentBulkDetailListQueryStatusCHECKED   RetrievePaymentBulkDetailListQueryStatus = "CHECKED"
	RetrievePaymentBulkDetailListQueryStatusSUCCEEDED RetrievePaymentBulkDetailListQueryStatus = "SUCCEEDED"
	RetrievePaymentBulkDetailListQueryStatusFAILED    RetrievePaymentBulkDetailListQueryStatus = "FAILED"
)

// AllValues returns all RetrievePaymentBulkDetailListQueryStatus values.
func (RetrievePaymentBulkDetailListQueryStatus) AllValues() []RetrievePaymentBulkDetailListQueryStatus {
	return []RetrievePaymentBulkDetailListQueryStatus{
		RetrievePaymentBulkDetailListQueryStatusCHECKED,
		RetrievePaymentBulkDetailListQueryStatusSUCCEEDED,
		RetrievePaymentBulkDetailListQueryStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentBulkDetailListQueryStatus) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentBulkDetailListQueryStatusCHECKED:
		return []byte(s), nil
	case RetrievePaymentBulkDetailListQueryStatusSUCCEEDED:
		return []byte(s), nil
	case RetrievePaymentBulkDetailListQueryStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentBulkDetailListQueryStatus) UnmarshalText(data []byte) error {
	switch RetrievePaymentBulkDetailListQueryStatus(data) {
	case RetrievePaymentBulkDetailListQueryStatusCHECKED:
		*s = RetrievePaymentBulkDetailListQueryStatusCHECKED
		return nil
	case RetrievePaymentBulkDetailListQueryStatusSUCCEEDED:
		*s = RetrievePaymentBulkDetailListQueryStatusSUCCEEDED
		return nil
	case RetrievePaymentBulkDetailListQueryStatusFAILED:
		*s = RetrievePaymentBulkDetailListQueryStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePaymentBulkListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 処理予定日の範囲指定（開始日）を指定します。\
	// 処理予定日（`process_plan_date`）を対象に範囲検索を行います。この日付以降に処理予定日が設定された一括決済情報を検索します。\
	// \
	// 形式： `yyyy/MM/dd`.
	ProcessPlanDateFrom OptNilString `json:"process_plan_date_from"`
	// 処理予定日の範囲指定（終了日）を指定します。\
	// 処理予定日（`process_plan_date`）を対象に範囲検索を行います。この日付以前に処理予定日が設定された一括決済情報を検索します。\
	// \
	// 形式： `yyyy/MM/dd`.
	ProcessPlanDateTo OptNilString `json:"process_plan_date_to"`
	// 一括決済
	// ステータス。カンマ区切りにすることで複数指定（OR検索）できます。
	// - `CHECKING`: チェック中
	// - `CHECKED`: チェック済み
	// - `RUNNING`: 決済処理中
	// - `COMPLETED`: 完了
	// - `ERROR`: エラー.
	Status  OptRetrievePaymentBulkListQueryStatus  `json:"status"`
	PayType OptRetrievePaymentBulkListQueryPayType `json:"pay_type"`
	// 一括決済データファイル名\
	// `file_name`に対する部分一致検索を行います。.
	FileName   OptString                                 `json:"file_name"`
	DeleteFlag OptRetrievePaymentBulkListQueryDeleteFlag `json:"delete_flag"`
	// 作成日時の範囲指定（開始日）を指定します。\
	// 作成日時（`created`）を対象に範囲検索を行います。この日付以降に登録された一括決済情報を検索します。\
	// \
	// 形式： `yyyy/MM/dd`.
	CreatedFrom OptNilString `json:"created_from"`
	// 作成日時の範囲指定（終了日）を指定します。\
	// 作成日時（`created`）を対象に範囲検索を行います。この日付以前に登録された一括決済情報を検索します。\
	// \
	// 形式： `yyyy/MM/dd`.
	CreatedTo OptNilString `json:"created_to"`
	// ソートする項目と順序を指定します。\
	// 例： `?sort=created␣asc,process_plan_date␣desc`\
	// \
	// ソート可能な項目
	// - `process_plan_date`: 一括決済 処理予定日
	// - `status`: ステータス
	// - `pay_type`: 決済種別
	// - `file_name`: 一括決済データファイル名
	// - `delete_flag`: 削除フラグ
	// - `created`: 作成日時.
	Sort OptNilString `json:"sort"`
}

// GetPage returns the value of Page.
func (s *RetrievePaymentBulkListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrievePaymentBulkListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrievePaymentBulkListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetProcessPlanDateFrom returns the value of ProcessPlanDateFrom.
func (s *RetrievePaymentBulkListQuery) GetProcessPlanDateFrom() OptNilString {
	return s.ProcessPlanDateFrom
}

// GetProcessPlanDateTo returns the value of ProcessPlanDateTo.
func (s *RetrievePaymentBulkListQuery) GetProcessPlanDateTo() OptNilString {
	return s.ProcessPlanDateTo
}

// GetStatus returns the value of Status.
func (s *RetrievePaymentBulkListQuery) GetStatus() OptRetrievePaymentBulkListQueryStatus {
	return s.Status
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentBulkListQuery) GetPayType() OptRetrievePaymentBulkListQueryPayType {
	return s.PayType
}

// GetFileName returns the value of FileName.
func (s *RetrievePaymentBulkListQuery) GetFileName() OptString {
	return s.FileName
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *RetrievePaymentBulkListQuery) GetDeleteFlag() OptRetrievePaymentBulkListQueryDeleteFlag {
	return s.DeleteFlag
}

// GetCreatedFrom returns the value of CreatedFrom.
func (s *RetrievePaymentBulkListQuery) GetCreatedFrom() OptNilString {
	return s.CreatedFrom
}

// GetCreatedTo returns the value of CreatedTo.
func (s *RetrievePaymentBulkListQuery) GetCreatedTo() OptNilString {
	return s.CreatedTo
}

// GetSort returns the value of Sort.
func (s *RetrievePaymentBulkListQuery) GetSort() OptNilString {
	return s.Sort
}

// SetPage sets the value of Page.
func (s *RetrievePaymentBulkListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrievePaymentBulkListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrievePaymentBulkListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetProcessPlanDateFrom sets the value of ProcessPlanDateFrom.
func (s *RetrievePaymentBulkListQuery) SetProcessPlanDateFrom(val OptNilString) {
	s.ProcessPlanDateFrom = val
}

// SetProcessPlanDateTo sets the value of ProcessPlanDateTo.
func (s *RetrievePaymentBulkListQuery) SetProcessPlanDateTo(val OptNilString) {
	s.ProcessPlanDateTo = val
}

// SetStatus sets the value of Status.
func (s *RetrievePaymentBulkListQuery) SetStatus(val OptRetrievePaymentBulkListQueryStatus) {
	s.Status = val
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentBulkListQuery) SetPayType(val OptRetrievePaymentBulkListQueryPayType) {
	s.PayType = val
}

// SetFileName sets the value of FileName.
func (s *RetrievePaymentBulkListQuery) SetFileName(val OptString) {
	s.FileName = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *RetrievePaymentBulkListQuery) SetDeleteFlag(val OptRetrievePaymentBulkListQueryDeleteFlag) {
	s.DeleteFlag = val
}

// SetCreatedFrom sets the value of CreatedFrom.
func (s *RetrievePaymentBulkListQuery) SetCreatedFrom(val OptNilString) {
	s.CreatedFrom = val
}

// SetCreatedTo sets the value of CreatedTo.
func (s *RetrievePaymentBulkListQuery) SetCreatedTo(val OptNilString) {
	s.CreatedTo = val
}

// SetSort sets the value of Sort.
func (s *RetrievePaymentBulkListQuery) SetSort(val OptNilString) {
	s.Sort = val
}

// 削除フラグ.
type RetrievePaymentBulkListQueryDeleteFlag string

const (
	RetrievePaymentBulkListQueryDeleteFlag1 RetrievePaymentBulkListQueryDeleteFlag = "1"
	RetrievePaymentBulkListQueryDeleteFlag0 RetrievePaymentBulkListQueryDeleteFlag = "0"
)

// AllValues returns all RetrievePaymentBulkListQueryDeleteFlag values.
func (RetrievePaymentBulkListQueryDeleteFlag) AllValues() []RetrievePaymentBulkListQueryDeleteFlag {
	return []RetrievePaymentBulkListQueryDeleteFlag{
		RetrievePaymentBulkListQueryDeleteFlag1,
		RetrievePaymentBulkListQueryDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentBulkListQueryDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentBulkListQueryDeleteFlag1:
		return []byte(s), nil
	case RetrievePaymentBulkListQueryDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentBulkListQueryDeleteFlag) UnmarshalText(data []byte) error {
	switch RetrievePaymentBulkListQueryDeleteFlag(data) {
	case RetrievePaymentBulkListQueryDeleteFlag1:
		*s = RetrievePaymentBulkListQueryDeleteFlag1
		return nil
	case RetrievePaymentBulkListQueryDeleteFlag0:
		*s = RetrievePaymentBulkListQueryDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（一括決済に対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード.
type RetrievePaymentBulkListQueryPayType string

const (
	RetrievePaymentBulkListQueryPayTypeCard RetrievePaymentBulkListQueryPayType = "Card"
)

// AllValues returns all RetrievePaymentBulkListQueryPayType values.
func (RetrievePaymentBulkListQueryPayType) AllValues() []RetrievePaymentBulkListQueryPayType {
	return []RetrievePaymentBulkListQueryPayType{
		RetrievePaymentBulkListQueryPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentBulkListQueryPayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentBulkListQueryPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentBulkListQueryPayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentBulkListQueryPayType(data) {
	case RetrievePaymentBulkListQueryPayTypeCard:
		*s = RetrievePaymentBulkListQueryPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 一括決済 ステータス
// - `CHECKING`: チェック中<br /><span
// class="smallText">アップロードした一括決済リクエストデータの形式などをチェック中</span>
// - `CHECKED`: チェック済み<br /><span
// class="smallText">データのチェックが完了し、決済処理の実行を待っています。</span>
// - `RUNNING`: 決済処理中<br /><span class="smallText">一括決済処理が実行中</span>
// - `COMPLETED`: 完了
// - `ERROR`: エラー<br /><span
// class="smallText">決済処理中に1件以上のエラーが発生</span>.
type RetrievePaymentBulkListQueryStatus string

const (
	RetrievePaymentBulkListQueryStatusCHECKING  RetrievePaymentBulkListQueryStatus = "CHECKING"
	RetrievePaymentBulkListQueryStatusCHECKED   RetrievePaymentBulkListQueryStatus = "CHECKED"
	RetrievePaymentBulkListQueryStatusRUNNING   RetrievePaymentBulkListQueryStatus = "RUNNING"
	RetrievePaymentBulkListQueryStatusCOMPLETED RetrievePaymentBulkListQueryStatus = "COMPLETED"
	RetrievePaymentBulkListQueryStatusERROR     RetrievePaymentBulkListQueryStatus = "ERROR"
)

// AllValues returns all RetrievePaymentBulkListQueryStatus values.
func (RetrievePaymentBulkListQueryStatus) AllValues() []RetrievePaymentBulkListQueryStatus {
	return []RetrievePaymentBulkListQueryStatus{
		RetrievePaymentBulkListQueryStatusCHECKING,
		RetrievePaymentBulkListQueryStatusCHECKED,
		RetrievePaymentBulkListQueryStatusRUNNING,
		RetrievePaymentBulkListQueryStatusCOMPLETED,
		RetrievePaymentBulkListQueryStatusERROR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentBulkListQueryStatus) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentBulkListQueryStatusCHECKING:
		return []byte(s), nil
	case RetrievePaymentBulkListQueryStatusCHECKED:
		return []byte(s), nil
	case RetrievePaymentBulkListQueryStatusRUNNING:
		return []byte(s), nil
	case RetrievePaymentBulkListQueryStatusCOMPLETED:
		return []byte(s), nil
	case RetrievePaymentBulkListQueryStatusERROR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentBulkListQueryStatus) UnmarshalText(data []byte) error {
	switch RetrievePaymentBulkListQueryStatus(data) {
	case RetrievePaymentBulkListQueryStatusCHECKING:
		*s = RetrievePaymentBulkListQueryStatusCHECKING
		return nil
	case RetrievePaymentBulkListQueryStatusCHECKED:
		*s = RetrievePaymentBulkListQueryStatusCHECKED
		return nil
	case RetrievePaymentBulkListQueryStatusRUNNING:
		*s = RetrievePaymentBulkListQueryStatusRUNNING
		return nil
	case RetrievePaymentBulkListQueryStatusCOMPLETED:
		*s = RetrievePaymentBulkListQueryStatusCOMPLETED
		return nil
	case RetrievePaymentBulkListQueryStatusERROR:
		*s = RetrievePaymentBulkListQueryStatusERROR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// RetrievePaymentOK represents sum type.
type RetrievePaymentOK struct {
	Type               RetrievePaymentOKType // switch on this field
	RetrievePaymentOK0 RetrievePaymentOK0
	RetrievePaymentOK1 RetrievePaymentOK1
	RetrievePaymentOK2 RetrievePaymentOK2
	RetrievePaymentOK3 RetrievePaymentOK3
	RetrievePaymentOK4 RetrievePaymentOK4
}

// RetrievePaymentOKType is oneOf type of RetrievePaymentOK.
type RetrievePaymentOKType string

// Possible values for RetrievePaymentOKType.
const (
	RetrievePaymentOK0RetrievePaymentOK RetrievePaymentOKType = "RetrievePaymentOK0"
	RetrievePaymentOK1RetrievePaymentOK RetrievePaymentOKType = "RetrievePaymentOK1"
	RetrievePaymentOK2RetrievePaymentOK RetrievePaymentOKType = "RetrievePaymentOK2"
	RetrievePaymentOK3RetrievePaymentOK RetrievePaymentOKType = "RetrievePaymentOK3"
	RetrievePaymentOK4RetrievePaymentOK RetrievePaymentOKType = "RetrievePaymentOK4"
)

// IsRetrievePaymentOK0 reports whether RetrievePaymentOK is RetrievePaymentOK0.
func (s RetrievePaymentOK) IsRetrievePaymentOK0() bool {
	return s.Type == RetrievePaymentOK0RetrievePaymentOK
}

// IsRetrievePaymentOK1 reports whether RetrievePaymentOK is RetrievePaymentOK1.
func (s RetrievePaymentOK) IsRetrievePaymentOK1() bool {
	return s.Type == RetrievePaymentOK1RetrievePaymentOK
}

// IsRetrievePaymentOK2 reports whether RetrievePaymentOK is RetrievePaymentOK2.
func (s RetrievePaymentOK) IsRetrievePaymentOK2() bool {
	return s.Type == RetrievePaymentOK2RetrievePaymentOK
}

// IsRetrievePaymentOK3 reports whether RetrievePaymentOK is RetrievePaymentOK3.
func (s RetrievePaymentOK) IsRetrievePaymentOK3() bool {
	return s.Type == RetrievePaymentOK3RetrievePaymentOK
}

// IsRetrievePaymentOK4 reports whether RetrievePaymentOK is RetrievePaymentOK4.
func (s RetrievePaymentOK) IsRetrievePaymentOK4() bool {
	return s.Type == RetrievePaymentOK4RetrievePaymentOK
}

// SetRetrievePaymentOK0 sets RetrievePaymentOK to RetrievePaymentOK0.
func (s *RetrievePaymentOK) SetRetrievePaymentOK0(v RetrievePaymentOK0) {
	s.Type = RetrievePaymentOK0RetrievePaymentOK
	s.RetrievePaymentOK0 = v
}

// GetRetrievePaymentOK0 returns RetrievePaymentOK0 and true boolean if RetrievePaymentOK is RetrievePaymentOK0.
func (s RetrievePaymentOK) GetRetrievePaymentOK0() (v RetrievePaymentOK0, ok bool) {
	if !s.IsRetrievePaymentOK0() {
		return v, false
	}
	return s.RetrievePaymentOK0, true
}

// NewRetrievePaymentOK0RetrievePaymentOK returns new RetrievePaymentOK from RetrievePaymentOK0.
func NewRetrievePaymentOK0RetrievePaymentOK(v RetrievePaymentOK0) RetrievePaymentOK {
	var s RetrievePaymentOK
	s.SetRetrievePaymentOK0(v)
	return s
}

// SetRetrievePaymentOK1 sets RetrievePaymentOK to RetrievePaymentOK1.
func (s *RetrievePaymentOK) SetRetrievePaymentOK1(v RetrievePaymentOK1) {
	s.Type = RetrievePaymentOK1RetrievePaymentOK
	s.RetrievePaymentOK1 = v
}

// GetRetrievePaymentOK1 returns RetrievePaymentOK1 and true boolean if RetrievePaymentOK is RetrievePaymentOK1.
func (s RetrievePaymentOK) GetRetrievePaymentOK1() (v RetrievePaymentOK1, ok bool) {
	if !s.IsRetrievePaymentOK1() {
		return v, false
	}
	return s.RetrievePaymentOK1, true
}

// NewRetrievePaymentOK1RetrievePaymentOK returns new RetrievePaymentOK from RetrievePaymentOK1.
func NewRetrievePaymentOK1RetrievePaymentOK(v RetrievePaymentOK1) RetrievePaymentOK {
	var s RetrievePaymentOK
	s.SetRetrievePaymentOK1(v)
	return s
}

// SetRetrievePaymentOK2 sets RetrievePaymentOK to RetrievePaymentOK2.
func (s *RetrievePaymentOK) SetRetrievePaymentOK2(v RetrievePaymentOK2) {
	s.Type = RetrievePaymentOK2RetrievePaymentOK
	s.RetrievePaymentOK2 = v
}

// GetRetrievePaymentOK2 returns RetrievePaymentOK2 and true boolean if RetrievePaymentOK is RetrievePaymentOK2.
func (s RetrievePaymentOK) GetRetrievePaymentOK2() (v RetrievePaymentOK2, ok bool) {
	if !s.IsRetrievePaymentOK2() {
		return v, false
	}
	return s.RetrievePaymentOK2, true
}

// NewRetrievePaymentOK2RetrievePaymentOK returns new RetrievePaymentOK from RetrievePaymentOK2.
func NewRetrievePaymentOK2RetrievePaymentOK(v RetrievePaymentOK2) RetrievePaymentOK {
	var s RetrievePaymentOK
	s.SetRetrievePaymentOK2(v)
	return s
}

// SetRetrievePaymentOK3 sets RetrievePaymentOK to RetrievePaymentOK3.
func (s *RetrievePaymentOK) SetRetrievePaymentOK3(v RetrievePaymentOK3) {
	s.Type = RetrievePaymentOK3RetrievePaymentOK
	s.RetrievePaymentOK3 = v
}

// GetRetrievePaymentOK3 returns RetrievePaymentOK3 and true boolean if RetrievePaymentOK is RetrievePaymentOK3.
func (s RetrievePaymentOK) GetRetrievePaymentOK3() (v RetrievePaymentOK3, ok bool) {
	if !s.IsRetrievePaymentOK3() {
		return v, false
	}
	return s.RetrievePaymentOK3, true
}

// NewRetrievePaymentOK3RetrievePaymentOK returns new RetrievePaymentOK from RetrievePaymentOK3.
func NewRetrievePaymentOK3RetrievePaymentOK(v RetrievePaymentOK3) RetrievePaymentOK {
	var s RetrievePaymentOK
	s.SetRetrievePaymentOK3(v)
	return s
}

// SetRetrievePaymentOK4 sets RetrievePaymentOK to RetrievePaymentOK4.
func (s *RetrievePaymentOK) SetRetrievePaymentOK4(v RetrievePaymentOK4) {
	s.Type = RetrievePaymentOK4RetrievePaymentOK
	s.RetrievePaymentOK4 = v
}

// GetRetrievePaymentOK4 returns RetrievePaymentOK4 and true boolean if RetrievePaymentOK is RetrievePaymentOK4.
func (s RetrievePaymentOK) GetRetrievePaymentOK4() (v RetrievePaymentOK4, ok bool) {
	if !s.IsRetrievePaymentOK4() {
		return v, false
	}
	return s.RetrievePaymentOK4, true
}

// NewRetrievePaymentOK4RetrievePaymentOK returns new RetrievePaymentOK from RetrievePaymentOK4.
func NewRetrievePaymentOK4RetrievePaymentOK(v RetrievePaymentOK4) RetrievePaymentOK {
	var s RetrievePaymentOK
	s.SetRetrievePaymentOK4(v)
	return s
}

func (*RetrievePaymentOK) retrievePaymentRes() {}

// Merged schema.
type RetrievePaymentOK0 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptRetrievePaymentOK0PayType `json:"pay_type"`
	JobCode OptRetrievePaymentOK0JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status OptRetrievePaymentOK0Status `json:"status"`
	// カードID\
	// この決済に使用されたカード情報のIDです。.
	CardID     OptNilString                     `json:"card_id"`
	Brand      OptNilRetrievePaymentOK0Brand    `json:"brand"`
	CardNo     OptNilString                     `json:"card_no"`
	Expire     OptNilString                     `json:"expire"`
	HolderName OptNilString                     `json:"holder_name"`
	CardNoHash OptNilString                     `json:"card_no_hash"`
	Method     OptRetrievePaymentOK0Method      `json:"method"`
	PayTimes   OptNilRetrievePaymentOK0PayTimes `json:"pay_times"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString                       `json:"subscription_id"`
	TdsType        OptNilRetrievePaymentOK0TdsType    `json:"tds_type"`
	Tds2Type       OptNilRetrievePaymentOK0Tds2Type   `json:"tds2_type"`
	Tds2RetURL     OptNilString                       `json:"tds2_ret_url"`
	Tds2Status     OptNilRetrievePaymentOK0Tds2Status `json:"tds2_status"`
	MerchantName   OptNilString                       `json:"merchant_name"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
}

// GetShopID returns the value of ShopID.
func (s *RetrievePaymentOK0) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *RetrievePaymentOK0) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *RetrievePaymentOK0) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *RetrievePaymentOK0) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *RetrievePaymentOK0) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *RetrievePaymentOK0) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *RetrievePaymentOK0) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *RetrievePaymentOK0) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *RetrievePaymentOK0) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *RetrievePaymentOK0) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *RetrievePaymentOK0) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *RetrievePaymentOK0) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *RetrievePaymentOK0) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *RetrievePaymentOK0) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *RetrievePaymentOK0) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentOK0) GetPayType() OptRetrievePaymentOK0PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *RetrievePaymentOK0) GetJobCode() OptRetrievePaymentOK0JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *RetrievePaymentOK0) GetStatus() OptRetrievePaymentOK0Status {
	return s.Status
}

// GetCardID returns the value of CardID.
func (s *RetrievePaymentOK0) GetCardID() OptNilString {
	return s.CardID
}

// GetBrand returns the value of Brand.
func (s *RetrievePaymentOK0) GetBrand() OptNilRetrievePaymentOK0Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *RetrievePaymentOK0) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *RetrievePaymentOK0) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *RetrievePaymentOK0) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *RetrievePaymentOK0) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *RetrievePaymentOK0) GetMethod() OptRetrievePaymentOK0Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *RetrievePaymentOK0) GetPayTimes() OptNilRetrievePaymentOK0PayTimes {
	return s.PayTimes
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *RetrievePaymentOK0) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetTdsType returns the value of TdsType.
func (s *RetrievePaymentOK0) GetTdsType() OptNilRetrievePaymentOK0TdsType {
	return s.TdsType
}

// GetTds2Type returns the value of Tds2Type.
func (s *RetrievePaymentOK0) GetTds2Type() OptNilRetrievePaymentOK0Tds2Type {
	return s.Tds2Type
}

// GetTds2RetURL returns the value of Tds2RetURL.
func (s *RetrievePaymentOK0) GetTds2RetURL() OptNilString {
	return s.Tds2RetURL
}

// GetTds2Status returns the value of Tds2Status.
func (s *RetrievePaymentOK0) GetTds2Status() OptNilRetrievePaymentOK0Tds2Status {
	return s.Tds2Status
}

// GetMerchantName returns the value of MerchantName.
func (s *RetrievePaymentOK0) GetMerchantName() OptNilString {
	return s.MerchantName
}

// GetForward returns the value of Forward.
func (s *RetrievePaymentOK0) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *RetrievePaymentOK0) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *RetrievePaymentOK0) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *RetrievePaymentOK0) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *RetrievePaymentOK0) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *RetrievePaymentOK0) GetItemCode() OptNilString {
	return s.ItemCode
}

// SetShopID sets the value of ShopID.
func (s *RetrievePaymentOK0) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *RetrievePaymentOK0) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *RetrievePaymentOK0) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *RetrievePaymentOK0) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *RetrievePaymentOK0) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *RetrievePaymentOK0) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *RetrievePaymentOK0) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *RetrievePaymentOK0) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *RetrievePaymentOK0) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *RetrievePaymentOK0) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *RetrievePaymentOK0) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *RetrievePaymentOK0) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *RetrievePaymentOK0) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *RetrievePaymentOK0) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *RetrievePaymentOK0) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentOK0) SetPayType(val OptRetrievePaymentOK0PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *RetrievePaymentOK0) SetJobCode(val OptRetrievePaymentOK0JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *RetrievePaymentOK0) SetStatus(val OptRetrievePaymentOK0Status) {
	s.Status = val
}

// SetCardID sets the value of CardID.
func (s *RetrievePaymentOK0) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetBrand sets the value of Brand.
func (s *RetrievePaymentOK0) SetBrand(val OptNilRetrievePaymentOK0Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *RetrievePaymentOK0) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *RetrievePaymentOK0) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *RetrievePaymentOK0) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *RetrievePaymentOK0) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *RetrievePaymentOK0) SetMethod(val OptRetrievePaymentOK0Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *RetrievePaymentOK0) SetPayTimes(val OptNilRetrievePaymentOK0PayTimes) {
	s.PayTimes = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *RetrievePaymentOK0) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetTdsType sets the value of TdsType.
func (s *RetrievePaymentOK0) SetTdsType(val OptNilRetrievePaymentOK0TdsType) {
	s.TdsType = val
}

// SetTds2Type sets the value of Tds2Type.
func (s *RetrievePaymentOK0) SetTds2Type(val OptNilRetrievePaymentOK0Tds2Type) {
	s.Tds2Type = val
}

// SetTds2RetURL sets the value of Tds2RetURL.
func (s *RetrievePaymentOK0) SetTds2RetURL(val OptNilString) {
	s.Tds2RetURL = val
}

// SetTds2Status sets the value of Tds2Status.
func (s *RetrievePaymentOK0) SetTds2Status(val OptNilRetrievePaymentOK0Tds2Status) {
	s.Tds2Status = val
}

// SetMerchantName sets the value of MerchantName.
func (s *RetrievePaymentOK0) SetMerchantName(val OptNilString) {
	s.MerchantName = val
}

// SetForward sets the value of Forward.
func (s *RetrievePaymentOK0) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *RetrievePaymentOK0) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *RetrievePaymentOK0) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *RetrievePaymentOK0) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *RetrievePaymentOK0) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *RetrievePaymentOK0) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type RetrievePaymentOK0Brand string

const (
	RetrievePaymentOK0BrandVISA     RetrievePaymentOK0Brand = "VISA"
	RetrievePaymentOK0BrandMASTER   RetrievePaymentOK0Brand = "MASTER"
	RetrievePaymentOK0BrandJCB      RetrievePaymentOK0Brand = "JCB"
	RetrievePaymentOK0BrandAMEX     RetrievePaymentOK0Brand = "AMEX"
	RetrievePaymentOK0BrandDINERS   RetrievePaymentOK0Brand = "DINERS"
	RetrievePaymentOK0BrandDISCOVER RetrievePaymentOK0Brand = "DISCOVER"
	RetrievePaymentOK0BrandEmpty    RetrievePaymentOK0Brand = ""
)

// AllValues returns all RetrievePaymentOK0Brand values.
func (RetrievePaymentOK0Brand) AllValues() []RetrievePaymentOK0Brand {
	return []RetrievePaymentOK0Brand{
		RetrievePaymentOK0BrandVISA,
		RetrievePaymentOK0BrandMASTER,
		RetrievePaymentOK0BrandJCB,
		RetrievePaymentOK0BrandAMEX,
		RetrievePaymentOK0BrandDINERS,
		RetrievePaymentOK0BrandDISCOVER,
		RetrievePaymentOK0BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0Brand) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0BrandVISA:
		return []byte(s), nil
	case RetrievePaymentOK0BrandMASTER:
		return []byte(s), nil
	case RetrievePaymentOK0BrandJCB:
		return []byte(s), nil
	case RetrievePaymentOK0BrandAMEX:
		return []byte(s), nil
	case RetrievePaymentOK0BrandDINERS:
		return []byte(s), nil
	case RetrievePaymentOK0BrandDISCOVER:
		return []byte(s), nil
	case RetrievePaymentOK0BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0Brand) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0Brand(data) {
	case RetrievePaymentOK0BrandVISA:
		*s = RetrievePaymentOK0BrandVISA
		return nil
	case RetrievePaymentOK0BrandMASTER:
		*s = RetrievePaymentOK0BrandMASTER
		return nil
	case RetrievePaymentOK0BrandJCB:
		*s = RetrievePaymentOK0BrandJCB
		return nil
	case RetrievePaymentOK0BrandAMEX:
		*s = RetrievePaymentOK0BrandAMEX
		return nil
	case RetrievePaymentOK0BrandDINERS:
		*s = RetrievePaymentOK0BrandDINERS
		return nil
	case RetrievePaymentOK0BrandDISCOVER:
		*s = RetrievePaymentOK0BrandDISCOVER
		return nil
	case RetrievePaymentOK0BrandEmpty:
		*s = RetrievePaymentOK0BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type RetrievePaymentOK0JobCode string

const (
	RetrievePaymentOK0JobCodeCHECK   RetrievePaymentOK0JobCode = "CHECK"
	RetrievePaymentOK0JobCodeAUTH    RetrievePaymentOK0JobCode = "AUTH"
	RetrievePaymentOK0JobCodeCAPTURE RetrievePaymentOK0JobCode = "CAPTURE"
)

// AllValues returns all RetrievePaymentOK0JobCode values.
func (RetrievePaymentOK0JobCode) AllValues() []RetrievePaymentOK0JobCode {
	return []RetrievePaymentOK0JobCode{
		RetrievePaymentOK0JobCodeCHECK,
		RetrievePaymentOK0JobCodeAUTH,
		RetrievePaymentOK0JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0JobCode) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0JobCodeCHECK:
		return []byte(s), nil
	case RetrievePaymentOK0JobCodeAUTH:
		return []byte(s), nil
	case RetrievePaymentOK0JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0JobCode) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0JobCode(data) {
	case RetrievePaymentOK0JobCodeCHECK:
		*s = RetrievePaymentOK0JobCodeCHECK
		return nil
	case RetrievePaymentOK0JobCodeAUTH:
		*s = RetrievePaymentOK0JobCodeAUTH
		return nil
	case RetrievePaymentOK0JobCodeCAPTURE:
		*s = RetrievePaymentOK0JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type RetrievePaymentOK0Method string

const (
	RetrievePaymentOK0Method1 RetrievePaymentOK0Method = "1"
	RetrievePaymentOK0Method2 RetrievePaymentOK0Method = "2"
	RetrievePaymentOK0Method5 RetrievePaymentOK0Method = "5"
)

// AllValues returns all RetrievePaymentOK0Method values.
func (RetrievePaymentOK0Method) AllValues() []RetrievePaymentOK0Method {
	return []RetrievePaymentOK0Method{
		RetrievePaymentOK0Method1,
		RetrievePaymentOK0Method2,
		RetrievePaymentOK0Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0Method) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0Method1:
		return []byte(s), nil
	case RetrievePaymentOK0Method2:
		return []byte(s), nil
	case RetrievePaymentOK0Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0Method) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0Method(data) {
	case RetrievePaymentOK0Method1:
		*s = RetrievePaymentOK0Method1
		return nil
	case RetrievePaymentOK0Method2:
		*s = RetrievePaymentOK0Method2
		return nil
	case RetrievePaymentOK0Method5:
		*s = RetrievePaymentOK0Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type RetrievePaymentOK0PayTimes string

const (
	RetrievePaymentOK0PayTimes3  RetrievePaymentOK0PayTimes = "3"
	RetrievePaymentOK0PayTimes5  RetrievePaymentOK0PayTimes = "5"
	RetrievePaymentOK0PayTimes6  RetrievePaymentOK0PayTimes = "6"
	RetrievePaymentOK0PayTimes10 RetrievePaymentOK0PayTimes = "10"
	RetrievePaymentOK0PayTimes12 RetrievePaymentOK0PayTimes = "12"
	RetrievePaymentOK0PayTimes15 RetrievePaymentOK0PayTimes = "15"
	RetrievePaymentOK0PayTimes18 RetrievePaymentOK0PayTimes = "18"
	RetrievePaymentOK0PayTimes20 RetrievePaymentOK0PayTimes = "20"
	RetrievePaymentOK0PayTimes24 RetrievePaymentOK0PayTimes = "24"
)

// AllValues returns all RetrievePaymentOK0PayTimes values.
func (RetrievePaymentOK0PayTimes) AllValues() []RetrievePaymentOK0PayTimes {
	return []RetrievePaymentOK0PayTimes{
		RetrievePaymentOK0PayTimes3,
		RetrievePaymentOK0PayTimes5,
		RetrievePaymentOK0PayTimes6,
		RetrievePaymentOK0PayTimes10,
		RetrievePaymentOK0PayTimes12,
		RetrievePaymentOK0PayTimes15,
		RetrievePaymentOK0PayTimes18,
		RetrievePaymentOK0PayTimes20,
		RetrievePaymentOK0PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0PayTimes3:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes5:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes6:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes10:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes12:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes15:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes18:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes20:
		return []byte(s), nil
	case RetrievePaymentOK0PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0PayTimes) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0PayTimes(data) {
	case RetrievePaymentOK0PayTimes3:
		*s = RetrievePaymentOK0PayTimes3
		return nil
	case RetrievePaymentOK0PayTimes5:
		*s = RetrievePaymentOK0PayTimes5
		return nil
	case RetrievePaymentOK0PayTimes6:
		*s = RetrievePaymentOK0PayTimes6
		return nil
	case RetrievePaymentOK0PayTimes10:
		*s = RetrievePaymentOK0PayTimes10
		return nil
	case RetrievePaymentOK0PayTimes12:
		*s = RetrievePaymentOK0PayTimes12
		return nil
	case RetrievePaymentOK0PayTimes15:
		*s = RetrievePaymentOK0PayTimes15
		return nil
	case RetrievePaymentOK0PayTimes18:
		*s = RetrievePaymentOK0PayTimes18
		return nil
	case RetrievePaymentOK0PayTimes20:
		*s = RetrievePaymentOK0PayTimes20
		return nil
	case RetrievePaymentOK0PayTimes24:
		*s = RetrievePaymentOK0PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type RetrievePaymentOK0PayType string

const (
	RetrievePaymentOK0PayTypeCard           RetrievePaymentOK0PayType = "Card"
	RetrievePaymentOK0PayTypeKonbini        RetrievePaymentOK0PayType = "Konbini"
	RetrievePaymentOK0PayTypePaypay         RetrievePaymentOK0PayType = "Paypay"
	RetrievePaymentOK0PayTypeApplepay       RetrievePaymentOK0PayType = "Applepay"
	RetrievePaymentOK0PayTypeDirectdebit    RetrievePaymentOK0PayType = "Directdebit"
	RetrievePaymentOK0PayTypeVirtualaccount RetrievePaymentOK0PayType = "Virtualaccount"
)

// AllValues returns all RetrievePaymentOK0PayType values.
func (RetrievePaymentOK0PayType) AllValues() []RetrievePaymentOK0PayType {
	return []RetrievePaymentOK0PayType{
		RetrievePaymentOK0PayTypeCard,
		RetrievePaymentOK0PayTypeKonbini,
		RetrievePaymentOK0PayTypePaypay,
		RetrievePaymentOK0PayTypeApplepay,
		RetrievePaymentOK0PayTypeDirectdebit,
		RetrievePaymentOK0PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0PayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0PayTypeCard:
		return []byte(s), nil
	case RetrievePaymentOK0PayTypeKonbini:
		return []byte(s), nil
	case RetrievePaymentOK0PayTypePaypay:
		return []byte(s), nil
	case RetrievePaymentOK0PayTypeApplepay:
		return []byte(s), nil
	case RetrievePaymentOK0PayTypeDirectdebit:
		return []byte(s), nil
	case RetrievePaymentOK0PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0PayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0PayType(data) {
	case RetrievePaymentOK0PayTypeCard:
		*s = RetrievePaymentOK0PayTypeCard
		return nil
	case RetrievePaymentOK0PayTypeKonbini:
		*s = RetrievePaymentOK0PayTypeKonbini
		return nil
	case RetrievePaymentOK0PayTypePaypay:
		*s = RetrievePaymentOK0PayTypePaypay
		return nil
	case RetrievePaymentOK0PayTypeApplepay:
		*s = RetrievePaymentOK0PayTypeApplepay
		return nil
	case RetrievePaymentOK0PayTypeDirectdebit:
		*s = RetrievePaymentOK0PayTypeDirectdebit
		return nil
	case RetrievePaymentOK0PayTypeVirtualaccount:
		*s = RetrievePaymentOK0PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type RetrievePaymentOK0Status string

const (
	RetrievePaymentOK0StatusUNPROCESSED             RetrievePaymentOK0Status = "UNPROCESSED"
	RetrievePaymentOK0StatusCHECKED                 RetrievePaymentOK0Status = "CHECKED"
	RetrievePaymentOK0StatusAUTHORIZED              RetrievePaymentOK0Status = "AUTHORIZED"
	RetrievePaymentOK0StatusAWAITINGCUSTOMERPAYMENT RetrievePaymentOK0Status = "AWAITING_CUSTOMER_PAYMENT"
	RetrievePaymentOK0StatusAWAITINGPAYMENTAPPROVAL RetrievePaymentOK0Status = "AWAITING_PAYMENT_APPROVAL"
	RetrievePaymentOK0StatusCAPTURED                RetrievePaymentOK0Status = "CAPTURED"
	RetrievePaymentOK0StatusCANCELED                RetrievePaymentOK0Status = "CANCELED"
	RetrievePaymentOK0StatusEXPIRED                 RetrievePaymentOK0Status = "EXPIRED"
	RetrievePaymentOK0StatusAUTHENTICATED           RetrievePaymentOK0Status = "AUTHENTICATED"
	RetrievePaymentOK0StatusFAILED                  RetrievePaymentOK0Status = "FAILED"
)

// AllValues returns all RetrievePaymentOK0Status values.
func (RetrievePaymentOK0Status) AllValues() []RetrievePaymentOK0Status {
	return []RetrievePaymentOK0Status{
		RetrievePaymentOK0StatusUNPROCESSED,
		RetrievePaymentOK0StatusCHECKED,
		RetrievePaymentOK0StatusAUTHORIZED,
		RetrievePaymentOK0StatusAWAITINGCUSTOMERPAYMENT,
		RetrievePaymentOK0StatusAWAITINGPAYMENTAPPROVAL,
		RetrievePaymentOK0StatusCAPTURED,
		RetrievePaymentOK0StatusCANCELED,
		RetrievePaymentOK0StatusEXPIRED,
		RetrievePaymentOK0StatusAUTHENTICATED,
		RetrievePaymentOK0StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0Status) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0StatusUNPROCESSED:
		return []byte(s), nil
	case RetrievePaymentOK0StatusCHECKED:
		return []byte(s), nil
	case RetrievePaymentOK0StatusAUTHORIZED:
		return []byte(s), nil
	case RetrievePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case RetrievePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case RetrievePaymentOK0StatusCAPTURED:
		return []byte(s), nil
	case RetrievePaymentOK0StatusCANCELED:
		return []byte(s), nil
	case RetrievePaymentOK0StatusEXPIRED:
		return []byte(s), nil
	case RetrievePaymentOK0StatusAUTHENTICATED:
		return []byte(s), nil
	case RetrievePaymentOK0StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0Status) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0Status(data) {
	case RetrievePaymentOK0StatusUNPROCESSED:
		*s = RetrievePaymentOK0StatusUNPROCESSED
		return nil
	case RetrievePaymentOK0StatusCHECKED:
		*s = RetrievePaymentOK0StatusCHECKED
		return nil
	case RetrievePaymentOK0StatusAUTHORIZED:
		*s = RetrievePaymentOK0StatusAUTHORIZED
		return nil
	case RetrievePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case RetrievePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case RetrievePaymentOK0StatusCAPTURED:
		*s = RetrievePaymentOK0StatusCAPTURED
		return nil
	case RetrievePaymentOK0StatusCANCELED:
		*s = RetrievePaymentOK0StatusCANCELED
		return nil
	case RetrievePaymentOK0StatusEXPIRED:
		*s = RetrievePaymentOK0StatusEXPIRED
		return nil
	case RetrievePaymentOK0StatusAUTHENTICATED:
		*s = RetrievePaymentOK0StatusAUTHENTICATED
		return nil
	case RetrievePaymentOK0StatusFAILED:
		*s = RetrievePaymentOK0StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0認証処理 ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: チャレンジ認証の実施が必要
// - `AUTHENTICATED`: 3Dセキュア認証処理が完了.
type RetrievePaymentOK0Tds2Status string

const (
	RetrievePaymentOK0Tds2StatusAUTHENTICATING RetrievePaymentOK0Tds2Status = "AUTHENTICATING"
	RetrievePaymentOK0Tds2StatusCHALLENGE      RetrievePaymentOK0Tds2Status = "CHALLENGE"
	RetrievePaymentOK0Tds2StatusAUTHENTICATED  RetrievePaymentOK0Tds2Status = "AUTHENTICATED"
)

// AllValues returns all RetrievePaymentOK0Tds2Status values.
func (RetrievePaymentOK0Tds2Status) AllValues() []RetrievePaymentOK0Tds2Status {
	return []RetrievePaymentOK0Tds2Status{
		RetrievePaymentOK0Tds2StatusAUTHENTICATING,
		RetrievePaymentOK0Tds2StatusCHALLENGE,
		RetrievePaymentOK0Tds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0Tds2Status) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0Tds2StatusAUTHENTICATING:
		return []byte(s), nil
	case RetrievePaymentOK0Tds2StatusCHALLENGE:
		return []byte(s), nil
	case RetrievePaymentOK0Tds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0Tds2Status) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0Tds2Status(data) {
	case RetrievePaymentOK0Tds2StatusAUTHENTICATING:
		*s = RetrievePaymentOK0Tds2StatusAUTHENTICATING
		return nil
	case RetrievePaymentOK0Tds2StatusCHALLENGE:
		*s = RetrievePaymentOK0Tds2StatusCHALLENGE
		return nil
	case RetrievePaymentOK0Tds2StatusAUTHENTICATED:
		*s = RetrievePaymentOK0Tds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
type RetrievePaymentOK0Tds2Type string

const (
	RetrievePaymentOK0Tds2Type2 RetrievePaymentOK0Tds2Type = "2"
	RetrievePaymentOK0Tds2Type3 RetrievePaymentOK0Tds2Type = "3"
)

// AllValues returns all RetrievePaymentOK0Tds2Type values.
func (RetrievePaymentOK0Tds2Type) AllValues() []RetrievePaymentOK0Tds2Type {
	return []RetrievePaymentOK0Tds2Type{
		RetrievePaymentOK0Tds2Type2,
		RetrievePaymentOK0Tds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0Tds2Type) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0Tds2Type2:
		return []byte(s), nil
	case RetrievePaymentOK0Tds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0Tds2Type) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0Tds2Type(data) {
	case RetrievePaymentOK0Tds2Type2:
		*s = RetrievePaymentOK0Tds2Type2
		return nil
	case RetrievePaymentOK0Tds2Type3:
		*s = RetrievePaymentOK0Tds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
type RetrievePaymentOK0TdsType string

const (
	RetrievePaymentOK0TdsType0 RetrievePaymentOK0TdsType = "0"
	RetrievePaymentOK0TdsType2 RetrievePaymentOK0TdsType = "2"
)

// AllValues returns all RetrievePaymentOK0TdsType values.
func (RetrievePaymentOK0TdsType) AllValues() []RetrievePaymentOK0TdsType {
	return []RetrievePaymentOK0TdsType{
		RetrievePaymentOK0TdsType0,
		RetrievePaymentOK0TdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK0TdsType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK0TdsType0:
		return []byte(s), nil
	case RetrievePaymentOK0TdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK0TdsType) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK0TdsType(data) {
	case RetrievePaymentOK0TdsType0:
		*s = RetrievePaymentOK0TdsType0
		return nil
	case RetrievePaymentOK0TdsType2:
		*s = RetrievePaymentOK0TdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePaymentOK1 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType OptRetrievePaymentOK1PayType `json:"pay_type"`
	JobCode OptRetrievePaymentOK1JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>.
	Status OptRetrievePaymentOK1Status   `json:"status"`
	Brand  OptNilRetrievePaymentOK1Brand `json:"brand"`
	// マスク済みカード番号。\
	// <span class="smallText">
	// 下4桁以外をマスクしたカード番号です。\
	// Apple
	// Payでは実際のカード番号ではなくデバイスアカウント番号と呼ばれる番号で決済が行われるため、このフィールドで返される値はデバイスアカウント番号をマスクしたものになります。\
	// </span>
	// 形式：`************1234`.
	CardNo     OptNilString                     `json:"card_no"`
	Expire     OptNilString                     `json:"expire"`
	HolderName OptNilString                     `json:"holder_name"`
	CardNoHash OptNilString                     `json:"card_no_hash"`
	Method     OptRetrievePaymentOK1Method      `json:"method"`
	PayTimes   OptNilRetrievePaymentOK1PayTimes `json:"pay_times"`
	// 仕向け先.
	Forward OptNilString `json:"forward"`
	// イシュア.
	Issuer OptNilString `json:"issuer"`
	// トランザクションID.
	TransactionID OptNilString `json:"transaction_id"`
	// 承認番号.
	Approve OptNilString `json:"approve"`
	// 仮売上有効期限\
	// `job_code`に`AUTH（仮売上）`を指定した場合値が設定されます。.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 商品コード.
	ItemCode OptNilString `json:"item_code"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
}

// GetShopID returns the value of ShopID.
func (s *RetrievePaymentOK1) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *RetrievePaymentOK1) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *RetrievePaymentOK1) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *RetrievePaymentOK1) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *RetrievePaymentOK1) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *RetrievePaymentOK1) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *RetrievePaymentOK1) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *RetrievePaymentOK1) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *RetrievePaymentOK1) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *RetrievePaymentOK1) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *RetrievePaymentOK1) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *RetrievePaymentOK1) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *RetrievePaymentOK1) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *RetrievePaymentOK1) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *RetrievePaymentOK1) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentOK1) GetPayType() OptRetrievePaymentOK1PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *RetrievePaymentOK1) GetJobCode() OptRetrievePaymentOK1JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *RetrievePaymentOK1) GetStatus() OptRetrievePaymentOK1Status {
	return s.Status
}

// GetBrand returns the value of Brand.
func (s *RetrievePaymentOK1) GetBrand() OptNilRetrievePaymentOK1Brand {
	return s.Brand
}

// GetCardNo returns the value of CardNo.
func (s *RetrievePaymentOK1) GetCardNo() OptNilString {
	return s.CardNo
}

// GetExpire returns the value of Expire.
func (s *RetrievePaymentOK1) GetExpire() OptNilString {
	return s.Expire
}

// GetHolderName returns the value of HolderName.
func (s *RetrievePaymentOK1) GetHolderName() OptNilString {
	return s.HolderName
}

// GetCardNoHash returns the value of CardNoHash.
func (s *RetrievePaymentOK1) GetCardNoHash() OptNilString {
	return s.CardNoHash
}

// GetMethod returns the value of Method.
func (s *RetrievePaymentOK1) GetMethod() OptRetrievePaymentOK1Method {
	return s.Method
}

// GetPayTimes returns the value of PayTimes.
func (s *RetrievePaymentOK1) GetPayTimes() OptNilRetrievePaymentOK1PayTimes {
	return s.PayTimes
}

// GetForward returns the value of Forward.
func (s *RetrievePaymentOK1) GetForward() OptNilString {
	return s.Forward
}

// GetIssuer returns the value of Issuer.
func (s *RetrievePaymentOK1) GetIssuer() OptNilString {
	return s.Issuer
}

// GetTransactionID returns the value of TransactionID.
func (s *RetrievePaymentOK1) GetTransactionID() OptNilString {
	return s.TransactionID
}

// GetApprove returns the value of Approve.
func (s *RetrievePaymentOK1) GetApprove() OptNilString {
	return s.Approve
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *RetrievePaymentOK1) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetItemCode returns the value of ItemCode.
func (s *RetrievePaymentOK1) GetItemCode() OptNilString {
	return s.ItemCode
}

// GetSendURL returns the value of SendURL.
func (s *RetrievePaymentOK1) GetSendURL() OptNilString {
	return s.SendURL
}

// SetShopID sets the value of ShopID.
func (s *RetrievePaymentOK1) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *RetrievePaymentOK1) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *RetrievePaymentOK1) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *RetrievePaymentOK1) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *RetrievePaymentOK1) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *RetrievePaymentOK1) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *RetrievePaymentOK1) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *RetrievePaymentOK1) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *RetrievePaymentOK1) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *RetrievePaymentOK1) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *RetrievePaymentOK1) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *RetrievePaymentOK1) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *RetrievePaymentOK1) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *RetrievePaymentOK1) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *RetrievePaymentOK1) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentOK1) SetPayType(val OptRetrievePaymentOK1PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *RetrievePaymentOK1) SetJobCode(val OptRetrievePaymentOK1JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *RetrievePaymentOK1) SetStatus(val OptRetrievePaymentOK1Status) {
	s.Status = val
}

// SetBrand sets the value of Brand.
func (s *RetrievePaymentOK1) SetBrand(val OptNilRetrievePaymentOK1Brand) {
	s.Brand = val
}

// SetCardNo sets the value of CardNo.
func (s *RetrievePaymentOK1) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetExpire sets the value of Expire.
func (s *RetrievePaymentOK1) SetExpire(val OptNilString) {
	s.Expire = val
}

// SetHolderName sets the value of HolderName.
func (s *RetrievePaymentOK1) SetHolderName(val OptNilString) {
	s.HolderName = val
}

// SetCardNoHash sets the value of CardNoHash.
func (s *RetrievePaymentOK1) SetCardNoHash(val OptNilString) {
	s.CardNoHash = val
}

// SetMethod sets the value of Method.
func (s *RetrievePaymentOK1) SetMethod(val OptRetrievePaymentOK1Method) {
	s.Method = val
}

// SetPayTimes sets the value of PayTimes.
func (s *RetrievePaymentOK1) SetPayTimes(val OptNilRetrievePaymentOK1PayTimes) {
	s.PayTimes = val
}

// SetForward sets the value of Forward.
func (s *RetrievePaymentOK1) SetForward(val OptNilString) {
	s.Forward = val
}

// SetIssuer sets the value of Issuer.
func (s *RetrievePaymentOK1) SetIssuer(val OptNilString) {
	s.Issuer = val
}

// SetTransactionID sets the value of TransactionID.
func (s *RetrievePaymentOK1) SetTransactionID(val OptNilString) {
	s.TransactionID = val
}

// SetApprove sets the value of Approve.
func (s *RetrievePaymentOK1) SetApprove(val OptNilString) {
	s.Approve = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *RetrievePaymentOK1) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetItemCode sets the value of ItemCode.
func (s *RetrievePaymentOK1) SetItemCode(val OptNilString) {
	s.ItemCode = val
}

// SetSendURL sets the value of SendURL.
func (s *RetrievePaymentOK1) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// カードブランドを表します。
// - `VISA`: VISA
// - `MASTER`: Mastercard
// - `JCB`: JCB
// - `AMEX`: American Express
// - `DINERS`: Diners Club
// - `DISCOVER`: Discover
// - `""`（空文字列） : 判定不能.
type RetrievePaymentOK1Brand string

const (
	RetrievePaymentOK1BrandVISA     RetrievePaymentOK1Brand = "VISA"
	RetrievePaymentOK1BrandMASTER   RetrievePaymentOK1Brand = "MASTER"
	RetrievePaymentOK1BrandJCB      RetrievePaymentOK1Brand = "JCB"
	RetrievePaymentOK1BrandAMEX     RetrievePaymentOK1Brand = "AMEX"
	RetrievePaymentOK1BrandDINERS   RetrievePaymentOK1Brand = "DINERS"
	RetrievePaymentOK1BrandDISCOVER RetrievePaymentOK1Brand = "DISCOVER"
	RetrievePaymentOK1BrandEmpty    RetrievePaymentOK1Brand = ""
)

// AllValues returns all RetrievePaymentOK1Brand values.
func (RetrievePaymentOK1Brand) AllValues() []RetrievePaymentOK1Brand {
	return []RetrievePaymentOK1Brand{
		RetrievePaymentOK1BrandVISA,
		RetrievePaymentOK1BrandMASTER,
		RetrievePaymentOK1BrandJCB,
		RetrievePaymentOK1BrandAMEX,
		RetrievePaymentOK1BrandDINERS,
		RetrievePaymentOK1BrandDISCOVER,
		RetrievePaymentOK1BrandEmpty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK1Brand) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK1BrandVISA:
		return []byte(s), nil
	case RetrievePaymentOK1BrandMASTER:
		return []byte(s), nil
	case RetrievePaymentOK1BrandJCB:
		return []byte(s), nil
	case RetrievePaymentOK1BrandAMEX:
		return []byte(s), nil
	case RetrievePaymentOK1BrandDINERS:
		return []byte(s), nil
	case RetrievePaymentOK1BrandDISCOVER:
		return []byte(s), nil
	case RetrievePaymentOK1BrandEmpty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK1Brand) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK1Brand(data) {
	case RetrievePaymentOK1BrandVISA:
		*s = RetrievePaymentOK1BrandVISA
		return nil
	case RetrievePaymentOK1BrandMASTER:
		*s = RetrievePaymentOK1BrandMASTER
		return nil
	case RetrievePaymentOK1BrandJCB:
		*s = RetrievePaymentOK1BrandJCB
		return nil
	case RetrievePaymentOK1BrandAMEX:
		*s = RetrievePaymentOK1BrandAMEX
		return nil
	case RetrievePaymentOK1BrandDINERS:
		*s = RetrievePaymentOK1BrandDINERS
		return nil
	case RetrievePaymentOK1BrandDISCOVER:
		*s = RetrievePaymentOK1BrandDISCOVER
		return nil
	case RetrievePaymentOK1BrandEmpty:
		*s = RetrievePaymentOK1BrandEmpty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type RetrievePaymentOK1JobCode string

const (
	RetrievePaymentOK1JobCodeAUTH    RetrievePaymentOK1JobCode = "AUTH"
	RetrievePaymentOK1JobCodeCAPTURE RetrievePaymentOK1JobCode = "CAPTURE"
)

// AllValues returns all RetrievePaymentOK1JobCode values.
func (RetrievePaymentOK1JobCode) AllValues() []RetrievePaymentOK1JobCode {
	return []RetrievePaymentOK1JobCode{
		RetrievePaymentOK1JobCodeAUTH,
		RetrievePaymentOK1JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK1JobCode) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK1JobCodeAUTH:
		return []byte(s), nil
	case RetrievePaymentOK1JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK1JobCode) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK1JobCode(data) {
	case RetrievePaymentOK1JobCodeAUTH:
		*s = RetrievePaymentOK1JobCodeAUTH
		return nil
	case RetrievePaymentOK1JobCodeCAPTURE:
		*s = RetrievePaymentOK1JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type RetrievePaymentOK1Method string

const (
	RetrievePaymentOK1Method1 RetrievePaymentOK1Method = "1"
	RetrievePaymentOK1Method2 RetrievePaymentOK1Method = "2"
	RetrievePaymentOK1Method5 RetrievePaymentOK1Method = "5"
)

// AllValues returns all RetrievePaymentOK1Method values.
func (RetrievePaymentOK1Method) AllValues() []RetrievePaymentOK1Method {
	return []RetrievePaymentOK1Method{
		RetrievePaymentOK1Method1,
		RetrievePaymentOK1Method2,
		RetrievePaymentOK1Method5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK1Method) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK1Method1:
		return []byte(s), nil
	case RetrievePaymentOK1Method2:
		return []byte(s), nil
	case RetrievePaymentOK1Method5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK1Method) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK1Method(data) {
	case RetrievePaymentOK1Method1:
		*s = RetrievePaymentOK1Method1
		return nil
	case RetrievePaymentOK1Method2:
		*s = RetrievePaymentOK1Method2
		return nil
	case RetrievePaymentOK1Method5:
		*s = RetrievePaymentOK1Method5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// （分割払いの場合）支払回数\
// \
// 指定可能な値： `3`, `5`, `6`, `10`, `12`, `15`, `18`, `20`, `24`.
type RetrievePaymentOK1PayTimes string

const (
	RetrievePaymentOK1PayTimes3  RetrievePaymentOK1PayTimes = "3"
	RetrievePaymentOK1PayTimes5  RetrievePaymentOK1PayTimes = "5"
	RetrievePaymentOK1PayTimes6  RetrievePaymentOK1PayTimes = "6"
	RetrievePaymentOK1PayTimes10 RetrievePaymentOK1PayTimes = "10"
	RetrievePaymentOK1PayTimes12 RetrievePaymentOK1PayTimes = "12"
	RetrievePaymentOK1PayTimes15 RetrievePaymentOK1PayTimes = "15"
	RetrievePaymentOK1PayTimes18 RetrievePaymentOK1PayTimes = "18"
	RetrievePaymentOK1PayTimes20 RetrievePaymentOK1PayTimes = "20"
	RetrievePaymentOK1PayTimes24 RetrievePaymentOK1PayTimes = "24"
)

// AllValues returns all RetrievePaymentOK1PayTimes values.
func (RetrievePaymentOK1PayTimes) AllValues() []RetrievePaymentOK1PayTimes {
	return []RetrievePaymentOK1PayTimes{
		RetrievePaymentOK1PayTimes3,
		RetrievePaymentOK1PayTimes5,
		RetrievePaymentOK1PayTimes6,
		RetrievePaymentOK1PayTimes10,
		RetrievePaymentOK1PayTimes12,
		RetrievePaymentOK1PayTimes15,
		RetrievePaymentOK1PayTimes18,
		RetrievePaymentOK1PayTimes20,
		RetrievePaymentOK1PayTimes24,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK1PayTimes) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK1PayTimes3:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes5:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes6:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes10:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes12:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes15:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes18:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes20:
		return []byte(s), nil
	case RetrievePaymentOK1PayTimes24:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK1PayTimes) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK1PayTimes(data) {
	case RetrievePaymentOK1PayTimes3:
		*s = RetrievePaymentOK1PayTimes3
		return nil
	case RetrievePaymentOK1PayTimes5:
		*s = RetrievePaymentOK1PayTimes5
		return nil
	case RetrievePaymentOK1PayTimes6:
		*s = RetrievePaymentOK1PayTimes6
		return nil
	case RetrievePaymentOK1PayTimes10:
		*s = RetrievePaymentOK1PayTimes10
		return nil
	case RetrievePaymentOK1PayTimes12:
		*s = RetrievePaymentOK1PayTimes12
		return nil
	case RetrievePaymentOK1PayTimes15:
		*s = RetrievePaymentOK1PayTimes15
		return nil
	case RetrievePaymentOK1PayTimes18:
		*s = RetrievePaymentOK1PayTimes18
		return nil
	case RetrievePaymentOK1PayTimes20:
		*s = RetrievePaymentOK1PayTimes20
		return nil
	case RetrievePaymentOK1PayTimes24:
		*s = RetrievePaymentOK1PayTimes24
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type RetrievePaymentOK1PayType string

const (
	RetrievePaymentOK1PayTypeCard           RetrievePaymentOK1PayType = "Card"
	RetrievePaymentOK1PayTypeKonbini        RetrievePaymentOK1PayType = "Konbini"
	RetrievePaymentOK1PayTypePaypay         RetrievePaymentOK1PayType = "Paypay"
	RetrievePaymentOK1PayTypeApplepay       RetrievePaymentOK1PayType = "Applepay"
	RetrievePaymentOK1PayTypeDirectdebit    RetrievePaymentOK1PayType = "Directdebit"
	RetrievePaymentOK1PayTypeVirtualaccount RetrievePaymentOK1PayType = "Virtualaccount"
)

// AllValues returns all RetrievePaymentOK1PayType values.
func (RetrievePaymentOK1PayType) AllValues() []RetrievePaymentOK1PayType {
	return []RetrievePaymentOK1PayType{
		RetrievePaymentOK1PayTypeCard,
		RetrievePaymentOK1PayTypeKonbini,
		RetrievePaymentOK1PayTypePaypay,
		RetrievePaymentOK1PayTypeApplepay,
		RetrievePaymentOK1PayTypeDirectdebit,
		RetrievePaymentOK1PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK1PayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK1PayTypeCard:
		return []byte(s), nil
	case RetrievePaymentOK1PayTypeKonbini:
		return []byte(s), nil
	case RetrievePaymentOK1PayTypePaypay:
		return []byte(s), nil
	case RetrievePaymentOK1PayTypeApplepay:
		return []byte(s), nil
	case RetrievePaymentOK1PayTypeDirectdebit:
		return []byte(s), nil
	case RetrievePaymentOK1PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK1PayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK1PayType(data) {
	case RetrievePaymentOK1PayTypeCard:
		*s = RetrievePaymentOK1PayTypeCard
		return nil
	case RetrievePaymentOK1PayTypeKonbini:
		*s = RetrievePaymentOK1PayTypeKonbini
		return nil
	case RetrievePaymentOK1PayTypePaypay:
		*s = RetrievePaymentOK1PayTypePaypay
		return nil
	case RetrievePaymentOK1PayTypeApplepay:
		*s = RetrievePaymentOK1PayTypeApplepay
		return nil
	case RetrievePaymentOK1PayTypeDirectdebit:
		*s = RetrievePaymentOK1PayTypeDirectdebit
		return nil
	case RetrievePaymentOK1PayTypeVirtualaccount:
		*s = RetrievePaymentOK1PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type RetrievePaymentOK1Status string

const (
	RetrievePaymentOK1StatusUNPROCESSED             RetrievePaymentOK1Status = "UNPROCESSED"
	RetrievePaymentOK1StatusCHECKED                 RetrievePaymentOK1Status = "CHECKED"
	RetrievePaymentOK1StatusAUTHORIZED              RetrievePaymentOK1Status = "AUTHORIZED"
	RetrievePaymentOK1StatusAWAITINGCUSTOMERPAYMENT RetrievePaymentOK1Status = "AWAITING_CUSTOMER_PAYMENT"
	RetrievePaymentOK1StatusAWAITINGPAYMENTAPPROVAL RetrievePaymentOK1Status = "AWAITING_PAYMENT_APPROVAL"
	RetrievePaymentOK1StatusCAPTURED                RetrievePaymentOK1Status = "CAPTURED"
	RetrievePaymentOK1StatusCANCELED                RetrievePaymentOK1Status = "CANCELED"
	RetrievePaymentOK1StatusEXPIRED                 RetrievePaymentOK1Status = "EXPIRED"
	RetrievePaymentOK1StatusAUTHENTICATED           RetrievePaymentOK1Status = "AUTHENTICATED"
	RetrievePaymentOK1StatusFAILED                  RetrievePaymentOK1Status = "FAILED"
)

// AllValues returns all RetrievePaymentOK1Status values.
func (RetrievePaymentOK1Status) AllValues() []RetrievePaymentOK1Status {
	return []RetrievePaymentOK1Status{
		RetrievePaymentOK1StatusUNPROCESSED,
		RetrievePaymentOK1StatusCHECKED,
		RetrievePaymentOK1StatusAUTHORIZED,
		RetrievePaymentOK1StatusAWAITINGCUSTOMERPAYMENT,
		RetrievePaymentOK1StatusAWAITINGPAYMENTAPPROVAL,
		RetrievePaymentOK1StatusCAPTURED,
		RetrievePaymentOK1StatusCANCELED,
		RetrievePaymentOK1StatusEXPIRED,
		RetrievePaymentOK1StatusAUTHENTICATED,
		RetrievePaymentOK1StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK1Status) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK1StatusUNPROCESSED:
		return []byte(s), nil
	case RetrievePaymentOK1StatusCHECKED:
		return []byte(s), nil
	case RetrievePaymentOK1StatusAUTHORIZED:
		return []byte(s), nil
	case RetrievePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case RetrievePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case RetrievePaymentOK1StatusCAPTURED:
		return []byte(s), nil
	case RetrievePaymentOK1StatusCANCELED:
		return []byte(s), nil
	case RetrievePaymentOK1StatusEXPIRED:
		return []byte(s), nil
	case RetrievePaymentOK1StatusAUTHENTICATED:
		return []byte(s), nil
	case RetrievePaymentOK1StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK1Status) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK1Status(data) {
	case RetrievePaymentOK1StatusUNPROCESSED:
		*s = RetrievePaymentOK1StatusUNPROCESSED
		return nil
	case RetrievePaymentOK1StatusCHECKED:
		*s = RetrievePaymentOK1StatusCHECKED
		return nil
	case RetrievePaymentOK1StatusAUTHORIZED:
		*s = RetrievePaymentOK1StatusAUTHORIZED
		return nil
	case RetrievePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case RetrievePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case RetrievePaymentOK1StatusCAPTURED:
		*s = RetrievePaymentOK1StatusCAPTURED
		return nil
	case RetrievePaymentOK1StatusCANCELED:
		*s = RetrievePaymentOK1StatusCANCELED
		return nil
	case RetrievePaymentOK1StatusEXPIRED:
		*s = RetrievePaymentOK1StatusEXPIRED
		return nil
	case RetrievePaymentOK1StatusAUTHENTICATED:
		*s = RetrievePaymentOK1StatusAUTHENTICATED
		return nil
	case RetrievePaymentOK1StatusFAILED:
		*s = RetrievePaymentOK1StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePaymentOK2 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType OptRetrievePaymentOK2PayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるコンビニ店頭レジでの払い込みを待っている状態。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptRetrievePaymentOK2Status `json:"status"`
	// 支払い期限日数\
	// この決済の支払い期限日数です。`"0"`日から`"14"`日まで指定できます。
	// -
	// `"0"`を指定すると決済を作成した当日に限り支払いが可能な決済が作成されます。
	// - デフォルト：`"2"`.
	PaymentTermDay OptNilString `json:"payment_term_day"`
	// 支払い期限日時\
	// コンビニ決済の支払い期限日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentTerm OptNilString `json:"payment_term"`
	// 支払日時\
	// コンビニ店頭で購入者が支払いを行った日時です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
	// バーコード画像 Base64エンコード済み画像データ\
	// コンビニ店頭での支払いに使用するバーコード画像のBase64エンコード済みデータです。このデータをデコードして表示します。\
	// バーコード画像はレギュレーションに従って表示する必要があります。詳細は[Docs > レギュレーションと注意事項](https://docs.fincode.jp/payment/konbini/note)から参照できます。.
	Barcode OptNilString `json:"barcode"`
	// バーコード画像 フォーマット\
	// 発行されたバーコード画像（`barcode`）のフォーマットです。.
	BarcodeFormat OptNilRetrievePaymentOK2BarcodeFormat `json:"barcode_format"`
	// バーコード画像 横幅（px）\
	// 発行されたバーコード画像（`barcode`）の横幅です。.
	BarcodeWidth OptNilString `json:"barcode_width"`
	// バーコード画像 縦幅（px）\
	// 発行されたバーコード画像（`barcode`）の縦幅です。.
	BarcodeHeight OptNilString `json:"barcode_height"`
	// 多重支払フラグ\
	// この決済に対して複数回支払いが行われた場合`1`になります。
	// - `0`: 0回、または1回の支払いが行われた
	// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
	OverpaymentFlag OptRetrievePaymentOK2OverpaymentFlag `json:"overpayment_flag"`
	// キャンセル後支払フラグ\
	// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
	// - `0`: キャンセル後支払は行われていない
	// - `1`: キャンセル後、購入者による支払いが行われた.
	CancelOverpaymentFlag OptRetrievePaymentOK2CancelOverpaymentFlag `json:"cancel_overpayment_flag"`
	KonbiniCode           OptNilRetrievePaymentOK2KonbiniCode        `json:"konbini_code"`
	// コンビニ店舗コード\
	// コンビニ事業者ごとに独自体系の店舗コードです。.
	KonbiniStoreCode jx.Raw       `json:"konbini_store_code"`
	DeviceName       OptNilString `json:"device_name"`
	// OSバージョン.
	OsVersion jx.Raw       `json:"os_version"`
	WinWidth  OptNilString `json:"win_width"`
	WinHeight OptNilString `json:"win_height"`
	// 画面横幅のDPI.
	Xdpi jx.Raw `json:"xdpi"`
	// 画面縦幅のDPI.
	Ydpi   jx.Raw                      `json:"ydpi"`
	Result OptRetrievePaymentOK2Result `json:"result"`
	// 注文管理ID.
	OrderSerial OptNilString `json:"order_serial"`
	// 請求ID.
	InvoiceID OptNilString `json:"invoice_id"`
}

// GetShopID returns the value of ShopID.
func (s *RetrievePaymentOK2) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *RetrievePaymentOK2) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *RetrievePaymentOK2) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *RetrievePaymentOK2) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *RetrievePaymentOK2) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *RetrievePaymentOK2) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *RetrievePaymentOK2) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *RetrievePaymentOK2) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *RetrievePaymentOK2) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *RetrievePaymentOK2) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *RetrievePaymentOK2) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *RetrievePaymentOK2) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *RetrievePaymentOK2) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *RetrievePaymentOK2) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *RetrievePaymentOK2) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentOK2) GetPayType() OptRetrievePaymentOK2PayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *RetrievePaymentOK2) GetStatus() OptRetrievePaymentOK2Status {
	return s.Status
}

// GetPaymentTermDay returns the value of PaymentTermDay.
func (s *RetrievePaymentOK2) GetPaymentTermDay() OptNilString {
	return s.PaymentTermDay
}

// GetPaymentTerm returns the value of PaymentTerm.
func (s *RetrievePaymentOK2) GetPaymentTerm() OptNilString {
	return s.PaymentTerm
}

// GetPaymentDate returns the value of PaymentDate.
func (s *RetrievePaymentOK2) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// GetBarcode returns the value of Barcode.
func (s *RetrievePaymentOK2) GetBarcode() OptNilString {
	return s.Barcode
}

// GetBarcodeFormat returns the value of BarcodeFormat.
func (s *RetrievePaymentOK2) GetBarcodeFormat() OptNilRetrievePaymentOK2BarcodeFormat {
	return s.BarcodeFormat
}

// GetBarcodeWidth returns the value of BarcodeWidth.
func (s *RetrievePaymentOK2) GetBarcodeWidth() OptNilString {
	return s.BarcodeWidth
}

// GetBarcodeHeight returns the value of BarcodeHeight.
func (s *RetrievePaymentOK2) GetBarcodeHeight() OptNilString {
	return s.BarcodeHeight
}

// GetOverpaymentFlag returns the value of OverpaymentFlag.
func (s *RetrievePaymentOK2) GetOverpaymentFlag() OptRetrievePaymentOK2OverpaymentFlag {
	return s.OverpaymentFlag
}

// GetCancelOverpaymentFlag returns the value of CancelOverpaymentFlag.
func (s *RetrievePaymentOK2) GetCancelOverpaymentFlag() OptRetrievePaymentOK2CancelOverpaymentFlag {
	return s.CancelOverpaymentFlag
}

// GetKonbiniCode returns the value of KonbiniCode.
func (s *RetrievePaymentOK2) GetKonbiniCode() OptNilRetrievePaymentOK2KonbiniCode {
	return s.KonbiniCode
}

// GetKonbiniStoreCode returns the value of KonbiniStoreCode.
func (s *RetrievePaymentOK2) GetKonbiniStoreCode() jx.Raw {
	return s.KonbiniStoreCode
}

// GetDeviceName returns the value of DeviceName.
func (s *RetrievePaymentOK2) GetDeviceName() OptNilString {
	return s.DeviceName
}

// GetOsVersion returns the value of OsVersion.
func (s *RetrievePaymentOK2) GetOsVersion() jx.Raw {
	return s.OsVersion
}

// GetWinWidth returns the value of WinWidth.
func (s *RetrievePaymentOK2) GetWinWidth() OptNilString {
	return s.WinWidth
}

// GetWinHeight returns the value of WinHeight.
func (s *RetrievePaymentOK2) GetWinHeight() OptNilString {
	return s.WinHeight
}

// GetXdpi returns the value of Xdpi.
func (s *RetrievePaymentOK2) GetXdpi() jx.Raw {
	return s.Xdpi
}

// GetYdpi returns the value of Ydpi.
func (s *RetrievePaymentOK2) GetYdpi() jx.Raw {
	return s.Ydpi
}

// GetResult returns the value of Result.
func (s *RetrievePaymentOK2) GetResult() OptRetrievePaymentOK2Result {
	return s.Result
}

// GetOrderSerial returns the value of OrderSerial.
func (s *RetrievePaymentOK2) GetOrderSerial() OptNilString {
	return s.OrderSerial
}

// GetInvoiceID returns the value of InvoiceID.
func (s *RetrievePaymentOK2) GetInvoiceID() OptNilString {
	return s.InvoiceID
}

// SetShopID sets the value of ShopID.
func (s *RetrievePaymentOK2) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *RetrievePaymentOK2) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *RetrievePaymentOK2) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *RetrievePaymentOK2) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *RetrievePaymentOK2) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *RetrievePaymentOK2) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *RetrievePaymentOK2) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *RetrievePaymentOK2) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *RetrievePaymentOK2) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *RetrievePaymentOK2) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *RetrievePaymentOK2) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *RetrievePaymentOK2) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *RetrievePaymentOK2) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *RetrievePaymentOK2) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *RetrievePaymentOK2) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentOK2) SetPayType(val OptRetrievePaymentOK2PayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *RetrievePaymentOK2) SetStatus(val OptRetrievePaymentOK2Status) {
	s.Status = val
}

// SetPaymentTermDay sets the value of PaymentTermDay.
func (s *RetrievePaymentOK2) SetPaymentTermDay(val OptNilString) {
	s.PaymentTermDay = val
}

// SetPaymentTerm sets the value of PaymentTerm.
func (s *RetrievePaymentOK2) SetPaymentTerm(val OptNilString) {
	s.PaymentTerm = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *RetrievePaymentOK2) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// SetBarcode sets the value of Barcode.
func (s *RetrievePaymentOK2) SetBarcode(val OptNilString) {
	s.Barcode = val
}

// SetBarcodeFormat sets the value of BarcodeFormat.
func (s *RetrievePaymentOK2) SetBarcodeFormat(val OptNilRetrievePaymentOK2BarcodeFormat) {
	s.BarcodeFormat = val
}

// SetBarcodeWidth sets the value of BarcodeWidth.
func (s *RetrievePaymentOK2) SetBarcodeWidth(val OptNilString) {
	s.BarcodeWidth = val
}

// SetBarcodeHeight sets the value of BarcodeHeight.
func (s *RetrievePaymentOK2) SetBarcodeHeight(val OptNilString) {
	s.BarcodeHeight = val
}

// SetOverpaymentFlag sets the value of OverpaymentFlag.
func (s *RetrievePaymentOK2) SetOverpaymentFlag(val OptRetrievePaymentOK2OverpaymentFlag) {
	s.OverpaymentFlag = val
}

// SetCancelOverpaymentFlag sets the value of CancelOverpaymentFlag.
func (s *RetrievePaymentOK2) SetCancelOverpaymentFlag(val OptRetrievePaymentOK2CancelOverpaymentFlag) {
	s.CancelOverpaymentFlag = val
}

// SetKonbiniCode sets the value of KonbiniCode.
func (s *RetrievePaymentOK2) SetKonbiniCode(val OptNilRetrievePaymentOK2KonbiniCode) {
	s.KonbiniCode = val
}

// SetKonbiniStoreCode sets the value of KonbiniStoreCode.
func (s *RetrievePaymentOK2) SetKonbiniStoreCode(val jx.Raw) {
	s.KonbiniStoreCode = val
}

// SetDeviceName sets the value of DeviceName.
func (s *RetrievePaymentOK2) SetDeviceName(val OptNilString) {
	s.DeviceName = val
}

// SetOsVersion sets the value of OsVersion.
func (s *RetrievePaymentOK2) SetOsVersion(val jx.Raw) {
	s.OsVersion = val
}

// SetWinWidth sets the value of WinWidth.
func (s *RetrievePaymentOK2) SetWinWidth(val OptNilString) {
	s.WinWidth = val
}

// SetWinHeight sets the value of WinHeight.
func (s *RetrievePaymentOK2) SetWinHeight(val OptNilString) {
	s.WinHeight = val
}

// SetXdpi sets the value of Xdpi.
func (s *RetrievePaymentOK2) SetXdpi(val jx.Raw) {
	s.Xdpi = val
}

// SetYdpi sets the value of Ydpi.
func (s *RetrievePaymentOK2) SetYdpi(val jx.Raw) {
	s.Ydpi = val
}

// SetResult sets the value of Result.
func (s *RetrievePaymentOK2) SetResult(val OptRetrievePaymentOK2Result) {
	s.Result = val
}

// SetOrderSerial sets the value of OrderSerial.
func (s *RetrievePaymentOK2) SetOrderSerial(val OptNilString) {
	s.OrderSerial = val
}

// SetInvoiceID sets the value of InvoiceID.
func (s *RetrievePaymentOK2) SetInvoiceID(val OptNilString) {
	s.InvoiceID = val
}

// バーコード画像 フォーマット\
// 発行されたバーコード画像（`barcode`）のフォーマットです。.
type RetrievePaymentOK2BarcodeFormat string

const (
	RetrievePaymentOK2BarcodeFormatJPG RetrievePaymentOK2BarcodeFormat = "jpg"
	RetrievePaymentOK2BarcodeFormatPNG RetrievePaymentOK2BarcodeFormat = "png"
	RetrievePaymentOK2BarcodeFormatBmp RetrievePaymentOK2BarcodeFormat = "bmp"
)

// AllValues returns all RetrievePaymentOK2BarcodeFormat values.
func (RetrievePaymentOK2BarcodeFormat) AllValues() []RetrievePaymentOK2BarcodeFormat {
	return []RetrievePaymentOK2BarcodeFormat{
		RetrievePaymentOK2BarcodeFormatJPG,
		RetrievePaymentOK2BarcodeFormatPNG,
		RetrievePaymentOK2BarcodeFormatBmp,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK2BarcodeFormat) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK2BarcodeFormatJPG:
		return []byte(s), nil
	case RetrievePaymentOK2BarcodeFormatPNG:
		return []byte(s), nil
	case RetrievePaymentOK2BarcodeFormatBmp:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK2BarcodeFormat) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK2BarcodeFormat(data) {
	case RetrievePaymentOK2BarcodeFormatJPG:
		*s = RetrievePaymentOK2BarcodeFormatJPG
		return nil
	case RetrievePaymentOK2BarcodeFormatPNG:
		*s = RetrievePaymentOK2BarcodeFormatPNG
		return nil
	case RetrievePaymentOK2BarcodeFormatBmp:
		*s = RetrievePaymentOK2BarcodeFormatBmp
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// キャンセル後支払フラグ\
// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
// - `0`: キャンセル後支払は行われていない
// - `1`: キャンセル後、購入者による支払いが行われた.
type RetrievePaymentOK2CancelOverpaymentFlag string

const (
	RetrievePaymentOK2CancelOverpaymentFlag0 RetrievePaymentOK2CancelOverpaymentFlag = "0"
	RetrievePaymentOK2CancelOverpaymentFlag1 RetrievePaymentOK2CancelOverpaymentFlag = "1"
)

// AllValues returns all RetrievePaymentOK2CancelOverpaymentFlag values.
func (RetrievePaymentOK2CancelOverpaymentFlag) AllValues() []RetrievePaymentOK2CancelOverpaymentFlag {
	return []RetrievePaymentOK2CancelOverpaymentFlag{
		RetrievePaymentOK2CancelOverpaymentFlag0,
		RetrievePaymentOK2CancelOverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK2CancelOverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK2CancelOverpaymentFlag0:
		return []byte(s), nil
	case RetrievePaymentOK2CancelOverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK2CancelOverpaymentFlag) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK2CancelOverpaymentFlag(data) {
	case RetrievePaymentOK2CancelOverpaymentFlag0:
		*s = RetrievePaymentOK2CancelOverpaymentFlag0
		return nil
	case RetrievePaymentOK2CancelOverpaymentFlag1:
		*s = RetrievePaymentOK2CancelOverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者コード\
// 購入者が払い込みを行ったコンビニ事業者をあらわすコード。
// - `00010`: セブン-イレブン
// - `00020`: ローソン
// - `00030`: ファミリーマート
// - `00080`: ミニストップ
// - `00760`: セイコーマート.
type RetrievePaymentOK2KonbiniCode string

const (
	RetrievePaymentOK2KonbiniCode00010 RetrievePaymentOK2KonbiniCode = "00010"
	RetrievePaymentOK2KonbiniCode00020 RetrievePaymentOK2KonbiniCode = "00020"
	RetrievePaymentOK2KonbiniCode00030 RetrievePaymentOK2KonbiniCode = "00030"
	RetrievePaymentOK2KonbiniCode00080 RetrievePaymentOK2KonbiniCode = "00080"
	RetrievePaymentOK2KonbiniCode00760 RetrievePaymentOK2KonbiniCode = "00760"
)

// AllValues returns all RetrievePaymentOK2KonbiniCode values.
func (RetrievePaymentOK2KonbiniCode) AllValues() []RetrievePaymentOK2KonbiniCode {
	return []RetrievePaymentOK2KonbiniCode{
		RetrievePaymentOK2KonbiniCode00010,
		RetrievePaymentOK2KonbiniCode00020,
		RetrievePaymentOK2KonbiniCode00030,
		RetrievePaymentOK2KonbiniCode00080,
		RetrievePaymentOK2KonbiniCode00760,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK2KonbiniCode) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK2KonbiniCode00010:
		return []byte(s), nil
	case RetrievePaymentOK2KonbiniCode00020:
		return []byte(s), nil
	case RetrievePaymentOK2KonbiniCode00030:
		return []byte(s), nil
	case RetrievePaymentOK2KonbiniCode00080:
		return []byte(s), nil
	case RetrievePaymentOK2KonbiniCode00760:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK2KonbiniCode) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK2KonbiniCode(data) {
	case RetrievePaymentOK2KonbiniCode00010:
		*s = RetrievePaymentOK2KonbiniCode00010
		return nil
	case RetrievePaymentOK2KonbiniCode00020:
		*s = RetrievePaymentOK2KonbiniCode00020
		return nil
	case RetrievePaymentOK2KonbiniCode00030:
		*s = RetrievePaymentOK2KonbiniCode00030
		return nil
	case RetrievePaymentOK2KonbiniCode00080:
		*s = RetrievePaymentOK2KonbiniCode00080
		return nil
	case RetrievePaymentOK2KonbiniCode00760:
		*s = RetrievePaymentOK2KonbiniCode00760
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 多重支払フラグ\
// この決済に対して複数回支払いが行われた場合`1`になります。
// - `0`: 0回、または1回の支払いが行われた
// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
type RetrievePaymentOK2OverpaymentFlag string

const (
	RetrievePaymentOK2OverpaymentFlag0 RetrievePaymentOK2OverpaymentFlag = "0"
	RetrievePaymentOK2OverpaymentFlag1 RetrievePaymentOK2OverpaymentFlag = "1"
)

// AllValues returns all RetrievePaymentOK2OverpaymentFlag values.
func (RetrievePaymentOK2OverpaymentFlag) AllValues() []RetrievePaymentOK2OverpaymentFlag {
	return []RetrievePaymentOK2OverpaymentFlag{
		RetrievePaymentOK2OverpaymentFlag0,
		RetrievePaymentOK2OverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK2OverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK2OverpaymentFlag0:
		return []byte(s), nil
	case RetrievePaymentOK2OverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK2OverpaymentFlag) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK2OverpaymentFlag(data) {
	case RetrievePaymentOK2OverpaymentFlag0:
		*s = RetrievePaymentOK2OverpaymentFlag0
		return nil
	case RetrievePaymentOK2OverpaymentFlag1:
		*s = RetrievePaymentOK2OverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type RetrievePaymentOK2PayType string

const (
	RetrievePaymentOK2PayTypeCard           RetrievePaymentOK2PayType = "Card"
	RetrievePaymentOK2PayTypeKonbini        RetrievePaymentOK2PayType = "Konbini"
	RetrievePaymentOK2PayTypePaypay         RetrievePaymentOK2PayType = "Paypay"
	RetrievePaymentOK2PayTypeApplepay       RetrievePaymentOK2PayType = "Applepay"
	RetrievePaymentOK2PayTypeDirectdebit    RetrievePaymentOK2PayType = "Directdebit"
	RetrievePaymentOK2PayTypeVirtualaccount RetrievePaymentOK2PayType = "Virtualaccount"
)

// AllValues returns all RetrievePaymentOK2PayType values.
func (RetrievePaymentOK2PayType) AllValues() []RetrievePaymentOK2PayType {
	return []RetrievePaymentOK2PayType{
		RetrievePaymentOK2PayTypeCard,
		RetrievePaymentOK2PayTypeKonbini,
		RetrievePaymentOK2PayTypePaypay,
		RetrievePaymentOK2PayTypeApplepay,
		RetrievePaymentOK2PayTypeDirectdebit,
		RetrievePaymentOK2PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK2PayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK2PayTypeCard:
		return []byte(s), nil
	case RetrievePaymentOK2PayTypeKonbini:
		return []byte(s), nil
	case RetrievePaymentOK2PayTypePaypay:
		return []byte(s), nil
	case RetrievePaymentOK2PayTypeApplepay:
		return []byte(s), nil
	case RetrievePaymentOK2PayTypeDirectdebit:
		return []byte(s), nil
	case RetrievePaymentOK2PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK2PayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK2PayType(data) {
	case RetrievePaymentOK2PayTypeCard:
		*s = RetrievePaymentOK2PayTypeCard
		return nil
	case RetrievePaymentOK2PayTypeKonbini:
		*s = RetrievePaymentOK2PayTypeKonbini
		return nil
	case RetrievePaymentOK2PayTypePaypay:
		*s = RetrievePaymentOK2PayTypePaypay
		return nil
	case RetrievePaymentOK2PayTypeApplepay:
		*s = RetrievePaymentOK2PayTypeApplepay
		return nil
	case RetrievePaymentOK2PayTypeDirectdebit:
		*s = RetrievePaymentOK2PayTypeDirectdebit
		return nil
	case RetrievePaymentOK2PayTypeVirtualaccount:
		*s = RetrievePaymentOK2PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者の決済処理結果コード
// - `000`: 正常終了
// - `001`: 認証失敗
// - `002`:
// 注文登録には成功したものの端末情報が確認できなかったためバーコード画像の発行なし
// - `003`: 必須項目の不備によるエラー
// - `004`: バーコードデータ内の識別子が不正
// - `005`: バーコードデータ内のメーカーコードが不正
// - `006`: バーコードデータ内の企業識別コードが不正
// - `007`: 支払い期限日時を超過している、または形式が不正
// - `008`: 支払い金額が上限もしくは下限を超えている
// - `009`: 全体チェックデジットが不正
// - `010`: その他の理由によりバーコード画像の発行に失敗
// - `011`: 印紙フラグ（内部データ）不正
// - `012`: 端末情報の指定値の桁数不正
// - `013`: 既に同一のバーコードが登録済み
// - `900`: 予期せぬエラー.
type RetrievePaymentOK2Result string

const (
	RetrievePaymentOK2Result000 RetrievePaymentOK2Result = "000"
	RetrievePaymentOK2Result001 RetrievePaymentOK2Result = "001"
	RetrievePaymentOK2Result002 RetrievePaymentOK2Result = "002"
	RetrievePaymentOK2Result003 RetrievePaymentOK2Result = "003"
	RetrievePaymentOK2Result004 RetrievePaymentOK2Result = "004"
	RetrievePaymentOK2Result005 RetrievePaymentOK2Result = "005"
	RetrievePaymentOK2Result006 RetrievePaymentOK2Result = "006"
	RetrievePaymentOK2Result007 RetrievePaymentOK2Result = "007"
	RetrievePaymentOK2Result008 RetrievePaymentOK2Result = "008"
	RetrievePaymentOK2Result009 RetrievePaymentOK2Result = "009"
	RetrievePaymentOK2Result010 RetrievePaymentOK2Result = "010"
	RetrievePaymentOK2Result011 RetrievePaymentOK2Result = "011"
	RetrievePaymentOK2Result012 RetrievePaymentOK2Result = "012"
	RetrievePaymentOK2Result013 RetrievePaymentOK2Result = "013"
	RetrievePaymentOK2Result900 RetrievePaymentOK2Result = "900"
)

// AllValues returns all RetrievePaymentOK2Result values.
func (RetrievePaymentOK2Result) AllValues() []RetrievePaymentOK2Result {
	return []RetrievePaymentOK2Result{
		RetrievePaymentOK2Result000,
		RetrievePaymentOK2Result001,
		RetrievePaymentOK2Result002,
		RetrievePaymentOK2Result003,
		RetrievePaymentOK2Result004,
		RetrievePaymentOK2Result005,
		RetrievePaymentOK2Result006,
		RetrievePaymentOK2Result007,
		RetrievePaymentOK2Result008,
		RetrievePaymentOK2Result009,
		RetrievePaymentOK2Result010,
		RetrievePaymentOK2Result011,
		RetrievePaymentOK2Result012,
		RetrievePaymentOK2Result013,
		RetrievePaymentOK2Result900,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK2Result) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK2Result000:
		return []byte(s), nil
	case RetrievePaymentOK2Result001:
		return []byte(s), nil
	case RetrievePaymentOK2Result002:
		return []byte(s), nil
	case RetrievePaymentOK2Result003:
		return []byte(s), nil
	case RetrievePaymentOK2Result004:
		return []byte(s), nil
	case RetrievePaymentOK2Result005:
		return []byte(s), nil
	case RetrievePaymentOK2Result006:
		return []byte(s), nil
	case RetrievePaymentOK2Result007:
		return []byte(s), nil
	case RetrievePaymentOK2Result008:
		return []byte(s), nil
	case RetrievePaymentOK2Result009:
		return []byte(s), nil
	case RetrievePaymentOK2Result010:
		return []byte(s), nil
	case RetrievePaymentOK2Result011:
		return []byte(s), nil
	case RetrievePaymentOK2Result012:
		return []byte(s), nil
	case RetrievePaymentOK2Result013:
		return []byte(s), nil
	case RetrievePaymentOK2Result900:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK2Result) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK2Result(data) {
	case RetrievePaymentOK2Result000:
		*s = RetrievePaymentOK2Result000
		return nil
	case RetrievePaymentOK2Result001:
		*s = RetrievePaymentOK2Result001
		return nil
	case RetrievePaymentOK2Result002:
		*s = RetrievePaymentOK2Result002
		return nil
	case RetrievePaymentOK2Result003:
		*s = RetrievePaymentOK2Result003
		return nil
	case RetrievePaymentOK2Result004:
		*s = RetrievePaymentOK2Result004
		return nil
	case RetrievePaymentOK2Result005:
		*s = RetrievePaymentOK2Result005
		return nil
	case RetrievePaymentOK2Result006:
		*s = RetrievePaymentOK2Result006
		return nil
	case RetrievePaymentOK2Result007:
		*s = RetrievePaymentOK2Result007
		return nil
	case RetrievePaymentOK2Result008:
		*s = RetrievePaymentOK2Result008
		return nil
	case RetrievePaymentOK2Result009:
		*s = RetrievePaymentOK2Result009
		return nil
	case RetrievePaymentOK2Result010:
		*s = RetrievePaymentOK2Result010
		return nil
	case RetrievePaymentOK2Result011:
		*s = RetrievePaymentOK2Result011
		return nil
	case RetrievePaymentOK2Result012:
		*s = RetrievePaymentOK2Result012
		return nil
	case RetrievePaymentOK2Result013:
		*s = RetrievePaymentOK2Result013
		return nil
	case RetrievePaymentOK2Result900:
		*s = RetrievePaymentOK2Result900
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type RetrievePaymentOK2Status string

const (
	RetrievePaymentOK2StatusUNPROCESSED             RetrievePaymentOK2Status = "UNPROCESSED"
	RetrievePaymentOK2StatusCHECKED                 RetrievePaymentOK2Status = "CHECKED"
	RetrievePaymentOK2StatusAUTHORIZED              RetrievePaymentOK2Status = "AUTHORIZED"
	RetrievePaymentOK2StatusAWAITINGCUSTOMERPAYMENT RetrievePaymentOK2Status = "AWAITING_CUSTOMER_PAYMENT"
	RetrievePaymentOK2StatusAWAITINGPAYMENTAPPROVAL RetrievePaymentOK2Status = "AWAITING_PAYMENT_APPROVAL"
	RetrievePaymentOK2StatusCAPTURED                RetrievePaymentOK2Status = "CAPTURED"
	RetrievePaymentOK2StatusCANCELED                RetrievePaymentOK2Status = "CANCELED"
	RetrievePaymentOK2StatusEXPIRED                 RetrievePaymentOK2Status = "EXPIRED"
	RetrievePaymentOK2StatusAUTHENTICATED           RetrievePaymentOK2Status = "AUTHENTICATED"
	RetrievePaymentOK2StatusFAILED                  RetrievePaymentOK2Status = "FAILED"
)

// AllValues returns all RetrievePaymentOK2Status values.
func (RetrievePaymentOK2Status) AllValues() []RetrievePaymentOK2Status {
	return []RetrievePaymentOK2Status{
		RetrievePaymentOK2StatusUNPROCESSED,
		RetrievePaymentOK2StatusCHECKED,
		RetrievePaymentOK2StatusAUTHORIZED,
		RetrievePaymentOK2StatusAWAITINGCUSTOMERPAYMENT,
		RetrievePaymentOK2StatusAWAITINGPAYMENTAPPROVAL,
		RetrievePaymentOK2StatusCAPTURED,
		RetrievePaymentOK2StatusCANCELED,
		RetrievePaymentOK2StatusEXPIRED,
		RetrievePaymentOK2StatusAUTHENTICATED,
		RetrievePaymentOK2StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK2Status) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK2StatusUNPROCESSED:
		return []byte(s), nil
	case RetrievePaymentOK2StatusCHECKED:
		return []byte(s), nil
	case RetrievePaymentOK2StatusAUTHORIZED:
		return []byte(s), nil
	case RetrievePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case RetrievePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case RetrievePaymentOK2StatusCAPTURED:
		return []byte(s), nil
	case RetrievePaymentOK2StatusCANCELED:
		return []byte(s), nil
	case RetrievePaymentOK2StatusEXPIRED:
		return []byte(s), nil
	case RetrievePaymentOK2StatusAUTHENTICATED:
		return []byte(s), nil
	case RetrievePaymentOK2StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK2Status) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK2Status(data) {
	case RetrievePaymentOK2StatusUNPROCESSED:
		*s = RetrievePaymentOK2StatusUNPROCESSED
		return nil
	case RetrievePaymentOK2StatusCHECKED:
		*s = RetrievePaymentOK2StatusCHECKED
		return nil
	case RetrievePaymentOK2StatusAUTHORIZED:
		*s = RetrievePaymentOK2StatusAUTHORIZED
		return nil
	case RetrievePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case RetrievePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case RetrievePaymentOK2StatusCAPTURED:
		*s = RetrievePaymentOK2StatusCAPTURED
		return nil
	case RetrievePaymentOK2StatusCANCELED:
		*s = RetrievePaymentOK2StatusCANCELED
		return nil
	case RetrievePaymentOK2StatusEXPIRED:
		*s = RetrievePaymentOK2StatusEXPIRED
		return nil
	case RetrievePaymentOK2StatusAUTHENTICATED:
		*s = RetrievePaymentOK2StatusAUTHENTICATED
		return nil
	case RetrievePaymentOK2StatusFAILED:
		*s = RetrievePaymentOK2StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePaymentOK3 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType OptRetrievePaymentOK3PayType `json:"pay_type"`
	JobCode OptRetrievePaymentOK3JobCode `json:"job_code"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるPayPay上での取引承認を待っている状態。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status OptRetrievePaymentOK3Status `json:"status"`
	// PayPay支払いURL\
	// 購入者をこのURLにリダイレクトすることでPayPay上での取引を開始します。.
	CodeURL OptNilString `json:"code_url"`
	// 支払期限\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	CodeExpiryDate OptNilString `json:"code_expiry_date"`
	// リダイレクトURL\
	// 決済が完了した際にPayPayからリダイレクト先URL。.
	RedirectURL OptNilString `json:"redirect_url"`
	// リダイレクト先種別\
	// `redirect_url`の種別
	// - `1`： Webページ／Webアプリケーション
	// - `2`： ネイティブアプリ.
	RedirectType OptNilRetrievePaymentOK3RedirectType `json:"redirect_type"`
	// 仮売上期限\
	// 形式： `yyyy/MM/dd`.
	AuthMaxDate OptNilString `json:"auth_max_date"`
	// 注文内容の説明\
	// 購入者のPayPayアプリ上で表示される注文内容の説明。.
	OrderDescription OptNilString `json:"order_description"`
	// 売上確定の説明\
	// 購入者のPayPayアプリ上で表示される売上確定の説明。.
	CaptureDescription OptNilString `json:"capture_description"`
	// 金額変更の説明\
	// 購入者のPayPayアプリ上で表示される金額変更の説明。.
	UpdateDescription OptNilString `json:"update_description"`
	// キャンセルの説明\
	// 購入者のPayPayアプリ上で表示されるキャンセルの説明。.
	CancelDescription OptNilString `json:"cancel_description"`
	// 店舗ID\
	// PayPayによって発行された店舗ID。.
	StoreID OptNilString `json:"store_id"`
	// PayPayの支払いコードID.
	CodeID OptNilString `json:"code_id"`
	// PayPay 決済ID.
	PaymentID OptNilString `json:"payment_id"`
	// PayPay処理結果コード.
	PaypayResultCode OptNilString `json:"paypay_result_code"`
	// PayPay トランザクションID.
	MerchantPaymentID OptNilString `json:"merchant_payment_id"`
	// PayPay 売上確定ID.
	MerchantCaptureID OptNilString `json:"merchant_capture_id"`
	// PayPay 金額変更ID.
	MerchantUpdateID OptNilString `json:"merchant_update_id"`
	// PayPay キャンセルID.
	MerchantRevertID OptNilString `json:"merchant_revert_id"`
	// PayPay 返金ID.
	MerchantRefundID OptNilString `json:"merchant_refund_id"`
	// 支払日時\
	// 形式： `yyyy/MM/dd HH:mm:ss.SSS`.
	PaymentDate OptNilString `json:"payment_date"`
}

// GetShopID returns the value of ShopID.
func (s *RetrievePaymentOK3) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *RetrievePaymentOK3) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *RetrievePaymentOK3) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *RetrievePaymentOK3) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *RetrievePaymentOK3) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *RetrievePaymentOK3) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *RetrievePaymentOK3) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *RetrievePaymentOK3) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *RetrievePaymentOK3) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *RetrievePaymentOK3) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *RetrievePaymentOK3) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *RetrievePaymentOK3) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *RetrievePaymentOK3) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *RetrievePaymentOK3) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *RetrievePaymentOK3) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentOK3) GetPayType() OptRetrievePaymentOK3PayType {
	return s.PayType
}

// GetJobCode returns the value of JobCode.
func (s *RetrievePaymentOK3) GetJobCode() OptRetrievePaymentOK3JobCode {
	return s.JobCode
}

// GetStatus returns the value of Status.
func (s *RetrievePaymentOK3) GetStatus() OptRetrievePaymentOK3Status {
	return s.Status
}

// GetCodeURL returns the value of CodeURL.
func (s *RetrievePaymentOK3) GetCodeURL() OptNilString {
	return s.CodeURL
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *RetrievePaymentOK3) GetCodeExpiryDate() OptNilString {
	return s.CodeExpiryDate
}

// GetRedirectURL returns the value of RedirectURL.
func (s *RetrievePaymentOK3) GetRedirectURL() OptNilString {
	return s.RedirectURL
}

// GetRedirectType returns the value of RedirectType.
func (s *RetrievePaymentOK3) GetRedirectType() OptNilRetrievePaymentOK3RedirectType {
	return s.RedirectType
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *RetrievePaymentOK3) GetAuthMaxDate() OptNilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *RetrievePaymentOK3) GetOrderDescription() OptNilString {
	return s.OrderDescription
}

// GetCaptureDescription returns the value of CaptureDescription.
func (s *RetrievePaymentOK3) GetCaptureDescription() OptNilString {
	return s.CaptureDescription
}

// GetUpdateDescription returns the value of UpdateDescription.
func (s *RetrievePaymentOK3) GetUpdateDescription() OptNilString {
	return s.UpdateDescription
}

// GetCancelDescription returns the value of CancelDescription.
func (s *RetrievePaymentOK3) GetCancelDescription() OptNilString {
	return s.CancelDescription
}

// GetStoreID returns the value of StoreID.
func (s *RetrievePaymentOK3) GetStoreID() OptNilString {
	return s.StoreID
}

// GetCodeID returns the value of CodeID.
func (s *RetrievePaymentOK3) GetCodeID() OptNilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *RetrievePaymentOK3) GetPaymentID() OptNilString {
	return s.PaymentID
}

// GetPaypayResultCode returns the value of PaypayResultCode.
func (s *RetrievePaymentOK3) GetPaypayResultCode() OptNilString {
	return s.PaypayResultCode
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *RetrievePaymentOK3) GetMerchantPaymentID() OptNilString {
	return s.MerchantPaymentID
}

// GetMerchantCaptureID returns the value of MerchantCaptureID.
func (s *RetrievePaymentOK3) GetMerchantCaptureID() OptNilString {
	return s.MerchantCaptureID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *RetrievePaymentOK3) GetMerchantUpdateID() OptNilString {
	return s.MerchantUpdateID
}

// GetMerchantRevertID returns the value of MerchantRevertID.
func (s *RetrievePaymentOK3) GetMerchantRevertID() OptNilString {
	return s.MerchantRevertID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *RetrievePaymentOK3) GetMerchantRefundID() OptNilString {
	return s.MerchantRefundID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *RetrievePaymentOK3) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// SetShopID sets the value of ShopID.
func (s *RetrievePaymentOK3) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *RetrievePaymentOK3) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *RetrievePaymentOK3) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *RetrievePaymentOK3) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *RetrievePaymentOK3) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *RetrievePaymentOK3) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *RetrievePaymentOK3) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *RetrievePaymentOK3) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *RetrievePaymentOK3) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *RetrievePaymentOK3) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *RetrievePaymentOK3) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *RetrievePaymentOK3) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *RetrievePaymentOK3) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *RetrievePaymentOK3) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *RetrievePaymentOK3) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentOK3) SetPayType(val OptRetrievePaymentOK3PayType) {
	s.PayType = val
}

// SetJobCode sets the value of JobCode.
func (s *RetrievePaymentOK3) SetJobCode(val OptRetrievePaymentOK3JobCode) {
	s.JobCode = val
}

// SetStatus sets the value of Status.
func (s *RetrievePaymentOK3) SetStatus(val OptRetrievePaymentOK3Status) {
	s.Status = val
}

// SetCodeURL sets the value of CodeURL.
func (s *RetrievePaymentOK3) SetCodeURL(val OptNilString) {
	s.CodeURL = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *RetrievePaymentOK3) SetCodeExpiryDate(val OptNilString) {
	s.CodeExpiryDate = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *RetrievePaymentOK3) SetRedirectURL(val OptNilString) {
	s.RedirectURL = val
}

// SetRedirectType sets the value of RedirectType.
func (s *RetrievePaymentOK3) SetRedirectType(val OptNilRetrievePaymentOK3RedirectType) {
	s.RedirectType = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *RetrievePaymentOK3) SetAuthMaxDate(val OptNilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *RetrievePaymentOK3) SetOrderDescription(val OptNilString) {
	s.OrderDescription = val
}

// SetCaptureDescription sets the value of CaptureDescription.
func (s *RetrievePaymentOK3) SetCaptureDescription(val OptNilString) {
	s.CaptureDescription = val
}

// SetUpdateDescription sets the value of UpdateDescription.
func (s *RetrievePaymentOK3) SetUpdateDescription(val OptNilString) {
	s.UpdateDescription = val
}

// SetCancelDescription sets the value of CancelDescription.
func (s *RetrievePaymentOK3) SetCancelDescription(val OptNilString) {
	s.CancelDescription = val
}

// SetStoreID sets the value of StoreID.
func (s *RetrievePaymentOK3) SetStoreID(val OptNilString) {
	s.StoreID = val
}

// SetCodeID sets the value of CodeID.
func (s *RetrievePaymentOK3) SetCodeID(val OptNilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *RetrievePaymentOK3) SetPaymentID(val OptNilString) {
	s.PaymentID = val
}

// SetPaypayResultCode sets the value of PaypayResultCode.
func (s *RetrievePaymentOK3) SetPaypayResultCode(val OptNilString) {
	s.PaypayResultCode = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *RetrievePaymentOK3) SetMerchantPaymentID(val OptNilString) {
	s.MerchantPaymentID = val
}

// SetMerchantCaptureID sets the value of MerchantCaptureID.
func (s *RetrievePaymentOK3) SetMerchantCaptureID(val OptNilString) {
	s.MerchantCaptureID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *RetrievePaymentOK3) SetMerchantUpdateID(val OptNilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRevertID sets the value of MerchantRevertID.
func (s *RetrievePaymentOK3) SetMerchantRevertID(val OptNilString) {
	s.MerchantRevertID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *RetrievePaymentOK3) SetMerchantRefundID(val OptNilString) {
	s.MerchantRefundID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *RetrievePaymentOK3) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type RetrievePaymentOK3JobCode string

const (
	RetrievePaymentOK3JobCodeAUTH    RetrievePaymentOK3JobCode = "AUTH"
	RetrievePaymentOK3JobCodeCAPTURE RetrievePaymentOK3JobCode = "CAPTURE"
)

// AllValues returns all RetrievePaymentOK3JobCode values.
func (RetrievePaymentOK3JobCode) AllValues() []RetrievePaymentOK3JobCode {
	return []RetrievePaymentOK3JobCode{
		RetrievePaymentOK3JobCodeAUTH,
		RetrievePaymentOK3JobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK3JobCode) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK3JobCodeAUTH:
		return []byte(s), nil
	case RetrievePaymentOK3JobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK3JobCode) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK3JobCode(data) {
	case RetrievePaymentOK3JobCodeAUTH:
		*s = RetrievePaymentOK3JobCodeAUTH
		return nil
	case RetrievePaymentOK3JobCodeCAPTURE:
		*s = RetrievePaymentOK3JobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type RetrievePaymentOK3PayType string

const (
	RetrievePaymentOK3PayTypeCard           RetrievePaymentOK3PayType = "Card"
	RetrievePaymentOK3PayTypeKonbini        RetrievePaymentOK3PayType = "Konbini"
	RetrievePaymentOK3PayTypePaypay         RetrievePaymentOK3PayType = "Paypay"
	RetrievePaymentOK3PayTypeApplepay       RetrievePaymentOK3PayType = "Applepay"
	RetrievePaymentOK3PayTypeDirectdebit    RetrievePaymentOK3PayType = "Directdebit"
	RetrievePaymentOK3PayTypeVirtualaccount RetrievePaymentOK3PayType = "Virtualaccount"
)

// AllValues returns all RetrievePaymentOK3PayType values.
func (RetrievePaymentOK3PayType) AllValues() []RetrievePaymentOK3PayType {
	return []RetrievePaymentOK3PayType{
		RetrievePaymentOK3PayTypeCard,
		RetrievePaymentOK3PayTypeKonbini,
		RetrievePaymentOK3PayTypePaypay,
		RetrievePaymentOK3PayTypeApplepay,
		RetrievePaymentOK3PayTypeDirectdebit,
		RetrievePaymentOK3PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK3PayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK3PayTypeCard:
		return []byte(s), nil
	case RetrievePaymentOK3PayTypeKonbini:
		return []byte(s), nil
	case RetrievePaymentOK3PayTypePaypay:
		return []byte(s), nil
	case RetrievePaymentOK3PayTypeApplepay:
		return []byte(s), nil
	case RetrievePaymentOK3PayTypeDirectdebit:
		return []byte(s), nil
	case RetrievePaymentOK3PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK3PayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK3PayType(data) {
	case RetrievePaymentOK3PayTypeCard:
		*s = RetrievePaymentOK3PayTypeCard
		return nil
	case RetrievePaymentOK3PayTypeKonbini:
		*s = RetrievePaymentOK3PayTypeKonbini
		return nil
	case RetrievePaymentOK3PayTypePaypay:
		*s = RetrievePaymentOK3PayTypePaypay
		return nil
	case RetrievePaymentOK3PayTypeApplepay:
		*s = RetrievePaymentOK3PayTypeApplepay
		return nil
	case RetrievePaymentOK3PayTypeDirectdebit:
		*s = RetrievePaymentOK3PayTypeDirectdebit
		return nil
	case RetrievePaymentOK3PayTypeVirtualaccount:
		*s = RetrievePaymentOK3PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// リダイレクト先種別\
// `redirect_url`の種別
// - `1`： Webページ／Webアプリケーション
// - `2`： ネイティブアプリ.
type RetrievePaymentOK3RedirectType string

const (
	RetrievePaymentOK3RedirectType1 RetrievePaymentOK3RedirectType = "1"
	RetrievePaymentOK3RedirectType2 RetrievePaymentOK3RedirectType = "2"
)

// AllValues returns all RetrievePaymentOK3RedirectType values.
func (RetrievePaymentOK3RedirectType) AllValues() []RetrievePaymentOK3RedirectType {
	return []RetrievePaymentOK3RedirectType{
		RetrievePaymentOK3RedirectType1,
		RetrievePaymentOK3RedirectType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK3RedirectType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK3RedirectType1:
		return []byte(s), nil
	case RetrievePaymentOK3RedirectType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK3RedirectType) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK3RedirectType(data) {
	case RetrievePaymentOK3RedirectType1:
		*s = RetrievePaymentOK3RedirectType1
		return nil
	case RetrievePaymentOK3RedirectType2:
		*s = RetrievePaymentOK3RedirectType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type RetrievePaymentOK3Status string

const (
	RetrievePaymentOK3StatusUNPROCESSED             RetrievePaymentOK3Status = "UNPROCESSED"
	RetrievePaymentOK3StatusCHECKED                 RetrievePaymentOK3Status = "CHECKED"
	RetrievePaymentOK3StatusAUTHORIZED              RetrievePaymentOK3Status = "AUTHORIZED"
	RetrievePaymentOK3StatusAWAITINGCUSTOMERPAYMENT RetrievePaymentOK3Status = "AWAITING_CUSTOMER_PAYMENT"
	RetrievePaymentOK3StatusAWAITINGPAYMENTAPPROVAL RetrievePaymentOK3Status = "AWAITING_PAYMENT_APPROVAL"
	RetrievePaymentOK3StatusCAPTURED                RetrievePaymentOK3Status = "CAPTURED"
	RetrievePaymentOK3StatusCANCELED                RetrievePaymentOK3Status = "CANCELED"
	RetrievePaymentOK3StatusEXPIRED                 RetrievePaymentOK3Status = "EXPIRED"
	RetrievePaymentOK3StatusAUTHENTICATED           RetrievePaymentOK3Status = "AUTHENTICATED"
	RetrievePaymentOK3StatusFAILED                  RetrievePaymentOK3Status = "FAILED"
)

// AllValues returns all RetrievePaymentOK3Status values.
func (RetrievePaymentOK3Status) AllValues() []RetrievePaymentOK3Status {
	return []RetrievePaymentOK3Status{
		RetrievePaymentOK3StatusUNPROCESSED,
		RetrievePaymentOK3StatusCHECKED,
		RetrievePaymentOK3StatusAUTHORIZED,
		RetrievePaymentOK3StatusAWAITINGCUSTOMERPAYMENT,
		RetrievePaymentOK3StatusAWAITINGPAYMENTAPPROVAL,
		RetrievePaymentOK3StatusCAPTURED,
		RetrievePaymentOK3StatusCANCELED,
		RetrievePaymentOK3StatusEXPIRED,
		RetrievePaymentOK3StatusAUTHENTICATED,
		RetrievePaymentOK3StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK3Status) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK3StatusUNPROCESSED:
		return []byte(s), nil
	case RetrievePaymentOK3StatusCHECKED:
		return []byte(s), nil
	case RetrievePaymentOK3StatusAUTHORIZED:
		return []byte(s), nil
	case RetrievePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case RetrievePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case RetrievePaymentOK3StatusCAPTURED:
		return []byte(s), nil
	case RetrievePaymentOK3StatusCANCELED:
		return []byte(s), nil
	case RetrievePaymentOK3StatusEXPIRED:
		return []byte(s), nil
	case RetrievePaymentOK3StatusAUTHENTICATED:
		return []byte(s), nil
	case RetrievePaymentOK3StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK3Status) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK3Status(data) {
	case RetrievePaymentOK3StatusUNPROCESSED:
		*s = RetrievePaymentOK3StatusUNPROCESSED
		return nil
	case RetrievePaymentOK3StatusCHECKED:
		*s = RetrievePaymentOK3StatusCHECKED
		return nil
	case RetrievePaymentOK3StatusAUTHORIZED:
		*s = RetrievePaymentOK3StatusAUTHORIZED
		return nil
	case RetrievePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK3StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case RetrievePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK3StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case RetrievePaymentOK3StatusCAPTURED:
		*s = RetrievePaymentOK3StatusCAPTURED
		return nil
	case RetrievePaymentOK3StatusCANCELED:
		*s = RetrievePaymentOK3StatusCANCELED
		return nil
	case RetrievePaymentOK3StatusEXPIRED:
		*s = RetrievePaymentOK3StatusEXPIRED
		return nil
	case RetrievePaymentOK3StatusAUTHENTICATED:
		*s = RetrievePaymentOK3StatusAUTHENTICATED
		return nil
	case RetrievePaymentOK3StatusFAILED:
		*s = RetrievePaymentOK3StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePaymentOK4 struct {
	ShopID OptString `json:"shop_id"`
	// オーダーID\
	// 決済情報のIDです。.
	ID OptString `json:"id"`
	// 取引ID.
	AccessID OptString `json:"access_id"`
	// 利用金額.
	Amount OptInt `json:"amount"`
	// 税送料.
	Tax OptInt `json:"tax"`
	// 合計金額\
	// `amount`と`tax`の合計値です。.
	TotalAmount OptInt64 `json:"total_amount"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 決済 処理日時\
	// 決済の各種処理（決済実行、キャンセルなど）が行われた日時です。.
	ProcessDate OptString `json:"process_date"`
	// 顧客ID\
	// この決済の請求先となる顧客情報のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 顧客情報共有グループID\
	// プラットフォームショップにおいて顧客情報が共有されている場合、顧客が所属する共有グループのIDです。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
	Updated   *NilString   `json:"updated"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType OptRetrievePaymentOK4PayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">振替はまだ実行されていません。</span>
	// - `AWAITING_PAYMENT_APPROVAL`: 決済処理待ち<br /><span
	// class="smallText">fincodeおよび金融機関による振替処理を待っています。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">振替が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この振替はキャンセルされました。</span>
	// - `FAILED`: 請求失敗<br /><span
	// class="smallText">何らかの理由により振替に失敗しました。</span>.
	Status     OptRetrievePaymentOK4Status        `json:"status"`
	ResultCode OptNilRetrievePaymentOK4ResultCode `json:"result_code"`
	// 振替指定日\
	// 振替を行う日を指定します。下記の日付を指定できます。
	// - `yyyy/MM/05`: 5日
	// - `yyyy/MM/06`: 6日
	// - `yyyy/MM/23`: 23日
	// - `yyyy/MM/27`: 27日
	// 形式： `yyyy/MM/dd`\
	// 実際の振替は営業日に行われるため、必ずしも指定した日付に引き落としはされません。\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替日」の列で確認できます。.
	TargetDate OptNilString `json:"target_date"`
	// 引き落とし日\
	// 実際に購入者の口座から引き落としが行われた実績日です。\
	// \
	// 形式： `yyyy/MM/dd`.
	WithdrawalDate OptNilString `json:"withdrawal_date"`
	// 請求依頼受付期間 終了日\
	// 振替依頼を受け付ける最終日。この日付の23:59までに振替依頼（決済実行）を受け付けます。\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「請求依頼受付期間終了日」の列で確認できます。.
	RequestAcceptEndDate OptNilString `json:"request_accept_end_date"`
	// 請求結果反映 予定日\
	// \
	// 形式： `yyyy/MM/dd`\
	// 詳細は[Docs > 口座振替年間スケジュール](https://docs.fincode.
	// jp/payment/directdebit/schedule)の「振替結果返却日」の列で確認できます。.
	TransferReturnDate OptNilString `json:"transfer_return_date"`
	// 決済手段ID\
	// この決済に使用された決済手段のIDです。.
	PaymentMethodID OptNilString `json:"payment_method_id"`
	// 金融機関コード\
	// fincodeの口座振替に対応している金融機関のコードのリストは[Docs >
	// 利用可能な金融機関（口座振替）](https://docs.fincode.
	// jp/payment/directdebit/restriction)で参照できます。.
	BankCode OptNilString `json:"bank_code"`
	// 金融機関名.
	BankName OptNilString `json:"bank_name"`
	// 支店コード.
	BranchCode OptNilString `json:"branch_code"`
	// 支店名.
	BranchName OptNilString `json:"branch_name"`
	// ご利用明細表示内容
	// -
	// フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
	// - デフォルト： `ショップ名カナの先頭9文字`
	// ※ 利用可能な記号
	// - 半角：`.`、`(`、`)`、`–`
	// - 全角：`．`、`（`、`）`、`ー`.
	Remarks OptNilString `json:"remarks"`
	// サブスクリプションID\
	// この決済情報がブスクリプションにより生成されたものである場合、このフィールドにサブスクリプションIDが設定されます。.
	SubscriptionID OptNilString `json:"subscription_id"`
}

// GetShopID returns the value of ShopID.
func (s *RetrievePaymentOK4) GetShopID() OptString {
	return s.ShopID
}

// GetID returns the value of ID.
func (s *RetrievePaymentOK4) GetID() OptString {
	return s.ID
}

// GetAccessID returns the value of AccessID.
func (s *RetrievePaymentOK4) GetAccessID() OptString {
	return s.AccessID
}

// GetAmount returns the value of Amount.
func (s *RetrievePaymentOK4) GetAmount() OptInt {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *RetrievePaymentOK4) GetTax() OptInt {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *RetrievePaymentOK4) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetClientField1 returns the value of ClientField1.
func (s *RetrievePaymentOK4) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *RetrievePaymentOK4) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *RetrievePaymentOK4) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *RetrievePaymentOK4) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetCustomerID returns the value of CustomerID.
func (s *RetrievePaymentOK4) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *RetrievePaymentOK4) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetErrorCode returns the value of ErrorCode.
func (s *RetrievePaymentOK4) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *RetrievePaymentOK4) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *RetrievePaymentOK4) GetUpdated() *NilString {
	return s.Updated
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentOK4) GetPayType() OptRetrievePaymentOK4PayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *RetrievePaymentOK4) GetStatus() OptRetrievePaymentOK4Status {
	return s.Status
}

// GetResultCode returns the value of ResultCode.
func (s *RetrievePaymentOK4) GetResultCode() OptNilRetrievePaymentOK4ResultCode {
	return s.ResultCode
}

// GetTargetDate returns the value of TargetDate.
func (s *RetrievePaymentOK4) GetTargetDate() OptNilString {
	return s.TargetDate
}

// GetWithdrawalDate returns the value of WithdrawalDate.
func (s *RetrievePaymentOK4) GetWithdrawalDate() OptNilString {
	return s.WithdrawalDate
}

// GetRequestAcceptEndDate returns the value of RequestAcceptEndDate.
func (s *RetrievePaymentOK4) GetRequestAcceptEndDate() OptNilString {
	return s.RequestAcceptEndDate
}

// GetTransferReturnDate returns the value of TransferReturnDate.
func (s *RetrievePaymentOK4) GetTransferReturnDate() OptNilString {
	return s.TransferReturnDate
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *RetrievePaymentOK4) GetPaymentMethodID() OptNilString {
	return s.PaymentMethodID
}

// GetBankCode returns the value of BankCode.
func (s *RetrievePaymentOK4) GetBankCode() OptNilString {
	return s.BankCode
}

// GetBankName returns the value of BankName.
func (s *RetrievePaymentOK4) GetBankName() OptNilString {
	return s.BankName
}

// GetBranchCode returns the value of BranchCode.
func (s *RetrievePaymentOK4) GetBranchCode() OptNilString {
	return s.BranchCode
}

// GetBranchName returns the value of BranchName.
func (s *RetrievePaymentOK4) GetBranchName() OptNilString {
	return s.BranchName
}

// GetRemarks returns the value of Remarks.
func (s *RetrievePaymentOK4) GetRemarks() OptNilString {
	return s.Remarks
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *RetrievePaymentOK4) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// SetShopID sets the value of ShopID.
func (s *RetrievePaymentOK4) SetShopID(val OptString) {
	s.ShopID = val
}

// SetID sets the value of ID.
func (s *RetrievePaymentOK4) SetID(val OptString) {
	s.ID = val
}

// SetAccessID sets the value of AccessID.
func (s *RetrievePaymentOK4) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetAmount sets the value of Amount.
func (s *RetrievePaymentOK4) SetAmount(val OptInt) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *RetrievePaymentOK4) SetTax(val OptInt) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *RetrievePaymentOK4) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetClientField1 sets the value of ClientField1.
func (s *RetrievePaymentOK4) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *RetrievePaymentOK4) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *RetrievePaymentOK4) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *RetrievePaymentOK4) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetCustomerID sets the value of CustomerID.
func (s *RetrievePaymentOK4) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *RetrievePaymentOK4) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *RetrievePaymentOK4) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *RetrievePaymentOK4) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *RetrievePaymentOK4) SetUpdated(val *NilString) {
	s.Updated = val
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentOK4) SetPayType(val OptRetrievePaymentOK4PayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *RetrievePaymentOK4) SetStatus(val OptRetrievePaymentOK4Status) {
	s.Status = val
}

// SetResultCode sets the value of ResultCode.
func (s *RetrievePaymentOK4) SetResultCode(val OptNilRetrievePaymentOK4ResultCode) {
	s.ResultCode = val
}

// SetTargetDate sets the value of TargetDate.
func (s *RetrievePaymentOK4) SetTargetDate(val OptNilString) {
	s.TargetDate = val
}

// SetWithdrawalDate sets the value of WithdrawalDate.
func (s *RetrievePaymentOK4) SetWithdrawalDate(val OptNilString) {
	s.WithdrawalDate = val
}

// SetRequestAcceptEndDate sets the value of RequestAcceptEndDate.
func (s *RetrievePaymentOK4) SetRequestAcceptEndDate(val OptNilString) {
	s.RequestAcceptEndDate = val
}

// SetTransferReturnDate sets the value of TransferReturnDate.
func (s *RetrievePaymentOK4) SetTransferReturnDate(val OptNilString) {
	s.TransferReturnDate = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *RetrievePaymentOK4) SetPaymentMethodID(val OptNilString) {
	s.PaymentMethodID = val
}

// SetBankCode sets the value of BankCode.
func (s *RetrievePaymentOK4) SetBankCode(val OptNilString) {
	s.BankCode = val
}

// SetBankName sets the value of BankName.
func (s *RetrievePaymentOK4) SetBankName(val OptNilString) {
	s.BankName = val
}

// SetBranchCode sets the value of BranchCode.
func (s *RetrievePaymentOK4) SetBranchCode(val OptNilString) {
	s.BranchCode = val
}

// SetBranchName sets the value of BranchName.
func (s *RetrievePaymentOK4) SetBranchName(val OptNilString) {
	s.BranchName = val
}

// SetRemarks sets the value of Remarks.
func (s *RetrievePaymentOK4) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *RetrievePaymentOK4) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type RetrievePaymentOK4PayType string

const (
	RetrievePaymentOK4PayTypeCard           RetrievePaymentOK4PayType = "Card"
	RetrievePaymentOK4PayTypeKonbini        RetrievePaymentOK4PayType = "Konbini"
	RetrievePaymentOK4PayTypePaypay         RetrievePaymentOK4PayType = "Paypay"
	RetrievePaymentOK4PayTypeApplepay       RetrievePaymentOK4PayType = "Applepay"
	RetrievePaymentOK4PayTypeDirectdebit    RetrievePaymentOK4PayType = "Directdebit"
	RetrievePaymentOK4PayTypeVirtualaccount RetrievePaymentOK4PayType = "Virtualaccount"
)

// AllValues returns all RetrievePaymentOK4PayType values.
func (RetrievePaymentOK4PayType) AllValues() []RetrievePaymentOK4PayType {
	return []RetrievePaymentOK4PayType{
		RetrievePaymentOK4PayTypeCard,
		RetrievePaymentOK4PayTypeKonbini,
		RetrievePaymentOK4PayTypePaypay,
		RetrievePaymentOK4PayTypeApplepay,
		RetrievePaymentOK4PayTypeDirectdebit,
		RetrievePaymentOK4PayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK4PayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK4PayTypeCard:
		return []byte(s), nil
	case RetrievePaymentOK4PayTypeKonbini:
		return []byte(s), nil
	case RetrievePaymentOK4PayTypePaypay:
		return []byte(s), nil
	case RetrievePaymentOK4PayTypeApplepay:
		return []byte(s), nil
	case RetrievePaymentOK4PayTypeDirectdebit:
		return []byte(s), nil
	case RetrievePaymentOK4PayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK4PayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK4PayType(data) {
	case RetrievePaymentOK4PayTypeCard:
		*s = RetrievePaymentOK4PayTypeCard
		return nil
	case RetrievePaymentOK4PayTypeKonbini:
		*s = RetrievePaymentOK4PayTypeKonbini
		return nil
	case RetrievePaymentOK4PayTypePaypay:
		*s = RetrievePaymentOK4PayTypePaypay
		return nil
	case RetrievePaymentOK4PayTypeApplepay:
		*s = RetrievePaymentOK4PayTypeApplepay
		return nil
	case RetrievePaymentOK4PayTypeDirectdebit:
		*s = RetrievePaymentOK4PayTypeDirectdebit
		return nil
	case RetrievePaymentOK4PayTypeVirtualaccount:
		*s = RetrievePaymentOK4PayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 振替結果コード
// - `0`: 振替成功<br><span class="smallText">振替が成功しました。</span>
// - `1`: 残高不足（失敗）<br><span
// class="smallText">口座残高の不足により振替に失敗しました。</span>
// - `2`: 預金取引無し（失敗）<br><span
// class="smallText">指定した口座が存在しないなどの理由により振替に失敗しました。</span>
// - `3`: 購入者事由（失敗）<br><span
// class="smallText">購入者による振替取引の停止等により振替に失敗しました。</span>
// - `4`: 依頼書未着・不備（失敗）<br><span
// class="smallText">（依頼書登録）この決済に所定の期日までの口座振替依頼書の提出が確認出来なかったため振替に失敗しました。</span>
// - `8`: ショップ事由（失敗）<br><span
// class="smallText">ショップに起因する事由により振替に失敗しました。詳細はfincodeにお問い合わせください。</span>
// - `9 | E | N`: その他（失敗）<br><span
// class="smallText">その他の理由により振替に失敗しました（通常は発生しません）。詳細はfincodeにお問い合わせください。</span>
// [お問い合わせはこちらのフォームから](https://dashboard.fincode.
// jp/contact)いただけます。.
type RetrievePaymentOK4ResultCode string

const (
	RetrievePaymentOK4ResultCode0 RetrievePaymentOK4ResultCode = "0"
	RetrievePaymentOK4ResultCode1 RetrievePaymentOK4ResultCode = "1"
	RetrievePaymentOK4ResultCode2 RetrievePaymentOK4ResultCode = "2"
	RetrievePaymentOK4ResultCode3 RetrievePaymentOK4ResultCode = "3"
	RetrievePaymentOK4ResultCode4 RetrievePaymentOK4ResultCode = "4"
	RetrievePaymentOK4ResultCode8 RetrievePaymentOK4ResultCode = "8"
	RetrievePaymentOK4ResultCode9 RetrievePaymentOK4ResultCode = "9"
	RetrievePaymentOK4ResultCodeE RetrievePaymentOK4ResultCode = "E"
	RetrievePaymentOK4ResultCodeN RetrievePaymentOK4ResultCode = "N"
)

// AllValues returns all RetrievePaymentOK4ResultCode values.
func (RetrievePaymentOK4ResultCode) AllValues() []RetrievePaymentOK4ResultCode {
	return []RetrievePaymentOK4ResultCode{
		RetrievePaymentOK4ResultCode0,
		RetrievePaymentOK4ResultCode1,
		RetrievePaymentOK4ResultCode2,
		RetrievePaymentOK4ResultCode3,
		RetrievePaymentOK4ResultCode4,
		RetrievePaymentOK4ResultCode8,
		RetrievePaymentOK4ResultCode9,
		RetrievePaymentOK4ResultCodeE,
		RetrievePaymentOK4ResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK4ResultCode) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK4ResultCode0:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCode1:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCode2:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCode3:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCode4:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCode8:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCode9:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCodeE:
		return []byte(s), nil
	case RetrievePaymentOK4ResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK4ResultCode) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK4ResultCode(data) {
	case RetrievePaymentOK4ResultCode0:
		*s = RetrievePaymentOK4ResultCode0
		return nil
	case RetrievePaymentOK4ResultCode1:
		*s = RetrievePaymentOK4ResultCode1
		return nil
	case RetrievePaymentOK4ResultCode2:
		*s = RetrievePaymentOK4ResultCode2
		return nil
	case RetrievePaymentOK4ResultCode3:
		*s = RetrievePaymentOK4ResultCode3
		return nil
	case RetrievePaymentOK4ResultCode4:
		*s = RetrievePaymentOK4ResultCode4
		return nil
	case RetrievePaymentOK4ResultCode8:
		*s = RetrievePaymentOK4ResultCode8
		return nil
	case RetrievePaymentOK4ResultCode9:
		*s = RetrievePaymentOK4ResultCode9
		return nil
	case RetrievePaymentOK4ResultCodeE:
		*s = RetrievePaymentOK4ResultCodeE
		return nil
	case RetrievePaymentOK4ResultCodeN:
		*s = RetrievePaymentOK4ResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type RetrievePaymentOK4Status string

const (
	RetrievePaymentOK4StatusUNPROCESSED             RetrievePaymentOK4Status = "UNPROCESSED"
	RetrievePaymentOK4StatusCHECKED                 RetrievePaymentOK4Status = "CHECKED"
	RetrievePaymentOK4StatusAUTHORIZED              RetrievePaymentOK4Status = "AUTHORIZED"
	RetrievePaymentOK4StatusAWAITINGCUSTOMERPAYMENT RetrievePaymentOK4Status = "AWAITING_CUSTOMER_PAYMENT"
	RetrievePaymentOK4StatusAWAITINGPAYMENTAPPROVAL RetrievePaymentOK4Status = "AWAITING_PAYMENT_APPROVAL"
	RetrievePaymentOK4StatusCAPTURED                RetrievePaymentOK4Status = "CAPTURED"
	RetrievePaymentOK4StatusCANCELED                RetrievePaymentOK4Status = "CANCELED"
	RetrievePaymentOK4StatusEXPIRED                 RetrievePaymentOK4Status = "EXPIRED"
	RetrievePaymentOK4StatusAUTHENTICATED           RetrievePaymentOK4Status = "AUTHENTICATED"
	RetrievePaymentOK4StatusFAILED                  RetrievePaymentOK4Status = "FAILED"
)

// AllValues returns all RetrievePaymentOK4Status values.
func (RetrievePaymentOK4Status) AllValues() []RetrievePaymentOK4Status {
	return []RetrievePaymentOK4Status{
		RetrievePaymentOK4StatusUNPROCESSED,
		RetrievePaymentOK4StatusCHECKED,
		RetrievePaymentOK4StatusAUTHORIZED,
		RetrievePaymentOK4StatusAWAITINGCUSTOMERPAYMENT,
		RetrievePaymentOK4StatusAWAITINGPAYMENTAPPROVAL,
		RetrievePaymentOK4StatusCAPTURED,
		RetrievePaymentOK4StatusCANCELED,
		RetrievePaymentOK4StatusEXPIRED,
		RetrievePaymentOK4StatusAUTHENTICATED,
		RetrievePaymentOK4StatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentOK4Status) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentOK4StatusUNPROCESSED:
		return []byte(s), nil
	case RetrievePaymentOK4StatusCHECKED:
		return []byte(s), nil
	case RetrievePaymentOK4StatusAUTHORIZED:
		return []byte(s), nil
	case RetrievePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case RetrievePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case RetrievePaymentOK4StatusCAPTURED:
		return []byte(s), nil
	case RetrievePaymentOK4StatusCANCELED:
		return []byte(s), nil
	case RetrievePaymentOK4StatusEXPIRED:
		return []byte(s), nil
	case RetrievePaymentOK4StatusAUTHENTICATED:
		return []byte(s), nil
	case RetrievePaymentOK4StatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentOK4Status) UnmarshalText(data []byte) error {
	switch RetrievePaymentOK4Status(data) {
	case RetrievePaymentOK4StatusUNPROCESSED:
		*s = RetrievePaymentOK4StatusUNPROCESSED
		return nil
	case RetrievePaymentOK4StatusCHECKED:
		*s = RetrievePaymentOK4StatusCHECKED
		return nil
	case RetrievePaymentOK4StatusAUTHORIZED:
		*s = RetrievePaymentOK4StatusAUTHORIZED
		return nil
	case RetrievePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK4StatusAWAITINGCUSTOMERPAYMENT
		return nil
	case RetrievePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK4StatusAWAITINGPAYMENTAPPROVAL
		return nil
	case RetrievePaymentOK4StatusCAPTURED:
		*s = RetrievePaymentOK4StatusCAPTURED
		return nil
	case RetrievePaymentOK4StatusCANCELED:
		*s = RetrievePaymentOK4StatusCANCELED
		return nil
	case RetrievePaymentOK4StatusEXPIRED:
		*s = RetrievePaymentOK4StatusEXPIRED
		return nil
	case RetrievePaymentOK4StatusAUTHENTICATED:
		*s = RetrievePaymentOK4StatusAUTHENTICATED
		return nil
	case RetrievePaymentOK4StatusFAILED:
		*s = RetrievePaymentOK4StatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RetrievePaymentQuery struct {
	PayType RetrievePaymentQueryPayType `json:"pay_type"`
}

// GetPayType returns the value of PayType.
func (s *RetrievePaymentQuery) GetPayType() RetrievePaymentQueryPayType {
	return s.PayType
}

// SetPayType sets the value of PayType.
func (s *RetrievePaymentQuery) SetPayType(val RetrievePaymentQueryPayType) {
	s.PayType = val
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type RetrievePaymentQueryPayType string

const (
	RetrievePaymentQueryPayTypeCard           RetrievePaymentQueryPayType = "Card"
	RetrievePaymentQueryPayTypeKonbini        RetrievePaymentQueryPayType = "Konbini"
	RetrievePaymentQueryPayTypePaypay         RetrievePaymentQueryPayType = "Paypay"
	RetrievePaymentQueryPayTypeApplepay       RetrievePaymentQueryPayType = "Applepay"
	RetrievePaymentQueryPayTypeDirectdebit    RetrievePaymentQueryPayType = "Directdebit"
	RetrievePaymentQueryPayTypeVirtualaccount RetrievePaymentQueryPayType = "Virtualaccount"
)

// AllValues returns all RetrievePaymentQueryPayType values.
func (RetrievePaymentQueryPayType) AllValues() []RetrievePaymentQueryPayType {
	return []RetrievePaymentQueryPayType{
		RetrievePaymentQueryPayTypeCard,
		RetrievePaymentQueryPayTypeKonbini,
		RetrievePaymentQueryPayTypePaypay,
		RetrievePaymentQueryPayTypeApplepay,
		RetrievePaymentQueryPayTypeDirectdebit,
		RetrievePaymentQueryPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePaymentQueryPayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePaymentQueryPayTypeCard:
		return []byte(s), nil
	case RetrievePaymentQueryPayTypeKonbini:
		return []byte(s), nil
	case RetrievePaymentQueryPayTypePaypay:
		return []byte(s), nil
	case RetrievePaymentQueryPayTypeApplepay:
		return []byte(s), nil
	case RetrievePaymentQueryPayTypeDirectdebit:
		return []byte(s), nil
	case RetrievePaymentQueryPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePaymentQueryPayType) UnmarshalText(data []byte) error {
	switch RetrievePaymentQueryPayType(data) {
	case RetrievePaymentQueryPayTypeCard:
		*s = RetrievePaymentQueryPayTypeCard
		return nil
	case RetrievePaymentQueryPayTypeKonbini:
		*s = RetrievePaymentQueryPayTypeKonbini
		return nil
	case RetrievePaymentQueryPayTypePaypay:
		*s = RetrievePaymentQueryPayTypePaypay
		return nil
	case RetrievePaymentQueryPayTypeApplepay:
		*s = RetrievePaymentQueryPayTypeApplepay
		return nil
	case RetrievePaymentQueryPayTypeDirectdebit:
		*s = RetrievePaymentQueryPayTypeDirectdebit
		return nil
	case RetrievePaymentQueryPayTypeVirtualaccount:
		*s = RetrievePaymentQueryPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePlanListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 合計金額（始値）\
	// 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以上の合計金額を持つプラン情報を取得します。.
	TotalAmountMin OptInt64 `json:"total_amount_min"`
	// 合計金額（終値）\
	// 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以下の合計金額を持つプラン情報を取得します。.
	TotalAmountMax OptInt64 `json:"total_amount_max"`
	// 課金間隔
	// - `month`: 月
	// - `year`: 年.
	IntervalPattern OptRetrievePlanListQueryIntervalPattern `json:"interval_pattern"`
	// 更新日時（始値）\
	// 更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新された決済情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	UpdateDateFrom OptString `json:"update_date_from"`
	// 更新日時（終値）\
	// 更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新された決済情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	UpdateDateTo OptString `json:"update_date_to"`
	// プラン名\
	// `plan_name`に対する部分一致検索を行います。.
	PlanName OptNilString `json:"plan_name"`
	// 削除済みフラグ.
	DeleteFlag OptNilRetrievePlanListQueryDeleteFlag `json:"delete_flag"`
	// ソートする項目と順序を指定します。\
	// 例： `?sort=updated␣desc,created␣asc`\
	// \
	// ソート可能な項目
	// - `total_amount`: 合計金額
	// - `created`: 作成日時
	// - `updated`: 更新日時.
	Sort OptNilString `json:"sort"`
}

// GetPage returns the value of Page.
func (s *RetrievePlanListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrievePlanListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrievePlanListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetTotalAmountMin returns the value of TotalAmountMin.
func (s *RetrievePlanListQuery) GetTotalAmountMin() OptInt64 {
	return s.TotalAmountMin
}

// GetTotalAmountMax returns the value of TotalAmountMax.
func (s *RetrievePlanListQuery) GetTotalAmountMax() OptInt64 {
	return s.TotalAmountMax
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *RetrievePlanListQuery) GetIntervalPattern() OptRetrievePlanListQueryIntervalPattern {
	return s.IntervalPattern
}

// GetUpdateDateFrom returns the value of UpdateDateFrom.
func (s *RetrievePlanListQuery) GetUpdateDateFrom() OptString {
	return s.UpdateDateFrom
}

// GetUpdateDateTo returns the value of UpdateDateTo.
func (s *RetrievePlanListQuery) GetUpdateDateTo() OptString {
	return s.UpdateDateTo
}

// GetPlanName returns the value of PlanName.
func (s *RetrievePlanListQuery) GetPlanName() OptNilString {
	return s.PlanName
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *RetrievePlanListQuery) GetDeleteFlag() OptNilRetrievePlanListQueryDeleteFlag {
	return s.DeleteFlag
}

// GetSort returns the value of Sort.
func (s *RetrievePlanListQuery) GetSort() OptNilString {
	return s.Sort
}

// SetPage sets the value of Page.
func (s *RetrievePlanListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrievePlanListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrievePlanListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetTotalAmountMin sets the value of TotalAmountMin.
func (s *RetrievePlanListQuery) SetTotalAmountMin(val OptInt64) {
	s.TotalAmountMin = val
}

// SetTotalAmountMax sets the value of TotalAmountMax.
func (s *RetrievePlanListQuery) SetTotalAmountMax(val OptInt64) {
	s.TotalAmountMax = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *RetrievePlanListQuery) SetIntervalPattern(val OptRetrievePlanListQueryIntervalPattern) {
	s.IntervalPattern = val
}

// SetUpdateDateFrom sets the value of UpdateDateFrom.
func (s *RetrievePlanListQuery) SetUpdateDateFrom(val OptString) {
	s.UpdateDateFrom = val
}

// SetUpdateDateTo sets the value of UpdateDateTo.
func (s *RetrievePlanListQuery) SetUpdateDateTo(val OptString) {
	s.UpdateDateTo = val
}

// SetPlanName sets the value of PlanName.
func (s *RetrievePlanListQuery) SetPlanName(val OptNilString) {
	s.PlanName = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *RetrievePlanListQuery) SetDeleteFlag(val OptNilRetrievePlanListQueryDeleteFlag) {
	s.DeleteFlag = val
}

// SetSort sets the value of Sort.
func (s *RetrievePlanListQuery) SetSort(val OptNilString) {
	s.Sort = val
}

// 削除済みフラグ.
type RetrievePlanListQueryDeleteFlag string

const (
	RetrievePlanListQueryDeleteFlag0 RetrievePlanListQueryDeleteFlag = "0"
	RetrievePlanListQueryDeleteFlag1 RetrievePlanListQueryDeleteFlag = "1"
)

// AllValues returns all RetrievePlanListQueryDeleteFlag values.
func (RetrievePlanListQueryDeleteFlag) AllValues() []RetrievePlanListQueryDeleteFlag {
	return []RetrievePlanListQueryDeleteFlag{
		RetrievePlanListQueryDeleteFlag0,
		RetrievePlanListQueryDeleteFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePlanListQueryDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePlanListQueryDeleteFlag0:
		return []byte(s), nil
	case RetrievePlanListQueryDeleteFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePlanListQueryDeleteFlag) UnmarshalText(data []byte) error {
	switch RetrievePlanListQueryDeleteFlag(data) {
	case RetrievePlanListQueryDeleteFlag0:
		*s = RetrievePlanListQueryDeleteFlag0
		return nil
	case RetrievePlanListQueryDeleteFlag1:
		*s = RetrievePlanListQueryDeleteFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 課金間隔
// - `month`: 月
// - `year`: 年.
type RetrievePlanListQueryIntervalPattern string

const (
	RetrievePlanListQueryIntervalPatternMonth RetrievePlanListQueryIntervalPattern = "month"
	RetrievePlanListQueryIntervalPatternYear  RetrievePlanListQueryIntervalPattern = "year"
)

// AllValues returns all RetrievePlanListQueryIntervalPattern values.
func (RetrievePlanListQueryIntervalPattern) AllValues() []RetrievePlanListQueryIntervalPattern {
	return []RetrievePlanListQueryIntervalPattern{
		RetrievePlanListQueryIntervalPatternMonth,
		RetrievePlanListQueryIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrievePlanListQueryIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case RetrievePlanListQueryIntervalPatternMonth:
		return []byte(s), nil
	case RetrievePlanListQueryIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrievePlanListQueryIntervalPattern) UnmarshalText(data []byte) error {
	switch RetrievePlanListQueryIntervalPattern(data) {
	case RetrievePlanListQueryIntervalPatternMonth:
		*s = RetrievePlanListQueryIntervalPatternMonth
		return nil
	case RetrievePlanListQueryIntervalPatternYear:
		*s = RetrievePlanListQueryIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrievePlatformAccountListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 確定日（入金サイクルの締め日）を月単位で絞り込みます。\
	// 形式： `yyyy/MM`.
	Processed OptNilString `json:"processed"`
	// 入金ステータス\
	// カンマ区切りにすることで複数指定（OR検索）できます。
	// - `3001`: 金額確定前
	// - `3002`: 金額確定済み
	// - `3003`: 入金済み
	// - `3004`: 入金停止中
	// - `3005`: 入金エラー
	// - `3006`: 請求中
	// - `3007`: 請求エラー
	// - `3008`: 請求停止中
	// - `3009`: 支払済み
	// - `3010`: 本人確認書類未確認
	// - `3011`: 精算済み
	// - `3012`: 入金開始前
	// - `3013`: 契約不成立.
	Status OptDepositStatusCode `json:"status"`
	// 入金予定日の範囲指定（開始日）を指定します。\
	// この日付以降に入金が行われた売上入金情報を検索できます。\
	// 形式： `yyyy/MM/dd`.
	ScheduledFrom OptNilDate `json:"scheduled_from"`
	// 入金予定日の範囲指定（終了日）を指定します。\
	// この日付以前に入金が行われた売上入金情報を検索できます。\
	// 形式： `yyyy/MM/dd`.
	ScheduledTo OptNilDate `json:"scheduled_to"`
}

// GetPage returns the value of Page.
func (s *RetrievePlatformAccountListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrievePlatformAccountListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrievePlatformAccountListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetProcessed returns the value of Processed.
func (s *RetrievePlatformAccountListQuery) GetProcessed() OptNilString {
	return s.Processed
}

// GetStatus returns the value of Status.
func (s *RetrievePlatformAccountListQuery) GetStatus() OptDepositStatusCode {
	return s.Status
}

// GetScheduledFrom returns the value of ScheduledFrom.
func (s *RetrievePlatformAccountListQuery) GetScheduledFrom() OptNilDate {
	return s.ScheduledFrom
}

// GetScheduledTo returns the value of ScheduledTo.
func (s *RetrievePlatformAccountListQuery) GetScheduledTo() OptNilDate {
	return s.ScheduledTo
}

// SetPage sets the value of Page.
func (s *RetrievePlatformAccountListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrievePlatformAccountListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrievePlatformAccountListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetProcessed sets the value of Processed.
func (s *RetrievePlatformAccountListQuery) SetProcessed(val OptNilString) {
	s.Processed = val
}

// SetStatus sets the value of Status.
func (s *RetrievePlatformAccountListQuery) SetStatus(val OptDepositStatusCode) {
	s.Status = val
}

// SetScheduledFrom sets the value of ScheduledFrom.
func (s *RetrievePlatformAccountListQuery) SetScheduledFrom(val OptNilDate) {
	s.ScheduledFrom = val
}

// SetScheduledTo sets the value of ScheduledTo.
func (s *RetrievePlatformAccountListQuery) SetScheduledTo(val OptNilDate) {
	s.ScheduledTo = val
}

// Merged schema.
type RetrievePlatformAccountSummaryListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 入金予定日の範囲指定（開始日）を指定します。\
	// この日付以降に入金が行われた売上入金情報を検索できます。\
	// 形式： `yyyy/MM/dd`.
	ScheduledFrom OptNilDate `json:"scheduled_from"`
	// 入金予定日の範囲指定（終了日）を指定します。\
	// この日付以前に入金が行われた売上入金情報を検索できます。\
	// 形式： `yyyy/MM/dd`.
	ScheduledTo OptNilDate `json:"scheduled_to"`
}

// GetPage returns the value of Page.
func (s *RetrievePlatformAccountSummaryListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrievePlatformAccountSummaryListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrievePlatformAccountSummaryListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetScheduledFrom returns the value of ScheduledFrom.
func (s *RetrievePlatformAccountSummaryListQuery) GetScheduledFrom() OptNilDate {
	return s.ScheduledFrom
}

// GetScheduledTo returns the value of ScheduledTo.
func (s *RetrievePlatformAccountSummaryListQuery) GetScheduledTo() OptNilDate {
	return s.ScheduledTo
}

// SetPage sets the value of Page.
func (s *RetrievePlatformAccountSummaryListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrievePlatformAccountSummaryListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrievePlatformAccountSummaryListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetScheduledFrom sets the value of ScheduledFrom.
func (s *RetrievePlatformAccountSummaryListQuery) SetScheduledFrom(val OptNilDate) {
	s.ScheduledFrom = val
}

// SetScheduledTo sets the value of ScheduledTo.
func (s *RetrievePlatformAccountSummaryListQuery) SetScheduledTo(val OptNilDate) {
	s.ScheduledTo = val
}

// Merged schema.
type RetrievePlatformShopListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// ショップID.
	ID OptNilString `json:"id"`
	// ショップ名.
	ShopName OptNilString `json:"shop_name"`
	// ショップメールアドレス.
	ShopMailAddress OptNilString `json:"shop_mail_address"`
	// 作成日の範囲指定 開始日\
	// この日付以降に作成されたショップを検索できます。\
	// 形式：`yyyy/MM/dd`.
	CreatedFrom OptNilString `json:"created_from"`
	// 作成日の範囲指定 終了日\
	// この日付以前に作成されたショップを検索できます。\
	// 形式：`yyyy/MM/dd`.
	CreatedTo OptNilString `json:"created_to"`
	// ソートする項目と順序を指定します。\
	// 例： `?sort=updated␣desc,created␣asc`\
	// \
	// ソート可能な項目
	// - `id`: ショップID
	// - `shop_name`: ショップ名
	// - `created`: 作成日時
	// - `updated`: 更新日時.
	Sort OptNilString `json:"sort"`
}

// GetPage returns the value of Page.
func (s *RetrievePlatformShopListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrievePlatformShopListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrievePlatformShopListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetID returns the value of ID.
func (s *RetrievePlatformShopListQuery) GetID() OptNilString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *RetrievePlatformShopListQuery) GetShopName() OptNilString {
	return s.ShopName
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *RetrievePlatformShopListQuery) GetShopMailAddress() OptNilString {
	return s.ShopMailAddress
}

// GetCreatedFrom returns the value of CreatedFrom.
func (s *RetrievePlatformShopListQuery) GetCreatedFrom() OptNilString {
	return s.CreatedFrom
}

// GetCreatedTo returns the value of CreatedTo.
func (s *RetrievePlatformShopListQuery) GetCreatedTo() OptNilString {
	return s.CreatedTo
}

// GetSort returns the value of Sort.
func (s *RetrievePlatformShopListQuery) GetSort() OptNilString {
	return s.Sort
}

// SetPage sets the value of Page.
func (s *RetrievePlatformShopListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrievePlatformShopListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrievePlatformShopListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetID sets the value of ID.
func (s *RetrievePlatformShopListQuery) SetID(val OptNilString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *RetrievePlatformShopListQuery) SetShopName(val OptNilString) {
	s.ShopName = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *RetrievePlatformShopListQuery) SetShopMailAddress(val OptNilString) {
	s.ShopMailAddress = val
}

// SetCreatedFrom sets the value of CreatedFrom.
func (s *RetrievePlatformShopListQuery) SetCreatedFrom(val OptNilString) {
	s.CreatedFrom = val
}

// SetCreatedTo sets the value of CreatedTo.
func (s *RetrievePlatformShopListQuery) SetCreatedTo(val OptNilString) {
	s.CreatedTo = val
}

// SetSort sets the value of Sort.
func (s *RetrievePlatformShopListQuery) SetSort(val OptNilString) {
	s.Sort = val
}

// Merged schema.
type RetrieveSubscriptionListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// 決済種別\
	// 一覧で取得する対象の決済種別を指定します。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード
	// - `Directdebit`: 口座振替.
	PayType    RetrieveSubscriptionListQueryPayType `json:"pay_type"`
	ID         OptString                            `json:"id"`
	CustomerID OptString                            `json:"customer_id"`
	PlanID     OptString                            `json:"plan_id"`
	// ステータス\
	// 指定したステータスのサブスクリプション情報を取得します。カンマ区切りにすることで複数指定（OR検索）できます。
	// - `ACTIVE`: サブスクリプションが有効
	// - `RUNNING`: 課金処理中
	// - `CANCELED`: 解約済み
	// - `INCOMPLETE`: サブスクリプションの登録時点で何らかの理由により失敗.
	Status OptRetrieveSubscriptionListQueryStatus `json:"status"`
	// 合計金額（始値）\
	// 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以上の合計金額を持つサブスクリプション情報を取得します。.
	TotalAmountMin OptInt64 `json:"total_amount_min"`
	// 合計金額（終値）\
	// 利用金額と税送料の合計額（`total_amount`）を対象に範囲検索を行います。この値以下の合計金額を持つサブスクリプション情報を取得します。.
	TotalAmountMax  OptInt64                                        `json:"total_amount_max"`
	IntervalPattern OptRetrieveSubscriptionListQueryIntervalPattern `json:"interval_pattern"`
	// 課金開始日（始値）\
	// 課金開始日（`start_date`）を対象に範囲検索を行います。この日付以降に課金開始されたサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	StartDateFrom OptString `json:"start_date_from"`
	// 課金開始日（終値）\
	// 課金開始日（`start_date`）を対象に範囲検索を行います。この日付以前に課金開始されたサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	StartDateTo OptString `json:"start_date_to"`
	// 課金停止日（始値）\
	// 課金停止日（`stop_date`）を対象に範囲検索を行います。この日付以降に課金停止されたサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	StopDateFrom OptString `json:"stop_date_from"`
	// 課金停止日（終値）\
	// 課金停止日（`stop_date`）を対象に範囲検索を行います。この日付以前に課金停止されたサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	StopDateTo OptString `json:"stop_date_to"`
	// 次回課金日（始値）\
	// 次回課金日（`next_charge_date`）を対象に範囲検索を行います。この日付以降に次回課金されるサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	NextChargeDateFrom OptString `json:"next_charge_date_from"`
	// 次回課金日（終値）\
	// 次回課金日（`next_charge_date`）を対象に範囲検索を行います。この日付以前に次回課金されるサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	NextChargeDateTo OptString `json:"next_charge_date_to"`
	// 更新日時（始値）\
	// 更新日時（`updated`）を対象に範囲検索を行います。この日付以降に更新されたサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	UpdateDateFrom OptString `json:"update_date_from"`
	// 更新日時（終値）\
	// 更新日時（`updated`）を対象に範囲検索を行います。この日付以前に更新されたサブスクリプション情報を取得します。\
	// \
	// 形式：`yyyy/MM/dd`.
	UpdateDateTo OptString `json:"update_date_to"`
	// ソートする項目と順序を指定します。\
	// 例： `?sort=updated␣desc,created␣asc`\
	// \
	// ソート可能な項目
	// - `plan_id`: プランID
	// - `total_amount`: 合計金額
	// - `start_date`: 課金開始日
	// - `stop_date`: 課金停止日
	// - `next_charge_date`: 次回課金日
	// - `created`: 作成日時
	// - `updated`: 更新日時.
	Sort OptNilString `json:"sort"`
}

// GetPage returns the value of Page.
func (s *RetrieveSubscriptionListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrieveSubscriptionListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrieveSubscriptionListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetPayType returns the value of PayType.
func (s *RetrieveSubscriptionListQuery) GetPayType() RetrieveSubscriptionListQueryPayType {
	return s.PayType
}

// GetID returns the value of ID.
func (s *RetrieveSubscriptionListQuery) GetID() OptString {
	return s.ID
}

// GetCustomerID returns the value of CustomerID.
func (s *RetrieveSubscriptionListQuery) GetCustomerID() OptString {
	return s.CustomerID
}

// GetPlanID returns the value of PlanID.
func (s *RetrieveSubscriptionListQuery) GetPlanID() OptString {
	return s.PlanID
}

// GetStatus returns the value of Status.
func (s *RetrieveSubscriptionListQuery) GetStatus() OptRetrieveSubscriptionListQueryStatus {
	return s.Status
}

// GetTotalAmountMin returns the value of TotalAmountMin.
func (s *RetrieveSubscriptionListQuery) GetTotalAmountMin() OptInt64 {
	return s.TotalAmountMin
}

// GetTotalAmountMax returns the value of TotalAmountMax.
func (s *RetrieveSubscriptionListQuery) GetTotalAmountMax() OptInt64 {
	return s.TotalAmountMax
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *RetrieveSubscriptionListQuery) GetIntervalPattern() OptRetrieveSubscriptionListQueryIntervalPattern {
	return s.IntervalPattern
}

// GetStartDateFrom returns the value of StartDateFrom.
func (s *RetrieveSubscriptionListQuery) GetStartDateFrom() OptString {
	return s.StartDateFrom
}

// GetStartDateTo returns the value of StartDateTo.
func (s *RetrieveSubscriptionListQuery) GetStartDateTo() OptString {
	return s.StartDateTo
}

// GetStopDateFrom returns the value of StopDateFrom.
func (s *RetrieveSubscriptionListQuery) GetStopDateFrom() OptString {
	return s.StopDateFrom
}

// GetStopDateTo returns the value of StopDateTo.
func (s *RetrieveSubscriptionListQuery) GetStopDateTo() OptString {
	return s.StopDateTo
}

// GetNextChargeDateFrom returns the value of NextChargeDateFrom.
func (s *RetrieveSubscriptionListQuery) GetNextChargeDateFrom() OptString {
	return s.NextChargeDateFrom
}

// GetNextChargeDateTo returns the value of NextChargeDateTo.
func (s *RetrieveSubscriptionListQuery) GetNextChargeDateTo() OptString {
	return s.NextChargeDateTo
}

// GetUpdateDateFrom returns the value of UpdateDateFrom.
func (s *RetrieveSubscriptionListQuery) GetUpdateDateFrom() OptString {
	return s.UpdateDateFrom
}

// GetUpdateDateTo returns the value of UpdateDateTo.
func (s *RetrieveSubscriptionListQuery) GetUpdateDateTo() OptString {
	return s.UpdateDateTo
}

// GetSort returns the value of Sort.
func (s *RetrieveSubscriptionListQuery) GetSort() OptNilString {
	return s.Sort
}

// SetPage sets the value of Page.
func (s *RetrieveSubscriptionListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveSubscriptionListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrieveSubscriptionListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetPayType sets the value of PayType.
func (s *RetrieveSubscriptionListQuery) SetPayType(val RetrieveSubscriptionListQueryPayType) {
	s.PayType = val
}

// SetID sets the value of ID.
func (s *RetrieveSubscriptionListQuery) SetID(val OptString) {
	s.ID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *RetrieveSubscriptionListQuery) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetPlanID sets the value of PlanID.
func (s *RetrieveSubscriptionListQuery) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetStatus sets the value of Status.
func (s *RetrieveSubscriptionListQuery) SetStatus(val OptRetrieveSubscriptionListQueryStatus) {
	s.Status = val
}

// SetTotalAmountMin sets the value of TotalAmountMin.
func (s *RetrieveSubscriptionListQuery) SetTotalAmountMin(val OptInt64) {
	s.TotalAmountMin = val
}

// SetTotalAmountMax sets the value of TotalAmountMax.
func (s *RetrieveSubscriptionListQuery) SetTotalAmountMax(val OptInt64) {
	s.TotalAmountMax = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *RetrieveSubscriptionListQuery) SetIntervalPattern(val OptRetrieveSubscriptionListQueryIntervalPattern) {
	s.IntervalPattern = val
}

// SetStartDateFrom sets the value of StartDateFrom.
func (s *RetrieveSubscriptionListQuery) SetStartDateFrom(val OptString) {
	s.StartDateFrom = val
}

// SetStartDateTo sets the value of StartDateTo.
func (s *RetrieveSubscriptionListQuery) SetStartDateTo(val OptString) {
	s.StartDateTo = val
}

// SetStopDateFrom sets the value of StopDateFrom.
func (s *RetrieveSubscriptionListQuery) SetStopDateFrom(val OptString) {
	s.StopDateFrom = val
}

// SetStopDateTo sets the value of StopDateTo.
func (s *RetrieveSubscriptionListQuery) SetStopDateTo(val OptString) {
	s.StopDateTo = val
}

// SetNextChargeDateFrom sets the value of NextChargeDateFrom.
func (s *RetrieveSubscriptionListQuery) SetNextChargeDateFrom(val OptString) {
	s.NextChargeDateFrom = val
}

// SetNextChargeDateTo sets the value of NextChargeDateTo.
func (s *RetrieveSubscriptionListQuery) SetNextChargeDateTo(val OptString) {
	s.NextChargeDateTo = val
}

// SetUpdateDateFrom sets the value of UpdateDateFrom.
func (s *RetrieveSubscriptionListQuery) SetUpdateDateFrom(val OptString) {
	s.UpdateDateFrom = val
}

// SetUpdateDateTo sets the value of UpdateDateTo.
func (s *RetrieveSubscriptionListQuery) SetUpdateDateTo(val OptString) {
	s.UpdateDateTo = val
}

// SetSort sets the value of Sort.
func (s *RetrieveSubscriptionListQuery) SetSort(val OptNilString) {
	s.Sort = val
}

// 課金間隔
// - `month`：月
// - `year`：年.
type RetrieveSubscriptionListQueryIntervalPattern string

const (
	RetrieveSubscriptionListQueryIntervalPatternMonth RetrieveSubscriptionListQueryIntervalPattern = "month"
	RetrieveSubscriptionListQueryIntervalPatternYear  RetrieveSubscriptionListQueryIntervalPattern = "year"
)

// AllValues returns all RetrieveSubscriptionListQueryIntervalPattern values.
func (RetrieveSubscriptionListQueryIntervalPattern) AllValues() []RetrieveSubscriptionListQueryIntervalPattern {
	return []RetrieveSubscriptionListQueryIntervalPattern{
		RetrieveSubscriptionListQueryIntervalPatternMonth,
		RetrieveSubscriptionListQueryIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrieveSubscriptionListQueryIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case RetrieveSubscriptionListQueryIntervalPatternMonth:
		return []byte(s), nil
	case RetrieveSubscriptionListQueryIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrieveSubscriptionListQueryIntervalPattern) UnmarshalText(data []byte) error {
	switch RetrieveSubscriptionListQueryIntervalPattern(data) {
	case RetrieveSubscriptionListQueryIntervalPatternMonth:
		*s = RetrieveSubscriptionListQueryIntervalPatternMonth
		return nil
	case RetrieveSubscriptionListQueryIntervalPatternYear:
		*s = RetrieveSubscriptionListQueryIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type RetrieveSubscriptionListQueryPayType string

const (
	RetrieveSubscriptionListQueryPayTypeCard        RetrieveSubscriptionListQueryPayType = "Card"
	RetrieveSubscriptionListQueryPayTypeDirectdebit RetrieveSubscriptionListQueryPayType = "Directdebit"
)

// AllValues returns all RetrieveSubscriptionListQueryPayType values.
func (RetrieveSubscriptionListQueryPayType) AllValues() []RetrieveSubscriptionListQueryPayType {
	return []RetrieveSubscriptionListQueryPayType{
		RetrieveSubscriptionListQueryPayTypeCard,
		RetrieveSubscriptionListQueryPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrieveSubscriptionListQueryPayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrieveSubscriptionListQueryPayTypeCard:
		return []byte(s), nil
	case RetrieveSubscriptionListQueryPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrieveSubscriptionListQueryPayType) UnmarshalText(data []byte) error {
	switch RetrieveSubscriptionListQueryPayType(data) {
	case RetrieveSubscriptionListQueryPayTypeCard:
		*s = RetrieveSubscriptionListQueryPayTypeCard
		return nil
	case RetrieveSubscriptionListQueryPayTypeDirectdebit:
		*s = RetrieveSubscriptionListQueryPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type RetrieveSubscriptionListQueryStatus string

const (
	RetrieveSubscriptionListQueryStatusACTIVE     RetrieveSubscriptionListQueryStatus = "ACTIVE"
	RetrieveSubscriptionListQueryStatusRUNNING    RetrieveSubscriptionListQueryStatus = "RUNNING"
	RetrieveSubscriptionListQueryStatusCANCELED   RetrieveSubscriptionListQueryStatus = "CANCELED"
	RetrieveSubscriptionListQueryStatusINCOMPLETE RetrieveSubscriptionListQueryStatus = "INCOMPLETE"
)

// AllValues returns all RetrieveSubscriptionListQueryStatus values.
func (RetrieveSubscriptionListQueryStatus) AllValues() []RetrieveSubscriptionListQueryStatus {
	return []RetrieveSubscriptionListQueryStatus{
		RetrieveSubscriptionListQueryStatusACTIVE,
		RetrieveSubscriptionListQueryStatusRUNNING,
		RetrieveSubscriptionListQueryStatusCANCELED,
		RetrieveSubscriptionListQueryStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrieveSubscriptionListQueryStatus) MarshalText() ([]byte, error) {
	switch s {
	case RetrieveSubscriptionListQueryStatusACTIVE:
		return []byte(s), nil
	case RetrieveSubscriptionListQueryStatusRUNNING:
		return []byte(s), nil
	case RetrieveSubscriptionListQueryStatusCANCELED:
		return []byte(s), nil
	case RetrieveSubscriptionListQueryStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrieveSubscriptionListQueryStatus) UnmarshalText(data []byte) error {
	switch RetrieveSubscriptionListQueryStatus(data) {
	case RetrieveSubscriptionListQueryStatusACTIVE:
		*s = RetrieveSubscriptionListQueryStatusACTIVE
		return nil
	case RetrieveSubscriptionListQueryStatusRUNNING:
		*s = RetrieveSubscriptionListQueryStatusRUNNING
		return nil
	case RetrieveSubscriptionListQueryStatusCANCELED:
		*s = RetrieveSubscriptionListQueryStatusCANCELED
		return nil
	case RetrieveSubscriptionListQueryStatusINCOMPLETE:
		*s = RetrieveSubscriptionListQueryStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrieveSubscriptionResultListOK struct {
	// 総件数.
	TotalCount OptInt `json:"total_count"`
	// 最後のページのページ数.
	LastPage OptInt `json:"last_page"`
	// 現在のページのページ数.
	CurrentPage OptInt `json:"current_page"`
	// 1ページの最大件数.
	Limit OptInt `json:"limit"`
	// 次のページのコンテンツを取得するためのURL.
	LinkNext OptNilString `json:"link_next"`
	// 前のページのコンテンツを取得するためのURL.
	LinkPrevious OptNilString         `json:"link_previous"`
	List         []SubscriptionResult `json:"list"`
}

// GetTotalCount returns the value of TotalCount.
func (s *RetrieveSubscriptionResultListOK) GetTotalCount() OptInt {
	return s.TotalCount
}

// GetLastPage returns the value of LastPage.
func (s *RetrieveSubscriptionResultListOK) GetLastPage() OptInt {
	return s.LastPage
}

// GetCurrentPage returns the value of CurrentPage.
func (s *RetrieveSubscriptionResultListOK) GetCurrentPage() OptInt {
	return s.CurrentPage
}

// GetLimit returns the value of Limit.
func (s *RetrieveSubscriptionResultListOK) GetLimit() OptInt {
	return s.Limit
}

// GetLinkNext returns the value of LinkNext.
func (s *RetrieveSubscriptionResultListOK) GetLinkNext() OptNilString {
	return s.LinkNext
}

// GetLinkPrevious returns the value of LinkPrevious.
func (s *RetrieveSubscriptionResultListOK) GetLinkPrevious() OptNilString {
	return s.LinkPrevious
}

// GetList returns the value of List.
func (s *RetrieveSubscriptionResultListOK) GetList() []SubscriptionResult {
	return s.List
}

// SetTotalCount sets the value of TotalCount.
func (s *RetrieveSubscriptionResultListOK) SetTotalCount(val OptInt) {
	s.TotalCount = val
}

// SetLastPage sets the value of LastPage.
func (s *RetrieveSubscriptionResultListOK) SetLastPage(val OptInt) {
	s.LastPage = val
}

// SetCurrentPage sets the value of CurrentPage.
func (s *RetrieveSubscriptionResultListOK) SetCurrentPage(val OptInt) {
	s.CurrentPage = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveSubscriptionResultListOK) SetLimit(val OptInt) {
	s.Limit = val
}

// SetLinkNext sets the value of LinkNext.
func (s *RetrieveSubscriptionResultListOK) SetLinkNext(val OptNilString) {
	s.LinkNext = val
}

// SetLinkPrevious sets the value of LinkPrevious.
func (s *RetrieveSubscriptionResultListOK) SetLinkPrevious(val OptNilString) {
	s.LinkPrevious = val
}

// SetList sets the value of List.
func (s *RetrieveSubscriptionResultListOK) SetList(val []SubscriptionResult) {
	s.List = val
}

func (*RetrieveSubscriptionResultListOK) retrieveSubscriptionResultListRes() {}

// Merged schema.
type RetrieveSubscriptionResultListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool                                 `json:"count_only"`
	PayType   RetrieveSubscriptionResultListQueryPayType `json:"pay_type"`
	// ソートする項目と順序を指定します。\
	// 例： `?sort=process_date␣asc,created␣asc`\
	// \
	// ソート可能な項目
	// - `process_date`: 処理日時
	// - `created`: 作成日時.
	Sort OptNilString `json:"sort"`
}

// GetPage returns the value of Page.
func (s *RetrieveSubscriptionResultListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrieveSubscriptionResultListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrieveSubscriptionResultListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetPayType returns the value of PayType.
func (s *RetrieveSubscriptionResultListQuery) GetPayType() RetrieveSubscriptionResultListQueryPayType {
	return s.PayType
}

// GetSort returns the value of Sort.
func (s *RetrieveSubscriptionResultListQuery) GetSort() OptNilString {
	return s.Sort
}

// SetPage sets the value of Page.
func (s *RetrieveSubscriptionResultListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveSubscriptionResultListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrieveSubscriptionResultListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetPayType sets the value of PayType.
func (s *RetrieveSubscriptionResultListQuery) SetPayType(val RetrieveSubscriptionResultListQueryPayType) {
	s.PayType = val
}

// SetSort sets the value of Sort.
func (s *RetrieveSubscriptionResultListQuery) SetSort(val OptNilString) {
	s.Sort = val
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type RetrieveSubscriptionResultListQueryPayType string

const (
	RetrieveSubscriptionResultListQueryPayTypeCard        RetrieveSubscriptionResultListQueryPayType = "Card"
	RetrieveSubscriptionResultListQueryPayTypeDirectdebit RetrieveSubscriptionResultListQueryPayType = "Directdebit"
)

// AllValues returns all RetrieveSubscriptionResultListQueryPayType values.
func (RetrieveSubscriptionResultListQueryPayType) AllValues() []RetrieveSubscriptionResultListQueryPayType {
	return []RetrieveSubscriptionResultListQueryPayType{
		RetrieveSubscriptionResultListQueryPayTypeCard,
		RetrieveSubscriptionResultListQueryPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RetrieveSubscriptionResultListQueryPayType) MarshalText() ([]byte, error) {
	switch s {
	case RetrieveSubscriptionResultListQueryPayTypeCard:
		return []byte(s), nil
	case RetrieveSubscriptionResultListQueryPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RetrieveSubscriptionResultListQueryPayType) UnmarshalText(data []byte) error {
	switch RetrieveSubscriptionResultListQueryPayType(data) {
	case RetrieveSubscriptionResultListQueryPayTypeCard:
		*s = RetrieveSubscriptionResultListQueryPayTypeCard
		return nil
	case RetrieveSubscriptionResultListQueryPayTypeDirectdebit:
		*s = RetrieveSubscriptionResultListQueryPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type RetrieveTenantShopListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
	// ショップID.
	ID OptNilString `json:"id"`
	// ショップ名.
	ShopName OptNilString `json:"shop_name"`
	// ショップメールアドレス.
	ShopMailAddress OptNilString `json:"shop_mail_address"`
	// 作成日の範囲指定 開始日\
	// この日付以降に作成されたショップを検索できます。\
	// 形式：`yyyy/MM/dd`.
	CreatedFrom OptNilString `json:"created_from"`
	// 作成日の範囲指定 終了日\
	// この日付以前に作成されたショップを検索できます。\
	// 形式：`yyyy/MM/dd`.
	CreatedTo OptNilString `json:"created_to"`
	// ソートする項目と順序を指定します。\
	// 例： `?sort=updated␣desc,created␣asc`\
	// \
	// ソート可能な項目
	// - `id`: ショップID
	// - `shop_name`: ショップ名
	// - `created`: 作成日時
	// - `updated`: 更新日時.
	Sort OptNilString `json:"sort"`
}

// GetPage returns the value of Page.
func (s *RetrieveTenantShopListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrieveTenantShopListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrieveTenantShopListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// GetID returns the value of ID.
func (s *RetrieveTenantShopListQuery) GetID() OptNilString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *RetrieveTenantShopListQuery) GetShopName() OptNilString {
	return s.ShopName
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *RetrieveTenantShopListQuery) GetShopMailAddress() OptNilString {
	return s.ShopMailAddress
}

// GetCreatedFrom returns the value of CreatedFrom.
func (s *RetrieveTenantShopListQuery) GetCreatedFrom() OptNilString {
	return s.CreatedFrom
}

// GetCreatedTo returns the value of CreatedTo.
func (s *RetrieveTenantShopListQuery) GetCreatedTo() OptNilString {
	return s.CreatedTo
}

// GetSort returns the value of Sort.
func (s *RetrieveTenantShopListQuery) GetSort() OptNilString {
	return s.Sort
}

// SetPage sets the value of Page.
func (s *RetrieveTenantShopListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveTenantShopListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrieveTenantShopListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

// SetID sets the value of ID.
func (s *RetrieveTenantShopListQuery) SetID(val OptNilString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *RetrieveTenantShopListQuery) SetShopName(val OptNilString) {
	s.ShopName = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *RetrieveTenantShopListQuery) SetShopMailAddress(val OptNilString) {
	s.ShopMailAddress = val
}

// SetCreatedFrom sets the value of CreatedFrom.
func (s *RetrieveTenantShopListQuery) SetCreatedFrom(val OptNilString) {
	s.CreatedFrom = val
}

// SetCreatedTo sets the value of CreatedTo.
func (s *RetrieveTenantShopListQuery) SetCreatedTo(val OptNilString) {
	s.CreatedTo = val
}

// SetSort sets the value of Sort.
func (s *RetrieveTenantShopListQuery) SetSort(val OptNilString) {
	s.Sort = val
}

type RetrieveWebhookSettingListQuery struct {
	// ページ番号.
	Page OptNilInt `json:"page"`
	// 1回で取得するデータの最大件数.
	Limit OptNilInt `json:"limit"`
	// 総件数のみ取得するか。\
	// `true`を指定した場合、検索結果の総件数（`total_count`）のみ取得します。.
	CountOnly OptNilBool `json:"count_only"`
}

// GetPage returns the value of Page.
func (s *RetrieveWebhookSettingListQuery) GetPage() OptNilInt {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *RetrieveWebhookSettingListQuery) GetLimit() OptNilInt {
	return s.Limit
}

// GetCountOnly returns the value of CountOnly.
func (s *RetrieveWebhookSettingListQuery) GetCountOnly() OptNilBool {
	return s.CountOnly
}

// SetPage sets the value of Page.
func (s *RetrieveWebhookSettingListQuery) SetPage(val OptNilInt) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *RetrieveWebhookSettingListQuery) SetLimit(val OptNilInt) {
	s.Limit = val
}

// SetCountOnly sets the value of CountOnly.
func (s *RetrieveWebhookSettingListQuery) SetCountOnly(val OptNilBool) {
	s.CountOnly = val
}

type SecretBasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *SecretBasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *SecretBasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *SecretBasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SecretBasicAuth) SetPassword(val string) {
	s.Password = val
}

type SecretBearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *SecretBearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *SecretBearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/Shop
type Shop struct {
	// ショップID.
	ID OptString `json:"id"`
	// ショップ名.
	ShopName OptNilString `json:"shop_name"`
	// ショップ名（カナ）.
	ShopNameKana OptNilString     `json:"shop_name_kana"`
	ShopType     *NilShopShopType `json:"shop_type"`
	// プラットフォームID.
	PlatformID OptString `json:"platform_id"`
	// プラットフォーム名.
	PlatformName OptNilString `json:"platform_name"`
	// 顧客情報共有フラグ
	// - `0`: 顧客情報を共有しない<br /><span
	// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
	// - `1`: 顧客情報を共有する<br /><span
	// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
	SharedCustomerFlag OptNilShopSharedCustomerFlag `json:"shared_customer_flag"`
	// 顧客情報共有グループID\
	// fincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// 決済手段ごとに存在するプラットフォーム手数料設定のリスト.
	PlatformRateList []PlatformRateConfig `json:"platform_rate_list"`
	// 通知先メールアドレス.
	SendMailAddress OptNilString `json:"send_mail_address"`
	// ショップメールアドレス.
	ShopMailAddress OptNilString `json:"shop_mail_address"`
	// ログ保存日数.
	LogKeepDays OptNilString `json:"log_keep_days"`
	// APIバージョン.
	APIVersion OptNilString `json:"api_version"`
	// 管理画面におけるAPIキー表示フラグ。
	// - `0`: 表示しない
	// - `1`: 表示する.
	APIKeyDisplayFlag OptNilShopAPIKeyDisplayFlag `json:"api_key_display_flag"`
	Created           OptString                   `json:"created"`
	Updated           *NilString                  `json:"updated"`
}

// GetID returns the value of ID.
func (s *Shop) GetID() OptString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *Shop) GetShopName() OptNilString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *Shop) GetShopNameKana() OptNilString {
	return s.ShopNameKana
}

// GetShopType returns the value of ShopType.
func (s *Shop) GetShopType() *NilShopShopType {
	return s.ShopType
}

// GetPlatformID returns the value of PlatformID.
func (s *Shop) GetPlatformID() OptString {
	return s.PlatformID
}

// GetPlatformName returns the value of PlatformName.
func (s *Shop) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSharedCustomerFlag returns the value of SharedCustomerFlag.
func (s *Shop) GetSharedCustomerFlag() OptNilShopSharedCustomerFlag {
	return s.SharedCustomerFlag
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *Shop) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetPlatformRateList returns the value of PlatformRateList.
func (s *Shop) GetPlatformRateList() []PlatformRateConfig {
	return s.PlatformRateList
}

// GetSendMailAddress returns the value of SendMailAddress.
func (s *Shop) GetSendMailAddress() OptNilString {
	return s.SendMailAddress
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *Shop) GetShopMailAddress() OptNilString {
	return s.ShopMailAddress
}

// GetLogKeepDays returns the value of LogKeepDays.
func (s *Shop) GetLogKeepDays() OptNilString {
	return s.LogKeepDays
}

// GetAPIVersion returns the value of APIVersion.
func (s *Shop) GetAPIVersion() OptNilString {
	return s.APIVersion
}

// GetAPIKeyDisplayFlag returns the value of APIKeyDisplayFlag.
func (s *Shop) GetAPIKeyDisplayFlag() OptNilShopAPIKeyDisplayFlag {
	return s.APIKeyDisplayFlag
}

// GetCreated returns the value of Created.
func (s *Shop) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *Shop) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *Shop) SetID(val OptString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *Shop) SetShopName(val OptNilString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *Shop) SetShopNameKana(val OptNilString) {
	s.ShopNameKana = val
}

// SetShopType sets the value of ShopType.
func (s *Shop) SetShopType(val *NilShopShopType) {
	s.ShopType = val
}

// SetPlatformID sets the value of PlatformID.
func (s *Shop) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetPlatformName sets the value of PlatformName.
func (s *Shop) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSharedCustomerFlag sets the value of SharedCustomerFlag.
func (s *Shop) SetSharedCustomerFlag(val OptNilShopSharedCustomerFlag) {
	s.SharedCustomerFlag = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *Shop) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetPlatformRateList sets the value of PlatformRateList.
func (s *Shop) SetPlatformRateList(val []PlatformRateConfig) {
	s.PlatformRateList = val
}

// SetSendMailAddress sets the value of SendMailAddress.
func (s *Shop) SetSendMailAddress(val OptNilString) {
	s.SendMailAddress = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *Shop) SetShopMailAddress(val OptNilString) {
	s.ShopMailAddress = val
}

// SetLogKeepDays sets the value of LogKeepDays.
func (s *Shop) SetLogKeepDays(val OptNilString) {
	s.LogKeepDays = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *Shop) SetAPIVersion(val OptNilString) {
	s.APIVersion = val
}

// SetAPIKeyDisplayFlag sets the value of APIKeyDisplayFlag.
func (s *Shop) SetAPIKeyDisplayFlag(val OptNilShopAPIKeyDisplayFlag) {
	s.APIKeyDisplayFlag = val
}

// SetCreated sets the value of Created.
func (s *Shop) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *Shop) SetUpdated(val *NilString) {
	s.Updated = val
}

// 管理画面におけるAPIキー表示フラグ。
// - `0`: 表示しない
// - `1`: 表示する.
type ShopAPIKeyDisplayFlag string

const (
	ShopAPIKeyDisplayFlag0 ShopAPIKeyDisplayFlag = "0"
	ShopAPIKeyDisplayFlag1 ShopAPIKeyDisplayFlag = "1"
)

// AllValues returns all ShopAPIKeyDisplayFlag values.
func (ShopAPIKeyDisplayFlag) AllValues() []ShopAPIKeyDisplayFlag {
	return []ShopAPIKeyDisplayFlag{
		ShopAPIKeyDisplayFlag0,
		ShopAPIKeyDisplayFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShopAPIKeyDisplayFlag) MarshalText() ([]byte, error) {
	switch s {
	case ShopAPIKeyDisplayFlag0:
		return []byte(s), nil
	case ShopAPIKeyDisplayFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShopAPIKeyDisplayFlag) UnmarshalText(data []byte) error {
	switch ShopAPIKeyDisplayFlag(data) {
	case ShopAPIKeyDisplayFlag0:
		*s = ShopAPIKeyDisplayFlag0
		return nil
	case ShopAPIKeyDisplayFlag1:
		*s = ShopAPIKeyDisplayFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 顧客情報共有フラグ
// - `0`: 顧客情報を共有しない<br /><span
// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
// - `1`: 顧客情報を共有する<br /><span
// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
type ShopSharedCustomerFlag string

const (
	ShopSharedCustomerFlag0 ShopSharedCustomerFlag = "0"
	ShopSharedCustomerFlag1 ShopSharedCustomerFlag = "1"
)

// AllValues returns all ShopSharedCustomerFlag values.
func (ShopSharedCustomerFlag) AllValues() []ShopSharedCustomerFlag {
	return []ShopSharedCustomerFlag{
		ShopSharedCustomerFlag0,
		ShopSharedCustomerFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShopSharedCustomerFlag) MarshalText() ([]byte, error) {
	switch s {
	case ShopSharedCustomerFlag0:
		return []byte(s), nil
	case ShopSharedCustomerFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShopSharedCustomerFlag) UnmarshalText(data []byte) error {
	switch ShopSharedCustomerFlag(data) {
	case ShopSharedCustomerFlag0:
		*s = ShopSharedCustomerFlag0
		return nil
	case ShopSharedCustomerFlag1:
		*s = ShopSharedCustomerFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type ShopShopType string

const (
	ShopShopTypePlatform ShopShopType = "platform"
	ShopShopTypeTenant   ShopShopType = "tenant"
)

// AllValues returns all ShopShopType values.
func (ShopShopType) AllValues() []ShopShopType {
	return []ShopShopType{
		ShopShopTypePlatform,
		ShopShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShopShopType) MarshalText() ([]byte, error) {
	switch s {
	case ShopShopTypePlatform:
		return []byte(s), nil
	case ShopShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShopShopType) UnmarshalText(data []byte) error {
	switch ShopShopType(data) {
	case ShopShopTypePlatform:
		*s = ShopShopTypePlatform
		return nil
	case ShopShopTypeTenant:
		*s = ShopShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Subscription
type Subscription struct {
	// サブスクリプションID.
	ID       OptString              `json:"id"`
	ShopID   OptString              `json:"shop_id"`
	PayType  OptSubscriptionPayType `json:"pay_type"`
	PlanID   OptString              `json:"plan_id"`
	PlanName OptString              `json:"plan_name"`
	// 顧客ID\
	// \
	// このサブスクリプションの請求先となる顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
	// カードID\
	// \
	// このサブスクリプションの決済に使用するカードのIDです。.
	CardID OptString `json:"card_id"`
	// 決済手段ID\
	// \
	// このサブスクリプションの決済に使用する決済手段のIDです。.
	PaymentMethodID OptString `json:"payment_method_id"`
	Amount          OptInt64  `json:"amount"`
	Tax             OptInt64  `json:"tax"`
	TotalAmount     OptInt64  `json:"total_amount"`
	// 初回利用金額\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`amount`の金額で課金します。.
	InitialAmount OptInt `json:"initial_amount"`
	// 初回税送料\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`tax`の金額で課金します。.
	InitialTax OptInt `json:"initial_tax"`
	// 初回合計金額\
	// \
	// `initial_amount`と`initial_tax`の合計金額です。.
	InitialTotalAmount OptInt                `json:"initial_total_amount"`
	Status             OptSubscriptionStatus `json:"status"`
	// 課金開始日\
	// サブスクリプションの開始日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StartDate OptString `json:"start_date"`
	// 次回課金日\
	// サブスクリプションの次回課金日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	NextChargeDate OptString `json:"next_charge_date"`
	// 課金停止日\
	// サブスクリプションの停止日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StopDate OptNilString `json:"stop_date"`
	// 月末課金フラグ
	// - `0`：月末課金を行わない
	// - `1`：月末課金を行う.
	EndMonthFlag OptSubscriptionEndMonthFlag `json:"end_month_flag"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
	// このサブスクリプションにおいて発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptString `json:"error_code"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 *NilString `json:"client_field_3"`
	// ご利用明細表示内容.
	Remarks *NilString `json:"remarks"`
	Created OptString  `json:"created"`
	Updated *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *Subscription) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *Subscription) GetShopID() OptString {
	return s.ShopID
}

// GetPayType returns the value of PayType.
func (s *Subscription) GetPayType() OptSubscriptionPayType {
	return s.PayType
}

// GetPlanID returns the value of PlanID.
func (s *Subscription) GetPlanID() OptString {
	return s.PlanID
}

// GetPlanName returns the value of PlanName.
func (s *Subscription) GetPlanName() OptString {
	return s.PlanName
}

// GetCustomerID returns the value of CustomerID.
func (s *Subscription) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *Subscription) GetCardID() OptString {
	return s.CardID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *Subscription) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetAmount returns the value of Amount.
func (s *Subscription) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *Subscription) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *Subscription) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetInitialAmount returns the value of InitialAmount.
func (s *Subscription) GetInitialAmount() OptInt {
	return s.InitialAmount
}

// GetInitialTax returns the value of InitialTax.
func (s *Subscription) GetInitialTax() OptInt {
	return s.InitialTax
}

// GetInitialTotalAmount returns the value of InitialTotalAmount.
func (s *Subscription) GetInitialTotalAmount() OptInt {
	return s.InitialTotalAmount
}

// GetStatus returns the value of Status.
func (s *Subscription) GetStatus() OptSubscriptionStatus {
	return s.Status
}

// GetStartDate returns the value of StartDate.
func (s *Subscription) GetStartDate() OptString {
	return s.StartDate
}

// GetNextChargeDate returns the value of NextChargeDate.
func (s *Subscription) GetNextChargeDate() OptString {
	return s.NextChargeDate
}

// GetStopDate returns the value of StopDate.
func (s *Subscription) GetStopDate() OptNilString {
	return s.StopDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *Subscription) GetEndMonthFlag() OptSubscriptionEndMonthFlag {
	return s.EndMonthFlag
}

// GetSendURL returns the value of SendURL.
func (s *Subscription) GetSendURL() OptNilString {
	return s.SendURL
}

// GetErrorCode returns the value of ErrorCode.
func (s *Subscription) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetClientField1 returns the value of ClientField1.
func (s *Subscription) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *Subscription) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *Subscription) GetClientField3() *NilString {
	return s.ClientField3
}

// GetRemarks returns the value of Remarks.
func (s *Subscription) GetRemarks() *NilString {
	return s.Remarks
}

// GetCreated returns the value of Created.
func (s *Subscription) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *Subscription) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *Subscription) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *Subscription) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPayType sets the value of PayType.
func (s *Subscription) SetPayType(val OptSubscriptionPayType) {
	s.PayType = val
}

// SetPlanID sets the value of PlanID.
func (s *Subscription) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetPlanName sets the value of PlanName.
func (s *Subscription) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetCustomerID sets the value of CustomerID.
func (s *Subscription) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *Subscription) SetCardID(val OptString) {
	s.CardID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *Subscription) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetAmount sets the value of Amount.
func (s *Subscription) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *Subscription) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *Subscription) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetInitialAmount sets the value of InitialAmount.
func (s *Subscription) SetInitialAmount(val OptInt) {
	s.InitialAmount = val
}

// SetInitialTax sets the value of InitialTax.
func (s *Subscription) SetInitialTax(val OptInt) {
	s.InitialTax = val
}

// SetInitialTotalAmount sets the value of InitialTotalAmount.
func (s *Subscription) SetInitialTotalAmount(val OptInt) {
	s.InitialTotalAmount = val
}

// SetStatus sets the value of Status.
func (s *Subscription) SetStatus(val OptSubscriptionStatus) {
	s.Status = val
}

// SetStartDate sets the value of StartDate.
func (s *Subscription) SetStartDate(val OptString) {
	s.StartDate = val
}

// SetNextChargeDate sets the value of NextChargeDate.
func (s *Subscription) SetNextChargeDate(val OptString) {
	s.NextChargeDate = val
}

// SetStopDate sets the value of StopDate.
func (s *Subscription) SetStopDate(val OptNilString) {
	s.StopDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *Subscription) SetEndMonthFlag(val OptSubscriptionEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetSendURL sets the value of SendURL.
func (s *Subscription) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *Subscription) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetClientField1 sets the value of ClientField1.
func (s *Subscription) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *Subscription) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *Subscription) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetRemarks sets the value of Remarks.
func (s *Subscription) SetRemarks(val *NilString) {
	s.Remarks = val
}

// SetCreated sets the value of Created.
func (s *Subscription) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *Subscription) SetUpdated(val *NilString) {
	s.Updated = val
}

// Ref: #/components/schemas/Subscription.Creating.Request
type SubscriptionCreatingRequest struct {
	ID         OptString                          `json:"id"`
	PayType    SubscriptionCreatingRequestPayType `json:"pay_type"`
	PlanID     string                             `json:"plan_id"`
	CustomerID string                             `json:"customer_id"`
	// （`pay_type = Card`のみ）\
	// このサブスクリプションで請求先となるカードのIDです。\
	// 省略した場合、顧客のデフォルトカードが使用されます。.
	CardID OptString `json:"card_id"`
	// （`pay_type = Directdebit`のみ）\
	// このサブスクリプションで請求先となる決済手段のIDです。\
	// 省略した場合、顧客のデフォルト決済手段が使用されます。.
	PaymentMethodID OptString                                  `json:"payment_method_id"`
	StartDate       string                                     `json:"start_date"`
	StopDate        *NilString                                 `json:"stop_date"`
	EndMonthFlag    OptSubscriptionCreatingRequestEndMonthFlag `json:"end_month_flag"`
	InitialAmount   OptString                                  `json:"initial_amount"`
	InitialTax      OptString                                  `json:"initial_tax"`
	// （`pay_type = Directdebit`のみ）ご利用明細表示内容
	// -
	// フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
	// - デフォルト： `ショップ名カナの先頭9文字`
	// ※ 利用可能な記号
	// - 半角：`.`、`(`、`)`、`–`
	// - 全角：`．`、`（`、`）`、`ー`.
	Remarks *NilString `json:"remarks"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 *NilString `json:"client_field_3"`
	// Deprecated: schema marks this property as deprecated.
	SendURL *NilString `json:"send_url"`
}

// GetID returns the value of ID.
func (s *SubscriptionCreatingRequest) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *SubscriptionCreatingRequest) GetPayType() SubscriptionCreatingRequestPayType {
	return s.PayType
}

// GetPlanID returns the value of PlanID.
func (s *SubscriptionCreatingRequest) GetPlanID() string {
	return s.PlanID
}

// GetCustomerID returns the value of CustomerID.
func (s *SubscriptionCreatingRequest) GetCustomerID() string {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *SubscriptionCreatingRequest) GetCardID() OptString {
	return s.CardID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *SubscriptionCreatingRequest) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetStartDate returns the value of StartDate.
func (s *SubscriptionCreatingRequest) GetStartDate() string {
	return s.StartDate
}

// GetStopDate returns the value of StopDate.
func (s *SubscriptionCreatingRequest) GetStopDate() *NilString {
	return s.StopDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *SubscriptionCreatingRequest) GetEndMonthFlag() OptSubscriptionCreatingRequestEndMonthFlag {
	return s.EndMonthFlag
}

// GetInitialAmount returns the value of InitialAmount.
func (s *SubscriptionCreatingRequest) GetInitialAmount() OptString {
	return s.InitialAmount
}

// GetInitialTax returns the value of InitialTax.
func (s *SubscriptionCreatingRequest) GetInitialTax() OptString {
	return s.InitialTax
}

// GetRemarks returns the value of Remarks.
func (s *SubscriptionCreatingRequest) GetRemarks() *NilString {
	return s.Remarks
}

// GetClientField1 returns the value of ClientField1.
func (s *SubscriptionCreatingRequest) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *SubscriptionCreatingRequest) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *SubscriptionCreatingRequest) GetClientField3() *NilString {
	return s.ClientField3
}

// GetSendURL returns the value of SendURL.
func (s *SubscriptionCreatingRequest) GetSendURL() *NilString {
	return s.SendURL
}

// SetID sets the value of ID.
func (s *SubscriptionCreatingRequest) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *SubscriptionCreatingRequest) SetPayType(val SubscriptionCreatingRequestPayType) {
	s.PayType = val
}

// SetPlanID sets the value of PlanID.
func (s *SubscriptionCreatingRequest) SetPlanID(val string) {
	s.PlanID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *SubscriptionCreatingRequest) SetCustomerID(val string) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *SubscriptionCreatingRequest) SetCardID(val OptString) {
	s.CardID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *SubscriptionCreatingRequest) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetStartDate sets the value of StartDate.
func (s *SubscriptionCreatingRequest) SetStartDate(val string) {
	s.StartDate = val
}

// SetStopDate sets the value of StopDate.
func (s *SubscriptionCreatingRequest) SetStopDate(val *NilString) {
	s.StopDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *SubscriptionCreatingRequest) SetEndMonthFlag(val OptSubscriptionCreatingRequestEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetInitialAmount sets the value of InitialAmount.
func (s *SubscriptionCreatingRequest) SetInitialAmount(val OptString) {
	s.InitialAmount = val
}

// SetInitialTax sets the value of InitialTax.
func (s *SubscriptionCreatingRequest) SetInitialTax(val OptString) {
	s.InitialTax = val
}

// SetRemarks sets the value of Remarks.
func (s *SubscriptionCreatingRequest) SetRemarks(val *NilString) {
	s.Remarks = val
}

// SetClientField1 sets the value of ClientField1.
func (s *SubscriptionCreatingRequest) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *SubscriptionCreatingRequest) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *SubscriptionCreatingRequest) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetSendURL sets the value of SendURL.
func (s *SubscriptionCreatingRequest) SetSendURL(val *NilString) {
	s.SendURL = val
}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type SubscriptionCreatingRequestEndMonthFlag string

const (
	SubscriptionCreatingRequestEndMonthFlag0 SubscriptionCreatingRequestEndMonthFlag = "0"
	SubscriptionCreatingRequestEndMonthFlag1 SubscriptionCreatingRequestEndMonthFlag = "1"
)

// AllValues returns all SubscriptionCreatingRequestEndMonthFlag values.
func (SubscriptionCreatingRequestEndMonthFlag) AllValues() []SubscriptionCreatingRequestEndMonthFlag {
	return []SubscriptionCreatingRequestEndMonthFlag{
		SubscriptionCreatingRequestEndMonthFlag0,
		SubscriptionCreatingRequestEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionCreatingRequestEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionCreatingRequestEndMonthFlag0:
		return []byte(s), nil
	case SubscriptionCreatingRequestEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionCreatingRequestEndMonthFlag) UnmarshalText(data []byte) error {
	switch SubscriptionCreatingRequestEndMonthFlag(data) {
	case SubscriptionCreatingRequestEndMonthFlag0:
		*s = SubscriptionCreatingRequestEndMonthFlag0
		return nil
	case SubscriptionCreatingRequestEndMonthFlag1:
		*s = SubscriptionCreatingRequestEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionCreatingRequestPayType string

const (
	SubscriptionCreatingRequestPayTypeCard        SubscriptionCreatingRequestPayType = "Card"
	SubscriptionCreatingRequestPayTypeDirectdebit SubscriptionCreatingRequestPayType = "Directdebit"
)

// AllValues returns all SubscriptionCreatingRequestPayType values.
func (SubscriptionCreatingRequestPayType) AllValues() []SubscriptionCreatingRequestPayType {
	return []SubscriptionCreatingRequestPayType{
		SubscriptionCreatingRequestPayTypeCard,
		SubscriptionCreatingRequestPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionCreatingRequestPayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionCreatingRequestPayTypeCard:
		return []byte(s), nil
	case SubscriptionCreatingRequestPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionCreatingRequestPayType) UnmarshalText(data []byte) error {
	switch SubscriptionCreatingRequestPayType(data) {
	case SubscriptionCreatingRequestPayTypeCard:
		*s = SubscriptionCreatingRequestPayTypeCard
		return nil
	case SubscriptionCreatingRequestPayTypeDirectdebit:
		*s = SubscriptionCreatingRequestPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Subscription.Creating.Response
type SubscriptionCreatingResponse struct {
	// サブスクリプションID.
	ID       OptString                              `json:"id"`
	ShopID   OptString                              `json:"shop_id"`
	PayType  OptSubscriptionCreatingResponsePayType `json:"pay_type"`
	PlanID   OptString                              `json:"plan_id"`
	PlanName OptString                              `json:"plan_name"`
	// 顧客ID\
	// \
	// このサブスクリプションの請求先となる顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
	// カードID\
	// \
	// このサブスクリプションの決済に使用するカードのIDです。.
	CardID OptString `json:"card_id"`
	// 決済手段ID\
	// \
	// このサブスクリプションの決済に使用する決済手段のIDです。.
	PaymentMethodID OptString `json:"payment_method_id"`
	Amount          OptInt64  `json:"amount"`
	Tax             OptInt64  `json:"tax"`
	TotalAmount     OptInt64  `json:"total_amount"`
	// 初回利用金額\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`amount`の金額で課金します。.
	InitialAmount OptInt `json:"initial_amount"`
	// 初回税送料\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`tax`の金額で課金します。.
	InitialTax OptInt `json:"initial_tax"`
	// 初回合計金額\
	// \
	// `initial_amount`と`initial_tax`の合計金額です。.
	InitialTotalAmount OptInt                                `json:"initial_total_amount"`
	Status             OptSubscriptionCreatingResponseStatus `json:"status"`
	// 課金開始日\
	// サブスクリプションの開始日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StartDate OptString `json:"start_date"`
	// 次回課金日\
	// サブスクリプションの次回課金日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	NextChargeDate OptString `json:"next_charge_date"`
	// 課金停止日\
	// サブスクリプションの停止日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StopDate OptNilString `json:"stop_date"`
	// 月末課金フラグ
	// - `0`：月末課金を行わない
	// - `1`：月末課金を行う.
	EndMonthFlag OptSubscriptionCreatingResponseEndMonthFlag `json:"end_month_flag"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
	// このサブスクリプションにおいて発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptString `json:"error_code"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 *NilString `json:"client_field_3"`
	// ご利用明細表示内容.
	Remarks *NilString `json:"remarks"`
	Created OptString  `json:"created"`
	Updated *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *SubscriptionCreatingResponse) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *SubscriptionCreatingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPayType returns the value of PayType.
func (s *SubscriptionCreatingResponse) GetPayType() OptSubscriptionCreatingResponsePayType {
	return s.PayType
}

// GetPlanID returns the value of PlanID.
func (s *SubscriptionCreatingResponse) GetPlanID() OptString {
	return s.PlanID
}

// GetPlanName returns the value of PlanName.
func (s *SubscriptionCreatingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetCustomerID returns the value of CustomerID.
func (s *SubscriptionCreatingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *SubscriptionCreatingResponse) GetCardID() OptString {
	return s.CardID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *SubscriptionCreatingResponse) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetAmount returns the value of Amount.
func (s *SubscriptionCreatingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *SubscriptionCreatingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *SubscriptionCreatingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetInitialAmount returns the value of InitialAmount.
func (s *SubscriptionCreatingResponse) GetInitialAmount() OptInt {
	return s.InitialAmount
}

// GetInitialTax returns the value of InitialTax.
func (s *SubscriptionCreatingResponse) GetInitialTax() OptInt {
	return s.InitialTax
}

// GetInitialTotalAmount returns the value of InitialTotalAmount.
func (s *SubscriptionCreatingResponse) GetInitialTotalAmount() OptInt {
	return s.InitialTotalAmount
}

// GetStatus returns the value of Status.
func (s *SubscriptionCreatingResponse) GetStatus() OptSubscriptionCreatingResponseStatus {
	return s.Status
}

// GetStartDate returns the value of StartDate.
func (s *SubscriptionCreatingResponse) GetStartDate() OptString {
	return s.StartDate
}

// GetNextChargeDate returns the value of NextChargeDate.
func (s *SubscriptionCreatingResponse) GetNextChargeDate() OptString {
	return s.NextChargeDate
}

// GetStopDate returns the value of StopDate.
func (s *SubscriptionCreatingResponse) GetStopDate() OptNilString {
	return s.StopDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *SubscriptionCreatingResponse) GetEndMonthFlag() OptSubscriptionCreatingResponseEndMonthFlag {
	return s.EndMonthFlag
}

// GetSendURL returns the value of SendURL.
func (s *SubscriptionCreatingResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetErrorCode returns the value of ErrorCode.
func (s *SubscriptionCreatingResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetClientField1 returns the value of ClientField1.
func (s *SubscriptionCreatingResponse) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *SubscriptionCreatingResponse) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *SubscriptionCreatingResponse) GetClientField3() *NilString {
	return s.ClientField3
}

// GetRemarks returns the value of Remarks.
func (s *SubscriptionCreatingResponse) GetRemarks() *NilString {
	return s.Remarks
}

// GetCreated returns the value of Created.
func (s *SubscriptionCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *SubscriptionCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *SubscriptionCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *SubscriptionCreatingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPayType sets the value of PayType.
func (s *SubscriptionCreatingResponse) SetPayType(val OptSubscriptionCreatingResponsePayType) {
	s.PayType = val
}

// SetPlanID sets the value of PlanID.
func (s *SubscriptionCreatingResponse) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetPlanName sets the value of PlanName.
func (s *SubscriptionCreatingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetCustomerID sets the value of CustomerID.
func (s *SubscriptionCreatingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *SubscriptionCreatingResponse) SetCardID(val OptString) {
	s.CardID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *SubscriptionCreatingResponse) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetAmount sets the value of Amount.
func (s *SubscriptionCreatingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *SubscriptionCreatingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *SubscriptionCreatingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetInitialAmount sets the value of InitialAmount.
func (s *SubscriptionCreatingResponse) SetInitialAmount(val OptInt) {
	s.InitialAmount = val
}

// SetInitialTax sets the value of InitialTax.
func (s *SubscriptionCreatingResponse) SetInitialTax(val OptInt) {
	s.InitialTax = val
}

// SetInitialTotalAmount sets the value of InitialTotalAmount.
func (s *SubscriptionCreatingResponse) SetInitialTotalAmount(val OptInt) {
	s.InitialTotalAmount = val
}

// SetStatus sets the value of Status.
func (s *SubscriptionCreatingResponse) SetStatus(val OptSubscriptionCreatingResponseStatus) {
	s.Status = val
}

// SetStartDate sets the value of StartDate.
func (s *SubscriptionCreatingResponse) SetStartDate(val OptString) {
	s.StartDate = val
}

// SetNextChargeDate sets the value of NextChargeDate.
func (s *SubscriptionCreatingResponse) SetNextChargeDate(val OptString) {
	s.NextChargeDate = val
}

// SetStopDate sets the value of StopDate.
func (s *SubscriptionCreatingResponse) SetStopDate(val OptNilString) {
	s.StopDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *SubscriptionCreatingResponse) SetEndMonthFlag(val OptSubscriptionCreatingResponseEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetSendURL sets the value of SendURL.
func (s *SubscriptionCreatingResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *SubscriptionCreatingResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetClientField1 sets the value of ClientField1.
func (s *SubscriptionCreatingResponse) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *SubscriptionCreatingResponse) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *SubscriptionCreatingResponse) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetRemarks sets the value of Remarks.
func (s *SubscriptionCreatingResponse) SetRemarks(val *NilString) {
	s.Remarks = val
}

// SetCreated sets the value of Created.
func (s *SubscriptionCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *SubscriptionCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*SubscriptionCreatingResponse) createSubscriptionRes() {}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type SubscriptionCreatingResponseEndMonthFlag string

const (
	SubscriptionCreatingResponseEndMonthFlag0 SubscriptionCreatingResponseEndMonthFlag = "0"
	SubscriptionCreatingResponseEndMonthFlag1 SubscriptionCreatingResponseEndMonthFlag = "1"
)

// AllValues returns all SubscriptionCreatingResponseEndMonthFlag values.
func (SubscriptionCreatingResponseEndMonthFlag) AllValues() []SubscriptionCreatingResponseEndMonthFlag {
	return []SubscriptionCreatingResponseEndMonthFlag{
		SubscriptionCreatingResponseEndMonthFlag0,
		SubscriptionCreatingResponseEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionCreatingResponseEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionCreatingResponseEndMonthFlag0:
		return []byte(s), nil
	case SubscriptionCreatingResponseEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionCreatingResponseEndMonthFlag) UnmarshalText(data []byte) error {
	switch SubscriptionCreatingResponseEndMonthFlag(data) {
	case SubscriptionCreatingResponseEndMonthFlag0:
		*s = SubscriptionCreatingResponseEndMonthFlag0
		return nil
	case SubscriptionCreatingResponseEndMonthFlag1:
		*s = SubscriptionCreatingResponseEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionCreatingResponsePayType string

const (
	SubscriptionCreatingResponsePayTypeCard        SubscriptionCreatingResponsePayType = "Card"
	SubscriptionCreatingResponsePayTypeDirectdebit SubscriptionCreatingResponsePayType = "Directdebit"
)

// AllValues returns all SubscriptionCreatingResponsePayType values.
func (SubscriptionCreatingResponsePayType) AllValues() []SubscriptionCreatingResponsePayType {
	return []SubscriptionCreatingResponsePayType{
		SubscriptionCreatingResponsePayTypeCard,
		SubscriptionCreatingResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionCreatingResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionCreatingResponsePayTypeCard:
		return []byte(s), nil
	case SubscriptionCreatingResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionCreatingResponsePayType) UnmarshalText(data []byte) error {
	switch SubscriptionCreatingResponsePayType(data) {
	case SubscriptionCreatingResponsePayTypeCard:
		*s = SubscriptionCreatingResponsePayTypeCard
		return nil
	case SubscriptionCreatingResponsePayTypeDirectdebit:
		*s = SubscriptionCreatingResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type SubscriptionCreatingResponseStatus string

const (
	SubscriptionCreatingResponseStatusACTIVE     SubscriptionCreatingResponseStatus = "ACTIVE"
	SubscriptionCreatingResponseStatusRUNNING    SubscriptionCreatingResponseStatus = "RUNNING"
	SubscriptionCreatingResponseStatusCANCELED   SubscriptionCreatingResponseStatus = "CANCELED"
	SubscriptionCreatingResponseStatusINCOMPLETE SubscriptionCreatingResponseStatus = "INCOMPLETE"
)

// AllValues returns all SubscriptionCreatingResponseStatus values.
func (SubscriptionCreatingResponseStatus) AllValues() []SubscriptionCreatingResponseStatus {
	return []SubscriptionCreatingResponseStatus{
		SubscriptionCreatingResponseStatusACTIVE,
		SubscriptionCreatingResponseStatusRUNNING,
		SubscriptionCreatingResponseStatusCANCELED,
		SubscriptionCreatingResponseStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionCreatingResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionCreatingResponseStatusACTIVE:
		return []byte(s), nil
	case SubscriptionCreatingResponseStatusRUNNING:
		return []byte(s), nil
	case SubscriptionCreatingResponseStatusCANCELED:
		return []byte(s), nil
	case SubscriptionCreatingResponseStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionCreatingResponseStatus) UnmarshalText(data []byte) error {
	switch SubscriptionCreatingResponseStatus(data) {
	case SubscriptionCreatingResponseStatusACTIVE:
		*s = SubscriptionCreatingResponseStatusACTIVE
		return nil
	case SubscriptionCreatingResponseStatusRUNNING:
		*s = SubscriptionCreatingResponseStatusRUNNING
		return nil
	case SubscriptionCreatingResponseStatusCANCELED:
		*s = SubscriptionCreatingResponseStatusCANCELED
		return nil
	case SubscriptionCreatingResponseStatusINCOMPLETE:
		*s = SubscriptionCreatingResponseStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type SubscriptionEndMonthFlag string

const (
	SubscriptionEndMonthFlag0 SubscriptionEndMonthFlag = "0"
	SubscriptionEndMonthFlag1 SubscriptionEndMonthFlag = "1"
)

// AllValues returns all SubscriptionEndMonthFlag values.
func (SubscriptionEndMonthFlag) AllValues() []SubscriptionEndMonthFlag {
	return []SubscriptionEndMonthFlag{
		SubscriptionEndMonthFlag0,
		SubscriptionEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionEndMonthFlag0:
		return []byte(s), nil
	case SubscriptionEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionEndMonthFlag) UnmarshalText(data []byte) error {
	switch SubscriptionEndMonthFlag(data) {
	case SubscriptionEndMonthFlag0:
		*s = SubscriptionEndMonthFlag0
		return nil
	case SubscriptionEndMonthFlag1:
		*s = SubscriptionEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Subscription.ListRetrieving.Response
type SubscriptionListRetrievingResponse struct {
	List []Subscription `json:"list"`
}

// GetList returns the value of List.
func (s *SubscriptionListRetrievingResponse) GetList() []Subscription {
	return s.List
}

// SetList sets the value of List.
func (s *SubscriptionListRetrievingResponse) SetList(val []Subscription) {
	s.List = val
}

func (*SubscriptionListRetrievingResponse) retrieveSubscriptionListRes() {}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionPayType string

const (
	SubscriptionPayTypeCard        SubscriptionPayType = "Card"
	SubscriptionPayTypeDirectdebit SubscriptionPayType = "Directdebit"
)

// AllValues returns all SubscriptionPayType values.
func (SubscriptionPayType) AllValues() []SubscriptionPayType {
	return []SubscriptionPayType{
		SubscriptionPayTypeCard,
		SubscriptionPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionPayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionPayTypeCard:
		return []byte(s), nil
	case SubscriptionPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionPayType) UnmarshalText(data []byte) error {
	switch SubscriptionPayType(data) {
	case SubscriptionPayTypeCard:
		*s = SubscriptionPayTypeCard
		return nil
	case SubscriptionPayTypeDirectdebit:
		*s = SubscriptionPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SubscriptionResult
type SubscriptionResult struct {
	ID          OptString                    `json:"id"`
	PayType     OptSubscriptionResultPayType `json:"pay_type"`
	Status      OptSubscriptionResultStatus  `json:"status"`
	ProcessDate *NilString                   `json:"process_date"`
	PlanID      OptString                    `json:"plan_id"`
	Amount      OptInt64                     `json:"amount"`
	Tax         OptInt64                     `json:"tax"`
	TotalAmount OptInt64                     `json:"total_amount"`
	// 顧客ID\
	// サブスクリプションで請求した顧客のIDです。.
	CustomerID OptNilString `json:"customer_id"`
	// 決済手段ID\
	// サブスクリプションで使用された決済手段のIDです。.
	PaymentMethodID OptNilString `json:"payment_method_id"`
	// カードID\
	// サブスクリプションで使用されたカードのIDです。.
	CardID   OptNilString `json:"card_id"`
	CardNo   OptNilString `json:"card_no"`
	ShopID   OptString    `json:"shop_id"`
	AccessID OptString    `json:"access_id"`
	// ※ 閉塞機能.
	//
	// Deprecated: schema marks this property as deprecated.
	SendURL OptNilString `json:"send_url"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3    OptNilString                         `json:"client_field_3"`
	IntervalPattern OptSubscriptionResultIntervalPattern `json:"interval_pattern"`
	IntervalCount   OptSubscriptionResultIntervalCount   `json:"interval_count"`
	// ご利用明細表示内容\
	// デフォルト：ショップ名カナの先頭9文字.
	Remarks OptNilString `json:"remarks"`
	// この課金において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString `json:"error_code"`
	Created   OptString    `json:"created"`
}

// GetID returns the value of ID.
func (s *SubscriptionResult) GetID() OptString {
	return s.ID
}

// GetPayType returns the value of PayType.
func (s *SubscriptionResult) GetPayType() OptSubscriptionResultPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *SubscriptionResult) GetStatus() OptSubscriptionResultStatus {
	return s.Status
}

// GetProcessDate returns the value of ProcessDate.
func (s *SubscriptionResult) GetProcessDate() *NilString {
	return s.ProcessDate
}

// GetPlanID returns the value of PlanID.
func (s *SubscriptionResult) GetPlanID() OptString {
	return s.PlanID
}

// GetAmount returns the value of Amount.
func (s *SubscriptionResult) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *SubscriptionResult) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *SubscriptionResult) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetCustomerID returns the value of CustomerID.
func (s *SubscriptionResult) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *SubscriptionResult) GetPaymentMethodID() OptNilString {
	return s.PaymentMethodID
}

// GetCardID returns the value of CardID.
func (s *SubscriptionResult) GetCardID() OptNilString {
	return s.CardID
}

// GetCardNo returns the value of CardNo.
func (s *SubscriptionResult) GetCardNo() OptNilString {
	return s.CardNo
}

// GetShopID returns the value of ShopID.
func (s *SubscriptionResult) GetShopID() OptString {
	return s.ShopID
}

// GetAccessID returns the value of AccessID.
func (s *SubscriptionResult) GetAccessID() OptString {
	return s.AccessID
}

// GetSendURL returns the value of SendURL.
func (s *SubscriptionResult) GetSendURL() OptNilString {
	return s.SendURL
}

// GetClientField1 returns the value of ClientField1.
func (s *SubscriptionResult) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *SubscriptionResult) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *SubscriptionResult) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetIntervalPattern returns the value of IntervalPattern.
func (s *SubscriptionResult) GetIntervalPattern() OptSubscriptionResultIntervalPattern {
	return s.IntervalPattern
}

// GetIntervalCount returns the value of IntervalCount.
func (s *SubscriptionResult) GetIntervalCount() OptSubscriptionResultIntervalCount {
	return s.IntervalCount
}

// GetRemarks returns the value of Remarks.
func (s *SubscriptionResult) GetRemarks() OptNilString {
	return s.Remarks
}

// GetErrorCode returns the value of ErrorCode.
func (s *SubscriptionResult) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetCreated returns the value of Created.
func (s *SubscriptionResult) GetCreated() OptString {
	return s.Created
}

// SetID sets the value of ID.
func (s *SubscriptionResult) SetID(val OptString) {
	s.ID = val
}

// SetPayType sets the value of PayType.
func (s *SubscriptionResult) SetPayType(val OptSubscriptionResultPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *SubscriptionResult) SetStatus(val OptSubscriptionResultStatus) {
	s.Status = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *SubscriptionResult) SetProcessDate(val *NilString) {
	s.ProcessDate = val
}

// SetPlanID sets the value of PlanID.
func (s *SubscriptionResult) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetAmount sets the value of Amount.
func (s *SubscriptionResult) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *SubscriptionResult) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *SubscriptionResult) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetCustomerID sets the value of CustomerID.
func (s *SubscriptionResult) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *SubscriptionResult) SetPaymentMethodID(val OptNilString) {
	s.PaymentMethodID = val
}

// SetCardID sets the value of CardID.
func (s *SubscriptionResult) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetCardNo sets the value of CardNo.
func (s *SubscriptionResult) SetCardNo(val OptNilString) {
	s.CardNo = val
}

// SetShopID sets the value of ShopID.
func (s *SubscriptionResult) SetShopID(val OptString) {
	s.ShopID = val
}

// SetAccessID sets the value of AccessID.
func (s *SubscriptionResult) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetSendURL sets the value of SendURL.
func (s *SubscriptionResult) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetClientField1 sets the value of ClientField1.
func (s *SubscriptionResult) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *SubscriptionResult) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *SubscriptionResult) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetIntervalPattern sets the value of IntervalPattern.
func (s *SubscriptionResult) SetIntervalPattern(val OptSubscriptionResultIntervalPattern) {
	s.IntervalPattern = val
}

// SetIntervalCount sets the value of IntervalCount.
func (s *SubscriptionResult) SetIntervalCount(val OptSubscriptionResultIntervalCount) {
	s.IntervalCount = val
}

// SetRemarks sets the value of Remarks.
func (s *SubscriptionResult) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *SubscriptionResult) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetCreated sets the value of Created.
func (s *SubscriptionResult) SetCreated(val OptString) {
	s.Created = val
}

// 課金間隔数
// - `1`：月次／年次の課金
// - `2`：2ヶ月に1回の課金
// - `3`：3ヶ月に1回の課金
// - `6`：6ヶ月に1回の課金.
type SubscriptionResultIntervalCount float64

const (
	SubscriptionResultIntervalCount1 SubscriptionResultIntervalCount = 1
	SubscriptionResultIntervalCount2 SubscriptionResultIntervalCount = 2
	SubscriptionResultIntervalCount3 SubscriptionResultIntervalCount = 3
	SubscriptionResultIntervalCount6 SubscriptionResultIntervalCount = 6
)

// AllValues returns all SubscriptionResultIntervalCount values.
func (SubscriptionResultIntervalCount) AllValues() []SubscriptionResultIntervalCount {
	return []SubscriptionResultIntervalCount{
		SubscriptionResultIntervalCount1,
		SubscriptionResultIntervalCount2,
		SubscriptionResultIntervalCount3,
		SubscriptionResultIntervalCount6,
	}
}

// 課金間隔
// - `month`：月
// - `year`：年.
type SubscriptionResultIntervalPattern string

const (
	SubscriptionResultIntervalPatternMonth SubscriptionResultIntervalPattern = "month"
	SubscriptionResultIntervalPatternYear  SubscriptionResultIntervalPattern = "year"
)

// AllValues returns all SubscriptionResultIntervalPattern values.
func (SubscriptionResultIntervalPattern) AllValues() []SubscriptionResultIntervalPattern {
	return []SubscriptionResultIntervalPattern{
		SubscriptionResultIntervalPatternMonth,
		SubscriptionResultIntervalPatternYear,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionResultIntervalPattern) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionResultIntervalPatternMonth:
		return []byte(s), nil
	case SubscriptionResultIntervalPatternYear:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionResultIntervalPattern) UnmarshalText(data []byte) error {
	switch SubscriptionResultIntervalPattern(data) {
	case SubscriptionResultIntervalPatternMonth:
		*s = SubscriptionResultIntervalPatternMonth
		return nil
	case SubscriptionResultIntervalPatternYear:
		*s = SubscriptionResultIntervalPatternYear
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionResultPayType string

const (
	SubscriptionResultPayTypeCard        SubscriptionResultPayType = "Card"
	SubscriptionResultPayTypeDirectdebit SubscriptionResultPayType = "Directdebit"
)

// AllValues returns all SubscriptionResultPayType values.
func (SubscriptionResultPayType) AllValues() []SubscriptionResultPayType {
	return []SubscriptionResultPayType{
		SubscriptionResultPayTypeCard,
		SubscriptionResultPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionResultPayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionResultPayTypeCard:
		return []byte(s), nil
	case SubscriptionResultPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionResultPayType) UnmarshalText(data []byte) error {
	switch SubscriptionResultPayType(data) {
	case SubscriptionResultPayTypeCard:
		*s = SubscriptionResultPayTypeCard
		return nil
	case SubscriptionResultPayTypeDirectdebit:
		*s = SubscriptionResultPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス\
// サブスクリプション課金のステータス（結果）です。
// - `CHECKED`：有効性チェックに成功
// - `SUCCEEDED`：課金成功
// - `FAILED`：課金失敗.
type SubscriptionResultStatus string

const (
	SubscriptionResultStatusCHECKED   SubscriptionResultStatus = "CHECKED"
	SubscriptionResultStatusSUCCEEDED SubscriptionResultStatus = "SUCCEEDED"
	SubscriptionResultStatusFAILED    SubscriptionResultStatus = "FAILED"
)

// AllValues returns all SubscriptionResultStatus values.
func (SubscriptionResultStatus) AllValues() []SubscriptionResultStatus {
	return []SubscriptionResultStatus{
		SubscriptionResultStatusCHECKED,
		SubscriptionResultStatusSUCCEEDED,
		SubscriptionResultStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionResultStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionResultStatusCHECKED:
		return []byte(s), nil
	case SubscriptionResultStatusSUCCEEDED:
		return []byte(s), nil
	case SubscriptionResultStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionResultStatus) UnmarshalText(data []byte) error {
	switch SubscriptionResultStatus(data) {
	case SubscriptionResultStatusCHECKED:
		*s = SubscriptionResultStatusCHECKED
		return nil
	case SubscriptionResultStatusSUCCEEDED:
		*s = SubscriptionResultStatusSUCCEEDED
		return nil
	case SubscriptionResultStatusFAILED:
		*s = SubscriptionResultStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Subscription.Retrieving.Response
type SubscriptionRetrievingResponse struct {
	// サブスクリプションID.
	ID       OptString                                `json:"id"`
	ShopID   OptString                                `json:"shop_id"`
	PayType  OptSubscriptionRetrievingResponsePayType `json:"pay_type"`
	PlanID   OptString                                `json:"plan_id"`
	PlanName OptString                                `json:"plan_name"`
	// 顧客ID\
	// \
	// このサブスクリプションの請求先となる顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
	// カードID\
	// \
	// このサブスクリプションの決済に使用するカードのIDです。.
	CardID OptString `json:"card_id"`
	// 決済手段ID\
	// \
	// このサブスクリプションの決済に使用する決済手段のIDです。.
	PaymentMethodID OptString `json:"payment_method_id"`
	Amount          OptInt64  `json:"amount"`
	Tax             OptInt64  `json:"tax"`
	TotalAmount     OptInt64  `json:"total_amount"`
	// 初回利用金額\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`amount`の金額で課金します。.
	InitialAmount OptInt `json:"initial_amount"`
	// 初回税送料\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`tax`の金額で課金します。.
	InitialTax OptInt `json:"initial_tax"`
	// 初回合計金額\
	// \
	// `initial_amount`と`initial_tax`の合計金額です。.
	InitialTotalAmount OptInt                                  `json:"initial_total_amount"`
	Status             OptSubscriptionRetrievingResponseStatus `json:"status"`
	// 課金開始日\
	// サブスクリプションの開始日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StartDate OptString `json:"start_date"`
	// 次回課金日\
	// サブスクリプションの次回課金日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	NextChargeDate OptString `json:"next_charge_date"`
	// 課金停止日\
	// サブスクリプションの停止日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StopDate OptNilString `json:"stop_date"`
	// 月末課金フラグ
	// - `0`：月末課金を行わない
	// - `1`：月末課金を行う.
	EndMonthFlag OptSubscriptionRetrievingResponseEndMonthFlag `json:"end_month_flag"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
	// このサブスクリプションにおいて発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptString `json:"error_code"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 *NilString `json:"client_field_3"`
	// ご利用明細表示内容.
	Remarks *NilString `json:"remarks"`
	Created OptString  `json:"created"`
	Updated *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *SubscriptionRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *SubscriptionRetrievingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPayType returns the value of PayType.
func (s *SubscriptionRetrievingResponse) GetPayType() OptSubscriptionRetrievingResponsePayType {
	return s.PayType
}

// GetPlanID returns the value of PlanID.
func (s *SubscriptionRetrievingResponse) GetPlanID() OptString {
	return s.PlanID
}

// GetPlanName returns the value of PlanName.
func (s *SubscriptionRetrievingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetCustomerID returns the value of CustomerID.
func (s *SubscriptionRetrievingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *SubscriptionRetrievingResponse) GetCardID() OptString {
	return s.CardID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *SubscriptionRetrievingResponse) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetAmount returns the value of Amount.
func (s *SubscriptionRetrievingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *SubscriptionRetrievingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *SubscriptionRetrievingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetInitialAmount returns the value of InitialAmount.
func (s *SubscriptionRetrievingResponse) GetInitialAmount() OptInt {
	return s.InitialAmount
}

// GetInitialTax returns the value of InitialTax.
func (s *SubscriptionRetrievingResponse) GetInitialTax() OptInt {
	return s.InitialTax
}

// GetInitialTotalAmount returns the value of InitialTotalAmount.
func (s *SubscriptionRetrievingResponse) GetInitialTotalAmount() OptInt {
	return s.InitialTotalAmount
}

// GetStatus returns the value of Status.
func (s *SubscriptionRetrievingResponse) GetStatus() OptSubscriptionRetrievingResponseStatus {
	return s.Status
}

// GetStartDate returns the value of StartDate.
func (s *SubscriptionRetrievingResponse) GetStartDate() OptString {
	return s.StartDate
}

// GetNextChargeDate returns the value of NextChargeDate.
func (s *SubscriptionRetrievingResponse) GetNextChargeDate() OptString {
	return s.NextChargeDate
}

// GetStopDate returns the value of StopDate.
func (s *SubscriptionRetrievingResponse) GetStopDate() OptNilString {
	return s.StopDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *SubscriptionRetrievingResponse) GetEndMonthFlag() OptSubscriptionRetrievingResponseEndMonthFlag {
	return s.EndMonthFlag
}

// GetSendURL returns the value of SendURL.
func (s *SubscriptionRetrievingResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetErrorCode returns the value of ErrorCode.
func (s *SubscriptionRetrievingResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetClientField1 returns the value of ClientField1.
func (s *SubscriptionRetrievingResponse) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *SubscriptionRetrievingResponse) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *SubscriptionRetrievingResponse) GetClientField3() *NilString {
	return s.ClientField3
}

// GetRemarks returns the value of Remarks.
func (s *SubscriptionRetrievingResponse) GetRemarks() *NilString {
	return s.Remarks
}

// GetCreated returns the value of Created.
func (s *SubscriptionRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *SubscriptionRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *SubscriptionRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *SubscriptionRetrievingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPayType sets the value of PayType.
func (s *SubscriptionRetrievingResponse) SetPayType(val OptSubscriptionRetrievingResponsePayType) {
	s.PayType = val
}

// SetPlanID sets the value of PlanID.
func (s *SubscriptionRetrievingResponse) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetPlanName sets the value of PlanName.
func (s *SubscriptionRetrievingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetCustomerID sets the value of CustomerID.
func (s *SubscriptionRetrievingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *SubscriptionRetrievingResponse) SetCardID(val OptString) {
	s.CardID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *SubscriptionRetrievingResponse) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetAmount sets the value of Amount.
func (s *SubscriptionRetrievingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *SubscriptionRetrievingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *SubscriptionRetrievingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetInitialAmount sets the value of InitialAmount.
func (s *SubscriptionRetrievingResponse) SetInitialAmount(val OptInt) {
	s.InitialAmount = val
}

// SetInitialTax sets the value of InitialTax.
func (s *SubscriptionRetrievingResponse) SetInitialTax(val OptInt) {
	s.InitialTax = val
}

// SetInitialTotalAmount sets the value of InitialTotalAmount.
func (s *SubscriptionRetrievingResponse) SetInitialTotalAmount(val OptInt) {
	s.InitialTotalAmount = val
}

// SetStatus sets the value of Status.
func (s *SubscriptionRetrievingResponse) SetStatus(val OptSubscriptionRetrievingResponseStatus) {
	s.Status = val
}

// SetStartDate sets the value of StartDate.
func (s *SubscriptionRetrievingResponse) SetStartDate(val OptString) {
	s.StartDate = val
}

// SetNextChargeDate sets the value of NextChargeDate.
func (s *SubscriptionRetrievingResponse) SetNextChargeDate(val OptString) {
	s.NextChargeDate = val
}

// SetStopDate sets the value of StopDate.
func (s *SubscriptionRetrievingResponse) SetStopDate(val OptNilString) {
	s.StopDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *SubscriptionRetrievingResponse) SetEndMonthFlag(val OptSubscriptionRetrievingResponseEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetSendURL sets the value of SendURL.
func (s *SubscriptionRetrievingResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *SubscriptionRetrievingResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetClientField1 sets the value of ClientField1.
func (s *SubscriptionRetrievingResponse) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *SubscriptionRetrievingResponse) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *SubscriptionRetrievingResponse) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetRemarks sets the value of Remarks.
func (s *SubscriptionRetrievingResponse) SetRemarks(val *NilString) {
	s.Remarks = val
}

// SetCreated sets the value of Created.
func (s *SubscriptionRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *SubscriptionRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*SubscriptionRetrievingResponse) retrieveSubscriptionRes() {}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type SubscriptionRetrievingResponseEndMonthFlag string

const (
	SubscriptionRetrievingResponseEndMonthFlag0 SubscriptionRetrievingResponseEndMonthFlag = "0"
	SubscriptionRetrievingResponseEndMonthFlag1 SubscriptionRetrievingResponseEndMonthFlag = "1"
)

// AllValues returns all SubscriptionRetrievingResponseEndMonthFlag values.
func (SubscriptionRetrievingResponseEndMonthFlag) AllValues() []SubscriptionRetrievingResponseEndMonthFlag {
	return []SubscriptionRetrievingResponseEndMonthFlag{
		SubscriptionRetrievingResponseEndMonthFlag0,
		SubscriptionRetrievingResponseEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionRetrievingResponseEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionRetrievingResponseEndMonthFlag0:
		return []byte(s), nil
	case SubscriptionRetrievingResponseEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionRetrievingResponseEndMonthFlag) UnmarshalText(data []byte) error {
	switch SubscriptionRetrievingResponseEndMonthFlag(data) {
	case SubscriptionRetrievingResponseEndMonthFlag0:
		*s = SubscriptionRetrievingResponseEndMonthFlag0
		return nil
	case SubscriptionRetrievingResponseEndMonthFlag1:
		*s = SubscriptionRetrievingResponseEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionRetrievingResponsePayType string

const (
	SubscriptionRetrievingResponsePayTypeCard        SubscriptionRetrievingResponsePayType = "Card"
	SubscriptionRetrievingResponsePayTypeDirectdebit SubscriptionRetrievingResponsePayType = "Directdebit"
)

// AllValues returns all SubscriptionRetrievingResponsePayType values.
func (SubscriptionRetrievingResponsePayType) AllValues() []SubscriptionRetrievingResponsePayType {
	return []SubscriptionRetrievingResponsePayType{
		SubscriptionRetrievingResponsePayTypeCard,
		SubscriptionRetrievingResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionRetrievingResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionRetrievingResponsePayTypeCard:
		return []byte(s), nil
	case SubscriptionRetrievingResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionRetrievingResponsePayType) UnmarshalText(data []byte) error {
	switch SubscriptionRetrievingResponsePayType(data) {
	case SubscriptionRetrievingResponsePayTypeCard:
		*s = SubscriptionRetrievingResponsePayTypeCard
		return nil
	case SubscriptionRetrievingResponsePayTypeDirectdebit:
		*s = SubscriptionRetrievingResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type SubscriptionRetrievingResponseStatus string

const (
	SubscriptionRetrievingResponseStatusACTIVE     SubscriptionRetrievingResponseStatus = "ACTIVE"
	SubscriptionRetrievingResponseStatusRUNNING    SubscriptionRetrievingResponseStatus = "RUNNING"
	SubscriptionRetrievingResponseStatusCANCELED   SubscriptionRetrievingResponseStatus = "CANCELED"
	SubscriptionRetrievingResponseStatusINCOMPLETE SubscriptionRetrievingResponseStatus = "INCOMPLETE"
)

// AllValues returns all SubscriptionRetrievingResponseStatus values.
func (SubscriptionRetrievingResponseStatus) AllValues() []SubscriptionRetrievingResponseStatus {
	return []SubscriptionRetrievingResponseStatus{
		SubscriptionRetrievingResponseStatusACTIVE,
		SubscriptionRetrievingResponseStatusRUNNING,
		SubscriptionRetrievingResponseStatusCANCELED,
		SubscriptionRetrievingResponseStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionRetrievingResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionRetrievingResponseStatusACTIVE:
		return []byte(s), nil
	case SubscriptionRetrievingResponseStatusRUNNING:
		return []byte(s), nil
	case SubscriptionRetrievingResponseStatusCANCELED:
		return []byte(s), nil
	case SubscriptionRetrievingResponseStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionRetrievingResponseStatus) UnmarshalText(data []byte) error {
	switch SubscriptionRetrievingResponseStatus(data) {
	case SubscriptionRetrievingResponseStatusACTIVE:
		*s = SubscriptionRetrievingResponseStatusACTIVE
		return nil
	case SubscriptionRetrievingResponseStatusRUNNING:
		*s = SubscriptionRetrievingResponseStatusRUNNING
		return nil
	case SubscriptionRetrievingResponseStatusCANCELED:
		*s = SubscriptionRetrievingResponseStatusCANCELED
		return nil
	case SubscriptionRetrievingResponseStatusINCOMPLETE:
		*s = SubscriptionRetrievingResponseStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type SubscriptionStatus string

const (
	SubscriptionStatusACTIVE     SubscriptionStatus = "ACTIVE"
	SubscriptionStatusRUNNING    SubscriptionStatus = "RUNNING"
	SubscriptionStatusCANCELED   SubscriptionStatus = "CANCELED"
	SubscriptionStatusINCOMPLETE SubscriptionStatus = "INCOMPLETE"
)

// AllValues returns all SubscriptionStatus values.
func (SubscriptionStatus) AllValues() []SubscriptionStatus {
	return []SubscriptionStatus{
		SubscriptionStatusACTIVE,
		SubscriptionStatusRUNNING,
		SubscriptionStatusCANCELED,
		SubscriptionStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionStatusACTIVE:
		return []byte(s), nil
	case SubscriptionStatusRUNNING:
		return []byte(s), nil
	case SubscriptionStatusCANCELED:
		return []byte(s), nil
	case SubscriptionStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionStatus) UnmarshalText(data []byte) error {
	switch SubscriptionStatus(data) {
	case SubscriptionStatusACTIVE:
		*s = SubscriptionStatusACTIVE
		return nil
	case SubscriptionStatusRUNNING:
		*s = SubscriptionStatusRUNNING
		return nil
	case SubscriptionStatusCANCELED:
		*s = SubscriptionStatusCANCELED
		return nil
	case SubscriptionStatusINCOMPLETE:
		*s = SubscriptionStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Subscription.Unsubscribing.Response
type SubscriptionUnsubscribingResponse struct {
	// サブスクリプションID.
	ID       OptString                                   `json:"id"`
	ShopID   OptString                                   `json:"shop_id"`
	PayType  OptSubscriptionUnsubscribingResponsePayType `json:"pay_type"`
	PlanID   OptString                                   `json:"plan_id"`
	PlanName OptString                                   `json:"plan_name"`
	// 顧客ID\
	// \
	// このサブスクリプションの請求先となる顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
	// カードID\
	// \
	// このサブスクリプションの決済に使用するカードのIDです。.
	CardID OptString `json:"card_id"`
	// 決済手段ID\
	// \
	// このサブスクリプションの決済に使用する決済手段のIDです。.
	PaymentMethodID OptString `json:"payment_method_id"`
	Amount          OptInt64  `json:"amount"`
	Tax             OptInt64  `json:"tax"`
	TotalAmount     OptInt64  `json:"total_amount"`
	// 初回利用金額\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`amount`の金額で課金します。.
	InitialAmount OptInt `json:"initial_amount"`
	// 初回税送料\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`tax`の金額で課金します。.
	InitialTax OptInt `json:"initial_tax"`
	// 初回合計金額\
	// \
	// `initial_amount`と`initial_tax`の合計金額です。.
	InitialTotalAmount OptInt                                     `json:"initial_total_amount"`
	Status             OptSubscriptionUnsubscribingResponseStatus `json:"status"`
	// 課金開始日\
	// サブスクリプションの開始日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StartDate OptString `json:"start_date"`
	// 次回課金日\
	// サブスクリプションの次回課金日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	NextChargeDate OptString `json:"next_charge_date"`
	// 課金停止日\
	// サブスクリプションの停止日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StopDate OptNilString `json:"stop_date"`
	// 月末課金フラグ
	// - `0`：月末課金を行わない
	// - `1`：月末課金を行う.
	EndMonthFlag OptSubscriptionUnsubscribingResponseEndMonthFlag `json:"end_month_flag"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
	// このサブスクリプションにおいて発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptString `json:"error_code"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 *NilString `json:"client_field_3"`
	// ご利用明細表示内容.
	Remarks *NilString `json:"remarks"`
	Created OptString  `json:"created"`
	Updated *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *SubscriptionUnsubscribingResponse) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *SubscriptionUnsubscribingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPayType returns the value of PayType.
func (s *SubscriptionUnsubscribingResponse) GetPayType() OptSubscriptionUnsubscribingResponsePayType {
	return s.PayType
}

// GetPlanID returns the value of PlanID.
func (s *SubscriptionUnsubscribingResponse) GetPlanID() OptString {
	return s.PlanID
}

// GetPlanName returns the value of PlanName.
func (s *SubscriptionUnsubscribingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetCustomerID returns the value of CustomerID.
func (s *SubscriptionUnsubscribingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *SubscriptionUnsubscribingResponse) GetCardID() OptString {
	return s.CardID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *SubscriptionUnsubscribingResponse) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetAmount returns the value of Amount.
func (s *SubscriptionUnsubscribingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *SubscriptionUnsubscribingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *SubscriptionUnsubscribingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetInitialAmount returns the value of InitialAmount.
func (s *SubscriptionUnsubscribingResponse) GetInitialAmount() OptInt {
	return s.InitialAmount
}

// GetInitialTax returns the value of InitialTax.
func (s *SubscriptionUnsubscribingResponse) GetInitialTax() OptInt {
	return s.InitialTax
}

// GetInitialTotalAmount returns the value of InitialTotalAmount.
func (s *SubscriptionUnsubscribingResponse) GetInitialTotalAmount() OptInt {
	return s.InitialTotalAmount
}

// GetStatus returns the value of Status.
func (s *SubscriptionUnsubscribingResponse) GetStatus() OptSubscriptionUnsubscribingResponseStatus {
	return s.Status
}

// GetStartDate returns the value of StartDate.
func (s *SubscriptionUnsubscribingResponse) GetStartDate() OptString {
	return s.StartDate
}

// GetNextChargeDate returns the value of NextChargeDate.
func (s *SubscriptionUnsubscribingResponse) GetNextChargeDate() OptString {
	return s.NextChargeDate
}

// GetStopDate returns the value of StopDate.
func (s *SubscriptionUnsubscribingResponse) GetStopDate() OptNilString {
	return s.StopDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *SubscriptionUnsubscribingResponse) GetEndMonthFlag() OptSubscriptionUnsubscribingResponseEndMonthFlag {
	return s.EndMonthFlag
}

// GetSendURL returns the value of SendURL.
func (s *SubscriptionUnsubscribingResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetErrorCode returns the value of ErrorCode.
func (s *SubscriptionUnsubscribingResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetClientField1 returns the value of ClientField1.
func (s *SubscriptionUnsubscribingResponse) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *SubscriptionUnsubscribingResponse) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *SubscriptionUnsubscribingResponse) GetClientField3() *NilString {
	return s.ClientField3
}

// GetRemarks returns the value of Remarks.
func (s *SubscriptionUnsubscribingResponse) GetRemarks() *NilString {
	return s.Remarks
}

// GetCreated returns the value of Created.
func (s *SubscriptionUnsubscribingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *SubscriptionUnsubscribingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *SubscriptionUnsubscribingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *SubscriptionUnsubscribingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPayType sets the value of PayType.
func (s *SubscriptionUnsubscribingResponse) SetPayType(val OptSubscriptionUnsubscribingResponsePayType) {
	s.PayType = val
}

// SetPlanID sets the value of PlanID.
func (s *SubscriptionUnsubscribingResponse) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetPlanName sets the value of PlanName.
func (s *SubscriptionUnsubscribingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetCustomerID sets the value of CustomerID.
func (s *SubscriptionUnsubscribingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *SubscriptionUnsubscribingResponse) SetCardID(val OptString) {
	s.CardID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *SubscriptionUnsubscribingResponse) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetAmount sets the value of Amount.
func (s *SubscriptionUnsubscribingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *SubscriptionUnsubscribingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *SubscriptionUnsubscribingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetInitialAmount sets the value of InitialAmount.
func (s *SubscriptionUnsubscribingResponse) SetInitialAmount(val OptInt) {
	s.InitialAmount = val
}

// SetInitialTax sets the value of InitialTax.
func (s *SubscriptionUnsubscribingResponse) SetInitialTax(val OptInt) {
	s.InitialTax = val
}

// SetInitialTotalAmount sets the value of InitialTotalAmount.
func (s *SubscriptionUnsubscribingResponse) SetInitialTotalAmount(val OptInt) {
	s.InitialTotalAmount = val
}

// SetStatus sets the value of Status.
func (s *SubscriptionUnsubscribingResponse) SetStatus(val OptSubscriptionUnsubscribingResponseStatus) {
	s.Status = val
}

// SetStartDate sets the value of StartDate.
func (s *SubscriptionUnsubscribingResponse) SetStartDate(val OptString) {
	s.StartDate = val
}

// SetNextChargeDate sets the value of NextChargeDate.
func (s *SubscriptionUnsubscribingResponse) SetNextChargeDate(val OptString) {
	s.NextChargeDate = val
}

// SetStopDate sets the value of StopDate.
func (s *SubscriptionUnsubscribingResponse) SetStopDate(val OptNilString) {
	s.StopDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *SubscriptionUnsubscribingResponse) SetEndMonthFlag(val OptSubscriptionUnsubscribingResponseEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetSendURL sets the value of SendURL.
func (s *SubscriptionUnsubscribingResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *SubscriptionUnsubscribingResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetClientField1 sets the value of ClientField1.
func (s *SubscriptionUnsubscribingResponse) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *SubscriptionUnsubscribingResponse) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *SubscriptionUnsubscribingResponse) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetRemarks sets the value of Remarks.
func (s *SubscriptionUnsubscribingResponse) SetRemarks(val *NilString) {
	s.Remarks = val
}

// SetCreated sets the value of Created.
func (s *SubscriptionUnsubscribingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *SubscriptionUnsubscribingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*SubscriptionUnsubscribingResponse) deleteSubscriptionRes() {}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type SubscriptionUnsubscribingResponseEndMonthFlag string

const (
	SubscriptionUnsubscribingResponseEndMonthFlag0 SubscriptionUnsubscribingResponseEndMonthFlag = "0"
	SubscriptionUnsubscribingResponseEndMonthFlag1 SubscriptionUnsubscribingResponseEndMonthFlag = "1"
)

// AllValues returns all SubscriptionUnsubscribingResponseEndMonthFlag values.
func (SubscriptionUnsubscribingResponseEndMonthFlag) AllValues() []SubscriptionUnsubscribingResponseEndMonthFlag {
	return []SubscriptionUnsubscribingResponseEndMonthFlag{
		SubscriptionUnsubscribingResponseEndMonthFlag0,
		SubscriptionUnsubscribingResponseEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUnsubscribingResponseEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUnsubscribingResponseEndMonthFlag0:
		return []byte(s), nil
	case SubscriptionUnsubscribingResponseEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUnsubscribingResponseEndMonthFlag) UnmarshalText(data []byte) error {
	switch SubscriptionUnsubscribingResponseEndMonthFlag(data) {
	case SubscriptionUnsubscribingResponseEndMonthFlag0:
		*s = SubscriptionUnsubscribingResponseEndMonthFlag0
		return nil
	case SubscriptionUnsubscribingResponseEndMonthFlag1:
		*s = SubscriptionUnsubscribingResponseEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionUnsubscribingResponsePayType string

const (
	SubscriptionUnsubscribingResponsePayTypeCard        SubscriptionUnsubscribingResponsePayType = "Card"
	SubscriptionUnsubscribingResponsePayTypeDirectdebit SubscriptionUnsubscribingResponsePayType = "Directdebit"
)

// AllValues returns all SubscriptionUnsubscribingResponsePayType values.
func (SubscriptionUnsubscribingResponsePayType) AllValues() []SubscriptionUnsubscribingResponsePayType {
	return []SubscriptionUnsubscribingResponsePayType{
		SubscriptionUnsubscribingResponsePayTypeCard,
		SubscriptionUnsubscribingResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUnsubscribingResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUnsubscribingResponsePayTypeCard:
		return []byte(s), nil
	case SubscriptionUnsubscribingResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUnsubscribingResponsePayType) UnmarshalText(data []byte) error {
	switch SubscriptionUnsubscribingResponsePayType(data) {
	case SubscriptionUnsubscribingResponsePayTypeCard:
		*s = SubscriptionUnsubscribingResponsePayTypeCard
		return nil
	case SubscriptionUnsubscribingResponsePayTypeDirectdebit:
		*s = SubscriptionUnsubscribingResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type SubscriptionUnsubscribingResponseStatus string

const (
	SubscriptionUnsubscribingResponseStatusACTIVE     SubscriptionUnsubscribingResponseStatus = "ACTIVE"
	SubscriptionUnsubscribingResponseStatusRUNNING    SubscriptionUnsubscribingResponseStatus = "RUNNING"
	SubscriptionUnsubscribingResponseStatusCANCELED   SubscriptionUnsubscribingResponseStatus = "CANCELED"
	SubscriptionUnsubscribingResponseStatusINCOMPLETE SubscriptionUnsubscribingResponseStatus = "INCOMPLETE"
)

// AllValues returns all SubscriptionUnsubscribingResponseStatus values.
func (SubscriptionUnsubscribingResponseStatus) AllValues() []SubscriptionUnsubscribingResponseStatus {
	return []SubscriptionUnsubscribingResponseStatus{
		SubscriptionUnsubscribingResponseStatusACTIVE,
		SubscriptionUnsubscribingResponseStatusRUNNING,
		SubscriptionUnsubscribingResponseStatusCANCELED,
		SubscriptionUnsubscribingResponseStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUnsubscribingResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUnsubscribingResponseStatusACTIVE:
		return []byte(s), nil
	case SubscriptionUnsubscribingResponseStatusRUNNING:
		return []byte(s), nil
	case SubscriptionUnsubscribingResponseStatusCANCELED:
		return []byte(s), nil
	case SubscriptionUnsubscribingResponseStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUnsubscribingResponseStatus) UnmarshalText(data []byte) error {
	switch SubscriptionUnsubscribingResponseStatus(data) {
	case SubscriptionUnsubscribingResponseStatusACTIVE:
		*s = SubscriptionUnsubscribingResponseStatusACTIVE
		return nil
	case SubscriptionUnsubscribingResponseStatusRUNNING:
		*s = SubscriptionUnsubscribingResponseStatusRUNNING
		return nil
	case SubscriptionUnsubscribingResponseStatusCANCELED:
		*s = SubscriptionUnsubscribingResponseStatusCANCELED
		return nil
	case SubscriptionUnsubscribingResponseStatusINCOMPLETE:
		*s = SubscriptionUnsubscribingResponseStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Subscription.Updating.Request
type SubscriptionUpdatingRequest struct {
	PayType       SubscriptionUpdatingRequestPayType         `json:"pay_type"`
	PlanID        OptString                                  `json:"plan_id"`
	StartDate     OptString                                  `json:"start_date"`
	StopDate      *NilString                                 `json:"stop_date"`
	EndMonthFlag  OptSubscriptionUpdatingRequestEndMonthFlag `json:"end_month_flag"`
	InitialAmount OptString                                  `json:"initial_amount"`
	InitialTax    OptString                                  `json:"initial_tax"`
	// （`pay_type = Directdebit`のみ）ご利用明細表示内容
	// -
	// フォーマット：半角英数カナ／全角英数カナ／一部の記号／半角全角スペース
	// - デフォルト： `ショップ名カナの先頭9文字`
	// ※ 利用可能な記号
	// - 半角：`.`、`(`、`)`、`–`
	// - 全角：`．`、`（`、`）`、`ー`.
	Remarks *NilString `json:"remarks"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
}

// GetPayType returns the value of PayType.
func (s *SubscriptionUpdatingRequest) GetPayType() SubscriptionUpdatingRequestPayType {
	return s.PayType
}

// GetPlanID returns the value of PlanID.
func (s *SubscriptionUpdatingRequest) GetPlanID() OptString {
	return s.PlanID
}

// GetStartDate returns the value of StartDate.
func (s *SubscriptionUpdatingRequest) GetStartDate() OptString {
	return s.StartDate
}

// GetStopDate returns the value of StopDate.
func (s *SubscriptionUpdatingRequest) GetStopDate() *NilString {
	return s.StopDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *SubscriptionUpdatingRequest) GetEndMonthFlag() OptSubscriptionUpdatingRequestEndMonthFlag {
	return s.EndMonthFlag
}

// GetInitialAmount returns the value of InitialAmount.
func (s *SubscriptionUpdatingRequest) GetInitialAmount() OptString {
	return s.InitialAmount
}

// GetInitialTax returns the value of InitialTax.
func (s *SubscriptionUpdatingRequest) GetInitialTax() OptString {
	return s.InitialTax
}

// GetRemarks returns the value of Remarks.
func (s *SubscriptionUpdatingRequest) GetRemarks() *NilString {
	return s.Remarks
}

// GetClientField1 returns the value of ClientField1.
func (s *SubscriptionUpdatingRequest) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *SubscriptionUpdatingRequest) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *SubscriptionUpdatingRequest) GetClientField3() OptNilString {
	return s.ClientField3
}

// SetPayType sets the value of PayType.
func (s *SubscriptionUpdatingRequest) SetPayType(val SubscriptionUpdatingRequestPayType) {
	s.PayType = val
}

// SetPlanID sets the value of PlanID.
func (s *SubscriptionUpdatingRequest) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetStartDate sets the value of StartDate.
func (s *SubscriptionUpdatingRequest) SetStartDate(val OptString) {
	s.StartDate = val
}

// SetStopDate sets the value of StopDate.
func (s *SubscriptionUpdatingRequest) SetStopDate(val *NilString) {
	s.StopDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *SubscriptionUpdatingRequest) SetEndMonthFlag(val OptSubscriptionUpdatingRequestEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetInitialAmount sets the value of InitialAmount.
func (s *SubscriptionUpdatingRequest) SetInitialAmount(val OptString) {
	s.InitialAmount = val
}

// SetInitialTax sets the value of InitialTax.
func (s *SubscriptionUpdatingRequest) SetInitialTax(val OptString) {
	s.InitialTax = val
}

// SetRemarks sets the value of Remarks.
func (s *SubscriptionUpdatingRequest) SetRemarks(val *NilString) {
	s.Remarks = val
}

// SetClientField1 sets the value of ClientField1.
func (s *SubscriptionUpdatingRequest) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *SubscriptionUpdatingRequest) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *SubscriptionUpdatingRequest) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type SubscriptionUpdatingRequestEndMonthFlag string

const (
	SubscriptionUpdatingRequestEndMonthFlag0 SubscriptionUpdatingRequestEndMonthFlag = "0"
	SubscriptionUpdatingRequestEndMonthFlag1 SubscriptionUpdatingRequestEndMonthFlag = "1"
)

// AllValues returns all SubscriptionUpdatingRequestEndMonthFlag values.
func (SubscriptionUpdatingRequestEndMonthFlag) AllValues() []SubscriptionUpdatingRequestEndMonthFlag {
	return []SubscriptionUpdatingRequestEndMonthFlag{
		SubscriptionUpdatingRequestEndMonthFlag0,
		SubscriptionUpdatingRequestEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUpdatingRequestEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUpdatingRequestEndMonthFlag0:
		return []byte(s), nil
	case SubscriptionUpdatingRequestEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUpdatingRequestEndMonthFlag) UnmarshalText(data []byte) error {
	switch SubscriptionUpdatingRequestEndMonthFlag(data) {
	case SubscriptionUpdatingRequestEndMonthFlag0:
		*s = SubscriptionUpdatingRequestEndMonthFlag0
		return nil
	case SubscriptionUpdatingRequestEndMonthFlag1:
		*s = SubscriptionUpdatingRequestEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionUpdatingRequestPayType string

const (
	SubscriptionUpdatingRequestPayTypeCard        SubscriptionUpdatingRequestPayType = "Card"
	SubscriptionUpdatingRequestPayTypeDirectdebit SubscriptionUpdatingRequestPayType = "Directdebit"
)

// AllValues returns all SubscriptionUpdatingRequestPayType values.
func (SubscriptionUpdatingRequestPayType) AllValues() []SubscriptionUpdatingRequestPayType {
	return []SubscriptionUpdatingRequestPayType{
		SubscriptionUpdatingRequestPayTypeCard,
		SubscriptionUpdatingRequestPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUpdatingRequestPayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUpdatingRequestPayTypeCard:
		return []byte(s), nil
	case SubscriptionUpdatingRequestPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUpdatingRequestPayType) UnmarshalText(data []byte) error {
	switch SubscriptionUpdatingRequestPayType(data) {
	case SubscriptionUpdatingRequestPayTypeCard:
		*s = SubscriptionUpdatingRequestPayTypeCard
		return nil
	case SubscriptionUpdatingRequestPayTypeDirectdebit:
		*s = SubscriptionUpdatingRequestPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Subscription.Updating.Response
type SubscriptionUpdatingResponse struct {
	// サブスクリプションID.
	ID       OptString                              `json:"id"`
	ShopID   OptString                              `json:"shop_id"`
	PayType  OptSubscriptionUpdatingResponsePayType `json:"pay_type"`
	PlanID   OptString                              `json:"plan_id"`
	PlanName OptString                              `json:"plan_name"`
	// 顧客ID\
	// \
	// このサブスクリプションの請求先となる顧客のIDです。.
	CustomerID OptString `json:"customer_id"`
	// カードID\
	// \
	// このサブスクリプションの決済に使用するカードのIDです。.
	CardID OptString `json:"card_id"`
	// 決済手段ID\
	// \
	// このサブスクリプションの決済に使用する決済手段のIDです。.
	PaymentMethodID OptString `json:"payment_method_id"`
	Amount          OptInt64  `json:"amount"`
	Tax             OptInt64  `json:"tax"`
	TotalAmount     OptInt64  `json:"total_amount"`
	// 初回利用金額\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`amount`の金額で課金します。.
	InitialAmount OptInt `json:"initial_amount"`
	// 初回税送料\
	// \
	// この値が設定されているとき、このサブスクリプションは初回の課金のみこの金額で課金し、2回目以降はプラン情報がもつ`tax`の金額で課金します。.
	InitialTax OptInt `json:"initial_tax"`
	// 初回合計金額\
	// \
	// `initial_amount`と`initial_tax`の合計金額です。.
	InitialTotalAmount OptInt                                `json:"initial_total_amount"`
	Status             OptSubscriptionUpdatingResponseStatus `json:"status"`
	// 課金開始日\
	// サブスクリプションの開始日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StartDate OptString `json:"start_date"`
	// 次回課金日\
	// サブスクリプションの次回課金日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	NextChargeDate OptString `json:"next_charge_date"`
	// 課金停止日\
	// サブスクリプションの停止日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	StopDate OptNilString `json:"stop_date"`
	// 月末課金フラグ
	// - `0`：月末課金を行わない
	// - `1`：月末課金を行う.
	EndMonthFlag OptSubscriptionUpdatingResponseEndMonthFlag `json:"end_month_flag"`
	// ※ 閉塞機能.
	SendURL OptNilString `json:"send_url"`
	// このサブスクリプションにおいて発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptString `json:"error_code"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 *NilString `json:"client_field_3"`
	// ご利用明細表示内容.
	Remarks *NilString `json:"remarks"`
	Created OptString  `json:"created"`
	Updated *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *SubscriptionUpdatingResponse) GetID() OptString {
	return s.ID
}

// GetShopID returns the value of ShopID.
func (s *SubscriptionUpdatingResponse) GetShopID() OptString {
	return s.ShopID
}

// GetPayType returns the value of PayType.
func (s *SubscriptionUpdatingResponse) GetPayType() OptSubscriptionUpdatingResponsePayType {
	return s.PayType
}

// GetPlanID returns the value of PlanID.
func (s *SubscriptionUpdatingResponse) GetPlanID() OptString {
	return s.PlanID
}

// GetPlanName returns the value of PlanName.
func (s *SubscriptionUpdatingResponse) GetPlanName() OptString {
	return s.PlanName
}

// GetCustomerID returns the value of CustomerID.
func (s *SubscriptionUpdatingResponse) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *SubscriptionUpdatingResponse) GetCardID() OptString {
	return s.CardID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *SubscriptionUpdatingResponse) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetAmount returns the value of Amount.
func (s *SubscriptionUpdatingResponse) GetAmount() OptInt64 {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *SubscriptionUpdatingResponse) GetTax() OptInt64 {
	return s.Tax
}

// GetTotalAmount returns the value of TotalAmount.
func (s *SubscriptionUpdatingResponse) GetTotalAmount() OptInt64 {
	return s.TotalAmount
}

// GetInitialAmount returns the value of InitialAmount.
func (s *SubscriptionUpdatingResponse) GetInitialAmount() OptInt {
	return s.InitialAmount
}

// GetInitialTax returns the value of InitialTax.
func (s *SubscriptionUpdatingResponse) GetInitialTax() OptInt {
	return s.InitialTax
}

// GetInitialTotalAmount returns the value of InitialTotalAmount.
func (s *SubscriptionUpdatingResponse) GetInitialTotalAmount() OptInt {
	return s.InitialTotalAmount
}

// GetStatus returns the value of Status.
func (s *SubscriptionUpdatingResponse) GetStatus() OptSubscriptionUpdatingResponseStatus {
	return s.Status
}

// GetStartDate returns the value of StartDate.
func (s *SubscriptionUpdatingResponse) GetStartDate() OptString {
	return s.StartDate
}

// GetNextChargeDate returns the value of NextChargeDate.
func (s *SubscriptionUpdatingResponse) GetNextChargeDate() OptString {
	return s.NextChargeDate
}

// GetStopDate returns the value of StopDate.
func (s *SubscriptionUpdatingResponse) GetStopDate() OptNilString {
	return s.StopDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *SubscriptionUpdatingResponse) GetEndMonthFlag() OptSubscriptionUpdatingResponseEndMonthFlag {
	return s.EndMonthFlag
}

// GetSendURL returns the value of SendURL.
func (s *SubscriptionUpdatingResponse) GetSendURL() OptNilString {
	return s.SendURL
}

// GetErrorCode returns the value of ErrorCode.
func (s *SubscriptionUpdatingResponse) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetClientField1 returns the value of ClientField1.
func (s *SubscriptionUpdatingResponse) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *SubscriptionUpdatingResponse) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *SubscriptionUpdatingResponse) GetClientField3() *NilString {
	return s.ClientField3
}

// GetRemarks returns the value of Remarks.
func (s *SubscriptionUpdatingResponse) GetRemarks() *NilString {
	return s.Remarks
}

// GetCreated returns the value of Created.
func (s *SubscriptionUpdatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *SubscriptionUpdatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *SubscriptionUpdatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopID sets the value of ShopID.
func (s *SubscriptionUpdatingResponse) SetShopID(val OptString) {
	s.ShopID = val
}

// SetPayType sets the value of PayType.
func (s *SubscriptionUpdatingResponse) SetPayType(val OptSubscriptionUpdatingResponsePayType) {
	s.PayType = val
}

// SetPlanID sets the value of PlanID.
func (s *SubscriptionUpdatingResponse) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetPlanName sets the value of PlanName.
func (s *SubscriptionUpdatingResponse) SetPlanName(val OptString) {
	s.PlanName = val
}

// SetCustomerID sets the value of CustomerID.
func (s *SubscriptionUpdatingResponse) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *SubscriptionUpdatingResponse) SetCardID(val OptString) {
	s.CardID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *SubscriptionUpdatingResponse) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetAmount sets the value of Amount.
func (s *SubscriptionUpdatingResponse) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *SubscriptionUpdatingResponse) SetTax(val OptInt64) {
	s.Tax = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *SubscriptionUpdatingResponse) SetTotalAmount(val OptInt64) {
	s.TotalAmount = val
}

// SetInitialAmount sets the value of InitialAmount.
func (s *SubscriptionUpdatingResponse) SetInitialAmount(val OptInt) {
	s.InitialAmount = val
}

// SetInitialTax sets the value of InitialTax.
func (s *SubscriptionUpdatingResponse) SetInitialTax(val OptInt) {
	s.InitialTax = val
}

// SetInitialTotalAmount sets the value of InitialTotalAmount.
func (s *SubscriptionUpdatingResponse) SetInitialTotalAmount(val OptInt) {
	s.InitialTotalAmount = val
}

// SetStatus sets the value of Status.
func (s *SubscriptionUpdatingResponse) SetStatus(val OptSubscriptionUpdatingResponseStatus) {
	s.Status = val
}

// SetStartDate sets the value of StartDate.
func (s *SubscriptionUpdatingResponse) SetStartDate(val OptString) {
	s.StartDate = val
}

// SetNextChargeDate sets the value of NextChargeDate.
func (s *SubscriptionUpdatingResponse) SetNextChargeDate(val OptString) {
	s.NextChargeDate = val
}

// SetStopDate sets the value of StopDate.
func (s *SubscriptionUpdatingResponse) SetStopDate(val OptNilString) {
	s.StopDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *SubscriptionUpdatingResponse) SetEndMonthFlag(val OptSubscriptionUpdatingResponseEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetSendURL sets the value of SendURL.
func (s *SubscriptionUpdatingResponse) SetSendURL(val OptNilString) {
	s.SendURL = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *SubscriptionUpdatingResponse) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetClientField1 sets the value of ClientField1.
func (s *SubscriptionUpdatingResponse) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *SubscriptionUpdatingResponse) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *SubscriptionUpdatingResponse) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetRemarks sets the value of Remarks.
func (s *SubscriptionUpdatingResponse) SetRemarks(val *NilString) {
	s.Remarks = val
}

// SetCreated sets the value of Created.
func (s *SubscriptionUpdatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *SubscriptionUpdatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*SubscriptionUpdatingResponse) updateSubscriptionRes() {}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type SubscriptionUpdatingResponseEndMonthFlag string

const (
	SubscriptionUpdatingResponseEndMonthFlag0 SubscriptionUpdatingResponseEndMonthFlag = "0"
	SubscriptionUpdatingResponseEndMonthFlag1 SubscriptionUpdatingResponseEndMonthFlag = "1"
)

// AllValues returns all SubscriptionUpdatingResponseEndMonthFlag values.
func (SubscriptionUpdatingResponseEndMonthFlag) AllValues() []SubscriptionUpdatingResponseEndMonthFlag {
	return []SubscriptionUpdatingResponseEndMonthFlag{
		SubscriptionUpdatingResponseEndMonthFlag0,
		SubscriptionUpdatingResponseEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUpdatingResponseEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUpdatingResponseEndMonthFlag0:
		return []byte(s), nil
	case SubscriptionUpdatingResponseEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUpdatingResponseEndMonthFlag) UnmarshalText(data []byte) error {
	switch SubscriptionUpdatingResponseEndMonthFlag(data) {
	case SubscriptionUpdatingResponseEndMonthFlag0:
		*s = SubscriptionUpdatingResponseEndMonthFlag0
		return nil
	case SubscriptionUpdatingResponseEndMonthFlag1:
		*s = SubscriptionUpdatingResponseEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type SubscriptionUpdatingResponsePayType string

const (
	SubscriptionUpdatingResponsePayTypeCard        SubscriptionUpdatingResponsePayType = "Card"
	SubscriptionUpdatingResponsePayTypeDirectdebit SubscriptionUpdatingResponsePayType = "Directdebit"
)

// AllValues returns all SubscriptionUpdatingResponsePayType values.
func (SubscriptionUpdatingResponsePayType) AllValues() []SubscriptionUpdatingResponsePayType {
	return []SubscriptionUpdatingResponsePayType{
		SubscriptionUpdatingResponsePayTypeCard,
		SubscriptionUpdatingResponsePayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUpdatingResponsePayType) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUpdatingResponsePayTypeCard:
		return []byte(s), nil
	case SubscriptionUpdatingResponsePayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUpdatingResponsePayType) UnmarshalText(data []byte) error {
	switch SubscriptionUpdatingResponsePayType(data) {
	case SubscriptionUpdatingResponsePayTypeCard:
		*s = SubscriptionUpdatingResponsePayTypeCard
		return nil
	case SubscriptionUpdatingResponsePayTypeDirectdebit:
		*s = SubscriptionUpdatingResponsePayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type SubscriptionUpdatingResponseStatus string

const (
	SubscriptionUpdatingResponseStatusACTIVE     SubscriptionUpdatingResponseStatus = "ACTIVE"
	SubscriptionUpdatingResponseStatusRUNNING    SubscriptionUpdatingResponseStatus = "RUNNING"
	SubscriptionUpdatingResponseStatusCANCELED   SubscriptionUpdatingResponseStatus = "CANCELED"
	SubscriptionUpdatingResponseStatusINCOMPLETE SubscriptionUpdatingResponseStatus = "INCOMPLETE"
)

// AllValues returns all SubscriptionUpdatingResponseStatus values.
func (SubscriptionUpdatingResponseStatus) AllValues() []SubscriptionUpdatingResponseStatus {
	return []SubscriptionUpdatingResponseStatus{
		SubscriptionUpdatingResponseStatusACTIVE,
		SubscriptionUpdatingResponseStatusRUNNING,
		SubscriptionUpdatingResponseStatusCANCELED,
		SubscriptionUpdatingResponseStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubscriptionUpdatingResponseStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubscriptionUpdatingResponseStatusACTIVE:
		return []byte(s), nil
	case SubscriptionUpdatingResponseStatusRUNNING:
		return []byte(s), nil
	case SubscriptionUpdatingResponseStatusCANCELED:
		return []byte(s), nil
	case SubscriptionUpdatingResponseStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubscriptionUpdatingResponseStatus) UnmarshalText(data []byte) error {
	switch SubscriptionUpdatingResponseStatus(data) {
	case SubscriptionUpdatingResponseStatusACTIVE:
		*s = SubscriptionUpdatingResponseStatusACTIVE
		return nil
	case SubscriptionUpdatingResponseStatusRUNNING:
		*s = SubscriptionUpdatingResponseStatusRUNNING
		return nil
	case SubscriptionUpdatingResponseStatusCANCELED:
		*s = SubscriptionUpdatingResponseStatusCANCELED
		return nil
	case SubscriptionUpdatingResponseStatusINCOMPLETE:
		*s = SubscriptionUpdatingResponseStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TdTenantName string

// 3Dセキュア2.0認証ステータス
// - `AUTHENTICATING`: 3Dセキュア認証処理中
// - `CHALLENGE`: 3Dセキュア認証が必要
// - `ACTIVATED`: 有効化済み
// - `AUTHENTICATED`: 3Dセキュア認証済み.
// Ref: #/components/schemas/Tds2Status
type Tds2Status string

const (
	Tds2StatusAUTHENTICATING Tds2Status = "AUTHENTICATING"
	Tds2StatusCHALLENGE      Tds2Status = "CHALLENGE"
	Tds2StatusACTIVATED      Tds2Status = "ACTIVATED"
	Tds2StatusAUTHENTICATED  Tds2Status = "AUTHENTICATED"
)

// AllValues returns all Tds2Status values.
func (Tds2Status) AllValues() []Tds2Status {
	return []Tds2Status{
		Tds2StatusAUTHENTICATING,
		Tds2StatusCHALLENGE,
		Tds2StatusACTIVATED,
		Tds2StatusAUTHENTICATED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Tds2Status) MarshalText() ([]byte, error) {
	switch s {
	case Tds2StatusAUTHENTICATING:
		return []byte(s), nil
	case Tds2StatusCHALLENGE:
		return []byte(s), nil
	case Tds2StatusACTIVATED:
		return []byte(s), nil
	case Tds2StatusAUTHENTICATED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Tds2Status) UnmarshalText(data []byte) error {
	switch Tds2Status(data) {
	case Tds2StatusAUTHENTICATING:
		*s = Tds2StatusAUTHENTICATING
		return nil
	case Tds2StatusCHALLENGE:
		*s = Tds2StatusCHALLENGE
		return nil
	case Tds2StatusACTIVATED:
		*s = Tds2StatusACTIVATED
		return nil
	case Tds2StatusAUTHENTICATED:
		*s = Tds2StatusAUTHENTICATED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア2.0非対応時の挙動設定\
// 購入者がこの決済に利用したカードが3Dセキュア2.
// 0に非対応である場合の後続処理を設定します。
// - `2`: エラーをレスポンスし、処理を終了する。（デフォルト）
// - `3`: 3Dセキュア認証なしで処理を継続する。.
// Ref: #/components/schemas/tds2_type
type Tds2Type string

const (
	Tds2Type2 Tds2Type = "2"
	Tds2Type3 Tds2Type = "3"
)

// AllValues returns all Tds2Type values.
func (Tds2Type) AllValues() []Tds2Type {
	return []Tds2Type{
		Tds2Type2,
		Tds2Type3,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Tds2Type) MarshalText() ([]byte, error) {
	switch s {
	case Tds2Type2:
		return []byte(s), nil
	case Tds2Type3:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Tds2Type) UnmarshalText(data []byte) error {
	switch Tds2Type(data) {
	case Tds2Type2:
		*s = Tds2Type2
		return nil
	case Tds2Type3:
		*s = Tds2Type3
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 3Dセキュア認証を利用するか。
// - `0`: 3Dセキュア認証を利用しない（デフォルト）
// - `2`: 3Dセキュア2.0認証を利用する.
// Ref: #/components/schemas/tds_type
type TdsType string

const (
	TdsType0 TdsType = "0"
	TdsType2 TdsType = "2"
)

// AllValues returns all TdsType values.
func (TdsType) AllValues() []TdsType {
	return []TdsType{
		TdsType0,
		TdsType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TdsType) MarshalText() ([]byte, error) {
	switch s {
	case TdsType0:
		return []byte(s), nil
	case TdsType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TdsType) UnmarshalText(data []byte) error {
	switch TdsType(data) {
	case TdsType0:
		*s = TdsType0
		return nil
	case TdsType2:
		*s = TdsType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TenantShop.ListRetrieving.Response
type TenantShopListRetrievingResponse struct {
	List []Shop `json:"list"`
}

// GetList returns the value of List.
func (s *TenantShopListRetrievingResponse) GetList() []Shop {
	return s.List
}

// SetList sets the value of List.
func (s *TenantShopListRetrievingResponse) SetList(val []Shop) {
	s.List = val
}

func (*TenantShopListRetrievingResponse) retrieveTenantShopListRes() {}

// Ref: #/components/schemas/TenantShop.Retrieving.Response
type TenantShopRetrievingResponse struct {
	// ショップID.
	ID OptString `json:"id"`
	// ショップ名.
	ShopName OptNilString `json:"shop_name"`
	// ショップ名（カナ）.
	ShopNameKana OptNilString                             `json:"shop_name_kana"`
	ShopType     *NilTenantShopRetrievingResponseShopType `json:"shop_type"`
	// プラットフォームID.
	PlatformID OptString `json:"platform_id"`
	// プラットフォーム名.
	PlatformName OptNilString `json:"platform_name"`
	// 顧客情報共有フラグ
	// - `0`: 顧客情報を共有しない<br /><span
	// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
	// - `1`: 顧客情報を共有する<br /><span
	// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
	SharedCustomerFlag OptNilTenantShopRetrievingResponseSharedCustomerFlag `json:"shared_customer_flag"`
	// 顧客情報共有グループID\
	// fincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// 決済手段ごとに存在するプラットフォーム手数料設定のリスト.
	PlatformRateList []PlatformRateConfig `json:"platform_rate_list"`
	// 通知先メールアドレス.
	SendMailAddress OptNilString `json:"send_mail_address"`
	// ショップメールアドレス.
	ShopMailAddress OptNilString `json:"shop_mail_address"`
	// ログ保存日数.
	LogKeepDays OptNilString `json:"log_keep_days"`
	// APIバージョン.
	APIVersion OptNilString `json:"api_version"`
	// 管理画面におけるAPIキー表示フラグ。
	// - `0`: 表示しない
	// - `1`: 表示する.
	APIKeyDisplayFlag OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag `json:"api_key_display_flag"`
	Created           OptString                                           `json:"created"`
	Updated           *NilString                                          `json:"updated"`
}

// GetID returns the value of ID.
func (s *TenantShopRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *TenantShopRetrievingResponse) GetShopName() OptNilString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *TenantShopRetrievingResponse) GetShopNameKana() OptNilString {
	return s.ShopNameKana
}

// GetShopType returns the value of ShopType.
func (s *TenantShopRetrievingResponse) GetShopType() *NilTenantShopRetrievingResponseShopType {
	return s.ShopType
}

// GetPlatformID returns the value of PlatformID.
func (s *TenantShopRetrievingResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetPlatformName returns the value of PlatformName.
func (s *TenantShopRetrievingResponse) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSharedCustomerFlag returns the value of SharedCustomerFlag.
func (s *TenantShopRetrievingResponse) GetSharedCustomerFlag() OptNilTenantShopRetrievingResponseSharedCustomerFlag {
	return s.SharedCustomerFlag
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *TenantShopRetrievingResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetPlatformRateList returns the value of PlatformRateList.
func (s *TenantShopRetrievingResponse) GetPlatformRateList() []PlatformRateConfig {
	return s.PlatformRateList
}

// GetSendMailAddress returns the value of SendMailAddress.
func (s *TenantShopRetrievingResponse) GetSendMailAddress() OptNilString {
	return s.SendMailAddress
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *TenantShopRetrievingResponse) GetShopMailAddress() OptNilString {
	return s.ShopMailAddress
}

// GetLogKeepDays returns the value of LogKeepDays.
func (s *TenantShopRetrievingResponse) GetLogKeepDays() OptNilString {
	return s.LogKeepDays
}

// GetAPIVersion returns the value of APIVersion.
func (s *TenantShopRetrievingResponse) GetAPIVersion() OptNilString {
	return s.APIVersion
}

// GetAPIKeyDisplayFlag returns the value of APIKeyDisplayFlag.
func (s *TenantShopRetrievingResponse) GetAPIKeyDisplayFlag() OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag {
	return s.APIKeyDisplayFlag
}

// GetCreated returns the value of Created.
func (s *TenantShopRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *TenantShopRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *TenantShopRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *TenantShopRetrievingResponse) SetShopName(val OptNilString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *TenantShopRetrievingResponse) SetShopNameKana(val OptNilString) {
	s.ShopNameKana = val
}

// SetShopType sets the value of ShopType.
func (s *TenantShopRetrievingResponse) SetShopType(val *NilTenantShopRetrievingResponseShopType) {
	s.ShopType = val
}

// SetPlatformID sets the value of PlatformID.
func (s *TenantShopRetrievingResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetPlatformName sets the value of PlatformName.
func (s *TenantShopRetrievingResponse) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSharedCustomerFlag sets the value of SharedCustomerFlag.
func (s *TenantShopRetrievingResponse) SetSharedCustomerFlag(val OptNilTenantShopRetrievingResponseSharedCustomerFlag) {
	s.SharedCustomerFlag = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *TenantShopRetrievingResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetPlatformRateList sets the value of PlatformRateList.
func (s *TenantShopRetrievingResponse) SetPlatformRateList(val []PlatformRateConfig) {
	s.PlatformRateList = val
}

// SetSendMailAddress sets the value of SendMailAddress.
func (s *TenantShopRetrievingResponse) SetSendMailAddress(val OptNilString) {
	s.SendMailAddress = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *TenantShopRetrievingResponse) SetShopMailAddress(val OptNilString) {
	s.ShopMailAddress = val
}

// SetLogKeepDays sets the value of LogKeepDays.
func (s *TenantShopRetrievingResponse) SetLogKeepDays(val OptNilString) {
	s.LogKeepDays = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *TenantShopRetrievingResponse) SetAPIVersion(val OptNilString) {
	s.APIVersion = val
}

// SetAPIKeyDisplayFlag sets the value of APIKeyDisplayFlag.
func (s *TenantShopRetrievingResponse) SetAPIKeyDisplayFlag(val OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) {
	s.APIKeyDisplayFlag = val
}

// SetCreated sets the value of Created.
func (s *TenantShopRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *TenantShopRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*TenantShopRetrievingResponse) retrieveTenantShopRes() {}

// 管理画面におけるAPIキー表示フラグ。
// - `0`: 表示しない
// - `1`: 表示する.
type TenantShopRetrievingResponseAPIKeyDisplayFlag string

const (
	TenantShopRetrievingResponseAPIKeyDisplayFlag0 TenantShopRetrievingResponseAPIKeyDisplayFlag = "0"
	TenantShopRetrievingResponseAPIKeyDisplayFlag1 TenantShopRetrievingResponseAPIKeyDisplayFlag = "1"
)

// AllValues returns all TenantShopRetrievingResponseAPIKeyDisplayFlag values.
func (TenantShopRetrievingResponseAPIKeyDisplayFlag) AllValues() []TenantShopRetrievingResponseAPIKeyDisplayFlag {
	return []TenantShopRetrievingResponseAPIKeyDisplayFlag{
		TenantShopRetrievingResponseAPIKeyDisplayFlag0,
		TenantShopRetrievingResponseAPIKeyDisplayFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopRetrievingResponseAPIKeyDisplayFlag) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopRetrievingResponseAPIKeyDisplayFlag0:
		return []byte(s), nil
	case TenantShopRetrievingResponseAPIKeyDisplayFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopRetrievingResponseAPIKeyDisplayFlag) UnmarshalText(data []byte) error {
	switch TenantShopRetrievingResponseAPIKeyDisplayFlag(data) {
	case TenantShopRetrievingResponseAPIKeyDisplayFlag0:
		*s = TenantShopRetrievingResponseAPIKeyDisplayFlag0
		return nil
	case TenantShopRetrievingResponseAPIKeyDisplayFlag1:
		*s = TenantShopRetrievingResponseAPIKeyDisplayFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 顧客情報共有フラグ
// - `0`: 顧客情報を共有しない<br /><span
// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
// - `1`: 顧客情報を共有する<br /><span
// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
type TenantShopRetrievingResponseSharedCustomerFlag string

const (
	TenantShopRetrievingResponseSharedCustomerFlag0 TenantShopRetrievingResponseSharedCustomerFlag = "0"
	TenantShopRetrievingResponseSharedCustomerFlag1 TenantShopRetrievingResponseSharedCustomerFlag = "1"
)

// AllValues returns all TenantShopRetrievingResponseSharedCustomerFlag values.
func (TenantShopRetrievingResponseSharedCustomerFlag) AllValues() []TenantShopRetrievingResponseSharedCustomerFlag {
	return []TenantShopRetrievingResponseSharedCustomerFlag{
		TenantShopRetrievingResponseSharedCustomerFlag0,
		TenantShopRetrievingResponseSharedCustomerFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopRetrievingResponseSharedCustomerFlag) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopRetrievingResponseSharedCustomerFlag0:
		return []byte(s), nil
	case TenantShopRetrievingResponseSharedCustomerFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopRetrievingResponseSharedCustomerFlag) UnmarshalText(data []byte) error {
	switch TenantShopRetrievingResponseSharedCustomerFlag(data) {
	case TenantShopRetrievingResponseSharedCustomerFlag0:
		*s = TenantShopRetrievingResponseSharedCustomerFlag0
		return nil
	case TenantShopRetrievingResponseSharedCustomerFlag1:
		*s = TenantShopRetrievingResponseSharedCustomerFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type TenantShopRetrievingResponseShopType string

const (
	TenantShopRetrievingResponseShopTypePlatform TenantShopRetrievingResponseShopType = "platform"
	TenantShopRetrievingResponseShopTypeTenant   TenantShopRetrievingResponseShopType = "tenant"
)

// AllValues returns all TenantShopRetrievingResponseShopType values.
func (TenantShopRetrievingResponseShopType) AllValues() []TenantShopRetrievingResponseShopType {
	return []TenantShopRetrievingResponseShopType{
		TenantShopRetrievingResponseShopTypePlatform,
		TenantShopRetrievingResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopRetrievingResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopRetrievingResponseShopTypePlatform:
		return []byte(s), nil
	case TenantShopRetrievingResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopRetrievingResponseShopType) UnmarshalText(data []byte) error {
	switch TenantShopRetrievingResponseShopType(data) {
	case TenantShopRetrievingResponseShopTypePlatform:
		*s = TenantShopRetrievingResponseShopTypePlatform
		return nil
	case TenantShopRetrievingResponseShopTypeTenant:
		*s = TenantShopRetrievingResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TenantShop.Updating.Request
type TenantShopUpdatingRequest struct {
	ExaminationMasterID OptTenantShopUpdatingRequestExaminationMasterID `json:"examination_master_id"`
	// （個別）プラットフォーム利用料率。\
	// このテナントが`id`で指定した決済手段で決済を行うと、このプラットフォーム利用料率が適用されます。.
	PlatformRate *NilString `json:"platform_rate"`
	// （個別）プラットフォーム利用料 最低料金。\
	// このテナントが`id`で指定した決済手段で決済を行った際、`platform_rate`による利用料がこの最低料金を下回ると、この最低料金が適用されます。.
	FixedFee *NilString `json:"fixed_fee"`
	// （個別）プラットフォーム利用料 Web登録手数料。\
	// このテナントに紐づく顧客が口座振替における振替用口座登録（Web登録）に成功した際に適用されるWeb登録手数料です。.
	WebRegistrationFee *NilString `json:"web_registration_fee"`
	// PayPay審査により決定されるPayPay商材カテゴリー。\
	// PayPayのプラットフォーム利用料（`platform_rate`）はこの`paypay_content_category_type`ごとに設定します。
	// - `1`: 物販／サービスショップ
	// - `2`: デジタルコンテンツショップ
	// ※ PayPayのみ.
	PaypayContentCategoryType *NilTenantShopUpdatingRequestPaypayContentCategoryType `json:"paypay_content_category_type"`
	// APIキー表示フラグ\
	// `1`を指定するとテナントショップの管理画面上にAPIキーが表示されるようになります。
	// - `0`: 表示しない
	// - `1`: 表示する.
	APIKeyDisplayFlag *NilTenantShopUpdatingRequestAPIKeyDisplayFlag `json:"api_key_display_flag"`
}

// GetExaminationMasterID returns the value of ExaminationMasterID.
func (s *TenantShopUpdatingRequest) GetExaminationMasterID() OptTenantShopUpdatingRequestExaminationMasterID {
	return s.ExaminationMasterID
}

// GetPlatformRate returns the value of PlatformRate.
func (s *TenantShopUpdatingRequest) GetPlatformRate() *NilString {
	return s.PlatformRate
}

// GetFixedFee returns the value of FixedFee.
func (s *TenantShopUpdatingRequest) GetFixedFee() *NilString {
	return s.FixedFee
}

// GetWebRegistrationFee returns the value of WebRegistrationFee.
func (s *TenantShopUpdatingRequest) GetWebRegistrationFee() *NilString {
	return s.WebRegistrationFee
}

// GetPaypayContentCategoryType returns the value of PaypayContentCategoryType.
func (s *TenantShopUpdatingRequest) GetPaypayContentCategoryType() *NilTenantShopUpdatingRequestPaypayContentCategoryType {
	return s.PaypayContentCategoryType
}

// GetAPIKeyDisplayFlag returns the value of APIKeyDisplayFlag.
func (s *TenantShopUpdatingRequest) GetAPIKeyDisplayFlag() *NilTenantShopUpdatingRequestAPIKeyDisplayFlag {
	return s.APIKeyDisplayFlag
}

// SetExaminationMasterID sets the value of ExaminationMasterID.
func (s *TenantShopUpdatingRequest) SetExaminationMasterID(val OptTenantShopUpdatingRequestExaminationMasterID) {
	s.ExaminationMasterID = val
}

// SetPlatformRate sets the value of PlatformRate.
func (s *TenantShopUpdatingRequest) SetPlatformRate(val *NilString) {
	s.PlatformRate = val
}

// SetFixedFee sets the value of FixedFee.
func (s *TenantShopUpdatingRequest) SetFixedFee(val *NilString) {
	s.FixedFee = val
}

// SetWebRegistrationFee sets the value of WebRegistrationFee.
func (s *TenantShopUpdatingRequest) SetWebRegistrationFee(val *NilString) {
	s.WebRegistrationFee = val
}

// SetPaypayContentCategoryType sets the value of PaypayContentCategoryType.
func (s *TenantShopUpdatingRequest) SetPaypayContentCategoryType(val *NilTenantShopUpdatingRequestPaypayContentCategoryType) {
	s.PaypayContentCategoryType = val
}

// SetAPIKeyDisplayFlag sets the value of APIKeyDisplayFlag.
func (s *TenantShopUpdatingRequest) SetAPIKeyDisplayFlag(val *NilTenantShopUpdatingRequestAPIKeyDisplayFlag) {
	s.APIKeyDisplayFlag = val
}

// 管理画面におけるAPIキー表示フラグ。
// - `0`: 表示しない
// - `1`: 表示する.
type TenantShopUpdatingRequestAPIKeyDisplayFlag string

const (
	TenantShopUpdatingRequestAPIKeyDisplayFlag0 TenantShopUpdatingRequestAPIKeyDisplayFlag = "0"
	TenantShopUpdatingRequestAPIKeyDisplayFlag1 TenantShopUpdatingRequestAPIKeyDisplayFlag = "1"
)

// AllValues returns all TenantShopUpdatingRequestAPIKeyDisplayFlag values.
func (TenantShopUpdatingRequestAPIKeyDisplayFlag) AllValues() []TenantShopUpdatingRequestAPIKeyDisplayFlag {
	return []TenantShopUpdatingRequestAPIKeyDisplayFlag{
		TenantShopUpdatingRequestAPIKeyDisplayFlag0,
		TenantShopUpdatingRequestAPIKeyDisplayFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopUpdatingRequestAPIKeyDisplayFlag) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopUpdatingRequestAPIKeyDisplayFlag0:
		return []byte(s), nil
	case TenantShopUpdatingRequestAPIKeyDisplayFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopUpdatingRequestAPIKeyDisplayFlag) UnmarshalText(data []byte) error {
	switch TenantShopUpdatingRequestAPIKeyDisplayFlag(data) {
	case TenantShopUpdatingRequestAPIKeyDisplayFlag0:
		*s = TenantShopUpdatingRequestAPIKeyDisplayFlag0
		return nil
	case TenantShopUpdatingRequestAPIKeyDisplayFlag1:
		*s = TenantShopUpdatingRequestAPIKeyDisplayFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 審査種別マスタID。\
// プラットフォーム料率の適用対象とする決済手段の種別を表します。
// - `vm`: カード決済（VISA / Mastercard）
// - `jad`: カード決済（JCB / American Express / Diners Club / Discover）
// - `applepay_vm`: Apple Pay（VISA / Mastercard）
// - `applepay_jad`: Apple Pay（JCB / American Express / Diners Club / Discover）
// - `konbini`: コンビニ決済
// - `paypay`: PayPay
// - `directdebit`: 口座振替.
type TenantShopUpdatingRequestExaminationMasterID string

const (
	TenantShopUpdatingRequestExaminationMasterIDVM          TenantShopUpdatingRequestExaminationMasterID = "vm"
	TenantShopUpdatingRequestExaminationMasterIDJad         TenantShopUpdatingRequestExaminationMasterID = "jad"
	TenantShopUpdatingRequestExaminationMasterIDApplepayVM  TenantShopUpdatingRequestExaminationMasterID = "applepay_vm"
	TenantShopUpdatingRequestExaminationMasterIDApplepayJad TenantShopUpdatingRequestExaminationMasterID = "applepay_jad"
	TenantShopUpdatingRequestExaminationMasterIDKonbini     TenantShopUpdatingRequestExaminationMasterID = "konbini"
	TenantShopUpdatingRequestExaminationMasterIDPaypay      TenantShopUpdatingRequestExaminationMasterID = "paypay"
	TenantShopUpdatingRequestExaminationMasterIDDirectdebit TenantShopUpdatingRequestExaminationMasterID = "directdebit"
)

// AllValues returns all TenantShopUpdatingRequestExaminationMasterID values.
func (TenantShopUpdatingRequestExaminationMasterID) AllValues() []TenantShopUpdatingRequestExaminationMasterID {
	return []TenantShopUpdatingRequestExaminationMasterID{
		TenantShopUpdatingRequestExaminationMasterIDVM,
		TenantShopUpdatingRequestExaminationMasterIDJad,
		TenantShopUpdatingRequestExaminationMasterIDApplepayVM,
		TenantShopUpdatingRequestExaminationMasterIDApplepayJad,
		TenantShopUpdatingRequestExaminationMasterIDKonbini,
		TenantShopUpdatingRequestExaminationMasterIDPaypay,
		TenantShopUpdatingRequestExaminationMasterIDDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopUpdatingRequestExaminationMasterID) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopUpdatingRequestExaminationMasterIDVM:
		return []byte(s), nil
	case TenantShopUpdatingRequestExaminationMasterIDJad:
		return []byte(s), nil
	case TenantShopUpdatingRequestExaminationMasterIDApplepayVM:
		return []byte(s), nil
	case TenantShopUpdatingRequestExaminationMasterIDApplepayJad:
		return []byte(s), nil
	case TenantShopUpdatingRequestExaminationMasterIDKonbini:
		return []byte(s), nil
	case TenantShopUpdatingRequestExaminationMasterIDPaypay:
		return []byte(s), nil
	case TenantShopUpdatingRequestExaminationMasterIDDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopUpdatingRequestExaminationMasterID) UnmarshalText(data []byte) error {
	switch TenantShopUpdatingRequestExaminationMasterID(data) {
	case TenantShopUpdatingRequestExaminationMasterIDVM:
		*s = TenantShopUpdatingRequestExaminationMasterIDVM
		return nil
	case TenantShopUpdatingRequestExaminationMasterIDJad:
		*s = TenantShopUpdatingRequestExaminationMasterIDJad
		return nil
	case TenantShopUpdatingRequestExaminationMasterIDApplepayVM:
		*s = TenantShopUpdatingRequestExaminationMasterIDApplepayVM
		return nil
	case TenantShopUpdatingRequestExaminationMasterIDApplepayJad:
		*s = TenantShopUpdatingRequestExaminationMasterIDApplepayJad
		return nil
	case TenantShopUpdatingRequestExaminationMasterIDKonbini:
		*s = TenantShopUpdatingRequestExaminationMasterIDKonbini
		return nil
	case TenantShopUpdatingRequestExaminationMasterIDPaypay:
		*s = TenantShopUpdatingRequestExaminationMasterIDPaypay
		return nil
	case TenantShopUpdatingRequestExaminationMasterIDDirectdebit:
		*s = TenantShopUpdatingRequestExaminationMasterIDDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PayPay審査により決定されるPayPay商材カテゴリー。
// - `1`: 物販／サービスショップ
// - `2`: デジタルコンテンツショップ
// ※ PayPayのみ.
type TenantShopUpdatingRequestPaypayContentCategoryType string

const (
	TenantShopUpdatingRequestPaypayContentCategoryType1 TenantShopUpdatingRequestPaypayContentCategoryType = "1"
	TenantShopUpdatingRequestPaypayContentCategoryType2 TenantShopUpdatingRequestPaypayContentCategoryType = "2"
)

// AllValues returns all TenantShopUpdatingRequestPaypayContentCategoryType values.
func (TenantShopUpdatingRequestPaypayContentCategoryType) AllValues() []TenantShopUpdatingRequestPaypayContentCategoryType {
	return []TenantShopUpdatingRequestPaypayContentCategoryType{
		TenantShopUpdatingRequestPaypayContentCategoryType1,
		TenantShopUpdatingRequestPaypayContentCategoryType2,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopUpdatingRequestPaypayContentCategoryType) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopUpdatingRequestPaypayContentCategoryType1:
		return []byte(s), nil
	case TenantShopUpdatingRequestPaypayContentCategoryType2:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopUpdatingRequestPaypayContentCategoryType) UnmarshalText(data []byte) error {
	switch TenantShopUpdatingRequestPaypayContentCategoryType(data) {
	case TenantShopUpdatingRequestPaypayContentCategoryType1:
		*s = TenantShopUpdatingRequestPaypayContentCategoryType1
		return nil
	case TenantShopUpdatingRequestPaypayContentCategoryType2:
		*s = TenantShopUpdatingRequestPaypayContentCategoryType2
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TenantShop.Updating.Response
type TenantShopUpdatingResponse struct {
	// ショップID.
	ID OptString `json:"id"`
	// ショップ名.
	ShopName OptNilString `json:"shop_name"`
	// ショップ名（カナ）.
	ShopNameKana OptNilString                           `json:"shop_name_kana"`
	ShopType     *NilTenantShopUpdatingResponseShopType `json:"shop_type"`
	// プラットフォームID.
	PlatformID OptString `json:"platform_id"`
	// プラットフォーム名.
	PlatformName OptNilString `json:"platform_name"`
	// 顧客情報共有フラグ
	// - `0`: 顧客情報を共有しない<br /><span
	// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
	// - `1`: 顧客情報を共有する<br /><span
	// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
	SharedCustomerFlag OptNilTenantShopUpdatingResponseSharedCustomerFlag `json:"shared_customer_flag"`
	// 顧客情報共有グループID\
	// fincodeは同じ顧客情報共有グループIDを持つショップ間で顧客情報を共有します。.
	CustomerGroupID OptNilString `json:"customer_group_id"`
	// 決済手段ごとに存在するプラットフォーム手数料設定のリスト.
	PlatformRateList []PlatformRateConfig `json:"platform_rate_list"`
	// 通知先メールアドレス.
	SendMailAddress OptNilString `json:"send_mail_address"`
	// ショップメールアドレス.
	ShopMailAddress OptNilString `json:"shop_mail_address"`
	// ログ保存日数.
	LogKeepDays OptNilString `json:"log_keep_days"`
	// APIバージョン.
	APIVersion OptNilString `json:"api_version"`
	// 管理画面におけるAPIキー表示フラグ。
	// - `0`: 表示しない
	// - `1`: 表示する.
	APIKeyDisplayFlag OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag `json:"api_key_display_flag"`
	Created           OptString                                         `json:"created"`
	Updated           *NilString                                        `json:"updated"`
}

// GetID returns the value of ID.
func (s *TenantShopUpdatingResponse) GetID() OptString {
	return s.ID
}

// GetShopName returns the value of ShopName.
func (s *TenantShopUpdatingResponse) GetShopName() OptNilString {
	return s.ShopName
}

// GetShopNameKana returns the value of ShopNameKana.
func (s *TenantShopUpdatingResponse) GetShopNameKana() OptNilString {
	return s.ShopNameKana
}

// GetShopType returns the value of ShopType.
func (s *TenantShopUpdatingResponse) GetShopType() *NilTenantShopUpdatingResponseShopType {
	return s.ShopType
}

// GetPlatformID returns the value of PlatformID.
func (s *TenantShopUpdatingResponse) GetPlatformID() OptString {
	return s.PlatformID
}

// GetPlatformName returns the value of PlatformName.
func (s *TenantShopUpdatingResponse) GetPlatformName() OptNilString {
	return s.PlatformName
}

// GetSharedCustomerFlag returns the value of SharedCustomerFlag.
func (s *TenantShopUpdatingResponse) GetSharedCustomerFlag() OptNilTenantShopUpdatingResponseSharedCustomerFlag {
	return s.SharedCustomerFlag
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *TenantShopUpdatingResponse) GetCustomerGroupID() OptNilString {
	return s.CustomerGroupID
}

// GetPlatformRateList returns the value of PlatformRateList.
func (s *TenantShopUpdatingResponse) GetPlatformRateList() []PlatformRateConfig {
	return s.PlatformRateList
}

// GetSendMailAddress returns the value of SendMailAddress.
func (s *TenantShopUpdatingResponse) GetSendMailAddress() OptNilString {
	return s.SendMailAddress
}

// GetShopMailAddress returns the value of ShopMailAddress.
func (s *TenantShopUpdatingResponse) GetShopMailAddress() OptNilString {
	return s.ShopMailAddress
}

// GetLogKeepDays returns the value of LogKeepDays.
func (s *TenantShopUpdatingResponse) GetLogKeepDays() OptNilString {
	return s.LogKeepDays
}

// GetAPIVersion returns the value of APIVersion.
func (s *TenantShopUpdatingResponse) GetAPIVersion() OptNilString {
	return s.APIVersion
}

// GetAPIKeyDisplayFlag returns the value of APIKeyDisplayFlag.
func (s *TenantShopUpdatingResponse) GetAPIKeyDisplayFlag() OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag {
	return s.APIKeyDisplayFlag
}

// GetCreated returns the value of Created.
func (s *TenantShopUpdatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *TenantShopUpdatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *TenantShopUpdatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetShopName sets the value of ShopName.
func (s *TenantShopUpdatingResponse) SetShopName(val OptNilString) {
	s.ShopName = val
}

// SetShopNameKana sets the value of ShopNameKana.
func (s *TenantShopUpdatingResponse) SetShopNameKana(val OptNilString) {
	s.ShopNameKana = val
}

// SetShopType sets the value of ShopType.
func (s *TenantShopUpdatingResponse) SetShopType(val *NilTenantShopUpdatingResponseShopType) {
	s.ShopType = val
}

// SetPlatformID sets the value of PlatformID.
func (s *TenantShopUpdatingResponse) SetPlatformID(val OptString) {
	s.PlatformID = val
}

// SetPlatformName sets the value of PlatformName.
func (s *TenantShopUpdatingResponse) SetPlatformName(val OptNilString) {
	s.PlatformName = val
}

// SetSharedCustomerFlag sets the value of SharedCustomerFlag.
func (s *TenantShopUpdatingResponse) SetSharedCustomerFlag(val OptNilTenantShopUpdatingResponseSharedCustomerFlag) {
	s.SharedCustomerFlag = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *TenantShopUpdatingResponse) SetCustomerGroupID(val OptNilString) {
	s.CustomerGroupID = val
}

// SetPlatformRateList sets the value of PlatformRateList.
func (s *TenantShopUpdatingResponse) SetPlatformRateList(val []PlatformRateConfig) {
	s.PlatformRateList = val
}

// SetSendMailAddress sets the value of SendMailAddress.
func (s *TenantShopUpdatingResponse) SetSendMailAddress(val OptNilString) {
	s.SendMailAddress = val
}

// SetShopMailAddress sets the value of ShopMailAddress.
func (s *TenantShopUpdatingResponse) SetShopMailAddress(val OptNilString) {
	s.ShopMailAddress = val
}

// SetLogKeepDays sets the value of LogKeepDays.
func (s *TenantShopUpdatingResponse) SetLogKeepDays(val OptNilString) {
	s.LogKeepDays = val
}

// SetAPIVersion sets the value of APIVersion.
func (s *TenantShopUpdatingResponse) SetAPIVersion(val OptNilString) {
	s.APIVersion = val
}

// SetAPIKeyDisplayFlag sets the value of APIKeyDisplayFlag.
func (s *TenantShopUpdatingResponse) SetAPIKeyDisplayFlag(val OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) {
	s.APIKeyDisplayFlag = val
}

// SetCreated sets the value of Created.
func (s *TenantShopUpdatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *TenantShopUpdatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*TenantShopUpdatingResponse) updateTenantShopRes() {}

// 管理画面におけるAPIキー表示フラグ。
// - `0`: 表示しない
// - `1`: 表示する.
type TenantShopUpdatingResponseAPIKeyDisplayFlag string

const (
	TenantShopUpdatingResponseAPIKeyDisplayFlag0 TenantShopUpdatingResponseAPIKeyDisplayFlag = "0"
	TenantShopUpdatingResponseAPIKeyDisplayFlag1 TenantShopUpdatingResponseAPIKeyDisplayFlag = "1"
)

// AllValues returns all TenantShopUpdatingResponseAPIKeyDisplayFlag values.
func (TenantShopUpdatingResponseAPIKeyDisplayFlag) AllValues() []TenantShopUpdatingResponseAPIKeyDisplayFlag {
	return []TenantShopUpdatingResponseAPIKeyDisplayFlag{
		TenantShopUpdatingResponseAPIKeyDisplayFlag0,
		TenantShopUpdatingResponseAPIKeyDisplayFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopUpdatingResponseAPIKeyDisplayFlag) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopUpdatingResponseAPIKeyDisplayFlag0:
		return []byte(s), nil
	case TenantShopUpdatingResponseAPIKeyDisplayFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopUpdatingResponseAPIKeyDisplayFlag) UnmarshalText(data []byte) error {
	switch TenantShopUpdatingResponseAPIKeyDisplayFlag(data) {
	case TenantShopUpdatingResponseAPIKeyDisplayFlag0:
		*s = TenantShopUpdatingResponseAPIKeyDisplayFlag0
		return nil
	case TenantShopUpdatingResponseAPIKeyDisplayFlag1:
		*s = TenantShopUpdatingResponseAPIKeyDisplayFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 顧客情報共有フラグ
// - `0`: 顧客情報を共有しない<br /><span
// class="smallText">顧客情報は各テナントごとに管理され、各テナントは自ショップに登録された顧客に対してのみ決済を行えます。</span>
// - `1`: 顧客情報を共有する<br /><span
// class="smallText">顧客情報はプラットフォーム全体で共有され、いずれのテナントもいずれの顧客に対し決済を行えます。</span>.
type TenantShopUpdatingResponseSharedCustomerFlag string

const (
	TenantShopUpdatingResponseSharedCustomerFlag0 TenantShopUpdatingResponseSharedCustomerFlag = "0"
	TenantShopUpdatingResponseSharedCustomerFlag1 TenantShopUpdatingResponseSharedCustomerFlag = "1"
)

// AllValues returns all TenantShopUpdatingResponseSharedCustomerFlag values.
func (TenantShopUpdatingResponseSharedCustomerFlag) AllValues() []TenantShopUpdatingResponseSharedCustomerFlag {
	return []TenantShopUpdatingResponseSharedCustomerFlag{
		TenantShopUpdatingResponseSharedCustomerFlag0,
		TenantShopUpdatingResponseSharedCustomerFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopUpdatingResponseSharedCustomerFlag) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopUpdatingResponseSharedCustomerFlag0:
		return []byte(s), nil
	case TenantShopUpdatingResponseSharedCustomerFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopUpdatingResponseSharedCustomerFlag) UnmarshalText(data []byte) error {
	switch TenantShopUpdatingResponseSharedCustomerFlag(data) {
	case TenantShopUpdatingResponseSharedCustomerFlag0:
		*s = TenantShopUpdatingResponseSharedCustomerFlag0
		return nil
	case TenantShopUpdatingResponseSharedCustomerFlag1:
		*s = TenantShopUpdatingResponseSharedCustomerFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ショップタイプ。
// - `(null)`: スタンダードショップ
// - `platform`: プラットフォームショップ
// - `tenant`: テナントショップ.
type TenantShopUpdatingResponseShopType string

const (
	TenantShopUpdatingResponseShopTypePlatform TenantShopUpdatingResponseShopType = "platform"
	TenantShopUpdatingResponseShopTypeTenant   TenantShopUpdatingResponseShopType = "tenant"
)

// AllValues returns all TenantShopUpdatingResponseShopType values.
func (TenantShopUpdatingResponseShopType) AllValues() []TenantShopUpdatingResponseShopType {
	return []TenantShopUpdatingResponseShopType{
		TenantShopUpdatingResponseShopTypePlatform,
		TenantShopUpdatingResponseShopTypeTenant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TenantShopUpdatingResponseShopType) MarshalText() ([]byte, error) {
	switch s {
	case TenantShopUpdatingResponseShopTypePlatform:
		return []byte(s), nil
	case TenantShopUpdatingResponseShopTypeTenant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TenantShopUpdatingResponseShopType) UnmarshalText(data []byte) error {
	switch TenantShopUpdatingResponseShopType(data) {
	case TenantShopUpdatingResponseShopTypePlatform:
		*s = TenantShopUpdatingResponseShopTypePlatform
		return nil
	case TenantShopUpdatingResponseShopTypeTenant:
		*s = TenantShopUpdatingResponseShopTypeTenant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Card
type WebhookEventCard struct {
	ShopID          OptString                      `json:"shop_id"`
	CustomerID      OptString                      `json:"customer_id"`
	CustomerGroupID *NilString                     `json:"customer_group_id"`
	CardID          OptString                      `json:"card_id"`
	DefaultFlag     OptWebhookEventCardDefaultFlag `json:"default_flag"`
	CardNoDisplay   OptString                      `json:"card_no_display"`
	ExpireDisplay   *NilString                     `json:"expire_display"`
	// 処理日時.
	ProcessDate OptString `json:"process_date"`
	// 処理タイプ
	// - `I`: 登録
	// - `U`: 更新.
	ProcessType OptWebhookEventCardProcessType `json:"process_type"`
	// 決済種別.
	PayType OptWebhookEventCardPayType `json:"pay_type"`
	Forward *NilString                 `json:"forward"`
	Event   OptWebhookEventCardEvent   `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventCard) GetShopID() OptString {
	return s.ShopID
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventCard) GetCustomerID() OptString {
	return s.CustomerID
}

// GetCustomerGroupID returns the value of CustomerGroupID.
func (s *WebhookEventCard) GetCustomerGroupID() *NilString {
	return s.CustomerGroupID
}

// GetCardID returns the value of CardID.
func (s *WebhookEventCard) GetCardID() OptString {
	return s.CardID
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *WebhookEventCard) GetDefaultFlag() OptWebhookEventCardDefaultFlag {
	return s.DefaultFlag
}

// GetCardNoDisplay returns the value of CardNoDisplay.
func (s *WebhookEventCard) GetCardNoDisplay() OptString {
	return s.CardNoDisplay
}

// GetExpireDisplay returns the value of ExpireDisplay.
func (s *WebhookEventCard) GetExpireDisplay() *NilString {
	return s.ExpireDisplay
}

// GetProcessDate returns the value of ProcessDate.
func (s *WebhookEventCard) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetProcessType returns the value of ProcessType.
func (s *WebhookEventCard) GetProcessType() OptWebhookEventCardProcessType {
	return s.ProcessType
}

// GetPayType returns the value of PayType.
func (s *WebhookEventCard) GetPayType() OptWebhookEventCardPayType {
	return s.PayType
}

// GetForward returns the value of Forward.
func (s *WebhookEventCard) GetForward() *NilString {
	return s.Forward
}

// GetEvent returns the value of Event.
func (s *WebhookEventCard) GetEvent() OptWebhookEventCardEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventCard) SetShopID(val OptString) {
	s.ShopID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventCard) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetCustomerGroupID sets the value of CustomerGroupID.
func (s *WebhookEventCard) SetCustomerGroupID(val *NilString) {
	s.CustomerGroupID = val
}

// SetCardID sets the value of CardID.
func (s *WebhookEventCard) SetCardID(val OptString) {
	s.CardID = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *WebhookEventCard) SetDefaultFlag(val OptWebhookEventCardDefaultFlag) {
	s.DefaultFlag = val
}

// SetCardNoDisplay sets the value of CardNoDisplay.
func (s *WebhookEventCard) SetCardNoDisplay(val OptString) {
	s.CardNoDisplay = val
}

// SetExpireDisplay sets the value of ExpireDisplay.
func (s *WebhookEventCard) SetExpireDisplay(val *NilString) {
	s.ExpireDisplay = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *WebhookEventCard) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetProcessType sets the value of ProcessType.
func (s *WebhookEventCard) SetProcessType(val OptWebhookEventCardProcessType) {
	s.ProcessType = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventCard) SetPayType(val OptWebhookEventCardPayType) {
	s.PayType = val
}

// SetForward sets the value of Forward.
func (s *WebhookEventCard) SetForward(val *NilString) {
	s.Forward = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventCard) SetEvent(val OptWebhookEventCardEvent) {
	s.Event = val
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type WebhookEventCardDefaultFlag string

const (
	WebhookEventCardDefaultFlag0 WebhookEventCardDefaultFlag = "0"
	WebhookEventCardDefaultFlag1 WebhookEventCardDefaultFlag = "1"
)

// AllValues returns all WebhookEventCardDefaultFlag values.
func (WebhookEventCardDefaultFlag) AllValues() []WebhookEventCardDefaultFlag {
	return []WebhookEventCardDefaultFlag{
		WebhookEventCardDefaultFlag0,
		WebhookEventCardDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCardDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCardDefaultFlag0:
		return []byte(s), nil
	case WebhookEventCardDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCardDefaultFlag) UnmarshalText(data []byte) error {
	switch WebhookEventCardDefaultFlag(data) {
	case WebhookEventCardDefaultFlag0:
		*s = WebhookEventCardDefaultFlag0
		return nil
	case WebhookEventCardDefaultFlag1:
		*s = WebhookEventCardDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventCardEvent string

const (
	WebhookEventCardEventPaymentsCardRegist                WebhookEventCardEvent = "payments.card.regist"
	WebhookEventCardEventPaymentsCardExec                  WebhookEventCardEvent = "payments.card.exec"
	WebhookEventCardEventPaymentsCardCapture               WebhookEventCardEvent = "payments.card.capture"
	WebhookEventCardEventPaymentsCardCancel                WebhookEventCardEvent = "payments.card.cancel"
	WebhookEventCardEventPaymentsCardAuth                  WebhookEventCardEvent = "payments.card.auth"
	WebhookEventCardEventPaymentsCardChange                WebhookEventCardEvent = "payments.card.change"
	WebhookEventCardEventPaymentsCardSecure2Authenticate   WebhookEventCardEvent = "payments.card.secure2.authenticate"
	WebhookEventCardEventPaymentsCardSecure2Result         WebhookEventCardEvent = "payments.card.secure2.result"
	WebhookEventCardEventPaymentsCardSecure                WebhookEventCardEvent = "payments.card.secure"
	WebhookEventCardEventPaymentsApplepayRegist            WebhookEventCardEvent = "payments.applepay.regist"
	WebhookEventCardEventPaymentsApplepayExec              WebhookEventCardEvent = "payments.applepay.exec"
	WebhookEventCardEventPaymentsApplepayCapture           WebhookEventCardEvent = "payments.applepay.capture"
	WebhookEventCardEventPaymentsApplepayCancel            WebhookEventCardEvent = "payments.applepay.cancel"
	WebhookEventCardEventPaymentsKonbiniRegist             WebhookEventCardEvent = "payments.konbini.regist"
	WebhookEventCardEventPaymentsKonbiniExec               WebhookEventCardEvent = "payments.konbini.exec"
	WebhookEventCardEventPaymentsKonbiniCancel             WebhookEventCardEvent = "payments.konbini.cancel"
	WebhookEventCardEventPaymentsKonbiniComplete           WebhookEventCardEvent = "payments.konbini.complete"
	WebhookEventCardEventPaymentsKonbiniCompleteStub       WebhookEventCardEvent = "payments.konbini.complete.stub"
	WebhookEventCardEventPaymentsKonbiniExpiredUpdateBatch WebhookEventCardEvent = "payments.konbini.expired.update.batch"
	WebhookEventCardEventPaymentsPaypayRegist              WebhookEventCardEvent = "payments.paypay.regist"
	WebhookEventCardEventPaymentsPaypayExec                WebhookEventCardEvent = "payments.paypay.exec"
	WebhookEventCardEventPaymentsPaypayCapture             WebhookEventCardEvent = "payments.paypay.capture"
	WebhookEventCardEventPaymentsPaypayCancel              WebhookEventCardEvent = "payments.paypay.cancel"
	WebhookEventCardEventPaymentsPaypayChange              WebhookEventCardEvent = "payments.paypay.change"
	WebhookEventCardEventPaymentsPaypayComplete            WebhookEventCardEvent = "payments.paypay.complete"
	WebhookEventCardEventPaymentsDirectdebitRegist         WebhookEventCardEvent = "payments.directdebit.regist"
	WebhookEventCardEventPaymentsDirectdebitExec           WebhookEventCardEvent = "payments.directdebit.exec"
	WebhookEventCardEventPaymentsDirectdebitCancel         WebhookEventCardEvent = "payments.directdebit.cancel"
	WebhookEventCardEventPaymentsDirectdebitChange         WebhookEventCardEvent = "payments.directdebit.change"
	WebhookEventCardEventPaymentsDirectdebitComplete       WebhookEventCardEvent = "payments.directdebit.complete"
	WebhookEventCardEventPaymentsDirectdebitCompleteStub   WebhookEventCardEvent = "payments.directdebit.complete.stub"
	WebhookEventCardEventCustomersPaymentMethodsUpdated    WebhookEventCardEvent = "customers.payment_methods.updated"
	WebhookEventCardEventCardRegist                        WebhookEventCardEvent = "card.regist"
	WebhookEventCardEventCardUpdate                        WebhookEventCardEvent = "card.update"
	WebhookEventCardEventSubscriptionCardRegist            WebhookEventCardEvent = "subscription.card.regist"
	WebhookEventCardEventSubscriptionCardDelete            WebhookEventCardEvent = "subscription.card.delete"
	WebhookEventCardEventSubscriptionCardUpdate            WebhookEventCardEvent = "subscription.card.update"
	WebhookEventCardEventRecurringCardBatch                WebhookEventCardEvent = "recurring.card.batch"
	WebhookEventCardEventSubscriptionDirectdebitRegist     WebhookEventCardEvent = "subscription.directdebit.regist"
	WebhookEventCardEventSubscriptionDirectdebitDelete     WebhookEventCardEvent = "subscription.directdebit.delete"
	WebhookEventCardEventSubscriptionDirectdebitUpdate     WebhookEventCardEvent = "subscription.directdebit.update"
	WebhookEventCardEventRecurringDirectdebitBatch         WebhookEventCardEvent = "recurring.directdebit.batch"
	WebhookEventCardEventPaymentsBulkCardRegist            WebhookEventCardEvent = "payments.bulk.card.regist"
	WebhookEventCardEventPaymentsBulkCardBatch             WebhookEventCardEvent = "payments.bulk.card.batch"
	WebhookEventCardEventContractsStatusCodeUpdated        WebhookEventCardEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventCardEvent values.
func (WebhookEventCardEvent) AllValues() []WebhookEventCardEvent {
	return []WebhookEventCardEvent{
		WebhookEventCardEventPaymentsCardRegist,
		WebhookEventCardEventPaymentsCardExec,
		WebhookEventCardEventPaymentsCardCapture,
		WebhookEventCardEventPaymentsCardCancel,
		WebhookEventCardEventPaymentsCardAuth,
		WebhookEventCardEventPaymentsCardChange,
		WebhookEventCardEventPaymentsCardSecure2Authenticate,
		WebhookEventCardEventPaymentsCardSecure2Result,
		WebhookEventCardEventPaymentsCardSecure,
		WebhookEventCardEventPaymentsApplepayRegist,
		WebhookEventCardEventPaymentsApplepayExec,
		WebhookEventCardEventPaymentsApplepayCapture,
		WebhookEventCardEventPaymentsApplepayCancel,
		WebhookEventCardEventPaymentsKonbiniRegist,
		WebhookEventCardEventPaymentsKonbiniExec,
		WebhookEventCardEventPaymentsKonbiniCancel,
		WebhookEventCardEventPaymentsKonbiniComplete,
		WebhookEventCardEventPaymentsKonbiniCompleteStub,
		WebhookEventCardEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventCardEventPaymentsPaypayRegist,
		WebhookEventCardEventPaymentsPaypayExec,
		WebhookEventCardEventPaymentsPaypayCapture,
		WebhookEventCardEventPaymentsPaypayCancel,
		WebhookEventCardEventPaymentsPaypayChange,
		WebhookEventCardEventPaymentsPaypayComplete,
		WebhookEventCardEventPaymentsDirectdebitRegist,
		WebhookEventCardEventPaymentsDirectdebitExec,
		WebhookEventCardEventPaymentsDirectdebitCancel,
		WebhookEventCardEventPaymentsDirectdebitChange,
		WebhookEventCardEventPaymentsDirectdebitComplete,
		WebhookEventCardEventPaymentsDirectdebitCompleteStub,
		WebhookEventCardEventCustomersPaymentMethodsUpdated,
		WebhookEventCardEventCardRegist,
		WebhookEventCardEventCardUpdate,
		WebhookEventCardEventSubscriptionCardRegist,
		WebhookEventCardEventSubscriptionCardDelete,
		WebhookEventCardEventSubscriptionCardUpdate,
		WebhookEventCardEventRecurringCardBatch,
		WebhookEventCardEventSubscriptionDirectdebitRegist,
		WebhookEventCardEventSubscriptionDirectdebitDelete,
		WebhookEventCardEventSubscriptionDirectdebitUpdate,
		WebhookEventCardEventRecurringDirectdebitBatch,
		WebhookEventCardEventPaymentsBulkCardRegist,
		WebhookEventCardEventPaymentsBulkCardBatch,
		WebhookEventCardEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCardEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCardEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventCardEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventCardEventCardRegist:
		return []byte(s), nil
	case WebhookEventCardEventCardUpdate:
		return []byte(s), nil
	case WebhookEventCardEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventCardEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventCardEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventCardEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventCardEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventCardEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventCardEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventCardEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventCardEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventCardEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCardEvent) UnmarshalText(data []byte) error {
	switch WebhookEventCardEvent(data) {
	case WebhookEventCardEventPaymentsCardRegist:
		*s = WebhookEventCardEventPaymentsCardRegist
		return nil
	case WebhookEventCardEventPaymentsCardExec:
		*s = WebhookEventCardEventPaymentsCardExec
		return nil
	case WebhookEventCardEventPaymentsCardCapture:
		*s = WebhookEventCardEventPaymentsCardCapture
		return nil
	case WebhookEventCardEventPaymentsCardCancel:
		*s = WebhookEventCardEventPaymentsCardCancel
		return nil
	case WebhookEventCardEventPaymentsCardAuth:
		*s = WebhookEventCardEventPaymentsCardAuth
		return nil
	case WebhookEventCardEventPaymentsCardChange:
		*s = WebhookEventCardEventPaymentsCardChange
		return nil
	case WebhookEventCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventCardEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventCardEventPaymentsCardSecure2Result:
		*s = WebhookEventCardEventPaymentsCardSecure2Result
		return nil
	case WebhookEventCardEventPaymentsCardSecure:
		*s = WebhookEventCardEventPaymentsCardSecure
		return nil
	case WebhookEventCardEventPaymentsApplepayRegist:
		*s = WebhookEventCardEventPaymentsApplepayRegist
		return nil
	case WebhookEventCardEventPaymentsApplepayExec:
		*s = WebhookEventCardEventPaymentsApplepayExec
		return nil
	case WebhookEventCardEventPaymentsApplepayCapture:
		*s = WebhookEventCardEventPaymentsApplepayCapture
		return nil
	case WebhookEventCardEventPaymentsApplepayCancel:
		*s = WebhookEventCardEventPaymentsApplepayCancel
		return nil
	case WebhookEventCardEventPaymentsKonbiniRegist:
		*s = WebhookEventCardEventPaymentsKonbiniRegist
		return nil
	case WebhookEventCardEventPaymentsKonbiniExec:
		*s = WebhookEventCardEventPaymentsKonbiniExec
		return nil
	case WebhookEventCardEventPaymentsKonbiniCancel:
		*s = WebhookEventCardEventPaymentsKonbiniCancel
		return nil
	case WebhookEventCardEventPaymentsKonbiniComplete:
		*s = WebhookEventCardEventPaymentsKonbiniComplete
		return nil
	case WebhookEventCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventCardEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventCardEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventCardEventPaymentsPaypayRegist:
		*s = WebhookEventCardEventPaymentsPaypayRegist
		return nil
	case WebhookEventCardEventPaymentsPaypayExec:
		*s = WebhookEventCardEventPaymentsPaypayExec
		return nil
	case WebhookEventCardEventPaymentsPaypayCapture:
		*s = WebhookEventCardEventPaymentsPaypayCapture
		return nil
	case WebhookEventCardEventPaymentsPaypayCancel:
		*s = WebhookEventCardEventPaymentsPaypayCancel
		return nil
	case WebhookEventCardEventPaymentsPaypayChange:
		*s = WebhookEventCardEventPaymentsPaypayChange
		return nil
	case WebhookEventCardEventPaymentsPaypayComplete:
		*s = WebhookEventCardEventPaymentsPaypayComplete
		return nil
	case WebhookEventCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventCardEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventCardEventPaymentsDirectdebitExec:
		*s = WebhookEventCardEventPaymentsDirectdebitExec
		return nil
	case WebhookEventCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventCardEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventCardEventPaymentsDirectdebitChange:
		*s = WebhookEventCardEventPaymentsDirectdebitChange
		return nil
	case WebhookEventCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventCardEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventCardEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventCardEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventCardEventCardRegist:
		*s = WebhookEventCardEventCardRegist
		return nil
	case WebhookEventCardEventCardUpdate:
		*s = WebhookEventCardEventCardUpdate
		return nil
	case WebhookEventCardEventSubscriptionCardRegist:
		*s = WebhookEventCardEventSubscriptionCardRegist
		return nil
	case WebhookEventCardEventSubscriptionCardDelete:
		*s = WebhookEventCardEventSubscriptionCardDelete
		return nil
	case WebhookEventCardEventSubscriptionCardUpdate:
		*s = WebhookEventCardEventSubscriptionCardUpdate
		return nil
	case WebhookEventCardEventRecurringCardBatch:
		*s = WebhookEventCardEventRecurringCardBatch
		return nil
	case WebhookEventCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventCardEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventCardEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventCardEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventCardEventRecurringDirectdebitBatch:
		*s = WebhookEventCardEventRecurringDirectdebitBatch
		return nil
	case WebhookEventCardEventPaymentsBulkCardRegist:
		*s = WebhookEventCardEventPaymentsBulkCardRegist
		return nil
	case WebhookEventCardEventPaymentsBulkCardBatch:
		*s = WebhookEventCardEventPaymentsBulkCardBatch
		return nil
	case WebhookEventCardEventContractsStatusCodeUpdated:
		*s = WebhookEventCardEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別.
type WebhookEventCardPayType string

const (
	WebhookEventCardPayTypeCard WebhookEventCardPayType = "Card"
)

// AllValues returns all WebhookEventCardPayType values.
func (WebhookEventCardPayType) AllValues() []WebhookEventCardPayType {
	return []WebhookEventCardPayType{
		WebhookEventCardPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCardPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCardPayType) UnmarshalText(data []byte) error {
	switch WebhookEventCardPayType(data) {
	case WebhookEventCardPayTypeCard:
		*s = WebhookEventCardPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 処理タイプ
// - `I`: 登録
// - `U`: 更新.
type WebhookEventCardProcessType string

const (
	WebhookEventCardProcessTypeI WebhookEventCardProcessType = "I"
	WebhookEventCardProcessTypeU WebhookEventCardProcessType = "U"
)

// AllValues returns all WebhookEventCardProcessType values.
func (WebhookEventCardProcessType) AllValues() []WebhookEventCardProcessType {
	return []WebhookEventCardProcessType{
		WebhookEventCardProcessTypeI,
		WebhookEventCardProcessTypeU,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCardProcessType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCardProcessTypeI:
		return []byte(s), nil
	case WebhookEventCardProcessTypeU:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCardProcessType) UnmarshalText(data []byte) error {
	switch WebhookEventCardProcessType(data) {
	case WebhookEventCardProcessTypeI:
		*s = WebhookEventCardProcessTypeI
		return nil
	case WebhookEventCardProcessTypeU:
		*s = WebhookEventCardProcessTypeU
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Contract
type WebhookEventContract struct {
	ShopID OptString                    `json:"shop_id"`
	Event  OptWebhookEventContractEvent `json:"event"`
	// 決済手段 契約状況リスト\
	// \
	// 決済手段の種別とその契約ステータスを含むオブジェクトの配列です。.
	Body []WebhookEventContractBodyItem `json:"body"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventContract) GetShopID() OptString {
	return s.ShopID
}

// GetEvent returns the value of Event.
func (s *WebhookEventContract) GetEvent() OptWebhookEventContractEvent {
	return s.Event
}

// GetBody returns the value of Body.
func (s *WebhookEventContract) GetBody() []WebhookEventContractBodyItem {
	return s.Body
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventContract) SetShopID(val OptString) {
	s.ShopID = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventContract) SetEvent(val OptWebhookEventContractEvent) {
	s.Event = val
}

// SetBody sets the value of Body.
func (s *WebhookEventContract) SetBody(val []WebhookEventContractBodyItem) {
	s.Body = val
}

type WebhookEventContractBodyItem struct {
	Acquirer OptWebhookEventContractBodyItemAcquirer `json:"acquirer"`
	// 審査対象（和名）
	// - `決済事業者審査: VISA/MASTER-UC`
	// - `決済事業者審査: VISA/MASTER-TFC`
	// - `決済事業者審査: JCB/AMEX`
	// - `決済事業者審査: DINERS`
	// - `決済事業者審査: ApplePay-UC`
	// - `決済事業者審査: ApplePay-JCB/AMEX`
	// - `決済事業者審査: コンビニ決済`
	// - `決済事業者審査: PayPay決済`
	// - `決済事業者審査: 口座振替決済`.
	ExaminationTask OptString                                 `json:"examination_task"`
	StatusCode      OptWebhookEventContractBodyItemStatusCode `json:"status_code"`
	// 決済事業者 契約ステータス（和名）
	// - `申込なし`
	// - `審査受付`
	// - `審査待ち`
	// - `審査中`
	// - `審査保留中`
	// - `審査OK`
	// - `利用可能`
	// - `審査NG`
	// - `申込中止`.
	Status OptString `json:"status"`
	// 更新の有無\
	// \
	// 更新があった場合は `true`になります。.
	IsUpdated OptBool `json:"is_updated"`
}

// GetAcquirer returns the value of Acquirer.
func (s *WebhookEventContractBodyItem) GetAcquirer() OptWebhookEventContractBodyItemAcquirer {
	return s.Acquirer
}

// GetExaminationTask returns the value of ExaminationTask.
func (s *WebhookEventContractBodyItem) GetExaminationTask() OptString {
	return s.ExaminationTask
}

// GetStatusCode returns the value of StatusCode.
func (s *WebhookEventContractBodyItem) GetStatusCode() OptWebhookEventContractBodyItemStatusCode {
	return s.StatusCode
}

// GetStatus returns the value of Status.
func (s *WebhookEventContractBodyItem) GetStatus() OptString {
	return s.Status
}

// GetIsUpdated returns the value of IsUpdated.
func (s *WebhookEventContractBodyItem) GetIsUpdated() OptBool {
	return s.IsUpdated
}

// SetAcquirer sets the value of Acquirer.
func (s *WebhookEventContractBodyItem) SetAcquirer(val OptWebhookEventContractBodyItemAcquirer) {
	s.Acquirer = val
}

// SetExaminationTask sets the value of ExaminationTask.
func (s *WebhookEventContractBodyItem) SetExaminationTask(val OptString) {
	s.ExaminationTask = val
}

// SetStatusCode sets the value of StatusCode.
func (s *WebhookEventContractBodyItem) SetStatusCode(val OptWebhookEventContractBodyItemStatusCode) {
	s.StatusCode = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventContractBodyItem) SetStatus(val OptString) {
	s.Status = val
}

// SetIsUpdated sets the value of IsUpdated.
func (s *WebhookEventContractBodyItem) SetIsUpdated(val OptBool) {
	s.IsUpdated = val
}

// 審査対象
// - `UC`: VISA／Mastercard（UCカード）
// - `TFC`: VISA／Mastercard（トヨタファイナンス）
// - `JCB/AMEX`: JCB／AMEX（JCB）
// - `DINERS`: DINERS（JCB）
// - `APPLE PAY UC`: Apple Pay（UCカード）
// - `APPLE PAY JCB/AMEX`: Apple Pay（JCB）
// - `PAYSLE`: コンビニ決済（電算システム）
// - `PAYPAY`: コンビニ決済（PayPay）
// - `DIRECT DEBIT`: 口座振替（SMBCファイナンスサービス）.
type WebhookEventContractBodyItemAcquirer string

const (
	WebhookEventContractBodyItemAcquirerUC              WebhookEventContractBodyItemAcquirer = "UC"
	WebhookEventContractBodyItemAcquirerTFC             WebhookEventContractBodyItemAcquirer = "TFC"
	WebhookEventContractBodyItemAcquirerJCBAMEX         WebhookEventContractBodyItemAcquirer = "JCB/AMEX"
	WebhookEventContractBodyItemAcquirerDINERS          WebhookEventContractBodyItemAcquirer = "DINERS"
	WebhookEventContractBodyItemAcquirerAPPLEPAYUC      WebhookEventContractBodyItemAcquirer = "APPLE PAY UC"
	WebhookEventContractBodyItemAcquirerAPPLEPAYJCBAMEX WebhookEventContractBodyItemAcquirer = "APPLE PAY JCB/AMEX"
	WebhookEventContractBodyItemAcquirerPAYSLE          WebhookEventContractBodyItemAcquirer = "PAYSLE"
	WebhookEventContractBodyItemAcquirerPAYPAY          WebhookEventContractBodyItemAcquirer = "PAYPAY"
	WebhookEventContractBodyItemAcquirerDIRECTDEBIT     WebhookEventContractBodyItemAcquirer = "DIRECT DEBIT"
)

// AllValues returns all WebhookEventContractBodyItemAcquirer values.
func (WebhookEventContractBodyItemAcquirer) AllValues() []WebhookEventContractBodyItemAcquirer {
	return []WebhookEventContractBodyItemAcquirer{
		WebhookEventContractBodyItemAcquirerUC,
		WebhookEventContractBodyItemAcquirerTFC,
		WebhookEventContractBodyItemAcquirerJCBAMEX,
		WebhookEventContractBodyItemAcquirerDINERS,
		WebhookEventContractBodyItemAcquirerAPPLEPAYUC,
		WebhookEventContractBodyItemAcquirerAPPLEPAYJCBAMEX,
		WebhookEventContractBodyItemAcquirerPAYSLE,
		WebhookEventContractBodyItemAcquirerPAYPAY,
		WebhookEventContractBodyItemAcquirerDIRECTDEBIT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventContractBodyItemAcquirer) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventContractBodyItemAcquirerUC:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerTFC:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerJCBAMEX:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerDINERS:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerAPPLEPAYUC:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerAPPLEPAYJCBAMEX:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerPAYSLE:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerPAYPAY:
		return []byte(s), nil
	case WebhookEventContractBodyItemAcquirerDIRECTDEBIT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventContractBodyItemAcquirer) UnmarshalText(data []byte) error {
	switch WebhookEventContractBodyItemAcquirer(data) {
	case WebhookEventContractBodyItemAcquirerUC:
		*s = WebhookEventContractBodyItemAcquirerUC
		return nil
	case WebhookEventContractBodyItemAcquirerTFC:
		*s = WebhookEventContractBodyItemAcquirerTFC
		return nil
	case WebhookEventContractBodyItemAcquirerJCBAMEX:
		*s = WebhookEventContractBodyItemAcquirerJCBAMEX
		return nil
	case WebhookEventContractBodyItemAcquirerDINERS:
		*s = WebhookEventContractBodyItemAcquirerDINERS
		return nil
	case WebhookEventContractBodyItemAcquirerAPPLEPAYUC:
		*s = WebhookEventContractBodyItemAcquirerAPPLEPAYUC
		return nil
	case WebhookEventContractBodyItemAcquirerAPPLEPAYJCBAMEX:
		*s = WebhookEventContractBodyItemAcquirerAPPLEPAYJCBAMEX
		return nil
	case WebhookEventContractBodyItemAcquirerPAYSLE:
		*s = WebhookEventContractBodyItemAcquirerPAYSLE
		return nil
	case WebhookEventContractBodyItemAcquirerPAYPAY:
		*s = WebhookEventContractBodyItemAcquirerPAYPAY
		return nil
	case WebhookEventContractBodyItemAcquirerDIRECTDEBIT:
		*s = WebhookEventContractBodyItemAcquirerDIRECTDEBIT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済事業者 契約ステータス
// - `701`: 申込なし<br /><span
// class="smallText">まだこの決済手段を利用申請していません</span>
// - `702`: 審査受付<br /><span
// class="smallText">fincodeが審査を受け付けました。まだこの決済手段は利用できません。</span>
// - `703`: 審査待ち<br /><span
// class="smallText">fincodeによる審査開始を待っています。まだこの決済手段は利用できません。</span>
// - `704`: 審査中<br /><span
// class="smallText">fincodeによる審査中です。まだこの決済手段は利用できません。</span>
// - `705`: 審査保留中<br /><span
// class="smallText">審査の過程で保留中が発生しました。まだこの決済手段は利用できません。</span>
// - `706`: 審査OK<br /><span
// class="smallText">fincodeによる審査の結果OKとなりました。まだこの決済手段は利用できません。</span>
// - `707`: 利用可能<br /><span
// class="smallText">この決済手段は利用可能です。</span>
// - `708`: 審査NG<br /><span
// class="smallText">fincodeによる審査の結果NGとなりました。この決済手段は利用できません。</span>
// - `709`: 申込中止<br /><span
// class="smallText">この決済手段の利用申請を中止しました。</span>.
type WebhookEventContractBodyItemStatusCode string

const (
	WebhookEventContractBodyItemStatusCode701 WebhookEventContractBodyItemStatusCode = "701"
	WebhookEventContractBodyItemStatusCode702 WebhookEventContractBodyItemStatusCode = "702"
	WebhookEventContractBodyItemStatusCode703 WebhookEventContractBodyItemStatusCode = "703"
	WebhookEventContractBodyItemStatusCode704 WebhookEventContractBodyItemStatusCode = "704"
	WebhookEventContractBodyItemStatusCode705 WebhookEventContractBodyItemStatusCode = "705"
	WebhookEventContractBodyItemStatusCode706 WebhookEventContractBodyItemStatusCode = "706"
	WebhookEventContractBodyItemStatusCode707 WebhookEventContractBodyItemStatusCode = "707"
	WebhookEventContractBodyItemStatusCode708 WebhookEventContractBodyItemStatusCode = "708"
	WebhookEventContractBodyItemStatusCode709 WebhookEventContractBodyItemStatusCode = "709"
)

// AllValues returns all WebhookEventContractBodyItemStatusCode values.
func (WebhookEventContractBodyItemStatusCode) AllValues() []WebhookEventContractBodyItemStatusCode {
	return []WebhookEventContractBodyItemStatusCode{
		WebhookEventContractBodyItemStatusCode701,
		WebhookEventContractBodyItemStatusCode702,
		WebhookEventContractBodyItemStatusCode703,
		WebhookEventContractBodyItemStatusCode704,
		WebhookEventContractBodyItemStatusCode705,
		WebhookEventContractBodyItemStatusCode706,
		WebhookEventContractBodyItemStatusCode707,
		WebhookEventContractBodyItemStatusCode708,
		WebhookEventContractBodyItemStatusCode709,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventContractBodyItemStatusCode) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventContractBodyItemStatusCode701:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode702:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode703:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode704:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode705:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode706:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode707:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode708:
		return []byte(s), nil
	case WebhookEventContractBodyItemStatusCode709:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventContractBodyItemStatusCode) UnmarshalText(data []byte) error {
	switch WebhookEventContractBodyItemStatusCode(data) {
	case WebhookEventContractBodyItemStatusCode701:
		*s = WebhookEventContractBodyItemStatusCode701
		return nil
	case WebhookEventContractBodyItemStatusCode702:
		*s = WebhookEventContractBodyItemStatusCode702
		return nil
	case WebhookEventContractBodyItemStatusCode703:
		*s = WebhookEventContractBodyItemStatusCode703
		return nil
	case WebhookEventContractBodyItemStatusCode704:
		*s = WebhookEventContractBodyItemStatusCode704
		return nil
	case WebhookEventContractBodyItemStatusCode705:
		*s = WebhookEventContractBodyItemStatusCode705
		return nil
	case WebhookEventContractBodyItemStatusCode706:
		*s = WebhookEventContractBodyItemStatusCode706
		return nil
	case WebhookEventContractBodyItemStatusCode707:
		*s = WebhookEventContractBodyItemStatusCode707
		return nil
	case WebhookEventContractBodyItemStatusCode708:
		*s = WebhookEventContractBodyItemStatusCode708
		return nil
	case WebhookEventContractBodyItemStatusCode709:
		*s = WebhookEventContractBodyItemStatusCode709
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventContractEvent string

const (
	WebhookEventContractEventPaymentsCardRegist                WebhookEventContractEvent = "payments.card.regist"
	WebhookEventContractEventPaymentsCardExec                  WebhookEventContractEvent = "payments.card.exec"
	WebhookEventContractEventPaymentsCardCapture               WebhookEventContractEvent = "payments.card.capture"
	WebhookEventContractEventPaymentsCardCancel                WebhookEventContractEvent = "payments.card.cancel"
	WebhookEventContractEventPaymentsCardAuth                  WebhookEventContractEvent = "payments.card.auth"
	WebhookEventContractEventPaymentsCardChange                WebhookEventContractEvent = "payments.card.change"
	WebhookEventContractEventPaymentsCardSecure2Authenticate   WebhookEventContractEvent = "payments.card.secure2.authenticate"
	WebhookEventContractEventPaymentsCardSecure2Result         WebhookEventContractEvent = "payments.card.secure2.result"
	WebhookEventContractEventPaymentsCardSecure                WebhookEventContractEvent = "payments.card.secure"
	WebhookEventContractEventPaymentsApplepayRegist            WebhookEventContractEvent = "payments.applepay.regist"
	WebhookEventContractEventPaymentsApplepayExec              WebhookEventContractEvent = "payments.applepay.exec"
	WebhookEventContractEventPaymentsApplepayCapture           WebhookEventContractEvent = "payments.applepay.capture"
	WebhookEventContractEventPaymentsApplepayCancel            WebhookEventContractEvent = "payments.applepay.cancel"
	WebhookEventContractEventPaymentsKonbiniRegist             WebhookEventContractEvent = "payments.konbini.regist"
	WebhookEventContractEventPaymentsKonbiniExec               WebhookEventContractEvent = "payments.konbini.exec"
	WebhookEventContractEventPaymentsKonbiniCancel             WebhookEventContractEvent = "payments.konbini.cancel"
	WebhookEventContractEventPaymentsKonbiniComplete           WebhookEventContractEvent = "payments.konbini.complete"
	WebhookEventContractEventPaymentsKonbiniCompleteStub       WebhookEventContractEvent = "payments.konbini.complete.stub"
	WebhookEventContractEventPaymentsKonbiniExpiredUpdateBatch WebhookEventContractEvent = "payments.konbini.expired.update.batch"
	WebhookEventContractEventPaymentsPaypayRegist              WebhookEventContractEvent = "payments.paypay.regist"
	WebhookEventContractEventPaymentsPaypayExec                WebhookEventContractEvent = "payments.paypay.exec"
	WebhookEventContractEventPaymentsPaypayCapture             WebhookEventContractEvent = "payments.paypay.capture"
	WebhookEventContractEventPaymentsPaypayCancel              WebhookEventContractEvent = "payments.paypay.cancel"
	WebhookEventContractEventPaymentsPaypayChange              WebhookEventContractEvent = "payments.paypay.change"
	WebhookEventContractEventPaymentsPaypayComplete            WebhookEventContractEvent = "payments.paypay.complete"
	WebhookEventContractEventPaymentsDirectdebitRegist         WebhookEventContractEvent = "payments.directdebit.regist"
	WebhookEventContractEventPaymentsDirectdebitExec           WebhookEventContractEvent = "payments.directdebit.exec"
	WebhookEventContractEventPaymentsDirectdebitCancel         WebhookEventContractEvent = "payments.directdebit.cancel"
	WebhookEventContractEventPaymentsDirectdebitChange         WebhookEventContractEvent = "payments.directdebit.change"
	WebhookEventContractEventPaymentsDirectdebitComplete       WebhookEventContractEvent = "payments.directdebit.complete"
	WebhookEventContractEventPaymentsDirectdebitCompleteStub   WebhookEventContractEvent = "payments.directdebit.complete.stub"
	WebhookEventContractEventCustomersPaymentMethodsUpdated    WebhookEventContractEvent = "customers.payment_methods.updated"
	WebhookEventContractEventCardRegist                        WebhookEventContractEvent = "card.regist"
	WebhookEventContractEventCardUpdate                        WebhookEventContractEvent = "card.update"
	WebhookEventContractEventSubscriptionCardRegist            WebhookEventContractEvent = "subscription.card.regist"
	WebhookEventContractEventSubscriptionCardDelete            WebhookEventContractEvent = "subscription.card.delete"
	WebhookEventContractEventSubscriptionCardUpdate            WebhookEventContractEvent = "subscription.card.update"
	WebhookEventContractEventRecurringCardBatch                WebhookEventContractEvent = "recurring.card.batch"
	WebhookEventContractEventSubscriptionDirectdebitRegist     WebhookEventContractEvent = "subscription.directdebit.regist"
	WebhookEventContractEventSubscriptionDirectdebitDelete     WebhookEventContractEvent = "subscription.directdebit.delete"
	WebhookEventContractEventSubscriptionDirectdebitUpdate     WebhookEventContractEvent = "subscription.directdebit.update"
	WebhookEventContractEventRecurringDirectdebitBatch         WebhookEventContractEvent = "recurring.directdebit.batch"
	WebhookEventContractEventPaymentsBulkCardRegist            WebhookEventContractEvent = "payments.bulk.card.regist"
	WebhookEventContractEventPaymentsBulkCardBatch             WebhookEventContractEvent = "payments.bulk.card.batch"
	WebhookEventContractEventContractsStatusCodeUpdated        WebhookEventContractEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventContractEvent values.
func (WebhookEventContractEvent) AllValues() []WebhookEventContractEvent {
	return []WebhookEventContractEvent{
		WebhookEventContractEventPaymentsCardRegist,
		WebhookEventContractEventPaymentsCardExec,
		WebhookEventContractEventPaymentsCardCapture,
		WebhookEventContractEventPaymentsCardCancel,
		WebhookEventContractEventPaymentsCardAuth,
		WebhookEventContractEventPaymentsCardChange,
		WebhookEventContractEventPaymentsCardSecure2Authenticate,
		WebhookEventContractEventPaymentsCardSecure2Result,
		WebhookEventContractEventPaymentsCardSecure,
		WebhookEventContractEventPaymentsApplepayRegist,
		WebhookEventContractEventPaymentsApplepayExec,
		WebhookEventContractEventPaymentsApplepayCapture,
		WebhookEventContractEventPaymentsApplepayCancel,
		WebhookEventContractEventPaymentsKonbiniRegist,
		WebhookEventContractEventPaymentsKonbiniExec,
		WebhookEventContractEventPaymentsKonbiniCancel,
		WebhookEventContractEventPaymentsKonbiniComplete,
		WebhookEventContractEventPaymentsKonbiniCompleteStub,
		WebhookEventContractEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventContractEventPaymentsPaypayRegist,
		WebhookEventContractEventPaymentsPaypayExec,
		WebhookEventContractEventPaymentsPaypayCapture,
		WebhookEventContractEventPaymentsPaypayCancel,
		WebhookEventContractEventPaymentsPaypayChange,
		WebhookEventContractEventPaymentsPaypayComplete,
		WebhookEventContractEventPaymentsDirectdebitRegist,
		WebhookEventContractEventPaymentsDirectdebitExec,
		WebhookEventContractEventPaymentsDirectdebitCancel,
		WebhookEventContractEventPaymentsDirectdebitChange,
		WebhookEventContractEventPaymentsDirectdebitComplete,
		WebhookEventContractEventPaymentsDirectdebitCompleteStub,
		WebhookEventContractEventCustomersPaymentMethodsUpdated,
		WebhookEventContractEventCardRegist,
		WebhookEventContractEventCardUpdate,
		WebhookEventContractEventSubscriptionCardRegist,
		WebhookEventContractEventSubscriptionCardDelete,
		WebhookEventContractEventSubscriptionCardUpdate,
		WebhookEventContractEventRecurringCardBatch,
		WebhookEventContractEventSubscriptionDirectdebitRegist,
		WebhookEventContractEventSubscriptionDirectdebitDelete,
		WebhookEventContractEventSubscriptionDirectdebitUpdate,
		WebhookEventContractEventRecurringDirectdebitBatch,
		WebhookEventContractEventPaymentsBulkCardRegist,
		WebhookEventContractEventPaymentsBulkCardBatch,
		WebhookEventContractEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventContractEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventContractEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventContractEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventContractEventCardRegist:
		return []byte(s), nil
	case WebhookEventContractEventCardUpdate:
		return []byte(s), nil
	case WebhookEventContractEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventContractEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventContractEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventContractEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventContractEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventContractEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventContractEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventContractEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventContractEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventContractEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventContractEvent) UnmarshalText(data []byte) error {
	switch WebhookEventContractEvent(data) {
	case WebhookEventContractEventPaymentsCardRegist:
		*s = WebhookEventContractEventPaymentsCardRegist
		return nil
	case WebhookEventContractEventPaymentsCardExec:
		*s = WebhookEventContractEventPaymentsCardExec
		return nil
	case WebhookEventContractEventPaymentsCardCapture:
		*s = WebhookEventContractEventPaymentsCardCapture
		return nil
	case WebhookEventContractEventPaymentsCardCancel:
		*s = WebhookEventContractEventPaymentsCardCancel
		return nil
	case WebhookEventContractEventPaymentsCardAuth:
		*s = WebhookEventContractEventPaymentsCardAuth
		return nil
	case WebhookEventContractEventPaymentsCardChange:
		*s = WebhookEventContractEventPaymentsCardChange
		return nil
	case WebhookEventContractEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventContractEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventContractEventPaymentsCardSecure2Result:
		*s = WebhookEventContractEventPaymentsCardSecure2Result
		return nil
	case WebhookEventContractEventPaymentsCardSecure:
		*s = WebhookEventContractEventPaymentsCardSecure
		return nil
	case WebhookEventContractEventPaymentsApplepayRegist:
		*s = WebhookEventContractEventPaymentsApplepayRegist
		return nil
	case WebhookEventContractEventPaymentsApplepayExec:
		*s = WebhookEventContractEventPaymentsApplepayExec
		return nil
	case WebhookEventContractEventPaymentsApplepayCapture:
		*s = WebhookEventContractEventPaymentsApplepayCapture
		return nil
	case WebhookEventContractEventPaymentsApplepayCancel:
		*s = WebhookEventContractEventPaymentsApplepayCancel
		return nil
	case WebhookEventContractEventPaymentsKonbiniRegist:
		*s = WebhookEventContractEventPaymentsKonbiniRegist
		return nil
	case WebhookEventContractEventPaymentsKonbiniExec:
		*s = WebhookEventContractEventPaymentsKonbiniExec
		return nil
	case WebhookEventContractEventPaymentsKonbiniCancel:
		*s = WebhookEventContractEventPaymentsKonbiniCancel
		return nil
	case WebhookEventContractEventPaymentsKonbiniComplete:
		*s = WebhookEventContractEventPaymentsKonbiniComplete
		return nil
	case WebhookEventContractEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventContractEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventContractEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventContractEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventContractEventPaymentsPaypayRegist:
		*s = WebhookEventContractEventPaymentsPaypayRegist
		return nil
	case WebhookEventContractEventPaymentsPaypayExec:
		*s = WebhookEventContractEventPaymentsPaypayExec
		return nil
	case WebhookEventContractEventPaymentsPaypayCapture:
		*s = WebhookEventContractEventPaymentsPaypayCapture
		return nil
	case WebhookEventContractEventPaymentsPaypayCancel:
		*s = WebhookEventContractEventPaymentsPaypayCancel
		return nil
	case WebhookEventContractEventPaymentsPaypayChange:
		*s = WebhookEventContractEventPaymentsPaypayChange
		return nil
	case WebhookEventContractEventPaymentsPaypayComplete:
		*s = WebhookEventContractEventPaymentsPaypayComplete
		return nil
	case WebhookEventContractEventPaymentsDirectdebitRegist:
		*s = WebhookEventContractEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventContractEventPaymentsDirectdebitExec:
		*s = WebhookEventContractEventPaymentsDirectdebitExec
		return nil
	case WebhookEventContractEventPaymentsDirectdebitCancel:
		*s = WebhookEventContractEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventContractEventPaymentsDirectdebitChange:
		*s = WebhookEventContractEventPaymentsDirectdebitChange
		return nil
	case WebhookEventContractEventPaymentsDirectdebitComplete:
		*s = WebhookEventContractEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventContractEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventContractEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventContractEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventContractEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventContractEventCardRegist:
		*s = WebhookEventContractEventCardRegist
		return nil
	case WebhookEventContractEventCardUpdate:
		*s = WebhookEventContractEventCardUpdate
		return nil
	case WebhookEventContractEventSubscriptionCardRegist:
		*s = WebhookEventContractEventSubscriptionCardRegist
		return nil
	case WebhookEventContractEventSubscriptionCardDelete:
		*s = WebhookEventContractEventSubscriptionCardDelete
		return nil
	case WebhookEventContractEventSubscriptionCardUpdate:
		*s = WebhookEventContractEventSubscriptionCardUpdate
		return nil
	case WebhookEventContractEventRecurringCardBatch:
		*s = WebhookEventContractEventRecurringCardBatch
		return nil
	case WebhookEventContractEventSubscriptionDirectdebitRegist:
		*s = WebhookEventContractEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventContractEventSubscriptionDirectdebitDelete:
		*s = WebhookEventContractEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventContractEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventContractEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventContractEventRecurringDirectdebitBatch:
		*s = WebhookEventContractEventRecurringDirectdebitBatch
		return nil
	case WebhookEventContractEventPaymentsBulkCardRegist:
		*s = WebhookEventContractEventPaymentsBulkCardRegist
		return nil
	case WebhookEventContractEventPaymentsBulkCardBatch:
		*s = WebhookEventContractEventPaymentsBulkCardBatch
		return nil
	case WebhookEventContractEventContractsStatusCodeUpdated:
		*s = WebhookEventContractEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.CustomerPaymentMethod
type WebhookEventCustomerPaymentMethod struct {
	ShopID          OptString                                   `json:"shop_id"`
	CustomerID      OptString                                   `json:"customer_id"`
	PaymentMethodID OptString                                   `json:"payment_method_id"`
	PayType         OptWebhookEventCustomerPaymentMethodPayType `json:"pay_type"`
	Status          OptWebhookEventCustomerPaymentMethodStatus  `json:"status"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3    *NilString                                           `json:"client_field_3"`
	ApplicationType *NilWebhookEventCustomerPaymentMethodApplicationType `json:"application_type"`
	Event           OptWebhookEventCustomerPaymentMethodEvent            `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventCustomerPaymentMethod) GetShopID() OptString {
	return s.ShopID
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventCustomerPaymentMethod) GetCustomerID() OptString {
	return s.CustomerID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *WebhookEventCustomerPaymentMethod) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetPayType returns the value of PayType.
func (s *WebhookEventCustomerPaymentMethod) GetPayType() OptWebhookEventCustomerPaymentMethodPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *WebhookEventCustomerPaymentMethod) GetStatus() OptWebhookEventCustomerPaymentMethodStatus {
	return s.Status
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventCustomerPaymentMethod) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventCustomerPaymentMethod) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventCustomerPaymentMethod) GetClientField3() *NilString {
	return s.ClientField3
}

// GetApplicationType returns the value of ApplicationType.
func (s *WebhookEventCustomerPaymentMethod) GetApplicationType() *NilWebhookEventCustomerPaymentMethodApplicationType {
	return s.ApplicationType
}

// GetEvent returns the value of Event.
func (s *WebhookEventCustomerPaymentMethod) GetEvent() OptWebhookEventCustomerPaymentMethodEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventCustomerPaymentMethod) SetShopID(val OptString) {
	s.ShopID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventCustomerPaymentMethod) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *WebhookEventCustomerPaymentMethod) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventCustomerPaymentMethod) SetPayType(val OptWebhookEventCustomerPaymentMethodPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventCustomerPaymentMethod) SetStatus(val OptWebhookEventCustomerPaymentMethodStatus) {
	s.Status = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventCustomerPaymentMethod) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventCustomerPaymentMethod) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventCustomerPaymentMethod) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetApplicationType sets the value of ApplicationType.
func (s *WebhookEventCustomerPaymentMethod) SetApplicationType(val *NilWebhookEventCustomerPaymentMethodApplicationType) {
	s.ApplicationType = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventCustomerPaymentMethod) SetEvent(val OptWebhookEventCustomerPaymentMethodEvent) {
	s.Event = val
}

// この振替用口座を登録した際の申込方法
// - `PAPER`: 依頼書登録
// - `ONLINE`: Web登録.
type WebhookEventCustomerPaymentMethodApplicationType string

const (
	WebhookEventCustomerPaymentMethodApplicationTypePAPER  WebhookEventCustomerPaymentMethodApplicationType = "PAPER"
	WebhookEventCustomerPaymentMethodApplicationTypeONLINE WebhookEventCustomerPaymentMethodApplicationType = "ONLINE"
)

// AllValues returns all WebhookEventCustomerPaymentMethodApplicationType values.
func (WebhookEventCustomerPaymentMethodApplicationType) AllValues() []WebhookEventCustomerPaymentMethodApplicationType {
	return []WebhookEventCustomerPaymentMethodApplicationType{
		WebhookEventCustomerPaymentMethodApplicationTypePAPER,
		WebhookEventCustomerPaymentMethodApplicationTypeONLINE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCustomerPaymentMethodApplicationType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCustomerPaymentMethodApplicationTypePAPER:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodApplicationTypeONLINE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCustomerPaymentMethodApplicationType) UnmarshalText(data []byte) error {
	switch WebhookEventCustomerPaymentMethodApplicationType(data) {
	case WebhookEventCustomerPaymentMethodApplicationTypePAPER:
		*s = WebhookEventCustomerPaymentMethodApplicationTypePAPER
		return nil
	case WebhookEventCustomerPaymentMethodApplicationTypeONLINE:
		*s = WebhookEventCustomerPaymentMethodApplicationTypeONLINE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventCustomerPaymentMethodEvent string

const (
	WebhookEventCustomerPaymentMethodEventPaymentsCardRegist                WebhookEventCustomerPaymentMethodEvent = "payments.card.regist"
	WebhookEventCustomerPaymentMethodEventPaymentsCardExec                  WebhookEventCustomerPaymentMethodEvent = "payments.card.exec"
	WebhookEventCustomerPaymentMethodEventPaymentsCardCapture               WebhookEventCustomerPaymentMethodEvent = "payments.card.capture"
	WebhookEventCustomerPaymentMethodEventPaymentsCardCancel                WebhookEventCustomerPaymentMethodEvent = "payments.card.cancel"
	WebhookEventCustomerPaymentMethodEventPaymentsCardAuth                  WebhookEventCustomerPaymentMethodEvent = "payments.card.auth"
	WebhookEventCustomerPaymentMethodEventPaymentsCardChange                WebhookEventCustomerPaymentMethodEvent = "payments.card.change"
	WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Authenticate   WebhookEventCustomerPaymentMethodEvent = "payments.card.secure2.authenticate"
	WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Result         WebhookEventCustomerPaymentMethodEvent = "payments.card.secure2.result"
	WebhookEventCustomerPaymentMethodEventPaymentsCardSecure                WebhookEventCustomerPaymentMethodEvent = "payments.card.secure"
	WebhookEventCustomerPaymentMethodEventPaymentsApplepayRegist            WebhookEventCustomerPaymentMethodEvent = "payments.applepay.regist"
	WebhookEventCustomerPaymentMethodEventPaymentsApplepayExec              WebhookEventCustomerPaymentMethodEvent = "payments.applepay.exec"
	WebhookEventCustomerPaymentMethodEventPaymentsApplepayCapture           WebhookEventCustomerPaymentMethodEvent = "payments.applepay.capture"
	WebhookEventCustomerPaymentMethodEventPaymentsApplepayCancel            WebhookEventCustomerPaymentMethodEvent = "payments.applepay.cancel"
	WebhookEventCustomerPaymentMethodEventPaymentsKonbiniRegist             WebhookEventCustomerPaymentMethodEvent = "payments.konbini.regist"
	WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExec               WebhookEventCustomerPaymentMethodEvent = "payments.konbini.exec"
	WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCancel             WebhookEventCustomerPaymentMethodEvent = "payments.konbini.cancel"
	WebhookEventCustomerPaymentMethodEventPaymentsKonbiniComplete           WebhookEventCustomerPaymentMethodEvent = "payments.konbini.complete"
	WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCompleteStub       WebhookEventCustomerPaymentMethodEvent = "payments.konbini.complete.stub"
	WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExpiredUpdateBatch WebhookEventCustomerPaymentMethodEvent = "payments.konbini.expired.update.batch"
	WebhookEventCustomerPaymentMethodEventPaymentsPaypayRegist              WebhookEventCustomerPaymentMethodEvent = "payments.paypay.regist"
	WebhookEventCustomerPaymentMethodEventPaymentsPaypayExec                WebhookEventCustomerPaymentMethodEvent = "payments.paypay.exec"
	WebhookEventCustomerPaymentMethodEventPaymentsPaypayCapture             WebhookEventCustomerPaymentMethodEvent = "payments.paypay.capture"
	WebhookEventCustomerPaymentMethodEventPaymentsPaypayCancel              WebhookEventCustomerPaymentMethodEvent = "payments.paypay.cancel"
	WebhookEventCustomerPaymentMethodEventPaymentsPaypayChange              WebhookEventCustomerPaymentMethodEvent = "payments.paypay.change"
	WebhookEventCustomerPaymentMethodEventPaymentsPaypayComplete            WebhookEventCustomerPaymentMethodEvent = "payments.paypay.complete"
	WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitRegist         WebhookEventCustomerPaymentMethodEvent = "payments.directdebit.regist"
	WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitExec           WebhookEventCustomerPaymentMethodEvent = "payments.directdebit.exec"
	WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCancel         WebhookEventCustomerPaymentMethodEvent = "payments.directdebit.cancel"
	WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitChange         WebhookEventCustomerPaymentMethodEvent = "payments.directdebit.change"
	WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitComplete       WebhookEventCustomerPaymentMethodEvent = "payments.directdebit.complete"
	WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCompleteStub   WebhookEventCustomerPaymentMethodEvent = "payments.directdebit.complete.stub"
	WebhookEventCustomerPaymentMethodEventCustomersPaymentMethodsUpdated    WebhookEventCustomerPaymentMethodEvent = "customers.payment_methods.updated"
	WebhookEventCustomerPaymentMethodEventCardRegist                        WebhookEventCustomerPaymentMethodEvent = "card.regist"
	WebhookEventCustomerPaymentMethodEventCardUpdate                        WebhookEventCustomerPaymentMethodEvent = "card.update"
	WebhookEventCustomerPaymentMethodEventSubscriptionCardRegist            WebhookEventCustomerPaymentMethodEvent = "subscription.card.regist"
	WebhookEventCustomerPaymentMethodEventSubscriptionCardDelete            WebhookEventCustomerPaymentMethodEvent = "subscription.card.delete"
	WebhookEventCustomerPaymentMethodEventSubscriptionCardUpdate            WebhookEventCustomerPaymentMethodEvent = "subscription.card.update"
	WebhookEventCustomerPaymentMethodEventRecurringCardBatch                WebhookEventCustomerPaymentMethodEvent = "recurring.card.batch"
	WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitRegist     WebhookEventCustomerPaymentMethodEvent = "subscription.directdebit.regist"
	WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitDelete     WebhookEventCustomerPaymentMethodEvent = "subscription.directdebit.delete"
	WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitUpdate     WebhookEventCustomerPaymentMethodEvent = "subscription.directdebit.update"
	WebhookEventCustomerPaymentMethodEventRecurringDirectdebitBatch         WebhookEventCustomerPaymentMethodEvent = "recurring.directdebit.batch"
	WebhookEventCustomerPaymentMethodEventPaymentsBulkCardRegist            WebhookEventCustomerPaymentMethodEvent = "payments.bulk.card.regist"
	WebhookEventCustomerPaymentMethodEventPaymentsBulkCardBatch             WebhookEventCustomerPaymentMethodEvent = "payments.bulk.card.batch"
	WebhookEventCustomerPaymentMethodEventContractsStatusCodeUpdated        WebhookEventCustomerPaymentMethodEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventCustomerPaymentMethodEvent values.
func (WebhookEventCustomerPaymentMethodEvent) AllValues() []WebhookEventCustomerPaymentMethodEvent {
	return []WebhookEventCustomerPaymentMethodEvent{
		WebhookEventCustomerPaymentMethodEventPaymentsCardRegist,
		WebhookEventCustomerPaymentMethodEventPaymentsCardExec,
		WebhookEventCustomerPaymentMethodEventPaymentsCardCapture,
		WebhookEventCustomerPaymentMethodEventPaymentsCardCancel,
		WebhookEventCustomerPaymentMethodEventPaymentsCardAuth,
		WebhookEventCustomerPaymentMethodEventPaymentsCardChange,
		WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Authenticate,
		WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Result,
		WebhookEventCustomerPaymentMethodEventPaymentsCardSecure,
		WebhookEventCustomerPaymentMethodEventPaymentsApplepayRegist,
		WebhookEventCustomerPaymentMethodEventPaymentsApplepayExec,
		WebhookEventCustomerPaymentMethodEventPaymentsApplepayCapture,
		WebhookEventCustomerPaymentMethodEventPaymentsApplepayCancel,
		WebhookEventCustomerPaymentMethodEventPaymentsKonbiniRegist,
		WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExec,
		WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCancel,
		WebhookEventCustomerPaymentMethodEventPaymentsKonbiniComplete,
		WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCompleteStub,
		WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventCustomerPaymentMethodEventPaymentsPaypayRegist,
		WebhookEventCustomerPaymentMethodEventPaymentsPaypayExec,
		WebhookEventCustomerPaymentMethodEventPaymentsPaypayCapture,
		WebhookEventCustomerPaymentMethodEventPaymentsPaypayCancel,
		WebhookEventCustomerPaymentMethodEventPaymentsPaypayChange,
		WebhookEventCustomerPaymentMethodEventPaymentsPaypayComplete,
		WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitRegist,
		WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitExec,
		WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCancel,
		WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitChange,
		WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitComplete,
		WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCompleteStub,
		WebhookEventCustomerPaymentMethodEventCustomersPaymentMethodsUpdated,
		WebhookEventCustomerPaymentMethodEventCardRegist,
		WebhookEventCustomerPaymentMethodEventCardUpdate,
		WebhookEventCustomerPaymentMethodEventSubscriptionCardRegist,
		WebhookEventCustomerPaymentMethodEventSubscriptionCardDelete,
		WebhookEventCustomerPaymentMethodEventSubscriptionCardUpdate,
		WebhookEventCustomerPaymentMethodEventRecurringCardBatch,
		WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitRegist,
		WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitDelete,
		WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitUpdate,
		WebhookEventCustomerPaymentMethodEventRecurringDirectdebitBatch,
		WebhookEventCustomerPaymentMethodEventPaymentsBulkCardRegist,
		WebhookEventCustomerPaymentMethodEventPaymentsBulkCardBatch,
		WebhookEventCustomerPaymentMethodEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCustomerPaymentMethodEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCustomerPaymentMethodEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventCardRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventCardUpdate:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCustomerPaymentMethodEvent) UnmarshalText(data []byte) error {
	switch WebhookEventCustomerPaymentMethodEvent(data) {
	case WebhookEventCustomerPaymentMethodEventPaymentsCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardExec
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardCapture:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardCapture
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardCancel
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardAuth:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardAuth
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardChange:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardChange
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Result:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Result
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardSecure
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayExec
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayCapture:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayCapture
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayCancel
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExec
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCancel
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniComplete:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniComplete
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayExec
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayCapture:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayCapture
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayCancel
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayChange:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayChange
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayComplete:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayComplete
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitExec
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitChange:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitChange
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitComplete:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventCustomerPaymentMethodEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventCustomerPaymentMethodEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventCustomerPaymentMethodEventCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventCardRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventCardUpdate:
		*s = WebhookEventCustomerPaymentMethodEventCardUpdate
		return nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionCardRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardDelete:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionCardDelete
		return nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardUpdate:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionCardUpdate
		return nil
	case WebhookEventCustomerPaymentMethodEventRecurringCardBatch:
		*s = WebhookEventCustomerPaymentMethodEventRecurringCardBatch
		return nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitRegist:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitDelete:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventCustomerPaymentMethodEventRecurringDirectdebitBatch:
		*s = WebhookEventCustomerPaymentMethodEventRecurringDirectdebitBatch
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsBulkCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsBulkCardRegist
		return nil
	case WebhookEventCustomerPaymentMethodEventPaymentsBulkCardBatch:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsBulkCardBatch
		return nil
	case WebhookEventCustomerPaymentMethodEventContractsStatusCodeUpdated:
		*s = WebhookEventCustomerPaymentMethodEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（決済手段APIに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type WebhookEventCustomerPaymentMethodPayType string

const (
	WebhookEventCustomerPaymentMethodPayTypeCard        WebhookEventCustomerPaymentMethodPayType = "Card"
	WebhookEventCustomerPaymentMethodPayTypeDirectdebit WebhookEventCustomerPaymentMethodPayType = "Directdebit"
)

// AllValues returns all WebhookEventCustomerPaymentMethodPayType values.
func (WebhookEventCustomerPaymentMethodPayType) AllValues() []WebhookEventCustomerPaymentMethodPayType {
	return []WebhookEventCustomerPaymentMethodPayType{
		WebhookEventCustomerPaymentMethodPayTypeCard,
		WebhookEventCustomerPaymentMethodPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCustomerPaymentMethodPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCustomerPaymentMethodPayTypeCard:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCustomerPaymentMethodPayType) UnmarshalText(data []byte) error {
	switch WebhookEventCustomerPaymentMethodPayType(data) {
	case WebhookEventCustomerPaymentMethodPayTypeCard:
		*s = WebhookEventCustomerPaymentMethodPayTypeCard
		return nil
	case WebhookEventCustomerPaymentMethodPayTypeDirectdebit:
		*s = WebhookEventCustomerPaymentMethodPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済手段のステータス
// - `INACTIVATED`: 有効化前<br /><span
// class="smallText">まだこの決済手段は決済に使用できません。</span>
// - `AWAITING_CUSTOMER_ACTION`: 顧客のアクション待ち<br /><span
// class="smallText">この決済手段は登録のための購入者の承認がされていない状態です。まだこの決済手段は決済に使用できません。</span>
// - `ACTIVATED`: 有効化済み<br /><span
// class="smallText">この決済手段は決済に使用できます。</span>
// - `FAILED`: 失敗<br /><span
// class="smallText">この決済手段は決済に使用できません。</span>.
type WebhookEventCustomerPaymentMethodStatus string

const (
	WebhookEventCustomerPaymentMethodStatusINACTIVATED            WebhookEventCustomerPaymentMethodStatus = "INACTIVATED"
	WebhookEventCustomerPaymentMethodStatusAWAITINGCUSTOMERACTION WebhookEventCustomerPaymentMethodStatus = "AWAITING_CUSTOMER_ACTION"
	WebhookEventCustomerPaymentMethodStatusACTIVATED              WebhookEventCustomerPaymentMethodStatus = "ACTIVATED"
	WebhookEventCustomerPaymentMethodStatusFAILED                 WebhookEventCustomerPaymentMethodStatus = "FAILED"
)

// AllValues returns all WebhookEventCustomerPaymentMethodStatus values.
func (WebhookEventCustomerPaymentMethodStatus) AllValues() []WebhookEventCustomerPaymentMethodStatus {
	return []WebhookEventCustomerPaymentMethodStatus{
		WebhookEventCustomerPaymentMethodStatusINACTIVATED,
		WebhookEventCustomerPaymentMethodStatusAWAITINGCUSTOMERACTION,
		WebhookEventCustomerPaymentMethodStatusACTIVATED,
		WebhookEventCustomerPaymentMethodStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventCustomerPaymentMethodStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventCustomerPaymentMethodStatusINACTIVATED:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodStatusAWAITINGCUSTOMERACTION:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodStatusACTIVATED:
		return []byte(s), nil
	case WebhookEventCustomerPaymentMethodStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventCustomerPaymentMethodStatus) UnmarshalText(data []byte) error {
	switch WebhookEventCustomerPaymentMethodStatus(data) {
	case WebhookEventCustomerPaymentMethodStatusINACTIVATED:
		*s = WebhookEventCustomerPaymentMethodStatusINACTIVATED
		return nil
	case WebhookEventCustomerPaymentMethodStatusAWAITINGCUSTOMERACTION:
		*s = WebhookEventCustomerPaymentMethodStatusAWAITINGCUSTOMERACTION
		return nil
	case WebhookEventCustomerPaymentMethodStatusACTIVATED:
		*s = WebhookEventCustomerPaymentMethodStatusACTIVATED
		return nil
	case WebhookEventCustomerPaymentMethodStatusFAILED:
		*s = WebhookEventCustomerPaymentMethodStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Payment.ApplePay
type WebhookEventPaymentApplePay struct {
	ShopID   OptString `json:"shop_id"`
	OrderID  OptString `json:"order_id"`
	AccessID OptString `json:"access_id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Applepay`: Apple Pay.
	PayType OptWebhookEventPaymentApplePayPayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>.
	Status     OptWebhookEventPaymentApplePayStatus `json:"status"`
	CustomerID OptNilString                         `json:"customer_id"`
	Method     OptWebhookEventPaymentApplePayMethod `json:"method"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 利用金額.
	Amount OptString `json:"amount"`
	// 税送料.
	Tax           OptString                              `json:"tax"`
	Currency      OptWebhookEventPaymentApplePayCurrency `json:"currency"`
	JobCode       OptWebhookEventPaymentApplePayJobCode  `json:"job_code"`
	Forward       *NilString                             `json:"forward"`
	TransactionID *NilString                             `json:"transaction_id"`
	// 決済 処理日時.
	TransactionDate OptNilString `json:"transaction_date"`
	Approve         *NilString   `json:"approve"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString                        `json:"error_code"`
	Event     OptWebhookEventPaymentApplePayEvent `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventPaymentApplePay) GetShopID() OptString {
	return s.ShopID
}

// GetOrderID returns the value of OrderID.
func (s *WebhookEventPaymentApplePay) GetOrderID() OptString {
	return s.OrderID
}

// GetAccessID returns the value of AccessID.
func (s *WebhookEventPaymentApplePay) GetAccessID() OptString {
	return s.AccessID
}

// GetPayType returns the value of PayType.
func (s *WebhookEventPaymentApplePay) GetPayType() OptWebhookEventPaymentApplePayPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *WebhookEventPaymentApplePay) GetStatus() OptWebhookEventPaymentApplePayStatus {
	return s.Status
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventPaymentApplePay) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetMethod returns the value of Method.
func (s *WebhookEventPaymentApplePay) GetMethod() OptWebhookEventPaymentApplePayMethod {
	return s.Method
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventPaymentApplePay) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventPaymentApplePay) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventPaymentApplePay) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetAmount returns the value of Amount.
func (s *WebhookEventPaymentApplePay) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *WebhookEventPaymentApplePay) GetTax() OptString {
	return s.Tax
}

// GetCurrency returns the value of Currency.
func (s *WebhookEventPaymentApplePay) GetCurrency() OptWebhookEventPaymentApplePayCurrency {
	return s.Currency
}

// GetJobCode returns the value of JobCode.
func (s *WebhookEventPaymentApplePay) GetJobCode() OptWebhookEventPaymentApplePayJobCode {
	return s.JobCode
}

// GetForward returns the value of Forward.
func (s *WebhookEventPaymentApplePay) GetForward() *NilString {
	return s.Forward
}

// GetTransactionID returns the value of TransactionID.
func (s *WebhookEventPaymentApplePay) GetTransactionID() *NilString {
	return s.TransactionID
}

// GetTransactionDate returns the value of TransactionDate.
func (s *WebhookEventPaymentApplePay) GetTransactionDate() OptNilString {
	return s.TransactionDate
}

// GetApprove returns the value of Approve.
func (s *WebhookEventPaymentApplePay) GetApprove() *NilString {
	return s.Approve
}

// GetErrorCode returns the value of ErrorCode.
func (s *WebhookEventPaymentApplePay) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetEvent returns the value of Event.
func (s *WebhookEventPaymentApplePay) GetEvent() OptWebhookEventPaymentApplePayEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventPaymentApplePay) SetShopID(val OptString) {
	s.ShopID = val
}

// SetOrderID sets the value of OrderID.
func (s *WebhookEventPaymentApplePay) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetAccessID sets the value of AccessID.
func (s *WebhookEventPaymentApplePay) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventPaymentApplePay) SetPayType(val OptWebhookEventPaymentApplePayPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventPaymentApplePay) SetStatus(val OptWebhookEventPaymentApplePayStatus) {
	s.Status = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventPaymentApplePay) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetMethod sets the value of Method.
func (s *WebhookEventPaymentApplePay) SetMethod(val OptWebhookEventPaymentApplePayMethod) {
	s.Method = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventPaymentApplePay) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventPaymentApplePay) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventPaymentApplePay) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetAmount sets the value of Amount.
func (s *WebhookEventPaymentApplePay) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *WebhookEventPaymentApplePay) SetTax(val OptString) {
	s.Tax = val
}

// SetCurrency sets the value of Currency.
func (s *WebhookEventPaymentApplePay) SetCurrency(val OptWebhookEventPaymentApplePayCurrency) {
	s.Currency = val
}

// SetJobCode sets the value of JobCode.
func (s *WebhookEventPaymentApplePay) SetJobCode(val OptWebhookEventPaymentApplePayJobCode) {
	s.JobCode = val
}

// SetForward sets the value of Forward.
func (s *WebhookEventPaymentApplePay) SetForward(val *NilString) {
	s.Forward = val
}

// SetTransactionID sets the value of TransactionID.
func (s *WebhookEventPaymentApplePay) SetTransactionID(val *NilString) {
	s.TransactionID = val
}

// SetTransactionDate sets the value of TransactionDate.
func (s *WebhookEventPaymentApplePay) SetTransactionDate(val OptNilString) {
	s.TransactionDate = val
}

// SetApprove sets the value of Approve.
func (s *WebhookEventPaymentApplePay) SetApprove(val *NilString) {
	s.Approve = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *WebhookEventPaymentApplePay) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventPaymentApplePay) SetEvent(val OptWebhookEventPaymentApplePayEvent) {
	s.Event = val
}

// 通貨コード\
// この決済で利用された通貨のコードです。
// - `JPY`: 日本円.
type WebhookEventPaymentApplePayCurrency string

const (
	WebhookEventPaymentApplePayCurrencyJPY WebhookEventPaymentApplePayCurrency = "JPY"
)

// AllValues returns all WebhookEventPaymentApplePayCurrency values.
func (WebhookEventPaymentApplePayCurrency) AllValues() []WebhookEventPaymentApplePayCurrency {
	return []WebhookEventPaymentApplePayCurrency{
		WebhookEventPaymentApplePayCurrencyJPY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentApplePayCurrency) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentApplePayCurrencyJPY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentApplePayCurrency) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentApplePayCurrency(data) {
	case WebhookEventPaymentApplePayCurrencyJPY:
		*s = WebhookEventPaymentApplePayCurrencyJPY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventPaymentApplePayEvent string

const (
	WebhookEventPaymentApplePayEventPaymentsCardRegist                WebhookEventPaymentApplePayEvent = "payments.card.regist"
	WebhookEventPaymentApplePayEventPaymentsCardExec                  WebhookEventPaymentApplePayEvent = "payments.card.exec"
	WebhookEventPaymentApplePayEventPaymentsCardCapture               WebhookEventPaymentApplePayEvent = "payments.card.capture"
	WebhookEventPaymentApplePayEventPaymentsCardCancel                WebhookEventPaymentApplePayEvent = "payments.card.cancel"
	WebhookEventPaymentApplePayEventPaymentsCardAuth                  WebhookEventPaymentApplePayEvent = "payments.card.auth"
	WebhookEventPaymentApplePayEventPaymentsCardChange                WebhookEventPaymentApplePayEvent = "payments.card.change"
	WebhookEventPaymentApplePayEventPaymentsCardSecure2Authenticate   WebhookEventPaymentApplePayEvent = "payments.card.secure2.authenticate"
	WebhookEventPaymentApplePayEventPaymentsCardSecure2Result         WebhookEventPaymentApplePayEvent = "payments.card.secure2.result"
	WebhookEventPaymentApplePayEventPaymentsCardSecure                WebhookEventPaymentApplePayEvent = "payments.card.secure"
	WebhookEventPaymentApplePayEventPaymentsApplepayRegist            WebhookEventPaymentApplePayEvent = "payments.applepay.regist"
	WebhookEventPaymentApplePayEventPaymentsApplepayExec              WebhookEventPaymentApplePayEvent = "payments.applepay.exec"
	WebhookEventPaymentApplePayEventPaymentsApplepayCapture           WebhookEventPaymentApplePayEvent = "payments.applepay.capture"
	WebhookEventPaymentApplePayEventPaymentsApplepayCancel            WebhookEventPaymentApplePayEvent = "payments.applepay.cancel"
	WebhookEventPaymentApplePayEventPaymentsKonbiniRegist             WebhookEventPaymentApplePayEvent = "payments.konbini.regist"
	WebhookEventPaymentApplePayEventPaymentsKonbiniExec               WebhookEventPaymentApplePayEvent = "payments.konbini.exec"
	WebhookEventPaymentApplePayEventPaymentsKonbiniCancel             WebhookEventPaymentApplePayEvent = "payments.konbini.cancel"
	WebhookEventPaymentApplePayEventPaymentsKonbiniComplete           WebhookEventPaymentApplePayEvent = "payments.konbini.complete"
	WebhookEventPaymentApplePayEventPaymentsKonbiniCompleteStub       WebhookEventPaymentApplePayEvent = "payments.konbini.complete.stub"
	WebhookEventPaymentApplePayEventPaymentsKonbiniExpiredUpdateBatch WebhookEventPaymentApplePayEvent = "payments.konbini.expired.update.batch"
	WebhookEventPaymentApplePayEventPaymentsPaypayRegist              WebhookEventPaymentApplePayEvent = "payments.paypay.regist"
	WebhookEventPaymentApplePayEventPaymentsPaypayExec                WebhookEventPaymentApplePayEvent = "payments.paypay.exec"
	WebhookEventPaymentApplePayEventPaymentsPaypayCapture             WebhookEventPaymentApplePayEvent = "payments.paypay.capture"
	WebhookEventPaymentApplePayEventPaymentsPaypayCancel              WebhookEventPaymentApplePayEvent = "payments.paypay.cancel"
	WebhookEventPaymentApplePayEventPaymentsPaypayChange              WebhookEventPaymentApplePayEvent = "payments.paypay.change"
	WebhookEventPaymentApplePayEventPaymentsPaypayComplete            WebhookEventPaymentApplePayEvent = "payments.paypay.complete"
	WebhookEventPaymentApplePayEventPaymentsDirectdebitRegist         WebhookEventPaymentApplePayEvent = "payments.directdebit.regist"
	WebhookEventPaymentApplePayEventPaymentsDirectdebitExec           WebhookEventPaymentApplePayEvent = "payments.directdebit.exec"
	WebhookEventPaymentApplePayEventPaymentsDirectdebitCancel         WebhookEventPaymentApplePayEvent = "payments.directdebit.cancel"
	WebhookEventPaymentApplePayEventPaymentsDirectdebitChange         WebhookEventPaymentApplePayEvent = "payments.directdebit.change"
	WebhookEventPaymentApplePayEventPaymentsDirectdebitComplete       WebhookEventPaymentApplePayEvent = "payments.directdebit.complete"
	WebhookEventPaymentApplePayEventPaymentsDirectdebitCompleteStub   WebhookEventPaymentApplePayEvent = "payments.directdebit.complete.stub"
	WebhookEventPaymentApplePayEventCustomersPaymentMethodsUpdated    WebhookEventPaymentApplePayEvent = "customers.payment_methods.updated"
	WebhookEventPaymentApplePayEventCardRegist                        WebhookEventPaymentApplePayEvent = "card.regist"
	WebhookEventPaymentApplePayEventCardUpdate                        WebhookEventPaymentApplePayEvent = "card.update"
	WebhookEventPaymentApplePayEventSubscriptionCardRegist            WebhookEventPaymentApplePayEvent = "subscription.card.regist"
	WebhookEventPaymentApplePayEventSubscriptionCardDelete            WebhookEventPaymentApplePayEvent = "subscription.card.delete"
	WebhookEventPaymentApplePayEventSubscriptionCardUpdate            WebhookEventPaymentApplePayEvent = "subscription.card.update"
	WebhookEventPaymentApplePayEventRecurringCardBatch                WebhookEventPaymentApplePayEvent = "recurring.card.batch"
	WebhookEventPaymentApplePayEventSubscriptionDirectdebitRegist     WebhookEventPaymentApplePayEvent = "subscription.directdebit.regist"
	WebhookEventPaymentApplePayEventSubscriptionDirectdebitDelete     WebhookEventPaymentApplePayEvent = "subscription.directdebit.delete"
	WebhookEventPaymentApplePayEventSubscriptionDirectdebitUpdate     WebhookEventPaymentApplePayEvent = "subscription.directdebit.update"
	WebhookEventPaymentApplePayEventRecurringDirectdebitBatch         WebhookEventPaymentApplePayEvent = "recurring.directdebit.batch"
	WebhookEventPaymentApplePayEventPaymentsBulkCardRegist            WebhookEventPaymentApplePayEvent = "payments.bulk.card.regist"
	WebhookEventPaymentApplePayEventPaymentsBulkCardBatch             WebhookEventPaymentApplePayEvent = "payments.bulk.card.batch"
	WebhookEventPaymentApplePayEventContractsStatusCodeUpdated        WebhookEventPaymentApplePayEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventPaymentApplePayEvent values.
func (WebhookEventPaymentApplePayEvent) AllValues() []WebhookEventPaymentApplePayEvent {
	return []WebhookEventPaymentApplePayEvent{
		WebhookEventPaymentApplePayEventPaymentsCardRegist,
		WebhookEventPaymentApplePayEventPaymentsCardExec,
		WebhookEventPaymentApplePayEventPaymentsCardCapture,
		WebhookEventPaymentApplePayEventPaymentsCardCancel,
		WebhookEventPaymentApplePayEventPaymentsCardAuth,
		WebhookEventPaymentApplePayEventPaymentsCardChange,
		WebhookEventPaymentApplePayEventPaymentsCardSecure2Authenticate,
		WebhookEventPaymentApplePayEventPaymentsCardSecure2Result,
		WebhookEventPaymentApplePayEventPaymentsCardSecure,
		WebhookEventPaymentApplePayEventPaymentsApplepayRegist,
		WebhookEventPaymentApplePayEventPaymentsApplepayExec,
		WebhookEventPaymentApplePayEventPaymentsApplepayCapture,
		WebhookEventPaymentApplePayEventPaymentsApplepayCancel,
		WebhookEventPaymentApplePayEventPaymentsKonbiniRegist,
		WebhookEventPaymentApplePayEventPaymentsKonbiniExec,
		WebhookEventPaymentApplePayEventPaymentsKonbiniCancel,
		WebhookEventPaymentApplePayEventPaymentsKonbiniComplete,
		WebhookEventPaymentApplePayEventPaymentsKonbiniCompleteStub,
		WebhookEventPaymentApplePayEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventPaymentApplePayEventPaymentsPaypayRegist,
		WebhookEventPaymentApplePayEventPaymentsPaypayExec,
		WebhookEventPaymentApplePayEventPaymentsPaypayCapture,
		WebhookEventPaymentApplePayEventPaymentsPaypayCancel,
		WebhookEventPaymentApplePayEventPaymentsPaypayChange,
		WebhookEventPaymentApplePayEventPaymentsPaypayComplete,
		WebhookEventPaymentApplePayEventPaymentsDirectdebitRegist,
		WebhookEventPaymentApplePayEventPaymentsDirectdebitExec,
		WebhookEventPaymentApplePayEventPaymentsDirectdebitCancel,
		WebhookEventPaymentApplePayEventPaymentsDirectdebitChange,
		WebhookEventPaymentApplePayEventPaymentsDirectdebitComplete,
		WebhookEventPaymentApplePayEventPaymentsDirectdebitCompleteStub,
		WebhookEventPaymentApplePayEventCustomersPaymentMethodsUpdated,
		WebhookEventPaymentApplePayEventCardRegist,
		WebhookEventPaymentApplePayEventCardUpdate,
		WebhookEventPaymentApplePayEventSubscriptionCardRegist,
		WebhookEventPaymentApplePayEventSubscriptionCardDelete,
		WebhookEventPaymentApplePayEventSubscriptionCardUpdate,
		WebhookEventPaymentApplePayEventRecurringCardBatch,
		WebhookEventPaymentApplePayEventSubscriptionDirectdebitRegist,
		WebhookEventPaymentApplePayEventSubscriptionDirectdebitDelete,
		WebhookEventPaymentApplePayEventSubscriptionDirectdebitUpdate,
		WebhookEventPaymentApplePayEventRecurringDirectdebitBatch,
		WebhookEventPaymentApplePayEventPaymentsBulkCardRegist,
		WebhookEventPaymentApplePayEventPaymentsBulkCardBatch,
		WebhookEventPaymentApplePayEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentApplePayEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentApplePayEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentApplePayEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentApplePayEvent) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentApplePayEvent(data) {
	case WebhookEventPaymentApplePayEventPaymentsCardRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsCardRegist
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardExec:
		*s = WebhookEventPaymentApplePayEventPaymentsCardExec
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardCapture:
		*s = WebhookEventPaymentApplePayEventPaymentsCardCapture
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsCardCancel
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardAuth:
		*s = WebhookEventPaymentApplePayEventPaymentsCardAuth
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardChange:
		*s = WebhookEventPaymentApplePayEventPaymentsCardChange
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentApplePayEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentApplePayEventPaymentsCardSecure2Result
		return nil
	case WebhookEventPaymentApplePayEventPaymentsCardSecure:
		*s = WebhookEventPaymentApplePayEventPaymentsCardSecure
		return nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayRegist
		return nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayExec:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayExec
		return nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayCapture
		return nil
	case WebhookEventPaymentApplePayEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayCancel
		return nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniRegist
		return nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniExec
		return nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniCancel
		return nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniComplete
		return nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventPaymentApplePayEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayRegist
		return nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayExec:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayExec
		return nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayCapture
		return nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayCancel
		return nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayChange:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayChange
		return nil
	case WebhookEventPaymentApplePayEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayComplete
		return nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitExec
		return nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitChange
		return nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventPaymentApplePayEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentApplePayEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventPaymentApplePayEventCardRegist:
		*s = WebhookEventPaymentApplePayEventCardRegist
		return nil
	case WebhookEventPaymentApplePayEventCardUpdate:
		*s = WebhookEventPaymentApplePayEventCardUpdate
		return nil
	case WebhookEventPaymentApplePayEventSubscriptionCardRegist:
		*s = WebhookEventPaymentApplePayEventSubscriptionCardRegist
		return nil
	case WebhookEventPaymentApplePayEventSubscriptionCardDelete:
		*s = WebhookEventPaymentApplePayEventSubscriptionCardDelete
		return nil
	case WebhookEventPaymentApplePayEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentApplePayEventSubscriptionCardUpdate
		return nil
	case WebhookEventPaymentApplePayEventRecurringCardBatch:
		*s = WebhookEventPaymentApplePayEventRecurringCardBatch
		return nil
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentApplePayEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentApplePayEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentApplePayEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventPaymentApplePayEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentApplePayEventRecurringDirectdebitBatch
		return nil
	case WebhookEventPaymentApplePayEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsBulkCardRegist
		return nil
	case WebhookEventPaymentApplePayEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentApplePayEventPaymentsBulkCardBatch
		return nil
	case WebhookEventPaymentApplePayEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentApplePayEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type WebhookEventPaymentApplePayJobCode string

const (
	WebhookEventPaymentApplePayJobCodeAUTH    WebhookEventPaymentApplePayJobCode = "AUTH"
	WebhookEventPaymentApplePayJobCodeCAPTURE WebhookEventPaymentApplePayJobCode = "CAPTURE"
)

// AllValues returns all WebhookEventPaymentApplePayJobCode values.
func (WebhookEventPaymentApplePayJobCode) AllValues() []WebhookEventPaymentApplePayJobCode {
	return []WebhookEventPaymentApplePayJobCode{
		WebhookEventPaymentApplePayJobCodeAUTH,
		WebhookEventPaymentApplePayJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentApplePayJobCode) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentApplePayJobCodeAUTH:
		return []byte(s), nil
	case WebhookEventPaymentApplePayJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentApplePayJobCode) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentApplePayJobCode(data) {
	case WebhookEventPaymentApplePayJobCodeAUTH:
		*s = WebhookEventPaymentApplePayJobCodeAUTH
		return nil
	case WebhookEventPaymentApplePayJobCodeCAPTURE:
		*s = WebhookEventPaymentApplePayJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type WebhookEventPaymentApplePayMethod string

const (
	WebhookEventPaymentApplePayMethod1 WebhookEventPaymentApplePayMethod = "1"
	WebhookEventPaymentApplePayMethod2 WebhookEventPaymentApplePayMethod = "2"
	WebhookEventPaymentApplePayMethod5 WebhookEventPaymentApplePayMethod = "5"
)

// AllValues returns all WebhookEventPaymentApplePayMethod values.
func (WebhookEventPaymentApplePayMethod) AllValues() []WebhookEventPaymentApplePayMethod {
	return []WebhookEventPaymentApplePayMethod{
		WebhookEventPaymentApplePayMethod1,
		WebhookEventPaymentApplePayMethod2,
		WebhookEventPaymentApplePayMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentApplePayMethod) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentApplePayMethod1:
		return []byte(s), nil
	case WebhookEventPaymentApplePayMethod2:
		return []byte(s), nil
	case WebhookEventPaymentApplePayMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentApplePayMethod) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentApplePayMethod(data) {
	case WebhookEventPaymentApplePayMethod1:
		*s = WebhookEventPaymentApplePayMethod1
		return nil
	case WebhookEventPaymentApplePayMethod2:
		*s = WebhookEventPaymentApplePayMethod2
		return nil
	case WebhookEventPaymentApplePayMethod5:
		*s = WebhookEventPaymentApplePayMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type WebhookEventPaymentApplePayPayType string

const (
	WebhookEventPaymentApplePayPayTypeCard           WebhookEventPaymentApplePayPayType = "Card"
	WebhookEventPaymentApplePayPayTypeKonbini        WebhookEventPaymentApplePayPayType = "Konbini"
	WebhookEventPaymentApplePayPayTypePaypay         WebhookEventPaymentApplePayPayType = "Paypay"
	WebhookEventPaymentApplePayPayTypeApplepay       WebhookEventPaymentApplePayPayType = "Applepay"
	WebhookEventPaymentApplePayPayTypeDirectdebit    WebhookEventPaymentApplePayPayType = "Directdebit"
	WebhookEventPaymentApplePayPayTypeVirtualaccount WebhookEventPaymentApplePayPayType = "Virtualaccount"
)

// AllValues returns all WebhookEventPaymentApplePayPayType values.
func (WebhookEventPaymentApplePayPayType) AllValues() []WebhookEventPaymentApplePayPayType {
	return []WebhookEventPaymentApplePayPayType{
		WebhookEventPaymentApplePayPayTypeCard,
		WebhookEventPaymentApplePayPayTypeKonbini,
		WebhookEventPaymentApplePayPayTypePaypay,
		WebhookEventPaymentApplePayPayTypeApplepay,
		WebhookEventPaymentApplePayPayTypeDirectdebit,
		WebhookEventPaymentApplePayPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentApplePayPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentApplePayPayTypeCard:
		return []byte(s), nil
	case WebhookEventPaymentApplePayPayTypeKonbini:
		return []byte(s), nil
	case WebhookEventPaymentApplePayPayTypePaypay:
		return []byte(s), nil
	case WebhookEventPaymentApplePayPayTypeApplepay:
		return []byte(s), nil
	case WebhookEventPaymentApplePayPayTypeDirectdebit:
		return []byte(s), nil
	case WebhookEventPaymentApplePayPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentApplePayPayType) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentApplePayPayType(data) {
	case WebhookEventPaymentApplePayPayTypeCard:
		*s = WebhookEventPaymentApplePayPayTypeCard
		return nil
	case WebhookEventPaymentApplePayPayTypeKonbini:
		*s = WebhookEventPaymentApplePayPayTypeKonbini
		return nil
	case WebhookEventPaymentApplePayPayTypePaypay:
		*s = WebhookEventPaymentApplePayPayTypePaypay
		return nil
	case WebhookEventPaymentApplePayPayTypeApplepay:
		*s = WebhookEventPaymentApplePayPayTypeApplepay
		return nil
	case WebhookEventPaymentApplePayPayTypeDirectdebit:
		*s = WebhookEventPaymentApplePayPayTypeDirectdebit
		return nil
	case WebhookEventPaymentApplePayPayTypeVirtualaccount:
		*s = WebhookEventPaymentApplePayPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type WebhookEventPaymentApplePayStatus string

const (
	WebhookEventPaymentApplePayStatusUNPROCESSED             WebhookEventPaymentApplePayStatus = "UNPROCESSED"
	WebhookEventPaymentApplePayStatusCHECKED                 WebhookEventPaymentApplePayStatus = "CHECKED"
	WebhookEventPaymentApplePayStatusAUTHORIZED              WebhookEventPaymentApplePayStatus = "AUTHORIZED"
	WebhookEventPaymentApplePayStatusAWAITINGCUSTOMERPAYMENT WebhookEventPaymentApplePayStatus = "AWAITING_CUSTOMER_PAYMENT"
	WebhookEventPaymentApplePayStatusAWAITINGPAYMENTAPPROVAL WebhookEventPaymentApplePayStatus = "AWAITING_PAYMENT_APPROVAL"
	WebhookEventPaymentApplePayStatusCAPTURED                WebhookEventPaymentApplePayStatus = "CAPTURED"
	WebhookEventPaymentApplePayStatusCANCELED                WebhookEventPaymentApplePayStatus = "CANCELED"
	WebhookEventPaymentApplePayStatusEXPIRED                 WebhookEventPaymentApplePayStatus = "EXPIRED"
	WebhookEventPaymentApplePayStatusAUTHENTICATED           WebhookEventPaymentApplePayStatus = "AUTHENTICATED"
	WebhookEventPaymentApplePayStatusFAILED                  WebhookEventPaymentApplePayStatus = "FAILED"
)

// AllValues returns all WebhookEventPaymentApplePayStatus values.
func (WebhookEventPaymentApplePayStatus) AllValues() []WebhookEventPaymentApplePayStatus {
	return []WebhookEventPaymentApplePayStatus{
		WebhookEventPaymentApplePayStatusUNPROCESSED,
		WebhookEventPaymentApplePayStatusCHECKED,
		WebhookEventPaymentApplePayStatusAUTHORIZED,
		WebhookEventPaymentApplePayStatusAWAITINGCUSTOMERPAYMENT,
		WebhookEventPaymentApplePayStatusAWAITINGPAYMENTAPPROVAL,
		WebhookEventPaymentApplePayStatusCAPTURED,
		WebhookEventPaymentApplePayStatusCANCELED,
		WebhookEventPaymentApplePayStatusEXPIRED,
		WebhookEventPaymentApplePayStatusAUTHENTICATED,
		WebhookEventPaymentApplePayStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentApplePayStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentApplePayStatusUNPROCESSED:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusCHECKED:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusAUTHORIZED:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusCAPTURED:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusCANCELED:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusEXPIRED:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusAUTHENTICATED:
		return []byte(s), nil
	case WebhookEventPaymentApplePayStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentApplePayStatus) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentApplePayStatus(data) {
	case WebhookEventPaymentApplePayStatusUNPROCESSED:
		*s = WebhookEventPaymentApplePayStatusUNPROCESSED
		return nil
	case WebhookEventPaymentApplePayStatusCHECKED:
		*s = WebhookEventPaymentApplePayStatusCHECKED
		return nil
	case WebhookEventPaymentApplePayStatusAUTHORIZED:
		*s = WebhookEventPaymentApplePayStatusAUTHORIZED
		return nil
	case WebhookEventPaymentApplePayStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentApplePayStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case WebhookEventPaymentApplePayStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentApplePayStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case WebhookEventPaymentApplePayStatusCAPTURED:
		*s = WebhookEventPaymentApplePayStatusCAPTURED
		return nil
	case WebhookEventPaymentApplePayStatusCANCELED:
		*s = WebhookEventPaymentApplePayStatusCANCELED
		return nil
	case WebhookEventPaymentApplePayStatusEXPIRED:
		*s = WebhookEventPaymentApplePayStatusEXPIRED
		return nil
	case WebhookEventPaymentApplePayStatusAUTHENTICATED:
		*s = WebhookEventPaymentApplePayStatusAUTHENTICATED
		return nil
	case WebhookEventPaymentApplePayStatusFAILED:
		*s = WebhookEventPaymentApplePayStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.PaymentBulk.Batch.Card
type WebhookEventPaymentBulkBatchCard struct {
	ShopID        OptString                                 `json:"shop_id"`
	BulkPaymentID OptNilString                              `json:"bulk_payment_id"`
	FileName      OptString                                 `json:"file_name"`
	Status        OptWebhookEventPaymentBulkBatchCardStatus `json:"status"`
	// 成功件数\
	// \
	// 今回の一括決済課金において成功した決済の件数です。.
	SucceededCount OptString `json:"succeeded_count"`
	// 失敗件数\
	// \
	// 今回の一括決済課金において失敗した決済の件数です。.
	FailedCount OptString `json:"failed_count"`
	// 合計件数\
	// \
	// 今回の一括決済課金において発生した決済の合計件数です。.
	TotalCount OptString                                  `json:"total_count"`
	PayType    OptWebhookEventPaymentBulkBatchCardPayType `json:"pay_type"`
	Event      OptWebhookEventPaymentBulkBatchCardEvent   `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventPaymentBulkBatchCard) GetShopID() OptString {
	return s.ShopID
}

// GetBulkPaymentID returns the value of BulkPaymentID.
func (s *WebhookEventPaymentBulkBatchCard) GetBulkPaymentID() OptNilString {
	return s.BulkPaymentID
}

// GetFileName returns the value of FileName.
func (s *WebhookEventPaymentBulkBatchCard) GetFileName() OptString {
	return s.FileName
}

// GetStatus returns the value of Status.
func (s *WebhookEventPaymentBulkBatchCard) GetStatus() OptWebhookEventPaymentBulkBatchCardStatus {
	return s.Status
}

// GetSucceededCount returns the value of SucceededCount.
func (s *WebhookEventPaymentBulkBatchCard) GetSucceededCount() OptString {
	return s.SucceededCount
}

// GetFailedCount returns the value of FailedCount.
func (s *WebhookEventPaymentBulkBatchCard) GetFailedCount() OptString {
	return s.FailedCount
}

// GetTotalCount returns the value of TotalCount.
func (s *WebhookEventPaymentBulkBatchCard) GetTotalCount() OptString {
	return s.TotalCount
}

// GetPayType returns the value of PayType.
func (s *WebhookEventPaymentBulkBatchCard) GetPayType() OptWebhookEventPaymentBulkBatchCardPayType {
	return s.PayType
}

// GetEvent returns the value of Event.
func (s *WebhookEventPaymentBulkBatchCard) GetEvent() OptWebhookEventPaymentBulkBatchCardEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventPaymentBulkBatchCard) SetShopID(val OptString) {
	s.ShopID = val
}

// SetBulkPaymentID sets the value of BulkPaymentID.
func (s *WebhookEventPaymentBulkBatchCard) SetBulkPaymentID(val OptNilString) {
	s.BulkPaymentID = val
}

// SetFileName sets the value of FileName.
func (s *WebhookEventPaymentBulkBatchCard) SetFileName(val OptString) {
	s.FileName = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventPaymentBulkBatchCard) SetStatus(val OptWebhookEventPaymentBulkBatchCardStatus) {
	s.Status = val
}

// SetSucceededCount sets the value of SucceededCount.
func (s *WebhookEventPaymentBulkBatchCard) SetSucceededCount(val OptString) {
	s.SucceededCount = val
}

// SetFailedCount sets the value of FailedCount.
func (s *WebhookEventPaymentBulkBatchCard) SetFailedCount(val OptString) {
	s.FailedCount = val
}

// SetTotalCount sets the value of TotalCount.
func (s *WebhookEventPaymentBulkBatchCard) SetTotalCount(val OptString) {
	s.TotalCount = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventPaymentBulkBatchCard) SetPayType(val OptWebhookEventPaymentBulkBatchCardPayType) {
	s.PayType = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventPaymentBulkBatchCard) SetEvent(val OptWebhookEventPaymentBulkBatchCardEvent) {
	s.Event = val
}

// Webhook通知 トリガーイベント.
type WebhookEventPaymentBulkBatchCardEvent string

const (
	WebhookEventPaymentBulkBatchCardEventPaymentsCardRegist                WebhookEventPaymentBulkBatchCardEvent = "payments.card.regist"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardExec                  WebhookEventPaymentBulkBatchCardEvent = "payments.card.exec"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardCapture               WebhookEventPaymentBulkBatchCardEvent = "payments.card.capture"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardCancel                WebhookEventPaymentBulkBatchCardEvent = "payments.card.cancel"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardAuth                  WebhookEventPaymentBulkBatchCardEvent = "payments.card.auth"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardChange                WebhookEventPaymentBulkBatchCardEvent = "payments.card.change"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Authenticate   WebhookEventPaymentBulkBatchCardEvent = "payments.card.secure2.authenticate"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Result         WebhookEventPaymentBulkBatchCardEvent = "payments.card.secure2.result"
	WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure                WebhookEventPaymentBulkBatchCardEvent = "payments.card.secure"
	WebhookEventPaymentBulkBatchCardEventPaymentsApplepayRegist            WebhookEventPaymentBulkBatchCardEvent = "payments.applepay.regist"
	WebhookEventPaymentBulkBatchCardEventPaymentsApplepayExec              WebhookEventPaymentBulkBatchCardEvent = "payments.applepay.exec"
	WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCapture           WebhookEventPaymentBulkBatchCardEvent = "payments.applepay.capture"
	WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCancel            WebhookEventPaymentBulkBatchCardEvent = "payments.applepay.cancel"
	WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniRegist             WebhookEventPaymentBulkBatchCardEvent = "payments.konbini.regist"
	WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExec               WebhookEventPaymentBulkBatchCardEvent = "payments.konbini.exec"
	WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCancel             WebhookEventPaymentBulkBatchCardEvent = "payments.konbini.cancel"
	WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniComplete           WebhookEventPaymentBulkBatchCardEvent = "payments.konbini.complete"
	WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCompleteStub       WebhookEventPaymentBulkBatchCardEvent = "payments.konbini.complete.stub"
	WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExpiredUpdateBatch WebhookEventPaymentBulkBatchCardEvent = "payments.konbini.expired.update.batch"
	WebhookEventPaymentBulkBatchCardEventPaymentsPaypayRegist              WebhookEventPaymentBulkBatchCardEvent = "payments.paypay.regist"
	WebhookEventPaymentBulkBatchCardEventPaymentsPaypayExec                WebhookEventPaymentBulkBatchCardEvent = "payments.paypay.exec"
	WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCapture             WebhookEventPaymentBulkBatchCardEvent = "payments.paypay.capture"
	WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCancel              WebhookEventPaymentBulkBatchCardEvent = "payments.paypay.cancel"
	WebhookEventPaymentBulkBatchCardEventPaymentsPaypayChange              WebhookEventPaymentBulkBatchCardEvent = "payments.paypay.change"
	WebhookEventPaymentBulkBatchCardEventPaymentsPaypayComplete            WebhookEventPaymentBulkBatchCardEvent = "payments.paypay.complete"
	WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitRegist         WebhookEventPaymentBulkBatchCardEvent = "payments.directdebit.regist"
	WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitExec           WebhookEventPaymentBulkBatchCardEvent = "payments.directdebit.exec"
	WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCancel         WebhookEventPaymentBulkBatchCardEvent = "payments.directdebit.cancel"
	WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitChange         WebhookEventPaymentBulkBatchCardEvent = "payments.directdebit.change"
	WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitComplete       WebhookEventPaymentBulkBatchCardEvent = "payments.directdebit.complete"
	WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCompleteStub   WebhookEventPaymentBulkBatchCardEvent = "payments.directdebit.complete.stub"
	WebhookEventPaymentBulkBatchCardEventCustomersPaymentMethodsUpdated    WebhookEventPaymentBulkBatchCardEvent = "customers.payment_methods.updated"
	WebhookEventPaymentBulkBatchCardEventCardRegist                        WebhookEventPaymentBulkBatchCardEvent = "card.regist"
	WebhookEventPaymentBulkBatchCardEventCardUpdate                        WebhookEventPaymentBulkBatchCardEvent = "card.update"
	WebhookEventPaymentBulkBatchCardEventSubscriptionCardRegist            WebhookEventPaymentBulkBatchCardEvent = "subscription.card.regist"
	WebhookEventPaymentBulkBatchCardEventSubscriptionCardDelete            WebhookEventPaymentBulkBatchCardEvent = "subscription.card.delete"
	WebhookEventPaymentBulkBatchCardEventSubscriptionCardUpdate            WebhookEventPaymentBulkBatchCardEvent = "subscription.card.update"
	WebhookEventPaymentBulkBatchCardEventRecurringCardBatch                WebhookEventPaymentBulkBatchCardEvent = "recurring.card.batch"
	WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitRegist     WebhookEventPaymentBulkBatchCardEvent = "subscription.directdebit.regist"
	WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitDelete     WebhookEventPaymentBulkBatchCardEvent = "subscription.directdebit.delete"
	WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitUpdate     WebhookEventPaymentBulkBatchCardEvent = "subscription.directdebit.update"
	WebhookEventPaymentBulkBatchCardEventRecurringDirectdebitBatch         WebhookEventPaymentBulkBatchCardEvent = "recurring.directdebit.batch"
	WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardRegist            WebhookEventPaymentBulkBatchCardEvent = "payments.bulk.card.regist"
	WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardBatch             WebhookEventPaymentBulkBatchCardEvent = "payments.bulk.card.batch"
	WebhookEventPaymentBulkBatchCardEventContractsStatusCodeUpdated        WebhookEventPaymentBulkBatchCardEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventPaymentBulkBatchCardEvent values.
func (WebhookEventPaymentBulkBatchCardEvent) AllValues() []WebhookEventPaymentBulkBatchCardEvent {
	return []WebhookEventPaymentBulkBatchCardEvent{
		WebhookEventPaymentBulkBatchCardEventPaymentsCardRegist,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardExec,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardCapture,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardCancel,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardAuth,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardChange,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Authenticate,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Result,
		WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure,
		WebhookEventPaymentBulkBatchCardEventPaymentsApplepayRegist,
		WebhookEventPaymentBulkBatchCardEventPaymentsApplepayExec,
		WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCapture,
		WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCancel,
		WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniRegist,
		WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExec,
		WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCancel,
		WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniComplete,
		WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCompleteStub,
		WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventPaymentBulkBatchCardEventPaymentsPaypayRegist,
		WebhookEventPaymentBulkBatchCardEventPaymentsPaypayExec,
		WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCapture,
		WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCancel,
		WebhookEventPaymentBulkBatchCardEventPaymentsPaypayChange,
		WebhookEventPaymentBulkBatchCardEventPaymentsPaypayComplete,
		WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitRegist,
		WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitExec,
		WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCancel,
		WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitChange,
		WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitComplete,
		WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCompleteStub,
		WebhookEventPaymentBulkBatchCardEventCustomersPaymentMethodsUpdated,
		WebhookEventPaymentBulkBatchCardEventCardRegist,
		WebhookEventPaymentBulkBatchCardEventCardUpdate,
		WebhookEventPaymentBulkBatchCardEventSubscriptionCardRegist,
		WebhookEventPaymentBulkBatchCardEventSubscriptionCardDelete,
		WebhookEventPaymentBulkBatchCardEventSubscriptionCardUpdate,
		WebhookEventPaymentBulkBatchCardEventRecurringCardBatch,
		WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitRegist,
		WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitDelete,
		WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitUpdate,
		WebhookEventPaymentBulkBatchCardEventRecurringDirectdebitBatch,
		WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardRegist,
		WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardBatch,
		WebhookEventPaymentBulkBatchCardEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentBulkBatchCardEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentBulkBatchCardEvent) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentBulkBatchCardEvent(data) {
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardExec
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardCapture:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardCapture
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardCancel
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardAuth:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardAuth
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardChange:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardChange
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Result
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayExec
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCapture
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCancel
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExec
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCancel
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniComplete
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayExec
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCapture
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCancel
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayChange:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayChange
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayComplete
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitExec
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitChange
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventPaymentBulkBatchCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentBulkBatchCardEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventPaymentBulkBatchCardEventCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventCardRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventCardUpdate:
		*s = WebhookEventPaymentBulkBatchCardEventCardUpdate
		return nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionCardRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardDelete:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionCardDelete
		return nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionCardUpdate
		return nil
	case WebhookEventPaymentBulkBatchCardEventRecurringCardBatch:
		*s = WebhookEventPaymentBulkBatchCardEventRecurringCardBatch
		return nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventPaymentBulkBatchCardEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentBulkBatchCardEventRecurringDirectdebitBatch
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardRegist
		return nil
	case WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardBatch
		return nil
	case WebhookEventPaymentBulkBatchCardEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentBulkBatchCardEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（一括決済に対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード.
type WebhookEventPaymentBulkBatchCardPayType string

const (
	WebhookEventPaymentBulkBatchCardPayTypeCard WebhookEventPaymentBulkBatchCardPayType = "Card"
)

// AllValues returns all WebhookEventPaymentBulkBatchCardPayType values.
func (WebhookEventPaymentBulkBatchCardPayType) AllValues() []WebhookEventPaymentBulkBatchCardPayType {
	return []WebhookEventPaymentBulkBatchCardPayType{
		WebhookEventPaymentBulkBatchCardPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentBulkBatchCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentBulkBatchCardPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentBulkBatchCardPayType) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentBulkBatchCardPayType(data) {
	case WebhookEventPaymentBulkBatchCardPayTypeCard:
		*s = WebhookEventPaymentBulkBatchCardPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 一括決済 ステータス
// - `CHECKING`: チェック中<br /><span
// class="smallText">アップロードした一括決済リクエストデータの形式などをチェック中</span>
// - `CHECKED`: チェック済み<br /><span
// class="smallText">データのチェックが完了し、決済処理の実行を待っています。</span>
// - `RUNNING`: 決済処理中<br /><span class="smallText">一括決済処理が実行中</span>
// - `COMPLETED`: 完了
// - `ERROR`: エラー<br /><span
// class="smallText">決済処理中に1件以上のエラーが発生</span>.
type WebhookEventPaymentBulkBatchCardStatus string

const (
	WebhookEventPaymentBulkBatchCardStatusCHECKING  WebhookEventPaymentBulkBatchCardStatus = "CHECKING"
	WebhookEventPaymentBulkBatchCardStatusCHECKED   WebhookEventPaymentBulkBatchCardStatus = "CHECKED"
	WebhookEventPaymentBulkBatchCardStatusRUNNING   WebhookEventPaymentBulkBatchCardStatus = "RUNNING"
	WebhookEventPaymentBulkBatchCardStatusCOMPLETED WebhookEventPaymentBulkBatchCardStatus = "COMPLETED"
	WebhookEventPaymentBulkBatchCardStatusERROR     WebhookEventPaymentBulkBatchCardStatus = "ERROR"
)

// AllValues returns all WebhookEventPaymentBulkBatchCardStatus values.
func (WebhookEventPaymentBulkBatchCardStatus) AllValues() []WebhookEventPaymentBulkBatchCardStatus {
	return []WebhookEventPaymentBulkBatchCardStatus{
		WebhookEventPaymentBulkBatchCardStatusCHECKING,
		WebhookEventPaymentBulkBatchCardStatusCHECKED,
		WebhookEventPaymentBulkBatchCardStatusRUNNING,
		WebhookEventPaymentBulkBatchCardStatusCOMPLETED,
		WebhookEventPaymentBulkBatchCardStatusERROR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentBulkBatchCardStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentBulkBatchCardStatusCHECKING:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardStatusCHECKED:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardStatusRUNNING:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardStatusCOMPLETED:
		return []byte(s), nil
	case WebhookEventPaymentBulkBatchCardStatusERROR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentBulkBatchCardStatus) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentBulkBatchCardStatus(data) {
	case WebhookEventPaymentBulkBatchCardStatusCHECKING:
		*s = WebhookEventPaymentBulkBatchCardStatusCHECKING
		return nil
	case WebhookEventPaymentBulkBatchCardStatusCHECKED:
		*s = WebhookEventPaymentBulkBatchCardStatusCHECKED
		return nil
	case WebhookEventPaymentBulkBatchCardStatusRUNNING:
		*s = WebhookEventPaymentBulkBatchCardStatusRUNNING
		return nil
	case WebhookEventPaymentBulkBatchCardStatusCOMPLETED:
		*s = WebhookEventPaymentBulkBatchCardStatusCOMPLETED
		return nil
	case WebhookEventPaymentBulkBatchCardStatusERROR:
		*s = WebhookEventPaymentBulkBatchCardStatusERROR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.PaymentBulk.Regist.Card
type WebhookEventPaymentBulkRegistCard struct {
	ShopID        OptString                                  `json:"shop_id"`
	BulkPaymentID OptNilString                               `json:"bulk_payment_id"`
	FileName      OptString                                  `json:"file_name"`
	Status        OptWebhookEventPaymentBulkRegistCardStatus `json:"status"`
	// 総件数\
	// \
	// この一括決済に登録された決済の件数です。.
	RegistTotalCount OptString `json:"regist_total_count"`
	// エラー件数\
	// \
	// この一括決済においてエラーが発生した決済の件数です。.
	ErrorTotalCount OptString                                   `json:"error_total_count"`
	PayType         OptWebhookEventPaymentBulkRegistCardPayType `json:"pay_type"`
	// この一括決済の一括決済 詳細情報一覧取得APIのURLです。.
	BulkSearchURL OptString `json:"bulk_search_url"`
	// この一括決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString                              `json:"error_code"`
	Event     OptWebhookEventPaymentBulkRegistCardEvent `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventPaymentBulkRegistCard) GetShopID() OptString {
	return s.ShopID
}

// GetBulkPaymentID returns the value of BulkPaymentID.
func (s *WebhookEventPaymentBulkRegistCard) GetBulkPaymentID() OptNilString {
	return s.BulkPaymentID
}

// GetFileName returns the value of FileName.
func (s *WebhookEventPaymentBulkRegistCard) GetFileName() OptString {
	return s.FileName
}

// GetStatus returns the value of Status.
func (s *WebhookEventPaymentBulkRegistCard) GetStatus() OptWebhookEventPaymentBulkRegistCardStatus {
	return s.Status
}

// GetRegistTotalCount returns the value of RegistTotalCount.
func (s *WebhookEventPaymentBulkRegistCard) GetRegistTotalCount() OptString {
	return s.RegistTotalCount
}

// GetErrorTotalCount returns the value of ErrorTotalCount.
func (s *WebhookEventPaymentBulkRegistCard) GetErrorTotalCount() OptString {
	return s.ErrorTotalCount
}

// GetPayType returns the value of PayType.
func (s *WebhookEventPaymentBulkRegistCard) GetPayType() OptWebhookEventPaymentBulkRegistCardPayType {
	return s.PayType
}

// GetBulkSearchURL returns the value of BulkSearchURL.
func (s *WebhookEventPaymentBulkRegistCard) GetBulkSearchURL() OptString {
	return s.BulkSearchURL
}

// GetErrorCode returns the value of ErrorCode.
func (s *WebhookEventPaymentBulkRegistCard) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetEvent returns the value of Event.
func (s *WebhookEventPaymentBulkRegistCard) GetEvent() OptWebhookEventPaymentBulkRegistCardEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventPaymentBulkRegistCard) SetShopID(val OptString) {
	s.ShopID = val
}

// SetBulkPaymentID sets the value of BulkPaymentID.
func (s *WebhookEventPaymentBulkRegistCard) SetBulkPaymentID(val OptNilString) {
	s.BulkPaymentID = val
}

// SetFileName sets the value of FileName.
func (s *WebhookEventPaymentBulkRegistCard) SetFileName(val OptString) {
	s.FileName = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventPaymentBulkRegistCard) SetStatus(val OptWebhookEventPaymentBulkRegistCardStatus) {
	s.Status = val
}

// SetRegistTotalCount sets the value of RegistTotalCount.
func (s *WebhookEventPaymentBulkRegistCard) SetRegistTotalCount(val OptString) {
	s.RegistTotalCount = val
}

// SetErrorTotalCount sets the value of ErrorTotalCount.
func (s *WebhookEventPaymentBulkRegistCard) SetErrorTotalCount(val OptString) {
	s.ErrorTotalCount = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventPaymentBulkRegistCard) SetPayType(val OptWebhookEventPaymentBulkRegistCardPayType) {
	s.PayType = val
}

// SetBulkSearchURL sets the value of BulkSearchURL.
func (s *WebhookEventPaymentBulkRegistCard) SetBulkSearchURL(val OptString) {
	s.BulkSearchURL = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *WebhookEventPaymentBulkRegistCard) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventPaymentBulkRegistCard) SetEvent(val OptWebhookEventPaymentBulkRegistCardEvent) {
	s.Event = val
}

// Webhook通知 トリガーイベント.
type WebhookEventPaymentBulkRegistCardEvent string

const (
	WebhookEventPaymentBulkRegistCardEventPaymentsCardRegist                WebhookEventPaymentBulkRegistCardEvent = "payments.card.regist"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardExec                  WebhookEventPaymentBulkRegistCardEvent = "payments.card.exec"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardCapture               WebhookEventPaymentBulkRegistCardEvent = "payments.card.capture"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardCancel                WebhookEventPaymentBulkRegistCardEvent = "payments.card.cancel"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardAuth                  WebhookEventPaymentBulkRegistCardEvent = "payments.card.auth"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardChange                WebhookEventPaymentBulkRegistCardEvent = "payments.card.change"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Authenticate   WebhookEventPaymentBulkRegistCardEvent = "payments.card.secure2.authenticate"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Result         WebhookEventPaymentBulkRegistCardEvent = "payments.card.secure2.result"
	WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure                WebhookEventPaymentBulkRegistCardEvent = "payments.card.secure"
	WebhookEventPaymentBulkRegistCardEventPaymentsApplepayRegist            WebhookEventPaymentBulkRegistCardEvent = "payments.applepay.regist"
	WebhookEventPaymentBulkRegistCardEventPaymentsApplepayExec              WebhookEventPaymentBulkRegistCardEvent = "payments.applepay.exec"
	WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCapture           WebhookEventPaymentBulkRegistCardEvent = "payments.applepay.capture"
	WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCancel            WebhookEventPaymentBulkRegistCardEvent = "payments.applepay.cancel"
	WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniRegist             WebhookEventPaymentBulkRegistCardEvent = "payments.konbini.regist"
	WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExec               WebhookEventPaymentBulkRegistCardEvent = "payments.konbini.exec"
	WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCancel             WebhookEventPaymentBulkRegistCardEvent = "payments.konbini.cancel"
	WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniComplete           WebhookEventPaymentBulkRegistCardEvent = "payments.konbini.complete"
	WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCompleteStub       WebhookEventPaymentBulkRegistCardEvent = "payments.konbini.complete.stub"
	WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExpiredUpdateBatch WebhookEventPaymentBulkRegistCardEvent = "payments.konbini.expired.update.batch"
	WebhookEventPaymentBulkRegistCardEventPaymentsPaypayRegist              WebhookEventPaymentBulkRegistCardEvent = "payments.paypay.regist"
	WebhookEventPaymentBulkRegistCardEventPaymentsPaypayExec                WebhookEventPaymentBulkRegistCardEvent = "payments.paypay.exec"
	WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCapture             WebhookEventPaymentBulkRegistCardEvent = "payments.paypay.capture"
	WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCancel              WebhookEventPaymentBulkRegistCardEvent = "payments.paypay.cancel"
	WebhookEventPaymentBulkRegistCardEventPaymentsPaypayChange              WebhookEventPaymentBulkRegistCardEvent = "payments.paypay.change"
	WebhookEventPaymentBulkRegistCardEventPaymentsPaypayComplete            WebhookEventPaymentBulkRegistCardEvent = "payments.paypay.complete"
	WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitRegist         WebhookEventPaymentBulkRegistCardEvent = "payments.directdebit.regist"
	WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitExec           WebhookEventPaymentBulkRegistCardEvent = "payments.directdebit.exec"
	WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCancel         WebhookEventPaymentBulkRegistCardEvent = "payments.directdebit.cancel"
	WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitChange         WebhookEventPaymentBulkRegistCardEvent = "payments.directdebit.change"
	WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitComplete       WebhookEventPaymentBulkRegistCardEvent = "payments.directdebit.complete"
	WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCompleteStub   WebhookEventPaymentBulkRegistCardEvent = "payments.directdebit.complete.stub"
	WebhookEventPaymentBulkRegistCardEventCustomersPaymentMethodsUpdated    WebhookEventPaymentBulkRegistCardEvent = "customers.payment_methods.updated"
	WebhookEventPaymentBulkRegistCardEventCardRegist                        WebhookEventPaymentBulkRegistCardEvent = "card.regist"
	WebhookEventPaymentBulkRegistCardEventCardUpdate                        WebhookEventPaymentBulkRegistCardEvent = "card.update"
	WebhookEventPaymentBulkRegistCardEventSubscriptionCardRegist            WebhookEventPaymentBulkRegistCardEvent = "subscription.card.regist"
	WebhookEventPaymentBulkRegistCardEventSubscriptionCardDelete            WebhookEventPaymentBulkRegistCardEvent = "subscription.card.delete"
	WebhookEventPaymentBulkRegistCardEventSubscriptionCardUpdate            WebhookEventPaymentBulkRegistCardEvent = "subscription.card.update"
	WebhookEventPaymentBulkRegistCardEventRecurringCardBatch                WebhookEventPaymentBulkRegistCardEvent = "recurring.card.batch"
	WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitRegist     WebhookEventPaymentBulkRegistCardEvent = "subscription.directdebit.regist"
	WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitDelete     WebhookEventPaymentBulkRegistCardEvent = "subscription.directdebit.delete"
	WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitUpdate     WebhookEventPaymentBulkRegistCardEvent = "subscription.directdebit.update"
	WebhookEventPaymentBulkRegistCardEventRecurringDirectdebitBatch         WebhookEventPaymentBulkRegistCardEvent = "recurring.directdebit.batch"
	WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardRegist            WebhookEventPaymentBulkRegistCardEvent = "payments.bulk.card.regist"
	WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardBatch             WebhookEventPaymentBulkRegistCardEvent = "payments.bulk.card.batch"
	WebhookEventPaymentBulkRegistCardEventContractsStatusCodeUpdated        WebhookEventPaymentBulkRegistCardEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventPaymentBulkRegistCardEvent values.
func (WebhookEventPaymentBulkRegistCardEvent) AllValues() []WebhookEventPaymentBulkRegistCardEvent {
	return []WebhookEventPaymentBulkRegistCardEvent{
		WebhookEventPaymentBulkRegistCardEventPaymentsCardRegist,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardExec,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardCapture,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardCancel,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardAuth,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardChange,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Authenticate,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Result,
		WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure,
		WebhookEventPaymentBulkRegistCardEventPaymentsApplepayRegist,
		WebhookEventPaymentBulkRegistCardEventPaymentsApplepayExec,
		WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCapture,
		WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCancel,
		WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniRegist,
		WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExec,
		WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCancel,
		WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniComplete,
		WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCompleteStub,
		WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventPaymentBulkRegistCardEventPaymentsPaypayRegist,
		WebhookEventPaymentBulkRegistCardEventPaymentsPaypayExec,
		WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCapture,
		WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCancel,
		WebhookEventPaymentBulkRegistCardEventPaymentsPaypayChange,
		WebhookEventPaymentBulkRegistCardEventPaymentsPaypayComplete,
		WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitRegist,
		WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitExec,
		WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCancel,
		WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitChange,
		WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitComplete,
		WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCompleteStub,
		WebhookEventPaymentBulkRegistCardEventCustomersPaymentMethodsUpdated,
		WebhookEventPaymentBulkRegistCardEventCardRegist,
		WebhookEventPaymentBulkRegistCardEventCardUpdate,
		WebhookEventPaymentBulkRegistCardEventSubscriptionCardRegist,
		WebhookEventPaymentBulkRegistCardEventSubscriptionCardDelete,
		WebhookEventPaymentBulkRegistCardEventSubscriptionCardUpdate,
		WebhookEventPaymentBulkRegistCardEventRecurringCardBatch,
		WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitRegist,
		WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitDelete,
		WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitUpdate,
		WebhookEventPaymentBulkRegistCardEventRecurringDirectdebitBatch,
		WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardRegist,
		WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardBatch,
		WebhookEventPaymentBulkRegistCardEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentBulkRegistCardEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentBulkRegistCardEvent) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentBulkRegistCardEvent(data) {
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardExec
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardCapture:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardCapture
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardCancel
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardAuth:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardAuth
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardChange:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardChange
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Result
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayExec
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCapture
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCancel
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExec
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCancel
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniComplete
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayExec
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCapture
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCancel
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayChange:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayChange
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayComplete
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitExec
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitChange
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventPaymentBulkRegistCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentBulkRegistCardEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventPaymentBulkRegistCardEventCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventCardRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventCardUpdate:
		*s = WebhookEventPaymentBulkRegistCardEventCardUpdate
		return nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionCardRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardDelete:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionCardDelete
		return nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionCardUpdate
		return nil
	case WebhookEventPaymentBulkRegistCardEventRecurringCardBatch:
		*s = WebhookEventPaymentBulkRegistCardEventRecurringCardBatch
		return nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventPaymentBulkRegistCardEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentBulkRegistCardEventRecurringDirectdebitBatch
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardRegist
		return nil
	case WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardBatch
		return nil
	case WebhookEventPaymentBulkRegistCardEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentBulkRegistCardEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（一括決済に対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード.
type WebhookEventPaymentBulkRegistCardPayType string

const (
	WebhookEventPaymentBulkRegistCardPayTypeCard WebhookEventPaymentBulkRegistCardPayType = "Card"
)

// AllValues returns all WebhookEventPaymentBulkRegistCardPayType values.
func (WebhookEventPaymentBulkRegistCardPayType) AllValues() []WebhookEventPaymentBulkRegistCardPayType {
	return []WebhookEventPaymentBulkRegistCardPayType{
		WebhookEventPaymentBulkRegistCardPayTypeCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentBulkRegistCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentBulkRegistCardPayTypeCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentBulkRegistCardPayType) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentBulkRegistCardPayType(data) {
	case WebhookEventPaymentBulkRegistCardPayTypeCard:
		*s = WebhookEventPaymentBulkRegistCardPayTypeCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 一括決済 ステータス
// - `CHECKING`: チェック中<br /><span
// class="smallText">アップロードした一括決済リクエストデータの形式などをチェック中</span>
// - `CHECKED`: チェック済み<br /><span
// class="smallText">データのチェックが完了し、決済処理の実行を待っています。</span>
// - `RUNNING`: 決済処理中<br /><span class="smallText">一括決済処理が実行中</span>
// - `COMPLETED`: 完了
// - `ERROR`: エラー<br /><span
// class="smallText">決済処理中に1件以上のエラーが発生</span>.
type WebhookEventPaymentBulkRegistCardStatus string

const (
	WebhookEventPaymentBulkRegistCardStatusCHECKING  WebhookEventPaymentBulkRegistCardStatus = "CHECKING"
	WebhookEventPaymentBulkRegistCardStatusCHECKED   WebhookEventPaymentBulkRegistCardStatus = "CHECKED"
	WebhookEventPaymentBulkRegistCardStatusRUNNING   WebhookEventPaymentBulkRegistCardStatus = "RUNNING"
	WebhookEventPaymentBulkRegistCardStatusCOMPLETED WebhookEventPaymentBulkRegistCardStatus = "COMPLETED"
	WebhookEventPaymentBulkRegistCardStatusERROR     WebhookEventPaymentBulkRegistCardStatus = "ERROR"
)

// AllValues returns all WebhookEventPaymentBulkRegistCardStatus values.
func (WebhookEventPaymentBulkRegistCardStatus) AllValues() []WebhookEventPaymentBulkRegistCardStatus {
	return []WebhookEventPaymentBulkRegistCardStatus{
		WebhookEventPaymentBulkRegistCardStatusCHECKING,
		WebhookEventPaymentBulkRegistCardStatusCHECKED,
		WebhookEventPaymentBulkRegistCardStatusRUNNING,
		WebhookEventPaymentBulkRegistCardStatusCOMPLETED,
		WebhookEventPaymentBulkRegistCardStatusERROR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentBulkRegistCardStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentBulkRegistCardStatusCHECKING:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardStatusCHECKED:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardStatusRUNNING:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardStatusCOMPLETED:
		return []byte(s), nil
	case WebhookEventPaymentBulkRegistCardStatusERROR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentBulkRegistCardStatus) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentBulkRegistCardStatus(data) {
	case WebhookEventPaymentBulkRegistCardStatusCHECKING:
		*s = WebhookEventPaymentBulkRegistCardStatusCHECKING
		return nil
	case WebhookEventPaymentBulkRegistCardStatusCHECKED:
		*s = WebhookEventPaymentBulkRegistCardStatusCHECKED
		return nil
	case WebhookEventPaymentBulkRegistCardStatusRUNNING:
		*s = WebhookEventPaymentBulkRegistCardStatusRUNNING
		return nil
	case WebhookEventPaymentBulkRegistCardStatusCOMPLETED:
		*s = WebhookEventPaymentBulkRegistCardStatusCOMPLETED
		return nil
	case WebhookEventPaymentBulkRegistCardStatusERROR:
		*s = WebhookEventPaymentBulkRegistCardStatusERROR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Payment.Card
type WebhookEventPaymentCard struct {
	ShopID   OptString `json:"shop_id"`
	OrderID  OptString `json:"order_id"`
	AccessID OptString `json:"access_id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Card`: クレジットカード/デビットカード/プリペイドカード.
	PayType OptWebhookEventPaymentCardPayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `CHECKED`: 有効性チェック済み<br /><span
	// class="smallText">カードの有効性チェックが完了しています。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上として与信枠の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）<br /><span
	// class="smallText">3Dセキュア認証を使用する決済を実行した直後の状態です。認証後決済実行を行うまで請求や仮売上はされません。</span>.
	Status     OptWebhookEventPaymentCardStatus `json:"status"`
	CustomerID OptNilString                     `json:"customer_id"`
	Method     OptWebhookEventPaymentCardMethod `json:"method"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 利用金額.
	Amount OptString `json:"amount"`
	// 税送料.
	Tax            OptString                          `json:"tax"`
	Currency       OptWebhookEventPaymentCardCurrency `json:"currency"`
	JobCode        OptWebhookEventPaymentCardJobCode  `json:"job_code"`
	SubscriptionID OptNilString                       `json:"subscription_id"`
	BulkPaymentID  OptString                          `json:"bulk_payment_id"`
	Forward        *NilString                         `json:"forward"`
	TransactionID  *NilString                         `json:"transaction_id"`
	// 決済 処理日時.
	TransactionDate OptNilString `json:"transaction_date"`
	Approve         *NilString   `json:"approve"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString                    `json:"error_code"`
	Event     OptWebhookEventPaymentCardEvent `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventPaymentCard) GetShopID() OptString {
	return s.ShopID
}

// GetOrderID returns the value of OrderID.
func (s *WebhookEventPaymentCard) GetOrderID() OptString {
	return s.OrderID
}

// GetAccessID returns the value of AccessID.
func (s *WebhookEventPaymentCard) GetAccessID() OptString {
	return s.AccessID
}

// GetPayType returns the value of PayType.
func (s *WebhookEventPaymentCard) GetPayType() OptWebhookEventPaymentCardPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *WebhookEventPaymentCard) GetStatus() OptWebhookEventPaymentCardStatus {
	return s.Status
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventPaymentCard) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetMethod returns the value of Method.
func (s *WebhookEventPaymentCard) GetMethod() OptWebhookEventPaymentCardMethod {
	return s.Method
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventPaymentCard) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventPaymentCard) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventPaymentCard) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetAmount returns the value of Amount.
func (s *WebhookEventPaymentCard) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *WebhookEventPaymentCard) GetTax() OptString {
	return s.Tax
}

// GetCurrency returns the value of Currency.
func (s *WebhookEventPaymentCard) GetCurrency() OptWebhookEventPaymentCardCurrency {
	return s.Currency
}

// GetJobCode returns the value of JobCode.
func (s *WebhookEventPaymentCard) GetJobCode() OptWebhookEventPaymentCardJobCode {
	return s.JobCode
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *WebhookEventPaymentCard) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetBulkPaymentID returns the value of BulkPaymentID.
func (s *WebhookEventPaymentCard) GetBulkPaymentID() OptString {
	return s.BulkPaymentID
}

// GetForward returns the value of Forward.
func (s *WebhookEventPaymentCard) GetForward() *NilString {
	return s.Forward
}

// GetTransactionID returns the value of TransactionID.
func (s *WebhookEventPaymentCard) GetTransactionID() *NilString {
	return s.TransactionID
}

// GetTransactionDate returns the value of TransactionDate.
func (s *WebhookEventPaymentCard) GetTransactionDate() OptNilString {
	return s.TransactionDate
}

// GetApprove returns the value of Approve.
func (s *WebhookEventPaymentCard) GetApprove() *NilString {
	return s.Approve
}

// GetErrorCode returns the value of ErrorCode.
func (s *WebhookEventPaymentCard) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetEvent returns the value of Event.
func (s *WebhookEventPaymentCard) GetEvent() OptWebhookEventPaymentCardEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventPaymentCard) SetShopID(val OptString) {
	s.ShopID = val
}

// SetOrderID sets the value of OrderID.
func (s *WebhookEventPaymentCard) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetAccessID sets the value of AccessID.
func (s *WebhookEventPaymentCard) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventPaymentCard) SetPayType(val OptWebhookEventPaymentCardPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventPaymentCard) SetStatus(val OptWebhookEventPaymentCardStatus) {
	s.Status = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventPaymentCard) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetMethod sets the value of Method.
func (s *WebhookEventPaymentCard) SetMethod(val OptWebhookEventPaymentCardMethod) {
	s.Method = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventPaymentCard) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventPaymentCard) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventPaymentCard) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetAmount sets the value of Amount.
func (s *WebhookEventPaymentCard) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *WebhookEventPaymentCard) SetTax(val OptString) {
	s.Tax = val
}

// SetCurrency sets the value of Currency.
func (s *WebhookEventPaymentCard) SetCurrency(val OptWebhookEventPaymentCardCurrency) {
	s.Currency = val
}

// SetJobCode sets the value of JobCode.
func (s *WebhookEventPaymentCard) SetJobCode(val OptWebhookEventPaymentCardJobCode) {
	s.JobCode = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *WebhookEventPaymentCard) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetBulkPaymentID sets the value of BulkPaymentID.
func (s *WebhookEventPaymentCard) SetBulkPaymentID(val OptString) {
	s.BulkPaymentID = val
}

// SetForward sets the value of Forward.
func (s *WebhookEventPaymentCard) SetForward(val *NilString) {
	s.Forward = val
}

// SetTransactionID sets the value of TransactionID.
func (s *WebhookEventPaymentCard) SetTransactionID(val *NilString) {
	s.TransactionID = val
}

// SetTransactionDate sets the value of TransactionDate.
func (s *WebhookEventPaymentCard) SetTransactionDate(val OptNilString) {
	s.TransactionDate = val
}

// SetApprove sets the value of Approve.
func (s *WebhookEventPaymentCard) SetApprove(val *NilString) {
	s.Approve = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *WebhookEventPaymentCard) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventPaymentCard) SetEvent(val OptWebhookEventPaymentCardEvent) {
	s.Event = val
}

// 通貨コード\
// この決済で利用された通貨のコードです。
// - `JPY`: 日本円.
type WebhookEventPaymentCardCurrency string

const (
	WebhookEventPaymentCardCurrencyJPY WebhookEventPaymentCardCurrency = "JPY"
)

// AllValues returns all WebhookEventPaymentCardCurrency values.
func (WebhookEventPaymentCardCurrency) AllValues() []WebhookEventPaymentCardCurrency {
	return []WebhookEventPaymentCardCurrency{
		WebhookEventPaymentCardCurrencyJPY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentCardCurrency) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentCardCurrencyJPY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentCardCurrency) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentCardCurrency(data) {
	case WebhookEventPaymentCardCurrencyJPY:
		*s = WebhookEventPaymentCardCurrencyJPY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventPaymentCardEvent string

const (
	WebhookEventPaymentCardEventPaymentsCardRegist                WebhookEventPaymentCardEvent = "payments.card.regist"
	WebhookEventPaymentCardEventPaymentsCardExec                  WebhookEventPaymentCardEvent = "payments.card.exec"
	WebhookEventPaymentCardEventPaymentsCardCapture               WebhookEventPaymentCardEvent = "payments.card.capture"
	WebhookEventPaymentCardEventPaymentsCardCancel                WebhookEventPaymentCardEvent = "payments.card.cancel"
	WebhookEventPaymentCardEventPaymentsCardAuth                  WebhookEventPaymentCardEvent = "payments.card.auth"
	WebhookEventPaymentCardEventPaymentsCardChange                WebhookEventPaymentCardEvent = "payments.card.change"
	WebhookEventPaymentCardEventPaymentsCardSecure2Authenticate   WebhookEventPaymentCardEvent = "payments.card.secure2.authenticate"
	WebhookEventPaymentCardEventPaymentsCardSecure2Result         WebhookEventPaymentCardEvent = "payments.card.secure2.result"
	WebhookEventPaymentCardEventPaymentsCardSecure                WebhookEventPaymentCardEvent = "payments.card.secure"
	WebhookEventPaymentCardEventPaymentsApplepayRegist            WebhookEventPaymentCardEvent = "payments.applepay.regist"
	WebhookEventPaymentCardEventPaymentsApplepayExec              WebhookEventPaymentCardEvent = "payments.applepay.exec"
	WebhookEventPaymentCardEventPaymentsApplepayCapture           WebhookEventPaymentCardEvent = "payments.applepay.capture"
	WebhookEventPaymentCardEventPaymentsApplepayCancel            WebhookEventPaymentCardEvent = "payments.applepay.cancel"
	WebhookEventPaymentCardEventPaymentsKonbiniRegist             WebhookEventPaymentCardEvent = "payments.konbini.regist"
	WebhookEventPaymentCardEventPaymentsKonbiniExec               WebhookEventPaymentCardEvent = "payments.konbini.exec"
	WebhookEventPaymentCardEventPaymentsKonbiniCancel             WebhookEventPaymentCardEvent = "payments.konbini.cancel"
	WebhookEventPaymentCardEventPaymentsKonbiniComplete           WebhookEventPaymentCardEvent = "payments.konbini.complete"
	WebhookEventPaymentCardEventPaymentsKonbiniCompleteStub       WebhookEventPaymentCardEvent = "payments.konbini.complete.stub"
	WebhookEventPaymentCardEventPaymentsKonbiniExpiredUpdateBatch WebhookEventPaymentCardEvent = "payments.konbini.expired.update.batch"
	WebhookEventPaymentCardEventPaymentsPaypayRegist              WebhookEventPaymentCardEvent = "payments.paypay.regist"
	WebhookEventPaymentCardEventPaymentsPaypayExec                WebhookEventPaymentCardEvent = "payments.paypay.exec"
	WebhookEventPaymentCardEventPaymentsPaypayCapture             WebhookEventPaymentCardEvent = "payments.paypay.capture"
	WebhookEventPaymentCardEventPaymentsPaypayCancel              WebhookEventPaymentCardEvent = "payments.paypay.cancel"
	WebhookEventPaymentCardEventPaymentsPaypayChange              WebhookEventPaymentCardEvent = "payments.paypay.change"
	WebhookEventPaymentCardEventPaymentsPaypayComplete            WebhookEventPaymentCardEvent = "payments.paypay.complete"
	WebhookEventPaymentCardEventPaymentsDirectdebitRegist         WebhookEventPaymentCardEvent = "payments.directdebit.regist"
	WebhookEventPaymentCardEventPaymentsDirectdebitExec           WebhookEventPaymentCardEvent = "payments.directdebit.exec"
	WebhookEventPaymentCardEventPaymentsDirectdebitCancel         WebhookEventPaymentCardEvent = "payments.directdebit.cancel"
	WebhookEventPaymentCardEventPaymentsDirectdebitChange         WebhookEventPaymentCardEvent = "payments.directdebit.change"
	WebhookEventPaymentCardEventPaymentsDirectdebitComplete       WebhookEventPaymentCardEvent = "payments.directdebit.complete"
	WebhookEventPaymentCardEventPaymentsDirectdebitCompleteStub   WebhookEventPaymentCardEvent = "payments.directdebit.complete.stub"
	WebhookEventPaymentCardEventCustomersPaymentMethodsUpdated    WebhookEventPaymentCardEvent = "customers.payment_methods.updated"
	WebhookEventPaymentCardEventCardRegist                        WebhookEventPaymentCardEvent = "card.regist"
	WebhookEventPaymentCardEventCardUpdate                        WebhookEventPaymentCardEvent = "card.update"
	WebhookEventPaymentCardEventSubscriptionCardRegist            WebhookEventPaymentCardEvent = "subscription.card.regist"
	WebhookEventPaymentCardEventSubscriptionCardDelete            WebhookEventPaymentCardEvent = "subscription.card.delete"
	WebhookEventPaymentCardEventSubscriptionCardUpdate            WebhookEventPaymentCardEvent = "subscription.card.update"
	WebhookEventPaymentCardEventRecurringCardBatch                WebhookEventPaymentCardEvent = "recurring.card.batch"
	WebhookEventPaymentCardEventSubscriptionDirectdebitRegist     WebhookEventPaymentCardEvent = "subscription.directdebit.regist"
	WebhookEventPaymentCardEventSubscriptionDirectdebitDelete     WebhookEventPaymentCardEvent = "subscription.directdebit.delete"
	WebhookEventPaymentCardEventSubscriptionDirectdebitUpdate     WebhookEventPaymentCardEvent = "subscription.directdebit.update"
	WebhookEventPaymentCardEventRecurringDirectdebitBatch         WebhookEventPaymentCardEvent = "recurring.directdebit.batch"
	WebhookEventPaymentCardEventPaymentsBulkCardRegist            WebhookEventPaymentCardEvent = "payments.bulk.card.regist"
	WebhookEventPaymentCardEventPaymentsBulkCardBatch             WebhookEventPaymentCardEvent = "payments.bulk.card.batch"
	WebhookEventPaymentCardEventContractsStatusCodeUpdated        WebhookEventPaymentCardEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventPaymentCardEvent values.
func (WebhookEventPaymentCardEvent) AllValues() []WebhookEventPaymentCardEvent {
	return []WebhookEventPaymentCardEvent{
		WebhookEventPaymentCardEventPaymentsCardRegist,
		WebhookEventPaymentCardEventPaymentsCardExec,
		WebhookEventPaymentCardEventPaymentsCardCapture,
		WebhookEventPaymentCardEventPaymentsCardCancel,
		WebhookEventPaymentCardEventPaymentsCardAuth,
		WebhookEventPaymentCardEventPaymentsCardChange,
		WebhookEventPaymentCardEventPaymentsCardSecure2Authenticate,
		WebhookEventPaymentCardEventPaymentsCardSecure2Result,
		WebhookEventPaymentCardEventPaymentsCardSecure,
		WebhookEventPaymentCardEventPaymentsApplepayRegist,
		WebhookEventPaymentCardEventPaymentsApplepayExec,
		WebhookEventPaymentCardEventPaymentsApplepayCapture,
		WebhookEventPaymentCardEventPaymentsApplepayCancel,
		WebhookEventPaymentCardEventPaymentsKonbiniRegist,
		WebhookEventPaymentCardEventPaymentsKonbiniExec,
		WebhookEventPaymentCardEventPaymentsKonbiniCancel,
		WebhookEventPaymentCardEventPaymentsKonbiniComplete,
		WebhookEventPaymentCardEventPaymentsKonbiniCompleteStub,
		WebhookEventPaymentCardEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventPaymentCardEventPaymentsPaypayRegist,
		WebhookEventPaymentCardEventPaymentsPaypayExec,
		WebhookEventPaymentCardEventPaymentsPaypayCapture,
		WebhookEventPaymentCardEventPaymentsPaypayCancel,
		WebhookEventPaymentCardEventPaymentsPaypayChange,
		WebhookEventPaymentCardEventPaymentsPaypayComplete,
		WebhookEventPaymentCardEventPaymentsDirectdebitRegist,
		WebhookEventPaymentCardEventPaymentsDirectdebitExec,
		WebhookEventPaymentCardEventPaymentsDirectdebitCancel,
		WebhookEventPaymentCardEventPaymentsDirectdebitChange,
		WebhookEventPaymentCardEventPaymentsDirectdebitComplete,
		WebhookEventPaymentCardEventPaymentsDirectdebitCompleteStub,
		WebhookEventPaymentCardEventCustomersPaymentMethodsUpdated,
		WebhookEventPaymentCardEventCardRegist,
		WebhookEventPaymentCardEventCardUpdate,
		WebhookEventPaymentCardEventSubscriptionCardRegist,
		WebhookEventPaymentCardEventSubscriptionCardDelete,
		WebhookEventPaymentCardEventSubscriptionCardUpdate,
		WebhookEventPaymentCardEventRecurringCardBatch,
		WebhookEventPaymentCardEventSubscriptionDirectdebitRegist,
		WebhookEventPaymentCardEventSubscriptionDirectdebitDelete,
		WebhookEventPaymentCardEventSubscriptionDirectdebitUpdate,
		WebhookEventPaymentCardEventRecurringDirectdebitBatch,
		WebhookEventPaymentCardEventPaymentsBulkCardRegist,
		WebhookEventPaymentCardEventPaymentsBulkCardBatch,
		WebhookEventPaymentCardEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentCardEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentCardEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentCardEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventPaymentCardEventCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentCardEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventPaymentCardEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentCardEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentCardEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventPaymentCardEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventPaymentCardEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentCardEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentCardEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentCardEvent) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentCardEvent(data) {
	case WebhookEventPaymentCardEventPaymentsCardRegist:
		*s = WebhookEventPaymentCardEventPaymentsCardRegist
		return nil
	case WebhookEventPaymentCardEventPaymentsCardExec:
		*s = WebhookEventPaymentCardEventPaymentsCardExec
		return nil
	case WebhookEventPaymentCardEventPaymentsCardCapture:
		*s = WebhookEventPaymentCardEventPaymentsCardCapture
		return nil
	case WebhookEventPaymentCardEventPaymentsCardCancel:
		*s = WebhookEventPaymentCardEventPaymentsCardCancel
		return nil
	case WebhookEventPaymentCardEventPaymentsCardAuth:
		*s = WebhookEventPaymentCardEventPaymentsCardAuth
		return nil
	case WebhookEventPaymentCardEventPaymentsCardChange:
		*s = WebhookEventPaymentCardEventPaymentsCardChange
		return nil
	case WebhookEventPaymentCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentCardEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventPaymentCardEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentCardEventPaymentsCardSecure2Result
		return nil
	case WebhookEventPaymentCardEventPaymentsCardSecure:
		*s = WebhookEventPaymentCardEventPaymentsCardSecure
		return nil
	case WebhookEventPaymentCardEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentCardEventPaymentsApplepayRegist
		return nil
	case WebhookEventPaymentCardEventPaymentsApplepayExec:
		*s = WebhookEventPaymentCardEventPaymentsApplepayExec
		return nil
	case WebhookEventPaymentCardEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentCardEventPaymentsApplepayCapture
		return nil
	case WebhookEventPaymentCardEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentCardEventPaymentsApplepayCancel
		return nil
	case WebhookEventPaymentCardEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniRegist
		return nil
	case WebhookEventPaymentCardEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniExec
		return nil
	case WebhookEventPaymentCardEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniCancel
		return nil
	case WebhookEventPaymentCardEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniComplete
		return nil
	case WebhookEventPaymentCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventPaymentCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventPaymentCardEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentCardEventPaymentsPaypayRegist
		return nil
	case WebhookEventPaymentCardEventPaymentsPaypayExec:
		*s = WebhookEventPaymentCardEventPaymentsPaypayExec
		return nil
	case WebhookEventPaymentCardEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentCardEventPaymentsPaypayCapture
		return nil
	case WebhookEventPaymentCardEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentCardEventPaymentsPaypayCancel
		return nil
	case WebhookEventPaymentCardEventPaymentsPaypayChange:
		*s = WebhookEventPaymentCardEventPaymentsPaypayChange
		return nil
	case WebhookEventPaymentCardEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentCardEventPaymentsPaypayComplete
		return nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitExec
		return nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitChange
		return nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventPaymentCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventPaymentCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentCardEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventPaymentCardEventCardRegist:
		*s = WebhookEventPaymentCardEventCardRegist
		return nil
	case WebhookEventPaymentCardEventCardUpdate:
		*s = WebhookEventPaymentCardEventCardUpdate
		return nil
	case WebhookEventPaymentCardEventSubscriptionCardRegist:
		*s = WebhookEventPaymentCardEventSubscriptionCardRegist
		return nil
	case WebhookEventPaymentCardEventSubscriptionCardDelete:
		*s = WebhookEventPaymentCardEventSubscriptionCardDelete
		return nil
	case WebhookEventPaymentCardEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentCardEventSubscriptionCardUpdate
		return nil
	case WebhookEventPaymentCardEventRecurringCardBatch:
		*s = WebhookEventPaymentCardEventRecurringCardBatch
		return nil
	case WebhookEventPaymentCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentCardEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventPaymentCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentCardEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventPaymentCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentCardEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventPaymentCardEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentCardEventRecurringDirectdebitBatch
		return nil
	case WebhookEventPaymentCardEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentCardEventPaymentsBulkCardRegist
		return nil
	case WebhookEventPaymentCardEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentCardEventPaymentsBulkCardBatch
		return nil
	case WebhookEventPaymentCardEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentCardEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか、カードの有効性チェックのみを行うかを指定します。
// - `CHECK`：有効性チェックのみ行う
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type WebhookEventPaymentCardJobCode string

const (
	WebhookEventPaymentCardJobCodeCHECK   WebhookEventPaymentCardJobCode = "CHECK"
	WebhookEventPaymentCardJobCodeAUTH    WebhookEventPaymentCardJobCode = "AUTH"
	WebhookEventPaymentCardJobCodeCAPTURE WebhookEventPaymentCardJobCode = "CAPTURE"
)

// AllValues returns all WebhookEventPaymentCardJobCode values.
func (WebhookEventPaymentCardJobCode) AllValues() []WebhookEventPaymentCardJobCode {
	return []WebhookEventPaymentCardJobCode{
		WebhookEventPaymentCardJobCodeCHECK,
		WebhookEventPaymentCardJobCodeAUTH,
		WebhookEventPaymentCardJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentCardJobCode) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentCardJobCodeCHECK:
		return []byte(s), nil
	case WebhookEventPaymentCardJobCodeAUTH:
		return []byte(s), nil
	case WebhookEventPaymentCardJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentCardJobCode) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentCardJobCode(data) {
	case WebhookEventPaymentCardJobCodeCHECK:
		*s = WebhookEventPaymentCardJobCodeCHECK
		return nil
	case WebhookEventPaymentCardJobCodeAUTH:
		*s = WebhookEventPaymentCardJobCodeAUTH
		return nil
	case WebhookEventPaymentCardJobCodeCAPTURE:
		*s = WebhookEventPaymentCardJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 支払方法
// - `1`: 一括払い
// - `2`: 分割払い
// - `5`: リボ払い.
type WebhookEventPaymentCardMethod string

const (
	WebhookEventPaymentCardMethod1 WebhookEventPaymentCardMethod = "1"
	WebhookEventPaymentCardMethod2 WebhookEventPaymentCardMethod = "2"
	WebhookEventPaymentCardMethod5 WebhookEventPaymentCardMethod = "5"
)

// AllValues returns all WebhookEventPaymentCardMethod values.
func (WebhookEventPaymentCardMethod) AllValues() []WebhookEventPaymentCardMethod {
	return []WebhookEventPaymentCardMethod{
		WebhookEventPaymentCardMethod1,
		WebhookEventPaymentCardMethod2,
		WebhookEventPaymentCardMethod5,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentCardMethod) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentCardMethod1:
		return []byte(s), nil
	case WebhookEventPaymentCardMethod2:
		return []byte(s), nil
	case WebhookEventPaymentCardMethod5:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentCardMethod) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentCardMethod(data) {
	case WebhookEventPaymentCardMethod1:
		*s = WebhookEventPaymentCardMethod1
		return nil
	case WebhookEventPaymentCardMethod2:
		*s = WebhookEventPaymentCardMethod2
		return nil
	case WebhookEventPaymentCardMethod5:
		*s = WebhookEventPaymentCardMethod5
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type WebhookEventPaymentCardPayType string

const (
	WebhookEventPaymentCardPayTypeCard           WebhookEventPaymentCardPayType = "Card"
	WebhookEventPaymentCardPayTypeKonbini        WebhookEventPaymentCardPayType = "Konbini"
	WebhookEventPaymentCardPayTypePaypay         WebhookEventPaymentCardPayType = "Paypay"
	WebhookEventPaymentCardPayTypeApplepay       WebhookEventPaymentCardPayType = "Applepay"
	WebhookEventPaymentCardPayTypeDirectdebit    WebhookEventPaymentCardPayType = "Directdebit"
	WebhookEventPaymentCardPayTypeVirtualaccount WebhookEventPaymentCardPayType = "Virtualaccount"
)

// AllValues returns all WebhookEventPaymentCardPayType values.
func (WebhookEventPaymentCardPayType) AllValues() []WebhookEventPaymentCardPayType {
	return []WebhookEventPaymentCardPayType{
		WebhookEventPaymentCardPayTypeCard,
		WebhookEventPaymentCardPayTypeKonbini,
		WebhookEventPaymentCardPayTypePaypay,
		WebhookEventPaymentCardPayTypeApplepay,
		WebhookEventPaymentCardPayTypeDirectdebit,
		WebhookEventPaymentCardPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentCardPayTypeCard:
		return []byte(s), nil
	case WebhookEventPaymentCardPayTypeKonbini:
		return []byte(s), nil
	case WebhookEventPaymentCardPayTypePaypay:
		return []byte(s), nil
	case WebhookEventPaymentCardPayTypeApplepay:
		return []byte(s), nil
	case WebhookEventPaymentCardPayTypeDirectdebit:
		return []byte(s), nil
	case WebhookEventPaymentCardPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentCardPayType) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentCardPayType(data) {
	case WebhookEventPaymentCardPayTypeCard:
		*s = WebhookEventPaymentCardPayTypeCard
		return nil
	case WebhookEventPaymentCardPayTypeKonbini:
		*s = WebhookEventPaymentCardPayTypeKonbini
		return nil
	case WebhookEventPaymentCardPayTypePaypay:
		*s = WebhookEventPaymentCardPayTypePaypay
		return nil
	case WebhookEventPaymentCardPayTypeApplepay:
		*s = WebhookEventPaymentCardPayTypeApplepay
		return nil
	case WebhookEventPaymentCardPayTypeDirectdebit:
		*s = WebhookEventPaymentCardPayTypeDirectdebit
		return nil
	case WebhookEventPaymentCardPayTypeVirtualaccount:
		*s = WebhookEventPaymentCardPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type WebhookEventPaymentCardStatus string

const (
	WebhookEventPaymentCardStatusUNPROCESSED             WebhookEventPaymentCardStatus = "UNPROCESSED"
	WebhookEventPaymentCardStatusCHECKED                 WebhookEventPaymentCardStatus = "CHECKED"
	WebhookEventPaymentCardStatusAUTHORIZED              WebhookEventPaymentCardStatus = "AUTHORIZED"
	WebhookEventPaymentCardStatusAWAITINGCUSTOMERPAYMENT WebhookEventPaymentCardStatus = "AWAITING_CUSTOMER_PAYMENT"
	WebhookEventPaymentCardStatusAWAITINGPAYMENTAPPROVAL WebhookEventPaymentCardStatus = "AWAITING_PAYMENT_APPROVAL"
	WebhookEventPaymentCardStatusCAPTURED                WebhookEventPaymentCardStatus = "CAPTURED"
	WebhookEventPaymentCardStatusCANCELED                WebhookEventPaymentCardStatus = "CANCELED"
	WebhookEventPaymentCardStatusEXPIRED                 WebhookEventPaymentCardStatus = "EXPIRED"
	WebhookEventPaymentCardStatusAUTHENTICATED           WebhookEventPaymentCardStatus = "AUTHENTICATED"
	WebhookEventPaymentCardStatusFAILED                  WebhookEventPaymentCardStatus = "FAILED"
)

// AllValues returns all WebhookEventPaymentCardStatus values.
func (WebhookEventPaymentCardStatus) AllValues() []WebhookEventPaymentCardStatus {
	return []WebhookEventPaymentCardStatus{
		WebhookEventPaymentCardStatusUNPROCESSED,
		WebhookEventPaymentCardStatusCHECKED,
		WebhookEventPaymentCardStatusAUTHORIZED,
		WebhookEventPaymentCardStatusAWAITINGCUSTOMERPAYMENT,
		WebhookEventPaymentCardStatusAWAITINGPAYMENTAPPROVAL,
		WebhookEventPaymentCardStatusCAPTURED,
		WebhookEventPaymentCardStatusCANCELED,
		WebhookEventPaymentCardStatusEXPIRED,
		WebhookEventPaymentCardStatusAUTHENTICATED,
		WebhookEventPaymentCardStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentCardStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentCardStatusUNPROCESSED:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusCHECKED:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusAUTHORIZED:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusCAPTURED:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusCANCELED:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusEXPIRED:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusAUTHENTICATED:
		return []byte(s), nil
	case WebhookEventPaymentCardStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentCardStatus) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentCardStatus(data) {
	case WebhookEventPaymentCardStatusUNPROCESSED:
		*s = WebhookEventPaymentCardStatusUNPROCESSED
		return nil
	case WebhookEventPaymentCardStatusCHECKED:
		*s = WebhookEventPaymentCardStatusCHECKED
		return nil
	case WebhookEventPaymentCardStatusAUTHORIZED:
		*s = WebhookEventPaymentCardStatusAUTHORIZED
		return nil
	case WebhookEventPaymentCardStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentCardStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case WebhookEventPaymentCardStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentCardStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case WebhookEventPaymentCardStatusCAPTURED:
		*s = WebhookEventPaymentCardStatusCAPTURED
		return nil
	case WebhookEventPaymentCardStatusCANCELED:
		*s = WebhookEventPaymentCardStatusCANCELED
		return nil
	case WebhookEventPaymentCardStatusEXPIRED:
		*s = WebhookEventPaymentCardStatusEXPIRED
		return nil
	case WebhookEventPaymentCardStatusAUTHENTICATED:
		*s = WebhookEventPaymentCardStatusAUTHENTICATED
		return nil
	case WebhookEventPaymentCardStatusFAILED:
		*s = WebhookEventPaymentCardStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Payment.DirectDebit
type WebhookEventPaymentDirectDebit struct {
	ShopID   OptString `json:"shop_id"`
	OrderID  OptString `json:"order_id"`
	AccessID OptString `json:"access_id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Directdebit`: 口座振替.
	PayType OptWebhookEventPaymentDirectDebitPayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">振替はまだ実行されていません。</span>
	// - `AWAITING_PAYMENT_APPROVAL`: 決済処理待ち<br /><span
	// class="smallText">fincodeおよび金融機関による振替処理を待っています。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">振替が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この振替はキャンセルされました。</span>
	// - `FAILED`: 請求失敗<br /><span
	// class="smallText">何らかの理由により振替に失敗しました。</span>.
	Status          OptWebhookEventPaymentDirectDebitStatus        `json:"status"`
	CustomerID      OptNilString                                   `json:"customer_id"`
	PaymentMethodID OptNilString                                   `json:"payment_method_id"`
	ResultCode      OptNilWebhookEventPaymentDirectDebitResultCode `json:"result_code"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 利用金額.
	Amount OptString `json:"amount"`
	// 税送料.
	Tax         OptString    `json:"tax"`
	ProcessDate OptNilString `json:"process_date"`
	// 振替指定日.
	TargetDate           OptNilString `json:"target_date"`
	WithdrawalDate       OptNilString `json:"withdrawal_date"`
	RequestAcceptEndDate OptNilString `json:"request_accept_end_date"`
	TransferReturnDate   OptNilString `json:"transfer_return_date"`
	// ご利用明細表示内容.
	Remarks        OptNilString `json:"remarks"`
	SubscriptionID OptNilString `json:"subscription_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString                           `json:"error_code"`
	Event     OptWebhookEventPaymentDirectDebitEvent `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventPaymentDirectDebit) GetShopID() OptString {
	return s.ShopID
}

// GetOrderID returns the value of OrderID.
func (s *WebhookEventPaymentDirectDebit) GetOrderID() OptString {
	return s.OrderID
}

// GetAccessID returns the value of AccessID.
func (s *WebhookEventPaymentDirectDebit) GetAccessID() OptString {
	return s.AccessID
}

// GetPayType returns the value of PayType.
func (s *WebhookEventPaymentDirectDebit) GetPayType() OptWebhookEventPaymentDirectDebitPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *WebhookEventPaymentDirectDebit) GetStatus() OptWebhookEventPaymentDirectDebitStatus {
	return s.Status
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventPaymentDirectDebit) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *WebhookEventPaymentDirectDebit) GetPaymentMethodID() OptNilString {
	return s.PaymentMethodID
}

// GetResultCode returns the value of ResultCode.
func (s *WebhookEventPaymentDirectDebit) GetResultCode() OptNilWebhookEventPaymentDirectDebitResultCode {
	return s.ResultCode
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventPaymentDirectDebit) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventPaymentDirectDebit) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventPaymentDirectDebit) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetAmount returns the value of Amount.
func (s *WebhookEventPaymentDirectDebit) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *WebhookEventPaymentDirectDebit) GetTax() OptString {
	return s.Tax
}

// GetProcessDate returns the value of ProcessDate.
func (s *WebhookEventPaymentDirectDebit) GetProcessDate() OptNilString {
	return s.ProcessDate
}

// GetTargetDate returns the value of TargetDate.
func (s *WebhookEventPaymentDirectDebit) GetTargetDate() OptNilString {
	return s.TargetDate
}

// GetWithdrawalDate returns the value of WithdrawalDate.
func (s *WebhookEventPaymentDirectDebit) GetWithdrawalDate() OptNilString {
	return s.WithdrawalDate
}

// GetRequestAcceptEndDate returns the value of RequestAcceptEndDate.
func (s *WebhookEventPaymentDirectDebit) GetRequestAcceptEndDate() OptNilString {
	return s.RequestAcceptEndDate
}

// GetTransferReturnDate returns the value of TransferReturnDate.
func (s *WebhookEventPaymentDirectDebit) GetTransferReturnDate() OptNilString {
	return s.TransferReturnDate
}

// GetRemarks returns the value of Remarks.
func (s *WebhookEventPaymentDirectDebit) GetRemarks() OptNilString {
	return s.Remarks
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *WebhookEventPaymentDirectDebit) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetErrorCode returns the value of ErrorCode.
func (s *WebhookEventPaymentDirectDebit) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetEvent returns the value of Event.
func (s *WebhookEventPaymentDirectDebit) GetEvent() OptWebhookEventPaymentDirectDebitEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventPaymentDirectDebit) SetShopID(val OptString) {
	s.ShopID = val
}

// SetOrderID sets the value of OrderID.
func (s *WebhookEventPaymentDirectDebit) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetAccessID sets the value of AccessID.
func (s *WebhookEventPaymentDirectDebit) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventPaymentDirectDebit) SetPayType(val OptWebhookEventPaymentDirectDebitPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventPaymentDirectDebit) SetStatus(val OptWebhookEventPaymentDirectDebitStatus) {
	s.Status = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventPaymentDirectDebit) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *WebhookEventPaymentDirectDebit) SetPaymentMethodID(val OptNilString) {
	s.PaymentMethodID = val
}

// SetResultCode sets the value of ResultCode.
func (s *WebhookEventPaymentDirectDebit) SetResultCode(val OptNilWebhookEventPaymentDirectDebitResultCode) {
	s.ResultCode = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventPaymentDirectDebit) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventPaymentDirectDebit) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventPaymentDirectDebit) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetAmount sets the value of Amount.
func (s *WebhookEventPaymentDirectDebit) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *WebhookEventPaymentDirectDebit) SetTax(val OptString) {
	s.Tax = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *WebhookEventPaymentDirectDebit) SetProcessDate(val OptNilString) {
	s.ProcessDate = val
}

// SetTargetDate sets the value of TargetDate.
func (s *WebhookEventPaymentDirectDebit) SetTargetDate(val OptNilString) {
	s.TargetDate = val
}

// SetWithdrawalDate sets the value of WithdrawalDate.
func (s *WebhookEventPaymentDirectDebit) SetWithdrawalDate(val OptNilString) {
	s.WithdrawalDate = val
}

// SetRequestAcceptEndDate sets the value of RequestAcceptEndDate.
func (s *WebhookEventPaymentDirectDebit) SetRequestAcceptEndDate(val OptNilString) {
	s.RequestAcceptEndDate = val
}

// SetTransferReturnDate sets the value of TransferReturnDate.
func (s *WebhookEventPaymentDirectDebit) SetTransferReturnDate(val OptNilString) {
	s.TransferReturnDate = val
}

// SetRemarks sets the value of Remarks.
func (s *WebhookEventPaymentDirectDebit) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *WebhookEventPaymentDirectDebit) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *WebhookEventPaymentDirectDebit) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventPaymentDirectDebit) SetEvent(val OptWebhookEventPaymentDirectDebitEvent) {
	s.Event = val
}

// Webhook通知 トリガーイベント.
type WebhookEventPaymentDirectDebitEvent string

const (
	WebhookEventPaymentDirectDebitEventPaymentsCardRegist                WebhookEventPaymentDirectDebitEvent = "payments.card.regist"
	WebhookEventPaymentDirectDebitEventPaymentsCardExec                  WebhookEventPaymentDirectDebitEvent = "payments.card.exec"
	WebhookEventPaymentDirectDebitEventPaymentsCardCapture               WebhookEventPaymentDirectDebitEvent = "payments.card.capture"
	WebhookEventPaymentDirectDebitEventPaymentsCardCancel                WebhookEventPaymentDirectDebitEvent = "payments.card.cancel"
	WebhookEventPaymentDirectDebitEventPaymentsCardAuth                  WebhookEventPaymentDirectDebitEvent = "payments.card.auth"
	WebhookEventPaymentDirectDebitEventPaymentsCardChange                WebhookEventPaymentDirectDebitEvent = "payments.card.change"
	WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Authenticate   WebhookEventPaymentDirectDebitEvent = "payments.card.secure2.authenticate"
	WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Result         WebhookEventPaymentDirectDebitEvent = "payments.card.secure2.result"
	WebhookEventPaymentDirectDebitEventPaymentsCardSecure                WebhookEventPaymentDirectDebitEvent = "payments.card.secure"
	WebhookEventPaymentDirectDebitEventPaymentsApplepayRegist            WebhookEventPaymentDirectDebitEvent = "payments.applepay.regist"
	WebhookEventPaymentDirectDebitEventPaymentsApplepayExec              WebhookEventPaymentDirectDebitEvent = "payments.applepay.exec"
	WebhookEventPaymentDirectDebitEventPaymentsApplepayCapture           WebhookEventPaymentDirectDebitEvent = "payments.applepay.capture"
	WebhookEventPaymentDirectDebitEventPaymentsApplepayCancel            WebhookEventPaymentDirectDebitEvent = "payments.applepay.cancel"
	WebhookEventPaymentDirectDebitEventPaymentsKonbiniRegist             WebhookEventPaymentDirectDebitEvent = "payments.konbini.regist"
	WebhookEventPaymentDirectDebitEventPaymentsKonbiniExec               WebhookEventPaymentDirectDebitEvent = "payments.konbini.exec"
	WebhookEventPaymentDirectDebitEventPaymentsKonbiniCancel             WebhookEventPaymentDirectDebitEvent = "payments.konbini.cancel"
	WebhookEventPaymentDirectDebitEventPaymentsKonbiniComplete           WebhookEventPaymentDirectDebitEvent = "payments.konbini.complete"
	WebhookEventPaymentDirectDebitEventPaymentsKonbiniCompleteStub       WebhookEventPaymentDirectDebitEvent = "payments.konbini.complete.stub"
	WebhookEventPaymentDirectDebitEventPaymentsKonbiniExpiredUpdateBatch WebhookEventPaymentDirectDebitEvent = "payments.konbini.expired.update.batch"
	WebhookEventPaymentDirectDebitEventPaymentsPaypayRegist              WebhookEventPaymentDirectDebitEvent = "payments.paypay.regist"
	WebhookEventPaymentDirectDebitEventPaymentsPaypayExec                WebhookEventPaymentDirectDebitEvent = "payments.paypay.exec"
	WebhookEventPaymentDirectDebitEventPaymentsPaypayCapture             WebhookEventPaymentDirectDebitEvent = "payments.paypay.capture"
	WebhookEventPaymentDirectDebitEventPaymentsPaypayCancel              WebhookEventPaymentDirectDebitEvent = "payments.paypay.cancel"
	WebhookEventPaymentDirectDebitEventPaymentsPaypayChange              WebhookEventPaymentDirectDebitEvent = "payments.paypay.change"
	WebhookEventPaymentDirectDebitEventPaymentsPaypayComplete            WebhookEventPaymentDirectDebitEvent = "payments.paypay.complete"
	WebhookEventPaymentDirectDebitEventPaymentsDirectdebitRegist         WebhookEventPaymentDirectDebitEvent = "payments.directdebit.regist"
	WebhookEventPaymentDirectDebitEventPaymentsDirectdebitExec           WebhookEventPaymentDirectDebitEvent = "payments.directdebit.exec"
	WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCancel         WebhookEventPaymentDirectDebitEvent = "payments.directdebit.cancel"
	WebhookEventPaymentDirectDebitEventPaymentsDirectdebitChange         WebhookEventPaymentDirectDebitEvent = "payments.directdebit.change"
	WebhookEventPaymentDirectDebitEventPaymentsDirectdebitComplete       WebhookEventPaymentDirectDebitEvent = "payments.directdebit.complete"
	WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCompleteStub   WebhookEventPaymentDirectDebitEvent = "payments.directdebit.complete.stub"
	WebhookEventPaymentDirectDebitEventCustomersPaymentMethodsUpdated    WebhookEventPaymentDirectDebitEvent = "customers.payment_methods.updated"
	WebhookEventPaymentDirectDebitEventCardRegist                        WebhookEventPaymentDirectDebitEvent = "card.regist"
	WebhookEventPaymentDirectDebitEventCardUpdate                        WebhookEventPaymentDirectDebitEvent = "card.update"
	WebhookEventPaymentDirectDebitEventSubscriptionCardRegist            WebhookEventPaymentDirectDebitEvent = "subscription.card.regist"
	WebhookEventPaymentDirectDebitEventSubscriptionCardDelete            WebhookEventPaymentDirectDebitEvent = "subscription.card.delete"
	WebhookEventPaymentDirectDebitEventSubscriptionCardUpdate            WebhookEventPaymentDirectDebitEvent = "subscription.card.update"
	WebhookEventPaymentDirectDebitEventRecurringCardBatch                WebhookEventPaymentDirectDebitEvent = "recurring.card.batch"
	WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitRegist     WebhookEventPaymentDirectDebitEvent = "subscription.directdebit.regist"
	WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitDelete     WebhookEventPaymentDirectDebitEvent = "subscription.directdebit.delete"
	WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitUpdate     WebhookEventPaymentDirectDebitEvent = "subscription.directdebit.update"
	WebhookEventPaymentDirectDebitEventRecurringDirectdebitBatch         WebhookEventPaymentDirectDebitEvent = "recurring.directdebit.batch"
	WebhookEventPaymentDirectDebitEventPaymentsBulkCardRegist            WebhookEventPaymentDirectDebitEvent = "payments.bulk.card.regist"
	WebhookEventPaymentDirectDebitEventPaymentsBulkCardBatch             WebhookEventPaymentDirectDebitEvent = "payments.bulk.card.batch"
	WebhookEventPaymentDirectDebitEventContractsStatusCodeUpdated        WebhookEventPaymentDirectDebitEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventPaymentDirectDebitEvent values.
func (WebhookEventPaymentDirectDebitEvent) AllValues() []WebhookEventPaymentDirectDebitEvent {
	return []WebhookEventPaymentDirectDebitEvent{
		WebhookEventPaymentDirectDebitEventPaymentsCardRegist,
		WebhookEventPaymentDirectDebitEventPaymentsCardExec,
		WebhookEventPaymentDirectDebitEventPaymentsCardCapture,
		WebhookEventPaymentDirectDebitEventPaymentsCardCancel,
		WebhookEventPaymentDirectDebitEventPaymentsCardAuth,
		WebhookEventPaymentDirectDebitEventPaymentsCardChange,
		WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Authenticate,
		WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Result,
		WebhookEventPaymentDirectDebitEventPaymentsCardSecure,
		WebhookEventPaymentDirectDebitEventPaymentsApplepayRegist,
		WebhookEventPaymentDirectDebitEventPaymentsApplepayExec,
		WebhookEventPaymentDirectDebitEventPaymentsApplepayCapture,
		WebhookEventPaymentDirectDebitEventPaymentsApplepayCancel,
		WebhookEventPaymentDirectDebitEventPaymentsKonbiniRegist,
		WebhookEventPaymentDirectDebitEventPaymentsKonbiniExec,
		WebhookEventPaymentDirectDebitEventPaymentsKonbiniCancel,
		WebhookEventPaymentDirectDebitEventPaymentsKonbiniComplete,
		WebhookEventPaymentDirectDebitEventPaymentsKonbiniCompleteStub,
		WebhookEventPaymentDirectDebitEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventPaymentDirectDebitEventPaymentsPaypayRegist,
		WebhookEventPaymentDirectDebitEventPaymentsPaypayExec,
		WebhookEventPaymentDirectDebitEventPaymentsPaypayCapture,
		WebhookEventPaymentDirectDebitEventPaymentsPaypayCancel,
		WebhookEventPaymentDirectDebitEventPaymentsPaypayChange,
		WebhookEventPaymentDirectDebitEventPaymentsPaypayComplete,
		WebhookEventPaymentDirectDebitEventPaymentsDirectdebitRegist,
		WebhookEventPaymentDirectDebitEventPaymentsDirectdebitExec,
		WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCancel,
		WebhookEventPaymentDirectDebitEventPaymentsDirectdebitChange,
		WebhookEventPaymentDirectDebitEventPaymentsDirectdebitComplete,
		WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCompleteStub,
		WebhookEventPaymentDirectDebitEventCustomersPaymentMethodsUpdated,
		WebhookEventPaymentDirectDebitEventCardRegist,
		WebhookEventPaymentDirectDebitEventCardUpdate,
		WebhookEventPaymentDirectDebitEventSubscriptionCardRegist,
		WebhookEventPaymentDirectDebitEventSubscriptionCardDelete,
		WebhookEventPaymentDirectDebitEventSubscriptionCardUpdate,
		WebhookEventPaymentDirectDebitEventRecurringCardBatch,
		WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitRegist,
		WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitDelete,
		WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitUpdate,
		WebhookEventPaymentDirectDebitEventRecurringDirectdebitBatch,
		WebhookEventPaymentDirectDebitEventPaymentsBulkCardRegist,
		WebhookEventPaymentDirectDebitEventPaymentsBulkCardBatch,
		WebhookEventPaymentDirectDebitEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentDirectDebitEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentDirectDebitEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentDirectDebitEvent) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentDirectDebitEvent(data) {
	case WebhookEventPaymentDirectDebitEventPaymentsCardRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardRegist
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardExec
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardCapture:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardCapture
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardCancel
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardAuth:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardAuth
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardChange:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardChange
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Result
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardSecure
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayRegist
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayExec
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayCapture
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayCancel
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniRegist
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniExec
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniCancel
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniComplete
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayRegist
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayExec
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayCapture
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayCancel
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayChange:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayChange
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayComplete
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitExec
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitChange
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventPaymentDirectDebitEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentDirectDebitEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventPaymentDirectDebitEventCardRegist:
		*s = WebhookEventPaymentDirectDebitEventCardRegist
		return nil
	case WebhookEventPaymentDirectDebitEventCardUpdate:
		*s = WebhookEventPaymentDirectDebitEventCardUpdate
		return nil
	case WebhookEventPaymentDirectDebitEventSubscriptionCardRegist:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionCardRegist
		return nil
	case WebhookEventPaymentDirectDebitEventSubscriptionCardDelete:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionCardDelete
		return nil
	case WebhookEventPaymentDirectDebitEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionCardUpdate
		return nil
	case WebhookEventPaymentDirectDebitEventRecurringCardBatch:
		*s = WebhookEventPaymentDirectDebitEventRecurringCardBatch
		return nil
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventPaymentDirectDebitEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentDirectDebitEventRecurringDirectdebitBatch
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsBulkCardRegist
		return nil
	case WebhookEventPaymentDirectDebitEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentDirectDebitEventPaymentsBulkCardBatch
		return nil
	case WebhookEventPaymentDirectDebitEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentDirectDebitEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type WebhookEventPaymentDirectDebitPayType string

const (
	WebhookEventPaymentDirectDebitPayTypeCard           WebhookEventPaymentDirectDebitPayType = "Card"
	WebhookEventPaymentDirectDebitPayTypeKonbini        WebhookEventPaymentDirectDebitPayType = "Konbini"
	WebhookEventPaymentDirectDebitPayTypePaypay         WebhookEventPaymentDirectDebitPayType = "Paypay"
	WebhookEventPaymentDirectDebitPayTypeApplepay       WebhookEventPaymentDirectDebitPayType = "Applepay"
	WebhookEventPaymentDirectDebitPayTypeDirectdebit    WebhookEventPaymentDirectDebitPayType = "Directdebit"
	WebhookEventPaymentDirectDebitPayTypeVirtualaccount WebhookEventPaymentDirectDebitPayType = "Virtualaccount"
)

// AllValues returns all WebhookEventPaymentDirectDebitPayType values.
func (WebhookEventPaymentDirectDebitPayType) AllValues() []WebhookEventPaymentDirectDebitPayType {
	return []WebhookEventPaymentDirectDebitPayType{
		WebhookEventPaymentDirectDebitPayTypeCard,
		WebhookEventPaymentDirectDebitPayTypeKonbini,
		WebhookEventPaymentDirectDebitPayTypePaypay,
		WebhookEventPaymentDirectDebitPayTypeApplepay,
		WebhookEventPaymentDirectDebitPayTypeDirectdebit,
		WebhookEventPaymentDirectDebitPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentDirectDebitPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentDirectDebitPayTypeCard:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitPayTypeKonbini:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitPayTypePaypay:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitPayTypeApplepay:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitPayTypeDirectdebit:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentDirectDebitPayType) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentDirectDebitPayType(data) {
	case WebhookEventPaymentDirectDebitPayTypeCard:
		*s = WebhookEventPaymentDirectDebitPayTypeCard
		return nil
	case WebhookEventPaymentDirectDebitPayTypeKonbini:
		*s = WebhookEventPaymentDirectDebitPayTypeKonbini
		return nil
	case WebhookEventPaymentDirectDebitPayTypePaypay:
		*s = WebhookEventPaymentDirectDebitPayTypePaypay
		return nil
	case WebhookEventPaymentDirectDebitPayTypeApplepay:
		*s = WebhookEventPaymentDirectDebitPayTypeApplepay
		return nil
	case WebhookEventPaymentDirectDebitPayTypeDirectdebit:
		*s = WebhookEventPaymentDirectDebitPayTypeDirectdebit
		return nil
	case WebhookEventPaymentDirectDebitPayTypeVirtualaccount:
		*s = WebhookEventPaymentDirectDebitPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 振替結果コード
// - `0`: 振替成功<br><span class="smallText">振替が成功しました。</span>
// - `1`: 残高不足（失敗）<br><span
// class="smallText">口座残高の不足により振替に失敗しました。</span>
// - `2`: 預金取引無し（失敗）<br><span
// class="smallText">指定した口座が存在しないなどの理由により振替に失敗しました。</span>
// - `3`: 購入者事由（失敗）<br><span
// class="smallText">購入者による振替取引の停止等により振替に失敗しました。</span>
// - `4`: 依頼書未着・不備（失敗）<br><span
// class="smallText">（依頼書登録）この決済に所定の期日までの口座振替依頼書の提出が確認出来なかったため振替に失敗しました。</span>
// - `8`: ショップ事由（失敗）<br><span
// class="smallText">ショップに起因する事由により振替に失敗しました。詳細はfincodeにお問い合わせください。</span>
// - `9 | E | N`: その他（失敗）<br><span
// class="smallText">その他の理由により振替に失敗しました（通常は発生しません）。詳細はfincodeにお問い合わせください。</span>
// [お問い合わせはこちらのフォームから](https://dashboard.fincode.
// jp/contact)いただけます。.
type WebhookEventPaymentDirectDebitResultCode string

const (
	WebhookEventPaymentDirectDebitResultCode0 WebhookEventPaymentDirectDebitResultCode = "0"
	WebhookEventPaymentDirectDebitResultCode1 WebhookEventPaymentDirectDebitResultCode = "1"
	WebhookEventPaymentDirectDebitResultCode2 WebhookEventPaymentDirectDebitResultCode = "2"
	WebhookEventPaymentDirectDebitResultCode3 WebhookEventPaymentDirectDebitResultCode = "3"
	WebhookEventPaymentDirectDebitResultCode4 WebhookEventPaymentDirectDebitResultCode = "4"
	WebhookEventPaymentDirectDebitResultCode8 WebhookEventPaymentDirectDebitResultCode = "8"
	WebhookEventPaymentDirectDebitResultCode9 WebhookEventPaymentDirectDebitResultCode = "9"
	WebhookEventPaymentDirectDebitResultCodeE WebhookEventPaymentDirectDebitResultCode = "E"
	WebhookEventPaymentDirectDebitResultCodeN WebhookEventPaymentDirectDebitResultCode = "N"
)

// AllValues returns all WebhookEventPaymentDirectDebitResultCode values.
func (WebhookEventPaymentDirectDebitResultCode) AllValues() []WebhookEventPaymentDirectDebitResultCode {
	return []WebhookEventPaymentDirectDebitResultCode{
		WebhookEventPaymentDirectDebitResultCode0,
		WebhookEventPaymentDirectDebitResultCode1,
		WebhookEventPaymentDirectDebitResultCode2,
		WebhookEventPaymentDirectDebitResultCode3,
		WebhookEventPaymentDirectDebitResultCode4,
		WebhookEventPaymentDirectDebitResultCode8,
		WebhookEventPaymentDirectDebitResultCode9,
		WebhookEventPaymentDirectDebitResultCodeE,
		WebhookEventPaymentDirectDebitResultCodeN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentDirectDebitResultCode) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentDirectDebitResultCode0:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCode1:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCode2:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCode3:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCode4:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCode8:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCode9:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCodeE:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitResultCodeN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentDirectDebitResultCode) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentDirectDebitResultCode(data) {
	case WebhookEventPaymentDirectDebitResultCode0:
		*s = WebhookEventPaymentDirectDebitResultCode0
		return nil
	case WebhookEventPaymentDirectDebitResultCode1:
		*s = WebhookEventPaymentDirectDebitResultCode1
		return nil
	case WebhookEventPaymentDirectDebitResultCode2:
		*s = WebhookEventPaymentDirectDebitResultCode2
		return nil
	case WebhookEventPaymentDirectDebitResultCode3:
		*s = WebhookEventPaymentDirectDebitResultCode3
		return nil
	case WebhookEventPaymentDirectDebitResultCode4:
		*s = WebhookEventPaymentDirectDebitResultCode4
		return nil
	case WebhookEventPaymentDirectDebitResultCode8:
		*s = WebhookEventPaymentDirectDebitResultCode8
		return nil
	case WebhookEventPaymentDirectDebitResultCode9:
		*s = WebhookEventPaymentDirectDebitResultCode9
		return nil
	case WebhookEventPaymentDirectDebitResultCodeE:
		*s = WebhookEventPaymentDirectDebitResultCodeE
		return nil
	case WebhookEventPaymentDirectDebitResultCodeN:
		*s = WebhookEventPaymentDirectDebitResultCodeN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type WebhookEventPaymentDirectDebitStatus string

const (
	WebhookEventPaymentDirectDebitStatusUNPROCESSED             WebhookEventPaymentDirectDebitStatus = "UNPROCESSED"
	WebhookEventPaymentDirectDebitStatusCHECKED                 WebhookEventPaymentDirectDebitStatus = "CHECKED"
	WebhookEventPaymentDirectDebitStatusAUTHORIZED              WebhookEventPaymentDirectDebitStatus = "AUTHORIZED"
	WebhookEventPaymentDirectDebitStatusAWAITINGCUSTOMERPAYMENT WebhookEventPaymentDirectDebitStatus = "AWAITING_CUSTOMER_PAYMENT"
	WebhookEventPaymentDirectDebitStatusAWAITINGPAYMENTAPPROVAL WebhookEventPaymentDirectDebitStatus = "AWAITING_PAYMENT_APPROVAL"
	WebhookEventPaymentDirectDebitStatusCAPTURED                WebhookEventPaymentDirectDebitStatus = "CAPTURED"
	WebhookEventPaymentDirectDebitStatusCANCELED                WebhookEventPaymentDirectDebitStatus = "CANCELED"
	WebhookEventPaymentDirectDebitStatusEXPIRED                 WebhookEventPaymentDirectDebitStatus = "EXPIRED"
	WebhookEventPaymentDirectDebitStatusAUTHENTICATED           WebhookEventPaymentDirectDebitStatus = "AUTHENTICATED"
	WebhookEventPaymentDirectDebitStatusFAILED                  WebhookEventPaymentDirectDebitStatus = "FAILED"
)

// AllValues returns all WebhookEventPaymentDirectDebitStatus values.
func (WebhookEventPaymentDirectDebitStatus) AllValues() []WebhookEventPaymentDirectDebitStatus {
	return []WebhookEventPaymentDirectDebitStatus{
		WebhookEventPaymentDirectDebitStatusUNPROCESSED,
		WebhookEventPaymentDirectDebitStatusCHECKED,
		WebhookEventPaymentDirectDebitStatusAUTHORIZED,
		WebhookEventPaymentDirectDebitStatusAWAITINGCUSTOMERPAYMENT,
		WebhookEventPaymentDirectDebitStatusAWAITINGPAYMENTAPPROVAL,
		WebhookEventPaymentDirectDebitStatusCAPTURED,
		WebhookEventPaymentDirectDebitStatusCANCELED,
		WebhookEventPaymentDirectDebitStatusEXPIRED,
		WebhookEventPaymentDirectDebitStatusAUTHENTICATED,
		WebhookEventPaymentDirectDebitStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentDirectDebitStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentDirectDebitStatusUNPROCESSED:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusCHECKED:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusAUTHORIZED:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusCAPTURED:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusCANCELED:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusEXPIRED:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusAUTHENTICATED:
		return []byte(s), nil
	case WebhookEventPaymentDirectDebitStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentDirectDebitStatus) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentDirectDebitStatus(data) {
	case WebhookEventPaymentDirectDebitStatusUNPROCESSED:
		*s = WebhookEventPaymentDirectDebitStatusUNPROCESSED
		return nil
	case WebhookEventPaymentDirectDebitStatusCHECKED:
		*s = WebhookEventPaymentDirectDebitStatusCHECKED
		return nil
	case WebhookEventPaymentDirectDebitStatusAUTHORIZED:
		*s = WebhookEventPaymentDirectDebitStatusAUTHORIZED
		return nil
	case WebhookEventPaymentDirectDebitStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentDirectDebitStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case WebhookEventPaymentDirectDebitStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentDirectDebitStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case WebhookEventPaymentDirectDebitStatusCAPTURED:
		*s = WebhookEventPaymentDirectDebitStatusCAPTURED
		return nil
	case WebhookEventPaymentDirectDebitStatusCANCELED:
		*s = WebhookEventPaymentDirectDebitStatusCANCELED
		return nil
	case WebhookEventPaymentDirectDebitStatusEXPIRED:
		*s = WebhookEventPaymentDirectDebitStatusEXPIRED
		return nil
	case WebhookEventPaymentDirectDebitStatusAUTHENTICATED:
		*s = WebhookEventPaymentDirectDebitStatusAUTHENTICATED
		return nil
	case WebhookEventPaymentDirectDebitStatusFAILED:
		*s = WebhookEventPaymentDirectDebitStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Payment.Konbini
type WebhookEventPaymentKonbini struct {
	ShopID   OptString `json:"shop_id"`
	OrderID  OptString `json:"order_id"`
	AccessID OptString `json:"access_id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Konbini`: コンビニ決済.
	PayType OptWebhookEventPaymentKonbiniPayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるコンビニ店頭レジでの払い込みを待っている状態。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status                OptWebhookEventPaymentKonbiniStatus                   `json:"status"`
	CustomerID            OptNilString                                          `json:"customer_id"`
	OverpaymentFlag       OptNilWebhookEventPaymentKonbiniOverpaymentFlag       `json:"overpayment_flag"`
	CancelOverpaymentFlag OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag `json:"cancel_overpayment_flag"`
	PaymentDate           OptNilString                                          `json:"payment_date"`
	PaymentTerm           OptNilString                                          `json:"payment_term"`
	ProcessDate           OptNilString                                          `json:"process_date"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// 利用金額.
	Amount OptString `json:"amount"`
	// 税送料.
	Tax              OptString                                   `json:"tax"`
	KonbiniCode      OptNilWebhookEventPaymentKonbiniKonbiniCode `json:"konbini_code"`
	KonbiniStoreCode jx.Raw                                      `json:"konbini_store_code"`
	OrderSerial      OptNilString                                `json:"order_serial"`
	InvoiceID        OptNilString                                `json:"invoice_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptNilString                       `json:"error_code"`
	Event     OptWebhookEventPaymentKonbiniEvent `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventPaymentKonbini) GetShopID() OptString {
	return s.ShopID
}

// GetOrderID returns the value of OrderID.
func (s *WebhookEventPaymentKonbini) GetOrderID() OptString {
	return s.OrderID
}

// GetAccessID returns the value of AccessID.
func (s *WebhookEventPaymentKonbini) GetAccessID() OptString {
	return s.AccessID
}

// GetPayType returns the value of PayType.
func (s *WebhookEventPaymentKonbini) GetPayType() OptWebhookEventPaymentKonbiniPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *WebhookEventPaymentKonbini) GetStatus() OptWebhookEventPaymentKonbiniStatus {
	return s.Status
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventPaymentKonbini) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetOverpaymentFlag returns the value of OverpaymentFlag.
func (s *WebhookEventPaymentKonbini) GetOverpaymentFlag() OptNilWebhookEventPaymentKonbiniOverpaymentFlag {
	return s.OverpaymentFlag
}

// GetCancelOverpaymentFlag returns the value of CancelOverpaymentFlag.
func (s *WebhookEventPaymentKonbini) GetCancelOverpaymentFlag() OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag {
	return s.CancelOverpaymentFlag
}

// GetPaymentDate returns the value of PaymentDate.
func (s *WebhookEventPaymentKonbini) GetPaymentDate() OptNilString {
	return s.PaymentDate
}

// GetPaymentTerm returns the value of PaymentTerm.
func (s *WebhookEventPaymentKonbini) GetPaymentTerm() OptNilString {
	return s.PaymentTerm
}

// GetProcessDate returns the value of ProcessDate.
func (s *WebhookEventPaymentKonbini) GetProcessDate() OptNilString {
	return s.ProcessDate
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventPaymentKonbini) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventPaymentKonbini) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventPaymentKonbini) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetAmount returns the value of Amount.
func (s *WebhookEventPaymentKonbini) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *WebhookEventPaymentKonbini) GetTax() OptString {
	return s.Tax
}

// GetKonbiniCode returns the value of KonbiniCode.
func (s *WebhookEventPaymentKonbini) GetKonbiniCode() OptNilWebhookEventPaymentKonbiniKonbiniCode {
	return s.KonbiniCode
}

// GetKonbiniStoreCode returns the value of KonbiniStoreCode.
func (s *WebhookEventPaymentKonbini) GetKonbiniStoreCode() jx.Raw {
	return s.KonbiniStoreCode
}

// GetOrderSerial returns the value of OrderSerial.
func (s *WebhookEventPaymentKonbini) GetOrderSerial() OptNilString {
	return s.OrderSerial
}

// GetInvoiceID returns the value of InvoiceID.
func (s *WebhookEventPaymentKonbini) GetInvoiceID() OptNilString {
	return s.InvoiceID
}

// GetErrorCode returns the value of ErrorCode.
func (s *WebhookEventPaymentKonbini) GetErrorCode() OptNilString {
	return s.ErrorCode
}

// GetEvent returns the value of Event.
func (s *WebhookEventPaymentKonbini) GetEvent() OptWebhookEventPaymentKonbiniEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventPaymentKonbini) SetShopID(val OptString) {
	s.ShopID = val
}

// SetOrderID sets the value of OrderID.
func (s *WebhookEventPaymentKonbini) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetAccessID sets the value of AccessID.
func (s *WebhookEventPaymentKonbini) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventPaymentKonbini) SetPayType(val OptWebhookEventPaymentKonbiniPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventPaymentKonbini) SetStatus(val OptWebhookEventPaymentKonbiniStatus) {
	s.Status = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventPaymentKonbini) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetOverpaymentFlag sets the value of OverpaymentFlag.
func (s *WebhookEventPaymentKonbini) SetOverpaymentFlag(val OptNilWebhookEventPaymentKonbiniOverpaymentFlag) {
	s.OverpaymentFlag = val
}

// SetCancelOverpaymentFlag sets the value of CancelOverpaymentFlag.
func (s *WebhookEventPaymentKonbini) SetCancelOverpaymentFlag(val OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) {
	s.CancelOverpaymentFlag = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *WebhookEventPaymentKonbini) SetPaymentDate(val OptNilString) {
	s.PaymentDate = val
}

// SetPaymentTerm sets the value of PaymentTerm.
func (s *WebhookEventPaymentKonbini) SetPaymentTerm(val OptNilString) {
	s.PaymentTerm = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *WebhookEventPaymentKonbini) SetProcessDate(val OptNilString) {
	s.ProcessDate = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventPaymentKonbini) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventPaymentKonbini) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventPaymentKonbini) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetAmount sets the value of Amount.
func (s *WebhookEventPaymentKonbini) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *WebhookEventPaymentKonbini) SetTax(val OptString) {
	s.Tax = val
}

// SetKonbiniCode sets the value of KonbiniCode.
func (s *WebhookEventPaymentKonbini) SetKonbiniCode(val OptNilWebhookEventPaymentKonbiniKonbiniCode) {
	s.KonbiniCode = val
}

// SetKonbiniStoreCode sets the value of KonbiniStoreCode.
func (s *WebhookEventPaymentKonbini) SetKonbiniStoreCode(val jx.Raw) {
	s.KonbiniStoreCode = val
}

// SetOrderSerial sets the value of OrderSerial.
func (s *WebhookEventPaymentKonbini) SetOrderSerial(val OptNilString) {
	s.OrderSerial = val
}

// SetInvoiceID sets the value of InvoiceID.
func (s *WebhookEventPaymentKonbini) SetInvoiceID(val OptNilString) {
	s.InvoiceID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *WebhookEventPaymentKonbini) SetErrorCode(val OptNilString) {
	s.ErrorCode = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventPaymentKonbini) SetEvent(val OptWebhookEventPaymentKonbiniEvent) {
	s.Event = val
}

// キャンセル後支払フラグ\
// この決済をキャンセルした後に購入者がバーコードを用いて支払いを行った場合`1`になります。
// - `0`: キャンセル後支払は行われていない
// - `1`: キャンセル後、購入者による支払いが行われた.
type WebhookEventPaymentKonbiniCancelOverpaymentFlag string

const (
	WebhookEventPaymentKonbiniCancelOverpaymentFlag0 WebhookEventPaymentKonbiniCancelOverpaymentFlag = "0"
	WebhookEventPaymentKonbiniCancelOverpaymentFlag1 WebhookEventPaymentKonbiniCancelOverpaymentFlag = "1"
)

// AllValues returns all WebhookEventPaymentKonbiniCancelOverpaymentFlag values.
func (WebhookEventPaymentKonbiniCancelOverpaymentFlag) AllValues() []WebhookEventPaymentKonbiniCancelOverpaymentFlag {
	return []WebhookEventPaymentKonbiniCancelOverpaymentFlag{
		WebhookEventPaymentKonbiniCancelOverpaymentFlag0,
		WebhookEventPaymentKonbiniCancelOverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentKonbiniCancelOverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentKonbiniCancelOverpaymentFlag0:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniCancelOverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentKonbiniCancelOverpaymentFlag) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentKonbiniCancelOverpaymentFlag(data) {
	case WebhookEventPaymentKonbiniCancelOverpaymentFlag0:
		*s = WebhookEventPaymentKonbiniCancelOverpaymentFlag0
		return nil
	case WebhookEventPaymentKonbiniCancelOverpaymentFlag1:
		*s = WebhookEventPaymentKonbiniCancelOverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventPaymentKonbiniEvent string

const (
	WebhookEventPaymentKonbiniEventPaymentsCardRegist                WebhookEventPaymentKonbiniEvent = "payments.card.regist"
	WebhookEventPaymentKonbiniEventPaymentsCardExec                  WebhookEventPaymentKonbiniEvent = "payments.card.exec"
	WebhookEventPaymentKonbiniEventPaymentsCardCapture               WebhookEventPaymentKonbiniEvent = "payments.card.capture"
	WebhookEventPaymentKonbiniEventPaymentsCardCancel                WebhookEventPaymentKonbiniEvent = "payments.card.cancel"
	WebhookEventPaymentKonbiniEventPaymentsCardAuth                  WebhookEventPaymentKonbiniEvent = "payments.card.auth"
	WebhookEventPaymentKonbiniEventPaymentsCardChange                WebhookEventPaymentKonbiniEvent = "payments.card.change"
	WebhookEventPaymentKonbiniEventPaymentsCardSecure2Authenticate   WebhookEventPaymentKonbiniEvent = "payments.card.secure2.authenticate"
	WebhookEventPaymentKonbiniEventPaymentsCardSecure2Result         WebhookEventPaymentKonbiniEvent = "payments.card.secure2.result"
	WebhookEventPaymentKonbiniEventPaymentsCardSecure                WebhookEventPaymentKonbiniEvent = "payments.card.secure"
	WebhookEventPaymentKonbiniEventPaymentsApplepayRegist            WebhookEventPaymentKonbiniEvent = "payments.applepay.regist"
	WebhookEventPaymentKonbiniEventPaymentsApplepayExec              WebhookEventPaymentKonbiniEvent = "payments.applepay.exec"
	WebhookEventPaymentKonbiniEventPaymentsApplepayCapture           WebhookEventPaymentKonbiniEvent = "payments.applepay.capture"
	WebhookEventPaymentKonbiniEventPaymentsApplepayCancel            WebhookEventPaymentKonbiniEvent = "payments.applepay.cancel"
	WebhookEventPaymentKonbiniEventPaymentsKonbiniRegist             WebhookEventPaymentKonbiniEvent = "payments.konbini.regist"
	WebhookEventPaymentKonbiniEventPaymentsKonbiniExec               WebhookEventPaymentKonbiniEvent = "payments.konbini.exec"
	WebhookEventPaymentKonbiniEventPaymentsKonbiniCancel             WebhookEventPaymentKonbiniEvent = "payments.konbini.cancel"
	WebhookEventPaymentKonbiniEventPaymentsKonbiniComplete           WebhookEventPaymentKonbiniEvent = "payments.konbini.complete"
	WebhookEventPaymentKonbiniEventPaymentsKonbiniCompleteStub       WebhookEventPaymentKonbiniEvent = "payments.konbini.complete.stub"
	WebhookEventPaymentKonbiniEventPaymentsKonbiniExpiredUpdateBatch WebhookEventPaymentKonbiniEvent = "payments.konbini.expired.update.batch"
	WebhookEventPaymentKonbiniEventPaymentsPaypayRegist              WebhookEventPaymentKonbiniEvent = "payments.paypay.regist"
	WebhookEventPaymentKonbiniEventPaymentsPaypayExec                WebhookEventPaymentKonbiniEvent = "payments.paypay.exec"
	WebhookEventPaymentKonbiniEventPaymentsPaypayCapture             WebhookEventPaymentKonbiniEvent = "payments.paypay.capture"
	WebhookEventPaymentKonbiniEventPaymentsPaypayCancel              WebhookEventPaymentKonbiniEvent = "payments.paypay.cancel"
	WebhookEventPaymentKonbiniEventPaymentsPaypayChange              WebhookEventPaymentKonbiniEvent = "payments.paypay.change"
	WebhookEventPaymentKonbiniEventPaymentsPaypayComplete            WebhookEventPaymentKonbiniEvent = "payments.paypay.complete"
	WebhookEventPaymentKonbiniEventPaymentsDirectdebitRegist         WebhookEventPaymentKonbiniEvent = "payments.directdebit.regist"
	WebhookEventPaymentKonbiniEventPaymentsDirectdebitExec           WebhookEventPaymentKonbiniEvent = "payments.directdebit.exec"
	WebhookEventPaymentKonbiniEventPaymentsDirectdebitCancel         WebhookEventPaymentKonbiniEvent = "payments.directdebit.cancel"
	WebhookEventPaymentKonbiniEventPaymentsDirectdebitChange         WebhookEventPaymentKonbiniEvent = "payments.directdebit.change"
	WebhookEventPaymentKonbiniEventPaymentsDirectdebitComplete       WebhookEventPaymentKonbiniEvent = "payments.directdebit.complete"
	WebhookEventPaymentKonbiniEventPaymentsDirectdebitCompleteStub   WebhookEventPaymentKonbiniEvent = "payments.directdebit.complete.stub"
	WebhookEventPaymentKonbiniEventCustomersPaymentMethodsUpdated    WebhookEventPaymentKonbiniEvent = "customers.payment_methods.updated"
	WebhookEventPaymentKonbiniEventCardRegist                        WebhookEventPaymentKonbiniEvent = "card.regist"
	WebhookEventPaymentKonbiniEventCardUpdate                        WebhookEventPaymentKonbiniEvent = "card.update"
	WebhookEventPaymentKonbiniEventSubscriptionCardRegist            WebhookEventPaymentKonbiniEvent = "subscription.card.regist"
	WebhookEventPaymentKonbiniEventSubscriptionCardDelete            WebhookEventPaymentKonbiniEvent = "subscription.card.delete"
	WebhookEventPaymentKonbiniEventSubscriptionCardUpdate            WebhookEventPaymentKonbiniEvent = "subscription.card.update"
	WebhookEventPaymentKonbiniEventRecurringCardBatch                WebhookEventPaymentKonbiniEvent = "recurring.card.batch"
	WebhookEventPaymentKonbiniEventSubscriptionDirectdebitRegist     WebhookEventPaymentKonbiniEvent = "subscription.directdebit.regist"
	WebhookEventPaymentKonbiniEventSubscriptionDirectdebitDelete     WebhookEventPaymentKonbiniEvent = "subscription.directdebit.delete"
	WebhookEventPaymentKonbiniEventSubscriptionDirectdebitUpdate     WebhookEventPaymentKonbiniEvent = "subscription.directdebit.update"
	WebhookEventPaymentKonbiniEventRecurringDirectdebitBatch         WebhookEventPaymentKonbiniEvent = "recurring.directdebit.batch"
	WebhookEventPaymentKonbiniEventPaymentsBulkCardRegist            WebhookEventPaymentKonbiniEvent = "payments.bulk.card.regist"
	WebhookEventPaymentKonbiniEventPaymentsBulkCardBatch             WebhookEventPaymentKonbiniEvent = "payments.bulk.card.batch"
	WebhookEventPaymentKonbiniEventContractsStatusCodeUpdated        WebhookEventPaymentKonbiniEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventPaymentKonbiniEvent values.
func (WebhookEventPaymentKonbiniEvent) AllValues() []WebhookEventPaymentKonbiniEvent {
	return []WebhookEventPaymentKonbiniEvent{
		WebhookEventPaymentKonbiniEventPaymentsCardRegist,
		WebhookEventPaymentKonbiniEventPaymentsCardExec,
		WebhookEventPaymentKonbiniEventPaymentsCardCapture,
		WebhookEventPaymentKonbiniEventPaymentsCardCancel,
		WebhookEventPaymentKonbiniEventPaymentsCardAuth,
		WebhookEventPaymentKonbiniEventPaymentsCardChange,
		WebhookEventPaymentKonbiniEventPaymentsCardSecure2Authenticate,
		WebhookEventPaymentKonbiniEventPaymentsCardSecure2Result,
		WebhookEventPaymentKonbiniEventPaymentsCardSecure,
		WebhookEventPaymentKonbiniEventPaymentsApplepayRegist,
		WebhookEventPaymentKonbiniEventPaymentsApplepayExec,
		WebhookEventPaymentKonbiniEventPaymentsApplepayCapture,
		WebhookEventPaymentKonbiniEventPaymentsApplepayCancel,
		WebhookEventPaymentKonbiniEventPaymentsKonbiniRegist,
		WebhookEventPaymentKonbiniEventPaymentsKonbiniExec,
		WebhookEventPaymentKonbiniEventPaymentsKonbiniCancel,
		WebhookEventPaymentKonbiniEventPaymentsKonbiniComplete,
		WebhookEventPaymentKonbiniEventPaymentsKonbiniCompleteStub,
		WebhookEventPaymentKonbiniEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventPaymentKonbiniEventPaymentsPaypayRegist,
		WebhookEventPaymentKonbiniEventPaymentsPaypayExec,
		WebhookEventPaymentKonbiniEventPaymentsPaypayCapture,
		WebhookEventPaymentKonbiniEventPaymentsPaypayCancel,
		WebhookEventPaymentKonbiniEventPaymentsPaypayChange,
		WebhookEventPaymentKonbiniEventPaymentsPaypayComplete,
		WebhookEventPaymentKonbiniEventPaymentsDirectdebitRegist,
		WebhookEventPaymentKonbiniEventPaymentsDirectdebitExec,
		WebhookEventPaymentKonbiniEventPaymentsDirectdebitCancel,
		WebhookEventPaymentKonbiniEventPaymentsDirectdebitChange,
		WebhookEventPaymentKonbiniEventPaymentsDirectdebitComplete,
		WebhookEventPaymentKonbiniEventPaymentsDirectdebitCompleteStub,
		WebhookEventPaymentKonbiniEventCustomersPaymentMethodsUpdated,
		WebhookEventPaymentKonbiniEventCardRegist,
		WebhookEventPaymentKonbiniEventCardUpdate,
		WebhookEventPaymentKonbiniEventSubscriptionCardRegist,
		WebhookEventPaymentKonbiniEventSubscriptionCardDelete,
		WebhookEventPaymentKonbiniEventSubscriptionCardUpdate,
		WebhookEventPaymentKonbiniEventRecurringCardBatch,
		WebhookEventPaymentKonbiniEventSubscriptionDirectdebitRegist,
		WebhookEventPaymentKonbiniEventSubscriptionDirectdebitDelete,
		WebhookEventPaymentKonbiniEventSubscriptionDirectdebitUpdate,
		WebhookEventPaymentKonbiniEventRecurringDirectdebitBatch,
		WebhookEventPaymentKonbiniEventPaymentsBulkCardRegist,
		WebhookEventPaymentKonbiniEventPaymentsBulkCardBatch,
		WebhookEventPaymentKonbiniEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentKonbiniEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentKonbiniEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentKonbiniEvent) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentKonbiniEvent(data) {
	case WebhookEventPaymentKonbiniEventPaymentsCardRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardRegist
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardExec
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardCapture:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardCapture
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardCancel
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardAuth:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardAuth
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardChange:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardChange
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardSecure2Result
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardSecure
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayRegist
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayExec
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayCapture
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayCancel
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniRegist
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniExec
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniCancel
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniComplete
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayRegist
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayExec
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayCapture
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayCancel
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayChange:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayChange
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayComplete
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitExec
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitChange
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventPaymentKonbiniEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentKonbiniEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventPaymentKonbiniEventCardRegist:
		*s = WebhookEventPaymentKonbiniEventCardRegist
		return nil
	case WebhookEventPaymentKonbiniEventCardUpdate:
		*s = WebhookEventPaymentKonbiniEventCardUpdate
		return nil
	case WebhookEventPaymentKonbiniEventSubscriptionCardRegist:
		*s = WebhookEventPaymentKonbiniEventSubscriptionCardRegist
		return nil
	case WebhookEventPaymentKonbiniEventSubscriptionCardDelete:
		*s = WebhookEventPaymentKonbiniEventSubscriptionCardDelete
		return nil
	case WebhookEventPaymentKonbiniEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentKonbiniEventSubscriptionCardUpdate
		return nil
	case WebhookEventPaymentKonbiniEventRecurringCardBatch:
		*s = WebhookEventPaymentKonbiniEventRecurringCardBatch
		return nil
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentKonbiniEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentKonbiniEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentKonbiniEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventPaymentKonbiniEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentKonbiniEventRecurringDirectdebitBatch
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsBulkCardRegist
		return nil
	case WebhookEventPaymentKonbiniEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentKonbiniEventPaymentsBulkCardBatch
		return nil
	case WebhookEventPaymentKonbiniEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentKonbiniEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// コンビニ事業者コード\
// 購入者が払い込みを行ったコンビニ事業者をあらわすコード。
// - `00010`: セブン-イレブン
// - `00020`: ローソン
// - `00030`: ファミリーマート
// - `00080`: ミニストップ
// - `00760`: セイコーマート.
type WebhookEventPaymentKonbiniKonbiniCode string

const (
	WebhookEventPaymentKonbiniKonbiniCode00010 WebhookEventPaymentKonbiniKonbiniCode = "00010"
	WebhookEventPaymentKonbiniKonbiniCode00020 WebhookEventPaymentKonbiniKonbiniCode = "00020"
	WebhookEventPaymentKonbiniKonbiniCode00030 WebhookEventPaymentKonbiniKonbiniCode = "00030"
	WebhookEventPaymentKonbiniKonbiniCode00080 WebhookEventPaymentKonbiniKonbiniCode = "00080"
	WebhookEventPaymentKonbiniKonbiniCode00760 WebhookEventPaymentKonbiniKonbiniCode = "00760"
)

// AllValues returns all WebhookEventPaymentKonbiniKonbiniCode values.
func (WebhookEventPaymentKonbiniKonbiniCode) AllValues() []WebhookEventPaymentKonbiniKonbiniCode {
	return []WebhookEventPaymentKonbiniKonbiniCode{
		WebhookEventPaymentKonbiniKonbiniCode00010,
		WebhookEventPaymentKonbiniKonbiniCode00020,
		WebhookEventPaymentKonbiniKonbiniCode00030,
		WebhookEventPaymentKonbiniKonbiniCode00080,
		WebhookEventPaymentKonbiniKonbiniCode00760,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentKonbiniKonbiniCode) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentKonbiniKonbiniCode00010:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniKonbiniCode00020:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniKonbiniCode00030:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniKonbiniCode00080:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniKonbiniCode00760:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentKonbiniKonbiniCode) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentKonbiniKonbiniCode(data) {
	case WebhookEventPaymentKonbiniKonbiniCode00010:
		*s = WebhookEventPaymentKonbiniKonbiniCode00010
		return nil
	case WebhookEventPaymentKonbiniKonbiniCode00020:
		*s = WebhookEventPaymentKonbiniKonbiniCode00020
		return nil
	case WebhookEventPaymentKonbiniKonbiniCode00030:
		*s = WebhookEventPaymentKonbiniKonbiniCode00030
		return nil
	case WebhookEventPaymentKonbiniKonbiniCode00080:
		*s = WebhookEventPaymentKonbiniKonbiniCode00080
		return nil
	case WebhookEventPaymentKonbiniKonbiniCode00760:
		*s = WebhookEventPaymentKonbiniKonbiniCode00760
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 多重支払フラグ\
// この決済に対して複数回支払いが行われた場合`1`になります。
// - `0`: 0回、または1回の支払いが行われた
// - `1`: 2回以上、同一のバーコードを用いて支払いが行われた.
type WebhookEventPaymentKonbiniOverpaymentFlag string

const (
	WebhookEventPaymentKonbiniOverpaymentFlag0 WebhookEventPaymentKonbiniOverpaymentFlag = "0"
	WebhookEventPaymentKonbiniOverpaymentFlag1 WebhookEventPaymentKonbiniOverpaymentFlag = "1"
)

// AllValues returns all WebhookEventPaymentKonbiniOverpaymentFlag values.
func (WebhookEventPaymentKonbiniOverpaymentFlag) AllValues() []WebhookEventPaymentKonbiniOverpaymentFlag {
	return []WebhookEventPaymentKonbiniOverpaymentFlag{
		WebhookEventPaymentKonbiniOverpaymentFlag0,
		WebhookEventPaymentKonbiniOverpaymentFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentKonbiniOverpaymentFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentKonbiniOverpaymentFlag0:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniOverpaymentFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentKonbiniOverpaymentFlag) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentKonbiniOverpaymentFlag(data) {
	case WebhookEventPaymentKonbiniOverpaymentFlag0:
		*s = WebhookEventPaymentKonbiniOverpaymentFlag0
		return nil
	case WebhookEventPaymentKonbiniOverpaymentFlag1:
		*s = WebhookEventPaymentKonbiniOverpaymentFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type WebhookEventPaymentKonbiniPayType string

const (
	WebhookEventPaymentKonbiniPayTypeCard           WebhookEventPaymentKonbiniPayType = "Card"
	WebhookEventPaymentKonbiniPayTypeKonbini        WebhookEventPaymentKonbiniPayType = "Konbini"
	WebhookEventPaymentKonbiniPayTypePaypay         WebhookEventPaymentKonbiniPayType = "Paypay"
	WebhookEventPaymentKonbiniPayTypeApplepay       WebhookEventPaymentKonbiniPayType = "Applepay"
	WebhookEventPaymentKonbiniPayTypeDirectdebit    WebhookEventPaymentKonbiniPayType = "Directdebit"
	WebhookEventPaymentKonbiniPayTypeVirtualaccount WebhookEventPaymentKonbiniPayType = "Virtualaccount"
)

// AllValues returns all WebhookEventPaymentKonbiniPayType values.
func (WebhookEventPaymentKonbiniPayType) AllValues() []WebhookEventPaymentKonbiniPayType {
	return []WebhookEventPaymentKonbiniPayType{
		WebhookEventPaymentKonbiniPayTypeCard,
		WebhookEventPaymentKonbiniPayTypeKonbini,
		WebhookEventPaymentKonbiniPayTypePaypay,
		WebhookEventPaymentKonbiniPayTypeApplepay,
		WebhookEventPaymentKonbiniPayTypeDirectdebit,
		WebhookEventPaymentKonbiniPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentKonbiniPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentKonbiniPayTypeCard:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniPayTypeKonbini:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniPayTypePaypay:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniPayTypeApplepay:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniPayTypeDirectdebit:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentKonbiniPayType) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentKonbiniPayType(data) {
	case WebhookEventPaymentKonbiniPayTypeCard:
		*s = WebhookEventPaymentKonbiniPayTypeCard
		return nil
	case WebhookEventPaymentKonbiniPayTypeKonbini:
		*s = WebhookEventPaymentKonbiniPayTypeKonbini
		return nil
	case WebhookEventPaymentKonbiniPayTypePaypay:
		*s = WebhookEventPaymentKonbiniPayTypePaypay
		return nil
	case WebhookEventPaymentKonbiniPayTypeApplepay:
		*s = WebhookEventPaymentKonbiniPayTypeApplepay
		return nil
	case WebhookEventPaymentKonbiniPayTypeDirectdebit:
		*s = WebhookEventPaymentKonbiniPayTypeDirectdebit
		return nil
	case WebhookEventPaymentKonbiniPayTypeVirtualaccount:
		*s = WebhookEventPaymentKonbiniPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type WebhookEventPaymentKonbiniStatus string

const (
	WebhookEventPaymentKonbiniStatusUNPROCESSED             WebhookEventPaymentKonbiniStatus = "UNPROCESSED"
	WebhookEventPaymentKonbiniStatusCHECKED                 WebhookEventPaymentKonbiniStatus = "CHECKED"
	WebhookEventPaymentKonbiniStatusAUTHORIZED              WebhookEventPaymentKonbiniStatus = "AUTHORIZED"
	WebhookEventPaymentKonbiniStatusAWAITINGCUSTOMERPAYMENT WebhookEventPaymentKonbiniStatus = "AWAITING_CUSTOMER_PAYMENT"
	WebhookEventPaymentKonbiniStatusAWAITINGPAYMENTAPPROVAL WebhookEventPaymentKonbiniStatus = "AWAITING_PAYMENT_APPROVAL"
	WebhookEventPaymentKonbiniStatusCAPTURED                WebhookEventPaymentKonbiniStatus = "CAPTURED"
	WebhookEventPaymentKonbiniStatusCANCELED                WebhookEventPaymentKonbiniStatus = "CANCELED"
	WebhookEventPaymentKonbiniStatusEXPIRED                 WebhookEventPaymentKonbiniStatus = "EXPIRED"
	WebhookEventPaymentKonbiniStatusAUTHENTICATED           WebhookEventPaymentKonbiniStatus = "AUTHENTICATED"
	WebhookEventPaymentKonbiniStatusFAILED                  WebhookEventPaymentKonbiniStatus = "FAILED"
)

// AllValues returns all WebhookEventPaymentKonbiniStatus values.
func (WebhookEventPaymentKonbiniStatus) AllValues() []WebhookEventPaymentKonbiniStatus {
	return []WebhookEventPaymentKonbiniStatus{
		WebhookEventPaymentKonbiniStatusUNPROCESSED,
		WebhookEventPaymentKonbiniStatusCHECKED,
		WebhookEventPaymentKonbiniStatusAUTHORIZED,
		WebhookEventPaymentKonbiniStatusAWAITINGCUSTOMERPAYMENT,
		WebhookEventPaymentKonbiniStatusAWAITINGPAYMENTAPPROVAL,
		WebhookEventPaymentKonbiniStatusCAPTURED,
		WebhookEventPaymentKonbiniStatusCANCELED,
		WebhookEventPaymentKonbiniStatusEXPIRED,
		WebhookEventPaymentKonbiniStatusAUTHENTICATED,
		WebhookEventPaymentKonbiniStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentKonbiniStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentKonbiniStatusUNPROCESSED:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusCHECKED:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusAUTHORIZED:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusCAPTURED:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusCANCELED:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusEXPIRED:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusAUTHENTICATED:
		return []byte(s), nil
	case WebhookEventPaymentKonbiniStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentKonbiniStatus) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentKonbiniStatus(data) {
	case WebhookEventPaymentKonbiniStatusUNPROCESSED:
		*s = WebhookEventPaymentKonbiniStatusUNPROCESSED
		return nil
	case WebhookEventPaymentKonbiniStatusCHECKED:
		*s = WebhookEventPaymentKonbiniStatusCHECKED
		return nil
	case WebhookEventPaymentKonbiniStatusAUTHORIZED:
		*s = WebhookEventPaymentKonbiniStatusAUTHORIZED
		return nil
	case WebhookEventPaymentKonbiniStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentKonbiniStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case WebhookEventPaymentKonbiniStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentKonbiniStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case WebhookEventPaymentKonbiniStatusCAPTURED:
		*s = WebhookEventPaymentKonbiniStatusCAPTURED
		return nil
	case WebhookEventPaymentKonbiniStatusCANCELED:
		*s = WebhookEventPaymentKonbiniStatusCANCELED
		return nil
	case WebhookEventPaymentKonbiniStatusEXPIRED:
		*s = WebhookEventPaymentKonbiniStatusEXPIRED
		return nil
	case WebhookEventPaymentKonbiniStatusAUTHENTICATED:
		*s = WebhookEventPaymentKonbiniStatusAUTHENTICATED
		return nil
	case WebhookEventPaymentKonbiniStatusFAILED:
		*s = WebhookEventPaymentKonbiniStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Payment.PayPay
type WebhookEventPaymentPayPay struct {
	ShopID   OptString `json:"shop_id"`
	OrderID  OptString `json:"order_id"`
	AccessID OptString `json:"access_id"`
	// 決済種別\
	// この決済で利用する決済手段です。
	// - `Paypay`: PayPay.
	PayType OptWebhookEventPaymentPayPayPayType `json:"pay_type"`
	// 決済ステータス
	// - `UNPROCESSED`: 未決済<br /><span
	// class="smallText">請求はまだ実行されていません。</span>
	// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち<br /><span
	// class="smallText">購入者によるPayPay上での取引承認を待っている状態。</span>
	// - `AUTHORIZED`: 仮売上<br /><span
	// class="smallText">仮売上としてPayPay残高の確保が完了しており、売上確定により請求を完了できます。</span>
	// - `CAPTURED`: 売上確定<br /><span
	// class="smallText">請求が完了し、売上が確定しています。</span>
	// - `CANCELED`: キャンセル<br /><span
	// class="smallText">この決済はキャンセルされました。</span>
	// - `EXPIRED`: 決済の期限切れ<br /><span
	// class="smallText">この決済は期限が切れています。</span>.
	Status      OptWebhookEventPaymentPayPayStatus  `json:"status"`
	CustomerID  OptString                           `json:"customer_id"`
	ProcessDate OptString                           `json:"process_date"`
	JobCode     OptWebhookEventPaymentPayPayJobCode `json:"job_code"`
	// 加盟店自由項目 1.
	ClientField1 *NilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 *NilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 *NilString `json:"client_field_3"`
	// 利用金額.
	Amount OptString `json:"amount"`
	// 税送料.
	Tax               OptString  `json:"tax"`
	CodeExpiryDate    *NilString `json:"code_expiry_date"`
	AuthMaxDate       *NilString `json:"auth_max_date"`
	OrderDescription  *NilString `json:"order_description"`
	CodeID            *NilString `json:"code_id"`
	PaymentID         *NilString `json:"payment_id"`
	PaymentDate       *NilString `json:"payment_date"`
	MerchantPaymentID *NilString `json:"merchant_payment_id"`
	MerchantUpdateID  *NilString `json:"merchant_update_id"`
	MerchantRevertID  *NilString `json:"merchant_revert_id"`
	MerchantRefundID  *NilString `json:"merchant_refund_id"`
	// この決済において発生したエラーのうち、一番最新のエラーのエラーコードです。\
	// [各エラーコードの定義はこちらを参照](https://docs.fincode.
	// jp/develop_support/error)して確認できます。.
	ErrorCode OptString                         `json:"error_code"`
	Event     OptWebhookEventPaymentPayPayEvent `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventPaymentPayPay) GetShopID() OptString {
	return s.ShopID
}

// GetOrderID returns the value of OrderID.
func (s *WebhookEventPaymentPayPay) GetOrderID() OptString {
	return s.OrderID
}

// GetAccessID returns the value of AccessID.
func (s *WebhookEventPaymentPayPay) GetAccessID() OptString {
	return s.AccessID
}

// GetPayType returns the value of PayType.
func (s *WebhookEventPaymentPayPay) GetPayType() OptWebhookEventPaymentPayPayPayType {
	return s.PayType
}

// GetStatus returns the value of Status.
func (s *WebhookEventPaymentPayPay) GetStatus() OptWebhookEventPaymentPayPayStatus {
	return s.Status
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventPaymentPayPay) GetCustomerID() OptString {
	return s.CustomerID
}

// GetProcessDate returns the value of ProcessDate.
func (s *WebhookEventPaymentPayPay) GetProcessDate() OptString {
	return s.ProcessDate
}

// GetJobCode returns the value of JobCode.
func (s *WebhookEventPaymentPayPay) GetJobCode() OptWebhookEventPaymentPayPayJobCode {
	return s.JobCode
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventPaymentPayPay) GetClientField1() *NilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventPaymentPayPay) GetClientField2() *NilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventPaymentPayPay) GetClientField3() *NilString {
	return s.ClientField3
}

// GetAmount returns the value of Amount.
func (s *WebhookEventPaymentPayPay) GetAmount() OptString {
	return s.Amount
}

// GetTax returns the value of Tax.
func (s *WebhookEventPaymentPayPay) GetTax() OptString {
	return s.Tax
}

// GetCodeExpiryDate returns the value of CodeExpiryDate.
func (s *WebhookEventPaymentPayPay) GetCodeExpiryDate() *NilString {
	return s.CodeExpiryDate
}

// GetAuthMaxDate returns the value of AuthMaxDate.
func (s *WebhookEventPaymentPayPay) GetAuthMaxDate() *NilString {
	return s.AuthMaxDate
}

// GetOrderDescription returns the value of OrderDescription.
func (s *WebhookEventPaymentPayPay) GetOrderDescription() *NilString {
	return s.OrderDescription
}

// GetCodeID returns the value of CodeID.
func (s *WebhookEventPaymentPayPay) GetCodeID() *NilString {
	return s.CodeID
}

// GetPaymentID returns the value of PaymentID.
func (s *WebhookEventPaymentPayPay) GetPaymentID() *NilString {
	return s.PaymentID
}

// GetPaymentDate returns the value of PaymentDate.
func (s *WebhookEventPaymentPayPay) GetPaymentDate() *NilString {
	return s.PaymentDate
}

// GetMerchantPaymentID returns the value of MerchantPaymentID.
func (s *WebhookEventPaymentPayPay) GetMerchantPaymentID() *NilString {
	return s.MerchantPaymentID
}

// GetMerchantUpdateID returns the value of MerchantUpdateID.
func (s *WebhookEventPaymentPayPay) GetMerchantUpdateID() *NilString {
	return s.MerchantUpdateID
}

// GetMerchantRevertID returns the value of MerchantRevertID.
func (s *WebhookEventPaymentPayPay) GetMerchantRevertID() *NilString {
	return s.MerchantRevertID
}

// GetMerchantRefundID returns the value of MerchantRefundID.
func (s *WebhookEventPaymentPayPay) GetMerchantRefundID() *NilString {
	return s.MerchantRefundID
}

// GetErrorCode returns the value of ErrorCode.
func (s *WebhookEventPaymentPayPay) GetErrorCode() OptString {
	return s.ErrorCode
}

// GetEvent returns the value of Event.
func (s *WebhookEventPaymentPayPay) GetEvent() OptWebhookEventPaymentPayPayEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventPaymentPayPay) SetShopID(val OptString) {
	s.ShopID = val
}

// SetOrderID sets the value of OrderID.
func (s *WebhookEventPaymentPayPay) SetOrderID(val OptString) {
	s.OrderID = val
}

// SetAccessID sets the value of AccessID.
func (s *WebhookEventPaymentPayPay) SetAccessID(val OptString) {
	s.AccessID = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventPaymentPayPay) SetPayType(val OptWebhookEventPaymentPayPayPayType) {
	s.PayType = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventPaymentPayPay) SetStatus(val OptWebhookEventPaymentPayPayStatus) {
	s.Status = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventPaymentPayPay) SetCustomerID(val OptString) {
	s.CustomerID = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *WebhookEventPaymentPayPay) SetProcessDate(val OptString) {
	s.ProcessDate = val
}

// SetJobCode sets the value of JobCode.
func (s *WebhookEventPaymentPayPay) SetJobCode(val OptWebhookEventPaymentPayPayJobCode) {
	s.JobCode = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventPaymentPayPay) SetClientField1(val *NilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventPaymentPayPay) SetClientField2(val *NilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventPaymentPayPay) SetClientField3(val *NilString) {
	s.ClientField3 = val
}

// SetAmount sets the value of Amount.
func (s *WebhookEventPaymentPayPay) SetAmount(val OptString) {
	s.Amount = val
}

// SetTax sets the value of Tax.
func (s *WebhookEventPaymentPayPay) SetTax(val OptString) {
	s.Tax = val
}

// SetCodeExpiryDate sets the value of CodeExpiryDate.
func (s *WebhookEventPaymentPayPay) SetCodeExpiryDate(val *NilString) {
	s.CodeExpiryDate = val
}

// SetAuthMaxDate sets the value of AuthMaxDate.
func (s *WebhookEventPaymentPayPay) SetAuthMaxDate(val *NilString) {
	s.AuthMaxDate = val
}

// SetOrderDescription sets the value of OrderDescription.
func (s *WebhookEventPaymentPayPay) SetOrderDescription(val *NilString) {
	s.OrderDescription = val
}

// SetCodeID sets the value of CodeID.
func (s *WebhookEventPaymentPayPay) SetCodeID(val *NilString) {
	s.CodeID = val
}

// SetPaymentID sets the value of PaymentID.
func (s *WebhookEventPaymentPayPay) SetPaymentID(val *NilString) {
	s.PaymentID = val
}

// SetPaymentDate sets the value of PaymentDate.
func (s *WebhookEventPaymentPayPay) SetPaymentDate(val *NilString) {
	s.PaymentDate = val
}

// SetMerchantPaymentID sets the value of MerchantPaymentID.
func (s *WebhookEventPaymentPayPay) SetMerchantPaymentID(val *NilString) {
	s.MerchantPaymentID = val
}

// SetMerchantUpdateID sets the value of MerchantUpdateID.
func (s *WebhookEventPaymentPayPay) SetMerchantUpdateID(val *NilString) {
	s.MerchantUpdateID = val
}

// SetMerchantRevertID sets the value of MerchantRevertID.
func (s *WebhookEventPaymentPayPay) SetMerchantRevertID(val *NilString) {
	s.MerchantRevertID = val
}

// SetMerchantRefundID sets the value of MerchantRefundID.
func (s *WebhookEventPaymentPayPay) SetMerchantRefundID(val *NilString) {
	s.MerchantRefundID = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *WebhookEventPaymentPayPay) SetErrorCode(val OptString) {
	s.ErrorCode = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventPaymentPayPay) SetEvent(val OptWebhookEventPaymentPayPayEvent) {
	s.Event = val
}

// Webhook通知 トリガーイベント.
type WebhookEventPaymentPayPayEvent string

const (
	WebhookEventPaymentPayPayEventPaymentsCardRegist                WebhookEventPaymentPayPayEvent = "payments.card.regist"
	WebhookEventPaymentPayPayEventPaymentsCardExec                  WebhookEventPaymentPayPayEvent = "payments.card.exec"
	WebhookEventPaymentPayPayEventPaymentsCardCapture               WebhookEventPaymentPayPayEvent = "payments.card.capture"
	WebhookEventPaymentPayPayEventPaymentsCardCancel                WebhookEventPaymentPayPayEvent = "payments.card.cancel"
	WebhookEventPaymentPayPayEventPaymentsCardAuth                  WebhookEventPaymentPayPayEvent = "payments.card.auth"
	WebhookEventPaymentPayPayEventPaymentsCardChange                WebhookEventPaymentPayPayEvent = "payments.card.change"
	WebhookEventPaymentPayPayEventPaymentsCardSecure2Authenticate   WebhookEventPaymentPayPayEvent = "payments.card.secure2.authenticate"
	WebhookEventPaymentPayPayEventPaymentsCardSecure2Result         WebhookEventPaymentPayPayEvent = "payments.card.secure2.result"
	WebhookEventPaymentPayPayEventPaymentsCardSecure                WebhookEventPaymentPayPayEvent = "payments.card.secure"
	WebhookEventPaymentPayPayEventPaymentsApplepayRegist            WebhookEventPaymentPayPayEvent = "payments.applepay.regist"
	WebhookEventPaymentPayPayEventPaymentsApplepayExec              WebhookEventPaymentPayPayEvent = "payments.applepay.exec"
	WebhookEventPaymentPayPayEventPaymentsApplepayCapture           WebhookEventPaymentPayPayEvent = "payments.applepay.capture"
	WebhookEventPaymentPayPayEventPaymentsApplepayCancel            WebhookEventPaymentPayPayEvent = "payments.applepay.cancel"
	WebhookEventPaymentPayPayEventPaymentsKonbiniRegist             WebhookEventPaymentPayPayEvent = "payments.konbini.regist"
	WebhookEventPaymentPayPayEventPaymentsKonbiniExec               WebhookEventPaymentPayPayEvent = "payments.konbini.exec"
	WebhookEventPaymentPayPayEventPaymentsKonbiniCancel             WebhookEventPaymentPayPayEvent = "payments.konbini.cancel"
	WebhookEventPaymentPayPayEventPaymentsKonbiniComplete           WebhookEventPaymentPayPayEvent = "payments.konbini.complete"
	WebhookEventPaymentPayPayEventPaymentsKonbiniCompleteStub       WebhookEventPaymentPayPayEvent = "payments.konbini.complete.stub"
	WebhookEventPaymentPayPayEventPaymentsKonbiniExpiredUpdateBatch WebhookEventPaymentPayPayEvent = "payments.konbini.expired.update.batch"
	WebhookEventPaymentPayPayEventPaymentsPaypayRegist              WebhookEventPaymentPayPayEvent = "payments.paypay.regist"
	WebhookEventPaymentPayPayEventPaymentsPaypayExec                WebhookEventPaymentPayPayEvent = "payments.paypay.exec"
	WebhookEventPaymentPayPayEventPaymentsPaypayCapture             WebhookEventPaymentPayPayEvent = "payments.paypay.capture"
	WebhookEventPaymentPayPayEventPaymentsPaypayCancel              WebhookEventPaymentPayPayEvent = "payments.paypay.cancel"
	WebhookEventPaymentPayPayEventPaymentsPaypayChange              WebhookEventPaymentPayPayEvent = "payments.paypay.change"
	WebhookEventPaymentPayPayEventPaymentsPaypayComplete            WebhookEventPaymentPayPayEvent = "payments.paypay.complete"
	WebhookEventPaymentPayPayEventPaymentsDirectdebitRegist         WebhookEventPaymentPayPayEvent = "payments.directdebit.regist"
	WebhookEventPaymentPayPayEventPaymentsDirectdebitExec           WebhookEventPaymentPayPayEvent = "payments.directdebit.exec"
	WebhookEventPaymentPayPayEventPaymentsDirectdebitCancel         WebhookEventPaymentPayPayEvent = "payments.directdebit.cancel"
	WebhookEventPaymentPayPayEventPaymentsDirectdebitChange         WebhookEventPaymentPayPayEvent = "payments.directdebit.change"
	WebhookEventPaymentPayPayEventPaymentsDirectdebitComplete       WebhookEventPaymentPayPayEvent = "payments.directdebit.complete"
	WebhookEventPaymentPayPayEventPaymentsDirectdebitCompleteStub   WebhookEventPaymentPayPayEvent = "payments.directdebit.complete.stub"
	WebhookEventPaymentPayPayEventCustomersPaymentMethodsUpdated    WebhookEventPaymentPayPayEvent = "customers.payment_methods.updated"
	WebhookEventPaymentPayPayEventCardRegist                        WebhookEventPaymentPayPayEvent = "card.regist"
	WebhookEventPaymentPayPayEventCardUpdate                        WebhookEventPaymentPayPayEvent = "card.update"
	WebhookEventPaymentPayPayEventSubscriptionCardRegist            WebhookEventPaymentPayPayEvent = "subscription.card.regist"
	WebhookEventPaymentPayPayEventSubscriptionCardDelete            WebhookEventPaymentPayPayEvent = "subscription.card.delete"
	WebhookEventPaymentPayPayEventSubscriptionCardUpdate            WebhookEventPaymentPayPayEvent = "subscription.card.update"
	WebhookEventPaymentPayPayEventRecurringCardBatch                WebhookEventPaymentPayPayEvent = "recurring.card.batch"
	WebhookEventPaymentPayPayEventSubscriptionDirectdebitRegist     WebhookEventPaymentPayPayEvent = "subscription.directdebit.regist"
	WebhookEventPaymentPayPayEventSubscriptionDirectdebitDelete     WebhookEventPaymentPayPayEvent = "subscription.directdebit.delete"
	WebhookEventPaymentPayPayEventSubscriptionDirectdebitUpdate     WebhookEventPaymentPayPayEvent = "subscription.directdebit.update"
	WebhookEventPaymentPayPayEventRecurringDirectdebitBatch         WebhookEventPaymentPayPayEvent = "recurring.directdebit.batch"
	WebhookEventPaymentPayPayEventPaymentsBulkCardRegist            WebhookEventPaymentPayPayEvent = "payments.bulk.card.regist"
	WebhookEventPaymentPayPayEventPaymentsBulkCardBatch             WebhookEventPaymentPayPayEvent = "payments.bulk.card.batch"
	WebhookEventPaymentPayPayEventContractsStatusCodeUpdated        WebhookEventPaymentPayPayEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventPaymentPayPayEvent values.
func (WebhookEventPaymentPayPayEvent) AllValues() []WebhookEventPaymentPayPayEvent {
	return []WebhookEventPaymentPayPayEvent{
		WebhookEventPaymentPayPayEventPaymentsCardRegist,
		WebhookEventPaymentPayPayEventPaymentsCardExec,
		WebhookEventPaymentPayPayEventPaymentsCardCapture,
		WebhookEventPaymentPayPayEventPaymentsCardCancel,
		WebhookEventPaymentPayPayEventPaymentsCardAuth,
		WebhookEventPaymentPayPayEventPaymentsCardChange,
		WebhookEventPaymentPayPayEventPaymentsCardSecure2Authenticate,
		WebhookEventPaymentPayPayEventPaymentsCardSecure2Result,
		WebhookEventPaymentPayPayEventPaymentsCardSecure,
		WebhookEventPaymentPayPayEventPaymentsApplepayRegist,
		WebhookEventPaymentPayPayEventPaymentsApplepayExec,
		WebhookEventPaymentPayPayEventPaymentsApplepayCapture,
		WebhookEventPaymentPayPayEventPaymentsApplepayCancel,
		WebhookEventPaymentPayPayEventPaymentsKonbiniRegist,
		WebhookEventPaymentPayPayEventPaymentsKonbiniExec,
		WebhookEventPaymentPayPayEventPaymentsKonbiniCancel,
		WebhookEventPaymentPayPayEventPaymentsKonbiniComplete,
		WebhookEventPaymentPayPayEventPaymentsKonbiniCompleteStub,
		WebhookEventPaymentPayPayEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventPaymentPayPayEventPaymentsPaypayRegist,
		WebhookEventPaymentPayPayEventPaymentsPaypayExec,
		WebhookEventPaymentPayPayEventPaymentsPaypayCapture,
		WebhookEventPaymentPayPayEventPaymentsPaypayCancel,
		WebhookEventPaymentPayPayEventPaymentsPaypayChange,
		WebhookEventPaymentPayPayEventPaymentsPaypayComplete,
		WebhookEventPaymentPayPayEventPaymentsDirectdebitRegist,
		WebhookEventPaymentPayPayEventPaymentsDirectdebitExec,
		WebhookEventPaymentPayPayEventPaymentsDirectdebitCancel,
		WebhookEventPaymentPayPayEventPaymentsDirectdebitChange,
		WebhookEventPaymentPayPayEventPaymentsDirectdebitComplete,
		WebhookEventPaymentPayPayEventPaymentsDirectdebitCompleteStub,
		WebhookEventPaymentPayPayEventCustomersPaymentMethodsUpdated,
		WebhookEventPaymentPayPayEventCardRegist,
		WebhookEventPaymentPayPayEventCardUpdate,
		WebhookEventPaymentPayPayEventSubscriptionCardRegist,
		WebhookEventPaymentPayPayEventSubscriptionCardDelete,
		WebhookEventPaymentPayPayEventSubscriptionCardUpdate,
		WebhookEventPaymentPayPayEventRecurringCardBatch,
		WebhookEventPaymentPayPayEventSubscriptionDirectdebitRegist,
		WebhookEventPaymentPayPayEventSubscriptionDirectdebitDelete,
		WebhookEventPaymentPayPayEventSubscriptionDirectdebitUpdate,
		WebhookEventPaymentPayPayEventRecurringDirectdebitBatch,
		WebhookEventPaymentPayPayEventPaymentsBulkCardRegist,
		WebhookEventPaymentPayPayEventPaymentsBulkCardBatch,
		WebhookEventPaymentPayPayEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentPayPayEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentPayPayEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventPaymentPayPayEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentPayPayEvent) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentPayPayEvent(data) {
	case WebhookEventPaymentPayPayEventPaymentsCardRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsCardRegist
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardExec:
		*s = WebhookEventPaymentPayPayEventPaymentsCardExec
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardCapture:
		*s = WebhookEventPaymentPayPayEventPaymentsCardCapture
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsCardCancel
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardAuth:
		*s = WebhookEventPaymentPayPayEventPaymentsCardAuth
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardChange:
		*s = WebhookEventPaymentPayPayEventPaymentsCardChange
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentPayPayEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentPayPayEventPaymentsCardSecure2Result
		return nil
	case WebhookEventPaymentPayPayEventPaymentsCardSecure:
		*s = WebhookEventPaymentPayPayEventPaymentsCardSecure
		return nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayRegist
		return nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayExec:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayExec
		return nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayCapture
		return nil
	case WebhookEventPaymentPayPayEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayCancel
		return nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniRegist
		return nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniExec
		return nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniCancel
		return nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniComplete
		return nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventPaymentPayPayEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayRegist
		return nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayExec:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayExec
		return nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayCapture
		return nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayCancel
		return nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayChange:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayChange
		return nil
	case WebhookEventPaymentPayPayEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayComplete
		return nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitExec
		return nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitChange
		return nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventPaymentPayPayEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentPayPayEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventPaymentPayPayEventCardRegist:
		*s = WebhookEventPaymentPayPayEventCardRegist
		return nil
	case WebhookEventPaymentPayPayEventCardUpdate:
		*s = WebhookEventPaymentPayPayEventCardUpdate
		return nil
	case WebhookEventPaymentPayPayEventSubscriptionCardRegist:
		*s = WebhookEventPaymentPayPayEventSubscriptionCardRegist
		return nil
	case WebhookEventPaymentPayPayEventSubscriptionCardDelete:
		*s = WebhookEventPaymentPayPayEventSubscriptionCardDelete
		return nil
	case WebhookEventPaymentPayPayEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentPayPayEventSubscriptionCardUpdate
		return nil
	case WebhookEventPaymentPayPayEventRecurringCardBatch:
		*s = WebhookEventPaymentPayPayEventRecurringCardBatch
		return nil
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentPayPayEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentPayPayEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentPayPayEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventPaymentPayPayEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentPayPayEventRecurringDirectdebitBatch
		return nil
	case WebhookEventPaymentPayPayEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsBulkCardRegist
		return nil
	case WebhookEventPaymentPayPayEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentPayPayEventPaymentsBulkCardBatch
		return nil
	case WebhookEventPaymentPayPayEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentPayPayEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 取引種別\
// この決済に対し決済実行を行った際、仮売上にするか即座に売上確定するか指定します。
// - `AUTH`：仮売上にする
// - `CAPTURE`：即時売上.
type WebhookEventPaymentPayPayJobCode string

const (
	WebhookEventPaymentPayPayJobCodeAUTH    WebhookEventPaymentPayPayJobCode = "AUTH"
	WebhookEventPaymentPayPayJobCodeCAPTURE WebhookEventPaymentPayPayJobCode = "CAPTURE"
)

// AllValues returns all WebhookEventPaymentPayPayJobCode values.
func (WebhookEventPaymentPayPayJobCode) AllValues() []WebhookEventPaymentPayPayJobCode {
	return []WebhookEventPaymentPayPayJobCode{
		WebhookEventPaymentPayPayJobCodeAUTH,
		WebhookEventPaymentPayPayJobCodeCAPTURE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentPayPayJobCode) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentPayPayJobCodeAUTH:
		return []byte(s), nil
	case WebhookEventPaymentPayPayJobCodeCAPTURE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentPayPayJobCode) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentPayPayJobCode(data) {
	case WebhookEventPaymentPayPayJobCodeAUTH:
		*s = WebhookEventPaymentPayPayJobCodeAUTH
		return nil
	case WebhookEventPaymentPayPayJobCodeCAPTURE:
		*s = WebhookEventPaymentPayPayJobCodeCAPTURE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別\
// この決済で利用する決済手段です。
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Konbini`: コンビニ決済
// - `Paypay`: PayPay
// - `Applepay`: Apple Pay
// - `Directdebit`: 口座振替
// - `Virtualaccount`: 銀行振込.
type WebhookEventPaymentPayPayPayType string

const (
	WebhookEventPaymentPayPayPayTypeCard           WebhookEventPaymentPayPayPayType = "Card"
	WebhookEventPaymentPayPayPayTypeKonbini        WebhookEventPaymentPayPayPayType = "Konbini"
	WebhookEventPaymentPayPayPayTypePaypay         WebhookEventPaymentPayPayPayType = "Paypay"
	WebhookEventPaymentPayPayPayTypeApplepay       WebhookEventPaymentPayPayPayType = "Applepay"
	WebhookEventPaymentPayPayPayTypeDirectdebit    WebhookEventPaymentPayPayPayType = "Directdebit"
	WebhookEventPaymentPayPayPayTypeVirtualaccount WebhookEventPaymentPayPayPayType = "Virtualaccount"
)

// AllValues returns all WebhookEventPaymentPayPayPayType values.
func (WebhookEventPaymentPayPayPayType) AllValues() []WebhookEventPaymentPayPayPayType {
	return []WebhookEventPaymentPayPayPayType{
		WebhookEventPaymentPayPayPayTypeCard,
		WebhookEventPaymentPayPayPayTypeKonbini,
		WebhookEventPaymentPayPayPayTypePaypay,
		WebhookEventPaymentPayPayPayTypeApplepay,
		WebhookEventPaymentPayPayPayTypeDirectdebit,
		WebhookEventPaymentPayPayPayTypeVirtualaccount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentPayPayPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentPayPayPayTypeCard:
		return []byte(s), nil
	case WebhookEventPaymentPayPayPayTypeKonbini:
		return []byte(s), nil
	case WebhookEventPaymentPayPayPayTypePaypay:
		return []byte(s), nil
	case WebhookEventPaymentPayPayPayTypeApplepay:
		return []byte(s), nil
	case WebhookEventPaymentPayPayPayTypeDirectdebit:
		return []byte(s), nil
	case WebhookEventPaymentPayPayPayTypeVirtualaccount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentPayPayPayType) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentPayPayPayType(data) {
	case WebhookEventPaymentPayPayPayTypeCard:
		*s = WebhookEventPaymentPayPayPayTypeCard
		return nil
	case WebhookEventPaymentPayPayPayTypeKonbini:
		*s = WebhookEventPaymentPayPayPayTypeKonbini
		return nil
	case WebhookEventPaymentPayPayPayTypePaypay:
		*s = WebhookEventPaymentPayPayPayTypePaypay
		return nil
	case WebhookEventPaymentPayPayPayTypeApplepay:
		*s = WebhookEventPaymentPayPayPayTypeApplepay
		return nil
	case WebhookEventPaymentPayPayPayTypeDirectdebit:
		*s = WebhookEventPaymentPayPayPayTypeDirectdebit
		return nil
	case WebhookEventPaymentPayPayPayTypeVirtualaccount:
		*s = WebhookEventPaymentPayPayPayTypeVirtualaccount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済ステータス
// - `UNPROCESSED`: 未決済
// - `CHECKED`: 有効性チェック済み
// - `AUTHORIZED`: 仮売上
// - `AWAITING_CUSTOMER_PAYMENT`: 購入者の支払い待ち
// - `AWAITING_PAYMENT_APPROVAL`: 決済承認待ち
// - `CAPTURED`: 売上確定
// - `CANCELED`: キャンセル
// - `EXPIRED`: 決済の期限切れ
// - `AUTHENTICATED`: 未決済（3Dセキュア認証待ち）
// - `FAILED`: 決済失敗.
type WebhookEventPaymentPayPayStatus string

const (
	WebhookEventPaymentPayPayStatusUNPROCESSED             WebhookEventPaymentPayPayStatus = "UNPROCESSED"
	WebhookEventPaymentPayPayStatusCHECKED                 WebhookEventPaymentPayPayStatus = "CHECKED"
	WebhookEventPaymentPayPayStatusAUTHORIZED              WebhookEventPaymentPayPayStatus = "AUTHORIZED"
	WebhookEventPaymentPayPayStatusAWAITINGCUSTOMERPAYMENT WebhookEventPaymentPayPayStatus = "AWAITING_CUSTOMER_PAYMENT"
	WebhookEventPaymentPayPayStatusAWAITINGPAYMENTAPPROVAL WebhookEventPaymentPayPayStatus = "AWAITING_PAYMENT_APPROVAL"
	WebhookEventPaymentPayPayStatusCAPTURED                WebhookEventPaymentPayPayStatus = "CAPTURED"
	WebhookEventPaymentPayPayStatusCANCELED                WebhookEventPaymentPayPayStatus = "CANCELED"
	WebhookEventPaymentPayPayStatusEXPIRED                 WebhookEventPaymentPayPayStatus = "EXPIRED"
	WebhookEventPaymentPayPayStatusAUTHENTICATED           WebhookEventPaymentPayPayStatus = "AUTHENTICATED"
	WebhookEventPaymentPayPayStatusFAILED                  WebhookEventPaymentPayPayStatus = "FAILED"
)

// AllValues returns all WebhookEventPaymentPayPayStatus values.
func (WebhookEventPaymentPayPayStatus) AllValues() []WebhookEventPaymentPayPayStatus {
	return []WebhookEventPaymentPayPayStatus{
		WebhookEventPaymentPayPayStatusUNPROCESSED,
		WebhookEventPaymentPayPayStatusCHECKED,
		WebhookEventPaymentPayPayStatusAUTHORIZED,
		WebhookEventPaymentPayPayStatusAWAITINGCUSTOMERPAYMENT,
		WebhookEventPaymentPayPayStatusAWAITINGPAYMENTAPPROVAL,
		WebhookEventPaymentPayPayStatusCAPTURED,
		WebhookEventPaymentPayPayStatusCANCELED,
		WebhookEventPaymentPayPayStatusEXPIRED,
		WebhookEventPaymentPayPayStatusAUTHENTICATED,
		WebhookEventPaymentPayPayStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventPaymentPayPayStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventPaymentPayPayStatusUNPROCESSED:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusCHECKED:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusAUTHORIZED:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusAWAITINGCUSTOMERPAYMENT:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusAWAITINGPAYMENTAPPROVAL:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusCAPTURED:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusCANCELED:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusEXPIRED:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusAUTHENTICATED:
		return []byte(s), nil
	case WebhookEventPaymentPayPayStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventPaymentPayPayStatus) UnmarshalText(data []byte) error {
	switch WebhookEventPaymentPayPayStatus(data) {
	case WebhookEventPaymentPayPayStatusUNPROCESSED:
		*s = WebhookEventPaymentPayPayStatusUNPROCESSED
		return nil
	case WebhookEventPaymentPayPayStatusCHECKED:
		*s = WebhookEventPaymentPayPayStatusCHECKED
		return nil
	case WebhookEventPaymentPayPayStatusAUTHORIZED:
		*s = WebhookEventPaymentPayPayStatusAUTHORIZED
		return nil
	case WebhookEventPaymentPayPayStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentPayPayStatusAWAITINGCUSTOMERPAYMENT
		return nil
	case WebhookEventPaymentPayPayStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentPayPayStatusAWAITINGPAYMENTAPPROVAL
		return nil
	case WebhookEventPaymentPayPayStatusCAPTURED:
		*s = WebhookEventPaymentPayPayStatusCAPTURED
		return nil
	case WebhookEventPaymentPayPayStatusCANCELED:
		*s = WebhookEventPaymentPayPayStatusCANCELED
		return nil
	case WebhookEventPaymentPayPayStatusEXPIRED:
		*s = WebhookEventPaymentPayPayStatusEXPIRED
		return nil
	case WebhookEventPaymentPayPayStatusAUTHENTICATED:
		*s = WebhookEventPaymentPayPayStatusAUTHENTICATED
		return nil
	case WebhookEventPaymentPayPayStatusFAILED:
		*s = WebhookEventPaymentPayPayStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.RecurringBatch.Card
type WebhookEventRecurringBatchCard struct {
	ShopID OptString `json:"shop_id"`
	// 成功件数\
	// \
	// 今回のサブスクリプション課金において成功した決済の件数です。.
	Succeeded OptString `json:"succeeded"`
	// 失敗件数\
	// \
	// 今回のサブスクリプション課金において失敗した決済の件数です。.
	Failed OptString `json:"failed"`
	// 合計件数\
	// \
	// 今回のサブスクリプション課金において発生した決済の合計件数です。.
	Total       OptString    `json:"total"`
	ProcessDate OptNilString `json:"process_date"`
	// 課金日\
	// 今回のサブスクリプションの課金日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ChargeDate OptString                                `json:"charge_date"`
	PayType    OptWebhookEventRecurringBatchCardPayType `json:"pay_type"`
	Event      OptWebhookEventRecurringBatchCardEvent   `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventRecurringBatchCard) GetShopID() OptString {
	return s.ShopID
}

// GetSucceeded returns the value of Succeeded.
func (s *WebhookEventRecurringBatchCard) GetSucceeded() OptString {
	return s.Succeeded
}

// GetFailed returns the value of Failed.
func (s *WebhookEventRecurringBatchCard) GetFailed() OptString {
	return s.Failed
}

// GetTotal returns the value of Total.
func (s *WebhookEventRecurringBatchCard) GetTotal() OptString {
	return s.Total
}

// GetProcessDate returns the value of ProcessDate.
func (s *WebhookEventRecurringBatchCard) GetProcessDate() OptNilString {
	return s.ProcessDate
}

// GetChargeDate returns the value of ChargeDate.
func (s *WebhookEventRecurringBatchCard) GetChargeDate() OptString {
	return s.ChargeDate
}

// GetPayType returns the value of PayType.
func (s *WebhookEventRecurringBatchCard) GetPayType() OptWebhookEventRecurringBatchCardPayType {
	return s.PayType
}

// GetEvent returns the value of Event.
func (s *WebhookEventRecurringBatchCard) GetEvent() OptWebhookEventRecurringBatchCardEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventRecurringBatchCard) SetShopID(val OptString) {
	s.ShopID = val
}

// SetSucceeded sets the value of Succeeded.
func (s *WebhookEventRecurringBatchCard) SetSucceeded(val OptString) {
	s.Succeeded = val
}

// SetFailed sets the value of Failed.
func (s *WebhookEventRecurringBatchCard) SetFailed(val OptString) {
	s.Failed = val
}

// SetTotal sets the value of Total.
func (s *WebhookEventRecurringBatchCard) SetTotal(val OptString) {
	s.Total = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *WebhookEventRecurringBatchCard) SetProcessDate(val OptNilString) {
	s.ProcessDate = val
}

// SetChargeDate sets the value of ChargeDate.
func (s *WebhookEventRecurringBatchCard) SetChargeDate(val OptString) {
	s.ChargeDate = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventRecurringBatchCard) SetPayType(val OptWebhookEventRecurringBatchCardPayType) {
	s.PayType = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventRecurringBatchCard) SetEvent(val OptWebhookEventRecurringBatchCardEvent) {
	s.Event = val
}

// Webhook通知 トリガーイベント.
type WebhookEventRecurringBatchCardEvent string

const (
	WebhookEventRecurringBatchCardEventPaymentsCardRegist                WebhookEventRecurringBatchCardEvent = "payments.card.regist"
	WebhookEventRecurringBatchCardEventPaymentsCardExec                  WebhookEventRecurringBatchCardEvent = "payments.card.exec"
	WebhookEventRecurringBatchCardEventPaymentsCardCapture               WebhookEventRecurringBatchCardEvent = "payments.card.capture"
	WebhookEventRecurringBatchCardEventPaymentsCardCancel                WebhookEventRecurringBatchCardEvent = "payments.card.cancel"
	WebhookEventRecurringBatchCardEventPaymentsCardAuth                  WebhookEventRecurringBatchCardEvent = "payments.card.auth"
	WebhookEventRecurringBatchCardEventPaymentsCardChange                WebhookEventRecurringBatchCardEvent = "payments.card.change"
	WebhookEventRecurringBatchCardEventPaymentsCardSecure2Authenticate   WebhookEventRecurringBatchCardEvent = "payments.card.secure2.authenticate"
	WebhookEventRecurringBatchCardEventPaymentsCardSecure2Result         WebhookEventRecurringBatchCardEvent = "payments.card.secure2.result"
	WebhookEventRecurringBatchCardEventPaymentsCardSecure                WebhookEventRecurringBatchCardEvent = "payments.card.secure"
	WebhookEventRecurringBatchCardEventPaymentsApplepayRegist            WebhookEventRecurringBatchCardEvent = "payments.applepay.regist"
	WebhookEventRecurringBatchCardEventPaymentsApplepayExec              WebhookEventRecurringBatchCardEvent = "payments.applepay.exec"
	WebhookEventRecurringBatchCardEventPaymentsApplepayCapture           WebhookEventRecurringBatchCardEvent = "payments.applepay.capture"
	WebhookEventRecurringBatchCardEventPaymentsApplepayCancel            WebhookEventRecurringBatchCardEvent = "payments.applepay.cancel"
	WebhookEventRecurringBatchCardEventPaymentsKonbiniRegist             WebhookEventRecurringBatchCardEvent = "payments.konbini.regist"
	WebhookEventRecurringBatchCardEventPaymentsKonbiniExec               WebhookEventRecurringBatchCardEvent = "payments.konbini.exec"
	WebhookEventRecurringBatchCardEventPaymentsKonbiniCancel             WebhookEventRecurringBatchCardEvent = "payments.konbini.cancel"
	WebhookEventRecurringBatchCardEventPaymentsKonbiniComplete           WebhookEventRecurringBatchCardEvent = "payments.konbini.complete"
	WebhookEventRecurringBatchCardEventPaymentsKonbiniCompleteStub       WebhookEventRecurringBatchCardEvent = "payments.konbini.complete.stub"
	WebhookEventRecurringBatchCardEventPaymentsKonbiniExpiredUpdateBatch WebhookEventRecurringBatchCardEvent = "payments.konbini.expired.update.batch"
	WebhookEventRecurringBatchCardEventPaymentsPaypayRegist              WebhookEventRecurringBatchCardEvent = "payments.paypay.regist"
	WebhookEventRecurringBatchCardEventPaymentsPaypayExec                WebhookEventRecurringBatchCardEvent = "payments.paypay.exec"
	WebhookEventRecurringBatchCardEventPaymentsPaypayCapture             WebhookEventRecurringBatchCardEvent = "payments.paypay.capture"
	WebhookEventRecurringBatchCardEventPaymentsPaypayCancel              WebhookEventRecurringBatchCardEvent = "payments.paypay.cancel"
	WebhookEventRecurringBatchCardEventPaymentsPaypayChange              WebhookEventRecurringBatchCardEvent = "payments.paypay.change"
	WebhookEventRecurringBatchCardEventPaymentsPaypayComplete            WebhookEventRecurringBatchCardEvent = "payments.paypay.complete"
	WebhookEventRecurringBatchCardEventPaymentsDirectdebitRegist         WebhookEventRecurringBatchCardEvent = "payments.directdebit.regist"
	WebhookEventRecurringBatchCardEventPaymentsDirectdebitExec           WebhookEventRecurringBatchCardEvent = "payments.directdebit.exec"
	WebhookEventRecurringBatchCardEventPaymentsDirectdebitCancel         WebhookEventRecurringBatchCardEvent = "payments.directdebit.cancel"
	WebhookEventRecurringBatchCardEventPaymentsDirectdebitChange         WebhookEventRecurringBatchCardEvent = "payments.directdebit.change"
	WebhookEventRecurringBatchCardEventPaymentsDirectdebitComplete       WebhookEventRecurringBatchCardEvent = "payments.directdebit.complete"
	WebhookEventRecurringBatchCardEventPaymentsDirectdebitCompleteStub   WebhookEventRecurringBatchCardEvent = "payments.directdebit.complete.stub"
	WebhookEventRecurringBatchCardEventCustomersPaymentMethodsUpdated    WebhookEventRecurringBatchCardEvent = "customers.payment_methods.updated"
	WebhookEventRecurringBatchCardEventCardRegist                        WebhookEventRecurringBatchCardEvent = "card.regist"
	WebhookEventRecurringBatchCardEventCardUpdate                        WebhookEventRecurringBatchCardEvent = "card.update"
	WebhookEventRecurringBatchCardEventSubscriptionCardRegist            WebhookEventRecurringBatchCardEvent = "subscription.card.regist"
	WebhookEventRecurringBatchCardEventSubscriptionCardDelete            WebhookEventRecurringBatchCardEvent = "subscription.card.delete"
	WebhookEventRecurringBatchCardEventSubscriptionCardUpdate            WebhookEventRecurringBatchCardEvent = "subscription.card.update"
	WebhookEventRecurringBatchCardEventRecurringCardBatch                WebhookEventRecurringBatchCardEvent = "recurring.card.batch"
	WebhookEventRecurringBatchCardEventSubscriptionDirectdebitRegist     WebhookEventRecurringBatchCardEvent = "subscription.directdebit.regist"
	WebhookEventRecurringBatchCardEventSubscriptionDirectdebitDelete     WebhookEventRecurringBatchCardEvent = "subscription.directdebit.delete"
	WebhookEventRecurringBatchCardEventSubscriptionDirectdebitUpdate     WebhookEventRecurringBatchCardEvent = "subscription.directdebit.update"
	WebhookEventRecurringBatchCardEventRecurringDirectdebitBatch         WebhookEventRecurringBatchCardEvent = "recurring.directdebit.batch"
	WebhookEventRecurringBatchCardEventPaymentsBulkCardRegist            WebhookEventRecurringBatchCardEvent = "payments.bulk.card.regist"
	WebhookEventRecurringBatchCardEventPaymentsBulkCardBatch             WebhookEventRecurringBatchCardEvent = "payments.bulk.card.batch"
	WebhookEventRecurringBatchCardEventContractsStatusCodeUpdated        WebhookEventRecurringBatchCardEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventRecurringBatchCardEvent values.
func (WebhookEventRecurringBatchCardEvent) AllValues() []WebhookEventRecurringBatchCardEvent {
	return []WebhookEventRecurringBatchCardEvent{
		WebhookEventRecurringBatchCardEventPaymentsCardRegist,
		WebhookEventRecurringBatchCardEventPaymentsCardExec,
		WebhookEventRecurringBatchCardEventPaymentsCardCapture,
		WebhookEventRecurringBatchCardEventPaymentsCardCancel,
		WebhookEventRecurringBatchCardEventPaymentsCardAuth,
		WebhookEventRecurringBatchCardEventPaymentsCardChange,
		WebhookEventRecurringBatchCardEventPaymentsCardSecure2Authenticate,
		WebhookEventRecurringBatchCardEventPaymentsCardSecure2Result,
		WebhookEventRecurringBatchCardEventPaymentsCardSecure,
		WebhookEventRecurringBatchCardEventPaymentsApplepayRegist,
		WebhookEventRecurringBatchCardEventPaymentsApplepayExec,
		WebhookEventRecurringBatchCardEventPaymentsApplepayCapture,
		WebhookEventRecurringBatchCardEventPaymentsApplepayCancel,
		WebhookEventRecurringBatchCardEventPaymentsKonbiniRegist,
		WebhookEventRecurringBatchCardEventPaymentsKonbiniExec,
		WebhookEventRecurringBatchCardEventPaymentsKonbiniCancel,
		WebhookEventRecurringBatchCardEventPaymentsKonbiniComplete,
		WebhookEventRecurringBatchCardEventPaymentsKonbiniCompleteStub,
		WebhookEventRecurringBatchCardEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventRecurringBatchCardEventPaymentsPaypayRegist,
		WebhookEventRecurringBatchCardEventPaymentsPaypayExec,
		WebhookEventRecurringBatchCardEventPaymentsPaypayCapture,
		WebhookEventRecurringBatchCardEventPaymentsPaypayCancel,
		WebhookEventRecurringBatchCardEventPaymentsPaypayChange,
		WebhookEventRecurringBatchCardEventPaymentsPaypayComplete,
		WebhookEventRecurringBatchCardEventPaymentsDirectdebitRegist,
		WebhookEventRecurringBatchCardEventPaymentsDirectdebitExec,
		WebhookEventRecurringBatchCardEventPaymentsDirectdebitCancel,
		WebhookEventRecurringBatchCardEventPaymentsDirectdebitChange,
		WebhookEventRecurringBatchCardEventPaymentsDirectdebitComplete,
		WebhookEventRecurringBatchCardEventPaymentsDirectdebitCompleteStub,
		WebhookEventRecurringBatchCardEventCustomersPaymentMethodsUpdated,
		WebhookEventRecurringBatchCardEventCardRegist,
		WebhookEventRecurringBatchCardEventCardUpdate,
		WebhookEventRecurringBatchCardEventSubscriptionCardRegist,
		WebhookEventRecurringBatchCardEventSubscriptionCardDelete,
		WebhookEventRecurringBatchCardEventSubscriptionCardUpdate,
		WebhookEventRecurringBatchCardEventRecurringCardBatch,
		WebhookEventRecurringBatchCardEventSubscriptionDirectdebitRegist,
		WebhookEventRecurringBatchCardEventSubscriptionDirectdebitDelete,
		WebhookEventRecurringBatchCardEventSubscriptionDirectdebitUpdate,
		WebhookEventRecurringBatchCardEventRecurringDirectdebitBatch,
		WebhookEventRecurringBatchCardEventPaymentsBulkCardRegist,
		WebhookEventRecurringBatchCardEventPaymentsBulkCardBatch,
		WebhookEventRecurringBatchCardEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventRecurringBatchCardEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventRecurringBatchCardEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventCardUpdate:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventRecurringBatchCardEvent) UnmarshalText(data []byte) error {
	switch WebhookEventRecurringBatchCardEvent(data) {
	case WebhookEventRecurringBatchCardEventPaymentsCardRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardRegist
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardExec
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardCapture:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardCapture
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardCancel
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardAuth:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardAuth
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardChange:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardChange
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure2Result:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardSecure2Result
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardSecure
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayRegist
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayExec
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayCapture:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayCapture
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsApplepayCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayCancel
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniRegist
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniExec
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniCancel
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniComplete:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniComplete
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayRegist
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayExec
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayCapture:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayCapture
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayCancel
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayChange:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayChange
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsPaypayComplete:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayComplete
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitExec
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitChange:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitChange
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventRecurringBatchCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventRecurringBatchCardEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventRecurringBatchCardEventCardRegist:
		*s = WebhookEventRecurringBatchCardEventCardRegist
		return nil
	case WebhookEventRecurringBatchCardEventCardUpdate:
		*s = WebhookEventRecurringBatchCardEventCardUpdate
		return nil
	case WebhookEventRecurringBatchCardEventSubscriptionCardRegist:
		*s = WebhookEventRecurringBatchCardEventSubscriptionCardRegist
		return nil
	case WebhookEventRecurringBatchCardEventSubscriptionCardDelete:
		*s = WebhookEventRecurringBatchCardEventSubscriptionCardDelete
		return nil
	case WebhookEventRecurringBatchCardEventSubscriptionCardUpdate:
		*s = WebhookEventRecurringBatchCardEventSubscriptionCardUpdate
		return nil
	case WebhookEventRecurringBatchCardEventRecurringCardBatch:
		*s = WebhookEventRecurringBatchCardEventRecurringCardBatch
		return nil
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventRecurringBatchCardEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventRecurringBatchCardEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventRecurringBatchCardEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventRecurringBatchCardEventRecurringDirectdebitBatch:
		*s = WebhookEventRecurringBatchCardEventRecurringDirectdebitBatch
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsBulkCardRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsBulkCardRegist
		return nil
	case WebhookEventRecurringBatchCardEventPaymentsBulkCardBatch:
		*s = WebhookEventRecurringBatchCardEventPaymentsBulkCardBatch
		return nil
	case WebhookEventRecurringBatchCardEventContractsStatusCodeUpdated:
		*s = WebhookEventRecurringBatchCardEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type WebhookEventRecurringBatchCardPayType string

const (
	WebhookEventRecurringBatchCardPayTypeCard        WebhookEventRecurringBatchCardPayType = "Card"
	WebhookEventRecurringBatchCardPayTypeDirectdebit WebhookEventRecurringBatchCardPayType = "Directdebit"
)

// AllValues returns all WebhookEventRecurringBatchCardPayType values.
func (WebhookEventRecurringBatchCardPayType) AllValues() []WebhookEventRecurringBatchCardPayType {
	return []WebhookEventRecurringBatchCardPayType{
		WebhookEventRecurringBatchCardPayTypeCard,
		WebhookEventRecurringBatchCardPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventRecurringBatchCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventRecurringBatchCardPayTypeCard:
		return []byte(s), nil
	case WebhookEventRecurringBatchCardPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventRecurringBatchCardPayType) UnmarshalText(data []byte) error {
	switch WebhookEventRecurringBatchCardPayType(data) {
	case WebhookEventRecurringBatchCardPayTypeCard:
		*s = WebhookEventRecurringBatchCardPayTypeCard
		return nil
	case WebhookEventRecurringBatchCardPayTypeDirectdebit:
		*s = WebhookEventRecurringBatchCardPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.RecurringBatch.DirectDebit
type WebhookEventRecurringBatchDirectDebit struct {
	ShopID OptString `json:"shop_id"`
	// 成功件数\
	// \
	// 今回のサブスクリプション課金において成功した決済の件数です。.
	Succeeded OptString `json:"succeeded"`
	// 失敗件数\
	// \
	// 今回のサブスクリプション課金において失敗した決済の件数です。.
	Failed OptString `json:"failed"`
	// 合計件数\
	// \
	// 今回のサブスクリプション課金において発生した決済の合計件数です。.
	Total       OptString    `json:"total"`
	ProcessDate OptNilString `json:"process_date"`
	// 課金日\
	// 今回のサブスクリプションの課金日です。\
	// \
	// 形式：`yyyy/MM/dd HH:mm:ss.SSS`.
	ChargeDate OptString                                       `json:"charge_date"`
	PayType    OptWebhookEventRecurringBatchDirectDebitPayType `json:"pay_type"`
	Event      OptWebhookEventRecurringBatchDirectDebitEvent   `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventRecurringBatchDirectDebit) GetShopID() OptString {
	return s.ShopID
}

// GetSucceeded returns the value of Succeeded.
func (s *WebhookEventRecurringBatchDirectDebit) GetSucceeded() OptString {
	return s.Succeeded
}

// GetFailed returns the value of Failed.
func (s *WebhookEventRecurringBatchDirectDebit) GetFailed() OptString {
	return s.Failed
}

// GetTotal returns the value of Total.
func (s *WebhookEventRecurringBatchDirectDebit) GetTotal() OptString {
	return s.Total
}

// GetProcessDate returns the value of ProcessDate.
func (s *WebhookEventRecurringBatchDirectDebit) GetProcessDate() OptNilString {
	return s.ProcessDate
}

// GetChargeDate returns the value of ChargeDate.
func (s *WebhookEventRecurringBatchDirectDebit) GetChargeDate() OptString {
	return s.ChargeDate
}

// GetPayType returns the value of PayType.
func (s *WebhookEventRecurringBatchDirectDebit) GetPayType() OptWebhookEventRecurringBatchDirectDebitPayType {
	return s.PayType
}

// GetEvent returns the value of Event.
func (s *WebhookEventRecurringBatchDirectDebit) GetEvent() OptWebhookEventRecurringBatchDirectDebitEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventRecurringBatchDirectDebit) SetShopID(val OptString) {
	s.ShopID = val
}

// SetSucceeded sets the value of Succeeded.
func (s *WebhookEventRecurringBatchDirectDebit) SetSucceeded(val OptString) {
	s.Succeeded = val
}

// SetFailed sets the value of Failed.
func (s *WebhookEventRecurringBatchDirectDebit) SetFailed(val OptString) {
	s.Failed = val
}

// SetTotal sets the value of Total.
func (s *WebhookEventRecurringBatchDirectDebit) SetTotal(val OptString) {
	s.Total = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *WebhookEventRecurringBatchDirectDebit) SetProcessDate(val OptNilString) {
	s.ProcessDate = val
}

// SetChargeDate sets the value of ChargeDate.
func (s *WebhookEventRecurringBatchDirectDebit) SetChargeDate(val OptString) {
	s.ChargeDate = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventRecurringBatchDirectDebit) SetPayType(val OptWebhookEventRecurringBatchDirectDebitPayType) {
	s.PayType = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventRecurringBatchDirectDebit) SetEvent(val OptWebhookEventRecurringBatchDirectDebitEvent) {
	s.Event = val
}

// Webhook通知 トリガーイベント.
type WebhookEventRecurringBatchDirectDebitEvent string

const (
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardRegist                WebhookEventRecurringBatchDirectDebitEvent = "payments.card.regist"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardExec                  WebhookEventRecurringBatchDirectDebitEvent = "payments.card.exec"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardCapture               WebhookEventRecurringBatchDirectDebitEvent = "payments.card.capture"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardCancel                WebhookEventRecurringBatchDirectDebitEvent = "payments.card.cancel"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardAuth                  WebhookEventRecurringBatchDirectDebitEvent = "payments.card.auth"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardChange                WebhookEventRecurringBatchDirectDebitEvent = "payments.card.change"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Authenticate   WebhookEventRecurringBatchDirectDebitEvent = "payments.card.secure2.authenticate"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Result         WebhookEventRecurringBatchDirectDebitEvent = "payments.card.secure2.result"
	WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure                WebhookEventRecurringBatchDirectDebitEvent = "payments.card.secure"
	WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayRegist            WebhookEventRecurringBatchDirectDebitEvent = "payments.applepay.regist"
	WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayExec              WebhookEventRecurringBatchDirectDebitEvent = "payments.applepay.exec"
	WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCapture           WebhookEventRecurringBatchDirectDebitEvent = "payments.applepay.capture"
	WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCancel            WebhookEventRecurringBatchDirectDebitEvent = "payments.applepay.cancel"
	WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniRegist             WebhookEventRecurringBatchDirectDebitEvent = "payments.konbini.regist"
	WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExec               WebhookEventRecurringBatchDirectDebitEvent = "payments.konbini.exec"
	WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCancel             WebhookEventRecurringBatchDirectDebitEvent = "payments.konbini.cancel"
	WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniComplete           WebhookEventRecurringBatchDirectDebitEvent = "payments.konbini.complete"
	WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCompleteStub       WebhookEventRecurringBatchDirectDebitEvent = "payments.konbini.complete.stub"
	WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExpiredUpdateBatch WebhookEventRecurringBatchDirectDebitEvent = "payments.konbini.expired.update.batch"
	WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayRegist              WebhookEventRecurringBatchDirectDebitEvent = "payments.paypay.regist"
	WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayExec                WebhookEventRecurringBatchDirectDebitEvent = "payments.paypay.exec"
	WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCapture             WebhookEventRecurringBatchDirectDebitEvent = "payments.paypay.capture"
	WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCancel              WebhookEventRecurringBatchDirectDebitEvent = "payments.paypay.cancel"
	WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayChange              WebhookEventRecurringBatchDirectDebitEvent = "payments.paypay.change"
	WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayComplete            WebhookEventRecurringBatchDirectDebitEvent = "payments.paypay.complete"
	WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitRegist         WebhookEventRecurringBatchDirectDebitEvent = "payments.directdebit.regist"
	WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitExec           WebhookEventRecurringBatchDirectDebitEvent = "payments.directdebit.exec"
	WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCancel         WebhookEventRecurringBatchDirectDebitEvent = "payments.directdebit.cancel"
	WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitChange         WebhookEventRecurringBatchDirectDebitEvent = "payments.directdebit.change"
	WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitComplete       WebhookEventRecurringBatchDirectDebitEvent = "payments.directdebit.complete"
	WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCompleteStub   WebhookEventRecurringBatchDirectDebitEvent = "payments.directdebit.complete.stub"
	WebhookEventRecurringBatchDirectDebitEventCustomersPaymentMethodsUpdated    WebhookEventRecurringBatchDirectDebitEvent = "customers.payment_methods.updated"
	WebhookEventRecurringBatchDirectDebitEventCardRegist                        WebhookEventRecurringBatchDirectDebitEvent = "card.regist"
	WebhookEventRecurringBatchDirectDebitEventCardUpdate                        WebhookEventRecurringBatchDirectDebitEvent = "card.update"
	WebhookEventRecurringBatchDirectDebitEventSubscriptionCardRegist            WebhookEventRecurringBatchDirectDebitEvent = "subscription.card.regist"
	WebhookEventRecurringBatchDirectDebitEventSubscriptionCardDelete            WebhookEventRecurringBatchDirectDebitEvent = "subscription.card.delete"
	WebhookEventRecurringBatchDirectDebitEventSubscriptionCardUpdate            WebhookEventRecurringBatchDirectDebitEvent = "subscription.card.update"
	WebhookEventRecurringBatchDirectDebitEventRecurringCardBatch                WebhookEventRecurringBatchDirectDebitEvent = "recurring.card.batch"
	WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitRegist     WebhookEventRecurringBatchDirectDebitEvent = "subscription.directdebit.regist"
	WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitDelete     WebhookEventRecurringBatchDirectDebitEvent = "subscription.directdebit.delete"
	WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitUpdate     WebhookEventRecurringBatchDirectDebitEvent = "subscription.directdebit.update"
	WebhookEventRecurringBatchDirectDebitEventRecurringDirectdebitBatch         WebhookEventRecurringBatchDirectDebitEvent = "recurring.directdebit.batch"
	WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardRegist            WebhookEventRecurringBatchDirectDebitEvent = "payments.bulk.card.regist"
	WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardBatch             WebhookEventRecurringBatchDirectDebitEvent = "payments.bulk.card.batch"
	WebhookEventRecurringBatchDirectDebitEventContractsStatusCodeUpdated        WebhookEventRecurringBatchDirectDebitEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventRecurringBatchDirectDebitEvent values.
func (WebhookEventRecurringBatchDirectDebitEvent) AllValues() []WebhookEventRecurringBatchDirectDebitEvent {
	return []WebhookEventRecurringBatchDirectDebitEvent{
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardRegist,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardExec,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardCapture,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardCancel,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardAuth,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardChange,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Authenticate,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Result,
		WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure,
		WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayRegist,
		WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayExec,
		WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCapture,
		WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCancel,
		WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniRegist,
		WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExec,
		WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCancel,
		WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniComplete,
		WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCompleteStub,
		WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayRegist,
		WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayExec,
		WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCapture,
		WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCancel,
		WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayChange,
		WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayComplete,
		WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitRegist,
		WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitExec,
		WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCancel,
		WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitChange,
		WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitComplete,
		WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCompleteStub,
		WebhookEventRecurringBatchDirectDebitEventCustomersPaymentMethodsUpdated,
		WebhookEventRecurringBatchDirectDebitEventCardRegist,
		WebhookEventRecurringBatchDirectDebitEventCardUpdate,
		WebhookEventRecurringBatchDirectDebitEventSubscriptionCardRegist,
		WebhookEventRecurringBatchDirectDebitEventSubscriptionCardDelete,
		WebhookEventRecurringBatchDirectDebitEventSubscriptionCardUpdate,
		WebhookEventRecurringBatchDirectDebitEventRecurringCardBatch,
		WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitRegist,
		WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitDelete,
		WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitUpdate,
		WebhookEventRecurringBatchDirectDebitEventRecurringDirectdebitBatch,
		WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardRegist,
		WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardBatch,
		WebhookEventRecurringBatchDirectDebitEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventRecurringBatchDirectDebitEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventCardUpdate:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventRecurringBatchDirectDebitEvent) UnmarshalText(data []byte) error {
	switch WebhookEventRecurringBatchDirectDebitEvent(data) {
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardExec
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardCapture:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardCapture
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardCancel
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardAuth:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardAuth
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardChange:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardChange
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Result:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Result
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayExec
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCapture:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCapture
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCancel
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExec
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCancel
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniComplete:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniComplete
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayExec
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCapture:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCapture
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCancel
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayChange:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayChange
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayComplete:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayComplete
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitExec
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitChange:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitChange
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitComplete:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventRecurringBatchDirectDebitEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventRecurringBatchDirectDebitEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventRecurringBatchDirectDebitEventCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventCardRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventCardUpdate:
		*s = WebhookEventRecurringBatchDirectDebitEventCardUpdate
		return nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionCardRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardDelete:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionCardDelete
		return nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardUpdate:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionCardUpdate
		return nil
	case WebhookEventRecurringBatchDirectDebitEventRecurringCardBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventRecurringCardBatch
		return nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitDelete:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventRecurringBatchDirectDebitEventRecurringDirectdebitBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventRecurringDirectdebitBatch
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardRegist
		return nil
	case WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardBatch
		return nil
	case WebhookEventRecurringBatchDirectDebitEventContractsStatusCodeUpdated:
		*s = WebhookEventRecurringBatchDirectDebitEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type WebhookEventRecurringBatchDirectDebitPayType string

const (
	WebhookEventRecurringBatchDirectDebitPayTypeCard        WebhookEventRecurringBatchDirectDebitPayType = "Card"
	WebhookEventRecurringBatchDirectDebitPayTypeDirectdebit WebhookEventRecurringBatchDirectDebitPayType = "Directdebit"
)

// AllValues returns all WebhookEventRecurringBatchDirectDebitPayType values.
func (WebhookEventRecurringBatchDirectDebitPayType) AllValues() []WebhookEventRecurringBatchDirectDebitPayType {
	return []WebhookEventRecurringBatchDirectDebitPayType{
		WebhookEventRecurringBatchDirectDebitPayTypeCard,
		WebhookEventRecurringBatchDirectDebitPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventRecurringBatchDirectDebitPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventRecurringBatchDirectDebitPayTypeCard:
		return []byte(s), nil
	case WebhookEventRecurringBatchDirectDebitPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventRecurringBatchDirectDebitPayType) UnmarshalText(data []byte) error {
	switch WebhookEventRecurringBatchDirectDebitPayType(data) {
	case WebhookEventRecurringBatchDirectDebitPayTypeCard:
		*s = WebhookEventRecurringBatchDirectDebitPayTypeCard
		return nil
	case WebhookEventRecurringBatchDirectDebitPayTypeDirectdebit:
		*s = WebhookEventRecurringBatchDirectDebitPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Subscription.Card
type WebhookEventSubscriptionCard struct {
	ShopID          OptString                                         `json:"shop_id"`
	SubscriptionID  OptNilString                                      `json:"subscription_id"`
	PlanID          OptNilString                                      `json:"plan_id"`
	CustomerID      OptNilString                                      `json:"customer_id"`
	CardID          OptNilString                                      `json:"card_id"`
	DefaultCardFlag OptNilWebhookEventSubscriptionCardDefaultCardFlag `json:"default_card_flag"`
	Status          OptWebhookEventSubscriptionCardStatus             `json:"status"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3   OptNilString                                   `json:"client_field_3"`
	ProcessDate    OptNilString                                   `json:"process_date"`
	StartDate      OptNilString                                   `json:"start_date"`
	StopDate       OptNilString                                   `json:"stop_date"`
	NextChargeDate OptNilString                                   `json:"next_charge_date"`
	EndMonthFlag   OptNilWebhookEventSubscriptionCardEndMonthFlag `json:"end_month_flag"`
	PayType        OptWebhookEventSubscriptionCardPayType         `json:"pay_type"`
	Event          OptWebhookEventSubscriptionCardEvent           `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventSubscriptionCard) GetShopID() OptString {
	return s.ShopID
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *WebhookEventSubscriptionCard) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetPlanID returns the value of PlanID.
func (s *WebhookEventSubscriptionCard) GetPlanID() OptNilString {
	return s.PlanID
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventSubscriptionCard) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetCardID returns the value of CardID.
func (s *WebhookEventSubscriptionCard) GetCardID() OptNilString {
	return s.CardID
}

// GetDefaultCardFlag returns the value of DefaultCardFlag.
func (s *WebhookEventSubscriptionCard) GetDefaultCardFlag() OptNilWebhookEventSubscriptionCardDefaultCardFlag {
	return s.DefaultCardFlag
}

// GetStatus returns the value of Status.
func (s *WebhookEventSubscriptionCard) GetStatus() OptWebhookEventSubscriptionCardStatus {
	return s.Status
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventSubscriptionCard) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventSubscriptionCard) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventSubscriptionCard) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetProcessDate returns the value of ProcessDate.
func (s *WebhookEventSubscriptionCard) GetProcessDate() OptNilString {
	return s.ProcessDate
}

// GetStartDate returns the value of StartDate.
func (s *WebhookEventSubscriptionCard) GetStartDate() OptNilString {
	return s.StartDate
}

// GetStopDate returns the value of StopDate.
func (s *WebhookEventSubscriptionCard) GetStopDate() OptNilString {
	return s.StopDate
}

// GetNextChargeDate returns the value of NextChargeDate.
func (s *WebhookEventSubscriptionCard) GetNextChargeDate() OptNilString {
	return s.NextChargeDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *WebhookEventSubscriptionCard) GetEndMonthFlag() OptNilWebhookEventSubscriptionCardEndMonthFlag {
	return s.EndMonthFlag
}

// GetPayType returns the value of PayType.
func (s *WebhookEventSubscriptionCard) GetPayType() OptWebhookEventSubscriptionCardPayType {
	return s.PayType
}

// GetEvent returns the value of Event.
func (s *WebhookEventSubscriptionCard) GetEvent() OptWebhookEventSubscriptionCardEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventSubscriptionCard) SetShopID(val OptString) {
	s.ShopID = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *WebhookEventSubscriptionCard) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetPlanID sets the value of PlanID.
func (s *WebhookEventSubscriptionCard) SetPlanID(val OptNilString) {
	s.PlanID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventSubscriptionCard) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetCardID sets the value of CardID.
func (s *WebhookEventSubscriptionCard) SetCardID(val OptNilString) {
	s.CardID = val
}

// SetDefaultCardFlag sets the value of DefaultCardFlag.
func (s *WebhookEventSubscriptionCard) SetDefaultCardFlag(val OptNilWebhookEventSubscriptionCardDefaultCardFlag) {
	s.DefaultCardFlag = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventSubscriptionCard) SetStatus(val OptWebhookEventSubscriptionCardStatus) {
	s.Status = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventSubscriptionCard) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventSubscriptionCard) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventSubscriptionCard) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetProcessDate sets the value of ProcessDate.
func (s *WebhookEventSubscriptionCard) SetProcessDate(val OptNilString) {
	s.ProcessDate = val
}

// SetStartDate sets the value of StartDate.
func (s *WebhookEventSubscriptionCard) SetStartDate(val OptNilString) {
	s.StartDate = val
}

// SetStopDate sets the value of StopDate.
func (s *WebhookEventSubscriptionCard) SetStopDate(val OptNilString) {
	s.StopDate = val
}

// SetNextChargeDate sets the value of NextChargeDate.
func (s *WebhookEventSubscriptionCard) SetNextChargeDate(val OptNilString) {
	s.NextChargeDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *WebhookEventSubscriptionCard) SetEndMonthFlag(val OptNilWebhookEventSubscriptionCardEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventSubscriptionCard) SetPayType(val OptWebhookEventSubscriptionCardPayType) {
	s.PayType = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventSubscriptionCard) SetEvent(val OptWebhookEventSubscriptionCardEvent) {
	s.Event = val
}

// デフォルトフラグ。\
// このカードが決済実行やサブスクリプション登録などでカードIDを指定しない場合に自動的に使用するカードかどうかを示すフラグです。\
// 顧客に対して必ず1つのデフォルトカードが存在します。（カードが1つも登録されていない場合を除く）
// - `0`: デフォルトカードではない
// - `1`: デフォルトカード.
type WebhookEventSubscriptionCardDefaultCardFlag string

const (
	WebhookEventSubscriptionCardDefaultCardFlag0 WebhookEventSubscriptionCardDefaultCardFlag = "0"
	WebhookEventSubscriptionCardDefaultCardFlag1 WebhookEventSubscriptionCardDefaultCardFlag = "1"
)

// AllValues returns all WebhookEventSubscriptionCardDefaultCardFlag values.
func (WebhookEventSubscriptionCardDefaultCardFlag) AllValues() []WebhookEventSubscriptionCardDefaultCardFlag {
	return []WebhookEventSubscriptionCardDefaultCardFlag{
		WebhookEventSubscriptionCardDefaultCardFlag0,
		WebhookEventSubscriptionCardDefaultCardFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionCardDefaultCardFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionCardDefaultCardFlag0:
		return []byte(s), nil
	case WebhookEventSubscriptionCardDefaultCardFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionCardDefaultCardFlag) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionCardDefaultCardFlag(data) {
	case WebhookEventSubscriptionCardDefaultCardFlag0:
		*s = WebhookEventSubscriptionCardDefaultCardFlag0
		return nil
	case WebhookEventSubscriptionCardDefaultCardFlag1:
		*s = WebhookEventSubscriptionCardDefaultCardFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type WebhookEventSubscriptionCardEndMonthFlag string

const (
	WebhookEventSubscriptionCardEndMonthFlag0 WebhookEventSubscriptionCardEndMonthFlag = "0"
	WebhookEventSubscriptionCardEndMonthFlag1 WebhookEventSubscriptionCardEndMonthFlag = "1"
)

// AllValues returns all WebhookEventSubscriptionCardEndMonthFlag values.
func (WebhookEventSubscriptionCardEndMonthFlag) AllValues() []WebhookEventSubscriptionCardEndMonthFlag {
	return []WebhookEventSubscriptionCardEndMonthFlag{
		WebhookEventSubscriptionCardEndMonthFlag0,
		WebhookEventSubscriptionCardEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionCardEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionCardEndMonthFlag0:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionCardEndMonthFlag) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionCardEndMonthFlag(data) {
	case WebhookEventSubscriptionCardEndMonthFlag0:
		*s = WebhookEventSubscriptionCardEndMonthFlag0
		return nil
	case WebhookEventSubscriptionCardEndMonthFlag1:
		*s = WebhookEventSubscriptionCardEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventSubscriptionCardEvent string

const (
	WebhookEventSubscriptionCardEventPaymentsCardRegist                WebhookEventSubscriptionCardEvent = "payments.card.regist"
	WebhookEventSubscriptionCardEventPaymentsCardExec                  WebhookEventSubscriptionCardEvent = "payments.card.exec"
	WebhookEventSubscriptionCardEventPaymentsCardCapture               WebhookEventSubscriptionCardEvent = "payments.card.capture"
	WebhookEventSubscriptionCardEventPaymentsCardCancel                WebhookEventSubscriptionCardEvent = "payments.card.cancel"
	WebhookEventSubscriptionCardEventPaymentsCardAuth                  WebhookEventSubscriptionCardEvent = "payments.card.auth"
	WebhookEventSubscriptionCardEventPaymentsCardChange                WebhookEventSubscriptionCardEvent = "payments.card.change"
	WebhookEventSubscriptionCardEventPaymentsCardSecure2Authenticate   WebhookEventSubscriptionCardEvent = "payments.card.secure2.authenticate"
	WebhookEventSubscriptionCardEventPaymentsCardSecure2Result         WebhookEventSubscriptionCardEvent = "payments.card.secure2.result"
	WebhookEventSubscriptionCardEventPaymentsCardSecure                WebhookEventSubscriptionCardEvent = "payments.card.secure"
	WebhookEventSubscriptionCardEventPaymentsApplepayRegist            WebhookEventSubscriptionCardEvent = "payments.applepay.regist"
	WebhookEventSubscriptionCardEventPaymentsApplepayExec              WebhookEventSubscriptionCardEvent = "payments.applepay.exec"
	WebhookEventSubscriptionCardEventPaymentsApplepayCapture           WebhookEventSubscriptionCardEvent = "payments.applepay.capture"
	WebhookEventSubscriptionCardEventPaymentsApplepayCancel            WebhookEventSubscriptionCardEvent = "payments.applepay.cancel"
	WebhookEventSubscriptionCardEventPaymentsKonbiniRegist             WebhookEventSubscriptionCardEvent = "payments.konbini.regist"
	WebhookEventSubscriptionCardEventPaymentsKonbiniExec               WebhookEventSubscriptionCardEvent = "payments.konbini.exec"
	WebhookEventSubscriptionCardEventPaymentsKonbiniCancel             WebhookEventSubscriptionCardEvent = "payments.konbini.cancel"
	WebhookEventSubscriptionCardEventPaymentsKonbiniComplete           WebhookEventSubscriptionCardEvent = "payments.konbini.complete"
	WebhookEventSubscriptionCardEventPaymentsKonbiniCompleteStub       WebhookEventSubscriptionCardEvent = "payments.konbini.complete.stub"
	WebhookEventSubscriptionCardEventPaymentsKonbiniExpiredUpdateBatch WebhookEventSubscriptionCardEvent = "payments.konbini.expired.update.batch"
	WebhookEventSubscriptionCardEventPaymentsPaypayRegist              WebhookEventSubscriptionCardEvent = "payments.paypay.regist"
	WebhookEventSubscriptionCardEventPaymentsPaypayExec                WebhookEventSubscriptionCardEvent = "payments.paypay.exec"
	WebhookEventSubscriptionCardEventPaymentsPaypayCapture             WebhookEventSubscriptionCardEvent = "payments.paypay.capture"
	WebhookEventSubscriptionCardEventPaymentsPaypayCancel              WebhookEventSubscriptionCardEvent = "payments.paypay.cancel"
	WebhookEventSubscriptionCardEventPaymentsPaypayChange              WebhookEventSubscriptionCardEvent = "payments.paypay.change"
	WebhookEventSubscriptionCardEventPaymentsPaypayComplete            WebhookEventSubscriptionCardEvent = "payments.paypay.complete"
	WebhookEventSubscriptionCardEventPaymentsDirectdebitRegist         WebhookEventSubscriptionCardEvent = "payments.directdebit.regist"
	WebhookEventSubscriptionCardEventPaymentsDirectdebitExec           WebhookEventSubscriptionCardEvent = "payments.directdebit.exec"
	WebhookEventSubscriptionCardEventPaymentsDirectdebitCancel         WebhookEventSubscriptionCardEvent = "payments.directdebit.cancel"
	WebhookEventSubscriptionCardEventPaymentsDirectdebitChange         WebhookEventSubscriptionCardEvent = "payments.directdebit.change"
	WebhookEventSubscriptionCardEventPaymentsDirectdebitComplete       WebhookEventSubscriptionCardEvent = "payments.directdebit.complete"
	WebhookEventSubscriptionCardEventPaymentsDirectdebitCompleteStub   WebhookEventSubscriptionCardEvent = "payments.directdebit.complete.stub"
	WebhookEventSubscriptionCardEventCustomersPaymentMethodsUpdated    WebhookEventSubscriptionCardEvent = "customers.payment_methods.updated"
	WebhookEventSubscriptionCardEventCardRegist                        WebhookEventSubscriptionCardEvent = "card.regist"
	WebhookEventSubscriptionCardEventCardUpdate                        WebhookEventSubscriptionCardEvent = "card.update"
	WebhookEventSubscriptionCardEventSubscriptionCardRegist            WebhookEventSubscriptionCardEvent = "subscription.card.regist"
	WebhookEventSubscriptionCardEventSubscriptionCardDelete            WebhookEventSubscriptionCardEvent = "subscription.card.delete"
	WebhookEventSubscriptionCardEventSubscriptionCardUpdate            WebhookEventSubscriptionCardEvent = "subscription.card.update"
	WebhookEventSubscriptionCardEventRecurringCardBatch                WebhookEventSubscriptionCardEvent = "recurring.card.batch"
	WebhookEventSubscriptionCardEventSubscriptionDirectdebitRegist     WebhookEventSubscriptionCardEvent = "subscription.directdebit.regist"
	WebhookEventSubscriptionCardEventSubscriptionDirectdebitDelete     WebhookEventSubscriptionCardEvent = "subscription.directdebit.delete"
	WebhookEventSubscriptionCardEventSubscriptionDirectdebitUpdate     WebhookEventSubscriptionCardEvent = "subscription.directdebit.update"
	WebhookEventSubscriptionCardEventRecurringDirectdebitBatch         WebhookEventSubscriptionCardEvent = "recurring.directdebit.batch"
	WebhookEventSubscriptionCardEventPaymentsBulkCardRegist            WebhookEventSubscriptionCardEvent = "payments.bulk.card.regist"
	WebhookEventSubscriptionCardEventPaymentsBulkCardBatch             WebhookEventSubscriptionCardEvent = "payments.bulk.card.batch"
	WebhookEventSubscriptionCardEventContractsStatusCodeUpdated        WebhookEventSubscriptionCardEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventSubscriptionCardEvent values.
func (WebhookEventSubscriptionCardEvent) AllValues() []WebhookEventSubscriptionCardEvent {
	return []WebhookEventSubscriptionCardEvent{
		WebhookEventSubscriptionCardEventPaymentsCardRegist,
		WebhookEventSubscriptionCardEventPaymentsCardExec,
		WebhookEventSubscriptionCardEventPaymentsCardCapture,
		WebhookEventSubscriptionCardEventPaymentsCardCancel,
		WebhookEventSubscriptionCardEventPaymentsCardAuth,
		WebhookEventSubscriptionCardEventPaymentsCardChange,
		WebhookEventSubscriptionCardEventPaymentsCardSecure2Authenticate,
		WebhookEventSubscriptionCardEventPaymentsCardSecure2Result,
		WebhookEventSubscriptionCardEventPaymentsCardSecure,
		WebhookEventSubscriptionCardEventPaymentsApplepayRegist,
		WebhookEventSubscriptionCardEventPaymentsApplepayExec,
		WebhookEventSubscriptionCardEventPaymentsApplepayCapture,
		WebhookEventSubscriptionCardEventPaymentsApplepayCancel,
		WebhookEventSubscriptionCardEventPaymentsKonbiniRegist,
		WebhookEventSubscriptionCardEventPaymentsKonbiniExec,
		WebhookEventSubscriptionCardEventPaymentsKonbiniCancel,
		WebhookEventSubscriptionCardEventPaymentsKonbiniComplete,
		WebhookEventSubscriptionCardEventPaymentsKonbiniCompleteStub,
		WebhookEventSubscriptionCardEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventSubscriptionCardEventPaymentsPaypayRegist,
		WebhookEventSubscriptionCardEventPaymentsPaypayExec,
		WebhookEventSubscriptionCardEventPaymentsPaypayCapture,
		WebhookEventSubscriptionCardEventPaymentsPaypayCancel,
		WebhookEventSubscriptionCardEventPaymentsPaypayChange,
		WebhookEventSubscriptionCardEventPaymentsPaypayComplete,
		WebhookEventSubscriptionCardEventPaymentsDirectdebitRegist,
		WebhookEventSubscriptionCardEventPaymentsDirectdebitExec,
		WebhookEventSubscriptionCardEventPaymentsDirectdebitCancel,
		WebhookEventSubscriptionCardEventPaymentsDirectdebitChange,
		WebhookEventSubscriptionCardEventPaymentsDirectdebitComplete,
		WebhookEventSubscriptionCardEventPaymentsDirectdebitCompleteStub,
		WebhookEventSubscriptionCardEventCustomersPaymentMethodsUpdated,
		WebhookEventSubscriptionCardEventCardRegist,
		WebhookEventSubscriptionCardEventCardUpdate,
		WebhookEventSubscriptionCardEventSubscriptionCardRegist,
		WebhookEventSubscriptionCardEventSubscriptionCardDelete,
		WebhookEventSubscriptionCardEventSubscriptionCardUpdate,
		WebhookEventSubscriptionCardEventRecurringCardBatch,
		WebhookEventSubscriptionCardEventSubscriptionDirectdebitRegist,
		WebhookEventSubscriptionCardEventSubscriptionDirectdebitDelete,
		WebhookEventSubscriptionCardEventSubscriptionDirectdebitUpdate,
		WebhookEventSubscriptionCardEventRecurringDirectdebitBatch,
		WebhookEventSubscriptionCardEventPaymentsBulkCardRegist,
		WebhookEventSubscriptionCardEventPaymentsBulkCardBatch,
		WebhookEventSubscriptionCardEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionCardEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionCardEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventCardUpdate:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionCardEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionCardEvent) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionCardEvent(data) {
	case WebhookEventSubscriptionCardEventPaymentsCardRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsCardRegist
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardExec:
		*s = WebhookEventSubscriptionCardEventPaymentsCardExec
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardCapture:
		*s = WebhookEventSubscriptionCardEventPaymentsCardCapture
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsCardCancel
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardAuth:
		*s = WebhookEventSubscriptionCardEventPaymentsCardAuth
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardChange:
		*s = WebhookEventSubscriptionCardEventPaymentsCardChange
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventSubscriptionCardEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardSecure2Result:
		*s = WebhookEventSubscriptionCardEventPaymentsCardSecure2Result
		return nil
	case WebhookEventSubscriptionCardEventPaymentsCardSecure:
		*s = WebhookEventSubscriptionCardEventPaymentsCardSecure
		return nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayRegist
		return nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayExec:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayExec
		return nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayCapture:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayCapture
		return nil
	case WebhookEventSubscriptionCardEventPaymentsApplepayCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayCancel
		return nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniRegist
		return nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniExec:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniExec
		return nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniCancel
		return nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniComplete:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniComplete
		return nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventSubscriptionCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayRegist
		return nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayExec:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayExec
		return nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayCapture:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayCapture
		return nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayCancel
		return nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayChange:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayChange
		return nil
	case WebhookEventSubscriptionCardEventPaymentsPaypayComplete:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayComplete
		return nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitExec:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitExec
		return nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitChange:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitChange
		return nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventSubscriptionCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventSubscriptionCardEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventSubscriptionCardEventCardRegist:
		*s = WebhookEventSubscriptionCardEventCardRegist
		return nil
	case WebhookEventSubscriptionCardEventCardUpdate:
		*s = WebhookEventSubscriptionCardEventCardUpdate
		return nil
	case WebhookEventSubscriptionCardEventSubscriptionCardRegist:
		*s = WebhookEventSubscriptionCardEventSubscriptionCardRegist
		return nil
	case WebhookEventSubscriptionCardEventSubscriptionCardDelete:
		*s = WebhookEventSubscriptionCardEventSubscriptionCardDelete
		return nil
	case WebhookEventSubscriptionCardEventSubscriptionCardUpdate:
		*s = WebhookEventSubscriptionCardEventSubscriptionCardUpdate
		return nil
	case WebhookEventSubscriptionCardEventRecurringCardBatch:
		*s = WebhookEventSubscriptionCardEventRecurringCardBatch
		return nil
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventSubscriptionCardEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventSubscriptionCardEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventSubscriptionCardEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventSubscriptionCardEventRecurringDirectdebitBatch:
		*s = WebhookEventSubscriptionCardEventRecurringDirectdebitBatch
		return nil
	case WebhookEventSubscriptionCardEventPaymentsBulkCardRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsBulkCardRegist
		return nil
	case WebhookEventSubscriptionCardEventPaymentsBulkCardBatch:
		*s = WebhookEventSubscriptionCardEventPaymentsBulkCardBatch
		return nil
	case WebhookEventSubscriptionCardEventContractsStatusCodeUpdated:
		*s = WebhookEventSubscriptionCardEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type WebhookEventSubscriptionCardPayType string

const (
	WebhookEventSubscriptionCardPayTypeCard        WebhookEventSubscriptionCardPayType = "Card"
	WebhookEventSubscriptionCardPayTypeDirectdebit WebhookEventSubscriptionCardPayType = "Directdebit"
)

// AllValues returns all WebhookEventSubscriptionCardPayType values.
func (WebhookEventSubscriptionCardPayType) AllValues() []WebhookEventSubscriptionCardPayType {
	return []WebhookEventSubscriptionCardPayType{
		WebhookEventSubscriptionCardPayTypeCard,
		WebhookEventSubscriptionCardPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionCardPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionCardPayTypeCard:
		return []byte(s), nil
	case WebhookEventSubscriptionCardPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionCardPayType) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionCardPayType(data) {
	case WebhookEventSubscriptionCardPayTypeCard:
		*s = WebhookEventSubscriptionCardPayTypeCard
		return nil
	case WebhookEventSubscriptionCardPayTypeDirectdebit:
		*s = WebhookEventSubscriptionCardPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type WebhookEventSubscriptionCardStatus string

const (
	WebhookEventSubscriptionCardStatusACTIVE     WebhookEventSubscriptionCardStatus = "ACTIVE"
	WebhookEventSubscriptionCardStatusRUNNING    WebhookEventSubscriptionCardStatus = "RUNNING"
	WebhookEventSubscriptionCardStatusCANCELED   WebhookEventSubscriptionCardStatus = "CANCELED"
	WebhookEventSubscriptionCardStatusINCOMPLETE WebhookEventSubscriptionCardStatus = "INCOMPLETE"
)

// AllValues returns all WebhookEventSubscriptionCardStatus values.
func (WebhookEventSubscriptionCardStatus) AllValues() []WebhookEventSubscriptionCardStatus {
	return []WebhookEventSubscriptionCardStatus{
		WebhookEventSubscriptionCardStatusACTIVE,
		WebhookEventSubscriptionCardStatusRUNNING,
		WebhookEventSubscriptionCardStatusCANCELED,
		WebhookEventSubscriptionCardStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionCardStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionCardStatusACTIVE:
		return []byte(s), nil
	case WebhookEventSubscriptionCardStatusRUNNING:
		return []byte(s), nil
	case WebhookEventSubscriptionCardStatusCANCELED:
		return []byte(s), nil
	case WebhookEventSubscriptionCardStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionCardStatus) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionCardStatus(data) {
	case WebhookEventSubscriptionCardStatusACTIVE:
		*s = WebhookEventSubscriptionCardStatusACTIVE
		return nil
	case WebhookEventSubscriptionCardStatusRUNNING:
		*s = WebhookEventSubscriptionCardStatusRUNNING
		return nil
	case WebhookEventSubscriptionCardStatusCANCELED:
		*s = WebhookEventSubscriptionCardStatusCANCELED
		return nil
	case WebhookEventSubscriptionCardStatusINCOMPLETE:
		*s = WebhookEventSubscriptionCardStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookEvent.Subscription.DirectDebit
type WebhookEventSubscriptionDirectDebit struct {
	ShopID          OptString                                            `json:"shop_id"`
	SubscriptionID  OptNilString                                         `json:"subscription_id"`
	PlanID          OptNilString                                         `json:"plan_id"`
	CustomerID      OptNilString                                         `json:"customer_id"`
	PaymentMethodID OptNilString                                         `json:"payment_method_id"`
	DefaultFlag     OptNilWebhookEventSubscriptionDirectDebitDefaultFlag `json:"default_flag"`
	Status          OptWebhookEventSubscriptionDirectDebitStatus         `json:"status"`
	// 加盟店自由項目 1.
	ClientField1 OptNilString `json:"client_field_1"`
	// 加盟店自由項目 2.
	ClientField2 OptNilString `json:"client_field_2"`
	// 加盟店自由項目 3.
	ClientField3 OptNilString `json:"client_field_3"`
	// ご利用明細表示内容.
	Remarks        OptNilString                                          `json:"remarks"`
	StartDate      OptNilString                                          `json:"start_date"`
	StopDate       OptNilString                                          `json:"stop_date"`
	NextChargeDate OptNilString                                          `json:"next_charge_date"`
	EndMonthFlag   OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag `json:"end_month_flag"`
	PayType        OptWebhookEventSubscriptionDirectDebitPayType         `json:"pay_type"`
	Event          OptWebhookEventSubscriptionDirectDebitEvent           `json:"event"`
}

// GetShopID returns the value of ShopID.
func (s *WebhookEventSubscriptionDirectDebit) GetShopID() OptString {
	return s.ShopID
}

// GetSubscriptionID returns the value of SubscriptionID.
func (s *WebhookEventSubscriptionDirectDebit) GetSubscriptionID() OptNilString {
	return s.SubscriptionID
}

// GetPlanID returns the value of PlanID.
func (s *WebhookEventSubscriptionDirectDebit) GetPlanID() OptNilString {
	return s.PlanID
}

// GetCustomerID returns the value of CustomerID.
func (s *WebhookEventSubscriptionDirectDebit) GetCustomerID() OptNilString {
	return s.CustomerID
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *WebhookEventSubscriptionDirectDebit) GetPaymentMethodID() OptNilString {
	return s.PaymentMethodID
}

// GetDefaultFlag returns the value of DefaultFlag.
func (s *WebhookEventSubscriptionDirectDebit) GetDefaultFlag() OptNilWebhookEventSubscriptionDirectDebitDefaultFlag {
	return s.DefaultFlag
}

// GetStatus returns the value of Status.
func (s *WebhookEventSubscriptionDirectDebit) GetStatus() OptWebhookEventSubscriptionDirectDebitStatus {
	return s.Status
}

// GetClientField1 returns the value of ClientField1.
func (s *WebhookEventSubscriptionDirectDebit) GetClientField1() OptNilString {
	return s.ClientField1
}

// GetClientField2 returns the value of ClientField2.
func (s *WebhookEventSubscriptionDirectDebit) GetClientField2() OptNilString {
	return s.ClientField2
}

// GetClientField3 returns the value of ClientField3.
func (s *WebhookEventSubscriptionDirectDebit) GetClientField3() OptNilString {
	return s.ClientField3
}

// GetRemarks returns the value of Remarks.
func (s *WebhookEventSubscriptionDirectDebit) GetRemarks() OptNilString {
	return s.Remarks
}

// GetStartDate returns the value of StartDate.
func (s *WebhookEventSubscriptionDirectDebit) GetStartDate() OptNilString {
	return s.StartDate
}

// GetStopDate returns the value of StopDate.
func (s *WebhookEventSubscriptionDirectDebit) GetStopDate() OptNilString {
	return s.StopDate
}

// GetNextChargeDate returns the value of NextChargeDate.
func (s *WebhookEventSubscriptionDirectDebit) GetNextChargeDate() OptNilString {
	return s.NextChargeDate
}

// GetEndMonthFlag returns the value of EndMonthFlag.
func (s *WebhookEventSubscriptionDirectDebit) GetEndMonthFlag() OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag {
	return s.EndMonthFlag
}

// GetPayType returns the value of PayType.
func (s *WebhookEventSubscriptionDirectDebit) GetPayType() OptWebhookEventSubscriptionDirectDebitPayType {
	return s.PayType
}

// GetEvent returns the value of Event.
func (s *WebhookEventSubscriptionDirectDebit) GetEvent() OptWebhookEventSubscriptionDirectDebitEvent {
	return s.Event
}

// SetShopID sets the value of ShopID.
func (s *WebhookEventSubscriptionDirectDebit) SetShopID(val OptString) {
	s.ShopID = val
}

// SetSubscriptionID sets the value of SubscriptionID.
func (s *WebhookEventSubscriptionDirectDebit) SetSubscriptionID(val OptNilString) {
	s.SubscriptionID = val
}

// SetPlanID sets the value of PlanID.
func (s *WebhookEventSubscriptionDirectDebit) SetPlanID(val OptNilString) {
	s.PlanID = val
}

// SetCustomerID sets the value of CustomerID.
func (s *WebhookEventSubscriptionDirectDebit) SetCustomerID(val OptNilString) {
	s.CustomerID = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *WebhookEventSubscriptionDirectDebit) SetPaymentMethodID(val OptNilString) {
	s.PaymentMethodID = val
}

// SetDefaultFlag sets the value of DefaultFlag.
func (s *WebhookEventSubscriptionDirectDebit) SetDefaultFlag(val OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) {
	s.DefaultFlag = val
}

// SetStatus sets the value of Status.
func (s *WebhookEventSubscriptionDirectDebit) SetStatus(val OptWebhookEventSubscriptionDirectDebitStatus) {
	s.Status = val
}

// SetClientField1 sets the value of ClientField1.
func (s *WebhookEventSubscriptionDirectDebit) SetClientField1(val OptNilString) {
	s.ClientField1 = val
}

// SetClientField2 sets the value of ClientField2.
func (s *WebhookEventSubscriptionDirectDebit) SetClientField2(val OptNilString) {
	s.ClientField2 = val
}

// SetClientField3 sets the value of ClientField3.
func (s *WebhookEventSubscriptionDirectDebit) SetClientField3(val OptNilString) {
	s.ClientField3 = val
}

// SetRemarks sets the value of Remarks.
func (s *WebhookEventSubscriptionDirectDebit) SetRemarks(val OptNilString) {
	s.Remarks = val
}

// SetStartDate sets the value of StartDate.
func (s *WebhookEventSubscriptionDirectDebit) SetStartDate(val OptNilString) {
	s.StartDate = val
}

// SetStopDate sets the value of StopDate.
func (s *WebhookEventSubscriptionDirectDebit) SetStopDate(val OptNilString) {
	s.StopDate = val
}

// SetNextChargeDate sets the value of NextChargeDate.
func (s *WebhookEventSubscriptionDirectDebit) SetNextChargeDate(val OptNilString) {
	s.NextChargeDate = val
}

// SetEndMonthFlag sets the value of EndMonthFlag.
func (s *WebhookEventSubscriptionDirectDebit) SetEndMonthFlag(val OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) {
	s.EndMonthFlag = val
}

// SetPayType sets the value of PayType.
func (s *WebhookEventSubscriptionDirectDebit) SetPayType(val OptWebhookEventSubscriptionDirectDebitPayType) {
	s.PayType = val
}

// SetEvent sets the value of Event.
func (s *WebhookEventSubscriptionDirectDebit) SetEvent(val OptWebhookEventSubscriptionDirectDebitEvent) {
	s.Event = val
}

// デフォルトフラグ。\
// この決済手段が決済実行やサブスクリプション登録などで決済手段IDを指定しない場合に自動的に使用する決済手段かどうかを示すフラグです。\
// 顧客に対して、決済種別ごとに必ず1つのデフォルト決済手段が存在します。（決済手段が1つも登録されていない場合を除く）
// - `0`: デフォルト決済手段ではない
// - `1`: デフォルト決済手段.
type WebhookEventSubscriptionDirectDebitDefaultFlag string

const (
	WebhookEventSubscriptionDirectDebitDefaultFlag0 WebhookEventSubscriptionDirectDebitDefaultFlag = "0"
	WebhookEventSubscriptionDirectDebitDefaultFlag1 WebhookEventSubscriptionDirectDebitDefaultFlag = "1"
)

// AllValues returns all WebhookEventSubscriptionDirectDebitDefaultFlag values.
func (WebhookEventSubscriptionDirectDebitDefaultFlag) AllValues() []WebhookEventSubscriptionDirectDebitDefaultFlag {
	return []WebhookEventSubscriptionDirectDebitDefaultFlag{
		WebhookEventSubscriptionDirectDebitDefaultFlag0,
		WebhookEventSubscriptionDirectDebitDefaultFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionDirectDebitDefaultFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionDirectDebitDefaultFlag0:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitDefaultFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionDirectDebitDefaultFlag) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionDirectDebitDefaultFlag(data) {
	case WebhookEventSubscriptionDirectDebitDefaultFlag0:
		*s = WebhookEventSubscriptionDirectDebitDefaultFlag0
		return nil
	case WebhookEventSubscriptionDirectDebitDefaultFlag1:
		*s = WebhookEventSubscriptionDirectDebitDefaultFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 月末課金フラグ
// - `0`：月末課金を行わない
// - `1`：月末課金を行う.
type WebhookEventSubscriptionDirectDebitEndMonthFlag string

const (
	WebhookEventSubscriptionDirectDebitEndMonthFlag0 WebhookEventSubscriptionDirectDebitEndMonthFlag = "0"
	WebhookEventSubscriptionDirectDebitEndMonthFlag1 WebhookEventSubscriptionDirectDebitEndMonthFlag = "1"
)

// AllValues returns all WebhookEventSubscriptionDirectDebitEndMonthFlag values.
func (WebhookEventSubscriptionDirectDebitEndMonthFlag) AllValues() []WebhookEventSubscriptionDirectDebitEndMonthFlag {
	return []WebhookEventSubscriptionDirectDebitEndMonthFlag{
		WebhookEventSubscriptionDirectDebitEndMonthFlag0,
		WebhookEventSubscriptionDirectDebitEndMonthFlag1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionDirectDebitEndMonthFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionDirectDebitEndMonthFlag0:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEndMonthFlag1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionDirectDebitEndMonthFlag) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionDirectDebitEndMonthFlag(data) {
	case WebhookEventSubscriptionDirectDebitEndMonthFlag0:
		*s = WebhookEventSubscriptionDirectDebitEndMonthFlag0
		return nil
	case WebhookEventSubscriptionDirectDebitEndMonthFlag1:
		*s = WebhookEventSubscriptionDirectDebitEndMonthFlag1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookEventSubscriptionDirectDebitEvent string

const (
	WebhookEventSubscriptionDirectDebitEventPaymentsCardRegist                WebhookEventSubscriptionDirectDebitEvent = "payments.card.regist"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardExec                  WebhookEventSubscriptionDirectDebitEvent = "payments.card.exec"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardCapture               WebhookEventSubscriptionDirectDebitEvent = "payments.card.capture"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardCancel                WebhookEventSubscriptionDirectDebitEvent = "payments.card.cancel"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardAuth                  WebhookEventSubscriptionDirectDebitEvent = "payments.card.auth"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardChange                WebhookEventSubscriptionDirectDebitEvent = "payments.card.change"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Authenticate   WebhookEventSubscriptionDirectDebitEvent = "payments.card.secure2.authenticate"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Result         WebhookEventSubscriptionDirectDebitEvent = "payments.card.secure2.result"
	WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure                WebhookEventSubscriptionDirectDebitEvent = "payments.card.secure"
	WebhookEventSubscriptionDirectDebitEventPaymentsApplepayRegist            WebhookEventSubscriptionDirectDebitEvent = "payments.applepay.regist"
	WebhookEventSubscriptionDirectDebitEventPaymentsApplepayExec              WebhookEventSubscriptionDirectDebitEvent = "payments.applepay.exec"
	WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCapture           WebhookEventSubscriptionDirectDebitEvent = "payments.applepay.capture"
	WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCancel            WebhookEventSubscriptionDirectDebitEvent = "payments.applepay.cancel"
	WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniRegist             WebhookEventSubscriptionDirectDebitEvent = "payments.konbini.regist"
	WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExec               WebhookEventSubscriptionDirectDebitEvent = "payments.konbini.exec"
	WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCancel             WebhookEventSubscriptionDirectDebitEvent = "payments.konbini.cancel"
	WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniComplete           WebhookEventSubscriptionDirectDebitEvent = "payments.konbini.complete"
	WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCompleteStub       WebhookEventSubscriptionDirectDebitEvent = "payments.konbini.complete.stub"
	WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExpiredUpdateBatch WebhookEventSubscriptionDirectDebitEvent = "payments.konbini.expired.update.batch"
	WebhookEventSubscriptionDirectDebitEventPaymentsPaypayRegist              WebhookEventSubscriptionDirectDebitEvent = "payments.paypay.regist"
	WebhookEventSubscriptionDirectDebitEventPaymentsPaypayExec                WebhookEventSubscriptionDirectDebitEvent = "payments.paypay.exec"
	WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCapture             WebhookEventSubscriptionDirectDebitEvent = "payments.paypay.capture"
	WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCancel              WebhookEventSubscriptionDirectDebitEvent = "payments.paypay.cancel"
	WebhookEventSubscriptionDirectDebitEventPaymentsPaypayChange              WebhookEventSubscriptionDirectDebitEvent = "payments.paypay.change"
	WebhookEventSubscriptionDirectDebitEventPaymentsPaypayComplete            WebhookEventSubscriptionDirectDebitEvent = "payments.paypay.complete"
	WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitRegist         WebhookEventSubscriptionDirectDebitEvent = "payments.directdebit.regist"
	WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitExec           WebhookEventSubscriptionDirectDebitEvent = "payments.directdebit.exec"
	WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCancel         WebhookEventSubscriptionDirectDebitEvent = "payments.directdebit.cancel"
	WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitChange         WebhookEventSubscriptionDirectDebitEvent = "payments.directdebit.change"
	WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitComplete       WebhookEventSubscriptionDirectDebitEvent = "payments.directdebit.complete"
	WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCompleteStub   WebhookEventSubscriptionDirectDebitEvent = "payments.directdebit.complete.stub"
	WebhookEventSubscriptionDirectDebitEventCustomersPaymentMethodsUpdated    WebhookEventSubscriptionDirectDebitEvent = "customers.payment_methods.updated"
	WebhookEventSubscriptionDirectDebitEventCardRegist                        WebhookEventSubscriptionDirectDebitEvent = "card.regist"
	WebhookEventSubscriptionDirectDebitEventCardUpdate                        WebhookEventSubscriptionDirectDebitEvent = "card.update"
	WebhookEventSubscriptionDirectDebitEventSubscriptionCardRegist            WebhookEventSubscriptionDirectDebitEvent = "subscription.card.regist"
	WebhookEventSubscriptionDirectDebitEventSubscriptionCardDelete            WebhookEventSubscriptionDirectDebitEvent = "subscription.card.delete"
	WebhookEventSubscriptionDirectDebitEventSubscriptionCardUpdate            WebhookEventSubscriptionDirectDebitEvent = "subscription.card.update"
	WebhookEventSubscriptionDirectDebitEventRecurringCardBatch                WebhookEventSubscriptionDirectDebitEvent = "recurring.card.batch"
	WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitRegist     WebhookEventSubscriptionDirectDebitEvent = "subscription.directdebit.regist"
	WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitDelete     WebhookEventSubscriptionDirectDebitEvent = "subscription.directdebit.delete"
	WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitUpdate     WebhookEventSubscriptionDirectDebitEvent = "subscription.directdebit.update"
	WebhookEventSubscriptionDirectDebitEventRecurringDirectdebitBatch         WebhookEventSubscriptionDirectDebitEvent = "recurring.directdebit.batch"
	WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardRegist            WebhookEventSubscriptionDirectDebitEvent = "payments.bulk.card.regist"
	WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardBatch             WebhookEventSubscriptionDirectDebitEvent = "payments.bulk.card.batch"
	WebhookEventSubscriptionDirectDebitEventContractsStatusCodeUpdated        WebhookEventSubscriptionDirectDebitEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookEventSubscriptionDirectDebitEvent values.
func (WebhookEventSubscriptionDirectDebitEvent) AllValues() []WebhookEventSubscriptionDirectDebitEvent {
	return []WebhookEventSubscriptionDirectDebitEvent{
		WebhookEventSubscriptionDirectDebitEventPaymentsCardRegist,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardExec,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardCapture,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardCancel,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardAuth,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardChange,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Authenticate,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Result,
		WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure,
		WebhookEventSubscriptionDirectDebitEventPaymentsApplepayRegist,
		WebhookEventSubscriptionDirectDebitEventPaymentsApplepayExec,
		WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCapture,
		WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCancel,
		WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniRegist,
		WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExec,
		WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCancel,
		WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniComplete,
		WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCompleteStub,
		WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookEventSubscriptionDirectDebitEventPaymentsPaypayRegist,
		WebhookEventSubscriptionDirectDebitEventPaymentsPaypayExec,
		WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCapture,
		WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCancel,
		WebhookEventSubscriptionDirectDebitEventPaymentsPaypayChange,
		WebhookEventSubscriptionDirectDebitEventPaymentsPaypayComplete,
		WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitRegist,
		WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitExec,
		WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCancel,
		WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitChange,
		WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitComplete,
		WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCompleteStub,
		WebhookEventSubscriptionDirectDebitEventCustomersPaymentMethodsUpdated,
		WebhookEventSubscriptionDirectDebitEventCardRegist,
		WebhookEventSubscriptionDirectDebitEventCardUpdate,
		WebhookEventSubscriptionDirectDebitEventSubscriptionCardRegist,
		WebhookEventSubscriptionDirectDebitEventSubscriptionCardDelete,
		WebhookEventSubscriptionDirectDebitEventSubscriptionCardUpdate,
		WebhookEventSubscriptionDirectDebitEventRecurringCardBatch,
		WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitRegist,
		WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitDelete,
		WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitUpdate,
		WebhookEventSubscriptionDirectDebitEventRecurringDirectdebitBatch,
		WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardRegist,
		WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardBatch,
		WebhookEventSubscriptionDirectDebitEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionDirectDebitEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventCardUpdate:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionDirectDebitEvent) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionDirectDebitEvent(data) {
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardExec
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardCapture:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardCapture
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardCancel
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardAuth:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardAuth
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardChange:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardChange
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Result:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Result
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayExec
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCapture:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCapture
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCancel
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExec
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCancel
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniComplete:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniComplete
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayExec
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCapture:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCapture
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCancel
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayChange:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayChange
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayComplete:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayComplete
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitExec
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCancel
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitChange:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitChange
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitComplete:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitComplete
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookEventSubscriptionDirectDebitEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventSubscriptionDirectDebitEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookEventSubscriptionDirectDebitEventCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventCardRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventCardUpdate:
		*s = WebhookEventSubscriptionDirectDebitEventCardUpdate
		return nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionCardRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardDelete:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionCardDelete
		return nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardUpdate:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionCardUpdate
		return nil
	case WebhookEventSubscriptionDirectDebitEventRecurringCardBatch:
		*s = WebhookEventSubscriptionDirectDebitEventRecurringCardBatch
		return nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitRegist:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitDelete:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitDelete
		return nil
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookEventSubscriptionDirectDebitEventRecurringDirectdebitBatch:
		*s = WebhookEventSubscriptionDirectDebitEventRecurringDirectdebitBatch
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardRegist
		return nil
	case WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardBatch:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardBatch
		return nil
	case WebhookEventSubscriptionDirectDebitEventContractsStatusCodeUpdated:
		*s = WebhookEventSubscriptionDirectDebitEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// 決済種別（サブスクリプションに対応しているもの）
// - `Card`: クレジットカード/デビットカード/プリペイドカード
// - `Directdebit`: 口座振替.
type WebhookEventSubscriptionDirectDebitPayType string

const (
	WebhookEventSubscriptionDirectDebitPayTypeCard        WebhookEventSubscriptionDirectDebitPayType = "Card"
	WebhookEventSubscriptionDirectDebitPayTypeDirectdebit WebhookEventSubscriptionDirectDebitPayType = "Directdebit"
)

// AllValues returns all WebhookEventSubscriptionDirectDebitPayType values.
func (WebhookEventSubscriptionDirectDebitPayType) AllValues() []WebhookEventSubscriptionDirectDebitPayType {
	return []WebhookEventSubscriptionDirectDebitPayType{
		WebhookEventSubscriptionDirectDebitPayTypeCard,
		WebhookEventSubscriptionDirectDebitPayTypeDirectdebit,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionDirectDebitPayType) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionDirectDebitPayTypeCard:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitPayTypeDirectdebit:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionDirectDebitPayType) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionDirectDebitPayType(data) {
	case WebhookEventSubscriptionDirectDebitPayTypeCard:
		*s = WebhookEventSubscriptionDirectDebitPayTypeCard
		return nil
	case WebhookEventSubscriptionDirectDebitPayTypeDirectdebit:
		*s = WebhookEventSubscriptionDirectDebitPayTypeDirectdebit
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ステータス
// - `ACTIVE`: サブスクリプションが有効<br /><span
// class="smallText">設定した課金日に顧客に対して課金が行われます。</span>
// - `RUNNING`: 課金処理中
// - `CANCELED`: 解約済み<br /><span
// class="smallText">顧客に対して課金は行われません。</span>
// - `INCOMPLETE`: 登録失敗<br /><span
// class="smallText">何らかの理由により登録に失敗しました。顧客に対して課金は行われません。</span>.
type WebhookEventSubscriptionDirectDebitStatus string

const (
	WebhookEventSubscriptionDirectDebitStatusACTIVE     WebhookEventSubscriptionDirectDebitStatus = "ACTIVE"
	WebhookEventSubscriptionDirectDebitStatusRUNNING    WebhookEventSubscriptionDirectDebitStatus = "RUNNING"
	WebhookEventSubscriptionDirectDebitStatusCANCELED   WebhookEventSubscriptionDirectDebitStatus = "CANCELED"
	WebhookEventSubscriptionDirectDebitStatusINCOMPLETE WebhookEventSubscriptionDirectDebitStatus = "INCOMPLETE"
)

// AllValues returns all WebhookEventSubscriptionDirectDebitStatus values.
func (WebhookEventSubscriptionDirectDebitStatus) AllValues() []WebhookEventSubscriptionDirectDebitStatus {
	return []WebhookEventSubscriptionDirectDebitStatus{
		WebhookEventSubscriptionDirectDebitStatusACTIVE,
		WebhookEventSubscriptionDirectDebitStatusRUNNING,
		WebhookEventSubscriptionDirectDebitStatusCANCELED,
		WebhookEventSubscriptionDirectDebitStatusINCOMPLETE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookEventSubscriptionDirectDebitStatus) MarshalText() ([]byte, error) {
	switch s {
	case WebhookEventSubscriptionDirectDebitStatusACTIVE:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitStatusRUNNING:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitStatusCANCELED:
		return []byte(s), nil
	case WebhookEventSubscriptionDirectDebitStatusINCOMPLETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookEventSubscriptionDirectDebitStatus) UnmarshalText(data []byte) error {
	switch WebhookEventSubscriptionDirectDebitStatus(data) {
	case WebhookEventSubscriptionDirectDebitStatusACTIVE:
		*s = WebhookEventSubscriptionDirectDebitStatusACTIVE
		return nil
	case WebhookEventSubscriptionDirectDebitStatusRUNNING:
		*s = WebhookEventSubscriptionDirectDebitStatusRUNNING
		return nil
	case WebhookEventSubscriptionDirectDebitStatusCANCELED:
		*s = WebhookEventSubscriptionDirectDebitStatusCANCELED
		return nil
	case WebhookEventSubscriptionDirectDebitStatusINCOMPLETE:
		*s = WebhookEventSubscriptionDirectDebitStatusINCOMPLETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookResponse
type WebhookResponse struct {
	// Webhook通知受信\
	// \
	// Webhookの受信が正常に完了したかどうかをfincodeにレスポンスします。
	// - `0`: 受信成功<br /><span
	// class="smallText">fincodeは受信に成功したと判断し、通知を終了します。</span>
	// - `1`: 受信失敗<br /><span
	// class="smallText">fincodeは受信に失敗したと判断します。Webhookの受信に失敗した場合は、fincodeはリトライを行います。</span>.
	Receive OptWebhookResponseReceive `json:"receive"`
}

// GetReceive returns the value of Receive.
func (s *WebhookResponse) GetReceive() OptWebhookResponseReceive {
	return s.Receive
}

// SetReceive sets the value of Receive.
func (s *WebhookResponse) SetReceive(val OptWebhookResponseReceive) {
	s.Receive = val
}

func (*WebhookResponse) receiveWebhookOfApplePayPaymentRes()            {}
func (*WebhookResponse) receiveWebhookOfCardPaymentBulkBatchRes()       {}
func (*WebhookResponse) receiveWebhookOfCardPaymentRes()                {}
func (*WebhookResponse) receiveWebhookOfCardRecurringBatchRes()         {}
func (*WebhookResponse) receiveWebhookOfCardRes()                       {}
func (*WebhookResponse) receiveWebhookOfCardSubscriptionRes()           {}
func (*WebhookResponse) receiveWebhookOfContractRes()                   {}
func (*WebhookResponse) receiveWebhookOfCustomerPaymentMethodRes()      {}
func (*WebhookResponse) receiveWebhookOfDirectDebitPaymentRes()         {}
func (*WebhookResponse) receiveWebhookOfDirectDebitRecurringBatchRes()  {}
func (*WebhookResponse) receiveWebhookOfDirectDebitSubscriptionRes()    {}
func (*WebhookResponse) receiveWebhookOfKonbiniPaymentRes()             {}
func (*WebhookResponse) receiveWebhookOfPayPayPaymentRes()              {}
func (*WebhookResponse) receiveWebhookOfRegisteringCardPaymentBulkRes() {}

// Webhook通知受信\
// \
// Webhookの受信が正常に完了したかどうかをfincodeにレスポンスします。
// - `0`: 受信成功<br /><span
// class="smallText">fincodeは受信に成功したと判断し、通知を終了します。</span>
// - `1`: 受信失敗<br /><span
// class="smallText">fincodeは受信に失敗したと判断します。Webhookの受信に失敗した場合は、fincodeはリトライを行います。</span>.
type WebhookResponseReceive string

const (
	WebhookResponseReceive0 WebhookResponseReceive = "0"
	WebhookResponseReceive1 WebhookResponseReceive = "1"
)

// AllValues returns all WebhookResponseReceive values.
func (WebhookResponseReceive) AllValues() []WebhookResponseReceive {
	return []WebhookResponseReceive{
		WebhookResponseReceive0,
		WebhookResponseReceive1,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookResponseReceive) MarshalText() ([]byte, error) {
	switch s {
	case WebhookResponseReceive0:
		return []byte(s), nil
	case WebhookResponseReceive1:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookResponseReceive) UnmarshalText(data []byte) error {
	switch WebhookResponseReceive(data) {
	case WebhookResponseReceive0:
		*s = WebhookResponseReceive0
		return nil
	case WebhookResponseReceive1:
		*s = WebhookResponseReceive1
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookSetting
type WebhookSetting struct {
	// Webhook設定ID.
	ID OptString `json:"id"`
	// Webhook通知先 URL\
	// \
	// Webhookの通知先URLを指定します。\
	// fincodeのWebhookはHTTPS通信かつ443ポートでのみ受信可能です。.
	URL   OptURI                 `json:"url"`
	Event OptWebhookSettingEvent `json:"event"`
	// 署名\
	// \
	// このWebhookがfincodeから送信されたことを確認するための署名です。\
	// fincodeからのWebhook通知において`Fincode-Signature`ヘッダーにこの値が含まれます。.
	Signature OptString  `json:"signature"`
	Created   OptString  `json:"created"`
	Updated   *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *WebhookSetting) GetID() OptString {
	return s.ID
}

// GetURL returns the value of URL.
func (s *WebhookSetting) GetURL() OptURI {
	return s.URL
}

// GetEvent returns the value of Event.
func (s *WebhookSetting) GetEvent() OptWebhookSettingEvent {
	return s.Event
}

// GetSignature returns the value of Signature.
func (s *WebhookSetting) GetSignature() OptString {
	return s.Signature
}

// GetCreated returns the value of Created.
func (s *WebhookSetting) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *WebhookSetting) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *WebhookSetting) SetID(val OptString) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *WebhookSetting) SetURL(val OptURI) {
	s.URL = val
}

// SetEvent sets the value of Event.
func (s *WebhookSetting) SetEvent(val OptWebhookSettingEvent) {
	s.Event = val
}

// SetSignature sets the value of Signature.
func (s *WebhookSetting) SetSignature(val OptString) {
	s.Signature = val
}

// SetCreated sets the value of Created.
func (s *WebhookSetting) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *WebhookSetting) SetUpdated(val *NilString) {
	s.Updated = val
}

// Ref: #/components/schemas/WebhookSetting.Creating.Request
type WebhookSettingCreatingRequest struct {
	ID        OptString                          `json:"id"`
	URL       OptURI                             `json:"url"`
	Event     WebhookSettingCreatingRequestEvent `json:"event"`
	Signature OptString                          `json:"signature"`
}

// GetID returns the value of ID.
func (s *WebhookSettingCreatingRequest) GetID() OptString {
	return s.ID
}

// GetURL returns the value of URL.
func (s *WebhookSettingCreatingRequest) GetURL() OptURI {
	return s.URL
}

// GetEvent returns the value of Event.
func (s *WebhookSettingCreatingRequest) GetEvent() WebhookSettingCreatingRequestEvent {
	return s.Event
}

// GetSignature returns the value of Signature.
func (s *WebhookSettingCreatingRequest) GetSignature() OptString {
	return s.Signature
}

// SetID sets the value of ID.
func (s *WebhookSettingCreatingRequest) SetID(val OptString) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *WebhookSettingCreatingRequest) SetURL(val OptURI) {
	s.URL = val
}

// SetEvent sets the value of Event.
func (s *WebhookSettingCreatingRequest) SetEvent(val WebhookSettingCreatingRequestEvent) {
	s.Event = val
}

// SetSignature sets the value of Signature.
func (s *WebhookSettingCreatingRequest) SetSignature(val OptString) {
	s.Signature = val
}

// Webhook通知 トリガーイベント.
type WebhookSettingCreatingRequestEvent string

const (
	WebhookSettingCreatingRequestEventPaymentsCardRegist                WebhookSettingCreatingRequestEvent = "payments.card.regist"
	WebhookSettingCreatingRequestEventPaymentsCardExec                  WebhookSettingCreatingRequestEvent = "payments.card.exec"
	WebhookSettingCreatingRequestEventPaymentsCardCapture               WebhookSettingCreatingRequestEvent = "payments.card.capture"
	WebhookSettingCreatingRequestEventPaymentsCardCancel                WebhookSettingCreatingRequestEvent = "payments.card.cancel"
	WebhookSettingCreatingRequestEventPaymentsCardAuth                  WebhookSettingCreatingRequestEvent = "payments.card.auth"
	WebhookSettingCreatingRequestEventPaymentsCardChange                WebhookSettingCreatingRequestEvent = "payments.card.change"
	WebhookSettingCreatingRequestEventPaymentsCardSecure2Authenticate   WebhookSettingCreatingRequestEvent = "payments.card.secure2.authenticate"
	WebhookSettingCreatingRequestEventPaymentsCardSecure2Result         WebhookSettingCreatingRequestEvent = "payments.card.secure2.result"
	WebhookSettingCreatingRequestEventPaymentsCardSecure                WebhookSettingCreatingRequestEvent = "payments.card.secure"
	WebhookSettingCreatingRequestEventPaymentsApplepayRegist            WebhookSettingCreatingRequestEvent = "payments.applepay.regist"
	WebhookSettingCreatingRequestEventPaymentsApplepayExec              WebhookSettingCreatingRequestEvent = "payments.applepay.exec"
	WebhookSettingCreatingRequestEventPaymentsApplepayCapture           WebhookSettingCreatingRequestEvent = "payments.applepay.capture"
	WebhookSettingCreatingRequestEventPaymentsApplepayCancel            WebhookSettingCreatingRequestEvent = "payments.applepay.cancel"
	WebhookSettingCreatingRequestEventPaymentsKonbiniRegist             WebhookSettingCreatingRequestEvent = "payments.konbini.regist"
	WebhookSettingCreatingRequestEventPaymentsKonbiniExec               WebhookSettingCreatingRequestEvent = "payments.konbini.exec"
	WebhookSettingCreatingRequestEventPaymentsKonbiniCancel             WebhookSettingCreatingRequestEvent = "payments.konbini.cancel"
	WebhookSettingCreatingRequestEventPaymentsKonbiniComplete           WebhookSettingCreatingRequestEvent = "payments.konbini.complete"
	WebhookSettingCreatingRequestEventPaymentsKonbiniCompleteStub       WebhookSettingCreatingRequestEvent = "payments.konbini.complete.stub"
	WebhookSettingCreatingRequestEventPaymentsKonbiniExpiredUpdateBatch WebhookSettingCreatingRequestEvent = "payments.konbini.expired.update.batch"
	WebhookSettingCreatingRequestEventPaymentsPaypayRegist              WebhookSettingCreatingRequestEvent = "payments.paypay.regist"
	WebhookSettingCreatingRequestEventPaymentsPaypayExec                WebhookSettingCreatingRequestEvent = "payments.paypay.exec"
	WebhookSettingCreatingRequestEventPaymentsPaypayCapture             WebhookSettingCreatingRequestEvent = "payments.paypay.capture"
	WebhookSettingCreatingRequestEventPaymentsPaypayCancel              WebhookSettingCreatingRequestEvent = "payments.paypay.cancel"
	WebhookSettingCreatingRequestEventPaymentsPaypayChange              WebhookSettingCreatingRequestEvent = "payments.paypay.change"
	WebhookSettingCreatingRequestEventPaymentsPaypayComplete            WebhookSettingCreatingRequestEvent = "payments.paypay.complete"
	WebhookSettingCreatingRequestEventPaymentsDirectdebitRegist         WebhookSettingCreatingRequestEvent = "payments.directdebit.regist"
	WebhookSettingCreatingRequestEventPaymentsDirectdebitExec           WebhookSettingCreatingRequestEvent = "payments.directdebit.exec"
	WebhookSettingCreatingRequestEventPaymentsDirectdebitCancel         WebhookSettingCreatingRequestEvent = "payments.directdebit.cancel"
	WebhookSettingCreatingRequestEventPaymentsDirectdebitChange         WebhookSettingCreatingRequestEvent = "payments.directdebit.change"
	WebhookSettingCreatingRequestEventPaymentsDirectdebitComplete       WebhookSettingCreatingRequestEvent = "payments.directdebit.complete"
	WebhookSettingCreatingRequestEventPaymentsDirectdebitCompleteStub   WebhookSettingCreatingRequestEvent = "payments.directdebit.complete.stub"
	WebhookSettingCreatingRequestEventCustomersPaymentMethodsUpdated    WebhookSettingCreatingRequestEvent = "customers.payment_methods.updated"
	WebhookSettingCreatingRequestEventCardRegist                        WebhookSettingCreatingRequestEvent = "card.regist"
	WebhookSettingCreatingRequestEventCardUpdate                        WebhookSettingCreatingRequestEvent = "card.update"
	WebhookSettingCreatingRequestEventSubscriptionCardRegist            WebhookSettingCreatingRequestEvent = "subscription.card.regist"
	WebhookSettingCreatingRequestEventSubscriptionCardDelete            WebhookSettingCreatingRequestEvent = "subscription.card.delete"
	WebhookSettingCreatingRequestEventSubscriptionCardUpdate            WebhookSettingCreatingRequestEvent = "subscription.card.update"
	WebhookSettingCreatingRequestEventRecurringCardBatch                WebhookSettingCreatingRequestEvent = "recurring.card.batch"
	WebhookSettingCreatingRequestEventSubscriptionDirectdebitRegist     WebhookSettingCreatingRequestEvent = "subscription.directdebit.regist"
	WebhookSettingCreatingRequestEventSubscriptionDirectdebitDelete     WebhookSettingCreatingRequestEvent = "subscription.directdebit.delete"
	WebhookSettingCreatingRequestEventSubscriptionDirectdebitUpdate     WebhookSettingCreatingRequestEvent = "subscription.directdebit.update"
	WebhookSettingCreatingRequestEventRecurringDirectdebitBatch         WebhookSettingCreatingRequestEvent = "recurring.directdebit.batch"
	WebhookSettingCreatingRequestEventPaymentsBulkCardRegist            WebhookSettingCreatingRequestEvent = "payments.bulk.card.regist"
	WebhookSettingCreatingRequestEventPaymentsBulkCardBatch             WebhookSettingCreatingRequestEvent = "payments.bulk.card.batch"
	WebhookSettingCreatingRequestEventContractsStatusCodeUpdated        WebhookSettingCreatingRequestEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookSettingCreatingRequestEvent values.
func (WebhookSettingCreatingRequestEvent) AllValues() []WebhookSettingCreatingRequestEvent {
	return []WebhookSettingCreatingRequestEvent{
		WebhookSettingCreatingRequestEventPaymentsCardRegist,
		WebhookSettingCreatingRequestEventPaymentsCardExec,
		WebhookSettingCreatingRequestEventPaymentsCardCapture,
		WebhookSettingCreatingRequestEventPaymentsCardCancel,
		WebhookSettingCreatingRequestEventPaymentsCardAuth,
		WebhookSettingCreatingRequestEventPaymentsCardChange,
		WebhookSettingCreatingRequestEventPaymentsCardSecure2Authenticate,
		WebhookSettingCreatingRequestEventPaymentsCardSecure2Result,
		WebhookSettingCreatingRequestEventPaymentsCardSecure,
		WebhookSettingCreatingRequestEventPaymentsApplepayRegist,
		WebhookSettingCreatingRequestEventPaymentsApplepayExec,
		WebhookSettingCreatingRequestEventPaymentsApplepayCapture,
		WebhookSettingCreatingRequestEventPaymentsApplepayCancel,
		WebhookSettingCreatingRequestEventPaymentsKonbiniRegist,
		WebhookSettingCreatingRequestEventPaymentsKonbiniExec,
		WebhookSettingCreatingRequestEventPaymentsKonbiniCancel,
		WebhookSettingCreatingRequestEventPaymentsKonbiniComplete,
		WebhookSettingCreatingRequestEventPaymentsKonbiniCompleteStub,
		WebhookSettingCreatingRequestEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookSettingCreatingRequestEventPaymentsPaypayRegist,
		WebhookSettingCreatingRequestEventPaymentsPaypayExec,
		WebhookSettingCreatingRequestEventPaymentsPaypayCapture,
		WebhookSettingCreatingRequestEventPaymentsPaypayCancel,
		WebhookSettingCreatingRequestEventPaymentsPaypayChange,
		WebhookSettingCreatingRequestEventPaymentsPaypayComplete,
		WebhookSettingCreatingRequestEventPaymentsDirectdebitRegist,
		WebhookSettingCreatingRequestEventPaymentsDirectdebitExec,
		WebhookSettingCreatingRequestEventPaymentsDirectdebitCancel,
		WebhookSettingCreatingRequestEventPaymentsDirectdebitChange,
		WebhookSettingCreatingRequestEventPaymentsDirectdebitComplete,
		WebhookSettingCreatingRequestEventPaymentsDirectdebitCompleteStub,
		WebhookSettingCreatingRequestEventCustomersPaymentMethodsUpdated,
		WebhookSettingCreatingRequestEventCardRegist,
		WebhookSettingCreatingRequestEventCardUpdate,
		WebhookSettingCreatingRequestEventSubscriptionCardRegist,
		WebhookSettingCreatingRequestEventSubscriptionCardDelete,
		WebhookSettingCreatingRequestEventSubscriptionCardUpdate,
		WebhookSettingCreatingRequestEventRecurringCardBatch,
		WebhookSettingCreatingRequestEventSubscriptionDirectdebitRegist,
		WebhookSettingCreatingRequestEventSubscriptionDirectdebitDelete,
		WebhookSettingCreatingRequestEventSubscriptionDirectdebitUpdate,
		WebhookSettingCreatingRequestEventRecurringDirectdebitBatch,
		WebhookSettingCreatingRequestEventPaymentsBulkCardRegist,
		WebhookSettingCreatingRequestEventPaymentsBulkCardBatch,
		WebhookSettingCreatingRequestEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookSettingCreatingRequestEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookSettingCreatingRequestEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventCardUpdate:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookSettingCreatingRequestEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookSettingCreatingRequestEvent) UnmarshalText(data []byte) error {
	switch WebhookSettingCreatingRequestEvent(data) {
	case WebhookSettingCreatingRequestEventPaymentsCardRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsCardRegist
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardExec:
		*s = WebhookSettingCreatingRequestEventPaymentsCardExec
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardCapture:
		*s = WebhookSettingCreatingRequestEventPaymentsCardCapture
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsCardCancel
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardAuth:
		*s = WebhookSettingCreatingRequestEventPaymentsCardAuth
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardChange:
		*s = WebhookSettingCreatingRequestEventPaymentsCardChange
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingCreatingRequestEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardSecure2Result:
		*s = WebhookSettingCreatingRequestEventPaymentsCardSecure2Result
		return nil
	case WebhookSettingCreatingRequestEventPaymentsCardSecure:
		*s = WebhookSettingCreatingRequestEventPaymentsCardSecure
		return nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayRegist
		return nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayExec:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayExec
		return nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayCapture:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayCapture
		return nil
	case WebhookSettingCreatingRequestEventPaymentsApplepayCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayCancel
		return nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniRegist
		return nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniExec:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniExec
		return nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniCancel
		return nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniComplete:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniComplete
		return nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookSettingCreatingRequestEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayRegist
		return nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayExec:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayExec
		return nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayCapture:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayCapture
		return nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayCancel
		return nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayChange:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayChange
		return nil
	case WebhookSettingCreatingRequestEventPaymentsPaypayComplete:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayComplete
		return nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitRegist
		return nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitExec:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitExec
		return nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitCancel
		return nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitChange:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitChange
		return nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitComplete:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitComplete
		return nil
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookSettingCreatingRequestEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingCreatingRequestEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookSettingCreatingRequestEventCardRegist:
		*s = WebhookSettingCreatingRequestEventCardRegist
		return nil
	case WebhookSettingCreatingRequestEventCardUpdate:
		*s = WebhookSettingCreatingRequestEventCardUpdate
		return nil
	case WebhookSettingCreatingRequestEventSubscriptionCardRegist:
		*s = WebhookSettingCreatingRequestEventSubscriptionCardRegist
		return nil
	case WebhookSettingCreatingRequestEventSubscriptionCardDelete:
		*s = WebhookSettingCreatingRequestEventSubscriptionCardDelete
		return nil
	case WebhookSettingCreatingRequestEventSubscriptionCardUpdate:
		*s = WebhookSettingCreatingRequestEventSubscriptionCardUpdate
		return nil
	case WebhookSettingCreatingRequestEventRecurringCardBatch:
		*s = WebhookSettingCreatingRequestEventRecurringCardBatch
		return nil
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingCreatingRequestEventSubscriptionDirectdebitRegist
		return nil
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingCreatingRequestEventSubscriptionDirectdebitDelete
		return nil
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingCreatingRequestEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookSettingCreatingRequestEventRecurringDirectdebitBatch:
		*s = WebhookSettingCreatingRequestEventRecurringDirectdebitBatch
		return nil
	case WebhookSettingCreatingRequestEventPaymentsBulkCardRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsBulkCardRegist
		return nil
	case WebhookSettingCreatingRequestEventPaymentsBulkCardBatch:
		*s = WebhookSettingCreatingRequestEventPaymentsBulkCardBatch
		return nil
	case WebhookSettingCreatingRequestEventContractsStatusCodeUpdated:
		*s = WebhookSettingCreatingRequestEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookSetting.Creating.Response
type WebhookSettingCreatingResponse struct {
	// Webhook設定ID.
	ID OptString `json:"id"`
	// Webhook通知先 URL\
	// \
	// Webhookの通知先URLを指定します。\
	// fincodeのWebhookはHTTPS通信かつ443ポートでのみ受信可能です。.
	URL   OptURI                                 `json:"url"`
	Event OptWebhookSettingCreatingResponseEvent `json:"event"`
	// 署名\
	// \
	// このWebhookがfincodeから送信されたことを確認するための署名です。\
	// fincodeからのWebhook通知において`Fincode-Signature`ヘッダーにこの値が含まれます。.
	Signature OptString  `json:"signature"`
	Created   OptString  `json:"created"`
	Updated   *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *WebhookSettingCreatingResponse) GetID() OptString {
	return s.ID
}

// GetURL returns the value of URL.
func (s *WebhookSettingCreatingResponse) GetURL() OptURI {
	return s.URL
}

// GetEvent returns the value of Event.
func (s *WebhookSettingCreatingResponse) GetEvent() OptWebhookSettingCreatingResponseEvent {
	return s.Event
}

// GetSignature returns the value of Signature.
func (s *WebhookSettingCreatingResponse) GetSignature() OptString {
	return s.Signature
}

// GetCreated returns the value of Created.
func (s *WebhookSettingCreatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *WebhookSettingCreatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *WebhookSettingCreatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *WebhookSettingCreatingResponse) SetURL(val OptURI) {
	s.URL = val
}

// SetEvent sets the value of Event.
func (s *WebhookSettingCreatingResponse) SetEvent(val OptWebhookSettingCreatingResponseEvent) {
	s.Event = val
}

// SetSignature sets the value of Signature.
func (s *WebhookSettingCreatingResponse) SetSignature(val OptString) {
	s.Signature = val
}

// SetCreated sets the value of Created.
func (s *WebhookSettingCreatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *WebhookSettingCreatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*WebhookSettingCreatingResponse) createWebhookSettingRes() {}

// Webhook通知 トリガーイベント.
type WebhookSettingCreatingResponseEvent string

const (
	WebhookSettingCreatingResponseEventPaymentsCardRegist                WebhookSettingCreatingResponseEvent = "payments.card.regist"
	WebhookSettingCreatingResponseEventPaymentsCardExec                  WebhookSettingCreatingResponseEvent = "payments.card.exec"
	WebhookSettingCreatingResponseEventPaymentsCardCapture               WebhookSettingCreatingResponseEvent = "payments.card.capture"
	WebhookSettingCreatingResponseEventPaymentsCardCancel                WebhookSettingCreatingResponseEvent = "payments.card.cancel"
	WebhookSettingCreatingResponseEventPaymentsCardAuth                  WebhookSettingCreatingResponseEvent = "payments.card.auth"
	WebhookSettingCreatingResponseEventPaymentsCardChange                WebhookSettingCreatingResponseEvent = "payments.card.change"
	WebhookSettingCreatingResponseEventPaymentsCardSecure2Authenticate   WebhookSettingCreatingResponseEvent = "payments.card.secure2.authenticate"
	WebhookSettingCreatingResponseEventPaymentsCardSecure2Result         WebhookSettingCreatingResponseEvent = "payments.card.secure2.result"
	WebhookSettingCreatingResponseEventPaymentsCardSecure                WebhookSettingCreatingResponseEvent = "payments.card.secure"
	WebhookSettingCreatingResponseEventPaymentsApplepayRegist            WebhookSettingCreatingResponseEvent = "payments.applepay.regist"
	WebhookSettingCreatingResponseEventPaymentsApplepayExec              WebhookSettingCreatingResponseEvent = "payments.applepay.exec"
	WebhookSettingCreatingResponseEventPaymentsApplepayCapture           WebhookSettingCreatingResponseEvent = "payments.applepay.capture"
	WebhookSettingCreatingResponseEventPaymentsApplepayCancel            WebhookSettingCreatingResponseEvent = "payments.applepay.cancel"
	WebhookSettingCreatingResponseEventPaymentsKonbiniRegist             WebhookSettingCreatingResponseEvent = "payments.konbini.regist"
	WebhookSettingCreatingResponseEventPaymentsKonbiniExec               WebhookSettingCreatingResponseEvent = "payments.konbini.exec"
	WebhookSettingCreatingResponseEventPaymentsKonbiniCancel             WebhookSettingCreatingResponseEvent = "payments.konbini.cancel"
	WebhookSettingCreatingResponseEventPaymentsKonbiniComplete           WebhookSettingCreatingResponseEvent = "payments.konbini.complete"
	WebhookSettingCreatingResponseEventPaymentsKonbiniCompleteStub       WebhookSettingCreatingResponseEvent = "payments.konbini.complete.stub"
	WebhookSettingCreatingResponseEventPaymentsKonbiniExpiredUpdateBatch WebhookSettingCreatingResponseEvent = "payments.konbini.expired.update.batch"
	WebhookSettingCreatingResponseEventPaymentsPaypayRegist              WebhookSettingCreatingResponseEvent = "payments.paypay.regist"
	WebhookSettingCreatingResponseEventPaymentsPaypayExec                WebhookSettingCreatingResponseEvent = "payments.paypay.exec"
	WebhookSettingCreatingResponseEventPaymentsPaypayCapture             WebhookSettingCreatingResponseEvent = "payments.paypay.capture"
	WebhookSettingCreatingResponseEventPaymentsPaypayCancel              WebhookSettingCreatingResponseEvent = "payments.paypay.cancel"
	WebhookSettingCreatingResponseEventPaymentsPaypayChange              WebhookSettingCreatingResponseEvent = "payments.paypay.change"
	WebhookSettingCreatingResponseEventPaymentsPaypayComplete            WebhookSettingCreatingResponseEvent = "payments.paypay.complete"
	WebhookSettingCreatingResponseEventPaymentsDirectdebitRegist         WebhookSettingCreatingResponseEvent = "payments.directdebit.regist"
	WebhookSettingCreatingResponseEventPaymentsDirectdebitExec           WebhookSettingCreatingResponseEvent = "payments.directdebit.exec"
	WebhookSettingCreatingResponseEventPaymentsDirectdebitCancel         WebhookSettingCreatingResponseEvent = "payments.directdebit.cancel"
	WebhookSettingCreatingResponseEventPaymentsDirectdebitChange         WebhookSettingCreatingResponseEvent = "payments.directdebit.change"
	WebhookSettingCreatingResponseEventPaymentsDirectdebitComplete       WebhookSettingCreatingResponseEvent = "payments.directdebit.complete"
	WebhookSettingCreatingResponseEventPaymentsDirectdebitCompleteStub   WebhookSettingCreatingResponseEvent = "payments.directdebit.complete.stub"
	WebhookSettingCreatingResponseEventCustomersPaymentMethodsUpdated    WebhookSettingCreatingResponseEvent = "customers.payment_methods.updated"
	WebhookSettingCreatingResponseEventCardRegist                        WebhookSettingCreatingResponseEvent = "card.regist"
	WebhookSettingCreatingResponseEventCardUpdate                        WebhookSettingCreatingResponseEvent = "card.update"
	WebhookSettingCreatingResponseEventSubscriptionCardRegist            WebhookSettingCreatingResponseEvent = "subscription.card.regist"
	WebhookSettingCreatingResponseEventSubscriptionCardDelete            WebhookSettingCreatingResponseEvent = "subscription.card.delete"
	WebhookSettingCreatingResponseEventSubscriptionCardUpdate            WebhookSettingCreatingResponseEvent = "subscription.card.update"
	WebhookSettingCreatingResponseEventRecurringCardBatch                WebhookSettingCreatingResponseEvent = "recurring.card.batch"
	WebhookSettingCreatingResponseEventSubscriptionDirectdebitRegist     WebhookSettingCreatingResponseEvent = "subscription.directdebit.regist"
	WebhookSettingCreatingResponseEventSubscriptionDirectdebitDelete     WebhookSettingCreatingResponseEvent = "subscription.directdebit.delete"
	WebhookSettingCreatingResponseEventSubscriptionDirectdebitUpdate     WebhookSettingCreatingResponseEvent = "subscription.directdebit.update"
	WebhookSettingCreatingResponseEventRecurringDirectdebitBatch         WebhookSettingCreatingResponseEvent = "recurring.directdebit.batch"
	WebhookSettingCreatingResponseEventPaymentsBulkCardRegist            WebhookSettingCreatingResponseEvent = "payments.bulk.card.regist"
	WebhookSettingCreatingResponseEventPaymentsBulkCardBatch             WebhookSettingCreatingResponseEvent = "payments.bulk.card.batch"
	WebhookSettingCreatingResponseEventContractsStatusCodeUpdated        WebhookSettingCreatingResponseEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookSettingCreatingResponseEvent values.
func (WebhookSettingCreatingResponseEvent) AllValues() []WebhookSettingCreatingResponseEvent {
	return []WebhookSettingCreatingResponseEvent{
		WebhookSettingCreatingResponseEventPaymentsCardRegist,
		WebhookSettingCreatingResponseEventPaymentsCardExec,
		WebhookSettingCreatingResponseEventPaymentsCardCapture,
		WebhookSettingCreatingResponseEventPaymentsCardCancel,
		WebhookSettingCreatingResponseEventPaymentsCardAuth,
		WebhookSettingCreatingResponseEventPaymentsCardChange,
		WebhookSettingCreatingResponseEventPaymentsCardSecure2Authenticate,
		WebhookSettingCreatingResponseEventPaymentsCardSecure2Result,
		WebhookSettingCreatingResponseEventPaymentsCardSecure,
		WebhookSettingCreatingResponseEventPaymentsApplepayRegist,
		WebhookSettingCreatingResponseEventPaymentsApplepayExec,
		WebhookSettingCreatingResponseEventPaymentsApplepayCapture,
		WebhookSettingCreatingResponseEventPaymentsApplepayCancel,
		WebhookSettingCreatingResponseEventPaymentsKonbiniRegist,
		WebhookSettingCreatingResponseEventPaymentsKonbiniExec,
		WebhookSettingCreatingResponseEventPaymentsKonbiniCancel,
		WebhookSettingCreatingResponseEventPaymentsKonbiniComplete,
		WebhookSettingCreatingResponseEventPaymentsKonbiniCompleteStub,
		WebhookSettingCreatingResponseEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookSettingCreatingResponseEventPaymentsPaypayRegist,
		WebhookSettingCreatingResponseEventPaymentsPaypayExec,
		WebhookSettingCreatingResponseEventPaymentsPaypayCapture,
		WebhookSettingCreatingResponseEventPaymentsPaypayCancel,
		WebhookSettingCreatingResponseEventPaymentsPaypayChange,
		WebhookSettingCreatingResponseEventPaymentsPaypayComplete,
		WebhookSettingCreatingResponseEventPaymentsDirectdebitRegist,
		WebhookSettingCreatingResponseEventPaymentsDirectdebitExec,
		WebhookSettingCreatingResponseEventPaymentsDirectdebitCancel,
		WebhookSettingCreatingResponseEventPaymentsDirectdebitChange,
		WebhookSettingCreatingResponseEventPaymentsDirectdebitComplete,
		WebhookSettingCreatingResponseEventPaymentsDirectdebitCompleteStub,
		WebhookSettingCreatingResponseEventCustomersPaymentMethodsUpdated,
		WebhookSettingCreatingResponseEventCardRegist,
		WebhookSettingCreatingResponseEventCardUpdate,
		WebhookSettingCreatingResponseEventSubscriptionCardRegist,
		WebhookSettingCreatingResponseEventSubscriptionCardDelete,
		WebhookSettingCreatingResponseEventSubscriptionCardUpdate,
		WebhookSettingCreatingResponseEventRecurringCardBatch,
		WebhookSettingCreatingResponseEventSubscriptionDirectdebitRegist,
		WebhookSettingCreatingResponseEventSubscriptionDirectdebitDelete,
		WebhookSettingCreatingResponseEventSubscriptionDirectdebitUpdate,
		WebhookSettingCreatingResponseEventRecurringDirectdebitBatch,
		WebhookSettingCreatingResponseEventPaymentsBulkCardRegist,
		WebhookSettingCreatingResponseEventPaymentsBulkCardBatch,
		WebhookSettingCreatingResponseEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookSettingCreatingResponseEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookSettingCreatingResponseEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventCardUpdate:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookSettingCreatingResponseEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookSettingCreatingResponseEvent) UnmarshalText(data []byte) error {
	switch WebhookSettingCreatingResponseEvent(data) {
	case WebhookSettingCreatingResponseEventPaymentsCardRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsCardRegist
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardExec:
		*s = WebhookSettingCreatingResponseEventPaymentsCardExec
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardCapture:
		*s = WebhookSettingCreatingResponseEventPaymentsCardCapture
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsCardCancel
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardAuth:
		*s = WebhookSettingCreatingResponseEventPaymentsCardAuth
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardChange:
		*s = WebhookSettingCreatingResponseEventPaymentsCardChange
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingCreatingResponseEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardSecure2Result:
		*s = WebhookSettingCreatingResponseEventPaymentsCardSecure2Result
		return nil
	case WebhookSettingCreatingResponseEventPaymentsCardSecure:
		*s = WebhookSettingCreatingResponseEventPaymentsCardSecure
		return nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayRegist
		return nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayExec:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayExec
		return nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayCapture:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayCapture
		return nil
	case WebhookSettingCreatingResponseEventPaymentsApplepayCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayCancel
		return nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniRegist
		return nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniExec:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniExec
		return nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniCancel
		return nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniComplete:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniComplete
		return nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookSettingCreatingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayRegist
		return nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayExec:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayExec
		return nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayCapture:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayCapture
		return nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayCancel
		return nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayChange:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayChange
		return nil
	case WebhookSettingCreatingResponseEventPaymentsPaypayComplete:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayComplete
		return nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitRegist
		return nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitExec:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitExec
		return nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitCancel
		return nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitChange:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitChange
		return nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitComplete:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitComplete
		return nil
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookSettingCreatingResponseEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingCreatingResponseEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookSettingCreatingResponseEventCardRegist:
		*s = WebhookSettingCreatingResponseEventCardRegist
		return nil
	case WebhookSettingCreatingResponseEventCardUpdate:
		*s = WebhookSettingCreatingResponseEventCardUpdate
		return nil
	case WebhookSettingCreatingResponseEventSubscriptionCardRegist:
		*s = WebhookSettingCreatingResponseEventSubscriptionCardRegist
		return nil
	case WebhookSettingCreatingResponseEventSubscriptionCardDelete:
		*s = WebhookSettingCreatingResponseEventSubscriptionCardDelete
		return nil
	case WebhookSettingCreatingResponseEventSubscriptionCardUpdate:
		*s = WebhookSettingCreatingResponseEventSubscriptionCardUpdate
		return nil
	case WebhookSettingCreatingResponseEventRecurringCardBatch:
		*s = WebhookSettingCreatingResponseEventRecurringCardBatch
		return nil
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingCreatingResponseEventSubscriptionDirectdebitRegist
		return nil
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingCreatingResponseEventSubscriptionDirectdebitDelete
		return nil
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingCreatingResponseEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookSettingCreatingResponseEventRecurringDirectdebitBatch:
		*s = WebhookSettingCreatingResponseEventRecurringDirectdebitBatch
		return nil
	case WebhookSettingCreatingResponseEventPaymentsBulkCardRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsBulkCardRegist
		return nil
	case WebhookSettingCreatingResponseEventPaymentsBulkCardBatch:
		*s = WebhookSettingCreatingResponseEventPaymentsBulkCardBatch
		return nil
	case WebhookSettingCreatingResponseEventContractsStatusCodeUpdated:
		*s = WebhookSettingCreatingResponseEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookSetting.Deleting.Response
type WebhookSettingDeletingResponse struct {
	// 削除されたWebhook設定のID.
	ID         OptString                                   `json:"id"`
	DeleteFlag OptWebhookSettingDeletingResponseDeleteFlag `json:"delete_flag"`
}

// GetID returns the value of ID.
func (s *WebhookSettingDeletingResponse) GetID() OptString {
	return s.ID
}

// GetDeleteFlag returns the value of DeleteFlag.
func (s *WebhookSettingDeletingResponse) GetDeleteFlag() OptWebhookSettingDeletingResponseDeleteFlag {
	return s.DeleteFlag
}

// SetID sets the value of ID.
func (s *WebhookSettingDeletingResponse) SetID(val OptString) {
	s.ID = val
}

// SetDeleteFlag sets the value of DeleteFlag.
func (s *WebhookSettingDeletingResponse) SetDeleteFlag(val OptWebhookSettingDeletingResponseDeleteFlag) {
	s.DeleteFlag = val
}

func (*WebhookSettingDeletingResponse) deleteWebhookSettingRes() {}

// 削除フラグ.
type WebhookSettingDeletingResponseDeleteFlag string

const (
	WebhookSettingDeletingResponseDeleteFlag1 WebhookSettingDeletingResponseDeleteFlag = "1"
	WebhookSettingDeletingResponseDeleteFlag0 WebhookSettingDeletingResponseDeleteFlag = "0"
)

// AllValues returns all WebhookSettingDeletingResponseDeleteFlag values.
func (WebhookSettingDeletingResponseDeleteFlag) AllValues() []WebhookSettingDeletingResponseDeleteFlag {
	return []WebhookSettingDeletingResponseDeleteFlag{
		WebhookSettingDeletingResponseDeleteFlag1,
		WebhookSettingDeletingResponseDeleteFlag0,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookSettingDeletingResponseDeleteFlag) MarshalText() ([]byte, error) {
	switch s {
	case WebhookSettingDeletingResponseDeleteFlag1:
		return []byte(s), nil
	case WebhookSettingDeletingResponseDeleteFlag0:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookSettingDeletingResponseDeleteFlag) UnmarshalText(data []byte) error {
	switch WebhookSettingDeletingResponseDeleteFlag(data) {
	case WebhookSettingDeletingResponseDeleteFlag1:
		*s = WebhookSettingDeletingResponseDeleteFlag1
		return nil
	case WebhookSettingDeletingResponseDeleteFlag0:
		*s = WebhookSettingDeletingResponseDeleteFlag0
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Webhook通知 トリガーイベント.
type WebhookSettingEvent string

const (
	WebhookSettingEventPaymentsCardRegist                WebhookSettingEvent = "payments.card.regist"
	WebhookSettingEventPaymentsCardExec                  WebhookSettingEvent = "payments.card.exec"
	WebhookSettingEventPaymentsCardCapture               WebhookSettingEvent = "payments.card.capture"
	WebhookSettingEventPaymentsCardCancel                WebhookSettingEvent = "payments.card.cancel"
	WebhookSettingEventPaymentsCardAuth                  WebhookSettingEvent = "payments.card.auth"
	WebhookSettingEventPaymentsCardChange                WebhookSettingEvent = "payments.card.change"
	WebhookSettingEventPaymentsCardSecure2Authenticate   WebhookSettingEvent = "payments.card.secure2.authenticate"
	WebhookSettingEventPaymentsCardSecure2Result         WebhookSettingEvent = "payments.card.secure2.result"
	WebhookSettingEventPaymentsCardSecure                WebhookSettingEvent = "payments.card.secure"
	WebhookSettingEventPaymentsApplepayRegist            WebhookSettingEvent = "payments.applepay.regist"
	WebhookSettingEventPaymentsApplepayExec              WebhookSettingEvent = "payments.applepay.exec"
	WebhookSettingEventPaymentsApplepayCapture           WebhookSettingEvent = "payments.applepay.capture"
	WebhookSettingEventPaymentsApplepayCancel            WebhookSettingEvent = "payments.applepay.cancel"
	WebhookSettingEventPaymentsKonbiniRegist             WebhookSettingEvent = "payments.konbini.regist"
	WebhookSettingEventPaymentsKonbiniExec               WebhookSettingEvent = "payments.konbini.exec"
	WebhookSettingEventPaymentsKonbiniCancel             WebhookSettingEvent = "payments.konbini.cancel"
	WebhookSettingEventPaymentsKonbiniComplete           WebhookSettingEvent = "payments.konbini.complete"
	WebhookSettingEventPaymentsKonbiniCompleteStub       WebhookSettingEvent = "payments.konbini.complete.stub"
	WebhookSettingEventPaymentsKonbiniExpiredUpdateBatch WebhookSettingEvent = "payments.konbini.expired.update.batch"
	WebhookSettingEventPaymentsPaypayRegist              WebhookSettingEvent = "payments.paypay.regist"
	WebhookSettingEventPaymentsPaypayExec                WebhookSettingEvent = "payments.paypay.exec"
	WebhookSettingEventPaymentsPaypayCapture             WebhookSettingEvent = "payments.paypay.capture"
	WebhookSettingEventPaymentsPaypayCancel              WebhookSettingEvent = "payments.paypay.cancel"
	WebhookSettingEventPaymentsPaypayChange              WebhookSettingEvent = "payments.paypay.change"
	WebhookSettingEventPaymentsPaypayComplete            WebhookSettingEvent = "payments.paypay.complete"
	WebhookSettingEventPaymentsDirectdebitRegist         WebhookSettingEvent = "payments.directdebit.regist"
	WebhookSettingEventPaymentsDirectdebitExec           WebhookSettingEvent = "payments.directdebit.exec"
	WebhookSettingEventPaymentsDirectdebitCancel         WebhookSettingEvent = "payments.directdebit.cancel"
	WebhookSettingEventPaymentsDirectdebitChange         WebhookSettingEvent = "payments.directdebit.change"
	WebhookSettingEventPaymentsDirectdebitComplete       WebhookSettingEvent = "payments.directdebit.complete"
	WebhookSettingEventPaymentsDirectdebitCompleteStub   WebhookSettingEvent = "payments.directdebit.complete.stub"
	WebhookSettingEventCustomersPaymentMethodsUpdated    WebhookSettingEvent = "customers.payment_methods.updated"
	WebhookSettingEventCardRegist                        WebhookSettingEvent = "card.regist"
	WebhookSettingEventCardUpdate                        WebhookSettingEvent = "card.update"
	WebhookSettingEventSubscriptionCardRegist            WebhookSettingEvent = "subscription.card.regist"
	WebhookSettingEventSubscriptionCardDelete            WebhookSettingEvent = "subscription.card.delete"
	WebhookSettingEventSubscriptionCardUpdate            WebhookSettingEvent = "subscription.card.update"
	WebhookSettingEventRecurringCardBatch                WebhookSettingEvent = "recurring.card.batch"
	WebhookSettingEventSubscriptionDirectdebitRegist     WebhookSettingEvent = "subscription.directdebit.regist"
	WebhookSettingEventSubscriptionDirectdebitDelete     WebhookSettingEvent = "subscription.directdebit.delete"
	WebhookSettingEventSubscriptionDirectdebitUpdate     WebhookSettingEvent = "subscription.directdebit.update"
	WebhookSettingEventRecurringDirectdebitBatch         WebhookSettingEvent = "recurring.directdebit.batch"
	WebhookSettingEventPaymentsBulkCardRegist            WebhookSettingEvent = "payments.bulk.card.regist"
	WebhookSettingEventPaymentsBulkCardBatch             WebhookSettingEvent = "payments.bulk.card.batch"
	WebhookSettingEventContractsStatusCodeUpdated        WebhookSettingEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookSettingEvent values.
func (WebhookSettingEvent) AllValues() []WebhookSettingEvent {
	return []WebhookSettingEvent{
		WebhookSettingEventPaymentsCardRegist,
		WebhookSettingEventPaymentsCardExec,
		WebhookSettingEventPaymentsCardCapture,
		WebhookSettingEventPaymentsCardCancel,
		WebhookSettingEventPaymentsCardAuth,
		WebhookSettingEventPaymentsCardChange,
		WebhookSettingEventPaymentsCardSecure2Authenticate,
		WebhookSettingEventPaymentsCardSecure2Result,
		WebhookSettingEventPaymentsCardSecure,
		WebhookSettingEventPaymentsApplepayRegist,
		WebhookSettingEventPaymentsApplepayExec,
		WebhookSettingEventPaymentsApplepayCapture,
		WebhookSettingEventPaymentsApplepayCancel,
		WebhookSettingEventPaymentsKonbiniRegist,
		WebhookSettingEventPaymentsKonbiniExec,
		WebhookSettingEventPaymentsKonbiniCancel,
		WebhookSettingEventPaymentsKonbiniComplete,
		WebhookSettingEventPaymentsKonbiniCompleteStub,
		WebhookSettingEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookSettingEventPaymentsPaypayRegist,
		WebhookSettingEventPaymentsPaypayExec,
		WebhookSettingEventPaymentsPaypayCapture,
		WebhookSettingEventPaymentsPaypayCancel,
		WebhookSettingEventPaymentsPaypayChange,
		WebhookSettingEventPaymentsPaypayComplete,
		WebhookSettingEventPaymentsDirectdebitRegist,
		WebhookSettingEventPaymentsDirectdebitExec,
		WebhookSettingEventPaymentsDirectdebitCancel,
		WebhookSettingEventPaymentsDirectdebitChange,
		WebhookSettingEventPaymentsDirectdebitComplete,
		WebhookSettingEventPaymentsDirectdebitCompleteStub,
		WebhookSettingEventCustomersPaymentMethodsUpdated,
		WebhookSettingEventCardRegist,
		WebhookSettingEventCardUpdate,
		WebhookSettingEventSubscriptionCardRegist,
		WebhookSettingEventSubscriptionCardDelete,
		WebhookSettingEventSubscriptionCardUpdate,
		WebhookSettingEventRecurringCardBatch,
		WebhookSettingEventSubscriptionDirectdebitRegist,
		WebhookSettingEventSubscriptionDirectdebitDelete,
		WebhookSettingEventSubscriptionDirectdebitUpdate,
		WebhookSettingEventRecurringDirectdebitBatch,
		WebhookSettingEventPaymentsBulkCardRegist,
		WebhookSettingEventPaymentsBulkCardBatch,
		WebhookSettingEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookSettingEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookSettingEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookSettingEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookSettingEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookSettingEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookSettingEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookSettingEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookSettingEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookSettingEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookSettingEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookSettingEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookSettingEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookSettingEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookSettingEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookSettingEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookSettingEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookSettingEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookSettingEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookSettingEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookSettingEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookSettingEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookSettingEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookSettingEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookSettingEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookSettingEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookSettingEventCardRegist:
		return []byte(s), nil
	case WebhookSettingEventCardUpdate:
		return []byte(s), nil
	case WebhookSettingEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookSettingEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookSettingEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookSettingEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookSettingEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookSettingEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookSettingEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookSettingEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookSettingEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookSettingEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookSettingEvent) UnmarshalText(data []byte) error {
	switch WebhookSettingEvent(data) {
	case WebhookSettingEventPaymentsCardRegist:
		*s = WebhookSettingEventPaymentsCardRegist
		return nil
	case WebhookSettingEventPaymentsCardExec:
		*s = WebhookSettingEventPaymentsCardExec
		return nil
	case WebhookSettingEventPaymentsCardCapture:
		*s = WebhookSettingEventPaymentsCardCapture
		return nil
	case WebhookSettingEventPaymentsCardCancel:
		*s = WebhookSettingEventPaymentsCardCancel
		return nil
	case WebhookSettingEventPaymentsCardAuth:
		*s = WebhookSettingEventPaymentsCardAuth
		return nil
	case WebhookSettingEventPaymentsCardChange:
		*s = WebhookSettingEventPaymentsCardChange
		return nil
	case WebhookSettingEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookSettingEventPaymentsCardSecure2Result:
		*s = WebhookSettingEventPaymentsCardSecure2Result
		return nil
	case WebhookSettingEventPaymentsCardSecure:
		*s = WebhookSettingEventPaymentsCardSecure
		return nil
	case WebhookSettingEventPaymentsApplepayRegist:
		*s = WebhookSettingEventPaymentsApplepayRegist
		return nil
	case WebhookSettingEventPaymentsApplepayExec:
		*s = WebhookSettingEventPaymentsApplepayExec
		return nil
	case WebhookSettingEventPaymentsApplepayCapture:
		*s = WebhookSettingEventPaymentsApplepayCapture
		return nil
	case WebhookSettingEventPaymentsApplepayCancel:
		*s = WebhookSettingEventPaymentsApplepayCancel
		return nil
	case WebhookSettingEventPaymentsKonbiniRegist:
		*s = WebhookSettingEventPaymentsKonbiniRegist
		return nil
	case WebhookSettingEventPaymentsKonbiniExec:
		*s = WebhookSettingEventPaymentsKonbiniExec
		return nil
	case WebhookSettingEventPaymentsKonbiniCancel:
		*s = WebhookSettingEventPaymentsKonbiniCancel
		return nil
	case WebhookSettingEventPaymentsKonbiniComplete:
		*s = WebhookSettingEventPaymentsKonbiniComplete
		return nil
	case WebhookSettingEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookSettingEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookSettingEventPaymentsPaypayRegist:
		*s = WebhookSettingEventPaymentsPaypayRegist
		return nil
	case WebhookSettingEventPaymentsPaypayExec:
		*s = WebhookSettingEventPaymentsPaypayExec
		return nil
	case WebhookSettingEventPaymentsPaypayCapture:
		*s = WebhookSettingEventPaymentsPaypayCapture
		return nil
	case WebhookSettingEventPaymentsPaypayCancel:
		*s = WebhookSettingEventPaymentsPaypayCancel
		return nil
	case WebhookSettingEventPaymentsPaypayChange:
		*s = WebhookSettingEventPaymentsPaypayChange
		return nil
	case WebhookSettingEventPaymentsPaypayComplete:
		*s = WebhookSettingEventPaymentsPaypayComplete
		return nil
	case WebhookSettingEventPaymentsDirectdebitRegist:
		*s = WebhookSettingEventPaymentsDirectdebitRegist
		return nil
	case WebhookSettingEventPaymentsDirectdebitExec:
		*s = WebhookSettingEventPaymentsDirectdebitExec
		return nil
	case WebhookSettingEventPaymentsDirectdebitCancel:
		*s = WebhookSettingEventPaymentsDirectdebitCancel
		return nil
	case WebhookSettingEventPaymentsDirectdebitChange:
		*s = WebhookSettingEventPaymentsDirectdebitChange
		return nil
	case WebhookSettingEventPaymentsDirectdebitComplete:
		*s = WebhookSettingEventPaymentsDirectdebitComplete
		return nil
	case WebhookSettingEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookSettingEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookSettingEventCardRegist:
		*s = WebhookSettingEventCardRegist
		return nil
	case WebhookSettingEventCardUpdate:
		*s = WebhookSettingEventCardUpdate
		return nil
	case WebhookSettingEventSubscriptionCardRegist:
		*s = WebhookSettingEventSubscriptionCardRegist
		return nil
	case WebhookSettingEventSubscriptionCardDelete:
		*s = WebhookSettingEventSubscriptionCardDelete
		return nil
	case WebhookSettingEventSubscriptionCardUpdate:
		*s = WebhookSettingEventSubscriptionCardUpdate
		return nil
	case WebhookSettingEventRecurringCardBatch:
		*s = WebhookSettingEventRecurringCardBatch
		return nil
	case WebhookSettingEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingEventSubscriptionDirectdebitRegist
		return nil
	case WebhookSettingEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingEventSubscriptionDirectdebitDelete
		return nil
	case WebhookSettingEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookSettingEventRecurringDirectdebitBatch:
		*s = WebhookSettingEventRecurringDirectdebitBatch
		return nil
	case WebhookSettingEventPaymentsBulkCardRegist:
		*s = WebhookSettingEventPaymentsBulkCardRegist
		return nil
	case WebhookSettingEventPaymentsBulkCardBatch:
		*s = WebhookSettingEventPaymentsBulkCardBatch
		return nil
	case WebhookSettingEventContractsStatusCodeUpdated:
		*s = WebhookSettingEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookSetting.ListRetrieving.Response
type WebhookSettingListRetrievingResponse struct {
	List []WebhookSetting `json:"list"`
}

// GetList returns the value of List.
func (s *WebhookSettingListRetrievingResponse) GetList() []WebhookSetting {
	return s.List
}

// SetList sets the value of List.
func (s *WebhookSettingListRetrievingResponse) SetList(val []WebhookSetting) {
	s.List = val
}

func (*WebhookSettingListRetrievingResponse) retrieveWebhookSettingListRes() {}

// Ref: #/components/schemas/WebhookSetting.Retrieving.Response
type WebhookSettingRetrievingResponse struct {
	// Webhook設定ID.
	ID OptString `json:"id"`
	// Webhook通知先 URL\
	// \
	// Webhookの通知先URLを指定します。\
	// fincodeのWebhookはHTTPS通信かつ443ポートでのみ受信可能です。.
	URL   OptURI                                   `json:"url"`
	Event OptWebhookSettingRetrievingResponseEvent `json:"event"`
	// 署名\
	// \
	// このWebhookがfincodeから送信されたことを確認するための署名です。\
	// fincodeからのWebhook通知において`Fincode-Signature`ヘッダーにこの値が含まれます。.
	Signature OptString  `json:"signature"`
	Created   OptString  `json:"created"`
	Updated   *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *WebhookSettingRetrievingResponse) GetID() OptString {
	return s.ID
}

// GetURL returns the value of URL.
func (s *WebhookSettingRetrievingResponse) GetURL() OptURI {
	return s.URL
}

// GetEvent returns the value of Event.
func (s *WebhookSettingRetrievingResponse) GetEvent() OptWebhookSettingRetrievingResponseEvent {
	return s.Event
}

// GetSignature returns the value of Signature.
func (s *WebhookSettingRetrievingResponse) GetSignature() OptString {
	return s.Signature
}

// GetCreated returns the value of Created.
func (s *WebhookSettingRetrievingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *WebhookSettingRetrievingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *WebhookSettingRetrievingResponse) SetID(val OptString) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *WebhookSettingRetrievingResponse) SetURL(val OptURI) {
	s.URL = val
}

// SetEvent sets the value of Event.
func (s *WebhookSettingRetrievingResponse) SetEvent(val OptWebhookSettingRetrievingResponseEvent) {
	s.Event = val
}

// SetSignature sets the value of Signature.
func (s *WebhookSettingRetrievingResponse) SetSignature(val OptString) {
	s.Signature = val
}

// SetCreated sets the value of Created.
func (s *WebhookSettingRetrievingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *WebhookSettingRetrievingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*WebhookSettingRetrievingResponse) retrieveWebhookSettingRes() {}

// Webhook通知 トリガーイベント.
type WebhookSettingRetrievingResponseEvent string

const (
	WebhookSettingRetrievingResponseEventPaymentsCardRegist                WebhookSettingRetrievingResponseEvent = "payments.card.regist"
	WebhookSettingRetrievingResponseEventPaymentsCardExec                  WebhookSettingRetrievingResponseEvent = "payments.card.exec"
	WebhookSettingRetrievingResponseEventPaymentsCardCapture               WebhookSettingRetrievingResponseEvent = "payments.card.capture"
	WebhookSettingRetrievingResponseEventPaymentsCardCancel                WebhookSettingRetrievingResponseEvent = "payments.card.cancel"
	WebhookSettingRetrievingResponseEventPaymentsCardAuth                  WebhookSettingRetrievingResponseEvent = "payments.card.auth"
	WebhookSettingRetrievingResponseEventPaymentsCardChange                WebhookSettingRetrievingResponseEvent = "payments.card.change"
	WebhookSettingRetrievingResponseEventPaymentsCardSecure2Authenticate   WebhookSettingRetrievingResponseEvent = "payments.card.secure2.authenticate"
	WebhookSettingRetrievingResponseEventPaymentsCardSecure2Result         WebhookSettingRetrievingResponseEvent = "payments.card.secure2.result"
	WebhookSettingRetrievingResponseEventPaymentsCardSecure                WebhookSettingRetrievingResponseEvent = "payments.card.secure"
	WebhookSettingRetrievingResponseEventPaymentsApplepayRegist            WebhookSettingRetrievingResponseEvent = "payments.applepay.regist"
	WebhookSettingRetrievingResponseEventPaymentsApplepayExec              WebhookSettingRetrievingResponseEvent = "payments.applepay.exec"
	WebhookSettingRetrievingResponseEventPaymentsApplepayCapture           WebhookSettingRetrievingResponseEvent = "payments.applepay.capture"
	WebhookSettingRetrievingResponseEventPaymentsApplepayCancel            WebhookSettingRetrievingResponseEvent = "payments.applepay.cancel"
	WebhookSettingRetrievingResponseEventPaymentsKonbiniRegist             WebhookSettingRetrievingResponseEvent = "payments.konbini.regist"
	WebhookSettingRetrievingResponseEventPaymentsKonbiniExec               WebhookSettingRetrievingResponseEvent = "payments.konbini.exec"
	WebhookSettingRetrievingResponseEventPaymentsKonbiniCancel             WebhookSettingRetrievingResponseEvent = "payments.konbini.cancel"
	WebhookSettingRetrievingResponseEventPaymentsKonbiniComplete           WebhookSettingRetrievingResponseEvent = "payments.konbini.complete"
	WebhookSettingRetrievingResponseEventPaymentsKonbiniCompleteStub       WebhookSettingRetrievingResponseEvent = "payments.konbini.complete.stub"
	WebhookSettingRetrievingResponseEventPaymentsKonbiniExpiredUpdateBatch WebhookSettingRetrievingResponseEvent = "payments.konbini.expired.update.batch"
	WebhookSettingRetrievingResponseEventPaymentsPaypayRegist              WebhookSettingRetrievingResponseEvent = "payments.paypay.regist"
	WebhookSettingRetrievingResponseEventPaymentsPaypayExec                WebhookSettingRetrievingResponseEvent = "payments.paypay.exec"
	WebhookSettingRetrievingResponseEventPaymentsPaypayCapture             WebhookSettingRetrievingResponseEvent = "payments.paypay.capture"
	WebhookSettingRetrievingResponseEventPaymentsPaypayCancel              WebhookSettingRetrievingResponseEvent = "payments.paypay.cancel"
	WebhookSettingRetrievingResponseEventPaymentsPaypayChange              WebhookSettingRetrievingResponseEvent = "payments.paypay.change"
	WebhookSettingRetrievingResponseEventPaymentsPaypayComplete            WebhookSettingRetrievingResponseEvent = "payments.paypay.complete"
	WebhookSettingRetrievingResponseEventPaymentsDirectdebitRegist         WebhookSettingRetrievingResponseEvent = "payments.directdebit.regist"
	WebhookSettingRetrievingResponseEventPaymentsDirectdebitExec           WebhookSettingRetrievingResponseEvent = "payments.directdebit.exec"
	WebhookSettingRetrievingResponseEventPaymentsDirectdebitCancel         WebhookSettingRetrievingResponseEvent = "payments.directdebit.cancel"
	WebhookSettingRetrievingResponseEventPaymentsDirectdebitChange         WebhookSettingRetrievingResponseEvent = "payments.directdebit.change"
	WebhookSettingRetrievingResponseEventPaymentsDirectdebitComplete       WebhookSettingRetrievingResponseEvent = "payments.directdebit.complete"
	WebhookSettingRetrievingResponseEventPaymentsDirectdebitCompleteStub   WebhookSettingRetrievingResponseEvent = "payments.directdebit.complete.stub"
	WebhookSettingRetrievingResponseEventCustomersPaymentMethodsUpdated    WebhookSettingRetrievingResponseEvent = "customers.payment_methods.updated"
	WebhookSettingRetrievingResponseEventCardRegist                        WebhookSettingRetrievingResponseEvent = "card.regist"
	WebhookSettingRetrievingResponseEventCardUpdate                        WebhookSettingRetrievingResponseEvent = "card.update"
	WebhookSettingRetrievingResponseEventSubscriptionCardRegist            WebhookSettingRetrievingResponseEvent = "subscription.card.regist"
	WebhookSettingRetrievingResponseEventSubscriptionCardDelete            WebhookSettingRetrievingResponseEvent = "subscription.card.delete"
	WebhookSettingRetrievingResponseEventSubscriptionCardUpdate            WebhookSettingRetrievingResponseEvent = "subscription.card.update"
	WebhookSettingRetrievingResponseEventRecurringCardBatch                WebhookSettingRetrievingResponseEvent = "recurring.card.batch"
	WebhookSettingRetrievingResponseEventSubscriptionDirectdebitRegist     WebhookSettingRetrievingResponseEvent = "subscription.directdebit.regist"
	WebhookSettingRetrievingResponseEventSubscriptionDirectdebitDelete     WebhookSettingRetrievingResponseEvent = "subscription.directdebit.delete"
	WebhookSettingRetrievingResponseEventSubscriptionDirectdebitUpdate     WebhookSettingRetrievingResponseEvent = "subscription.directdebit.update"
	WebhookSettingRetrievingResponseEventRecurringDirectdebitBatch         WebhookSettingRetrievingResponseEvent = "recurring.directdebit.batch"
	WebhookSettingRetrievingResponseEventPaymentsBulkCardRegist            WebhookSettingRetrievingResponseEvent = "payments.bulk.card.regist"
	WebhookSettingRetrievingResponseEventPaymentsBulkCardBatch             WebhookSettingRetrievingResponseEvent = "payments.bulk.card.batch"
	WebhookSettingRetrievingResponseEventContractsStatusCodeUpdated        WebhookSettingRetrievingResponseEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookSettingRetrievingResponseEvent values.
func (WebhookSettingRetrievingResponseEvent) AllValues() []WebhookSettingRetrievingResponseEvent {
	return []WebhookSettingRetrievingResponseEvent{
		WebhookSettingRetrievingResponseEventPaymentsCardRegist,
		WebhookSettingRetrievingResponseEventPaymentsCardExec,
		WebhookSettingRetrievingResponseEventPaymentsCardCapture,
		WebhookSettingRetrievingResponseEventPaymentsCardCancel,
		WebhookSettingRetrievingResponseEventPaymentsCardAuth,
		WebhookSettingRetrievingResponseEventPaymentsCardChange,
		WebhookSettingRetrievingResponseEventPaymentsCardSecure2Authenticate,
		WebhookSettingRetrievingResponseEventPaymentsCardSecure2Result,
		WebhookSettingRetrievingResponseEventPaymentsCardSecure,
		WebhookSettingRetrievingResponseEventPaymentsApplepayRegist,
		WebhookSettingRetrievingResponseEventPaymentsApplepayExec,
		WebhookSettingRetrievingResponseEventPaymentsApplepayCapture,
		WebhookSettingRetrievingResponseEventPaymentsApplepayCancel,
		WebhookSettingRetrievingResponseEventPaymentsKonbiniRegist,
		WebhookSettingRetrievingResponseEventPaymentsKonbiniExec,
		WebhookSettingRetrievingResponseEventPaymentsKonbiniCancel,
		WebhookSettingRetrievingResponseEventPaymentsKonbiniComplete,
		WebhookSettingRetrievingResponseEventPaymentsKonbiniCompleteStub,
		WebhookSettingRetrievingResponseEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookSettingRetrievingResponseEventPaymentsPaypayRegist,
		WebhookSettingRetrievingResponseEventPaymentsPaypayExec,
		WebhookSettingRetrievingResponseEventPaymentsPaypayCapture,
		WebhookSettingRetrievingResponseEventPaymentsPaypayCancel,
		WebhookSettingRetrievingResponseEventPaymentsPaypayChange,
		WebhookSettingRetrievingResponseEventPaymentsPaypayComplete,
		WebhookSettingRetrievingResponseEventPaymentsDirectdebitRegist,
		WebhookSettingRetrievingResponseEventPaymentsDirectdebitExec,
		WebhookSettingRetrievingResponseEventPaymentsDirectdebitCancel,
		WebhookSettingRetrievingResponseEventPaymentsDirectdebitChange,
		WebhookSettingRetrievingResponseEventPaymentsDirectdebitComplete,
		WebhookSettingRetrievingResponseEventPaymentsDirectdebitCompleteStub,
		WebhookSettingRetrievingResponseEventCustomersPaymentMethodsUpdated,
		WebhookSettingRetrievingResponseEventCardRegist,
		WebhookSettingRetrievingResponseEventCardUpdate,
		WebhookSettingRetrievingResponseEventSubscriptionCardRegist,
		WebhookSettingRetrievingResponseEventSubscriptionCardDelete,
		WebhookSettingRetrievingResponseEventSubscriptionCardUpdate,
		WebhookSettingRetrievingResponseEventRecurringCardBatch,
		WebhookSettingRetrievingResponseEventSubscriptionDirectdebitRegist,
		WebhookSettingRetrievingResponseEventSubscriptionDirectdebitDelete,
		WebhookSettingRetrievingResponseEventSubscriptionDirectdebitUpdate,
		WebhookSettingRetrievingResponseEventRecurringDirectdebitBatch,
		WebhookSettingRetrievingResponseEventPaymentsBulkCardRegist,
		WebhookSettingRetrievingResponseEventPaymentsBulkCardBatch,
		WebhookSettingRetrievingResponseEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookSettingRetrievingResponseEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookSettingRetrievingResponseEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventCardRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventCardUpdate:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookSettingRetrievingResponseEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookSettingRetrievingResponseEvent) UnmarshalText(data []byte) error {
	switch WebhookSettingRetrievingResponseEvent(data) {
	case WebhookSettingRetrievingResponseEventPaymentsCardRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardRegist
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardExec
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardCapture:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardCapture
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardCancel
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardAuth:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardAuth
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardChange:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardChange
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure2Result:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardSecure2Result
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardSecure
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayRegist
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayExec
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayCapture:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayCapture
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsApplepayCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayCancel
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniRegist
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniExec
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniCancel
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniComplete:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniComplete
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayRegist
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayExec
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayCapture:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayCapture
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayCancel
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayChange:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayChange
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsPaypayComplete:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayComplete
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitRegist
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitExec
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitCancel
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitChange:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitChange
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitComplete:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitComplete
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookSettingRetrievingResponseEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingRetrievingResponseEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookSettingRetrievingResponseEventCardRegist:
		*s = WebhookSettingRetrievingResponseEventCardRegist
		return nil
	case WebhookSettingRetrievingResponseEventCardUpdate:
		*s = WebhookSettingRetrievingResponseEventCardUpdate
		return nil
	case WebhookSettingRetrievingResponseEventSubscriptionCardRegist:
		*s = WebhookSettingRetrievingResponseEventSubscriptionCardRegist
		return nil
	case WebhookSettingRetrievingResponseEventSubscriptionCardDelete:
		*s = WebhookSettingRetrievingResponseEventSubscriptionCardDelete
		return nil
	case WebhookSettingRetrievingResponseEventSubscriptionCardUpdate:
		*s = WebhookSettingRetrievingResponseEventSubscriptionCardUpdate
		return nil
	case WebhookSettingRetrievingResponseEventRecurringCardBatch:
		*s = WebhookSettingRetrievingResponseEventRecurringCardBatch
		return nil
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingRetrievingResponseEventSubscriptionDirectdebitRegist
		return nil
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingRetrievingResponseEventSubscriptionDirectdebitDelete
		return nil
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingRetrievingResponseEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookSettingRetrievingResponseEventRecurringDirectdebitBatch:
		*s = WebhookSettingRetrievingResponseEventRecurringDirectdebitBatch
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsBulkCardRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsBulkCardRegist
		return nil
	case WebhookSettingRetrievingResponseEventPaymentsBulkCardBatch:
		*s = WebhookSettingRetrievingResponseEventPaymentsBulkCardBatch
		return nil
	case WebhookSettingRetrievingResponseEventContractsStatusCodeUpdated:
		*s = WebhookSettingRetrievingResponseEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookSetting.Updating.Request
type WebhookSettingUpdatingRequest struct {
	URL       OptURI                                `json:"url"`
	Event     OptWebhookSettingUpdatingRequestEvent `json:"event"`
	Signature OptString                             `json:"signature"`
}

// GetURL returns the value of URL.
func (s *WebhookSettingUpdatingRequest) GetURL() OptURI {
	return s.URL
}

// GetEvent returns the value of Event.
func (s *WebhookSettingUpdatingRequest) GetEvent() OptWebhookSettingUpdatingRequestEvent {
	return s.Event
}

// GetSignature returns the value of Signature.
func (s *WebhookSettingUpdatingRequest) GetSignature() OptString {
	return s.Signature
}

// SetURL sets the value of URL.
func (s *WebhookSettingUpdatingRequest) SetURL(val OptURI) {
	s.URL = val
}

// SetEvent sets the value of Event.
func (s *WebhookSettingUpdatingRequest) SetEvent(val OptWebhookSettingUpdatingRequestEvent) {
	s.Event = val
}

// SetSignature sets the value of Signature.
func (s *WebhookSettingUpdatingRequest) SetSignature(val OptString) {
	s.Signature = val
}

// Webhook通知 トリガーイベント.
type WebhookSettingUpdatingRequestEvent string

const (
	WebhookSettingUpdatingRequestEventPaymentsCardRegist                WebhookSettingUpdatingRequestEvent = "payments.card.regist"
	WebhookSettingUpdatingRequestEventPaymentsCardExec                  WebhookSettingUpdatingRequestEvent = "payments.card.exec"
	WebhookSettingUpdatingRequestEventPaymentsCardCapture               WebhookSettingUpdatingRequestEvent = "payments.card.capture"
	WebhookSettingUpdatingRequestEventPaymentsCardCancel                WebhookSettingUpdatingRequestEvent = "payments.card.cancel"
	WebhookSettingUpdatingRequestEventPaymentsCardAuth                  WebhookSettingUpdatingRequestEvent = "payments.card.auth"
	WebhookSettingUpdatingRequestEventPaymentsCardChange                WebhookSettingUpdatingRequestEvent = "payments.card.change"
	WebhookSettingUpdatingRequestEventPaymentsCardSecure2Authenticate   WebhookSettingUpdatingRequestEvent = "payments.card.secure2.authenticate"
	WebhookSettingUpdatingRequestEventPaymentsCardSecure2Result         WebhookSettingUpdatingRequestEvent = "payments.card.secure2.result"
	WebhookSettingUpdatingRequestEventPaymentsCardSecure                WebhookSettingUpdatingRequestEvent = "payments.card.secure"
	WebhookSettingUpdatingRequestEventPaymentsApplepayRegist            WebhookSettingUpdatingRequestEvent = "payments.applepay.regist"
	WebhookSettingUpdatingRequestEventPaymentsApplepayExec              WebhookSettingUpdatingRequestEvent = "payments.applepay.exec"
	WebhookSettingUpdatingRequestEventPaymentsApplepayCapture           WebhookSettingUpdatingRequestEvent = "payments.applepay.capture"
	WebhookSettingUpdatingRequestEventPaymentsApplepayCancel            WebhookSettingUpdatingRequestEvent = "payments.applepay.cancel"
	WebhookSettingUpdatingRequestEventPaymentsKonbiniRegist             WebhookSettingUpdatingRequestEvent = "payments.konbini.regist"
	WebhookSettingUpdatingRequestEventPaymentsKonbiniExec               WebhookSettingUpdatingRequestEvent = "payments.konbini.exec"
	WebhookSettingUpdatingRequestEventPaymentsKonbiniCancel             WebhookSettingUpdatingRequestEvent = "payments.konbini.cancel"
	WebhookSettingUpdatingRequestEventPaymentsKonbiniComplete           WebhookSettingUpdatingRequestEvent = "payments.konbini.complete"
	WebhookSettingUpdatingRequestEventPaymentsKonbiniCompleteStub       WebhookSettingUpdatingRequestEvent = "payments.konbini.complete.stub"
	WebhookSettingUpdatingRequestEventPaymentsKonbiniExpiredUpdateBatch WebhookSettingUpdatingRequestEvent = "payments.konbini.expired.update.batch"
	WebhookSettingUpdatingRequestEventPaymentsPaypayRegist              WebhookSettingUpdatingRequestEvent = "payments.paypay.regist"
	WebhookSettingUpdatingRequestEventPaymentsPaypayExec                WebhookSettingUpdatingRequestEvent = "payments.paypay.exec"
	WebhookSettingUpdatingRequestEventPaymentsPaypayCapture             WebhookSettingUpdatingRequestEvent = "payments.paypay.capture"
	WebhookSettingUpdatingRequestEventPaymentsPaypayCancel              WebhookSettingUpdatingRequestEvent = "payments.paypay.cancel"
	WebhookSettingUpdatingRequestEventPaymentsPaypayChange              WebhookSettingUpdatingRequestEvent = "payments.paypay.change"
	WebhookSettingUpdatingRequestEventPaymentsPaypayComplete            WebhookSettingUpdatingRequestEvent = "payments.paypay.complete"
	WebhookSettingUpdatingRequestEventPaymentsDirectdebitRegist         WebhookSettingUpdatingRequestEvent = "payments.directdebit.regist"
	WebhookSettingUpdatingRequestEventPaymentsDirectdebitExec           WebhookSettingUpdatingRequestEvent = "payments.directdebit.exec"
	WebhookSettingUpdatingRequestEventPaymentsDirectdebitCancel         WebhookSettingUpdatingRequestEvent = "payments.directdebit.cancel"
	WebhookSettingUpdatingRequestEventPaymentsDirectdebitChange         WebhookSettingUpdatingRequestEvent = "payments.directdebit.change"
	WebhookSettingUpdatingRequestEventPaymentsDirectdebitComplete       WebhookSettingUpdatingRequestEvent = "payments.directdebit.complete"
	WebhookSettingUpdatingRequestEventPaymentsDirectdebitCompleteStub   WebhookSettingUpdatingRequestEvent = "payments.directdebit.complete.stub"
	WebhookSettingUpdatingRequestEventCustomersPaymentMethodsUpdated    WebhookSettingUpdatingRequestEvent = "customers.payment_methods.updated"
	WebhookSettingUpdatingRequestEventCardRegist                        WebhookSettingUpdatingRequestEvent = "card.regist"
	WebhookSettingUpdatingRequestEventCardUpdate                        WebhookSettingUpdatingRequestEvent = "card.update"
	WebhookSettingUpdatingRequestEventSubscriptionCardRegist            WebhookSettingUpdatingRequestEvent = "subscription.card.regist"
	WebhookSettingUpdatingRequestEventSubscriptionCardDelete            WebhookSettingUpdatingRequestEvent = "subscription.card.delete"
	WebhookSettingUpdatingRequestEventSubscriptionCardUpdate            WebhookSettingUpdatingRequestEvent = "subscription.card.update"
	WebhookSettingUpdatingRequestEventRecurringCardBatch                WebhookSettingUpdatingRequestEvent = "recurring.card.batch"
	WebhookSettingUpdatingRequestEventSubscriptionDirectdebitRegist     WebhookSettingUpdatingRequestEvent = "subscription.directdebit.regist"
	WebhookSettingUpdatingRequestEventSubscriptionDirectdebitDelete     WebhookSettingUpdatingRequestEvent = "subscription.directdebit.delete"
	WebhookSettingUpdatingRequestEventSubscriptionDirectdebitUpdate     WebhookSettingUpdatingRequestEvent = "subscription.directdebit.update"
	WebhookSettingUpdatingRequestEventRecurringDirectdebitBatch         WebhookSettingUpdatingRequestEvent = "recurring.directdebit.batch"
	WebhookSettingUpdatingRequestEventPaymentsBulkCardRegist            WebhookSettingUpdatingRequestEvent = "payments.bulk.card.regist"
	WebhookSettingUpdatingRequestEventPaymentsBulkCardBatch             WebhookSettingUpdatingRequestEvent = "payments.bulk.card.batch"
	WebhookSettingUpdatingRequestEventContractsStatusCodeUpdated        WebhookSettingUpdatingRequestEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookSettingUpdatingRequestEvent values.
func (WebhookSettingUpdatingRequestEvent) AllValues() []WebhookSettingUpdatingRequestEvent {
	return []WebhookSettingUpdatingRequestEvent{
		WebhookSettingUpdatingRequestEventPaymentsCardRegist,
		WebhookSettingUpdatingRequestEventPaymentsCardExec,
		WebhookSettingUpdatingRequestEventPaymentsCardCapture,
		WebhookSettingUpdatingRequestEventPaymentsCardCancel,
		WebhookSettingUpdatingRequestEventPaymentsCardAuth,
		WebhookSettingUpdatingRequestEventPaymentsCardChange,
		WebhookSettingUpdatingRequestEventPaymentsCardSecure2Authenticate,
		WebhookSettingUpdatingRequestEventPaymentsCardSecure2Result,
		WebhookSettingUpdatingRequestEventPaymentsCardSecure,
		WebhookSettingUpdatingRequestEventPaymentsApplepayRegist,
		WebhookSettingUpdatingRequestEventPaymentsApplepayExec,
		WebhookSettingUpdatingRequestEventPaymentsApplepayCapture,
		WebhookSettingUpdatingRequestEventPaymentsApplepayCancel,
		WebhookSettingUpdatingRequestEventPaymentsKonbiniRegist,
		WebhookSettingUpdatingRequestEventPaymentsKonbiniExec,
		WebhookSettingUpdatingRequestEventPaymentsKonbiniCancel,
		WebhookSettingUpdatingRequestEventPaymentsKonbiniComplete,
		WebhookSettingUpdatingRequestEventPaymentsKonbiniCompleteStub,
		WebhookSettingUpdatingRequestEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookSettingUpdatingRequestEventPaymentsPaypayRegist,
		WebhookSettingUpdatingRequestEventPaymentsPaypayExec,
		WebhookSettingUpdatingRequestEventPaymentsPaypayCapture,
		WebhookSettingUpdatingRequestEventPaymentsPaypayCancel,
		WebhookSettingUpdatingRequestEventPaymentsPaypayChange,
		WebhookSettingUpdatingRequestEventPaymentsPaypayComplete,
		WebhookSettingUpdatingRequestEventPaymentsDirectdebitRegist,
		WebhookSettingUpdatingRequestEventPaymentsDirectdebitExec,
		WebhookSettingUpdatingRequestEventPaymentsDirectdebitCancel,
		WebhookSettingUpdatingRequestEventPaymentsDirectdebitChange,
		WebhookSettingUpdatingRequestEventPaymentsDirectdebitComplete,
		WebhookSettingUpdatingRequestEventPaymentsDirectdebitCompleteStub,
		WebhookSettingUpdatingRequestEventCustomersPaymentMethodsUpdated,
		WebhookSettingUpdatingRequestEventCardRegist,
		WebhookSettingUpdatingRequestEventCardUpdate,
		WebhookSettingUpdatingRequestEventSubscriptionCardRegist,
		WebhookSettingUpdatingRequestEventSubscriptionCardDelete,
		WebhookSettingUpdatingRequestEventSubscriptionCardUpdate,
		WebhookSettingUpdatingRequestEventRecurringCardBatch,
		WebhookSettingUpdatingRequestEventSubscriptionDirectdebitRegist,
		WebhookSettingUpdatingRequestEventSubscriptionDirectdebitDelete,
		WebhookSettingUpdatingRequestEventSubscriptionDirectdebitUpdate,
		WebhookSettingUpdatingRequestEventRecurringDirectdebitBatch,
		WebhookSettingUpdatingRequestEventPaymentsBulkCardRegist,
		WebhookSettingUpdatingRequestEventPaymentsBulkCardBatch,
		WebhookSettingUpdatingRequestEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookSettingUpdatingRequestEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookSettingUpdatingRequestEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventCardUpdate:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingRequestEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookSettingUpdatingRequestEvent) UnmarshalText(data []byte) error {
	switch WebhookSettingUpdatingRequestEvent(data) {
	case WebhookSettingUpdatingRequestEventPaymentsCardRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardRegist
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardExec
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardCapture:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardCapture
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardCancel
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardAuth:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardAuth
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardChange:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardChange
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure2Result:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardSecure2Result
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardSecure
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayRegist
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayExec
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayCapture:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayCapture
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsApplepayCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayCancel
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniRegist
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniExec
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniCancel
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniComplete:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniComplete
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayRegist
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayExec
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayCapture:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayCapture
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayCancel
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayChange:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayChange
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsPaypayComplete:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayComplete
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitRegist
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitExec
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitCancel
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitChange:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitChange
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitComplete:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitComplete
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookSettingUpdatingRequestEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingUpdatingRequestEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookSettingUpdatingRequestEventCardRegist:
		*s = WebhookSettingUpdatingRequestEventCardRegist
		return nil
	case WebhookSettingUpdatingRequestEventCardUpdate:
		*s = WebhookSettingUpdatingRequestEventCardUpdate
		return nil
	case WebhookSettingUpdatingRequestEventSubscriptionCardRegist:
		*s = WebhookSettingUpdatingRequestEventSubscriptionCardRegist
		return nil
	case WebhookSettingUpdatingRequestEventSubscriptionCardDelete:
		*s = WebhookSettingUpdatingRequestEventSubscriptionCardDelete
		return nil
	case WebhookSettingUpdatingRequestEventSubscriptionCardUpdate:
		*s = WebhookSettingUpdatingRequestEventSubscriptionCardUpdate
		return nil
	case WebhookSettingUpdatingRequestEventRecurringCardBatch:
		*s = WebhookSettingUpdatingRequestEventRecurringCardBatch
		return nil
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingUpdatingRequestEventSubscriptionDirectdebitRegist
		return nil
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingUpdatingRequestEventSubscriptionDirectdebitDelete
		return nil
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingUpdatingRequestEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookSettingUpdatingRequestEventRecurringDirectdebitBatch:
		*s = WebhookSettingUpdatingRequestEventRecurringDirectdebitBatch
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsBulkCardRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsBulkCardRegist
		return nil
	case WebhookSettingUpdatingRequestEventPaymentsBulkCardBatch:
		*s = WebhookSettingUpdatingRequestEventPaymentsBulkCardBatch
		return nil
	case WebhookSettingUpdatingRequestEventContractsStatusCodeUpdated:
		*s = WebhookSettingUpdatingRequestEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/WebhookSetting.Updating.Response
type WebhookSettingUpdatingResponse struct {
	// Webhook設定ID.
	ID OptString `json:"id"`
	// Webhook通知先 URL\
	// \
	// Webhookの通知先URLを指定します。\
	// fincodeのWebhookはHTTPS通信かつ443ポートでのみ受信可能です。.
	URL   OptURI                                 `json:"url"`
	Event OptWebhookSettingUpdatingResponseEvent `json:"event"`
	// 署名\
	// \
	// このWebhookがfincodeから送信されたことを確認するための署名です。\
	// fincodeからのWebhook通知において`Fincode-Signature`ヘッダーにこの値が含まれます。.
	Signature OptString  `json:"signature"`
	Created   OptString  `json:"created"`
	Updated   *NilString `json:"updated"`
}

// GetID returns the value of ID.
func (s *WebhookSettingUpdatingResponse) GetID() OptString {
	return s.ID
}

// GetURL returns the value of URL.
func (s *WebhookSettingUpdatingResponse) GetURL() OptURI {
	return s.URL
}

// GetEvent returns the value of Event.
func (s *WebhookSettingUpdatingResponse) GetEvent() OptWebhookSettingUpdatingResponseEvent {
	return s.Event
}

// GetSignature returns the value of Signature.
func (s *WebhookSettingUpdatingResponse) GetSignature() OptString {
	return s.Signature
}

// GetCreated returns the value of Created.
func (s *WebhookSettingUpdatingResponse) GetCreated() OptString {
	return s.Created
}

// GetUpdated returns the value of Updated.
func (s *WebhookSettingUpdatingResponse) GetUpdated() *NilString {
	return s.Updated
}

// SetID sets the value of ID.
func (s *WebhookSettingUpdatingResponse) SetID(val OptString) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *WebhookSettingUpdatingResponse) SetURL(val OptURI) {
	s.URL = val
}

// SetEvent sets the value of Event.
func (s *WebhookSettingUpdatingResponse) SetEvent(val OptWebhookSettingUpdatingResponseEvent) {
	s.Event = val
}

// SetSignature sets the value of Signature.
func (s *WebhookSettingUpdatingResponse) SetSignature(val OptString) {
	s.Signature = val
}

// SetCreated sets the value of Created.
func (s *WebhookSettingUpdatingResponse) SetCreated(val OptString) {
	s.Created = val
}

// SetUpdated sets the value of Updated.
func (s *WebhookSettingUpdatingResponse) SetUpdated(val *NilString) {
	s.Updated = val
}

func (*WebhookSettingUpdatingResponse) updateWebhookSettingRes() {}

// Webhook通知 トリガーイベント.
type WebhookSettingUpdatingResponseEvent string

const (
	WebhookSettingUpdatingResponseEventPaymentsCardRegist                WebhookSettingUpdatingResponseEvent = "payments.card.regist"
	WebhookSettingUpdatingResponseEventPaymentsCardExec                  WebhookSettingUpdatingResponseEvent = "payments.card.exec"
	WebhookSettingUpdatingResponseEventPaymentsCardCapture               WebhookSettingUpdatingResponseEvent = "payments.card.capture"
	WebhookSettingUpdatingResponseEventPaymentsCardCancel                WebhookSettingUpdatingResponseEvent = "payments.card.cancel"
	WebhookSettingUpdatingResponseEventPaymentsCardAuth                  WebhookSettingUpdatingResponseEvent = "payments.card.auth"
	WebhookSettingUpdatingResponseEventPaymentsCardChange                WebhookSettingUpdatingResponseEvent = "payments.card.change"
	WebhookSettingUpdatingResponseEventPaymentsCardSecure2Authenticate   WebhookSettingUpdatingResponseEvent = "payments.card.secure2.authenticate"
	WebhookSettingUpdatingResponseEventPaymentsCardSecure2Result         WebhookSettingUpdatingResponseEvent = "payments.card.secure2.result"
	WebhookSettingUpdatingResponseEventPaymentsCardSecure                WebhookSettingUpdatingResponseEvent = "payments.card.secure"
	WebhookSettingUpdatingResponseEventPaymentsApplepayRegist            WebhookSettingUpdatingResponseEvent = "payments.applepay.regist"
	WebhookSettingUpdatingResponseEventPaymentsApplepayExec              WebhookSettingUpdatingResponseEvent = "payments.applepay.exec"
	WebhookSettingUpdatingResponseEventPaymentsApplepayCapture           WebhookSettingUpdatingResponseEvent = "payments.applepay.capture"
	WebhookSettingUpdatingResponseEventPaymentsApplepayCancel            WebhookSettingUpdatingResponseEvent = "payments.applepay.cancel"
	WebhookSettingUpdatingResponseEventPaymentsKonbiniRegist             WebhookSettingUpdatingResponseEvent = "payments.konbini.regist"
	WebhookSettingUpdatingResponseEventPaymentsKonbiniExec               WebhookSettingUpdatingResponseEvent = "payments.konbini.exec"
	WebhookSettingUpdatingResponseEventPaymentsKonbiniCancel             WebhookSettingUpdatingResponseEvent = "payments.konbini.cancel"
	WebhookSettingUpdatingResponseEventPaymentsKonbiniComplete           WebhookSettingUpdatingResponseEvent = "payments.konbini.complete"
	WebhookSettingUpdatingResponseEventPaymentsKonbiniCompleteStub       WebhookSettingUpdatingResponseEvent = "payments.konbini.complete.stub"
	WebhookSettingUpdatingResponseEventPaymentsKonbiniExpiredUpdateBatch WebhookSettingUpdatingResponseEvent = "payments.konbini.expired.update.batch"
	WebhookSettingUpdatingResponseEventPaymentsPaypayRegist              WebhookSettingUpdatingResponseEvent = "payments.paypay.regist"
	WebhookSettingUpdatingResponseEventPaymentsPaypayExec                WebhookSettingUpdatingResponseEvent = "payments.paypay.exec"
	WebhookSettingUpdatingResponseEventPaymentsPaypayCapture             WebhookSettingUpdatingResponseEvent = "payments.paypay.capture"
	WebhookSettingUpdatingResponseEventPaymentsPaypayCancel              WebhookSettingUpdatingResponseEvent = "payments.paypay.cancel"
	WebhookSettingUpdatingResponseEventPaymentsPaypayChange              WebhookSettingUpdatingResponseEvent = "payments.paypay.change"
	WebhookSettingUpdatingResponseEventPaymentsPaypayComplete            WebhookSettingUpdatingResponseEvent = "payments.paypay.complete"
	WebhookSettingUpdatingResponseEventPaymentsDirectdebitRegist         WebhookSettingUpdatingResponseEvent = "payments.directdebit.regist"
	WebhookSettingUpdatingResponseEventPaymentsDirectdebitExec           WebhookSettingUpdatingResponseEvent = "payments.directdebit.exec"
	WebhookSettingUpdatingResponseEventPaymentsDirectdebitCancel         WebhookSettingUpdatingResponseEvent = "payments.directdebit.cancel"
	WebhookSettingUpdatingResponseEventPaymentsDirectdebitChange         WebhookSettingUpdatingResponseEvent = "payments.directdebit.change"
	WebhookSettingUpdatingResponseEventPaymentsDirectdebitComplete       WebhookSettingUpdatingResponseEvent = "payments.directdebit.complete"
	WebhookSettingUpdatingResponseEventPaymentsDirectdebitCompleteStub   WebhookSettingUpdatingResponseEvent = "payments.directdebit.complete.stub"
	WebhookSettingUpdatingResponseEventCustomersPaymentMethodsUpdated    WebhookSettingUpdatingResponseEvent = "customers.payment_methods.updated"
	WebhookSettingUpdatingResponseEventCardRegist                        WebhookSettingUpdatingResponseEvent = "card.regist"
	WebhookSettingUpdatingResponseEventCardUpdate                        WebhookSettingUpdatingResponseEvent = "card.update"
	WebhookSettingUpdatingResponseEventSubscriptionCardRegist            WebhookSettingUpdatingResponseEvent = "subscription.card.regist"
	WebhookSettingUpdatingResponseEventSubscriptionCardDelete            WebhookSettingUpdatingResponseEvent = "subscription.card.delete"
	WebhookSettingUpdatingResponseEventSubscriptionCardUpdate            WebhookSettingUpdatingResponseEvent = "subscription.card.update"
	WebhookSettingUpdatingResponseEventRecurringCardBatch                WebhookSettingUpdatingResponseEvent = "recurring.card.batch"
	WebhookSettingUpdatingResponseEventSubscriptionDirectdebitRegist     WebhookSettingUpdatingResponseEvent = "subscription.directdebit.regist"
	WebhookSettingUpdatingResponseEventSubscriptionDirectdebitDelete     WebhookSettingUpdatingResponseEvent = "subscription.directdebit.delete"
	WebhookSettingUpdatingResponseEventSubscriptionDirectdebitUpdate     WebhookSettingUpdatingResponseEvent = "subscription.directdebit.update"
	WebhookSettingUpdatingResponseEventRecurringDirectdebitBatch         WebhookSettingUpdatingResponseEvent = "recurring.directdebit.batch"
	WebhookSettingUpdatingResponseEventPaymentsBulkCardRegist            WebhookSettingUpdatingResponseEvent = "payments.bulk.card.regist"
	WebhookSettingUpdatingResponseEventPaymentsBulkCardBatch             WebhookSettingUpdatingResponseEvent = "payments.bulk.card.batch"
	WebhookSettingUpdatingResponseEventContractsStatusCodeUpdated        WebhookSettingUpdatingResponseEvent = "contracts.status_code.updated"
)

// AllValues returns all WebhookSettingUpdatingResponseEvent values.
func (WebhookSettingUpdatingResponseEvent) AllValues() []WebhookSettingUpdatingResponseEvent {
	return []WebhookSettingUpdatingResponseEvent{
		WebhookSettingUpdatingResponseEventPaymentsCardRegist,
		WebhookSettingUpdatingResponseEventPaymentsCardExec,
		WebhookSettingUpdatingResponseEventPaymentsCardCapture,
		WebhookSettingUpdatingResponseEventPaymentsCardCancel,
		WebhookSettingUpdatingResponseEventPaymentsCardAuth,
		WebhookSettingUpdatingResponseEventPaymentsCardChange,
		WebhookSettingUpdatingResponseEventPaymentsCardSecure2Authenticate,
		WebhookSettingUpdatingResponseEventPaymentsCardSecure2Result,
		WebhookSettingUpdatingResponseEventPaymentsCardSecure,
		WebhookSettingUpdatingResponseEventPaymentsApplepayRegist,
		WebhookSettingUpdatingResponseEventPaymentsApplepayExec,
		WebhookSettingUpdatingResponseEventPaymentsApplepayCapture,
		WebhookSettingUpdatingResponseEventPaymentsApplepayCancel,
		WebhookSettingUpdatingResponseEventPaymentsKonbiniRegist,
		WebhookSettingUpdatingResponseEventPaymentsKonbiniExec,
		WebhookSettingUpdatingResponseEventPaymentsKonbiniCancel,
		WebhookSettingUpdatingResponseEventPaymentsKonbiniComplete,
		WebhookSettingUpdatingResponseEventPaymentsKonbiniCompleteStub,
		WebhookSettingUpdatingResponseEventPaymentsKonbiniExpiredUpdateBatch,
		WebhookSettingUpdatingResponseEventPaymentsPaypayRegist,
		WebhookSettingUpdatingResponseEventPaymentsPaypayExec,
		WebhookSettingUpdatingResponseEventPaymentsPaypayCapture,
		WebhookSettingUpdatingResponseEventPaymentsPaypayCancel,
		WebhookSettingUpdatingResponseEventPaymentsPaypayChange,
		WebhookSettingUpdatingResponseEventPaymentsPaypayComplete,
		WebhookSettingUpdatingResponseEventPaymentsDirectdebitRegist,
		WebhookSettingUpdatingResponseEventPaymentsDirectdebitExec,
		WebhookSettingUpdatingResponseEventPaymentsDirectdebitCancel,
		WebhookSettingUpdatingResponseEventPaymentsDirectdebitChange,
		WebhookSettingUpdatingResponseEventPaymentsDirectdebitComplete,
		WebhookSettingUpdatingResponseEventPaymentsDirectdebitCompleteStub,
		WebhookSettingUpdatingResponseEventCustomersPaymentMethodsUpdated,
		WebhookSettingUpdatingResponseEventCardRegist,
		WebhookSettingUpdatingResponseEventCardUpdate,
		WebhookSettingUpdatingResponseEventSubscriptionCardRegist,
		WebhookSettingUpdatingResponseEventSubscriptionCardDelete,
		WebhookSettingUpdatingResponseEventSubscriptionCardUpdate,
		WebhookSettingUpdatingResponseEventRecurringCardBatch,
		WebhookSettingUpdatingResponseEventSubscriptionDirectdebitRegist,
		WebhookSettingUpdatingResponseEventSubscriptionDirectdebitDelete,
		WebhookSettingUpdatingResponseEventSubscriptionDirectdebitUpdate,
		WebhookSettingUpdatingResponseEventRecurringDirectdebitBatch,
		WebhookSettingUpdatingResponseEventPaymentsBulkCardRegist,
		WebhookSettingUpdatingResponseEventPaymentsBulkCardBatch,
		WebhookSettingUpdatingResponseEventContractsStatusCodeUpdated,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WebhookSettingUpdatingResponseEvent) MarshalText() ([]byte, error) {
	switch s {
	case WebhookSettingUpdatingResponseEventPaymentsCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardExec:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardCapture:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardAuth:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardChange:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure2Authenticate:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure2Result:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayExec:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayCapture:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniExec:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniComplete:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniCompleteStub:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayExec:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayCapture:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayChange:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayComplete:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitExec:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitCancel:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitChange:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitComplete:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitCompleteStub:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventCustomersPaymentMethodsUpdated:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventCardUpdate:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventSubscriptionCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventSubscriptionCardDelete:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventSubscriptionCardUpdate:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventRecurringCardBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitDelete:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitUpdate:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventRecurringDirectdebitBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsBulkCardRegist:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventPaymentsBulkCardBatch:
		return []byte(s), nil
	case WebhookSettingUpdatingResponseEventContractsStatusCodeUpdated:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WebhookSettingUpdatingResponseEvent) UnmarshalText(data []byte) error {
	switch WebhookSettingUpdatingResponseEvent(data) {
	case WebhookSettingUpdatingResponseEventPaymentsCardRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardRegist
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardExec
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardCapture:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardCapture
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardCancel
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardAuth:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardAuth
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardChange:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardChange
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardSecure2Authenticate
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure2Result:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardSecure2Result
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardSecure
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayRegist
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayExec
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayCapture:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayCapture
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsApplepayCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayCancel
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniRegist
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniExec
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniCancel
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniComplete:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniComplete
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniCompleteStub
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniExpiredUpdateBatch
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayRegist
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayExec
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayCapture:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayCapture
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayCancel
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayChange:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayChange
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsPaypayComplete:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayComplete
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitRegist
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitExec
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitCancel
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitChange:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitChange
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitComplete:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitComplete
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitCompleteStub
		return nil
	case WebhookSettingUpdatingResponseEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingUpdatingResponseEventCustomersPaymentMethodsUpdated
		return nil
	case WebhookSettingUpdatingResponseEventCardRegist:
		*s = WebhookSettingUpdatingResponseEventCardRegist
		return nil
	case WebhookSettingUpdatingResponseEventCardUpdate:
		*s = WebhookSettingUpdatingResponseEventCardUpdate
		return nil
	case WebhookSettingUpdatingResponseEventSubscriptionCardRegist:
		*s = WebhookSettingUpdatingResponseEventSubscriptionCardRegist
		return nil
	case WebhookSettingUpdatingResponseEventSubscriptionCardDelete:
		*s = WebhookSettingUpdatingResponseEventSubscriptionCardDelete
		return nil
	case WebhookSettingUpdatingResponseEventSubscriptionCardUpdate:
		*s = WebhookSettingUpdatingResponseEventSubscriptionCardUpdate
		return nil
	case WebhookSettingUpdatingResponseEventRecurringCardBatch:
		*s = WebhookSettingUpdatingResponseEventRecurringCardBatch
		return nil
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingUpdatingResponseEventSubscriptionDirectdebitRegist
		return nil
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingUpdatingResponseEventSubscriptionDirectdebitDelete
		return nil
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingUpdatingResponseEventSubscriptionDirectdebitUpdate
		return nil
	case WebhookSettingUpdatingResponseEventRecurringDirectdebitBatch:
		*s = WebhookSettingUpdatingResponseEventRecurringDirectdebitBatch
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsBulkCardRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsBulkCardRegist
		return nil
	case WebhookSettingUpdatingResponseEventPaymentsBulkCardBatch:
		*s = WebhookSettingUpdatingResponseEventPaymentsBulkCardBatch
		return nil
	case WebhookSettingUpdatingResponseEventContractsStatusCodeUpdated:
		*s = WebhookSettingUpdatingResponseEventContractsStatusCodeUpdated
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
