// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"net/url"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode encodes APIKeyDisplayFlag as json.
func (s APIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes APIKeyDisplayFlag from json.
func (s *APIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch APIKeyDisplayFlag(v) {
	case APIKeyDisplayFlag0:
		*s = APIKeyDisplayFlag0
	case APIKeyDisplayFlag1:
		*s = APIKeyDisplayFlag1
	default:
		*s = APIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIVersion as json.
func (s APIVersion) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes APIVersion from json.
func (s *APIVersion) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIVersion to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIVersion(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIVersion) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIVersion) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AboutExpiration as json.
func (s AboutExpiration) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AboutExpiration from json.
func (s *AboutExpiration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AboutExpiration to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AboutExpiration(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AboutExpiration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AboutExpiration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccessID as json.
func (s AccessID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AccessID from json.
func (s *AccessID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccessID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AccessID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccessID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccessID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Account) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Account) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.DepositDate.Set {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate.Set {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.PaymentDeadline.Set {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate.Set {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.SettlementAmount.Set {
			e.FieldStart("settlement_amount")
			s.SettlementAmount.Encode(e)
		}
	}
	{
		if s.BankTransferFee.Set {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount.Set {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount.Set {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount.Set {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount.Set {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount.Set {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeAmount.Set {
			e.FieldStart("platform_web_registration_fee_amount")
			s.PlatformWebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.DepositDestination.Set {
			e.FieldStart("deposit_destination")
			s.DepositDestination.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccount = [24]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "deposit_amount",
	4:  "deposit_date",
	5:  "scheduled_deposit_date",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "payment_deadline",
	9:  "payment_completion_date",
	10: "status_code",
	11: "count",
	12: "settlement_amount",
	13: "bank_transfer_fee",
	14: "total_amount",
	15: "fee_amount",
	16: "web_registration_fee_amount",
	17: "tax_amount",
	18: "platform_fee_amount",
	19: "platform_fee_tax_amount",
	20: "platform_web_registration_fee_amount",
	21: "created",
	22: "updated",
	23: "deposit_destination",
}

// Decode decodes Account from json.
func (s *Account) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Account to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate.Reset()
				if err := s.DepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate.Reset()
				if err := s.ScheduledDepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline.Reset()
				if err := s.PaymentDeadline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate.Reset()
				if err := s.PaymentCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "settlement_amount":
			if err := func() error {
				s.SettlementAmount.Reset()
				if err := s.SettlementAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settlement_amount\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee.Reset()
				if err := s.BankTransferFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount.Reset()
				if err := s.FeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount.Reset()
				if err := s.WebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount.Reset()
				if err := s.TaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount.Reset()
				if err := s.PlatformFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount.Reset()
				if err := s.PlatformFeeTaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "platform_web_registration_fee_amount":
			if err := func() error {
				s.PlatformWebRegistrationFeeAmount.Reset()
				if err := s.PlatformWebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "deposit_destination":
			if err := func() error {
				s.DepositDestination.Reset()
				if err := s.DepositDestination.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_destination\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Account")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Account) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Account) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetail) encodeFields(e *jx.Encoder) {
	{
		if s.DetailID.Set {
			e.FieldStart("detail_id")
			s.DetailID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.TradeType.Set {
			e.FieldStart("trade_type")
			s.TradeType.Encode(e)
		}
	}
	{
		if s.PaymentMethod.Set {
			e.FieldStart("payment_method")
			s.PaymentMethod.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.FeeTotal.Set {
			e.FieldStart("fee_total")
			s.FeeTotal.Encode(e)
		}
	}
	{
		if s.FeeTotalTaxin.Set {
			e.FieldStart("fee_total_taxin")
			s.FeeTotalTaxin.Encode(e)
		}
	}
	{
		if s.FeeProfitTax.Set {
			e.FieldStart("fee_profit_tax")
			s.FeeProfitTax.Encode(e)
		}
	}
	{
		if s.FeeProfit.Set {
			e.FieldStart("fee_profit")
			s.FeeProfit.Encode(e)
		}
	}
	{
		if s.FeeCost.Set {
			e.FieldStart("fee_cost")
			s.FeeCost.Encode(e)
		}
	}
	{
		if s.FeeRateTotal.Set {
			e.FieldStart("fee_rate_total")
			s.FeeRateTotal.Encode(e)
		}
	}
	{
		if s.FixedFee.Set {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.ApplyType.Set {
			e.FieldStart("apply_type")
			s.ApplyType.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee.Set {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeTaxin.Set {
			e.FieldStart("web_registration_fee_taxin")
			s.WebRegistrationFeeTaxin.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeTax.Set {
			e.FieldStart("web_registration_fee_tax")
			s.WebRegistrationFeeTax.Encode(e)
		}
	}
	{
		if s.PlatformFee.Set {
			e.FieldStart("platform_fee")
			s.PlatformFee.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxin.Set {
			e.FieldStart("platform_fee_taxin")
			s.PlatformFeeTaxin.Encode(e)
		}
	}
	{
		if s.PlatformFeeRate.Set {
			e.FieldStart("platform_fee_rate")
			s.PlatformFeeRate.Encode(e)
		}
	}
	{
		if s.FixedFeeForPlatformFee.Set {
			e.FieldStart("fixed_fee_for_platform_fee")
			s.FixedFeeForPlatformFee.Encode(e)
		}
	}
	{
		if s.ApplyTypeForPlatformFee.Set {
			e.FieldStart("apply_type_for_platform_fee")
			s.ApplyTypeForPlatformFee.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFee.Set {
			e.FieldStart("platform_web_registration_fee")
			s.PlatformWebRegistrationFee.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeTaxin.Set {
			e.FieldStart("platform_web_registration_fee_taxin")
			s.PlatformWebRegistrationFeeTaxin.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeTax.Set {
			e.FieldStart("platform_web_registration_fee_tax")
			s.PlatformWebRegistrationFeeTax.Encode(e)
		}
	}
	{
		if s.ProcessedDate.Set {
			e.FieldStart("processed_date")
			s.ProcessedDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountDetail = [34]string{
	0:  "detail_id",
	1:  "shop_id",
	2:  "trade_type",
	3:  "payment_method",
	4:  "account_id",
	5:  "order_id",
	6:  "access_id",
	7:  "deposit_amount",
	8:  "amount",
	9:  "tax",
	10: "fee_total",
	11: "fee_total_taxin",
	12: "fee_profit_tax",
	13: "fee_profit",
	14: "fee_cost",
	15: "fee_rate_total",
	16: "fixed_fee",
	17: "apply_type",
	18: "web_registration_fee",
	19: "web_registration_fee_taxin",
	20: "web_registration_fee_tax",
	21: "platform_fee",
	22: "platform_fee_taxin",
	23: "platform_fee_rate",
	24: "fixed_fee_for_platform_fee",
	25: "apply_type_for_platform_fee",
	26: "platform_web_registration_fee",
	27: "platform_web_registration_fee_taxin",
	28: "platform_web_registration_fee_tax",
	29: "processed_date",
	30: "aggregate_term_start",
	31: "aggregate_term_end",
	32: "created",
	33: "updated",
}

// Decode decodes AccountDetail from json.
func (s *AccountDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "detail_id":
			if err := func() error {
				s.DetailID.Reset()
				if err := s.DetailID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"detail_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "trade_type":
			if err := func() error {
				s.TradeType.Reset()
				if err := s.TradeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trade_type\"")
			}
		case "payment_method":
			if err := func() error {
				s.PaymentMethod.Reset()
				if err := s.PaymentMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "fee_total":
			if err := func() error {
				s.FeeTotal.Reset()
				if err := s.FeeTotal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_total\"")
			}
		case "fee_total_taxin":
			if err := func() error {
				s.FeeTotalTaxin.Reset()
				if err := s.FeeTotalTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_total_taxin\"")
			}
		case "fee_profit_tax":
			if err := func() error {
				s.FeeProfitTax.Reset()
				if err := s.FeeProfitTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_profit_tax\"")
			}
		case "fee_profit":
			if err := func() error {
				s.FeeProfit.Reset()
				if err := s.FeeProfit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_profit\"")
			}
		case "fee_cost":
			if err := func() error {
				s.FeeCost.Reset()
				if err := s.FeeCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_cost\"")
			}
		case "fee_rate_total":
			if err := func() error {
				s.FeeRateTotal.Reset()
				if err := s.FeeRateTotal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_rate_total\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee.Reset()
				if err := s.FixedFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "apply_type":
			if err := func() error {
				s.ApplyType.Reset()
				if err := s.ApplyType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apply_type\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee.Reset()
				if err := s.WebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		case "web_registration_fee_taxin":
			if err := func() error {
				s.WebRegistrationFeeTaxin.Reset()
				if err := s.WebRegistrationFeeTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_taxin\"")
			}
		case "web_registration_fee_tax":
			if err := func() error {
				s.WebRegistrationFeeTax.Reset()
				if err := s.WebRegistrationFeeTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_tax\"")
			}
		case "platform_fee":
			if err := func() error {
				s.PlatformFee.Reset()
				if err := s.PlatformFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee\"")
			}
		case "platform_fee_taxin":
			if err := func() error {
				s.PlatformFeeTaxin.Reset()
				if err := s.PlatformFeeTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_taxin\"")
			}
		case "platform_fee_rate":
			if err := func() error {
				s.PlatformFeeRate.Reset()
				if err := s.PlatformFeeRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_rate\"")
			}
		case "fixed_fee_for_platform_fee":
			if err := func() error {
				s.FixedFeeForPlatformFee.Reset()
				if err := s.FixedFeeForPlatformFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee_for_platform_fee\"")
			}
		case "apply_type_for_platform_fee":
			if err := func() error {
				s.ApplyTypeForPlatformFee.Reset()
				if err := s.ApplyTypeForPlatformFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apply_type_for_platform_fee\"")
			}
		case "platform_web_registration_fee":
			if err := func() error {
				s.PlatformWebRegistrationFee.Reset()
				if err := s.PlatformWebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee\"")
			}
		case "platform_web_registration_fee_taxin":
			if err := func() error {
				s.PlatformWebRegistrationFeeTaxin.Reset()
				if err := s.PlatformWebRegistrationFeeTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_taxin\"")
			}
		case "platform_web_registration_fee_tax":
			if err := func() error {
				s.PlatformWebRegistrationFeeTax.Reset()
				if err := s.PlatformWebRegistrationFeeTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_tax\"")
			}
		case "processed_date":
			if err := func() error {
				s.ProcessedDate.Reset()
				if err := s.ProcessedDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processed_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyType as json.
func (s AccountDetailApplyType) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes AccountDetailApplyType from json.
func (s *AccountDetailApplyType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailApplyType to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = AccountDetailApplyType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountDetailApplyType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailApplyType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyTypeForPlatformFee as json.
func (s AccountDetailApplyTypeForPlatformFee) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes AccountDetailApplyTypeForPlatformFee from json.
func (s *AccountDetailApplyTypeForPlatformFee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailApplyTypeForPlatformFee to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = AccountDetailApplyTypeForPlatformFee(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountDetailApplyTypeForPlatformFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailApplyTypeForPlatformFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountDetailListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetailListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAccountDetailListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes AccountDetailListRetrievingResponse from json.
func (s *AccountDetailListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]AccountDetail, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountDetail
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetailListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetailListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailTradeType as json.
func (s AccountDetailTradeType) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes AccountDetailTradeType from json.
func (s *AccountDetailTradeType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailTradeType to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = AccountDetailTradeType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountDetailTradeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailTradeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountID as json.
func (s AccountID) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes AccountID from json.
func (s *AccountID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountID to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AccountID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate.Set {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.DepositDate.Set {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.PaymentDeadline.Set {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate.Set {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.BankTransferFee.Set {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount.Set {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount.Set {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount.Set {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount.Set {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountListItem = [20]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "scheduled_deposit_date",
	4:  "aggregate_term_start",
	5:  "aggregate_term_end",
	6:  "deposit_date",
	7:  "payment_deadline",
	8:  "payment_completion_date",
	9:  "status_code",
	10: "count",
	11: "bank_transfer_fee",
	12: "total_amount",
	13: "fee_amount",
	14: "web_registration_fee_amount",
	15: "deposit_amount",
	16: "platform_fee_amount",
	17: "platform_fee_tax_amount",
	18: "created",
	19: "updated",
}

// Decode decodes AccountListItem from json.
func (s *AccountListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate.Reset()
				if err := s.ScheduledDepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate.Reset()
				if err := s.DepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline.Reset()
				if err := s.PaymentDeadline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate.Reset()
				if err := s.PaymentCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee.Reset()
				if err := s.BankTransferFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount.Reset()
				if err := s.FeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount.Reset()
				if err := s.WebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount.Reset()
				if err := s.PlatformFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount.Reset()
				if err := s.PlatformFeeTaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAccountListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes AccountListRetrievingResponse from json.
func (s *AccountListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]AccountListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountName as json.
func (s AccountName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AccountName from json.
func (s *AccountName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AccountName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountNameKana as json.
func (s AccountNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AccountNameKana from json.
func (s *AccountNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AccountNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountNumber as json.
func (s AccountNumber) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AccountNumber from json.
func (s *AccountNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountNumber to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AccountNumber(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPaymentMethod as json.
func (s AccountPaymentMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AccountPaymentMethod from json.
func (s *AccountPaymentMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountPaymentMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AccountPaymentMethod(v) {
	case AccountPaymentMethodVM:
		*s = AccountPaymentMethodVM
	case AccountPaymentMethodJA:
		*s = AccountPaymentMethodJA
	case AccountPaymentMethodKONBINI:
		*s = AccountPaymentMethodKONBINI
	case AccountPaymentMethodPayPay:
		*s = AccountPaymentMethodPayPay
	case AccountPaymentMethodApplepayVM:
		*s = AccountPaymentMethodApplepayVM
	case AccountPaymentMethodApplepayJA:
		*s = AccountPaymentMethodApplepayJA
	case AccountPaymentMethodDirectdebit:
		*s = AccountPaymentMethodDirectdebit
	default:
		*s = AccountPaymentMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPropertiesID as json.
func (s AccountPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AccountPropertiesID from json.
func (s *AccountPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AccountPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPropertiesTotalAmount as json.
func (s AccountPropertiesTotalAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes AccountPropertiesTotalAmount from json.
func (s *AccountPropertiesTotalAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountPropertiesTotalAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AccountPropertiesTotalAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountPropertiesTotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountPropertiesTotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountType as json.
func (s AccountType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AccountType from json.
func (s *AccountType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AccountType(v) {
	case AccountType0:
		*s = AccountType0
	case AccountType1:
		*s = AccountType1
	default:
		*s = AccountType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Acquirer as json.
func (s Acquirer) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Acquirer from json.
func (s *Acquirer) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Acquirer to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Acquirer(v) {
	case AcquirerUC:
		*s = AcquirerUC
	case AcquirerTFC:
		*s = AcquirerTFC
	case AcquirerJCBAMEX:
		*s = AcquirerJCBAMEX
	case AcquirerDINERS:
		*s = AcquirerDINERS
	case AcquirerAPPLEPAYUC:
		*s = AcquirerAPPLEPAYUC
	case AcquirerAPPLEPAYJCBAMEX:
		*s = AcquirerAPPLEPAYJCBAMEX
	case AcquirerPAYSLE:
		*s = AcquirerPAYSLE
	case AcquirerPAYPAY:
		*s = AcquirerPAYPAY
	case AcquirerDIRECTDEBIT:
		*s = AcquirerDIRECTDEBIT
	default:
		*s = Acquirer(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Acquirer) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Acquirer) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AcquirerContractStatus as json.
func (s AcquirerContractStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AcquirerContractStatus from json.
func (s *AcquirerContractStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AcquirerContractStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AcquirerContractStatus(v) {
	case AcquirerContractStatus701:
		*s = AcquirerContractStatus701
	case AcquirerContractStatus702:
		*s = AcquirerContractStatus702
	case AcquirerContractStatus703:
		*s = AcquirerContractStatus703
	case AcquirerContractStatus704:
		*s = AcquirerContractStatus704
	case AcquirerContractStatus705:
		*s = AcquirerContractStatus705
	case AcquirerContractStatus706:
		*s = AcquirerContractStatus706
	case AcquirerContractStatus707:
		*s = AcquirerContractStatus707
	case AcquirerContractStatus708:
		*s = AcquirerContractStatus708
	case AcquirerContractStatus709:
		*s = AcquirerContractStatus709
	default:
		*s = AcquirerContractStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AcquirerContractStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AcquirerContractStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrCity as json.
func (s AddrCity) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AddrCity from json.
func (s *AddrCity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddrCity to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AddrCity(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddrCity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddrCity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrCountry as json.
func (s AddrCountry) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AddrCountry from json.
func (s *AddrCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddrCountry to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AddrCountry(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddrCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddrCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrLine1 as json.
func (s AddrLine1) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AddrLine1 from json.
func (s *AddrLine1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddrLine1 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AddrLine1(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddrLine1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddrLine1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrLine2 as json.
func (s AddrLine2) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AddrLine2 from json.
func (s *AddrLine2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddrLine2 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AddrLine2(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddrLine2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddrLine2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrLine3 as json.
func (s AddrLine3) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AddrLine3 from json.
func (s *AddrLine3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddrLine3 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AddrLine3(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddrLine3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddrLine3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrPostCode as json.
func (s AddrPostCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AddrPostCode from json.
func (s *AddrPostCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddrPostCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AddrPostCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddrPostCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddrPostCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrState as json.
func (s AddrState) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AddrState from json.
func (s *AddrState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AddrState to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AddrState(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AddrState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AddrState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AggregateTermEnd as json.
func (s AggregateTermEnd) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AggregateTermEnd from json.
func (s *AggregateTermEnd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AggregateTermEnd to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AggregateTermEnd(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AggregateTermEnd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AggregateTermEnd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AggregateTermStart as json.
func (s AggregateTermStart) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AggregateTermStart from json.
func (s *AggregateTermStart) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AggregateTermStart to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AggregateTermStart(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AggregateTermStart) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AggregateTermStart) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Amount as json.
func (s Amount) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Amount from json.
func (s *Amount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Amount to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Amount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Amount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Amount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ApplePayPaymentJobCode as json.
func (s ApplePayPaymentJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ApplePayPaymentJobCode from json.
func (s *ApplePayPaymentJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ApplePayPaymentJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ApplePayPaymentJobCode(v) {
	case ApplePayPaymentJobCodeAUTH:
		*s = ApplePayPaymentJobCodeAUTH
	case ApplePayPaymentJobCodeCAPTURE:
		*s = ApplePayPaymentJobCodeCAPTURE
	default:
		*s = ApplePayPaymentJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ApplePayPaymentJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ApplePayPaymentJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Approve as json.
func (s Approve) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Approve from json.
func (s *Approve) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Approve to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Approve(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Approve) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Approve) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthMaxDate as json.
func (s AuthMaxDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes AuthMaxDate from json.
func (s *AuthMaxDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthMaxDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = AuthMaxDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthMaxDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthMaxDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BankAccountInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BankAccountInfoV2) encodeFields(e *jx.Encoder) {
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		e.FieldStart("branch_code")
		e.Str(s.BranchCode)
	}
	{
		e.FieldStart("account_kind")
		s.AccountKind.Encode(e)
	}
	{
		e.FieldStart("account_number")
		e.Str(s.AccountNumber)
	}
	{
		e.FieldStart("account_name")
		e.Str(s.AccountName)
	}
}

var jsonFieldsNameOfBankAccountInfoV2 = [5]string{
	0: "bank_code",
	1: "branch_code",
	2: "account_kind",
	3: "account_number",
	4: "account_name",
}

// Decode decodes BankAccountInfoV2 from json.
func (s *BankAccountInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BankAccountInfoV2 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BranchCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "account_kind":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.AccountNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.AccountName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BankAccountInfoV2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfBankAccountInfoV2) {
					name = jsonFieldsNameOfBankAccountInfoV2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BankAccountInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BankAccountInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BankAccountInfoV2AccountKind as json.
func (s BankAccountInfoV2AccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes BankAccountInfoV2AccountKind from json.
func (s *BankAccountInfoV2AccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BankAccountInfoV2AccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = BankAccountInfoV2AccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s BankAccountInfoV2AccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BankAccountInfoV2AccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BankCode as json.
func (s BankCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes BankCode from json.
func (s *BankCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BankCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = BankCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s BankCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BankCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BankTransferFee as json.
func (s BankTransferFee) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes BankTransferFee from json.
func (s *BankTransferFee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BankTransferFee to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = BankTransferFee(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s BankTransferFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BankTransferFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BranchCode as json.
func (s BranchCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes BranchCode from json.
func (s *BranchCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BranchCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = BranchCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s BranchCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BranchCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BusinessDetails as json.
func (s BusinessDetails) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes BusinessDetails from json.
func (s *BusinessDetails) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BusinessDetails to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = BusinessDetails(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s BusinessDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BusinessDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelDescription as json.
func (s CancelDescription) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CancelDescription from json.
func (s *CancelDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CancelDescription to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CancelDescription(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CancelDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CancelDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelOverpaymentFlag as json.
func (s CancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CancelOverpaymentFlag from json.
func (s *CancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CancelOverpaymentFlag(v) {
	case CancelOverpaymentFlag0:
		*s = CancelOverpaymentFlag0
	case CancelOverpaymentFlag1:
		*s = CancelOverpaymentFlag1
	default:
		*s = CancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelPaymentOK as json.
func (s CancelPaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCancelingResponseCancelPaymentOK:
		s.PaymentCardCancelingResponse.Encode(e)
	case PaymentApplePayCancelingResponseCancelPaymentOK:
		s.PaymentApplePayCancelingResponse.Encode(e)
	case PaymentKonbiniCancelingResponseCancelPaymentOK:
		s.PaymentKonbiniCancelingResponse.Encode(e)
	case PaymentPayPayCancelingResponseCancelPaymentOK:
		s.PaymentPayPayCancelingResponse.Encode(e)
	case PaymentDirectDebitCancelingResponseCancelPaymentOK:
		s.PaymentDirectDebitCancelingResponse.Encode(e)
	}
}

func (s CancelPaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCancelingResponseCancelPaymentOK:
		s.PaymentCardCancelingResponse.encodeFields(e)
	case PaymentApplePayCancelingResponseCancelPaymentOK:
		s.PaymentApplePayCancelingResponse.encodeFields(e)
	case PaymentKonbiniCancelingResponseCancelPaymentOK:
		s.PaymentKonbiniCancelingResponse.encodeFields(e)
	case PaymentPayPayCancelingResponseCancelPaymentOK:
		s.PaymentPayPayCancelingResponse.encodeFields(e)
	case PaymentDirectDebitCancelingResponseCancelPaymentOK:
		s.PaymentDirectDebitCancelingResponse.encodeFields(e)
	}
}

// Decode decodes CancelPaymentOK from json.
func (s *CancelPaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CancelPaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := PaymentCardCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := PaymentCardCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := PaymentCardCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := PaymentCardCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := PaymentCardCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := PaymentCardCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := PaymentApplePayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_format":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_width":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_height":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "overpayment_flag":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_overpayment_flag":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_code":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_store_code":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "os_version":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "xdpi":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "ydpi":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_serial":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "invoice_id":
				match := PaymentKonbiniCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := PaymentPayPayCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := PaymentDirectDebitCancelingResponseCancelPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardCancelingResponseCancelPaymentOK:
		if err := s.PaymentCardCancelingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayCancelingResponseCancelPaymentOK:
		if err := s.PaymentApplePayCancelingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniCancelingResponseCancelPaymentOK:
		if err := s.PaymentKonbiniCancelingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayCancelingResponseCancelPaymentOK:
		if err := s.PaymentPayPayCancelingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitCancelingResponseCancelPaymentOK:
		if err := s.PaymentDirectDebitCancelingResponse.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CancelPaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CancelPaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelPaymentReq as json.
func (s CancelPaymentReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s CancelPaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentApplePayCancelingRequestCancelPaymentReq:
		e.FieldStart("payType")
		e.Str("ApplePay")
		{
			s := s.PaymentApplePayCancelingRequest
			{
				e.FieldStart("pay_type")
				s.PayType.Encode(e)
			}
			{
				e.FieldStart("access_id")
				s.AccessID.Encode(e)
			}
		}
	case PaymentCardCancelingRequestCancelPaymentReq:
		e.FieldStart("payType")
		e.Str("Card")
		{
			s := s.PaymentCardCancelingRequest
			{
				e.FieldStart("pay_type")
				s.PayType.Encode(e)
			}
			{
				e.FieldStart("access_id")
				s.AccessID.Encode(e)
			}
		}
	case PaymentDirectDebitCancelingRequestCancelPaymentReq:
		e.FieldStart("payType")
		e.Str("DirectDebit")
		{
			s := s.PaymentDirectDebitCancelingRequest
			{
				e.FieldStart("pay_type")
				s.PayType.Encode(e)
			}
			{
				e.FieldStart("access_id")
				s.AccessID.Encode(e)
			}
		}
	case PaymentKonbiniCancelingRequestCancelPaymentReq:
		e.FieldStart("payType")
		e.Str("Konbini")
		{
			s := s.PaymentKonbiniCancelingRequest
			{
				e.FieldStart("pay_type")
				s.PayType.Encode(e)
			}
			{
				e.FieldStart("access_id")
				s.AccessID.Encode(e)
			}
		}
	case PaymentPayPayCancelingRequestCancelPaymentReq:
		e.FieldStart("payType")
		e.Str("PayPay")
		{
			s := s.PaymentPayPayCancelingRequest
			{
				e.FieldStart("pay_type")
				s.PayType.Encode(e)
			}
			{
				e.FieldStart("access_id")
				s.AccessID.Encode(e)
			}
			{
				if s.CancelDescription.Set {
					e.FieldStart("cancel_description")
					s.CancelDescription.Encode(e)
				}
			}
		}
	}
}

// Decode decodes CancelPaymentReq from json.
func (s *CancelPaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CancelPaymentReq to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "payType":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "ApplePay":
					s.Type = PaymentApplePayCancelingRequestCancelPaymentReq
					found = true
				case "Card":
					s.Type = PaymentCardCancelingRequestCancelPaymentReq
					found = true
				case "DirectDebit":
					s.Type = PaymentDirectDebitCancelingRequestCancelPaymentReq
					found = true
				case "Konbini":
					s.Type = PaymentKonbiniCancelingRequestCancelPaymentReq
					found = true
				case "PayPay":
					s.Type = PaymentPayPayCancelingRequestCancelPaymentReq
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardCancelingRequestCancelPaymentReq:
		if err := s.PaymentCardCancelingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayCancelingRequestCancelPaymentReq:
		if err := s.PaymentApplePayCancelingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniCancelingRequestCancelPaymentReq:
		if err := s.PaymentKonbiniCancelingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayCancelingRequestCancelPaymentReq:
		if err := s.PaymentPayPayCancelingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitCancelingRequestCancelPaymentReq:
		if err := s.PaymentDirectDebitCancelingRequest.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CancelPaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CancelPaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelURL as json.
func (s CancelURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CancelURL from json.
func (s *CancelURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CancelURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CancelURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CancelURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CancelURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Capital as json.
func (s Capital) Encode(e *jx.Encoder) {
	unwrapped := float64(s)

	e.Float64(unwrapped)
}

// Decode decodes Capital from json.
func (s *Capital) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Capital to nil")
	}
	var unwrapped float64
	if err := func() error {
		v, err := d.Float64()
		unwrapped = float64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Capital(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Capital) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Capital) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CaptureDescription as json.
func (s CaptureDescription) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CaptureDescription from json.
func (s *CaptureDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CaptureDescription to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CaptureDescription(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CaptureDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CaptureDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK as json.
func (s CapturePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCapturingResponseCapturePaymentOK:
		s.PaymentCardCapturingResponse.Encode(e)
	case PaymentApplePayCapturingResponseCapturePaymentOK:
		s.PaymentApplePayCapturingResponse.Encode(e)
	case PaymentPayPayCapturingResponseCapturePaymentOK:
		s.PaymentPayPayCapturingResponse.Encode(e)
	}
}

func (s CapturePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCapturingResponseCapturePaymentOK:
		s.PaymentCardCapturingResponse.encodeFields(e)
	case PaymentApplePayCapturingResponseCapturePaymentOK:
		s.PaymentApplePayCapturingResponse.encodeFields(e)
	case PaymentPayPayCapturingResponseCapturePaymentOK:
		s.PaymentPayPayCapturingResponse.encodeFields(e)
	}
}

// Decode decodes CapturePaymentOK from json.
func (s *CapturePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := PaymentCardCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "subscription_id":
				match := PaymentCardCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := PaymentCardCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := PaymentCardCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := PaymentCardCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := PaymentCardCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := PaymentCardCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := PaymentApplePayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_date":
				match := PaymentPayPayCapturingResponseCapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardCapturingResponseCapturePaymentOK:
		if err := s.PaymentCardCapturingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayCapturingResponseCapturePaymentOK:
		if err := s.PaymentApplePayCapturingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayCapturingResponseCapturePaymentOK:
		if err := s.PaymentPayPayCapturingResponse.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq as json.
func (s CapturePaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCapturingRequestCapturePaymentReq:
		s.PaymentCardCapturingRequest.Encode(e)
	case PaymentApplePayCapturingRequestCapturePaymentReq:
		s.PaymentApplePayCapturingRequest.Encode(e)
	case PaymentPayPayCapturingRequestCapturePaymentReq:
		s.PaymentPayPayCapturingRequest.Encode(e)
	}
}

func (s CapturePaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCapturingRequestCapturePaymentReq:
		s.PaymentCardCapturingRequest.encodeFields(e)
	case PaymentApplePayCapturingRequestCapturePaymentReq:
		s.PaymentApplePayCapturingRequest.encodeFields(e)
	case PaymentPayPayCapturingRequestCapturePaymentReq:
		s.PaymentPayPayCapturingRequest.encodeFields(e)
	}
}

// Decode decodes CapturePaymentReq from json.
func (s *CapturePaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "method":
				match := PaymentCardCapturingRequestCapturePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pay_times":
				match := PaymentCardCapturingRequestCapturePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := PaymentPayPayCapturingRequestCapturePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = PaymentApplePayCapturingRequestCapturePaymentReq
	}
	switch s.Type {
	case PaymentCardCapturingRequestCapturePaymentReq:
		if err := s.PaymentCardCapturingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayCapturingRequestCapturePaymentReq:
		if err := s.PaymentApplePayCapturingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayCapturingRequestCapturePaymentReq:
		if err := s.PaymentPayPayCapturingRequest.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Card) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Card) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCard = [11]string{
	0:  "id",
	1:  "customer_id",
	2:  "default_flag",
	3:  "card_no",
	4:  "expire",
	5:  "holder_name",
	6:  "type",
	7:  "brand",
	8:  "card_no_hash",
	9:  "created",
	10: "updated",
}

// Decode decodes Card from json.
func (s *Card) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Card to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Card")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Card) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Card) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardBrand as json.
func (s CardBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardBrand from json.
func (s *CardBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardBrand(v) {
	case CardBrandVISA:
		*s = CardBrandVISA
	case CardBrandMASTER:
		*s = CardBrandMASTER
	case CardBrandJCB:
		*s = CardBrandJCB
	case CardBrandAMEX:
		*s = CardBrandAMEX
	case CardBrandDINERS:
		*s = CardBrandDINERS
	case CardBrandDISCOVER:
		*s = CardBrandDISCOVER
	case CardBrandEmpty:
		*s = CardBrandEmpty
	default:
		*s = CardBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardDefaultFlag as json.
func (s CardDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardDefaultFlag from json.
func (s *CardDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardDefaultFlag(v) {
	case CardDefaultFlag0:
		*s = CardDefaultFlag0
	case CardDefaultFlag1:
		*s = CardDefaultFlag1
	default:
		*s = CardDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CardDestination) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CardDestination) encodeFields(e *jx.Encoder) {
	{
		if s.ContractCardInfoMasterID.Set {
			e.FieldStart("contract_card_info_master_id")
			s.ContractCardInfoMasterID.Encode(e)
		}
	}
	{
		if s.ExaminationMasterID.Set {
			e.FieldStart("examination_master_id")
			s.ExaminationMasterID.Encode(e)
		}
	}
	{
		if s.Destination.Set {
			e.FieldStart("destination")
			s.Destination.Encode(e)
		}
	}
	{
		if s.DestinationType.Set {
			e.FieldStart("destination_type")
			s.DestinationType.Encode(e)
		}
	}
}

var jsonFieldsNameOfCardDestination = [4]string{
	0: "contract_card_info_master_id",
	1: "examination_master_id",
	2: "destination",
	3: "destination_type",
}

// Decode decodes CardDestination from json.
func (s *CardDestination) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardDestination to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "contract_card_info_master_id":
			if err := func() error {
				s.ContractCardInfoMasterID.Reset()
				if err := s.ContractCardInfoMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_card_info_master_id\"")
			}
		case "examination_master_id":
			if err := func() error {
				s.ExaminationMasterID.Reset()
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "destination":
			if err := func() error {
				s.Destination.Reset()
				if err := s.Destination.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"destination\"")
			}
		case "destination_type":
			if err := func() error {
				s.DestinationType.Reset()
				if err := s.DestinationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"destination_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CardDestination")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CardDestination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardDestination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CardList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CardList) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCardList = [1]string{
	0: "list",
}

// Decode decodes CardList from json.
func (s *CardList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]Card, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Card
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CardList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CardList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardNo as json.
func (s CardNo) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CardNo from json.
func (s *CardNo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardNo to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CardNo(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardNoHash as json.
func (s CardNoHash) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CardNoHash from json.
func (s *CardNoHash) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardNoHash to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CardNoHash(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardNoHash) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardNoHash) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPayMethod as json.
func (s CardPayMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardPayMethod from json.
func (s *CardPayMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardPayMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardPayMethod(v) {
	case CardPayMethod1:
		*s = CardPayMethod1
	case CardPayMethod2:
		*s = CardPayMethod2
	case CardPayMethod5:
		*s = CardPayMethod5
	default:
		*s = CardPayMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardPayMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardPayMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPayTimes as json.
func (s CardPayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardPayTimes from json.
func (s *CardPayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardPayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardPayTimes(v) {
	case CardPayTimes3:
		*s = CardPayTimes3
	case CardPayTimes5:
		*s = CardPayTimes5
	case CardPayTimes6:
		*s = CardPayTimes6
	case CardPayTimes10:
		*s = CardPayTimes10
	case CardPayTimes12:
		*s = CardPayTimes12
	case CardPayTimes15:
		*s = CardPayTimes15
	case CardPayTimes18:
		*s = CardPayTimes18
	case CardPayTimes20:
		*s = CardPayTimes20
	case CardPayTimes24:
		*s = CardPayTimes24
	default:
		*s = CardPayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPaymentJobCode as json.
func (s CardPaymentJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardPaymentJobCode from json.
func (s *CardPaymentJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardPaymentJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardPaymentJobCode(v) {
	case CardPaymentJobCodeCHECK:
		*s = CardPaymentJobCodeCHECK
	case CardPaymentJobCodeAUTH:
		*s = CardPaymentJobCodeAUTH
	case CardPaymentJobCodeCAPTURE:
		*s = CardPaymentJobCodeCAPTURE
	default:
		*s = CardPaymentJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardPaymentJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardPaymentJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPaymentSessionJobCode as json.
func (s CardPaymentSessionJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardPaymentSessionJobCode from json.
func (s *CardPaymentSessionJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardPaymentSessionJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardPaymentSessionJobCode(v) {
	case CardPaymentSessionJobCodeAUTH:
		*s = CardPaymentSessionJobCodeAUTH
	case CardPaymentSessionJobCodeCAPTURE:
		*s = CardPaymentSessionJobCodeCAPTURE
	default:
		*s = CardPaymentSessionJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardPaymentSessionJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardPaymentSessionJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CardPaymentSetting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CardPaymentSetting) encodeFields(e *jx.Encoder) {
	{
		if s.VMTdsAvailable.Set {
			e.FieldStart("vm_tds_available")
			s.VMTdsAvailable.Encode(e)
		}
	}
	{
		if s.VMTdsRequired.Set {
			e.FieldStart("vm_tds_required")
			s.VMTdsRequired.Encode(e)
		}
	}
	{
		if s.JaTdsAvailable.Set {
			e.FieldStart("ja_tds_available")
			s.JaTdsAvailable.Encode(e)
		}
	}
	{
		if s.JaTdsRequired.Set {
			e.FieldStart("ja_tds_required")
			s.JaTdsRequired.Encode(e)
		}
	}
	{
		if s.InstallPaymentAvailable.Set {
			e.FieldStart("install_payment_available")
			s.InstallPaymentAvailable.Encode(e)
		}
	}
}

var jsonFieldsNameOfCardPaymentSetting = [5]string{
	0: "vm_tds_available",
	1: "vm_tds_required",
	2: "ja_tds_available",
	3: "ja_tds_required",
	4: "install_payment_available",
}

// Decode decodes CardPaymentSetting from json.
func (s *CardPaymentSetting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardPaymentSetting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "vm_tds_available":
			if err := func() error {
				s.VMTdsAvailable.Reset()
				if err := s.VMTdsAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vm_tds_available\"")
			}
		case "vm_tds_required":
			if err := func() error {
				s.VMTdsRequired.Reset()
				if err := s.VMTdsRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vm_tds_required\"")
			}
		case "ja_tds_available":
			if err := func() error {
				s.JaTdsAvailable.Reset()
				if err := s.JaTdsAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ja_tds_available\"")
			}
		case "ja_tds_required":
			if err := func() error {
				s.JaTdsRequired.Reset()
				if err := s.JaTdsRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ja_tds_required\"")
			}
		case "install_payment_available":
			if err := func() error {
				s.InstallPaymentAvailable.Reset()
				if err := s.InstallPaymentAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"install_payment_available\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CardPaymentSetting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CardPaymentSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardPaymentSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CardRegistrationSession) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CardRegistrationSession) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LinkURL.Set {
			e.FieldStart("link_url")
			s.LinkURL.Encode(e)
		}
	}
	{
		if s.SuccessURL.Set {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL.Set {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName.Set {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.ReceiverMail.Set {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName.Set {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.CompletionMailSendFlag.Set {
			e.FieldStart("completion_mail_send_flag")
			s.CompletionMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID.Set {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerName.Set {
			e.FieldStart("customer_name")
			s.CustomerName.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCardRegistrationSession = [19]string{
	0:  "id",
	1:  "link_url",
	2:  "success_url",
	3:  "cancel_url",
	4:  "status",
	5:  "expire",
	6:  "shop_service_name",
	7:  "guide_mail_send_flag",
	8:  "receiver_mail",
	9:  "mail_customer_name",
	10: "completion_mail_send_flag",
	11: "shop_mail_template_id",
	12: "customer_id",
	13: "customer_name",
	14: "tds_type",
	15: "td_tenant_name",
	16: "tds2_type",
	17: "created",
	18: "updated",
}

// Decode decodes CardRegistrationSession from json.
func (s *CardRegistrationSession) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSession to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "link_url":
			if err := func() error {
				s.LinkURL.Reset()
				if err := s.LinkURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_url\"")
			}
		case "success_url":
			if err := func() error {
				s.SuccessURL.Reset()
				if err := s.SuccessURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL.Reset()
				if err := s.CancelURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName.Reset()
				if err := s.ShopServiceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail.Reset()
				if err := s.ReceiverMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName.Reset()
				if err := s.MailCustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "completion_mail_send_flag":
			if err := func() error {
				s.CompletionMailSendFlag.Reset()
				if err := s.CompletionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"completion_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID.Reset()
				if err := s.ShopMailTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_name":
			if err := func() error {
				s.CustomerName.Reset()
				if err := s.CustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_name\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CardRegistrationSession")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CardRegistrationSession) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSession) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCompletionMailSendFlag as json.
func (s CardRegistrationSessionCompletionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCompletionMailSendFlag from json.
func (s *CardRegistrationSessionCompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCompletionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCompletionMailSendFlag(v) {
	case CardRegistrationSessionCompletionMailSendFlag0:
		*s = CardRegistrationSessionCompletionMailSendFlag0
	case CardRegistrationSessionCompletionMailSendFlag1:
		*s = CardRegistrationSessionCompletionMailSendFlag1
	default:
		*s = CardRegistrationSessionCompletionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CardRegistrationSessionCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CardRegistrationSessionCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SuccessURL.Set {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL.Set {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName.Set {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.ReceiverMail.Set {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName.Set {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.CompletionMailSendFlag.Set {
			e.FieldStart("completion_mail_send_flag")
			s.CompletionMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID.Set {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerName.Set {
			e.FieldStart("customer_name")
			s.CustomerName.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange.Set {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate.Set {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange.Set {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount.Set {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge.Set {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay.Set {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage.Set {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd.Set {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity.Set {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay.Set {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear.Set {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData.Set {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod.Set {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch.Set {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry.Set {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState.Set {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity.Set {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1.Set {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2.Set {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode.Set {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry.Set {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState.Set {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity.Set {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1.Set {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2.Set {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3.Set {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode.Set {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd.Set {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress.Set {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc.Set {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo.Set {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc.Set {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo.Set {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc.Set {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo.Set {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe.Set {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate.Set {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd.Set {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd.Set {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry.Set {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency.Set {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount.Set {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount.Set {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr.Set {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfCardRegistrationSessionCreatingRequest = [59]string{
	0:  "success_url",
	1:  "cancel_url",
	2:  "expire",
	3:  "shop_service_name",
	4:  "receiver_mail",
	5:  "mail_customer_name",
	6:  "guide_mail_send_flag",
	7:  "completion_mail_send_flag",
	8:  "shop_mail_template_id",
	9:  "customer_id",
	10: "customer_name",
	11: "td_tenant_name",
	12: "tds_type",
	13: "tds2_type",
	14: "tds2_ch_acc_change",
	15: "tds2_ch_acc_date",
	16: "tds2_ch_acc_pw_change",
	17: "tds2_nb_purchase_account",
	18: "tds2_payment_acc_age",
	19: "tds2_provision_attempts_day",
	20: "tds2_ship_address_usage",
	21: "tds2_ship_name_ind",
	22: "tds2_suspicious_acc_activity",
	23: "tds2_txn_activity_day",
	24: "tds2_txn_activity_year",
	25: "tds2_three_ds_req_auth_data",
	26: "tds2_three_ds_req_auth_method",
	27: "tds2_addr_match",
	28: "tds2_bill_addr_country",
	29: "tds2_bill_addr_state",
	30: "tds2_bill_addr_city",
	31: "tds2_bill_addr_line_1",
	32: "tds2_bill_addr_line_2",
	33: "tds2_bill_addr_line_3",
	34: "tds2_bill_addr_post_code",
	35: "tds2_ship_addr_country",
	36: "tds2_ship_addr_state",
	37: "tds2_ship_addr_city",
	38: "tds2_ship_addr_line_1",
	39: "tds2_ship_addr_line_2",
	40: "tds2_ship_addr_line_3",
	41: "tds2_ship_addr_post_code",
	42: "tds2_ship_ind",
	43: "tds2_delivery_email_address",
	44: "tds2_home_phone_cc",
	45: "tds2_home_phone_no",
	46: "tds2_mobile_phone_cc",
	47: "tds2_mobile_phone_no",
	48: "tds2_work_phone_cc",
	49: "tds2_work_phone_no",
	50: "tds2_delivery_timeframe",
	51: "tds2_pre_order_date",
	52: "tds2_pre_order_purchase_ind",
	53: "tds2_reorder_items_ind",
	54: "tds2_recurring_expiry",
	55: "tds2_recurring_frequency",
	56: "tds2_gift_card_amount",
	57: "tds2_gift_card_count",
	58: "tds2_gift_card_curr",
}

// Decode decodes CardRegistrationSessionCreatingRequest from json.
func (s *CardRegistrationSessionCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success_url":
			if err := func() error {
				s.SuccessURL.Reset()
				if err := s.SuccessURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL.Reset()
				if err := s.CancelURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName.Reset()
				if err := s.ShopServiceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail.Reset()
				if err := s.ReceiverMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName.Reset()
				if err := s.MailCustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "completion_mail_send_flag":
			if err := func() error {
				s.CompletionMailSendFlag.Reset()
				if err := s.CompletionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"completion_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID.Reset()
				if err := s.ShopMailTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_name":
			if err := func() error {
				s.CustomerName.Reset()
				if err := s.CustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_name\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange.Reset()
				if err := s.Tds2ChAccChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate.Reset()
				if err := s.Tds2ChAccDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange.Reset()
				if err := s.Tds2ChAccPwChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount.Reset()
				if err := s.Tds2NbPurchaseAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge.Reset()
				if err := s.Tds2PaymentAccAge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay.Reset()
				if err := s.Tds2ProvisionAttemptsDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage.Reset()
				if err := s.Tds2ShipAddressUsage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd.Reset()
				if err := s.Tds2ShipNameInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity.Reset()
				if err := s.Tds2SuspiciousAccActivity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay.Reset()
				if err := s.Tds2TxnActivityDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear.Reset()
				if err := s.Tds2TxnActivityYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData.Reset()
				if err := s.Tds2ThreeDsReqAuthData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod.Reset()
				if err := s.Tds2ThreeDsReqAuthMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch.Reset()
				if err := s.Tds2AddrMatch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry.Reset()
				if err := s.Tds2BillAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState.Reset()
				if err := s.Tds2BillAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity.Reset()
				if err := s.Tds2BillAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1.Reset()
				if err := s.Tds2BillAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2.Reset()
				if err := s.Tds2BillAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode.Reset()
				if err := s.Tds2BillAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry.Reset()
				if err := s.Tds2ShipAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState.Reset()
				if err := s.Tds2ShipAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity.Reset()
				if err := s.Tds2ShipAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1.Reset()
				if err := s.Tds2ShipAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2.Reset()
				if err := s.Tds2ShipAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3.Reset()
				if err := s.Tds2ShipAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode.Reset()
				if err := s.Tds2ShipAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd.Reset()
				if err := s.Tds2ShipInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress.Reset()
				if err := s.Tds2DeliveryEmailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc.Reset()
				if err := s.Tds2HomePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo.Reset()
				if err := s.Tds2HomePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc.Reset()
				if err := s.Tds2MobilePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo.Reset()
				if err := s.Tds2MobilePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc.Reset()
				if err := s.Tds2WorkPhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo.Reset()
				if err := s.Tds2WorkPhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe.Reset()
				if err := s.Tds2DeliveryTimeframe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate.Reset()
				if err := s.Tds2PreOrderDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd.Reset()
				if err := s.Tds2PreOrderPurchaseInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd.Reset()
				if err := s.Tds2ReorderItemsInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry.Reset()
				if err := s.Tds2RecurringExpiry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency.Reset()
				if err := s.Tds2RecurringFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount.Reset()
				if err := s.Tds2GiftCardAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount.Reset()
				if err := s.Tds2GiftCardCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr.Reset()
				if err := s.Tds2GiftCardCurr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CardRegistrationSessionCreatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CardRegistrationSessionCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionGuideMailSendFlag as json.
func (s CardRegistrationSessionGuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionGuideMailSendFlag from json.
func (s *CardRegistrationSessionGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionGuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionGuideMailSendFlag(v) {
	case CardRegistrationSessionGuideMailSendFlag0:
		*s = CardRegistrationSessionGuideMailSendFlag0
	case CardRegistrationSessionGuideMailSendFlag1:
		*s = CardRegistrationSessionGuideMailSendFlag1
	default:
		*s = CardRegistrationSessionGuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionPropertiesExpire as json.
func (s CardRegistrationSessionPropertiesExpire) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CardRegistrationSessionPropertiesExpire from json.
func (s *CardRegistrationSessionPropertiesExpire) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionPropertiesExpire to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CardRegistrationSessionPropertiesExpire(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionPropertiesExpire) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionPropertiesExpire) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionStatus as json.
func (s CardRegistrationSessionStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionStatus from json.
func (s *CardRegistrationSessionStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionStatus(v) {
	case CardRegistrationSessionStatusCREATE:
		*s = CardRegistrationSessionStatusCREATE
	default:
		*s = CardRegistrationSessionStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardType as json.
func (s CardType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardType from json.
func (s *CardType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardType(v) {
	case CardType0:
		*s = CardType0
	case CardType1:
		*s = CardType1
	case CardType2:
		*s = CardType2
	case CardType3:
		*s = CardType3
	default:
		*s = CardType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK as json.
func (s ChangeAmountOfPaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardChangingAmountResponseChangeAmountOfPaymentOK:
		s.PaymentCardChangingAmountResponse.Encode(e)
	case PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK:
		s.PaymentPayPayChangingAmountResponse.Encode(e)
	case PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK:
		s.PaymentDirectDebitChangingAmountResponse.Encode(e)
	}
}

func (s ChangeAmountOfPaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardChangingAmountResponseChangeAmountOfPaymentOK:
		s.PaymentCardChangingAmountResponse.encodeFields(e)
	case PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK:
		s.PaymentPayPayChangingAmountResponse.encodeFields(e)
	case PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK:
		s.PaymentDirectDebitChangingAmountResponse.encodeFields(e)
	}
}

// Decode decodes ChangeAmountOfPaymentOK from json.
func (s *ChangeAmountOfPaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "brand":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "card_no":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "expire":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "holder_name":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "card_no_hash":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "method":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pay_times":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "forward":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "issuer":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transaction_id":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "approve":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "item_code":
				match := PaymentCardChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_date":
				match := PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardChangingAmountResponseChangeAmountOfPaymentOK:
		if err := s.PaymentCardChangingAmountResponse.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayChangingAmountResponseChangeAmountOfPaymentOK:
		if err := s.PaymentPayPayChangingAmountResponse.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitChangingAmountResponseChangeAmountOfPaymentOK:
		if err := s.PaymentDirectDebitChangingAmountResponse.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentReq as json.
func (s ChangeAmountOfPaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardChangingAmountRequestChangeAmountOfPaymentReq:
		s.PaymentCardChangingAmountRequest.Encode(e)
	case PaymentPayPayChangingAmountRequestChangeAmountOfPaymentReq:
		s.PaymentPayPayChangingAmountRequest.Encode(e)
	case PaymentDirectDebitChangingAmountRequestChangeAmountOfPaymentReq:
		s.PaymentDirectDebitChangingAmountRequest.Encode(e)
	}
}

func (s ChangeAmountOfPaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardChangingAmountRequestChangeAmountOfPaymentReq:
		s.PaymentCardChangingAmountRequest.encodeFields(e)
	case PaymentPayPayChangingAmountRequestChangeAmountOfPaymentReq:
		s.PaymentPayPayChangingAmountRequest.encodeFields(e)
	case PaymentDirectDebitChangingAmountRequestChangeAmountOfPaymentReq:
		s.PaymentDirectDebitChangingAmountRequest.encodeFields(e)
	}
}

// Decode decodes ChangeAmountOfPaymentReq from json.
func (s *ChangeAmountOfPaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "job_code":
				match := PaymentCardChangingAmountRequestChangeAmountOfPaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := PaymentPayPayChangingAmountRequestChangeAmountOfPaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = PaymentDirectDebitChangingAmountRequestChangeAmountOfPaymentReq
	}
	switch s.Type {
	case PaymentCardChangingAmountRequestChangeAmountOfPaymentReq:
		if err := s.PaymentCardChangingAmountRequest.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayChangingAmountRequestChangeAmountOfPaymentReq:
		if err := s.PaymentPayPayChangingAmountRequest.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitChangingAmountRequestChangeAmountOfPaymentReq:
		if err := s.PaymentDirectDebitChangingAmountRequest.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ClientFieldN as json.
func (s ClientFieldN) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ClientFieldN from json.
func (s *ClientFieldN) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ClientFieldN to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ClientFieldN(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ClientFieldN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ClientFieldN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CodeExpiryDate as json.
func (s CodeExpiryDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CodeExpiryDate from json.
func (s *CodeExpiryDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CodeExpiryDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CodeExpiryDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CodeExpiryDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CodeExpiryDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CodeID as json.
func (s CodeID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CodeID from json.
func (s *CodeID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CodeID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CodeID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CodeID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CodeID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressBuildingName as json.
func (s CompanyAddressBuildingName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressBuildingName from json.
func (s *CompanyAddressBuildingName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressBuildingName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressBuildingName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressBuildingName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressBuildingName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressBuildingNameKana as json.
func (s CompanyAddressBuildingNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressBuildingNameKana from json.
func (s *CompanyAddressBuildingNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressBuildingNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressBuildingNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressBuildingNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressBuildingNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressChrome as json.
func (s CompanyAddressChrome) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressChrome from json.
func (s *CompanyAddressChrome) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressChrome to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressChrome(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressChrome) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressChrome) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressChromeKana as json.
func (s CompanyAddressChromeKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressChromeKana from json.
func (s *CompanyAddressChromeKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressChromeKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressChromeKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressChromeKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressChromeKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressMunicipality as json.
func (s CompanyAddressMunicipality) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressMunicipality from json.
func (s *CompanyAddressMunicipality) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressMunicipality to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressMunicipality(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressMunicipality) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressMunicipality) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressMunicipalityKana as json.
func (s CompanyAddressMunicipalityKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressMunicipalityKana from json.
func (s *CompanyAddressMunicipalityKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressMunicipalityKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressMunicipalityKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressMunicipalityKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressMunicipalityKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressSection as json.
func (s CompanyAddressSection) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressSection from json.
func (s *CompanyAddressSection) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressSection to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressSection(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressSection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressSection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressSectionKana as json.
func (s CompanyAddressSectionKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyAddressSectionKana from json.
func (s *CompanyAddressSectionKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyAddressSectionKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyAddressSectionKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyAddressSectionKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyAddressSectionKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyPostalCode as json.
func (s CompanyPostalCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyPostalCode from json.
func (s *CompanyPostalCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyPostalCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyPostalCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyPostalCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyPostalCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyPrefecture as json.
func (s CompanyPrefecture) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyPrefecture from json.
func (s *CompanyPrefecture) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyPrefecture to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyPrefecture(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyPrefecture) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyPrefecture) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyPrefectureKana as json.
func (s CompanyPrefectureKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyPrefectureKana from json.
func (s *CompanyPrefectureKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyPrefectureKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyPrefectureKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyPrefectureKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyPrefectureKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyTel as json.
func (s CompanyTel) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CompanyTel from json.
func (s *CompanyTel) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompanyTel to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CompanyTel(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompanyTel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompanyTel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompletionMailSendFlag as json.
func (s CompletionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CompletionMailSendFlag from json.
func (s *CompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CompletionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CompletionMailSendFlag(v) {
	case CompletionMailSendFlag0:
		*s = CompletionMailSendFlag0
	case CompletionMailSendFlag1:
		*s = CompletionMailSendFlag1
	default:
		*s = CompletionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContentDescription as json.
func (s ContentDescription) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ContentDescription from json.
func (s *ContentDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContentDescription to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ContentDescription(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContentDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContentDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContentInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContentInfo) encodeFields(e *jx.Encoder) {
	{
		if s.Content1Name.Set {
			e.FieldStart("content1_name")
			s.Content1Name.Encode(e)
		}
	}
	{
		if s.Content1Description.Set {
			e.FieldStart("content1_description")
			s.Content1Description.Encode(e)
		}
	}
	{
		if s.Content1UnitPrice.Set {
			e.FieldStart("content1_unit_price")
			s.Content1UnitPrice.Encode(e)
		}
	}
	{
		if s.Content2Name.Set {
			e.FieldStart("content2_name")
			s.Content2Name.Encode(e)
		}
	}
	{
		if s.Content2Description.Set {
			e.FieldStart("content2_description")
			s.Content2Description.Encode(e)
		}
	}
	{
		if s.Content2UnitPrice.Set {
			e.FieldStart("content2_unit_price")
			s.Content2UnitPrice.Encode(e)
		}
	}
	{
		if s.Content3Name.Set {
			e.FieldStart("content3_name")
			s.Content3Name.Encode(e)
		}
	}
	{
		if s.Content3Description.Set {
			e.FieldStart("content3_description")
			s.Content3Description.Encode(e)
		}
	}
	{
		if s.Content3UnitPrice.Set {
			e.FieldStart("content3_unit_price")
			s.Content3UnitPrice.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfContentInfo = [11]string{
	0:  "content1_name",
	1:  "content1_description",
	2:  "content1_unit_price",
	3:  "content2_name",
	4:  "content2_description",
	5:  "content2_unit_price",
	6:  "content3_name",
	7:  "content3_description",
	8:  "content3_unit_price",
	9:  "id",
	10: "type",
}

// Decode decodes ContentInfo from json.
func (s *ContentInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContentInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content1_name":
			if err := func() error {
				s.Content1Name.Reset()
				if err := s.Content1Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_name\"")
			}
		case "content1_description":
			if err := func() error {
				s.Content1Description.Reset()
				if err := s.Content1Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_description\"")
			}
		case "content1_unit_price":
			if err := func() error {
				s.Content1UnitPrice.Reset()
				if err := s.Content1UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_unit_price\"")
			}
		case "content2_name":
			if err := func() error {
				s.Content2Name.Reset()
				if err := s.Content2Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_name\"")
			}
		case "content2_description":
			if err := func() error {
				s.Content2Description.Reset()
				if err := s.Content2Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_description\"")
			}
		case "content2_unit_price":
			if err := func() error {
				s.Content2UnitPrice.Reset()
				if err := s.Content2UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_unit_price\"")
			}
		case "content3_name":
			if err := func() error {
				s.Content3Name.Reset()
				if err := s.Content3Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_name\"")
			}
		case "content3_description":
			if err := func() error {
				s.Content3Description.Reset()
				if err := s.Content3Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_description\"")
			}
		case "content3_unit_price":
			if err := func() error {
				s.Content3UnitPrice.Reset()
				if err := s.Content3UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_unit_price\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContentInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContentInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContentInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContentInfoType as json.
func (s ContentInfoType) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContentInfoType from json.
func (s *ContentInfoType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContentInfoType to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContentInfoType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContentInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContentInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContentInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContentInfoV2) encodeFields(e *jx.Encoder) {
	{
		if s.Content1Name.Set {
			e.FieldStart("content1_name")
			s.Content1Name.Encode(e)
		}
	}
	{
		if s.Content1Description.Set {
			e.FieldStart("content1_description")
			s.Content1Description.Encode(e)
		}
	}
	{
		if s.Content1UnitPrice.Set {
			e.FieldStart("content1_unit_price")
			s.Content1UnitPrice.Encode(e)
		}
	}
	{
		if s.Content2Name.Set {
			e.FieldStart("content2_name")
			s.Content2Name.Encode(e)
		}
	}
	{
		if s.Content2Description.Set {
			e.FieldStart("content2_description")
			s.Content2Description.Encode(e)
		}
	}
	{
		if s.Content2UnitPrice.Set {
			e.FieldStart("content2_unit_price")
			s.Content2UnitPrice.Encode(e)
		}
	}
	{
		if s.Content3Name.Set {
			e.FieldStart("content3_name")
			s.Content3Name.Encode(e)
		}
	}
	{
		if s.Content3Description.Set {
			e.FieldStart("content3_description")
			s.Content3Description.Encode(e)
		}
	}
	{
		if s.Content3UnitPrice.Set {
			e.FieldStart("content3_unit_price")
			s.Content3UnitPrice.Encode(e)
		}
	}
}

var jsonFieldsNameOfContentInfoV2 = [9]string{
	0: "content1_name",
	1: "content1_description",
	2: "content1_unit_price",
	3: "content2_name",
	4: "content2_description",
	5: "content2_unit_price",
	6: "content3_name",
	7: "content3_description",
	8: "content3_unit_price",
}

// Decode decodes ContentInfoV2 from json.
func (s *ContentInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContentInfoV2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content1_name":
			if err := func() error {
				s.Content1Name.Reset()
				if err := s.Content1Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_name\"")
			}
		case "content1_description":
			if err := func() error {
				s.Content1Description.Reset()
				if err := s.Content1Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_description\"")
			}
		case "content1_unit_price":
			if err := func() error {
				s.Content1UnitPrice.Reset()
				if err := s.Content1UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_unit_price\"")
			}
		case "content2_name":
			if err := func() error {
				s.Content2Name.Reset()
				if err := s.Content2Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_name\"")
			}
		case "content2_description":
			if err := func() error {
				s.Content2Description.Reset()
				if err := s.Content2Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_description\"")
			}
		case "content2_unit_price":
			if err := func() error {
				s.Content2UnitPrice.Reset()
				if err := s.Content2UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_unit_price\"")
			}
		case "content3_name":
			if err := func() error {
				s.Content3Name.Reset()
				if err := s.Content3Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_name\"")
			}
		case "content3_description":
			if err := func() error {
				s.Content3Description.Reset()
				if err := s.Content3Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_description\"")
			}
		case "content3_unit_price":
			if err := func() error {
				s.Content3UnitPrice.Reset()
				if err := s.Content3UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_unit_price\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContentInfoV2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContentInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContentInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Contract) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Contract) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.ShopType.Set {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Examination != nil {
			e.FieldStart("examination")
			e.ArrStart()
			for _, elem := range s.Examination {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AvailableStatusCode.Set {
			e.FieldStart("available_status_code")
			s.AvailableStatusCode.Encode(e)
		}
	}
	{
		if s.CreateDate.Set {
			e.FieldStart("create_date")
			s.CreateDate.Encode(e)
		}
	}
	{
		if s.ContractedAt.Set {
			e.FieldStart("contracted_at")
			s.ContractedAt.Encode(e)
		}
	}
	{
		if s.StartChargingAt.Set {
			e.FieldStart("start_charging_at")
			s.StartChargingAt.Encode(e)
		}
	}
	{
		if s.ExpiredAt.Set {
			e.FieldStart("expired_at")
			s.ExpiredAt.Encode(e)
		}
	}
	{
		if s.SalesDepositStatusCode.Set {
			e.FieldStart("sales_deposit_status_code")
			s.SalesDepositStatusCode.Encode(e)
		}
	}
	{
		if s.SalesDepositStatusUpdatedDate.Set {
			e.FieldStart("sales_deposit_status_updated_date")
			s.SalesDepositStatusUpdatedDate.Encode(e)
		}
	}
	{
		if s.DeniedAt.Set {
			e.FieldStart("denied_at")
			s.DeniedAt.Encode(e)
		}
	}
	{
		if s.SuspendedBilling.Set {
			e.FieldStart("suspended_billing")
			s.SuspendedBilling.Encode(e)
		}
	}
	{
		if s.SuspendedBillingDate.Set {
			e.FieldStart("suspended_billing_date")
			s.SuspendedBillingDate.Encode(e)
		}
	}
	{
		if s.SuspendedPayment.Set {
			e.FieldStart("suspended_payment")
			s.SuspendedPayment.Encode(e)
		}
	}
	{
		if s.SuspendedPaymentDate.Set {
			e.FieldStart("suspended_payment_date")
			s.SuspendedPaymentDate.Encode(e)
		}
	}
	{
		if s.SuspendedService.Set {
			e.FieldStart("suspended_service")
			s.SuspendedService.Encode(e)
		}
	}
	{
		if s.SuspendedServiceDate.Set {
			e.FieldStart("suspended_service_date")
			s.SuspendedServiceDate.Encode(e)
		}
	}
	{
		if s.SuspededImmediateUse.Set {
			e.FieldStart("suspeded_immediate_use")
			s.SuspededImmediateUse.Encode(e)
		}
	}
	{
		if s.SuspendedImmediateUseDate.Set {
			e.FieldStart("suspended_immediate_use_date")
			s.SuspendedImmediateUseDate.Encode(e)
		}
	}
	{
		if s.StopCancelaltionMemo.Set {
			e.FieldStart("stop_cancelaltion_memo")
			s.StopCancelaltionMemo.Encode(e)
		}
	}
	{
		if s.ObligationsNotice.Set {
			e.FieldStart("obligations_notice")
			s.ObligationsNotice.Encode(e)
		}
	}
	{
		if s.UserShopName.Set {
			e.FieldStart("user_shop_name")
			s.UserShopName.Encode(e)
		}
	}
	{
		if s.RegisterMail.Set {
			e.FieldStart("register_mail")
			s.RegisterMail.Encode(e)
		}
	}
	{
		if s.PlatformReprentativeShop.Set {
			e.FieldStart("platform_reprentative_shop")
			s.PlatformReprentativeShop.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.ContractDetail.Set {
			e.FieldStart("contract_detail")
			s.ContractDetail.Encode(e)
		}
	}
	{
		if s.ContractBankAccount.Set {
			e.FieldStart("contract_bank_account")
			s.ContractBankAccount.Encode(e)
		}
	}
	{
		if s.ContractVirtualBank.Set {
			e.FieldStart("contract_virtual_bank")
			s.ContractVirtualBank.Encode(e)
		}
	}
	{
		if s.ContractCardDestination != nil {
			e.FieldStart("contract_card_destination")
			e.ArrStart()
			for _, elem := range s.ContractCardDestination {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CreditCardSetting.Set {
			e.FieldStart("credit_card_setting")
			s.CreditCardSetting.Encode(e)
		}
	}
	{
		if s.OfficialRegisteredCorporateInfo.Set {
			e.FieldStart("official_registered_corporate_info")
			s.OfficialRegisteredCorporateInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfContract = [33]string{
	0:  "shop_id",
	1:  "platform_id",
	2:  "shop_type",
	3:  "status_code",
	4:  "examination",
	5:  "available_status_code",
	6:  "create_date",
	7:  "contracted_at",
	8:  "start_charging_at",
	9:  "expired_at",
	10: "sales_deposit_status_code",
	11: "sales_deposit_status_updated_date",
	12: "denied_at",
	13: "suspended_billing",
	14: "suspended_billing_date",
	15: "suspended_payment",
	16: "suspended_payment_date",
	17: "suspended_service",
	18: "suspended_service_date",
	19: "suspeded_immediate_use",
	20: "suspended_immediate_use_date",
	21: "stop_cancelaltion_memo",
	22: "obligations_notice",
	23: "user_shop_name",
	24: "register_mail",
	25: "platform_reprentative_shop",
	26: "shared_customer_flag",
	27: "contract_detail",
	28: "contract_bank_account",
	29: "contract_virtual_bank",
	30: "contract_card_destination",
	31: "credit_card_setting",
	32: "official_registered_corporate_info",
}

// Decode decodes Contract from json.
func (s *Contract) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Contract to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType.Reset()
				if err := s.ShopType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "examination":
			if err := func() error {
				s.Examination = make([]Examination, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Examination
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Examination = append(s.Examination, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination\"")
			}
		case "available_status_code":
			if err := func() error {
				s.AvailableStatusCode.Reset()
				if err := s.AvailableStatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"available_status_code\"")
			}
		case "create_date":
			if err := func() error {
				s.CreateDate.Reset()
				if err := s.CreateDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_date\"")
			}
		case "contracted_at":
			if err := func() error {
				s.ContractedAt.Reset()
				if err := s.ContractedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contracted_at\"")
			}
		case "start_charging_at":
			if err := func() error {
				s.StartChargingAt.Reset()
				if err := s.StartChargingAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_charging_at\"")
			}
		case "expired_at":
			if err := func() error {
				s.ExpiredAt.Reset()
				if err := s.ExpiredAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expired_at\"")
			}
		case "sales_deposit_status_code":
			if err := func() error {
				s.SalesDepositStatusCode.Reset()
				if err := s.SalesDepositStatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sales_deposit_status_code\"")
			}
		case "sales_deposit_status_updated_date":
			if err := func() error {
				s.SalesDepositStatusUpdatedDate.Reset()
				if err := s.SalesDepositStatusUpdatedDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sales_deposit_status_updated_date\"")
			}
		case "denied_at":
			if err := func() error {
				s.DeniedAt.Reset()
				if err := s.DeniedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"denied_at\"")
			}
		case "suspended_billing":
			if err := func() error {
				s.SuspendedBilling.Reset()
				if err := s.SuspendedBilling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_billing\"")
			}
		case "suspended_billing_date":
			if err := func() error {
				s.SuspendedBillingDate.Reset()
				if err := s.SuspendedBillingDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_billing_date\"")
			}
		case "suspended_payment":
			if err := func() error {
				s.SuspendedPayment.Reset()
				if err := s.SuspendedPayment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_payment\"")
			}
		case "suspended_payment_date":
			if err := func() error {
				s.SuspendedPaymentDate.Reset()
				if err := s.SuspendedPaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_payment_date\"")
			}
		case "suspended_service":
			if err := func() error {
				s.SuspendedService.Reset()
				if err := s.SuspendedService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_service\"")
			}
		case "suspended_service_date":
			if err := func() error {
				s.SuspendedServiceDate.Reset()
				if err := s.SuspendedServiceDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_service_date\"")
			}
		case "suspeded_immediate_use":
			if err := func() error {
				s.SuspededImmediateUse.Reset()
				if err := s.SuspededImmediateUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspeded_immediate_use\"")
			}
		case "suspended_immediate_use_date":
			if err := func() error {
				s.SuspendedImmediateUseDate.Reset()
				if err := s.SuspendedImmediateUseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_immediate_use_date\"")
			}
		case "stop_cancelaltion_memo":
			if err := func() error {
				s.StopCancelaltionMemo.Reset()
				if err := s.StopCancelaltionMemo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_cancelaltion_memo\"")
			}
		case "obligations_notice":
			if err := func() error {
				s.ObligationsNotice.Reset()
				if err := s.ObligationsNotice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"obligations_notice\"")
			}
		case "user_shop_name":
			if err := func() error {
				s.UserShopName.Reset()
				if err := s.UserShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_shop_name\"")
			}
		case "register_mail":
			if err := func() error {
				s.RegisterMail.Reset()
				if err := s.RegisterMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"register_mail\"")
			}
		case "platform_reprentative_shop":
			if err := func() error {
				s.PlatformReprentativeShop.Reset()
				if err := s.PlatformReprentativeShop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_reprentative_shop\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "contract_detail":
			if err := func() error {
				s.ContractDetail.Reset()
				if err := s.ContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_detail\"")
			}
		case "contract_bank_account":
			if err := func() error {
				s.ContractBankAccount.Reset()
				if err := s.ContractBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_bank_account\"")
			}
		case "contract_virtual_bank":
			if err := func() error {
				s.ContractVirtualBank.Reset()
				if err := s.ContractVirtualBank.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_virtual_bank\"")
			}
		case "contract_card_destination":
			if err := func() error {
				s.ContractCardDestination = make([]CardDestination, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem CardDestination
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ContractCardDestination = append(s.ContractCardDestination, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_card_destination\"")
			}
		case "credit_card_setting":
			if err := func() error {
				s.CreditCardSetting.Reset()
				if err := s.CreditCardSetting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_card_setting\"")
			}
		case "official_registered_corporate_info":
			if err := func() error {
				s.OfficialRegisteredCorporateInfo.Reset()
				if err := s.OfficialRegisteredCorporateInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"official_registered_corporate_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Contract")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Contract) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Contract) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractAvailableStatusCode as json.
func (s ContractAvailableStatusCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ContractAvailableStatusCode from json.
func (s *ContractAvailableStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractAvailableStatusCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ContractAvailableStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractAvailableStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractAvailableStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractBankAccountInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractBankAccountInfo) encodeFields(e *jx.Encoder) {
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractBankAccountInfo = [9]string{
	0: "bank_name",
	1: "bank_name_kana",
	2: "bank_code",
	3: "branch_code",
	4: "branch_name",
	5: "branch_name_kana",
	6: "account_kind",
	7: "account_number",
	8: "account_name",
}

// Decode decodes ContractBankAccountInfo from json.
func (s *ContractBankAccountInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractBankAccountInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractBankAccountInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractBankAccountInfoAccountKind as json.
func (s ContractBankAccountInfoAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContractBankAccountInfoAccountKind from json.
func (s *ContractBankAccountInfoAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractBankAccountInfoAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContractBankAccountInfoAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractBankAccountInfoAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractBankAccountInfoAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractContractDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractContractDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.CorporateNumber.Set {
			e.FieldStart("corporate_number")
			s.CorporateNumber.Encode(e)
		}
	}
	{
		if s.CorporateName.Set {
			e.FieldStart("corporate_name")
			s.CorporateName.Encode(e)
		}
	}
	{
		if s.CorporateNameKana.Set {
			e.FieldStart("corporate_name_kana")
			s.CorporateNameKana.Encode(e)
		}
	}
	{
		if s.Hp.Set {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		if s.Capital.Set {
			e.FieldStart("capital")
			s.Capital.Encode(e)
		}
	}
	{
		if s.EstablishedAt.Set {
			e.FieldStart("established_at")
			s.EstablishedAt.Encode(e)
		}
	}
	{
		if s.YearlySales.Set {
			e.FieldStart("yearly_sales")
			s.YearlySales.Encode(e)
		}
	}
	{
		if s.BusinessDetails.Set {
			e.FieldStart("business_details")
			s.BusinessDetails.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode.Set {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture.Set {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana.Set {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipality.Set {
			e.FieldStart("company_address_municipality")
			s.CompanyAddressMunicipality.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipalityKana.Set {
			e.FieldStart("company_address_municipality_kana")
			s.CompanyAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressSection.Set {
			e.FieldStart("company_address_section")
			s.CompanyAddressSection.Encode(e)
		}
	}
	{
		if s.CompanyAddressSectionKana.Set {
			e.FieldStart("company_address_section_kana")
			s.CompanyAddressSectionKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressChrome.Set {
			e.FieldStart("company_address_chrome")
			s.CompanyAddressChrome.Encode(e)
		}
	}
	{
		if s.CompanyAddressChromeKana.Set {
			e.FieldStart("company_address_chrome_kana")
			s.CompanyAddressChromeKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingName.Set {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana.Set {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		if s.CompanyTel.Set {
			e.FieldStart("company_tel")
			s.CompanyTel.Encode(e)
		}
	}
	{
		if s.RepresentativeLastName.Set {
			e.FieldStart("representative_last_name")
			s.RepresentativeLastName.Encode(e)
		}
	}
	{
		if s.RepresentativeLastNameKana.Set {
			e.FieldStart("representative_last_name_kana")
			s.RepresentativeLastNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstName.Set {
			e.FieldStart("representative_first_name")
			s.RepresentativeFirstName.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstNameKana.Set {
			e.FieldStart("representative_first_name_kana")
			s.RepresentativeFirstNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeBirthday.Set {
			e.FieldStart("representative_birthday")
			s.RepresentativeBirthday.Encode(e)
		}
	}
	{
		if s.RepresentativeGender.Set {
			e.FieldStart("representative_gender")
			s.RepresentativeGender.Encode(e)
		}
	}
	{
		if s.RepresentativePostalCode.Set {
			e.FieldStart("representative_postal_code")
			s.RepresentativePostalCode.Encode(e)
		}
	}
	{
		if s.RepresentativePrefecture.Set {
			e.FieldStart("representative_prefecture")
			s.RepresentativePrefecture.Encode(e)
		}
	}
	{
		if s.RepresentativePrefectureKana.Set {
			e.FieldStart("representative_prefecture_kana")
			s.RepresentativePrefectureKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipality.Set {
			e.FieldStart("representative_address_municipality")
			s.RepresentativeAddressMunicipality.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipalityKana.Set {
			e.FieldStart("representative_address_municipality_kana")
			s.RepresentativeAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSection.Set {
			e.FieldStart("representative_address_section")
			s.RepresentativeAddressSection.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSectionKana.Set {
			e.FieldStart("representative_address_section_kana")
			s.RepresentativeAddressSectionKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChrome.Set {
			e.FieldStart("representative_address_chrome")
			s.RepresentativeAddressChrome.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChromeKana.Set {
			e.FieldStart("representative_address_chrome_kana")
			s.RepresentativeAddressChromeKana.Encode(e)
		}
	}
	{
		if s.RepresentativeTel.Set {
			e.FieldStart("representative_tel")
			s.RepresentativeTel.Encode(e)
		}
	}
	{
		if s.Staff1LastName.Set {
			e.FieldStart("staff1_last_name")
			s.Staff1LastName.Encode(e)
		}
	}
	{
		if s.Staff1LastNameKana.Set {
			e.FieldStart("staff1_last_name_kana")
			s.Staff1LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff1FirstName.Set {
			e.FieldStart("staff1_first_name")
			s.Staff1FirstName.Encode(e)
		}
	}
	{
		if s.Staff1FirstNameKana.Set {
			e.FieldStart("staff1_first_name_kana")
			s.Staff1FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff1Tel.Set {
			e.FieldStart("staff1_tel")
			s.Staff1Tel.Encode(e)
		}
	}
	{
		if s.Staff1Mail.Set {
			e.FieldStart("staff1_mail")
			s.Staff1Mail.Encode(e)
		}
	}
	{
		if s.Staff2LastName.Set {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana.Set {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName.Set {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana.Set {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2Tel.Set {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail.Set {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		if s.UsedOnApp.Set {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
	{
		if s.UsedOnWeb.Set {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnOther.Set {
			e.FieldStart("used_on_other")
			s.UsedOnOther.Encode(e)
		}
	}
	{
		if s.SiteExisting.Set {
			e.FieldStart("site_existing")
			s.SiteExisting.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.SiteCredential.Set {
			e.FieldStart("site_credential")
			s.SiteCredential.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopNameEn.Set {
			e.FieldStart("shop_name_en")
			s.ShopNameEn.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SupportTel.Set {
			e.FieldStart("support_tel")
			s.SupportTel.Encode(e)
		}
	}
	{
		if s.SupportMail.Set {
			e.FieldStart("support_mail")
			s.SupportMail.Encode(e)
		}
	}
	{
		if s.ProvidesProduct.Set {
			e.FieldStart("provides_product")
			s.ProvidesProduct.Encode(e)
		}
	}
	{
		if s.ProvidesService.Set {
			e.FieldStart("provides_service")
			s.ProvidesService.Encode(e)
		}
	}
	{
		if s.ProvidesDigitalContent.Set {
			e.FieldStart("provides_digital_content")
			s.ProvidesDigitalContent.Encode(e)
		}
	}
	{
		if s.Prepaid.Set {
			e.FieldStart("prepaid")
			s.Prepaid.Encode(e)
		}
	}
	{
		if s.UnitPrice.Set {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		if s.ContentCategoryMasterID.Set {
			e.FieldStart("content_category_master_id")
			s.ContentCategoryMasterID.Encode(e)
		}
	}
	{
		if s.ContentDescription.Set {
			e.FieldStart("content_description")
			s.ContentDescription.Encode(e)
		}
	}
	{
		if s.ExpiretionDateOfPoint.Set {
			e.FieldStart("expiretion_date_of_point")
			s.ExpiretionDateOfPoint.Encode(e)
		}
	}
	{
		if s.UsageOfPoint.Set {
			e.FieldStart("usage_of_point")
			s.UsageOfPoint.Encode(e)
		}
	}
	{
		if s.LostTrial.Set {
			e.FieldStart("lost_trial")
			s.LostTrial.Encode(e)
		}
	}
	{
		if s.DealsInsecureContent.Set {
			e.FieldStart("deals_insecure_content")
			s.DealsInsecureContent.Encode(e)
		}
	}
	{
		if s.DealsLongApplyContent.Set {
			e.FieldStart("deals_long_apply_content")
			s.DealsLongApplyContent.Encode(e)
		}
	}
	{
		if s.PayBy.Set {
			e.FieldStart("pay_by")
			s.PayBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractContractDetail = [74]string{
	0:  "corporate",
	1:  "corporate_number",
	2:  "corporate_name",
	3:  "corporate_name_kana",
	4:  "hp",
	5:  "capital",
	6:  "established_at",
	7:  "yearly_sales",
	8:  "business_details",
	9:  "company_postal_code",
	10: "company_prefecture",
	11: "company_prefecture_kana",
	12: "company_address_municipality",
	13: "company_address_municipality_kana",
	14: "company_address_section",
	15: "company_address_section_kana",
	16: "company_address_chrome",
	17: "company_address_chrome_kana",
	18: "company_address_building_name",
	19: "company_address_building_name_kana",
	20: "company_tel",
	21: "representative_last_name",
	22: "representative_last_name_kana",
	23: "representative_first_name",
	24: "representative_first_name_kana",
	25: "representative_birthday",
	26: "representative_gender",
	27: "representative_postal_code",
	28: "representative_prefecture",
	29: "representative_prefecture_kana",
	30: "representative_address_municipality",
	31: "representative_address_municipality_kana",
	32: "representative_address_section",
	33: "representative_address_section_kana",
	34: "representative_address_chrome",
	35: "representative_address_chrome_kana",
	36: "representative_tel",
	37: "staff1_last_name",
	38: "staff1_last_name_kana",
	39: "staff1_first_name",
	40: "staff1_first_name_kana",
	41: "staff1_tel",
	42: "staff1_mail",
	43: "staff2_last_name",
	44: "staff2_last_name_kana",
	45: "staff2_first_name",
	46: "staff2_first_name_kana",
	47: "staff2_tel",
	48: "staff2_mail",
	49: "used_on_app",
	50: "used_on_web",
	51: "used_on_other",
	52: "site_existing",
	53: "url",
	54: "site_credential",
	55: "shop_name",
	56: "shop_name_kana",
	57: "shop_name_en",
	58: "platform_name",
	59: "support_tel",
	60: "support_mail",
	61: "provides_product",
	62: "provides_service",
	63: "provides_digital_content",
	64: "prepaid",
	65: "unit_price",
	66: "content_category_master_id",
	67: "content_description",
	68: "expiretion_date_of_point",
	69: "usage_of_point",
	70: "lost_trial",
	71: "deals_insecure_content",
	72: "deals_long_apply_content",
	73: "pay_by",
}

// Decode decodes ContractContractDetail from json.
func (s *ContractContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractContractDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_number":
			if err := func() error {
				s.CorporateNumber.Reset()
				if err := s.CorporateNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			if err := func() error {
				s.CorporateName.Reset()
				if err := s.CorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			if err := func() error {
				s.CorporateNameKana.Reset()
				if err := s.CorporateNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp.Reset()
				if err := s.Hp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			if err := func() error {
				s.Capital.Reset()
				if err := s.Capital.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			if err := func() error {
				s.EstablishedAt.Reset()
				if err := s.EstablishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			if err := func() error {
				s.YearlySales.Reset()
				if err := s.YearlySales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			if err := func() error {
				s.BusinessDetails.Reset()
				if err := s.BusinessDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode.Reset()
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture.Reset()
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana.Reset()
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			if err := func() error {
				s.CompanyAddressMunicipality.Reset()
				if err := s.CompanyAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			if err := func() error {
				s.CompanyAddressMunicipalityKana.Reset()
				if err := s.CompanyAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			if err := func() error {
				s.CompanyAddressSection.Reset()
				if err := s.CompanyAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			if err := func() error {
				s.CompanyAddressSectionKana.Reset()
				if err := s.CompanyAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			if err := func() error {
				s.CompanyAddressChrome.Reset()
				if err := s.CompanyAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			if err := func() error {
				s.CompanyAddressChromeKana.Reset()
				if err := s.CompanyAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName.Reset()
				if err := s.CompanyAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana.Reset()
				if err := s.CompanyAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			if err := func() error {
				s.CompanyTel.Reset()
				if err := s.CompanyTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		case "representative_last_name":
			if err := func() error {
				s.RepresentativeLastName.Reset()
				if err := s.RepresentativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			if err := func() error {
				s.RepresentativeLastNameKana.Reset()
				if err := s.RepresentativeLastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			if err := func() error {
				s.RepresentativeFirstName.Reset()
				if err := s.RepresentativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			if err := func() error {
				s.RepresentativeFirstNameKana.Reset()
				if err := s.RepresentativeFirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_birthday":
			if err := func() error {
				s.RepresentativeBirthday.Reset()
				if err := s.RepresentativeBirthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			if err := func() error {
				s.RepresentativeGender.Reset()
				if err := s.RepresentativeGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "representative_postal_code":
			if err := func() error {
				s.RepresentativePostalCode.Reset()
				if err := s.RepresentativePostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			if err := func() error {
				s.RepresentativePrefecture.Reset()
				if err := s.RepresentativePrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			if err := func() error {
				s.RepresentativePrefectureKana.Reset()
				if err := s.RepresentativePrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			if err := func() error {
				s.RepresentativeAddressMunicipality.Reset()
				if err := s.RepresentativeAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			if err := func() error {
				s.RepresentativeAddressMunicipalityKana.Reset()
				if err := s.RepresentativeAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			if err := func() error {
				s.RepresentativeAddressSection.Reset()
				if err := s.RepresentativeAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			if err := func() error {
				s.RepresentativeAddressSectionKana.Reset()
				if err := s.RepresentativeAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			if err := func() error {
				s.RepresentativeAddressChrome.Reset()
				if err := s.RepresentativeAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			if err := func() error {
				s.RepresentativeAddressChromeKana.Reset()
				if err := s.RepresentativeAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_tel":
			if err := func() error {
				s.RepresentativeTel.Reset()
				if err := s.RepresentativeTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "staff1_last_name":
			if err := func() error {
				s.Staff1LastName.Reset()
				if err := s.Staff1LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			if err := func() error {
				s.Staff1LastNameKana.Reset()
				if err := s.Staff1LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			if err := func() error {
				s.Staff1FirstName.Reset()
				if err := s.Staff1FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			if err := func() error {
				s.Staff1FirstNameKana.Reset()
				if err := s.Staff1FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_tel":
			if err := func() error {
				s.Staff1Tel.Reset()
				if err := s.Staff1Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			if err := func() error {
				s.Staff1Mail.Reset()
				if err := s.Staff1Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName.Reset()
				if err := s.Staff2LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana.Reset()
				if err := s.Staff2LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName.Reset()
				if err := s.Staff2FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana.Reset()
				if err := s.Staff2FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel.Reset()
				if err := s.Staff2Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail.Reset()
				if err := s.Staff2Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp.Reset()
				if err := s.UsedOnApp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb.Reset()
				if err := s.UsedOnWeb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_other":
			if err := func() error {
				s.UsedOnOther.Reset()
				if err := s.UsedOnOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_other\"")
			}
		case "site_existing":
			if err := func() error {
				s.SiteExisting.Reset()
				if err := s.SiteExisting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_existing\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "site_credential":
			if err := func() error {
				s.SiteCredential.Reset()
				if err := s.SiteCredential.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_credential\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			if err := func() error {
				s.ShopNameEn.Reset()
				if err := s.ShopNameEn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "support_tel":
			if err := func() error {
				s.SupportTel.Reset()
				if err := s.SupportTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "support_mail":
			if err := func() error {
				s.SupportMail.Reset()
				if err := s.SupportMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "provides_product":
			if err := func() error {
				s.ProvidesProduct.Reset()
				if err := s.ProvidesProduct.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_product\"")
			}
		case "provides_service":
			if err := func() error {
				s.ProvidesService.Reset()
				if err := s.ProvidesService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_service\"")
			}
		case "provides_digital_content":
			if err := func() error {
				s.ProvidesDigitalContent.Reset()
				if err := s.ProvidesDigitalContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_digital_content\"")
			}
		case "prepaid":
			if err := func() error {
				s.Prepaid.Reset()
				if err := s.Prepaid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice.Reset()
				if err := s.UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "content_category_master_id":
			if err := func() error {
				s.ContentCategoryMasterID.Reset()
				if err := s.ContentCategoryMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_category_master_id\"")
			}
		case "content_description":
			if err := func() error {
				s.ContentDescription.Reset()
				if err := s.ContentDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "expiretion_date_of_point":
			if err := func() error {
				s.ExpiretionDateOfPoint.Reset()
				if err := s.ExpiretionDateOfPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiretion_date_of_point\"")
			}
		case "usage_of_point":
			if err := func() error {
				s.UsageOfPoint.Reset()
				if err := s.UsageOfPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_of_point\"")
			}
		case "lost_trial":
			if err := func() error {
				s.LostTrial.Reset()
				if err := s.LostTrial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "deals_insecure_content":
			if err := func() error {
				s.DealsInsecureContent.Reset()
				if err := s.DealsInsecureContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "deals_long_apply_content":
			if err := func() error {
				s.DealsLongApplyContent.Reset()
				if err := s.DealsLongApplyContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "pay_by":
			if err := func() error {
				s.PayBy.Reset()
				if err := s.PayBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractContractDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractContractDetailSiteExisting as json.
func (s ContractContractDetailSiteExisting) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContractContractDetailSiteExisting from json.
func (s *ContractContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractContractDetailSiteExisting to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContractContractDetailSiteExisting(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractInfoV2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("representative_last_name")
		s.RepresentativeLastName.Encode(e)
	}
	{
		e.FieldStart("representative_last_name_kana")
		s.RepresentativeLastNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_first_name")
		s.RepresentativeFirstName.Encode(e)
	}
	{
		e.FieldStart("representative_first_name_kana")
		s.RepresentativeFirstNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_postal_code")
		s.RepresentativePostalCode.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture")
		s.RepresentativePrefecture.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture_kana")
		s.RepresentativePrefectureKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality")
		s.RepresentativeAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality_kana")
		s.RepresentativeAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_section")
		s.RepresentativeAddressSection.Encode(e)
	}
	{
		e.FieldStart("representative_address_section_kana")
		s.RepresentativeAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome")
		s.RepresentativeAddressChrome.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome_kana")
		s.RepresentativeAddressChromeKana.Encode(e)
	}
	{
		if s.RepresentativeAddressBuildingName.Set {
			e.FieldStart("representative_address_building_name")
			s.RepresentativeAddressBuildingName.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressBuildingNameKana.Set {
			e.FieldStart("representative_address_building_name_kana")
			s.RepresentativeAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("representative_tel")
		s.RepresentativeTel.Encode(e)
	}
	{
		e.FieldStart("representative_birthday")
		s.RepresentativeBirthday.Encode(e)
	}
	{
		e.FieldStart("representative_gender")
		s.RepresentativeGender.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name")
		s.Staff1LastName.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name_kana")
		s.Staff1LastNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name")
		s.Staff1FirstName.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name_kana")
		s.Staff1FirstNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_company_name")
		s.Staff1CompanyName.Encode(e)
	}
	{
		e.FieldStart("staff1_belongs")
		s.Staff1Belongs.Encode(e)
	}
	{
		e.FieldStart("staff1_tel")
		s.Staff1Tel.Encode(e)
	}
	{
		e.FieldStart("staff1_mail")
		s.Staff1Mail.Encode(e)
	}
	{
		if s.Staff2LastName.Set {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana.Set {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName.Set {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana.Set {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2CompanyName.Set {
			e.FieldStart("staff2_company_name")
			s.Staff2CompanyName.Encode(e)
		}
	}
	{
		if s.Staff2Belongs.Set {
			e.FieldStart("staff2_belongs")
			s.Staff2Belongs.Encode(e)
		}
	}
	{
		if s.Staff2Tel.Set {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail.Set {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		e.FieldStart("corporate")
		s.Corporate.Encode(e)
	}
	{
		if s.CorporateInfo.Set {
			e.FieldStart("corporate_info")
			s.CorporateInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractInfoV2 = [36]string{
	0:  "representative_last_name",
	1:  "representative_last_name_kana",
	2:  "representative_first_name",
	3:  "representative_first_name_kana",
	4:  "representative_postal_code",
	5:  "representative_prefecture",
	6:  "representative_prefecture_kana",
	7:  "representative_address_municipality",
	8:  "representative_address_municipality_kana",
	9:  "representative_address_section",
	10: "representative_address_section_kana",
	11: "representative_address_chrome",
	12: "representative_address_chrome_kana",
	13: "representative_address_building_name",
	14: "representative_address_building_name_kana",
	15: "representative_tel",
	16: "representative_birthday",
	17: "representative_gender",
	18: "staff1_last_name",
	19: "staff1_last_name_kana",
	20: "staff1_first_name",
	21: "staff1_first_name_kana",
	22: "staff1_company_name",
	23: "staff1_belongs",
	24: "staff1_tel",
	25: "staff1_mail",
	26: "staff2_last_name",
	27: "staff2_last_name_kana",
	28: "staff2_first_name",
	29: "staff2_first_name_kana",
	30: "staff2_company_name",
	31: "staff2_belongs",
	32: "staff2_tel",
	33: "staff2_mail",
	34: "corporate",
	35: "corporate_info",
}

// Decode decodes ContractInfoV2 from json.
func (s *ContractInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractInfoV2 to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "representative_last_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeLastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeFirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_postal_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativePostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.RepresentativePrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.RepresentativePrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativeAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_address_building_name":
			if err := func() error {
				s.RepresentativeAddressBuildingName.Reset()
				if err := s.RepresentativeAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name\"")
			}
		case "representative_address_building_name_kana":
			if err := func() error {
				s.RepresentativeAddressBuildingNameKana.Reset()
				if err := s.RepresentativeAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name_kana\"")
			}
		case "representative_tel":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "representative_birthday":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeBirthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "staff1_last_name":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				if err := s.Staff1LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.Staff1LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				if err := s.Staff1FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				if err := s.Staff1FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_company_name":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				if err := s.Staff1CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_company_name\"")
			}
		case "staff1_belongs":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				if err := s.Staff1Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_belongs\"")
			}
		case "staff1_tel":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				if err := s.Staff1Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				if err := s.Staff1Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName.Reset()
				if err := s.Staff2LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana.Reset()
				if err := s.Staff2LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName.Reset()
				if err := s.Staff2FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana.Reset()
				if err := s.Staff2FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_company_name":
			if err := func() error {
				s.Staff2CompanyName.Reset()
				if err := s.Staff2CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_company_name\"")
			}
		case "staff2_belongs":
			if err := func() error {
				s.Staff2Belongs.Reset()
				if err := s.Staff2Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_belongs\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel.Reset()
				if err := s.Staff2Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail.Reset()
				if err := s.Staff2Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "corporate":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_info":
			if err := func() error {
				s.CorporateInfo.Reset()
				if err := s.CorporateInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractInfoV2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b11111111,
		0b10011111,
		0b11111111,
		0b00000011,
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfContractInfoV2) {
					name = jsonFieldsNameOfContractInfoV2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractInfoV2RepresentativeGender as json.
func (s ContractInfoV2RepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ContractInfoV2RepresentativeGender from json.
func (s *ContractInfoV2RepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractInfoV2RepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ContractInfoV2RepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractInfoV2RepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractInfoV2RepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractInputStatus as json.
func (s ContractInputStatus) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContractInputStatus from json.
func (s *ContractInputStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractInputStatus to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContractInputStatus(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractSalesDepositStatusCode as json.
func (s ContractSalesDepositStatusCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ContractSalesDepositStatusCode from json.
func (s *ContractSalesDepositStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractSalesDepositStatusCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ContractSalesDepositStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractSalesDepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractSalesDepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractStatus as json.
func (s ContractStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ContractStatus from json.
func (s *ContractStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ContractStatus(v) {
	case ContractStatus101:
		*s = ContractStatus101
	case ContractStatus102:
		*s = ContractStatus102
	case ContractStatus103:
		*s = ContractStatus103
	case ContractStatus105:
		*s = ContractStatus105
	case ContractStatus106:
		*s = ContractStatus106
	case ContractStatus107:
		*s = ContractStatus107
	default:
		*s = ContractStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CorporateInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CorporateInfoV2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("corporate_number")
		s.CorporateNumber.Encode(e)
	}
	{
		e.FieldStart("corporate_name")
		e.Str(s.CorporateName)
	}
	{
		e.FieldStart("corporate_name_kana")
		e.Str(s.CorporateNameKana)
	}
	{
		if s.Hp.Set {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		e.FieldStart("capital")
		s.Capital.Encode(e)
	}
	{
		e.FieldStart("established_at")
		s.EstablishedAt.Encode(e)
	}
	{
		e.FieldStart("yearly_sales")
		s.YearlySales.Encode(e)
	}
	{
		e.FieldStart("business_details")
		s.BusinessDetails.Encode(e)
	}
	{
		e.FieldStart("company_postal_code")
		s.CompanyPostalCode.Encode(e)
	}
	{
		e.FieldStart("company_prefecture")
		s.CompanyPrefecture.Encode(e)
	}
	{
		e.FieldStart("company_prefecture_kana")
		s.CompanyPrefectureKana.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality")
		s.CompanyAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality_kana")
		s.CompanyAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("company_address_section")
		s.CompanyAddressSection.Encode(e)
	}
	{
		e.FieldStart("company_address_section_kana")
		s.CompanyAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome")
		s.CompanyAddressChrome.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome_kana")
		s.CompanyAddressChromeKana.Encode(e)
	}
	{
		if s.CompanyAddressBuildingName.Set {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana.Set {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("company_tel")
		s.CompanyTel.Encode(e)
	}
}

var jsonFieldsNameOfCorporateInfoV2 = [20]string{
	0:  "corporate_number",
	1:  "corporate_name",
	2:  "corporate_name_kana",
	3:  "hp",
	4:  "capital",
	5:  "established_at",
	6:  "yearly_sales",
	7:  "business_details",
	8:  "company_postal_code",
	9:  "company_prefecture",
	10: "company_prefecture_kana",
	11: "company_address_municipality",
	12: "company_address_municipality_kana",
	13: "company_address_section",
	14: "company_address_section_kana",
	15: "company_address_chrome",
	16: "company_address_chrome_kana",
	17: "company_address_building_name",
	18: "company_address_building_name_kana",
	19: "company_tel",
}

// Decode decodes CorporateInfoV2 from json.
func (s *CorporateInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CorporateInfoV2 to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate_number":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.CorporateNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.CorporateName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.CorporateNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp.Reset()
				if err := s.Hp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.Capital.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.EstablishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.YearlySales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.BusinessDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.CompanyAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.CompanyAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				if err := s.CompanyAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.CompanyAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.CompanyAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.CompanyAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName.Reset()
				if err := s.CompanyAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana.Reset()
				if err := s.CompanyAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.CompanyTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CorporateInfoV2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11110111,
		0b11111111,
		0b00001001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCorporateInfoV2) {
					name = jsonFieldsNameOfCorporateInfoV2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CorporateInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CorporateInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CorporateName as json.
func (s CorporateName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CorporateName from json.
func (s *CorporateName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CorporateName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CorporateName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CorporateName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CorporateName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CorporateNameKana as json.
func (s CorporateNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CorporateNameKana from json.
func (s *CorporateNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CorporateNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CorporateNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CorporateNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CorporateNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CorporateNumber as json.
func (s CorporateNumber) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CorporateNumber from json.
func (s *CorporateNumber) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CorporateNumber to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CorporateNumber(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CorporateNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CorporateNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Count as json.
func (s Count) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes Count from json.
func (s *Count) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Count to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Count(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Count) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Count) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK as json.
func (s CreatePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCreatingResponseCreatePaymentOK:
		s.PaymentCardCreatingResponse.Encode(e)
	case PaymentApplePayCreatingResponseCreatePaymentOK:
		s.PaymentApplePayCreatingResponse.Encode(e)
	case PaymentKonbiniCreatingResponseCreatePaymentOK:
		s.PaymentKonbiniCreatingResponse.Encode(e)
	case PaymentPayPayCreatingResponseCreatePaymentOK:
		s.PaymentPayPayCreatingResponse.Encode(e)
	case PaymentDirectDebitCreatingResponseCreatePaymentOK:
		s.PaymentDirectDebitCreatingResponse.Encode(e)
	}
}

func (s CreatePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCreatingResponseCreatePaymentOK:
		s.PaymentCardCreatingResponse.encodeFields(e)
	case PaymentApplePayCreatingResponseCreatePaymentOK:
		s.PaymentApplePayCreatingResponse.encodeFields(e)
	case PaymentKonbiniCreatingResponseCreatePaymentOK:
		s.PaymentKonbiniCreatingResponse.encodeFields(e)
	case PaymentPayPayCreatingResponseCreatePaymentOK:
		s.PaymentPayPayCreatingResponse.encodeFields(e)
	case PaymentDirectDebitCreatingResponseCreatePaymentOK:
		s.PaymentDirectDebitCreatingResponse.encodeFields(e)
	}
}

// Decode decodes CreatePaymentOK from json.
func (s *CreatePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := PaymentCardCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := PaymentCardCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := PaymentCardCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := PaymentCardCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := PaymentCardCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := PaymentCardCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := PaymentApplePayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_format":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_width":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_height":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "overpayment_flag":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_overpayment_flag":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_code":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_store_code":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "os_version":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "xdpi":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "ydpi":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_serial":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "invoice_id":
				match := PaymentKonbiniCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := PaymentPayPayCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := PaymentDirectDebitCreatingResponseCreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardCreatingResponseCreatePaymentOK:
		if err := s.PaymentCardCreatingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayCreatingResponseCreatePaymentOK:
		if err := s.PaymentApplePayCreatingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniCreatingResponseCreatePaymentOK:
		if err := s.PaymentKonbiniCreatingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayCreatingResponseCreatePaymentOK:
		if err := s.PaymentPayPayCreatingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitCreatingResponseCreatePaymentOK:
		if err := s.PaymentDirectDebitCreatingResponse.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq as json.
func (s CreatePaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCreatingRequestCreatePaymentReq:
		s.PaymentCardCreatingRequest.Encode(e)
	case PaymentApplePayCreatingRequestCreatePaymentReq:
		s.PaymentApplePayCreatingRequest.Encode(e)
	case PaymentKonbiniCreatingRequestCreatePaymentReq:
		s.PaymentKonbiniCreatingRequest.Encode(e)
	case PaymentPayPayCreatingRequestCreatePaymentReq:
		s.PaymentPayPayCreatingRequest.Encode(e)
	case PaymentDirectDebitCreatingRequestCreatePaymentReq:
		s.PaymentDirectDebitCreatingRequest.Encode(e)
	}
}

func (s CreatePaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardCreatingRequestCreatePaymentReq:
		s.PaymentCardCreatingRequest.encodeFields(e)
	case PaymentApplePayCreatingRequestCreatePaymentReq:
		s.PaymentApplePayCreatingRequest.encodeFields(e)
	case PaymentKonbiniCreatingRequestCreatePaymentReq:
		s.PaymentKonbiniCreatingRequest.encodeFields(e)
	case PaymentPayPayCreatingRequestCreatePaymentReq:
		s.PaymentPayPayCreatingRequest.encodeFields(e)
	case PaymentDirectDebitCreatingRequestCreatePaymentReq:
		s.PaymentDirectDebitCreatingRequest.encodeFields(e)
	}
}

// Decode decodes CreatePaymentReq from json.
func (s *CreatePaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "tds_type":
				match := PaymentCardCreatingRequestCreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := PaymentCardCreatingRequestCreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "td_tenant_name":
				match := PaymentCardCreatingRequestCreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "item_code":
				match := PaymentApplePayCreatingRequestCreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := PaymentPayPayCreatingRequestCreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := PaymentDirectDebitCreatingRequestCreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = PaymentKonbiniCreatingRequestCreatePaymentReq
	}
	switch s.Type {
	case PaymentCardCreatingRequestCreatePaymentReq:
		if err := s.PaymentCardCreatingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayCreatingRequestCreatePaymentReq:
		if err := s.PaymentApplePayCreatingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniCreatingRequestCreatePaymentReq:
		if err := s.PaymentKonbiniCreatingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayCreatingRequestCreatePaymentReq:
		if err := s.PaymentPayPayCreatingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitCreatingRequestCreatePaymentReq:
		if err := s.PaymentDirectDebitCreatingRequest.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Created as json.
func (s Created) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Created from json.
func (s *Created) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Created to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Created(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Created) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Created) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Credential as json.
func (s Credential) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Credential from json.
func (s *Credential) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Credential to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Credential(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Credential) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Credential) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CurrencyCode as json.
func (s CurrencyCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CurrencyCode from json.
func (s *CurrencyCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CurrencyCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CurrencyCode(v) {
	case CurrencyCodeJPY:
		*s = CurrencyCodeJPY
	default:
		*s = CurrencyCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CurrencyCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CurrencyCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Customer) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Customer) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
	{
		if s.CardRegistration.Set {
			e.FieldStart("card_registration")
			s.CardRegistration.Encode(e)
		}
	}
	{
		if s.DirectdebitRegistration.Set {
			e.FieldStart("directdebit_registration")
			s.DirectdebitRegistration.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomer = [16]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_country",
	6:  "addr_state",
	7:  "addr_city",
	8:  "addr_line_1",
	9:  "addr_line_2",
	10: "addr_line_3",
	11: "addr_post_code",
	12: "card_registration",
	13: "directdebit_registration",
	14: "created",
	15: "updated",
}

// Decode decodes Customer from json.
func (s *Customer) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Customer to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		case "card_registration":
			if err := func() error {
				s.CardRegistration.Reset()
				if err := s.CardRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_registration\"")
			}
		case "directdebit_registration":
			if err := func() error {
				s.DirectdebitRegistration.Reset()
				if err := s.DirectdebitRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit_registration\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Customer")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Customer) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Customer) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("token")
		s.Token.Encode(e)
	}
	{
		e.FieldStart("default_flag")
		s.DefaultFlag.Encode(e)
	}
}

var jsonFieldsNameOfCustomerCardCreatingRequest = [2]string{
	0: "token",
	1: "default_flag",
}

// Decode decodes CustomerCardCreatingRequest from json.
func (s *CustomerCardCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "default_flag":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerCardCreatingRequest) {
					name = jsonFieldsNameOfCustomerCardCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCardDeletingResponse = [3]string{
	0: "id",
	1: "customer_id",
	2: "delete_flag",
}

// Decode decodes CustomerCardDeletingResponse from json.
func (s *CustomerCardDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRegistration as json.
func (s CustomerCardRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardRegistration from json.
func (s *CustomerCardRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardRegistration(v) {
	case CustomerCardRegistration0:
		*s = CustomerCardRegistration0
	case CustomerCardRegistration1:
		*s = CustomerCardRegistration1
	default:
		*s = CustomerCardRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCardUpdatingRequest = [4]string{
	0: "token",
	1: "default_flag",
	2: "holder_name",
	3: "expire",
}

// Decode decodes CustomerCardUpdatingRequest from json.
func (s *CustomerCardUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCreatingRequest = [12]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_country",
	6:  "addr_state",
	7:  "addr_city",
	8:  "addr_line_1",
	9:  "addr_line_2",
	10: "addr_line_3",
	11: "addr_post_code",
}

// Decode decodes CustomerCreatingRequest from json.
func (s *CustomerCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCreatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCreatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes CustomerDeletingResponse from json.
func (s *CustomerDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerDirectdebitRegistration as json.
func (s CustomerDirectdebitRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerDirectdebitRegistration from json.
func (s *CustomerDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerDirectdebitRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerDirectdebitRegistration(v) {
	case CustomerDirectdebitRegistration0:
		*s = CustomerDirectdebitRegistration0
	case CustomerDirectdebitRegistration1:
		*s = CustomerDirectdebitRegistration1
	default:
		*s = CustomerDirectdebitRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerGroupID as json.
func (s CustomerGroupID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CustomerGroupID from json.
func (s *CustomerGroupID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerGroupID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CustomerGroupID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerGroupID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerGroupID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCustomerListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes CustomerListRetrievingResponse from json.
func (s *CustomerListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]Customer, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Customer
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerName as json.
func (s CustomerName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes CustomerName from json.
func (s *CustomerName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = CustomerName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("default_flag")
		s.DefaultFlag.Encode(e)
	}
	{
		if s.ReturnURL.Set {
			e.FieldStart("return_url")
			s.ReturnURL.Encode(e)
		}
	}
	{
		if s.ReturnURLOnFailure.Set {
			e.FieldStart("return_url_on_failure")
			s.ReturnURLOnFailure.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Directdebit.Set {
			e.FieldStart("directdebit")
			s.Directdebit.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingRequest = [9]string{
	0: "pay_type",
	1: "default_flag",
	2: "return_url",
	3: "return_url_on_failure",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
	7: "card",
	8: "directdebit",
}

// Decode decodes CustomerPaymentMethodCreatingRequest from json.
func (s *CustomerPaymentMethodCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "default_flag":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "return_url":
			if err := func() error {
				s.ReturnURL.Reset()
				if err := s.ReturnURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url\"")
			}
		case "return_url_on_failure":
			if err := func() error {
				s.ReturnURLOnFailure.Reset()
				if err := s.ReturnURLOnFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url_on_failure\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "directdebit":
			if err := func() error {
				s.Directdebit.Reset()
				if err := s.Directdebit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000011,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerPaymentMethodCreatingRequest) {
					name = jsonFieldsNameOfCustomerPaymentMethodCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingRequestCard) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("token")
		s.Token.Encode(e)
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange.Set {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate.Set {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange.Set {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount.Set {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge.Set {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay.Set {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage.Set {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd.Set {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity.Set {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay.Set {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear.Set {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData.Set {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod.Set {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch.Set {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry.Set {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState.Set {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity.Set {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1.Set {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2.Set {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode.Set {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry.Set {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState.Set {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity.Set {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1.Set {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2.Set {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3.Set {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode.Set {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd.Set {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress.Set {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc.Set {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo.Set {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc.Set {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo.Set {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc.Set {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo.Set {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe.Set {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate.Set {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd.Set {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd.Set {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry.Set {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency.Set {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount.Set {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount.Set {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr.Set {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingRequestCard = [49]string{
	0:  "token",
	1:  "tds_type",
	2:  "tds2_type",
	3:  "td_tenant_name",
	4:  "tds2_ch_acc_change",
	5:  "tds2_ch_acc_date",
	6:  "tds2_ch_acc_pw_change",
	7:  "tds2_nb_purchase_account",
	8:  "tds2_payment_acc_age",
	9:  "tds2_provision_attempts_day",
	10: "tds2_ship_address_usage",
	11: "tds2_ship_name_ind",
	12: "tds2_suspicious_acc_activity",
	13: "tds2_txn_activity_day",
	14: "tds2_txn_activity_year",
	15: "tds2_three_ds_req_auth_data",
	16: "tds2_three_ds_req_auth_method",
	17: "tds2_addr_match",
	18: "tds2_bill_addr_country",
	19: "tds2_bill_addr_state",
	20: "tds2_bill_addr_city",
	21: "tds2_bill_addr_line_1",
	22: "tds2_bill_addr_line_2",
	23: "tds2_bill_addr_line_3",
	24: "tds2_bill_addr_post_code",
	25: "tds2_ship_addr_country",
	26: "tds2_ship_addr_state",
	27: "tds2_ship_addr_city",
	28: "tds2_ship_addr_line_1",
	29: "tds2_ship_addr_line_2",
	30: "tds2_ship_addr_line_3",
	31: "tds2_ship_addr_post_code",
	32: "tds2_ship_ind",
	33: "tds2_delivery_email_address",
	34: "tds2_home_phone_cc",
	35: "tds2_home_phone_no",
	36: "tds2_mobile_phone_cc",
	37: "tds2_mobile_phone_no",
	38: "tds2_work_phone_cc",
	39: "tds2_work_phone_no",
	40: "tds2_delivery_timeframe",
	41: "tds2_pre_order_date",
	42: "tds2_pre_order_purchase_ind",
	43: "tds2_reorder_items_ind",
	44: "tds2_recurring_expiry",
	45: "tds2_recurring_frequency",
	46: "tds2_gift_card_amount",
	47: "tds2_gift_card_count",
	48: "tds2_gift_card_curr",
}

// Decode decodes CustomerPaymentMethodCreatingRequestCard from json.
func (s *CustomerPaymentMethodCreatingRequestCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCard to nil")
	}
	var requiredBitSet [7]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange.Reset()
				if err := s.Tds2ChAccChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate.Reset()
				if err := s.Tds2ChAccDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange.Reset()
				if err := s.Tds2ChAccPwChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount.Reset()
				if err := s.Tds2NbPurchaseAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge.Reset()
				if err := s.Tds2PaymentAccAge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay.Reset()
				if err := s.Tds2ProvisionAttemptsDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage.Reset()
				if err := s.Tds2ShipAddressUsage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd.Reset()
				if err := s.Tds2ShipNameInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity.Reset()
				if err := s.Tds2SuspiciousAccActivity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay.Reset()
				if err := s.Tds2TxnActivityDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear.Reset()
				if err := s.Tds2TxnActivityYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData.Reset()
				if err := s.Tds2ThreeDsReqAuthData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod.Reset()
				if err := s.Tds2ThreeDsReqAuthMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch.Reset()
				if err := s.Tds2AddrMatch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry.Reset()
				if err := s.Tds2BillAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState.Reset()
				if err := s.Tds2BillAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity.Reset()
				if err := s.Tds2BillAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1.Reset()
				if err := s.Tds2BillAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2.Reset()
				if err := s.Tds2BillAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode.Reset()
				if err := s.Tds2BillAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry.Reset()
				if err := s.Tds2ShipAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState.Reset()
				if err := s.Tds2ShipAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity.Reset()
				if err := s.Tds2ShipAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1.Reset()
				if err := s.Tds2ShipAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2.Reset()
				if err := s.Tds2ShipAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3.Reset()
				if err := s.Tds2ShipAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode.Reset()
				if err := s.Tds2ShipAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd.Reset()
				if err := s.Tds2ShipInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress.Reset()
				if err := s.Tds2DeliveryEmailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc.Reset()
				if err := s.Tds2HomePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo.Reset()
				if err := s.Tds2HomePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc.Reset()
				if err := s.Tds2MobilePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo.Reset()
				if err := s.Tds2MobilePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc.Reset()
				if err := s.Tds2WorkPhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo.Reset()
				if err := s.Tds2WorkPhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe.Reset()
				if err := s.Tds2DeliveryTimeframe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate.Reset()
				if err := s.Tds2PreOrderDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd.Reset()
				if err := s.Tds2PreOrderPurchaseInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd.Reset()
				if err := s.Tds2ReorderItemsInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry.Reset()
				if err := s.Tds2RecurringExpiry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency.Reset()
				if err := s.Tds2RecurringFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount.Reset()
				if err := s.Tds2GiftCardAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount.Reset()
				if err := s.Tds2GiftCardCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr.Reset()
				if err := s.Tds2GiftCardCurr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingRequestCard")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [7]uint8{
		0b00000001,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerPaymentMethodCreatingRequestCard) {
					name = jsonFieldsNameOfCustomerPaymentMethodCreatingRequestCard[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("application_type")
		s.ApplicationType.Encode(e)
	}
	{
		e.FieldStart("bank_code")
		s.BankCode.Encode(e)
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.AccountType.Set {
			e.FieldStart("account_type")
			s.AccountType.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
	{
		e.FieldStart("account_name_kana")
		s.AccountNameKana.Encode(e)
	}
	{
		if s.PaperApplication.Set {
			e.FieldStart("paper_application")
			s.PaperApplication.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingRequestDirectdebit = [8]string{
	0: "application_type",
	1: "bank_code",
	2: "branch_code",
	3: "account_type",
	4: "account_number",
	5: "account_name",
	6: "account_name_kana",
	7: "paper_application",
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebit from json.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestDirectdebit to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.ApplicationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "bank_code":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "account_type":
			if err := func() error {
				s.AccountType.Reset()
				if err := s.AccountType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_type\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		case "account_name_kana":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.AccountNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name_kana\"")
			}
		case "paper_application":
			if err := func() error {
				s.PaperApplication.Reset()
				if err := s.PaperApplication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_application\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingRequestDirectdebit")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerPaymentMethodCreatingRequestDirectdebit) {
					name = jsonFieldsNameOfCustomerPaymentMethodCreatingRequestDirectdebit[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes CustomerPaymentMethodDeletingResponse from json.
func (s *CustomerPaymentMethodDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerUpdatingRequest = [11]string{
	0:  "name",
	1:  "email",
	2:  "phone_cc",
	3:  "phone_no",
	4:  "addr_country",
	5:  "addr_state",
	6:  "addr_city",
	7:  "addr_line_1",
	8:  "addr_line_2",
	9:  "addr_line_3",
	10: "addr_post_code",
}

// Decode decodes CustomerUpdatingRequest from json.
func (s *CustomerUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Data as json.
func (s Data) Encode(e *jx.Encoder) {
	unwrapped := jx.Raw(s)

	if len(unwrapped) != 0 {
		e.Raw(unwrapped)
	}
}

// Decode decodes Data from json.
func (s *Data) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Data to nil")
	}
	var unwrapped jx.Raw
	if err := func() error {
		v, err := d.RawAppend(nil)
		unwrapped = jx.Raw(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Data(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Data) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Data) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DealsInsecureContent as json.
func (s DealsInsecureContent) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes DealsInsecureContent from json.
func (s *DealsInsecureContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DealsInsecureContent to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DealsInsecureContent(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DealsInsecureContent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DealsInsecureContent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DealsLongApplyContent as json.
func (s DealsLongApplyContent) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes DealsLongApplyContent from json.
func (s *DealsLongApplyContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DealsLongApplyContent to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DealsLongApplyContent(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DealsLongApplyContent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DealsLongApplyContent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DefaultFlag as json.
func (s DefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DefaultFlag from json.
func (s *DefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DefaultFlag(v) {
	case DefaultFlag0:
		*s = DefaultFlag0
	case DefaultFlag1:
		*s = DefaultFlag1
	default:
		*s = DefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DeleteFlag as json.
func (s DeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DeleteFlag from json.
func (s *DeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DeleteFlag(v) {
	case DeleteFlag1:
		*s = DeleteFlag1
	case DeleteFlag0:
		*s = DeleteFlag0
	default:
		*s = DeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositAmount as json.
func (s DepositAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes DepositAmount from json.
func (s *DepositAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DepositAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DepositAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DepositCycleInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DepositCycleInfoV2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("deposit_cycle_master_id")
		s.DepositCycleMasterID.Encode(e)
	}
}

var jsonFieldsNameOfDepositCycleInfoV2 = [1]string{
	0: "deposit_cycle_master_id",
}

// Decode decodes DepositCycleInfoV2 from json.
func (s *DepositCycleInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositCycleInfoV2 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deposit_cycle_master_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DepositCycleInfoV2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfDepositCycleInfoV2) {
					name = jsonFieldsNameOfDepositCycleInfoV2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DepositCycleInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositCycleInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositCycleMasterId as json.
func (s DepositCycleMasterId) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes DepositCycleMasterId from json.
func (s *DepositCycleMasterId) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositCycleMasterId to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = DepositCycleMasterId(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DepositCycleMasterId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositCycleMasterId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositDate as json.
func (s DepositDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes DepositDate from json.
func (s *DepositDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DepositDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositStatusCode as json.
func (s DepositStatusCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes DepositStatusCode from json.
func (s *DepositStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositStatusCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = DepositStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DepositTargetBankAccountInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DepositTargetBankAccountInfo) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.RecipientCorporateName.Set {
			e.FieldStart("recipient_corporate_name")
			s.RecipientCorporateName.Encode(e)
		}
	}
	{
		if s.RecipientRepresntativeLastName.Set {
			e.FieldStart("recipient_represntative_last_name")
			s.RecipientRepresntativeLastName.Encode(e)
		}
	}
	{
		if s.RecipientRepresntativeFirstName.Set {
			e.FieldStart("recipient_represntative_first_name")
			s.RecipientRepresntativeFirstName.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfDepositTargetBankAccountInfo = [13]string{
	0:  "corporate",
	1:  "recipient_corporate_name",
	2:  "recipient_represntative_last_name",
	3:  "recipient_represntative_first_name",
	4:  "bank_code",
	5:  "bank_name",
	6:  "bank_name_kana",
	7:  "branch_code",
	8:  "branch_name",
	9:  "branch_name_kana",
	10: "account_kind",
	11: "account_number",
	12: "account_name",
}

// Decode decodes DepositTargetBankAccountInfo from json.
func (s *DepositTargetBankAccountInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositTargetBankAccountInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "recipient_corporate_name":
			if err := func() error {
				s.RecipientCorporateName.Reset()
				if err := s.RecipientCorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_corporate_name\"")
			}
		case "recipient_represntative_last_name":
			if err := func() error {
				s.RecipientRepresntativeLastName.Reset()
				if err := s.RecipientRepresntativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_represntative_last_name\"")
			}
		case "recipient_represntative_first_name":
			if err := func() error {
				s.RecipientRepresntativeFirstName.Reset()
				if err := s.RecipientRepresntativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_represntative_first_name\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DepositTargetBankAccountInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DepositTargetBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositTargetBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositTargetBankAccountInfoAccountKind as json.
func (s DepositTargetBankAccountInfoAccountKind) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DepositTargetBankAccountInfoAccountKind from json.
func (s *DepositTargetBankAccountInfoAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositTargetBankAccountInfoAccountKind to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DepositTargetBankAccountInfoAccountKind(v) {
	case DepositTargetBankAccountInfoAccountKind0:
		*s = DepositTargetBankAccountInfoAccountKind0
	case DepositTargetBankAccountInfoAccountKind1:
		*s = DepositTargetBankAccountInfoAccountKind1
	default:
		*s = DepositTargetBankAccountInfoAccountKind(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DepositTargetBankAccountInfoAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositTargetBankAccountInfoAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Description as json.
func (s Description) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Description from json.
func (s *Description) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Description to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Description(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Description) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Description) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DeviceName as json.
func (s DeviceName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes DeviceName from json.
func (s *DeviceName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DeviceName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DeviceName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DeviceName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DeviceName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DigitalContent as json.
func (s DigitalContent) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes DigitalContent from json.
func (s *DigitalContent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DigitalContent to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = DigitalContent(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DigitalContent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DigitalContent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitApplicationType as json.
func (s DirectDebitApplicationType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DirectDebitApplicationType from json.
func (s *DirectDebitApplicationType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DirectDebitApplicationType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DirectDebitApplicationType(v) {
	case DirectDebitApplicationTypePAPER:
		*s = DirectDebitApplicationTypePAPER
	case DirectDebitApplicationTypeONLINE:
		*s = DirectDebitApplicationTypeONLINE
	default:
		*s = DirectDebitApplicationType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DirectDebitApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DirectDebitApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitLastResultCode as json.
func (s DirectDebitLastResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DirectDebitLastResultCode from json.
func (s *DirectDebitLastResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DirectDebitLastResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DirectDebitLastResultCode(v) {
	case DirectDebitLastResultCode0:
		*s = DirectDebitLastResultCode0
	case DirectDebitLastResultCode1:
		*s = DirectDebitLastResultCode1
	case DirectDebitLastResultCode2:
		*s = DirectDebitLastResultCode2
	case DirectDebitLastResultCode3:
		*s = DirectDebitLastResultCode3
	case DirectDebitLastResultCode4:
		*s = DirectDebitLastResultCode4
	case DirectDebitLastResultCode8:
		*s = DirectDebitLastResultCode8
	case DirectDebitLastResultCode9:
		*s = DirectDebitLastResultCode9
	case DirectDebitLastResultCodeE:
		*s = DirectDebitLastResultCodeE
	case DirectDebitLastResultCodeN:
		*s = DirectDebitLastResultCodeN
	default:
		*s = DirectDebitLastResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DirectDebitLastResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DirectDebitLastResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitResultCode as json.
func (s DirectDebitResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DirectDebitResultCode from json.
func (s *DirectDebitResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DirectDebitResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DirectDebitResultCode(v) {
	case DirectDebitResultCode0:
		*s = DirectDebitResultCode0
	case DirectDebitResultCode1:
		*s = DirectDebitResultCode1
	case DirectDebitResultCode2:
		*s = DirectDebitResultCode2
	case DirectDebitResultCode3:
		*s = DirectDebitResultCode3
	case DirectDebitResultCode4:
		*s = DirectDebitResultCode4
	case DirectDebitResultCode8:
		*s = DirectDebitResultCode8
	case DirectDebitResultCode9:
		*s = DirectDebitResultCode9
	case DirectDebitResultCodeE:
		*s = DirectDebitResultCodeE
	case DirectDebitResultCodeN:
		*s = DirectDebitResultCodeN
	default:
		*s = DirectDebitResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DirectDebitResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DirectDebitResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Email as json.
func (s Email) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Email from json.
func (s *Email) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Email to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Email(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Email) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Email) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EndMonthFlag as json.
func (s EndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EndMonthFlag from json.
func (s *EndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EndMonthFlag(v) {
	case EndMonthFlag0:
		*s = EndMonthFlag0
	case EndMonthFlag1:
		*s = EndMonthFlag1
	default:
		*s = EndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ErrorCode as json.
func (s ErrorCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ErrorCode from json.
func (s *ErrorCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ErrorCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ErrorCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ErrorCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ErrorCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EstablishedAt as json.
func (s EstablishedAt) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes EstablishedAt from json.
func (s *EstablishedAt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EstablishedAt to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = EstablishedAt(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EstablishedAt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EstablishedAt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Examination) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Examination) encodeFields(e *jx.Encoder) {
	{
		if s.ExaminationMasterID.Set {
			e.FieldStart("examination_master_id")
			s.ExaminationMasterID.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.MemberCode.Set {
			e.FieldStart("member_code")
			s.MemberCode.Encode(e)
		}
	}
	{
		if s.TdsAvailable.Set {
			e.FieldStart("tds_available")
			s.TdsAvailable.Encode(e)
		}
	}
	{
		if s.InstallmentsPaymentAvailable.Set {
			e.FieldStart("installments_payment_available")
			s.InstallmentsPaymentAvailable.Encode(e)
		}
	}
	{
		if s.Mcc1.Set {
			e.FieldStart("mcc_1")
			s.Mcc1.Encode(e)
		}
	}
	{
		if s.Mcc2.Set {
			e.FieldStart("mcc_2")
			s.Mcc2.Encode(e)
		}
	}
	{
		if s.PaypayMid.Set {
			e.FieldStart("paypay_mid")
			s.PaypayMid.Encode(e)
		}
	}
	{
		if s.PaypayStoreID.Set {
			e.FieldStart("paypay_store_id")
			s.PaypayStoreID.Encode(e)
		}
	}
	{
		if s.PaysleMerchantCode.Set {
			e.FieldStart("paysle_merchant_code")
			s.PaysleMerchantCode.Encode(e)
		}
	}
	{
		if s.PaysleUserID.Set {
			e.FieldStart("paysle_user_id")
			s.PaysleUserID.Encode(e)
		}
	}
	{
		if s.PaysleUserPassword.Set {
			e.FieldStart("paysle_user_password")
			s.PaysleUserPassword.Encode(e)
		}
	}
	{
		if s.CutOverAt.Set {
			e.FieldStart("cut_over_at")
			s.CutOverAt.Encode(e)
		}
	}
}

var jsonFieldsNameOfExamination = [13]string{
	0:  "examination_master_id",
	1:  "status_code",
	2:  "member_code",
	3:  "tds_available",
	4:  "installments_payment_available",
	5:  "mcc_1",
	6:  "mcc_2",
	7:  "paypay_mid",
	8:  "paypay_store_id",
	9:  "paysle_merchant_code",
	10: "paysle_user_id",
	11: "paysle_user_password",
	12: "cut_over_at",
}

// Decode decodes Examination from json.
func (s *Examination) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Examination to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_master_id":
			if err := func() error {
				s.ExaminationMasterID.Reset()
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "member_code":
			if err := func() error {
				s.MemberCode.Reset()
				if err := s.MemberCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_code\"")
			}
		case "tds_available":
			if err := func() error {
				s.TdsAvailable.Reset()
				if err := s.TdsAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_available\"")
			}
		case "installments_payment_available":
			if err := func() error {
				s.InstallmentsPaymentAvailable.Reset()
				if err := s.InstallmentsPaymentAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"installments_payment_available\"")
			}
		case "mcc_1":
			if err := func() error {
				s.Mcc1.Reset()
				if err := s.Mcc1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mcc_1\"")
			}
		case "mcc_2":
			if err := func() error {
				s.Mcc2.Reset()
				if err := s.Mcc2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mcc_2\"")
			}
		case "paypay_mid":
			if err := func() error {
				s.PaypayMid.Reset()
				if err := s.PaypayMid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_mid\"")
			}
		case "paypay_store_id":
			if err := func() error {
				s.PaypayStoreID.Reset()
				if err := s.PaypayStoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_store_id\"")
			}
		case "paysle_merchant_code":
			if err := func() error {
				s.PaysleMerchantCode.Reset()
				if err := s.PaysleMerchantCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paysle_merchant_code\"")
			}
		case "paysle_user_id":
			if err := func() error {
				s.PaysleUserID.Reset()
				if err := s.PaysleUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paysle_user_id\"")
			}
		case "paysle_user_password":
			if err := func() error {
				s.PaysleUserPassword.Reset()
				if err := s.PaysleUserPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paysle_user_password\"")
			}
		case "cut_over_at":
			if err := func() error {
				s.CutOverAt.Reset()
				if err := s.CutOverAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cut_over_at\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Examination")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Examination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Examination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationFileType as json.
func (s ExaminationFileType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationFileType from json.
func (s *ExaminationFileType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationFileType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationFileType(v) {
	case ExaminationFileTypeDRIVERLICENSEFRONT:
		*s = ExaminationFileTypeDRIVERLICENSEFRONT
	case ExaminationFileTypeDRIVERLICENSEBACK:
		*s = ExaminationFileTypeDRIVERLICENSEBACK
	case ExaminationFileTypeSEALREGISTRATIONFRONT:
		*s = ExaminationFileTypeSEALREGISTRATIONFRONT
	case ExaminationFileTypeRESIDENTCARDFRONT:
		*s = ExaminationFileTypeRESIDENTCARDFRONT
	case ExaminationFileTypeRESIDENTCARDBACK:
		*s = ExaminationFileTypeRESIDENTCARDBACK
	case ExaminationFileTypeSPECIALPERMANENTRESIDENTFRONT:
		*s = ExaminationFileTypeSPECIALPERMANENTRESIDENTFRONT
	case ExaminationFileTypeSPECIALPERMANENTRESIDENTBACK:
		*s = ExaminationFileTypeSPECIALPERMANENTRESIDENTBACK
	case ExaminationFileTypeCERTIFICATEOFRESIDENCEFRONT:
		*s = ExaminationFileTypeCERTIFICATEOFRESIDENCEFRONT
	case ExaminationFileTypeMYNUMBERCARDFRONT:
		*s = ExaminationFileTypeMYNUMBERCARDFRONT
	case ExaminationFileTypePRODUCTIMAGE1:
		*s = ExaminationFileTypePRODUCTIMAGE1
	case ExaminationFileTypePRODUCTIMAGE2:
		*s = ExaminationFileTypePRODUCTIMAGE2
	case ExaminationFileTypePRODUCTIMAGE3:
		*s = ExaminationFileTypePRODUCTIMAGE3
	case ExaminationFileTypeAPPIMAGETOP:
		*s = ExaminationFileTypeAPPIMAGETOP
	case ExaminationFileTypeAPPIMAGEICON:
		*s = ExaminationFileTypeAPPIMAGEICON
	case ExaminationFileTypeSALESLICENSE1:
		*s = ExaminationFileTypeSALESLICENSE1
	case ExaminationFileTypeSALESLICENSE2:
		*s = ExaminationFileTypeSALESLICENSE2
	case ExaminationFileTypeSALESLICENSE3:
		*s = ExaminationFileTypeSALESLICENSE3
	case ExaminationFileTypeCOPYOFCORPORATEREGISTRATION:
		*s = ExaminationFileTypeCOPYOFCORPORATEREGISTRATION
	default:
		*s = ExaminationFileType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationFileType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationFileType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationFileUpload) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationFileUpload) encodeFields(e *jx.Encoder) {
	{
		if s.ExaminationFiles != nil {
			e.FieldStart("examination_files")
			e.ArrStart()
			for _, elem := range s.ExaminationFiles {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfExaminationFileUpload = [1]string{
	0: "examination_files",
}

// Decode decodes ExaminationFileUpload from json.
func (s *ExaminationFileUpload) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationFileUpload to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_files":
			if err := func() error {
				s.ExaminationFiles = make([]ExaminationFileUploadExaminationFilesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ExaminationFileUploadExaminationFilesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExaminationFiles = append(s.ExaminationFiles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_files\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationFileUpload")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationFileUpload) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationFileUpload) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationFileUploadExaminationFilesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationFileUploadExaminationFilesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Filename.Set {
			e.FieldStart("filename")
			s.Filename.Encode(e)
		}
	}
	{
		if s.Filesize.Set {
			e.FieldStart("filesize")
			s.Filesize.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationFileUploadExaminationFilesItem = [4]string{
	0: "shop_id",
	1: "type",
	2: "filename",
	3: "filesize",
}

// Decode decodes ExaminationFileUploadExaminationFilesItem from json.
func (s *ExaminationFileUploadExaminationFilesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationFileUploadExaminationFilesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "filename":
			if err := func() error {
				s.Filename.Reset()
				if err := s.Filename.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filename\"")
			}
		case "filesize":
			if err := func() error {
				s.Filesize.Reset()
				if err := s.Filesize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filesize\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationFileUploadExaminationFilesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationFileUploadExaminationFilesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationFileUploadExaminationFilesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.ShopType.Set {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.DepositCycleMasterID.Set {
			e.FieldStart("deposit_cycle_master_id")
			s.DepositCycleMasterID.Encode(e)
		}
	}
	{
		if s.ContractDetail.Set {
			e.FieldStart("contract_detail")
			s.ContractDetail.Encode(e)
		}
	}
	{
		if s.ShopItemDetail != nil {
			e.FieldStart("shop_item_detail")
			e.ArrStart()
			for _, elem := range s.ShopItemDetail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ContractBankAccount.Set {
			e.FieldStart("contract_bank_account")
			s.ContractBankAccount.Encode(e)
		}
	}
	{
		if s.ContractInputStatus.Set {
			e.FieldStart("contract_input_status")
			s.ContractInputStatus.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfo = [9]string{
	0: "shop_id",
	1: "platform_id",
	2: "shop_type",
	3: "status_code",
	4: "deposit_cycle_master_id",
	5: "contract_detail",
	6: "shop_item_detail",
	7: "contract_bank_account",
	8: "contract_input_status",
}

// Decode decodes ExaminationInfo from json.
func (s *ExaminationInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType.Reset()
				if err := s.ShopType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "deposit_cycle_master_id":
			if err := func() error {
				s.DepositCycleMasterID.Reset()
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		case "contract_detail":
			if err := func() error {
				s.ContractDetail.Reset()
				if err := s.ContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_detail\"")
			}
		case "shop_item_detail":
			if err := func() error {
				s.ShopItemDetail = make([]ContentInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContentInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ShopItemDetail = append(s.ShopItemDetail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_item_detail\"")
			}
		case "contract_bank_account":
			if err := func() error {
				s.ContractBankAccount.Reset()
				if err := s.ContractBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_bank_account\"")
			}
		case "contract_input_status":
			if err := func() error {
				s.ContractInputStatus.Reset()
				if err := s.ContractInputStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_input_status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoContractDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoContractDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.CorporateNumber.Set {
			e.FieldStart("corporate_number")
			s.CorporateNumber.Encode(e)
		}
	}
	{
		if s.CorporateName.Set {
			e.FieldStart("corporate_name")
			s.CorporateName.Encode(e)
		}
	}
	{
		if s.CorporateNameKana.Set {
			e.FieldStart("corporate_name_kana")
			s.CorporateNameKana.Encode(e)
		}
	}
	{
		if s.Hp.Set {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		if s.Capital.Set {
			e.FieldStart("capital")
			s.Capital.Encode(e)
		}
	}
	{
		if s.EstablishedAt.Set {
			e.FieldStart("established_at")
			s.EstablishedAt.Encode(e)
		}
	}
	{
		if s.YearlySales.Set {
			e.FieldStart("yearly_sales")
			s.YearlySales.Encode(e)
		}
	}
	{
		if s.BusinessDetails.Set {
			e.FieldStart("business_details")
			s.BusinessDetails.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode.Set {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture.Set {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana.Set {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipality.Set {
			e.FieldStart("company_address_municipality")
			s.CompanyAddressMunicipality.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipalityKana.Set {
			e.FieldStart("company_address_municipality_kana")
			s.CompanyAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressSection.Set {
			e.FieldStart("company_address_section")
			s.CompanyAddressSection.Encode(e)
		}
	}
	{
		if s.CompanyAddressSectionKana.Set {
			e.FieldStart("company_address_section_kana")
			s.CompanyAddressSectionKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressChrome.Set {
			e.FieldStart("company_address_chrome")
			s.CompanyAddressChrome.Encode(e)
		}
	}
	{
		if s.CompanyAddressChromeKana.Set {
			e.FieldStart("company_address_chrome_kana")
			s.CompanyAddressChromeKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingName.Set {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana.Set {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		if s.CompanyTel.Set {
			e.FieldStart("company_tel")
			s.CompanyTel.Encode(e)
		}
	}
	{
		if s.RepresentativeLastName.Set {
			e.FieldStart("representative_last_name")
			s.RepresentativeLastName.Encode(e)
		}
	}
	{
		if s.RepresentativeLastNameKana.Set {
			e.FieldStart("representative_last_name_kana")
			s.RepresentativeLastNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstName.Set {
			e.FieldStart("representative_first_name")
			s.RepresentativeFirstName.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstNameKana.Set {
			e.FieldStart("representative_first_name_kana")
			s.RepresentativeFirstNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeBirthday.Set {
			e.FieldStart("representative_birthday")
			s.RepresentativeBirthday.Encode(e)
		}
	}
	{
		if s.RepresentativeGender.Set {
			e.FieldStart("representative_gender")
			s.RepresentativeGender.Encode(e)
		}
	}
	{
		if s.RepresentativePostalCode.Set {
			e.FieldStart("representative_postal_code")
			s.RepresentativePostalCode.Encode(e)
		}
	}
	{
		if s.RepresentativePrefecture.Set {
			e.FieldStart("representative_prefecture")
			s.RepresentativePrefecture.Encode(e)
		}
	}
	{
		if s.RepresentativePrefectureKana.Set {
			e.FieldStart("representative_prefecture_kana")
			s.RepresentativePrefectureKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipality.Set {
			e.FieldStart("representative_address_municipality")
			s.RepresentativeAddressMunicipality.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipalityKana.Set {
			e.FieldStart("representative_address_municipality_kana")
			s.RepresentativeAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSection.Set {
			e.FieldStart("representative_address_section")
			s.RepresentativeAddressSection.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSectionKana.Set {
			e.FieldStart("representative_address_section_kana")
			s.RepresentativeAddressSectionKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChrome.Set {
			e.FieldStart("representative_address_chrome")
			s.RepresentativeAddressChrome.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChromeKana.Set {
			e.FieldStart("representative_address_chrome_kana")
			s.RepresentativeAddressChromeKana.Encode(e)
		}
	}
	{
		if s.RepresentativeTel.Set {
			e.FieldStart("representative_tel")
			s.RepresentativeTel.Encode(e)
		}
	}
	{
		if s.Staff1LastName.Set {
			e.FieldStart("staff1_last_name")
			s.Staff1LastName.Encode(e)
		}
	}
	{
		if s.Staff1LastNameKana.Set {
			e.FieldStart("staff1_last_name_kana")
			s.Staff1LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff1FirstName.Set {
			e.FieldStart("staff1_first_name")
			s.Staff1FirstName.Encode(e)
		}
	}
	{
		if s.Staff1FirstNameKana.Set {
			e.FieldStart("staff1_first_name_kana")
			s.Staff1FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff1Tel.Set {
			e.FieldStart("staff1_tel")
			s.Staff1Tel.Encode(e)
		}
	}
	{
		if s.Staff1Mail.Set {
			e.FieldStart("staff1_mail")
			s.Staff1Mail.Encode(e)
		}
	}
	{
		if s.Staff2LastName.Set {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana.Set {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName.Set {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana.Set {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2Tel.Set {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail.Set {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		if s.UsedOnApp.Set {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
	{
		if s.UsedOnWeb.Set {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnOther.Set {
			e.FieldStart("used_on_other")
			s.UsedOnOther.Encode(e)
		}
	}
	{
		if s.SiteExisting.Set {
			e.FieldStart("site_existing")
			s.SiteExisting.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.SiteCredential.Set {
			e.FieldStart("site_credential")
			s.SiteCredential.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopNameEn.Set {
			e.FieldStart("shop_name_en")
			s.ShopNameEn.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SupportTel.Set {
			e.FieldStart("support_tel")
			s.SupportTel.Encode(e)
		}
	}
	{
		if s.SupportMail.Set {
			e.FieldStart("support_mail")
			s.SupportMail.Encode(e)
		}
	}
	{
		if s.ProvidesProduct.Set {
			e.FieldStart("provides_product")
			s.ProvidesProduct.Encode(e)
		}
	}
	{
		if s.ProvidesService.Set {
			e.FieldStart("provides_service")
			s.ProvidesService.Encode(e)
		}
	}
	{
		if s.ProvidesDigitalContent.Set {
			e.FieldStart("provides_digital_content")
			s.ProvidesDigitalContent.Encode(e)
		}
	}
	{
		if s.Prepaid.Set {
			e.FieldStart("prepaid")
			s.Prepaid.Encode(e)
		}
	}
	{
		if s.UnitPrice.Set {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		if s.ContentCategoryMasterID.Set {
			e.FieldStart("content_category_master_id")
			s.ContentCategoryMasterID.Encode(e)
		}
	}
	{
		if s.ContentDescription.Set {
			e.FieldStart("content_description")
			s.ContentDescription.Encode(e)
		}
	}
	{
		if s.ExpiretionDateOfPoint.Set {
			e.FieldStart("expiretion_date_of_point")
			s.ExpiretionDateOfPoint.Encode(e)
		}
	}
	{
		if s.UsageOfPoint.Set {
			e.FieldStart("usage_of_point")
			s.UsageOfPoint.Encode(e)
		}
	}
	{
		if s.LostTrial.Set {
			e.FieldStart("lost_trial")
			s.LostTrial.Encode(e)
		}
	}
	{
		if s.DealsInsecureContent.Set {
			e.FieldStart("deals_insecure_content")
			s.DealsInsecureContent.Encode(e)
		}
	}
	{
		if s.DealsLongApplyContent.Set {
			e.FieldStart("deals_long_apply_content")
			s.DealsLongApplyContent.Encode(e)
		}
	}
	{
		if s.PayBy.Set {
			e.FieldStart("pay_by")
			s.PayBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoContractDetail = [74]string{
	0:  "corporate",
	1:  "corporate_number",
	2:  "corporate_name",
	3:  "corporate_name_kana",
	4:  "hp",
	5:  "capital",
	6:  "established_at",
	7:  "yearly_sales",
	8:  "business_details",
	9:  "company_postal_code",
	10: "company_prefecture",
	11: "company_prefecture_kana",
	12: "company_address_municipality",
	13: "company_address_municipality_kana",
	14: "company_address_section",
	15: "company_address_section_kana",
	16: "company_address_chrome",
	17: "company_address_chrome_kana",
	18: "company_address_building_name",
	19: "company_address_building_name_kana",
	20: "company_tel",
	21: "representative_last_name",
	22: "representative_last_name_kana",
	23: "representative_first_name",
	24: "representative_first_name_kana",
	25: "representative_birthday",
	26: "representative_gender",
	27: "representative_postal_code",
	28: "representative_prefecture",
	29: "representative_prefecture_kana",
	30: "representative_address_municipality",
	31: "representative_address_municipality_kana",
	32: "representative_address_section",
	33: "representative_address_section_kana",
	34: "representative_address_chrome",
	35: "representative_address_chrome_kana",
	36: "representative_tel",
	37: "staff1_last_name",
	38: "staff1_last_name_kana",
	39: "staff1_first_name",
	40: "staff1_first_name_kana",
	41: "staff1_tel",
	42: "staff1_mail",
	43: "staff2_last_name",
	44: "staff2_last_name_kana",
	45: "staff2_first_name",
	46: "staff2_first_name_kana",
	47: "staff2_tel",
	48: "staff2_mail",
	49: "used_on_app",
	50: "used_on_web",
	51: "used_on_other",
	52: "site_existing",
	53: "url",
	54: "site_credential",
	55: "shop_name",
	56: "shop_name_kana",
	57: "shop_name_en",
	58: "platform_name",
	59: "support_tel",
	60: "support_mail",
	61: "provides_product",
	62: "provides_service",
	63: "provides_digital_content",
	64: "prepaid",
	65: "unit_price",
	66: "content_category_master_id",
	67: "content_description",
	68: "expiretion_date_of_point",
	69: "usage_of_point",
	70: "lost_trial",
	71: "deals_insecure_content",
	72: "deals_long_apply_content",
	73: "pay_by",
}

// Decode decodes ExaminationInfoContractDetail from json.
func (s *ExaminationInfoContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoContractDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_number":
			if err := func() error {
				s.CorporateNumber.Reset()
				if err := s.CorporateNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			if err := func() error {
				s.CorporateName.Reset()
				if err := s.CorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			if err := func() error {
				s.CorporateNameKana.Reset()
				if err := s.CorporateNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp.Reset()
				if err := s.Hp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			if err := func() error {
				s.Capital.Reset()
				if err := s.Capital.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			if err := func() error {
				s.EstablishedAt.Reset()
				if err := s.EstablishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			if err := func() error {
				s.YearlySales.Reset()
				if err := s.YearlySales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			if err := func() error {
				s.BusinessDetails.Reset()
				if err := s.BusinessDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode.Reset()
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture.Reset()
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana.Reset()
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			if err := func() error {
				s.CompanyAddressMunicipality.Reset()
				if err := s.CompanyAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			if err := func() error {
				s.CompanyAddressMunicipalityKana.Reset()
				if err := s.CompanyAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			if err := func() error {
				s.CompanyAddressSection.Reset()
				if err := s.CompanyAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			if err := func() error {
				s.CompanyAddressSectionKana.Reset()
				if err := s.CompanyAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			if err := func() error {
				s.CompanyAddressChrome.Reset()
				if err := s.CompanyAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			if err := func() error {
				s.CompanyAddressChromeKana.Reset()
				if err := s.CompanyAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName.Reset()
				if err := s.CompanyAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana.Reset()
				if err := s.CompanyAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			if err := func() error {
				s.CompanyTel.Reset()
				if err := s.CompanyTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		case "representative_last_name":
			if err := func() error {
				s.RepresentativeLastName.Reset()
				if err := s.RepresentativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			if err := func() error {
				s.RepresentativeLastNameKana.Reset()
				if err := s.RepresentativeLastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			if err := func() error {
				s.RepresentativeFirstName.Reset()
				if err := s.RepresentativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			if err := func() error {
				s.RepresentativeFirstNameKana.Reset()
				if err := s.RepresentativeFirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_birthday":
			if err := func() error {
				s.RepresentativeBirthday.Reset()
				if err := s.RepresentativeBirthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			if err := func() error {
				s.RepresentativeGender.Reset()
				if err := s.RepresentativeGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "representative_postal_code":
			if err := func() error {
				s.RepresentativePostalCode.Reset()
				if err := s.RepresentativePostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			if err := func() error {
				s.RepresentativePrefecture.Reset()
				if err := s.RepresentativePrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			if err := func() error {
				s.RepresentativePrefectureKana.Reset()
				if err := s.RepresentativePrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			if err := func() error {
				s.RepresentativeAddressMunicipality.Reset()
				if err := s.RepresentativeAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			if err := func() error {
				s.RepresentativeAddressMunicipalityKana.Reset()
				if err := s.RepresentativeAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			if err := func() error {
				s.RepresentativeAddressSection.Reset()
				if err := s.RepresentativeAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			if err := func() error {
				s.RepresentativeAddressSectionKana.Reset()
				if err := s.RepresentativeAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			if err := func() error {
				s.RepresentativeAddressChrome.Reset()
				if err := s.RepresentativeAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			if err := func() error {
				s.RepresentativeAddressChromeKana.Reset()
				if err := s.RepresentativeAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_tel":
			if err := func() error {
				s.RepresentativeTel.Reset()
				if err := s.RepresentativeTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "staff1_last_name":
			if err := func() error {
				s.Staff1LastName.Reset()
				if err := s.Staff1LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			if err := func() error {
				s.Staff1LastNameKana.Reset()
				if err := s.Staff1LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			if err := func() error {
				s.Staff1FirstName.Reset()
				if err := s.Staff1FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			if err := func() error {
				s.Staff1FirstNameKana.Reset()
				if err := s.Staff1FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_tel":
			if err := func() error {
				s.Staff1Tel.Reset()
				if err := s.Staff1Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			if err := func() error {
				s.Staff1Mail.Reset()
				if err := s.Staff1Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName.Reset()
				if err := s.Staff2LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana.Reset()
				if err := s.Staff2LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName.Reset()
				if err := s.Staff2FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana.Reset()
				if err := s.Staff2FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel.Reset()
				if err := s.Staff2Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail.Reset()
				if err := s.Staff2Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp.Reset()
				if err := s.UsedOnApp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb.Reset()
				if err := s.UsedOnWeb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_other":
			if err := func() error {
				s.UsedOnOther.Reset()
				if err := s.UsedOnOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_other\"")
			}
		case "site_existing":
			if err := func() error {
				s.SiteExisting.Reset()
				if err := s.SiteExisting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_existing\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "site_credential":
			if err := func() error {
				s.SiteCredential.Reset()
				if err := s.SiteCredential.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_credential\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			if err := func() error {
				s.ShopNameEn.Reset()
				if err := s.ShopNameEn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "support_tel":
			if err := func() error {
				s.SupportTel.Reset()
				if err := s.SupportTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "support_mail":
			if err := func() error {
				s.SupportMail.Reset()
				if err := s.SupportMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "provides_product":
			if err := func() error {
				s.ProvidesProduct.Reset()
				if err := s.ProvidesProduct.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_product\"")
			}
		case "provides_service":
			if err := func() error {
				s.ProvidesService.Reset()
				if err := s.ProvidesService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_service\"")
			}
		case "provides_digital_content":
			if err := func() error {
				s.ProvidesDigitalContent.Reset()
				if err := s.ProvidesDigitalContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_digital_content\"")
			}
		case "prepaid":
			if err := func() error {
				s.Prepaid.Reset()
				if err := s.Prepaid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice.Reset()
				if err := s.UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "content_category_master_id":
			if err := func() error {
				s.ContentCategoryMasterID.Reset()
				if err := s.ContentCategoryMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_category_master_id\"")
			}
		case "content_description":
			if err := func() error {
				s.ContentDescription.Reset()
				if err := s.ContentDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "expiretion_date_of_point":
			if err := func() error {
				s.ExpiretionDateOfPoint.Reset()
				if err := s.ExpiretionDateOfPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiretion_date_of_point\"")
			}
		case "usage_of_point":
			if err := func() error {
				s.UsageOfPoint.Reset()
				if err := s.UsageOfPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_of_point\"")
			}
		case "lost_trial":
			if err := func() error {
				s.LostTrial.Reset()
				if err := s.LostTrial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "deals_insecure_content":
			if err := func() error {
				s.DealsInsecureContent.Reset()
				if err := s.DealsInsecureContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "deals_long_apply_content":
			if err := func() error {
				s.DealsLongApplyContent.Reset()
				if err := s.DealsLongApplyContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "pay_by":
			if err := func() error {
				s.PayBy.Reset()
				if err := s.PayBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoContractDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoContractDetailSiteExisting as json.
func (s ExaminationInfoContractDetailSiteExisting) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoContractDetailSiteExisting from json.
func (s *ExaminationInfoContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoContractDetailSiteExisting to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoContractDetailSiteExisting(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoContractInputStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoContractInputStatus) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.ContractInfoInput.Set {
			e.FieldStart("contract_info_input")
			s.ContractInfoInput.Encode(e)
		}
	}
	{
		if s.ShopInfoInput.Set {
			e.FieldStart("shop_info_input")
			s.ShopInfoInput.Encode(e)
		}
	}
	{
		if s.AccountInfoInput.Set {
			e.FieldStart("account_info_input")
			s.AccountInfoInput.Encode(e)
		}
	}
	{
		if s.CardInfoInput.Set {
			e.FieldStart("card_info_input")
			s.CardInfoInput.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoContractInputStatus = [5]string{
	0: "status_code",
	1: "contract_info_input",
	2: "shop_info_input",
	3: "account_info_input",
	4: "card_info_input",
}

// Decode decodes ExaminationInfoContractInputStatus from json.
func (s *ExaminationInfoContractInputStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoContractInputStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "contract_info_input":
			if err := func() error {
				s.ContractInfoInput.Reset()
				if err := s.ContractInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info_input\"")
			}
		case "shop_info_input":
			if err := func() error {
				s.ShopInfoInput.Reset()
				if err := s.ShopInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info_input\"")
			}
		case "account_info_input":
			if err := func() error {
				s.AccountInfoInput.Reset()
				if err := s.AccountInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_info_input\"")
			}
		case "card_info_input":
			if err := func() error {
				s.CardInfoInput.Reset()
				if err := s.CardInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_info_input\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoContractInputStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.UpdateContractDetail.Set {
			e.FieldStart("update_contract_detail")
			s.UpdateContractDetail.Encode(e)
		}
	}
	{
		if s.UpdateShop.Set {
			e.FieldStart("update_shop")
			s.UpdateShop.Encode(e)
		}
	}
	{
		if s.UpdateBankAccount.Set {
			e.FieldStart("update_bank_account")
			s.UpdateBankAccount.Encode(e)
		}
	}
	{
		if s.UpdateDepositCycle.Set {
			e.FieldStart("update_deposit_cycle")
			s.UpdateDepositCycle.Encode(e)
		}
	}
	{
		if s.DepositCycleMasterID.Set {
			e.FieldStart("deposit_cycle_master_id")
			s.DepositCycleMasterID.Encode(e)
		}
	}
	{
		if s.ContractDetail.Set {
			e.FieldStart("contract_detail")
			s.ContractDetail.Encode(e)
		}
	}
	{
		if s.ShopItemDetail != nil {
			e.FieldStart("shop_item_detail")
			e.ArrStart()
			for _, elem := range s.ShopItemDetail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ContractBankAccount.Set {
			e.FieldStart("contract_bank_account")
			s.ContractBankAccount.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingRequest = [8]string{
	0: "update_contract_detail",
	1: "update_shop",
	2: "update_bank_account",
	3: "update_deposit_cycle",
	4: "deposit_cycle_master_id",
	5: "contract_detail",
	6: "shop_item_detail",
	7: "contract_bank_account",
}

// Decode decodes ExaminationInfoUpdatingRequest from json.
func (s *ExaminationInfoUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequest to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "update_contract_detail":
			if err := func() error {
				s.UpdateContractDetail.Reset()
				if err := s.UpdateContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_contract_detail\"")
			}
		case "update_shop":
			if err := func() error {
				s.UpdateShop.Reset()
				if err := s.UpdateShop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_shop\"")
			}
		case "update_bank_account":
			if err := func() error {
				s.UpdateBankAccount.Reset()
				if err := s.UpdateBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_bank_account\"")
			}
		case "update_deposit_cycle":
			if err := func() error {
				s.UpdateDepositCycle.Reset()
				if err := s.UpdateDepositCycle.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_deposit_cycle\"")
			}
		case "deposit_cycle_master_id":
			if err := func() error {
				s.DepositCycleMasterID.Reset()
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		case "contract_detail":
			if err := func() error {
				s.ContractDetail.Reset()
				if err := s.ContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_detail\"")
			}
		case "shop_item_detail":
			if err := func() error {
				s.ShopItemDetail = make([]ContentInfo, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContentInfo
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ShopItemDetail = append(s.ShopItemDetail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_item_detail\"")
			}
		case "contract_bank_account":
			if err := func() error {
				s.ContractBankAccount.Reset()
				if err := s.ContractBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_bank_account\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingRequestContractDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingRequestContractDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.CorporateNumber.Set {
			e.FieldStart("corporate_number")
			s.CorporateNumber.Encode(e)
		}
	}
	{
		if s.CorporateName.Set {
			e.FieldStart("corporate_name")
			s.CorporateName.Encode(e)
		}
	}
	{
		if s.CorporateNameKana.Set {
			e.FieldStart("corporate_name_kana")
			s.CorporateNameKana.Encode(e)
		}
	}
	{
		if s.Hp.Set {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		if s.Capital.Set {
			e.FieldStart("capital")
			s.Capital.Encode(e)
		}
	}
	{
		if s.EstablishedAt.Set {
			e.FieldStart("established_at")
			s.EstablishedAt.Encode(e)
		}
	}
	{
		if s.YearlySales.Set {
			e.FieldStart("yearly_sales")
			s.YearlySales.Encode(e)
		}
	}
	{
		if s.BusinessDetails.Set {
			e.FieldStart("business_details")
			s.BusinessDetails.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode.Set {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture.Set {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana.Set {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipality.Set {
			e.FieldStart("company_address_municipality")
			s.CompanyAddressMunicipality.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipalityKana.Set {
			e.FieldStart("company_address_municipality_kana")
			s.CompanyAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressSection.Set {
			e.FieldStart("company_address_section")
			s.CompanyAddressSection.Encode(e)
		}
	}
	{
		if s.CompanyAddressSectionKana.Set {
			e.FieldStart("company_address_section_kana")
			s.CompanyAddressSectionKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressChrome.Set {
			e.FieldStart("company_address_chrome")
			s.CompanyAddressChrome.Encode(e)
		}
	}
	{
		if s.CompanyAddressChromeKana.Set {
			e.FieldStart("company_address_chrome_kana")
			s.CompanyAddressChromeKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingName.Set {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana.Set {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		if s.CompanyTel.Set {
			e.FieldStart("company_tel")
			s.CompanyTel.Encode(e)
		}
	}
	{
		if s.RepresentativeLastName.Set {
			e.FieldStart("representative_last_name")
			s.RepresentativeLastName.Encode(e)
		}
	}
	{
		if s.RepresentativeLastNameKana.Set {
			e.FieldStart("representative_last_name_kana")
			s.RepresentativeLastNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstName.Set {
			e.FieldStart("representative_first_name")
			s.RepresentativeFirstName.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstNameKana.Set {
			e.FieldStart("representative_first_name_kana")
			s.RepresentativeFirstNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeBirthday.Set {
			e.FieldStart("representative_birthday")
			s.RepresentativeBirthday.Encode(e)
		}
	}
	{
		if s.RepresentativeGender.Set {
			e.FieldStart("representative_gender")
			s.RepresentativeGender.Encode(e)
		}
	}
	{
		if s.RepresentativePostalCode.Set {
			e.FieldStart("representative_postal_code")
			s.RepresentativePostalCode.Encode(e)
		}
	}
	{
		if s.RepresentativePrefecture.Set {
			e.FieldStart("representative_prefecture")
			s.RepresentativePrefecture.Encode(e)
		}
	}
	{
		if s.RepresentativePrefectureKana.Set {
			e.FieldStart("representative_prefecture_kana")
			s.RepresentativePrefectureKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipality.Set {
			e.FieldStart("representative_address_municipality")
			s.RepresentativeAddressMunicipality.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipalityKana.Set {
			e.FieldStart("representative_address_municipality_kana")
			s.RepresentativeAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSection.Set {
			e.FieldStart("representative_address_section")
			s.RepresentativeAddressSection.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSectionKana.Set {
			e.FieldStart("representative_address_section_kana")
			s.RepresentativeAddressSectionKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChrome.Set {
			e.FieldStart("representative_address_chrome")
			s.RepresentativeAddressChrome.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChromeKana.Set {
			e.FieldStart("representative_address_chrome_kana")
			s.RepresentativeAddressChromeKana.Encode(e)
		}
	}
	{
		if s.RepresentativeTel.Set {
			e.FieldStart("representative_tel")
			s.RepresentativeTel.Encode(e)
		}
	}
	{
		if s.Staff1LastName.Set {
			e.FieldStart("staff1_last_name")
			s.Staff1LastName.Encode(e)
		}
	}
	{
		if s.Staff1LastNameKana.Set {
			e.FieldStart("staff1_last_name_kana")
			s.Staff1LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff1FirstName.Set {
			e.FieldStart("staff1_first_name")
			s.Staff1FirstName.Encode(e)
		}
	}
	{
		if s.Staff1FirstNameKana.Set {
			e.FieldStart("staff1_first_name_kana")
			s.Staff1FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff1Tel.Set {
			e.FieldStart("staff1_tel")
			s.Staff1Tel.Encode(e)
		}
	}
	{
		if s.Staff1Mail.Set {
			e.FieldStart("staff1_mail")
			s.Staff1Mail.Encode(e)
		}
	}
	{
		if s.Staff2LastName.Set {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana.Set {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName.Set {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana.Set {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2Tel.Set {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail.Set {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		if s.UsedOnApp.Set {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
	{
		if s.UsedOnWeb.Set {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnOther.Set {
			e.FieldStart("used_on_other")
			s.UsedOnOther.Encode(e)
		}
	}
	{
		if s.SiteExisting.Set {
			e.FieldStart("site_existing")
			s.SiteExisting.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.SiteCredential.Set {
			e.FieldStart("site_credential")
			s.SiteCredential.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopNameEn.Set {
			e.FieldStart("shop_name_en")
			s.ShopNameEn.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SupportTel.Set {
			e.FieldStart("support_tel")
			s.SupportTel.Encode(e)
		}
	}
	{
		if s.SupportMail.Set {
			e.FieldStart("support_mail")
			s.SupportMail.Encode(e)
		}
	}
	{
		if s.ProvidesProduct.Set {
			e.FieldStart("provides_product")
			s.ProvidesProduct.Encode(e)
		}
	}
	{
		if s.ProvidesService.Set {
			e.FieldStart("provides_service")
			s.ProvidesService.Encode(e)
		}
	}
	{
		if s.ProvidesDigitalContent.Set {
			e.FieldStart("provides_digital_content")
			s.ProvidesDigitalContent.Encode(e)
		}
	}
	{
		if s.Prepaid.Set {
			e.FieldStart("prepaid")
			s.Prepaid.Encode(e)
		}
	}
	{
		if s.UnitPrice.Set {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		if s.ContentCategoryMasterID.Set {
			e.FieldStart("content_category_master_id")
			s.ContentCategoryMasterID.Encode(e)
		}
	}
	{
		if s.ContentDescription.Set {
			e.FieldStart("content_description")
			s.ContentDescription.Encode(e)
		}
	}
	{
		if s.ExpiretionDateOfPoint.Set {
			e.FieldStart("expiretion_date_of_point")
			s.ExpiretionDateOfPoint.Encode(e)
		}
	}
	{
		if s.UsageOfPoint.Set {
			e.FieldStart("usage_of_point")
			s.UsageOfPoint.Encode(e)
		}
	}
	{
		if s.LostTrial.Set {
			e.FieldStart("lost_trial")
			s.LostTrial.Encode(e)
		}
	}
	{
		if s.DealsInsecureContent.Set {
			e.FieldStart("deals_insecure_content")
			s.DealsInsecureContent.Encode(e)
		}
	}
	{
		if s.DealsLongApplyContent.Set {
			e.FieldStart("deals_long_apply_content")
			s.DealsLongApplyContent.Encode(e)
		}
	}
	{
		if s.PayBy.Set {
			e.FieldStart("pay_by")
			s.PayBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingRequestContractDetail = [74]string{
	0:  "corporate",
	1:  "corporate_number",
	2:  "corporate_name",
	3:  "corporate_name_kana",
	4:  "hp",
	5:  "capital",
	6:  "established_at",
	7:  "yearly_sales",
	8:  "business_details",
	9:  "company_postal_code",
	10: "company_prefecture",
	11: "company_prefecture_kana",
	12: "company_address_municipality",
	13: "company_address_municipality_kana",
	14: "company_address_section",
	15: "company_address_section_kana",
	16: "company_address_chrome",
	17: "company_address_chrome_kana",
	18: "company_address_building_name",
	19: "company_address_building_name_kana",
	20: "company_tel",
	21: "representative_last_name",
	22: "representative_last_name_kana",
	23: "representative_first_name",
	24: "representative_first_name_kana",
	25: "representative_birthday",
	26: "representative_gender",
	27: "representative_postal_code",
	28: "representative_prefecture",
	29: "representative_prefecture_kana",
	30: "representative_address_municipality",
	31: "representative_address_municipality_kana",
	32: "representative_address_section",
	33: "representative_address_section_kana",
	34: "representative_address_chrome",
	35: "representative_address_chrome_kana",
	36: "representative_tel",
	37: "staff1_last_name",
	38: "staff1_last_name_kana",
	39: "staff1_first_name",
	40: "staff1_first_name_kana",
	41: "staff1_tel",
	42: "staff1_mail",
	43: "staff2_last_name",
	44: "staff2_last_name_kana",
	45: "staff2_first_name",
	46: "staff2_first_name_kana",
	47: "staff2_tel",
	48: "staff2_mail",
	49: "used_on_app",
	50: "used_on_web",
	51: "used_on_other",
	52: "site_existing",
	53: "url",
	54: "site_credential",
	55: "shop_name",
	56: "shop_name_kana",
	57: "shop_name_en",
	58: "platform_name",
	59: "support_tel",
	60: "support_mail",
	61: "provides_product",
	62: "provides_service",
	63: "provides_digital_content",
	64: "prepaid",
	65: "unit_price",
	66: "content_category_master_id",
	67: "content_description",
	68: "expiretion_date_of_point",
	69: "usage_of_point",
	70: "lost_trial",
	71: "deals_insecure_content",
	72: "deals_long_apply_content",
	73: "pay_by",
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetail from json.
func (s *ExaminationInfoUpdatingRequestContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_number":
			if err := func() error {
				s.CorporateNumber.Reset()
				if err := s.CorporateNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			if err := func() error {
				s.CorporateName.Reset()
				if err := s.CorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			if err := func() error {
				s.CorporateNameKana.Reset()
				if err := s.CorporateNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp.Reset()
				if err := s.Hp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			if err := func() error {
				s.Capital.Reset()
				if err := s.Capital.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			if err := func() error {
				s.EstablishedAt.Reset()
				if err := s.EstablishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			if err := func() error {
				s.YearlySales.Reset()
				if err := s.YearlySales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			if err := func() error {
				s.BusinessDetails.Reset()
				if err := s.BusinessDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode.Reset()
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture.Reset()
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana.Reset()
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			if err := func() error {
				s.CompanyAddressMunicipality.Reset()
				if err := s.CompanyAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			if err := func() error {
				s.CompanyAddressMunicipalityKana.Reset()
				if err := s.CompanyAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			if err := func() error {
				s.CompanyAddressSection.Reset()
				if err := s.CompanyAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			if err := func() error {
				s.CompanyAddressSectionKana.Reset()
				if err := s.CompanyAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			if err := func() error {
				s.CompanyAddressChrome.Reset()
				if err := s.CompanyAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			if err := func() error {
				s.CompanyAddressChromeKana.Reset()
				if err := s.CompanyAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName.Reset()
				if err := s.CompanyAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana.Reset()
				if err := s.CompanyAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			if err := func() error {
				s.CompanyTel.Reset()
				if err := s.CompanyTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		case "representative_last_name":
			if err := func() error {
				s.RepresentativeLastName.Reset()
				if err := s.RepresentativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			if err := func() error {
				s.RepresentativeLastNameKana.Reset()
				if err := s.RepresentativeLastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			if err := func() error {
				s.RepresentativeFirstName.Reset()
				if err := s.RepresentativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			if err := func() error {
				s.RepresentativeFirstNameKana.Reset()
				if err := s.RepresentativeFirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_birthday":
			if err := func() error {
				s.RepresentativeBirthday.Reset()
				if err := s.RepresentativeBirthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			if err := func() error {
				s.RepresentativeGender.Reset()
				if err := s.RepresentativeGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "representative_postal_code":
			if err := func() error {
				s.RepresentativePostalCode.Reset()
				if err := s.RepresentativePostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			if err := func() error {
				s.RepresentativePrefecture.Reset()
				if err := s.RepresentativePrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			if err := func() error {
				s.RepresentativePrefectureKana.Reset()
				if err := s.RepresentativePrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			if err := func() error {
				s.RepresentativeAddressMunicipality.Reset()
				if err := s.RepresentativeAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			if err := func() error {
				s.RepresentativeAddressMunicipalityKana.Reset()
				if err := s.RepresentativeAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			if err := func() error {
				s.RepresentativeAddressSection.Reset()
				if err := s.RepresentativeAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			if err := func() error {
				s.RepresentativeAddressSectionKana.Reset()
				if err := s.RepresentativeAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			if err := func() error {
				s.RepresentativeAddressChrome.Reset()
				if err := s.RepresentativeAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			if err := func() error {
				s.RepresentativeAddressChromeKana.Reset()
				if err := s.RepresentativeAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_tel":
			if err := func() error {
				s.RepresentativeTel.Reset()
				if err := s.RepresentativeTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "staff1_last_name":
			if err := func() error {
				s.Staff1LastName.Reset()
				if err := s.Staff1LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			if err := func() error {
				s.Staff1LastNameKana.Reset()
				if err := s.Staff1LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			if err := func() error {
				s.Staff1FirstName.Reset()
				if err := s.Staff1FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			if err := func() error {
				s.Staff1FirstNameKana.Reset()
				if err := s.Staff1FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_tel":
			if err := func() error {
				s.Staff1Tel.Reset()
				if err := s.Staff1Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			if err := func() error {
				s.Staff1Mail.Reset()
				if err := s.Staff1Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName.Reset()
				if err := s.Staff2LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana.Reset()
				if err := s.Staff2LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName.Reset()
				if err := s.Staff2FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana.Reset()
				if err := s.Staff2FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel.Reset()
				if err := s.Staff2Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail.Reset()
				if err := s.Staff2Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp.Reset()
				if err := s.UsedOnApp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb.Reset()
				if err := s.UsedOnWeb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_other":
			if err := func() error {
				s.UsedOnOther.Reset()
				if err := s.UsedOnOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_other\"")
			}
		case "site_existing":
			if err := func() error {
				s.SiteExisting.Reset()
				if err := s.SiteExisting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_existing\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "site_credential":
			if err := func() error {
				s.SiteCredential.Reset()
				if err := s.SiteCredential.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_credential\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			if err := func() error {
				s.ShopNameEn.Reset()
				if err := s.ShopNameEn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "support_tel":
			if err := func() error {
				s.SupportTel.Reset()
				if err := s.SupportTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "support_mail":
			if err := func() error {
				s.SupportMail.Reset()
				if err := s.SupportMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "provides_product":
			if err := func() error {
				s.ProvidesProduct.Reset()
				if err := s.ProvidesProduct.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_product\"")
			}
		case "provides_service":
			if err := func() error {
				s.ProvidesService.Reset()
				if err := s.ProvidesService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_service\"")
			}
		case "provides_digital_content":
			if err := func() error {
				s.ProvidesDigitalContent.Reset()
				if err := s.ProvidesDigitalContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_digital_content\"")
			}
		case "prepaid":
			if err := func() error {
				s.Prepaid.Reset()
				if err := s.Prepaid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice.Reset()
				if err := s.UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "content_category_master_id":
			if err := func() error {
				s.ContentCategoryMasterID.Reset()
				if err := s.ContentCategoryMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_category_master_id\"")
			}
		case "content_description":
			if err := func() error {
				s.ContentDescription.Reset()
				if err := s.ContentDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "expiretion_date_of_point":
			if err := func() error {
				s.ExpiretionDateOfPoint.Reset()
				if err := s.ExpiretionDateOfPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiretion_date_of_point\"")
			}
		case "usage_of_point":
			if err := func() error {
				s.UsageOfPoint.Reset()
				if err := s.UsageOfPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_of_point\"")
			}
		case "lost_trial":
			if err := func() error {
				s.LostTrial.Reset()
				if err := s.LostTrial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "deals_insecure_content":
			if err := func() error {
				s.DealsInsecureContent.Reset()
				if err := s.DealsInsecureContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "deals_long_apply_content":
			if err := func() error {
				s.DealsLongApplyContent.Reset()
				if err := s.DealsLongApplyContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "pay_by":
			if err := func() error {
				s.PayBy.Reset()
				if err := s.PayBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingRequestContractDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingRequestContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailSiteExisting as json.
func (s ExaminationInfoUpdatingRequestContractDetailSiteExisting) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailSiteExisting from json.
func (s *ExaminationInfoUpdatingRequestContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractDetailSiteExisting to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingRequestContractDetailSiteExisting(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingRequestContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.ContractInfo.Set {
			e.FieldStart("contract_info")
			s.ContractInfo.Encode(e)
		}
	}
	{
		if s.ShopInfo.Set {
			e.FieldStart("shop_info")
			s.ShopInfo.Encode(e)
		}
	}
	{
		if s.BankAccountInfo.Set {
			e.FieldStart("bank_account_info")
			s.BankAccountInfo.Encode(e)
		}
	}
	{
		if s.DepositCycleInfo.Set {
			e.FieldStart("deposit_cycle_info")
			s.DepositCycleInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2 = [5]string{
	0: "status_code",
	1: "contract_info",
	2: "shop_info",
	3: "bank_account_info",
	4: "deposit_cycle_info",
}

// Decode decodes ExaminationInfoV2 from json.
func (s *ExaminationInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "contract_info":
			if err := func() error {
				s.ContractInfo.Reset()
				if err := s.ContractInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info\"")
			}
		case "shop_info":
			if err := func() error {
				s.ShopInfo.Reset()
				if err := s.ShopInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info\"")
			}
		case "bank_account_info":
			if err := func() error {
				s.BankAccountInfo.Reset()
				if err := s.BankAccountInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_account_info\"")
			}
		case "deposit_cycle_info":
			if err := func() error {
				s.DepositCycleInfo.Reset()
				if err := s.DepositCycleInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ContractInfo.Set {
			e.FieldStart("contract_info")
			s.ContractInfo.Encode(e)
		}
	}
	{
		if s.ShopInfo.Set {
			e.FieldStart("shop_info")
			s.ShopInfo.Encode(e)
		}
	}
	{
		if s.BankAccountInfo.Set {
			e.FieldStart("bank_account_info")
			s.BankAccountInfo.Encode(e)
		}
	}
	{
		if s.DepositCycleInfo.Set {
			e.FieldStart("deposit_cycle_info")
			s.DepositCycleInfo.Encode(e)
		}
	}
	{
		if s.MerchantCategoryCode.Set {
			e.FieldStart("merchant_category_code")
			s.MerchantCategoryCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequest = [5]string{
	0: "contract_info",
	1: "shop_info",
	2: "bank_account_info",
	3: "deposit_cycle_info",
	4: "merchant_category_code",
}

// Decode decodes ExaminationInfoV2UpdatingRequest from json.
func (s *ExaminationInfoV2UpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "contract_info":
			if err := func() error {
				s.ContractInfo.Reset()
				if err := s.ContractInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info\"")
			}
		case "shop_info":
			if err := func() error {
				s.ShopInfo.Reset()
				if err := s.ShopInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info\"")
			}
		case "bank_account_info":
			if err := func() error {
				s.BankAccountInfo.Reset()
				if err := s.BankAccountInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_account_info\"")
			}
		case "deposit_cycle_info":
			if err := func() error {
				s.DepositCycleInfo.Reset()
				if err := s.DepositCycleInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_info\"")
			}
		case "merchant_category_code":
			if err := func() error {
				s.MerchantCategoryCode.Reset()
				if err := s.MerchantCategoryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_category_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationMasterId as json.
func (s ExaminationMasterId) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationMasterId from json.
func (s *ExaminationMasterId) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationMasterId to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationMasterId(v) {
	case ExaminationMasterIdVM:
		*s = ExaminationMasterIdVM
	case ExaminationMasterIdJad:
		*s = ExaminationMasterIdJad
	case ExaminationMasterIdApplepayVM:
		*s = ExaminationMasterIdApplepayVM
	case ExaminationMasterIdApplepayJad:
		*s = ExaminationMasterIdApplepayJad
	case ExaminationMasterIdKonbini:
		*s = ExaminationMasterIdKonbini
	case ExaminationMasterIdPaypay:
		*s = ExaminationMasterIdPaypay
	case ExaminationMasterIdDirectdebit:
		*s = ExaminationMasterIdDirectdebit
	default:
		*s = ExaminationMasterId(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationMasterId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationMasterId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationStatus as json.
func (s ExaminationStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationStatus from json.
func (s *ExaminationStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationStatus(v) {
	case ExaminationStatus1:
		*s = ExaminationStatus1
	case ExaminationStatus2:
		*s = ExaminationStatus2
	case ExaminationStatus3:
		*s = ExaminationStatus3
	default:
		*s = ExaminationStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK as json.
func (s ExecutePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardExecutingResponseExecutePaymentOK:
		s.PaymentCardExecutingResponse.Encode(e)
	case PaymentApplePayExecutingResponseExecutePaymentOK:
		s.PaymentApplePayExecutingResponse.Encode(e)
	case PaymentKonbiniExecutingResponseExecutePaymentOK:
		s.PaymentKonbiniExecutingResponse.Encode(e)
	case PaymentPayPayExecutingResponseExecutePaymentOK:
		s.PaymentPayPayExecutingResponse.Encode(e)
	case PaymentDirectDebitExecutingResponseExecutePaymentOK:
		s.PaymentDirectDebitExecutingResponse.Encode(e)
	}
}

func (s ExecutePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardExecutingResponseExecutePaymentOK:
		s.PaymentCardExecutingResponse.encodeFields(e)
	case PaymentApplePayExecutingResponseExecutePaymentOK:
		s.PaymentApplePayExecutingResponse.encodeFields(e)
	case PaymentKonbiniExecutingResponseExecutePaymentOK:
		s.PaymentKonbiniExecutingResponse.encodeFields(e)
	case PaymentPayPayExecutingResponseExecutePaymentOK:
		s.PaymentPayPayExecutingResponse.encodeFields(e)
	case PaymentDirectDebitExecutingResponseExecutePaymentOK:
		s.PaymentDirectDebitExecutingResponse.encodeFields(e)
	}
}

// Decode decodes ExecutePaymentOK from json.
func (s *ExecutePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := PaymentCardExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := PaymentCardExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := PaymentCardExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := PaymentCardExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := PaymentCardExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := PaymentCardExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := PaymentApplePayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_format":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_width":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_height":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "overpayment_flag":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_overpayment_flag":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_code":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_store_code":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "os_version":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "xdpi":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "ydpi":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_serial":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "invoice_id":
				match := PaymentKonbiniExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := PaymentPayPayExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := PaymentDirectDebitExecutingResponseExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardExecutingResponseExecutePaymentOK:
		if err := s.PaymentCardExecutingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayExecutingResponseExecutePaymentOK:
		if err := s.PaymentApplePayExecutingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniExecutingResponseExecutePaymentOK:
		if err := s.PaymentKonbiniExecutingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayExecutingResponseExecutePaymentOK:
		if err := s.PaymentPayPayExecutingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitExecutingResponseExecutePaymentOK:
		if err := s.PaymentDirectDebitExecutingResponse.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq as json.
func (s ExecutePaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardExecutingRequestExecutePaymentReq:
		s.PaymentCardExecutingRequest.Encode(e)
	case PaymentApplePayExecutingRequestExecutePaymentReq:
		s.PaymentApplePayExecutingRequest.Encode(e)
	case PaymentKonbiniExecutingRequestExecutePaymentReq:
		s.PaymentKonbiniExecutingRequest.Encode(e)
	case PaymentPayPayExecutingRequestExecutePaymentReq:
		s.PaymentPayPayExecutingRequest.Encode(e)
	case PaymentDirectDebitExecutingRequestExecutePaymentReq:
		s.PaymentDirectDebitExecutingRequest.Encode(e)
	}
}

func (s ExecutePaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardExecutingRequestExecutePaymentReq:
		s.PaymentCardExecutingRequest.encodeFields(e)
	case PaymentApplePayExecutingRequestExecutePaymentReq:
		s.PaymentApplePayExecutingRequest.encodeFields(e)
	case PaymentKonbiniExecutingRequestExecutePaymentReq:
		s.PaymentKonbiniExecutingRequest.encodeFields(e)
	case PaymentPayPayExecutingRequestExecutePaymentReq:
		s.PaymentPayPayExecutingRequest.encodeFields(e)
	case PaymentDirectDebitExecutingRequestExecutePaymentReq:
		s.PaymentDirectDebitExecutingRequest.encodeFields(e)
	}
}

// Decode decodes ExecutePaymentReq from json.
func (s *ExecutePaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "method":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pay_times":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ch_acc_change":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ch_acc_date":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ch_acc_pw_change":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_nb_purchase_account":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_payment_acc_age":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_provision_attempts_day":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_address_usage":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_name_ind":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_suspicious_acc_activity":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_txn_activity_day":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_txn_activity_year":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_three_ds_req_auth_data":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_three_ds_req_auth_method":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_addr_match":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_country":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_state":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_city":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_line_1":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_line_2":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_line_3":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_post_code":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_country":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_state":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_city":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_line_1":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_line_2":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_line_3":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_post_code":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_ind":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_delivery_email_address":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_home_phone_cc":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_home_phone_no":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_mobile_phone_cc":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_mobile_phone_no":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_work_phone_cc":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_work_phone_no":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_delivery_timeframe":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_pre_order_date":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_pre_order_purchase_ind":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_reorder_items_ind":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_recurring_expiry":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_recurring_frequency":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_gift_card_amount":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_gift_card_count":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_gift_card_curr":
				match := PaymentCardExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := PaymentKonbiniExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := PaymentKonbiniExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := PaymentKonbiniExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := PaymentKonbiniExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pixel_ratio":
				match := PaymentKonbiniExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_size_type":
				match := PaymentKonbiniExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := PaymentPayPayExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := PaymentPayPayExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "user_agent":
				match := PaymentPayPayExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := PaymentDirectDebitExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := PaymentDirectDebitExecutingRequestExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = PaymentApplePayExecutingRequestExecutePaymentReq
	}
	switch s.Type {
	case PaymentCardExecutingRequestExecutePaymentReq:
		if err := s.PaymentCardExecutingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayExecutingRequestExecutePaymentReq:
		if err := s.PaymentApplePayExecutingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniExecutingRequestExecutePaymentReq:
		if err := s.PaymentKonbiniExecutingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayExecutingRequestExecutePaymentReq:
		if err := s.PaymentPayPayExecutingRequest.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitExecutingRequestExecutePaymentReq:
		if err := s.PaymentDirectDebitExecutingRequest.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Expire as json.
func (s Expire) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Expire from json.
func (s *Expire) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Expire to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Expire(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Expire) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Expire) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FeeAmount as json.
func (s FeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes FeeAmount from json.
func (s *FeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = FeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FileName as json.
func (s FileName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes FileName from json.
func (s *FileName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FileName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = FileName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FileName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FileName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FincodeAPIError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FincodeAPIError) encodeFields(e *jx.Encoder) {
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ErrorMessage.Set {
			e.FieldStart("error_message")
			s.ErrorMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfFincodeAPIError = [2]string{
	0: "error_code",
	1: "error_message",
}

// Decode decodes FincodeAPIError from json.
func (s *FincodeAPIError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FincodeAPIError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FincodeAPIError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FincodeAPIError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FincodeAPIError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FincodeAPIErrorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FincodeAPIErrorResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Errors != nil {
			e.FieldStart("errors")
			e.ArrStart()
			for _, elem := range s.Errors {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfFincodeAPIErrorResponse = [1]string{
	0: "errors",
}

// Decode decodes FincodeAPIErrorResponse from json.
func (s *FincodeAPIErrorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FincodeAPIErrorResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "errors":
			if err := func() error {
				s.Errors = make([]FincodeAPIError, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem FincodeAPIError
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Errors = append(s.Errors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errors\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FincodeAPIErrorResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FincodeAPIErrorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FincodeAPIErrorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FincodeEvent as json.
func (s FincodeEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes FincodeEvent from json.
func (s *FincodeEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FincodeEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch FincodeEvent(v) {
	case FincodeEventPaymentsCardRegist:
		*s = FincodeEventPaymentsCardRegist
	case FincodeEventPaymentsCardExec:
		*s = FincodeEventPaymentsCardExec
	case FincodeEventPaymentsCardCapture:
		*s = FincodeEventPaymentsCardCapture
	case FincodeEventPaymentsCardCancel:
		*s = FincodeEventPaymentsCardCancel
	case FincodeEventPaymentsCardAuth:
		*s = FincodeEventPaymentsCardAuth
	case FincodeEventPaymentsCardChange:
		*s = FincodeEventPaymentsCardChange
	case FincodeEventPaymentsCardSecure2Authenticate:
		*s = FincodeEventPaymentsCardSecure2Authenticate
	case FincodeEventPaymentsCardSecure2Result:
		*s = FincodeEventPaymentsCardSecure2Result
	case FincodeEventPaymentsCardSecure:
		*s = FincodeEventPaymentsCardSecure
	case FincodeEventPaymentsApplepayRegist:
		*s = FincodeEventPaymentsApplepayRegist
	case FincodeEventPaymentsApplepayExec:
		*s = FincodeEventPaymentsApplepayExec
	case FincodeEventPaymentsApplepayCapture:
		*s = FincodeEventPaymentsApplepayCapture
	case FincodeEventPaymentsApplepayCancel:
		*s = FincodeEventPaymentsApplepayCancel
	case FincodeEventPaymentsKonbiniRegist:
		*s = FincodeEventPaymentsKonbiniRegist
	case FincodeEventPaymentsKonbiniExec:
		*s = FincodeEventPaymentsKonbiniExec
	case FincodeEventPaymentsKonbiniCancel:
		*s = FincodeEventPaymentsKonbiniCancel
	case FincodeEventPaymentsKonbiniComplete:
		*s = FincodeEventPaymentsKonbiniComplete
	case FincodeEventPaymentsKonbiniCompleteStub:
		*s = FincodeEventPaymentsKonbiniCompleteStub
	case FincodeEventPaymentsKonbiniExpiredUpdateBatch:
		*s = FincodeEventPaymentsKonbiniExpiredUpdateBatch
	case FincodeEventPaymentsPaypayRegist:
		*s = FincodeEventPaymentsPaypayRegist
	case FincodeEventPaymentsPaypayExec:
		*s = FincodeEventPaymentsPaypayExec
	case FincodeEventPaymentsPaypayCapture:
		*s = FincodeEventPaymentsPaypayCapture
	case FincodeEventPaymentsPaypayCancel:
		*s = FincodeEventPaymentsPaypayCancel
	case FincodeEventPaymentsPaypayChange:
		*s = FincodeEventPaymentsPaypayChange
	case FincodeEventPaymentsPaypayComplete:
		*s = FincodeEventPaymentsPaypayComplete
	case FincodeEventPaymentsDirectdebitRegist:
		*s = FincodeEventPaymentsDirectdebitRegist
	case FincodeEventPaymentsDirectdebitExec:
		*s = FincodeEventPaymentsDirectdebitExec
	case FincodeEventPaymentsDirectdebitCancel:
		*s = FincodeEventPaymentsDirectdebitCancel
	case FincodeEventPaymentsDirectdebitChange:
		*s = FincodeEventPaymentsDirectdebitChange
	case FincodeEventPaymentsDirectdebitComplete:
		*s = FincodeEventPaymentsDirectdebitComplete
	case FincodeEventPaymentsDirectdebitCompleteStub:
		*s = FincodeEventPaymentsDirectdebitCompleteStub
	case FincodeEventCustomersPaymentMethodsUpdated:
		*s = FincodeEventCustomersPaymentMethodsUpdated
	case FincodeEventCardRegist:
		*s = FincodeEventCardRegist
	case FincodeEventCardUpdate:
		*s = FincodeEventCardUpdate
	case FincodeEventSubscriptionCardRegist:
		*s = FincodeEventSubscriptionCardRegist
	case FincodeEventSubscriptionCardDelete:
		*s = FincodeEventSubscriptionCardDelete
	case FincodeEventSubscriptionCardUpdate:
		*s = FincodeEventSubscriptionCardUpdate
	case FincodeEventRecurringCardBatch:
		*s = FincodeEventRecurringCardBatch
	case FincodeEventSubscriptionDirectdebitRegist:
		*s = FincodeEventSubscriptionDirectdebitRegist
	case FincodeEventSubscriptionDirectdebitDelete:
		*s = FincodeEventSubscriptionDirectdebitDelete
	case FincodeEventSubscriptionDirectdebitUpdate:
		*s = FincodeEventSubscriptionDirectdebitUpdate
	case FincodeEventRecurringDirectdebitBatch:
		*s = FincodeEventRecurringDirectdebitBatch
	case FincodeEventPaymentsBulkCardRegist:
		*s = FincodeEventPaymentsBulkCardRegist
	case FincodeEventPaymentsBulkCardBatch:
		*s = FincodeEventPaymentsBulkCardBatch
	case FincodeEventContractsStatusCodeUpdated:
		*s = FincodeEventContractsStatusCodeUpdated
	default:
		*s = FincodeEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FincodeEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FincodeEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FixedFee as json.
func (s FixedFee) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes FixedFee from json.
func (s *FixedFee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FixedFee to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = FixedFee(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FixedFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FixedFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Forward as json.
func (s Forward) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Forward from json.
func (s *Forward) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Forward to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Forward(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Forward) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Forward) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GuideMailSendFlag as json.
func (s GuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GuideMailSendFlag from json.
func (s *GuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GuideMailSendFlag(v) {
	case GuideMailSendFlag0:
		*s = GuideMailSendFlag0
	case GuideMailSendFlag1:
		*s = GuideMailSendFlag1
	default:
		*s = GuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HolderName as json.
func (s HolderName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes HolderName from json.
func (s *HolderName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HolderName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HolderName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HolderName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HolderName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HowToUse as json.
func (s HowToUse) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes HowToUse from json.
func (s *HowToUse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode HowToUse to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = HowToUse(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s HowToUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *HowToUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Hp as json.
func (s Hp) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Hp from json.
func (s *Hp) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Hp to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Hp(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Hp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Hp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ID as json.
func (s ID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ID from json.
func (s *ID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InitialAmount as json.
func (s InitialAmount) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes InitialAmount from json.
func (s *InitialAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InitialAmount to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = InitialAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s InitialAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InitialAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InitialTax as json.
func (s InitialTax) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes InitialTax from json.
func (s *InitialTax) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InitialTax to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = InitialTax(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s InitialTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InitialTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes IntervalCount as json.
func (s IntervalCount) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes IntervalCount from json.
func (s *IntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode IntervalCount to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch IntervalCount(v) {
	case IntervalCount1:
		*s = IntervalCount1
	case IntervalCount2:
		*s = IntervalCount2
	case IntervalCount3:
		*s = IntervalCount3
	case IntervalCount6:
		*s = IntervalCount6
	default:
		*s = IntervalCount(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s IntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *IntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes IntervalPattern as json.
func (s IntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes IntervalPattern from json.
func (s *IntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode IntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch IntervalPattern(v) {
	case IntervalPatternMonth:
		*s = IntervalPatternMonth
	case IntervalPatternYear:
		*s = IntervalPatternYear
	default:
		*s = IntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s IntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *IntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InvoiceID as json.
func (s InvoiceID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes InvoiceID from json.
func (s *InvoiceID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InvoiceID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = InvoiceID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s InvoiceID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InvoiceID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ItemCode as json.
func (s ItemCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ItemCode from json.
func (s *ItemCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ItemCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ItemCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ItemCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ItemCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KonbiniCode as json.
func (s KonbiniCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes KonbiniCode from json.
func (s *KonbiniCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KonbiniCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch KonbiniCode(v) {
	case KonbiniCode00010:
		*s = KonbiniCode00010
	case KonbiniCode00020:
		*s = KonbiniCode00020
	case KonbiniCode00030:
		*s = KonbiniCode00030
	case KonbiniCode00080:
		*s = KonbiniCode00080
	case KonbiniCode00760:
		*s = KonbiniCode00760
	default:
		*s = KonbiniCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KonbiniPaymentProcessResult as json.
func (s KonbiniPaymentProcessResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes KonbiniPaymentProcessResult from json.
func (s *KonbiniPaymentProcessResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KonbiniPaymentProcessResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch KonbiniPaymentProcessResult(v) {
	case KonbiniPaymentProcessResult000:
		*s = KonbiniPaymentProcessResult000
	case KonbiniPaymentProcessResult001:
		*s = KonbiniPaymentProcessResult001
	case KonbiniPaymentProcessResult002:
		*s = KonbiniPaymentProcessResult002
	case KonbiniPaymentProcessResult003:
		*s = KonbiniPaymentProcessResult003
	case KonbiniPaymentProcessResult004:
		*s = KonbiniPaymentProcessResult004
	case KonbiniPaymentProcessResult005:
		*s = KonbiniPaymentProcessResult005
	case KonbiniPaymentProcessResult006:
		*s = KonbiniPaymentProcessResult006
	case KonbiniPaymentProcessResult007:
		*s = KonbiniPaymentProcessResult007
	case KonbiniPaymentProcessResult008:
		*s = KonbiniPaymentProcessResult008
	case KonbiniPaymentProcessResult009:
		*s = KonbiniPaymentProcessResult009
	case KonbiniPaymentProcessResult010:
		*s = KonbiniPaymentProcessResult010
	case KonbiniPaymentProcessResult011:
		*s = KonbiniPaymentProcessResult011
	case KonbiniPaymentProcessResult012:
		*s = KonbiniPaymentProcessResult012
	case KonbiniPaymentProcessResult013:
		*s = KonbiniPaymentProcessResult013
	case KonbiniPaymentProcessResult900:
		*s = KonbiniPaymentProcessResult900
	default:
		*s = KonbiniPaymentProcessResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KonbiniPaymentProcessResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KonbiniPaymentProcessResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KonbiniReceptionMailSendFlag as json.
func (s KonbiniReceptionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes KonbiniReceptionMailSendFlag from json.
func (s *KonbiniReceptionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KonbiniReceptionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch KonbiniReceptionMailSendFlag(v) {
	case KonbiniReceptionMailSendFlag0:
		*s = KonbiniReceptionMailSendFlag0
	case KonbiniReceptionMailSendFlag1:
		*s = KonbiniReceptionMailSendFlag1
	default:
		*s = KonbiniReceptionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KonbiniReceptionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KonbiniReceptionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KonbiniStoreCode as json.
func (s KonbiniStoreCode) Encode(e *jx.Encoder) {
	unwrapped := jx.Raw(s)

	if len(unwrapped) != 0 {
		e.Raw(unwrapped)
	}
}

// Decode decodes KonbiniStoreCode from json.
func (s *KonbiniStoreCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KonbiniStoreCode to nil")
	}
	var unwrapped jx.Raw
	if err := func() error {
		v, err := d.RawAppend(nil)
		unwrapped = jx.Raw(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = KonbiniStoreCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s KonbiniStoreCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KonbiniStoreCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LogKeepDays as json.
func (s LogKeepDays) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes LogKeepDays from json.
func (s *LogKeepDays) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode LogKeepDays to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = LogKeepDays(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s LogKeepDays) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *LogKeepDays) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LostTrial as json.
func (s LostTrial) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes LostTrial from json.
func (s *LostTrial) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode LostTrial to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = LostTrial(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s LostTrial) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *LostTrial) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MailCustomerName as json.
func (s MailCustomerName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes MailCustomerName from json.
func (s *MailCustomerName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MailCustomerName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = MailCustomerName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MailCustomerName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MailCustomerName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantPaymentID as json.
func (s MerchantPaymentID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes MerchantPaymentID from json.
func (s *MerchantPaymentID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MerchantPaymentID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = MerchantPaymentID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MerchantPaymentID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MerchantPaymentID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantRefundID as json.
func (s MerchantRefundID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes MerchantRefundID from json.
func (s *MerchantRefundID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MerchantRefundID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = MerchantRefundID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MerchantRefundID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MerchantRefundID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantRevertID as json.
func (s MerchantRevertID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes MerchantRevertID from json.
func (s *MerchantRevertID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MerchantRevertID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = MerchantRevertID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MerchantRevertID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MerchantRevertID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantUpdateID as json.
func (s MerchantUpdateID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes MerchantUpdateID from json.
func (s *MerchantUpdateID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MerchantUpdateID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = MerchantUpdateID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s MerchantUpdateID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *MerchantUpdateID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Name as json.
func (s Name) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Name from json.
func (s *Name) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Name to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Name(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Name) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Name) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NextChargeDate as json.
func (s NextChargeDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes NextChargeDate from json.
func (s *NextChargeDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NextChargeDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = NextChargeDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NextChargeDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NextChargeDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountNameKana as json.
func (o NilAccountNameKana) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountNameKana from json.
func (o *NilAccountNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilAccountNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountNameKana
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilAccountNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilAccountNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BankCode as json.
func (o NilBankCode) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BankCode from json.
func (o *NilBankCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilBankCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v BankCode
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilBankCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilBankCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o NilBool) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *NilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractInfoV2RepresentativeGender as json.
func (o NilContractInfoV2RepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ContractInfoV2RepresentativeGender from json.
func (o *NilContractInfoV2RepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilContractInfoV2RepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContractInfoV2RepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilContractInfoV2RepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilContractInfoV2RepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitApplicationType as json.
func (o NilDirectDebitApplicationType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DirectDebitApplicationType from json.
func (o *NilDirectDebitApplicationType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilDirectDebitApplicationType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DirectDebitApplicationType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilDirectDebitApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilDirectDebitApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o NilFloat64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *NilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TargetDate as json.
func (o NilTargetDate) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TargetDate from json.
func (o *NilTargetDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilTargetDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TargetDate
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilTargetDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilTargetDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NontaxableFeeAmount as json.
func (s NontaxableFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes NontaxableFeeAmount from json.
func (s *NontaxableFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NontaxableFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = NontaxableFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NontaxableFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NontaxableFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccessID as json.
func (o OptAccessID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccessID from json.
func (o *OptAccessID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccessID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccessID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccessID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailTradeType as json.
func (o OptAccountDetailTradeType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes AccountDetailTradeType from json.
func (o *OptAccountDetailTradeType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountDetailTradeType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountDetailTradeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountDetailTradeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountID as json.
func (o OptAccountID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountID from json.
func (o *OptAccountID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPaymentMethod as json.
func (o OptAccountPaymentMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AccountPaymentMethod from json.
func (o *OptAccountPaymentMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountPaymentMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPropertiesID as json.
func (o OptAccountPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountPropertiesID from json.
func (o *OptAccountPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Acquirer as json.
func (o OptAcquirer) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Acquirer from json.
func (o *OptAcquirer) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAcquirer to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAcquirer) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAcquirer) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AcquirerContractStatus as json.
func (o OptAcquirerContractStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AcquirerContractStatus from json.
func (o *OptAcquirerContractStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAcquirerContractStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAcquirerContractStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAcquirerContractStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Amount as json.
func (o OptAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Amount from json.
func (o *OptAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAmount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ApplePayPaymentJobCode as json.
func (o OptApplePayPaymentJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ApplePayPaymentJobCode from json.
func (o *OptApplePayPaymentJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptApplePayPaymentJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptApplePayPaymentJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptApplePayPaymentJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BankAccountInfoV2 as json.
func (o OptBankAccountInfoV2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BankAccountInfoV2 from json.
func (o *OptBankAccountInfoV2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBankAccountInfoV2 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBankAccountInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBankAccountInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelOverpaymentFlag as json.
func (o OptCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CancelOverpaymentFlag from json.
func (o *OptCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardBrand as json.
func (o OptCardBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardBrand from json.
func (o *OptCardBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardBrand to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardDefaultFlag as json.
func (o OptCardDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardDefaultFlag from json.
func (o *OptCardDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardNo as json.
func (o OptCardNo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CardNo from json.
func (o *OptCardNo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardNo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardNoHash as json.
func (o OptCardNoHash) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CardNoHash from json.
func (o *OptCardNoHash) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardNoHash to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardNoHash) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardNoHash) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPayMethod as json.
func (o OptCardPayMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardPayMethod from json.
func (o *OptCardPayMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardPayMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardPayMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardPayMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPayTimes as json.
func (o OptCardPayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardPayTimes from json.
func (o *OptCardPayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardPayTimes to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPaymentJobCode as json.
func (o OptCardPaymentJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardPaymentJobCode from json.
func (o *OptCardPaymentJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardPaymentJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardPaymentJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardPaymentJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPaymentSessionJobCode as json.
func (o OptCardPaymentSessionJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardPaymentSessionJobCode from json.
func (o *OptCardPaymentSessionJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardPaymentSessionJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardPaymentSessionJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardPaymentSessionJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPaymentSetting as json.
func (o OptCardPaymentSetting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CardPaymentSetting from json.
func (o *OptCardPaymentSetting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardPaymentSetting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardPaymentSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardPaymentSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCompletionMailSendFlag as json.
func (o OptCardRegistrationSessionCompletionMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCompletionMailSendFlag from json.
func (o *OptCardRegistrationSessionCompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionCompletionMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionCompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionCompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionGuideMailSendFlag as json.
func (o OptCardRegistrationSessionGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionGuideMailSendFlag from json.
func (o *OptCardRegistrationSessionGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionGuideMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionPropertiesExpire as json.
func (o OptCardRegistrationSessionPropertiesExpire) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CardRegistrationSessionPropertiesExpire from json.
func (o *OptCardRegistrationSessionPropertiesExpire) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionPropertiesExpire to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionPropertiesExpire) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionPropertiesExpire) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionStatus as json.
func (o OptCardRegistrationSessionStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionStatus from json.
func (o *OptCardRegistrationSessionStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardType as json.
func (o OptCardType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardType from json.
func (o *OptCardType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompletionMailSendFlag as json.
func (o OptCompletionMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CompletionMailSendFlag from json.
func (o *OptCompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCompletionMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContentInfoType as json.
func (o OptContentInfoType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContentInfoType from json.
func (o *OptContentInfoType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContentInfoType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContentInfoType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContentInfoType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContentInfoV2 as json.
func (o OptContentInfoV2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContentInfoV2 from json.
func (o *OptContentInfoV2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContentInfoV2 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContentInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContentInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractAvailableStatusCode as json.
func (o OptContractAvailableStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ContractAvailableStatusCode from json.
func (o *OptContractAvailableStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractAvailableStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractAvailableStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractAvailableStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractBankAccountInfo as json.
func (o OptContractBankAccountInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractBankAccountInfo from json.
func (o *OptContractBankAccountInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractBankAccountInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractBankAccountInfoAccountKind as json.
func (o OptContractBankAccountInfoAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContractBankAccountInfoAccountKind from json.
func (o *OptContractBankAccountInfoAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractBankAccountInfoAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractBankAccountInfoAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractBankAccountInfoAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractContractDetail as json.
func (o OptContractContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractContractDetail from json.
func (o *OptContractContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractContractDetail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractContractDetailSiteExisting as json.
func (o OptContractContractDetailSiteExisting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContractContractDetailSiteExisting from json.
func (o *OptContractContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractContractDetailSiteExisting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractInfoV2 as json.
func (o OptContractInfoV2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractInfoV2 from json.
func (o *OptContractInfoV2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractInfoV2 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractInputStatus as json.
func (o OptContractInputStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContractInputStatus from json.
func (o *OptContractInputStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractInputStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractStatus as json.
func (o OptContractStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ContractStatus from json.
func (o *OptContractStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CorporateInfoV2 as json.
func (o OptCorporateInfoV2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CorporateInfoV2 from json.
func (o *OptCorporateInfoV2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCorporateInfoV2 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCorporateInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCorporateInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CorporateName as json.
func (o OptCorporateName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CorporateName from json.
func (o *OptCorporateName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCorporateName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCorporateName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCorporateName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CorporateNameKana as json.
func (o OptCorporateNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CorporateNameKana from json.
func (o *OptCorporateNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCorporateNameKana to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCorporateNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCorporateNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Created as json.
func (o OptCreated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Created from json.
func (o *OptCreated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreated to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CurrencyCode as json.
func (o OptCurrencyCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CurrencyCode from json.
func (o *OptCurrencyCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCurrencyCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCurrencyCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCurrencyCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DefaultFlag as json.
func (o OptDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DefaultFlag from json.
func (o *OptDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DeleteFlag as json.
func (o OptDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DeleteFlag from json.
func (o *OptDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositCycleInfoV2 as json.
func (o OptDepositCycleInfoV2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DepositCycleInfoV2 from json.
func (o *OptDepositCycleInfoV2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDepositCycleInfoV2 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDepositCycleInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDepositCycleInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositCycleMasterId as json.
func (o OptDepositCycleMasterId) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes DepositCycleMasterId from json.
func (o *OptDepositCycleMasterId) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDepositCycleMasterId to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDepositCycleMasterId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDepositCycleMasterId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositStatusCode as json.
func (o OptDepositStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes DepositStatusCode from json.
func (o *OptDepositStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDepositStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositTargetBankAccountInfo as json.
func (o OptDepositTargetBankAccountInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DepositTargetBankAccountInfo from json.
func (o *OptDepositTargetBankAccountInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDepositTargetBankAccountInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDepositTargetBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDepositTargetBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositTargetBankAccountInfoAccountKind as json.
func (o OptDepositTargetBankAccountInfoAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DepositTargetBankAccountInfoAccountKind from json.
func (o *OptDepositTargetBankAccountInfoAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDepositTargetBankAccountInfoAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDepositTargetBankAccountInfoAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDepositTargetBankAccountInfoAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DeviceName as json.
func (o OptDeviceName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DeviceName from json.
func (o *OptDeviceName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDeviceName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDeviceName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDeviceName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitResultCode as json.
func (o OptDirectDebitResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DirectDebitResultCode from json.
func (o *OptDirectDebitResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDirectDebitResultCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDirectDebitResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDirectDebitResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EndMonthFlag as json.
func (o OptEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EndMonthFlag from json.
func (o *OptEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ErrorCode as json.
func (o OptErrorCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ErrorCode from json.
func (o *OptErrorCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptErrorCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptErrorCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptErrorCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationFileType as json.
func (o OptExaminationFileType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationFileType from json.
func (o *OptExaminationFileType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationFileType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationFileType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationFileType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoContractDetail as json.
func (o OptExaminationInfoContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoContractDetail from json.
func (o *OptExaminationInfoContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoContractDetail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoContractDetailSiteExisting as json.
func (o OptExaminationInfoContractDetailSiteExisting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoContractDetailSiteExisting from json.
func (o *OptExaminationInfoContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoContractDetailSiteExisting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoContractInputStatus as json.
func (o OptExaminationInfoContractInputStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoContractInputStatus from json.
func (o *OptExaminationInfoContractInputStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoContractInputStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetail as json.
func (o OptExaminationInfoUpdatingRequestContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetail from json.
func (o *OptExaminationInfoUpdatingRequestContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestContractDetail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailSiteExisting as json.
func (o OptExaminationInfoUpdatingRequestContractDetailSiteExisting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailSiteExisting from json.
func (o *OptExaminationInfoUpdatingRequestContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestContractDetailSiteExisting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationMasterId as json.
func (o OptExaminationMasterId) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationMasterId from json.
func (o *OptExaminationMasterId) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationMasterId to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationMasterId) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationMasterId) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationStatus as json.
func (o OptExaminationStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationStatus from json.
func (o *OptExaminationStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FileName as json.
func (o OptFileName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes FileName from json.
func (o *OptFileName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFileName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFileName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFileName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FincodeEvent as json.
func (o OptFincodeEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes FincodeEvent from json.
func (o *OptFincodeEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFincodeEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFincodeEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFincodeEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GuideMailSendFlag as json.
func (o OptGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GuideMailSendFlag from json.
func (o *OptGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGuideMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ID as json.
func (o OptID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ID from json.
func (o *OptID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InitialAmount as json.
func (o OptInitialAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes InitialAmount from json.
func (o *OptInitialAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInitialAmount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInitialAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInitialAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InitialTax as json.
func (o OptInitialTax) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes InitialTax from json.
func (o *OptInitialTax) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInitialTax to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInitialTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInitialTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes IntervalCount as json.
func (o OptIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes IntervalCount from json.
func (o *OptIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes IntervalPattern as json.
func (o OptIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes IntervalPattern from json.
func (o *OptIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KonbiniCode as json.
func (o OptKonbiniCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes KonbiniCode from json.
func (o *OptKonbiniCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKonbiniCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KonbiniPaymentProcessResult as json.
func (o OptKonbiniPaymentProcessResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes KonbiniPaymentProcessResult from json.
func (o *OptKonbiniPaymentProcessResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKonbiniPaymentProcessResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKonbiniPaymentProcessResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKonbiniPaymentProcessResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NextChargeDate as json.
func (o OptNextChargeDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NextChargeDate from json.
func (o *OptNextChargeDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNextChargeDate to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNextChargeDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNextChargeDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIKeyDisplayFlag as json.
func (o OptNilAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes APIKeyDisplayFlag from json.
func (o *OptNilAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v APIKeyDisplayFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIVersion as json.
func (o OptNilAPIVersion) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes APIVersion from json.
func (o *OptNilAPIVersion) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAPIVersion to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v APIVersion
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAPIVersion) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAPIVersion) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AboutExpiration as json.
func (o OptNilAboutExpiration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AboutExpiration from json.
func (o *OptNilAboutExpiration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAboutExpiration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AboutExpiration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAboutExpiration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAboutExpiration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyType as json.
func (o OptNilAccountDetailApplyType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes AccountDetailApplyType from json.
func (o *OptNilAccountDetailApplyType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountDetailApplyType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountDetailApplyType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountDetailApplyType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountDetailApplyType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyTypeForPlatformFee as json.
func (o OptNilAccountDetailApplyTypeForPlatformFee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes AccountDetailApplyTypeForPlatformFee from json.
func (o *OptNilAccountDetailApplyTypeForPlatformFee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountDetailApplyTypeForPlatformFee to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountDetailApplyTypeForPlatformFee
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountDetailApplyTypeForPlatformFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountDetailApplyTypeForPlatformFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountName as json.
func (o OptNilAccountName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountName from json.
func (o *OptNilAccountName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountNumber as json.
func (o OptNilAccountNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountNumber from json.
func (o *OptNilAccountNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountNumber to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountNumber
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPropertiesTotalAmount as json.
func (o OptNilAccountPropertiesTotalAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountPropertiesTotalAmount from json.
func (o *OptNilAccountPropertiesTotalAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountPropertiesTotalAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountPropertiesTotalAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountPropertiesTotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountPropertiesTotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountType as json.
func (o OptNilAccountType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AccountType from json.
func (o *OptNilAccountType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrCity as json.
func (o OptNilAddrCity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddrCity from json.
func (o *OptNilAddrCity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddrCity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AddrCity
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddrCity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddrCity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrCountry as json.
func (o OptNilAddrCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddrCountry from json.
func (o *OptNilAddrCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddrCountry to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AddrCountry
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddrCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddrCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrLine1 as json.
func (o OptNilAddrLine1) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddrLine1 from json.
func (o *OptNilAddrLine1) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddrLine1 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AddrLine1
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddrLine1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddrLine1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrLine2 as json.
func (o OptNilAddrLine2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddrLine2 from json.
func (o *OptNilAddrLine2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddrLine2 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AddrLine2
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddrLine2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddrLine2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrLine3 as json.
func (o OptNilAddrLine3) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddrLine3 from json.
func (o *OptNilAddrLine3) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddrLine3 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AddrLine3
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddrLine3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddrLine3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrPostCode as json.
func (o OptNilAddrPostCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddrPostCode from json.
func (o *OptNilAddrPostCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddrPostCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AddrPostCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddrPostCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddrPostCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AddrState as json.
func (o OptNilAddrState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AddrState from json.
func (o *OptNilAddrState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAddrState to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AddrState
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAddrState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAddrState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AggregateTermEnd as json.
func (o OptNilAggregateTermEnd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AggregateTermEnd from json.
func (o *OptNilAggregateTermEnd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAggregateTermEnd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AggregateTermEnd
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAggregateTermEnd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAggregateTermEnd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AggregateTermStart as json.
func (o OptNilAggregateTermStart) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AggregateTermStart from json.
func (o *OptNilAggregateTermStart) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAggregateTermStart to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AggregateTermStart
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAggregateTermStart) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAggregateTermStart) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Approve as json.
func (o OptNilApprove) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Approve from json.
func (o *OptNilApprove) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilApprove to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Approve
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilApprove) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilApprove) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthMaxDate as json.
func (o OptNilAuthMaxDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AuthMaxDate from json.
func (o *OptNilAuthMaxDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAuthMaxDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AuthMaxDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAuthMaxDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAuthMaxDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BankTransferFee as json.
func (o OptNilBankTransferFee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BankTransferFee from json.
func (o *OptNilBankTransferFee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBankTransferFee to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v BankTransferFee
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBankTransferFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBankTransferFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptNilBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptNilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BranchCode as json.
func (o OptNilBranchCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BranchCode from json.
func (o *OptNilBranchCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBranchCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v BranchCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBranchCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBranchCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BusinessDetails as json.
func (o OptNilBusinessDetails) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BusinessDetails from json.
func (o *OptNilBusinessDetails) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBusinessDetails to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v BusinessDetails
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBusinessDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBusinessDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelDescription as json.
func (o OptNilCancelDescription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CancelDescription from json.
func (o *OptNilCancelDescription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCancelDescription to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CancelDescription
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCancelDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCancelDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CancelURL as json.
func (o OptNilCancelURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CancelURL from json.
func (o *OptNilCancelURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCancelURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CancelURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCancelURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCancelURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Capital as json.
func (o OptNilCapital) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Capital from json.
func (o *OptNilCapital) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapital to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Capital
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapital) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapital) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CaptureDescription as json.
func (o OptNilCaptureDescription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CaptureDescription from json.
func (o *OptNilCaptureDescription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCaptureDescription to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CaptureDescription
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCaptureDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCaptureDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ClientFieldN as json.
func (o OptNilClientFieldN) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ClientFieldN from json.
func (o *OptNilClientFieldN) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilClientFieldN to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ClientFieldN
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilClientFieldN) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilClientFieldN) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CodeExpiryDate as json.
func (o OptNilCodeExpiryDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CodeExpiryDate from json.
func (o *OptNilCodeExpiryDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCodeExpiryDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CodeExpiryDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCodeExpiryDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCodeExpiryDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CodeID as json.
func (o OptNilCodeID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CodeID from json.
func (o *OptNilCodeID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCodeID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CodeID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCodeID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCodeID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressBuildingName as json.
func (o OptNilCompanyAddressBuildingName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressBuildingName from json.
func (o *OptNilCompanyAddressBuildingName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressBuildingName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressBuildingName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressBuildingName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressBuildingName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressBuildingNameKana as json.
func (o OptNilCompanyAddressBuildingNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressBuildingNameKana from json.
func (o *OptNilCompanyAddressBuildingNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressBuildingNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressBuildingNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressBuildingNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressBuildingNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressChrome as json.
func (o OptNilCompanyAddressChrome) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressChrome from json.
func (o *OptNilCompanyAddressChrome) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressChrome to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressChrome
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressChrome) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressChrome) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressChromeKana as json.
func (o OptNilCompanyAddressChromeKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressChromeKana from json.
func (o *OptNilCompanyAddressChromeKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressChromeKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressChromeKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressChromeKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressChromeKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressMunicipality as json.
func (o OptNilCompanyAddressMunicipality) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressMunicipality from json.
func (o *OptNilCompanyAddressMunicipality) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressMunicipality to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressMunicipality
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressMunicipality) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressMunicipality) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressMunicipalityKana as json.
func (o OptNilCompanyAddressMunicipalityKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressMunicipalityKana from json.
func (o *OptNilCompanyAddressMunicipalityKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressMunicipalityKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressMunicipalityKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressMunicipalityKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressMunicipalityKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressSection as json.
func (o OptNilCompanyAddressSection) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressSection from json.
func (o *OptNilCompanyAddressSection) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressSection to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressSection
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressSection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressSection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyAddressSectionKana as json.
func (o OptNilCompanyAddressSectionKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyAddressSectionKana from json.
func (o *OptNilCompanyAddressSectionKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyAddressSectionKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyAddressSectionKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyAddressSectionKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyAddressSectionKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyPostalCode as json.
func (o OptNilCompanyPostalCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyPostalCode from json.
func (o *OptNilCompanyPostalCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyPostalCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyPostalCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyPostalCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyPostalCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyPrefecture as json.
func (o OptNilCompanyPrefecture) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyPrefecture from json.
func (o *OptNilCompanyPrefecture) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyPrefecture to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyPrefecture
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyPrefecture) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyPrefecture) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyPrefectureKana as json.
func (o OptNilCompanyPrefectureKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyPrefectureKana from json.
func (o *OptNilCompanyPrefectureKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyPrefectureKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyPrefectureKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyPrefectureKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyPrefectureKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CompanyTel as json.
func (o OptNilCompanyTel) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CompanyTel from json.
func (o *OptNilCompanyTel) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCompanyTel to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CompanyTel
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCompanyTel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCompanyTel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContentDescription as json.
func (o OptNilContentDescription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContentDescription from json.
func (o *OptNilContentDescription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilContentDescription to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContentDescription
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilContentDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilContentDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractSalesDepositStatusCode as json.
func (o OptNilContractSalesDepositStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ContractSalesDepositStatusCode from json.
func (o *OptNilContractSalesDepositStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilContractSalesDepositStatusCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContractSalesDepositStatusCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilContractSalesDepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilContractSalesDepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CorporateNumber as json.
func (o OptNilCorporateNumber) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CorporateNumber from json.
func (o *OptNilCorporateNumber) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCorporateNumber to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CorporateNumber
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCorporateNumber) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCorporateNumber) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Count as json.
func (o OptNilCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Count from json.
func (o *OptNilCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Count
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Credential as json.
func (o OptNilCredential) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Credential from json.
func (o *OptNilCredential) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCredential to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Credential
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCredential) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCredential) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRegistration as json.
func (o OptNilCustomerCardRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardRegistration from json.
func (o *OptNilCustomerCardRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerCardRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerCardRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerDirectdebitRegistration as json.
func (o OptNilCustomerDirectdebitRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerDirectdebitRegistration from json.
func (o *OptNilCustomerDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerDirectdebitRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerDirectdebitRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerGroupID as json.
func (o OptNilCustomerGroupID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerGroupID from json.
func (o *OptNilCustomerGroupID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerGroupID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerGroupID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerGroupID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerGroupID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerName as json.
func (o OptNilCustomerName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerName from json.
func (o *OptNilCustomerName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCard as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingRequestCard from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDirectdebit as json.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebit) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebit from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebit) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestDirectdebit to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestDirectdebit
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DealsInsecureContent as json.
func (o OptNilDealsInsecureContent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DealsInsecureContent from json.
func (o *OptNilDealsInsecureContent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDealsInsecureContent to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DealsInsecureContent
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDealsInsecureContent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDealsInsecureContent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DealsLongApplyContent as json.
func (o OptNilDealsLongApplyContent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DealsLongApplyContent from json.
func (o *OptNilDealsLongApplyContent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDealsLongApplyContent to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DealsLongApplyContent
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDealsLongApplyContent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDealsLongApplyContent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositAmount as json.
func (o OptNilDepositAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DepositAmount from json.
func (o *OptNilDepositAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDepositAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DepositAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDepositAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDepositAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositDate as json.
func (o OptNilDepositDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DepositDate from json.
func (o *OptNilDepositDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDepositDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DepositDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Description as json.
func (o OptNilDescription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Description from json.
func (o *OptNilDescription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDescription to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Description
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DigitalContent as json.
func (o OptNilDigitalContent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DigitalContent from json.
func (o *OptNilDigitalContent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDigitalContent to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DigitalContent
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDigitalContent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDigitalContent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitApplicationType as json.
func (o OptNilDirectDebitApplicationType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DirectDebitApplicationType from json.
func (o *OptNilDirectDebitApplicationType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDirectDebitApplicationType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DirectDebitApplicationType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDirectDebitApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDirectDebitApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitLastResultCode as json.
func (o OptNilDirectDebitLastResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DirectDebitLastResultCode from json.
func (o *OptNilDirectDebitLastResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDirectDebitLastResultCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DirectDebitLastResultCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDirectDebitLastResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDirectDebitLastResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Email as json.
func (o OptNilEmail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Email from json.
func (o *OptNilEmail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEmail to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Email
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EstablishedAt as json.
func (o OptNilEstablishedAt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes EstablishedAt from json.
func (o *OptNilEstablishedAt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEstablishedAt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v EstablishedAt
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEstablishedAt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEstablishedAt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Expire as json.
func (o OptNilExpire) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Expire from json.
func (o *OptNilExpire) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExpire to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Expire
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExpire) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExpire) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FeeAmount as json.
func (o OptNilFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes FeeAmount from json.
func (o *OptNilFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v FeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FixedFee as json.
func (o OptNilFixedFee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes FixedFee from json.
func (o *OptNilFixedFee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFixedFee to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v FixedFee
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFixedFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFixedFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptNilFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptNilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Forward as json.
func (o OptNilForward) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Forward from json.
func (o *OptNilForward) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilForward to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Forward
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilForward) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilForward) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HolderName as json.
func (o OptNilHolderName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HolderName from json.
func (o *OptNilHolderName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilHolderName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v HolderName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilHolderName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilHolderName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes HowToUse as json.
func (o OptNilHowToUse) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes HowToUse from json.
func (o *OptNilHowToUse) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilHowToUse to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v HowToUse
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilHowToUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilHowToUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Hp as json.
func (o OptNilHp) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Hp from json.
func (o *OptNilHp) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilHp to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Hp
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilHp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilHp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptNilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptNilInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptNilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes InvoiceID as json.
func (o OptNilInvoiceID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes InvoiceID from json.
func (o *OptNilInvoiceID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInvoiceID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v InvoiceID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInvoiceID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInvoiceID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ItemCode as json.
func (o OptNilItemCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ItemCode from json.
func (o *OptNilItemCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilItemCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ItemCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilItemCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilItemCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LogKeepDays as json.
func (o OptNilLogKeepDays) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes LogKeepDays from json.
func (o *OptNilLogKeepDays) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilLogKeepDays to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v LogKeepDays
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilLogKeepDays) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilLogKeepDays) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes LostTrial as json.
func (o OptNilLostTrial) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes LostTrial from json.
func (o *OptNilLostTrial) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilLostTrial to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v LostTrial
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilLostTrial) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilLostTrial) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MailCustomerName as json.
func (o OptNilMailCustomerName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MailCustomerName from json.
func (o *OptNilMailCustomerName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilMailCustomerName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v MailCustomerName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilMailCustomerName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilMailCustomerName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantPaymentID as json.
func (o OptNilMerchantPaymentID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MerchantPaymentID from json.
func (o *OptNilMerchantPaymentID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilMerchantPaymentID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v MerchantPaymentID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilMerchantPaymentID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilMerchantPaymentID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantRefundID as json.
func (o OptNilMerchantRefundID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MerchantRefundID from json.
func (o *OptNilMerchantRefundID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilMerchantRefundID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v MerchantRefundID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilMerchantRefundID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilMerchantRefundID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantRevertID as json.
func (o OptNilMerchantRevertID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MerchantRevertID from json.
func (o *OptNilMerchantRevertID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilMerchantRevertID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v MerchantRevertID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilMerchantRevertID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilMerchantRevertID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes MerchantUpdateID as json.
func (o OptNilMerchantUpdateID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes MerchantUpdateID from json.
func (o *OptNilMerchantUpdateID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilMerchantUpdateID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v MerchantUpdateID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilMerchantUpdateID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilMerchantUpdateID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Name as json.
func (o OptNilName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Name from json.
func (o *OptNilName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Name
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NontaxableFeeAmount as json.
func (o OptNilNontaxableFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NontaxableFeeAmount from json.
func (o *OptNilNontaxableFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilNontaxableFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v NontaxableFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilNontaxableFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilNontaxableFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OrderDescription as json.
func (o OptNilOrderDescription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes OrderDescription from json.
func (o *OptNilOrderDescription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilOrderDescription to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v OrderDescription
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilOrderDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilOrderDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OrderSerial as json.
func (o OptNilOrderSerial) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes OrderSerial from json.
func (o *OptNilOrderSerial) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilOrderSerial to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v OrderSerial
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilOrderSerial) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilOrderSerial) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentCompletionDate as json.
func (o OptNilPaymentCompletionDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentCompletionDate from json.
func (o *OptNilPaymentCompletionDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentCompletionDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentCompletionDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentCompletionDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentCompletionDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentDate as json.
func (o OptNilPaymentDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentDate from json.
func (o *OptNilPaymentDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentDeadline as json.
func (o OptNilPaymentDeadline) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentDeadline from json.
func (o *OptNilPaymentDeadline) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentDeadline to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentDeadline
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentDeadline) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentDeadline) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentID as json.
func (o OptNilPaymentID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentID from json.
func (o *OptNilPaymentID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCancelingResponseBarcodeFormat as json.
func (o OptNilPaymentKonbiniCancelingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniCancelingResponseBarcodeFormat from json.
func (o *OptNilPaymentKonbiniCancelingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentKonbiniCancelingResponseBarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentKonbiniCancelingResponseBarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentKonbiniCancelingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentKonbiniCancelingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCreatingResponseBarcodeFormat as json.
func (o OptNilPaymentKonbiniCreatingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniCreatingResponseBarcodeFormat from json.
func (o *OptNilPaymentKonbiniCreatingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentKonbiniCreatingResponseBarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentKonbiniCreatingResponseBarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentKonbiniCreatingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentKonbiniCreatingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniExecutingResponseBarcodeFormat as json.
func (o OptNilPaymentKonbiniExecutingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniExecutingResponseBarcodeFormat from json.
func (o *OptNilPaymentKonbiniExecutingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentKonbiniExecutingResponseBarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentKonbiniExecutingResponseBarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentKonbiniExecutingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentKonbiniExecutingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat as json.
func (o OptNilPaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat from json.
func (o *OptNilPaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentKonbiniGeneratingBarcodeResponseBarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniListRetrievingResponseListItemBarcodeFormat as json.
func (o OptNilPaymentKonbiniListRetrievingResponseListItemBarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniListRetrievingResponseListItemBarcodeFormat from json.
func (o *OptNilPaymentKonbiniListRetrievingResponseListItemBarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentKonbiniListRetrievingResponseListItemBarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentKonbiniListRetrievingResponseListItemBarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentKonbiniListRetrievingResponseListItemBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentKonbiniListRetrievingResponseListItemBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniRetrievingResponseBarcodeFormat as json.
func (o OptNilPaymentKonbiniRetrievingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniRetrievingResponseBarcodeFormat from json.
func (o *OptNilPaymentKonbiniRetrievingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentKonbiniRetrievingResponseBarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentKonbiniRetrievingResponseBarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentKonbiniRetrievingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentKonbiniRetrievingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCard as json.
func (o OptNilPaymentMethodCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentMethodCard from json.
func (o *OptNilPaymentMethodCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebit as json.
func (o OptNilPaymentMethodDirectdebit) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentMethodDirectdebit from json.
func (o *OptNilPaymentMethodDirectdebit) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebit to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebit
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitAccountType as json.
func (o OptNilPaymentMethodDirectdebitAccountType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodDirectdebitAccountType from json.
func (o *OptNilPaymentMethodDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebitAccountType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebitAccountType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitBankType as json.
func (o OptNilPaymentMethodDirectdebitBankType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodDirectdebitBankType from json.
func (o *OptNilPaymentMethodDirectdebitBankType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebitBankType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebitBankType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitPaperApplication as json.
func (o OptNilPaymentMethodDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentMethodDirectdebitPaperApplication from json.
func (o *OptNilPaymentMethodDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebitPaperApplication to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebitPaperApplication
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodRedirectURLAccessedFlag as json.
func (o OptNilPaymentMethodRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodRedirectURLAccessedFlag from json.
func (o *OptNilPaymentMethodRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodRedirectURLAccessedFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodRedirectURLAccessedFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayCancelingResponseRedirectType as json.
func (o OptNilPaymentPayPayCancelingResponseRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentPayPayCancelingResponseRedirectType from json.
func (o *OptNilPaymentPayPayCancelingResponseRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentPayPayCancelingResponseRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentPayPayCancelingResponseRedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentPayPayCancelingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentPayPayCancelingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayCapturingResponseRedirectType as json.
func (o OptNilPaymentPayPayCapturingResponseRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentPayPayCapturingResponseRedirectType from json.
func (o *OptNilPaymentPayPayCapturingResponseRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentPayPayCapturingResponseRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentPayPayCapturingResponseRedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentPayPayCapturingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentPayPayCapturingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayChangingAmountResponseRedirectType as json.
func (o OptNilPaymentPayPayChangingAmountResponseRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentPayPayChangingAmountResponseRedirectType from json.
func (o *OptNilPaymentPayPayChangingAmountResponseRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentPayPayChangingAmountResponseRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentPayPayChangingAmountResponseRedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentPayPayChangingAmountResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentPayPayChangingAmountResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayCreatingResponseRedirectType as json.
func (o OptNilPaymentPayPayCreatingResponseRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentPayPayCreatingResponseRedirectType from json.
func (o *OptNilPaymentPayPayCreatingResponseRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentPayPayCreatingResponseRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentPayPayCreatingResponseRedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentPayPayCreatingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentPayPayCreatingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayExecutingResponseRedirectType as json.
func (o OptNilPaymentPayPayExecutingResponseRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentPayPayExecutingResponseRedirectType from json.
func (o *OptNilPaymentPayPayExecutingResponseRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentPayPayExecutingResponseRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentPayPayExecutingResponseRedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentPayPayExecutingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentPayPayExecutingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayListRetrievingResponseListItemRedirectType as json.
func (o OptNilPaymentPayPayListRetrievingResponseListItemRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentPayPayListRetrievingResponseListItemRedirectType from json.
func (o *OptNilPaymentPayPayListRetrievingResponseListItemRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentPayPayListRetrievingResponseListItemRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentPayPayListRetrievingResponseListItemRedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentPayPayListRetrievingResponseListItemRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentPayPayListRetrievingResponseListItemRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayRetrievingResponseRedirectType as json.
func (o OptNilPaymentPayPayRetrievingResponseRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentPayPayRetrievingResponseRedirectType from json.
func (o *OptNilPaymentPayPayRetrievingResponseRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentPayPayRetrievingResponseRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentPayPayRetrievingResponseRedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentPayPayRetrievingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentPayPayRetrievingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCard as json.
func (o OptNilPaymentSessionCreatingRequestCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingRequestCard from json.
func (o *OptNilPaymentSessionCreatingRequestCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestKonbini as json.
func (o OptNilPaymentSessionCreatingRequestKonbini) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingRequestKonbini from json.
func (o *OptNilPaymentSessionCreatingRequestKonbini) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestKonbini to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestKonbini
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestPaypay as json.
func (o OptNilPaymentSessionCreatingRequestPaypay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingRequestPaypay from json.
func (o *OptNilPaymentSessionCreatingRequestPaypay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestPaypay to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestPaypay
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestPaypay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestPaypay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentTerm as json.
func (o OptNilPaymentTerm) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentTerm from json.
func (o *OptNilPaymentTerm) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentTerm to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentTerm
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentTerm) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentTerm) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentTermDay as json.
func (o OptNilPaymentTermDay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentTermDay from json.
func (o *OptNilPaymentTermDay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentTermDay to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentTermDay
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentTermDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentTermDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaypayContentCategoryType as json.
func (o OptNilPaypayContentCategoryType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaypayContentCategoryType from json.
func (o *OptNilPaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaypayContentCategoryType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaypayContentCategoryType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneCc as json.
func (o OptNilPhoneCc) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneCc from json.
func (o *OptNilPhoneCc) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPhoneCc to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PhoneCc
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneNo as json.
func (o OptNilPhoneNo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PhoneNo from json.
func (o *OptNilPhoneNo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPhoneNo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PhoneNo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformAccountPropertiesTotalAmount as json.
func (o OptNilPlatformAccountPropertiesTotalAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformAccountPropertiesTotalAmount from json.
func (o *OptNilPlatformAccountPropertiesTotalAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformAccountPropertiesTotalAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformAccountPropertiesTotalAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformAccountPropertiesTotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformAccountPropertiesTotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformFeeAmount as json.
func (o OptNilPlatformFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformFeeAmount from json.
func (o *OptNilPlatformFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformFeeTaxAmount as json.
func (o OptNilPlatformFeeTaxAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformFeeTaxAmount from json.
func (o *OptNilPlatformFeeTaxAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformFeeTaxAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformFeeTaxAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformFeeTaxAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformFeeTaxAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformName as json.
func (o OptNilPlatformName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformName from json.
func (o *OptNilPlatformName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRate as json.
func (o OptNilPlatformRate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformRate from json.
func (o *OptNilPlatformRate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformRate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformRate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformRate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformRate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRateConfigPaypayContentCategoryType as json.
func (o OptNilPlatformRateConfigPaypayContentCategoryType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes PlatformRateConfigPaypayContentCategoryType from json.
func (o *OptNilPlatformRateConfigPaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformRateConfigPaypayContentCategoryType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformRateConfigPaypayContentCategoryType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformRateConfigPaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformRateConfigPaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformWebRegistrationFeeAmount as json.
func (o OptNilPlatformWebRegistrationFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformWebRegistrationFeeAmount from json.
func (o *OptNilPlatformWebRegistrationFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformWebRegistrationFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformWebRegistrationFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformWebRegistrationFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformWebRegistrationFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PrepaidPoint as json.
func (o OptNilPrepaidPoint) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PrepaidPoint from json.
func (o *OptNilPrepaidPoint) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPrepaidPoint to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PrepaidPoint
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPrepaidPoint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPrepaidPoint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProcessDate as json.
func (o OptNilProcessDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ProcessDate from json.
func (o *OptNilProcessDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilProcessDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ProcessDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilProcessDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilProcessDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Product as json.
func (o OptNilProduct) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Product from json.
func (o *OptNilProduct) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilProduct to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Product
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilProduct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilProduct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAggregateTermEnd as json.
func (o OptNilPropertiesAggregateTermEnd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesAggregateTermEnd from json.
func (o *OptNilPropertiesAggregateTermEnd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesAggregateTermEnd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesAggregateTermEnd
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesAggregateTermEnd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesAggregateTermEnd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAggregateTermStart as json.
func (o OptNilPropertiesAggregateTermStart) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesAggregateTermStart from json.
func (o *OptNilPropertiesAggregateTermStart) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesAggregateTermStart to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesAggregateTermStart
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesAggregateTermStart) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesAggregateTermStart) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesCancelURL as json.
func (o OptNilPropertiesCancelURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesCancelURL from json.
func (o *OptNilPropertiesCancelURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesCancelURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesCancelURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesCancelURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesCancelURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesCount as json.
func (o OptNilPropertiesCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesCount from json.
func (o *OptNilPropertiesCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesCount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesCount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesCustomerGroupID as json.
func (o OptNilPropertiesCustomerGroupID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesCustomerGroupID from json.
func (o *OptNilPropertiesCustomerGroupID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesCustomerGroupID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesCustomerGroupID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesCustomerGroupID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesCustomerGroupID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesDepositAmount as json.
func (o OptNilPropertiesDepositAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesDepositAmount from json.
func (o *OptNilPropertiesDepositAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesDepositAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesDepositAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesDepositAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesDepositAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesDepositDate as json.
func (o OptNilPropertiesDepositDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesDepositDate from json.
func (o *OptNilPropertiesDepositDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesDepositDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesDepositDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesDepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesDepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesFeeAmount as json.
func (o OptNilPropertiesFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesFeeAmount from json.
func (o *OptNilPropertiesFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesMailCustomerName as json.
func (o OptNilPropertiesMailCustomerName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesMailCustomerName from json.
func (o *OptNilPropertiesMailCustomerName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesMailCustomerName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesMailCustomerName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesMailCustomerName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesMailCustomerName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesOrderDescription as json.
func (o OptNilPropertiesOrderDescription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesOrderDescription from json.
func (o *OptNilPropertiesOrderDescription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesOrderDescription to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesOrderDescription
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesOrderDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesOrderDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPaymentDate as json.
func (o OptNilPropertiesPaymentDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesPaymentDate from json.
func (o *OptNilPropertiesPaymentDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesPaymentDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesPaymentDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesPaymentDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesPaymentDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPaymentTermDay as json.
func (o OptNilPropertiesPaymentTermDay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesPaymentTermDay from json.
func (o *OptNilPropertiesPaymentTermDay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesPaymentTermDay to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesPaymentTermDay
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesPaymentTermDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesPaymentTermDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPlatformFeeAmount as json.
func (o OptNilPropertiesPlatformFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesPlatformFeeAmount from json.
func (o *OptNilPropertiesPlatformFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesPlatformFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesPlatformFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesPlatformFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesPlatformFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPlatformFeeTaxAmount as json.
func (o OptNilPropertiesPlatformFeeTaxAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesPlatformFeeTaxAmount from json.
func (o *OptNilPropertiesPlatformFeeTaxAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesPlatformFeeTaxAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesPlatformFeeTaxAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesPlatformFeeTaxAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesPlatformFeeTaxAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesReceiverMail as json.
func (o OptNilPropertiesReceiverMail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesReceiverMail from json.
func (o *OptNilPropertiesReceiverMail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesReceiverMail to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesReceiverMail
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesReceiverMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesReceiverMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesScheduledDepositDate as json.
func (o OptNilPropertiesScheduledDepositDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesScheduledDepositDate from json.
func (o *OptNilPropertiesScheduledDepositDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesScheduledDepositDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesScheduledDepositDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesScheduledDepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesScheduledDepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopMailTemplateID as json.
func (o OptNilPropertiesShopMailTemplateID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesShopMailTemplateID from json.
func (o *OptNilPropertiesShopMailTemplateID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesShopMailTemplateID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesShopMailTemplateID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesShopMailTemplateID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesShopMailTemplateID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopServiceName as json.
func (o OptNilPropertiesShopServiceName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesShopServiceName from json.
func (o *OptNilPropertiesShopServiceName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesShopServiceName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesShopServiceName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesShopServiceName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesShopServiceName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesSuccessURL as json.
func (o OptNilPropertiesSuccessURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesSuccessURL from json.
func (o *OptNilPropertiesSuccessURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesSuccessURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesSuccessURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesSuccessURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesSuccessURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesWebRegistrationFeeAmount as json.
func (o OptNilPropertiesWebRegistrationFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesWebRegistrationFeeAmount from json.
func (o *OptNilPropertiesWebRegistrationFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertiesWebRegistrationFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PropertiesWebRegistrationFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertiesWebRegistrationFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertiesWebRegistrationFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReceiverMail as json.
func (o OptNilReceiverMail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ReceiverMail from json.
func (o *OptNilReceiverMail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilReceiverMail to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ReceiverMail
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilReceiverMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilReceiverMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedirectType as json.
func (o OptNilRedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RedirectType from json.
func (o *OptNilRedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedirectURL as json.
func (o OptNilRedirectURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RedirectURL from json.
func (o *OptNilRedirectURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRedirectURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RedirectURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRedirectURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRedirectURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Remarks as json.
func (o OptNilRemarks) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Remarks from json.
func (o *OptNilRemarks) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRemarks to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Remarks
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRemarks) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRemarks) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressChrome as json.
func (o OptNilRepresentativeAddressChrome) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeAddressChrome from json.
func (o *OptNilRepresentativeAddressChrome) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeAddressChrome to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeAddressChrome
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeAddressChrome) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeAddressChrome) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressChromeKana as json.
func (o OptNilRepresentativeAddressChromeKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeAddressChromeKana from json.
func (o *OptNilRepresentativeAddressChromeKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeAddressChromeKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeAddressChromeKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeAddressChromeKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeAddressChromeKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressMunicipality as json.
func (o OptNilRepresentativeAddressMunicipality) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeAddressMunicipality from json.
func (o *OptNilRepresentativeAddressMunicipality) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeAddressMunicipality to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeAddressMunicipality
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeAddressMunicipality) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeAddressMunicipality) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressMunicipalityKana as json.
func (o OptNilRepresentativeAddressMunicipalityKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeAddressMunicipalityKana from json.
func (o *OptNilRepresentativeAddressMunicipalityKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeAddressMunicipalityKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeAddressMunicipalityKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeAddressMunicipalityKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeAddressMunicipalityKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressSection as json.
func (o OptNilRepresentativeAddressSection) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeAddressSection from json.
func (o *OptNilRepresentativeAddressSection) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeAddressSection to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeAddressSection
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeAddressSection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeAddressSection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressSectionKana as json.
func (o OptNilRepresentativeAddressSectionKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeAddressSectionKana from json.
func (o *OptNilRepresentativeAddressSectionKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeAddressSectionKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeAddressSectionKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeAddressSectionKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeAddressSectionKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeBirthday as json.
func (o OptNilRepresentativeBirthday) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeBirthday from json.
func (o *OptNilRepresentativeBirthday) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeBirthday to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeBirthday
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeBirthday) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeBirthday) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeFirstName as json.
func (o OptNilRepresentativeFirstName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeFirstName from json.
func (o *OptNilRepresentativeFirstName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeFirstName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeFirstName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeFirstName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeFirstName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeFirstNameKana as json.
func (o OptNilRepresentativeFirstNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeFirstNameKana from json.
func (o *OptNilRepresentativeFirstNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeFirstNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeFirstNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeFirstNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeFirstNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeGender as json.
func (o OptNilRepresentativeGender) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes RepresentativeGender from json.
func (o *OptNilRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeGender
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeLastName as json.
func (o OptNilRepresentativeLastName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeLastName from json.
func (o *OptNilRepresentativeLastName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeLastName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeLastName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeLastName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeLastName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeLastNameKana as json.
func (o OptNilRepresentativeLastNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeLastNameKana from json.
func (o *OptNilRepresentativeLastNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeLastNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeLastNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeLastNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeLastNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativePostalCode as json.
func (o OptNilRepresentativePostalCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativePostalCode from json.
func (o *OptNilRepresentativePostalCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativePostalCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativePostalCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativePostalCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativePostalCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativePrefecture as json.
func (o OptNilRepresentativePrefecture) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativePrefecture from json.
func (o *OptNilRepresentativePrefecture) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativePrefecture to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativePrefecture
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativePrefecture) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativePrefecture) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativePrefectureKana as json.
func (o OptNilRepresentativePrefectureKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativePrefectureKana from json.
func (o *OptNilRepresentativePrefectureKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativePrefectureKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativePrefectureKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativePrefectureKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativePrefectureKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeTel as json.
func (o OptNilRepresentativeTel) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RepresentativeTel from json.
func (o *OptNilRepresentativeTel) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRepresentativeTel to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RepresentativeTel
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRepresentativeTel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRepresentativeTel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RequestAcceptEndDate as json.
func (o OptNilRequestAcceptEndDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RequestAcceptEndDate from json.
func (o *OptNilRequestAcceptEndDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRequestAcceptEndDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RequestAcceptEndDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRequestAcceptEndDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRequestAcceptEndDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReturnURL as json.
func (o OptNilReturnURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ReturnURL from json.
func (o *OptNilReturnURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilReturnURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ReturnURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilReturnURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilReturnURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReturnURLOnFailure as json.
func (o OptNilReturnURLOnFailure) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ReturnURLOnFailure from json.
func (o *OptNilReturnURLOnFailure) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilReturnURLOnFailure to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ReturnURLOnFailure
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilReturnURLOnFailure) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilReturnURLOnFailure) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ScheduledDepositDate as json.
func (o OptNilScheduledDepositDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ScheduledDepositDate from json.
func (o *OptNilScheduledDepositDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilScheduledDepositDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ScheduledDepositDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilScheduledDepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilScheduledDepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SendMailAddress as json.
func (o OptNilSendMailAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SendMailAddress from json.
func (o *OptNilSendMailAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSendMailAddress to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v SendMailAddress
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSendMailAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSendMailAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SendURL as json.
func (o OptNilSendURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SendURL from json.
func (o *OptNilSendURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSendURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v SendURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSendURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSendURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Service as json.
func (o OptNilService) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Service from json.
func (o *OptNilService) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilService to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Service
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilService) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilService) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SettlementAmount as json.
func (o OptNilSettlementAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SettlementAmount from json.
func (o *OptNilSettlementAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSettlementAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v SettlementAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSettlementAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSettlementAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SharedCustomerFlag as json.
func (o OptNilSharedCustomerFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SharedCustomerFlag from json.
func (o *OptNilSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v SharedCustomerFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopAPIKeyDisplayFlag as json.
func (o OptNilShopAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ShopAPIKeyDisplayFlag from json.
func (o *OptNilShopAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopAPIKeyDisplayFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopInfoV2AdditionalInfo as json.
func (o OptNilShopInfoV2AdditionalInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopInfoV2AdditionalInfo from json.
func (o *OptNilShopInfoV2AdditionalInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopInfoV2AdditionalInfo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopInfoV2AdditionalInfo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopInfoV2AdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopInfoV2AdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopMailAddress as json.
func (o OptNilShopMailAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopMailAddress from json.
func (o *OptNilShopMailAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopMailAddress to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopMailAddress
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopMailAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopMailAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopMailTemplateID as json.
func (o OptNilShopMailTemplateID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopMailTemplateID from json.
func (o *OptNilShopMailTemplateID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopMailTemplateID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopMailTemplateID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopMailTemplateID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopMailTemplateID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopName as json.
func (o OptNilShopName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopName from json.
func (o *OptNilShopName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopNameKana as json.
func (o OptNilShopNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopNameKana from json.
func (o *OptNilShopNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopServiceName as json.
func (o OptNilShopServiceName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopServiceName from json.
func (o *OptNilShopServiceName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopServiceName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopServiceName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopServiceName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopServiceName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopSharedCustomerFlag as json.
func (o OptNilShopSharedCustomerFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ShopSharedCustomerFlag from json.
func (o *OptNilShopSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopSharedCustomerFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopType as json.
func (o OptNilShopType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ShopType from json.
func (o *OptNilShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1FirstName as json.
func (o OptNilStaff1FirstName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff1FirstName from json.
func (o *OptNilStaff1FirstName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff1FirstName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff1FirstName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff1FirstName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff1FirstName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1FirstNameKana as json.
func (o OptNilStaff1FirstNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff1FirstNameKana from json.
func (o *OptNilStaff1FirstNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff1FirstNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff1FirstNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff1FirstNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff1FirstNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1LastName as json.
func (o OptNilStaff1LastName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff1LastName from json.
func (o *OptNilStaff1LastName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff1LastName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff1LastName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff1LastName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff1LastName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1LastNameKana as json.
func (o OptNilStaff1LastNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff1LastNameKana from json.
func (o *OptNilStaff1LastNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff1LastNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff1LastNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff1LastNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff1LastNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1Mail as json.
func (o OptNilStaff1Mail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff1Mail from json.
func (o *OptNilStaff1Mail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff1Mail to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff1Mail
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff1Mail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff1Mail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1Tel as json.
func (o OptNilStaff1Tel) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff1Tel from json.
func (o *OptNilStaff1Tel) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff1Tel to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff1Tel
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff1Tel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff1Tel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2FirstName as json.
func (o OptNilStaff2FirstName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff2FirstName from json.
func (o *OptNilStaff2FirstName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff2FirstName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff2FirstName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff2FirstName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff2FirstName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2FirstNameKana as json.
func (o OptNilStaff2FirstNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff2FirstNameKana from json.
func (o *OptNilStaff2FirstNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff2FirstNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff2FirstNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff2FirstNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff2FirstNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2LastName as json.
func (o OptNilStaff2LastName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff2LastName from json.
func (o *OptNilStaff2LastName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff2LastName to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff2LastName
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff2LastName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff2LastName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2LastNameKana as json.
func (o OptNilStaff2LastNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff2LastNameKana from json.
func (o *OptNilStaff2LastNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff2LastNameKana to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff2LastNameKana
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff2LastNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff2LastNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2Mail as json.
func (o OptNilStaff2Mail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff2Mail from json.
func (o *OptNilStaff2Mail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff2Mail to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff2Mail
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff2Mail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff2Mail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2Tel as json.
func (o OptNilStaff2Tel) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Staff2Tel from json.
func (o *OptNilStaff2Tel) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStaff2Tel to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Staff2Tel
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStaff2Tel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStaff2Tel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StopDate as json.
func (o OptNilStopDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StopDate from json.
func (o *OptNilStopDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStopDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v StopDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStopDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStopDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SuccessURL as json.
func (o OptNilSuccessURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SuccessURL from json.
func (o *OptNilSuccessURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSuccessURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v SuccessURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSuccessURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSuccessURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SupportMail as json.
func (o OptNilSupportMail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SupportMail from json.
func (o *OptNilSupportMail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSupportMail to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v SupportMail
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSupportMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSupportMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SupportTel as json.
func (o OptNilSupportTel) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SupportTel from json.
func (o *OptNilSupportTel) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSupportTel to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v SupportTel
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSupportTel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSupportTel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TargetDate as json.
func (o OptNilTargetDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TargetDate from json.
func (o *OptNilTargetDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTargetDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TargetDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTargetDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTargetDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TaxAmount as json.
func (o OptNilTaxAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TaxAmount from json.
func (o *OptNilTaxAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTaxAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TaxAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTaxAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTaxAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TaxableFeeAmount as json.
func (o OptNilTaxableFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TaxableFeeAmount from json.
func (o *OptNilTaxableFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTaxableFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TaxableFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTaxableFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTaxableFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2AddrMatch as json.
func (o OptNilTds2AddrMatch) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2AddrMatch from json.
func (o *OptNilTds2AddrMatch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2AddrMatch to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2AddrMatch
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrCity as json.
func (o OptNilTds2BillAddrCity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2BillAddrCity from json.
func (o *OptNilTds2BillAddrCity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2BillAddrCity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2BillAddrCity
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2BillAddrCity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2BillAddrCity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrCountry as json.
func (o OptNilTds2BillAddrCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2BillAddrCountry from json.
func (o *OptNilTds2BillAddrCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2BillAddrCountry to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2BillAddrCountry
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2BillAddrCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2BillAddrCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrLine1 as json.
func (o OptNilTds2BillAddrLine1) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2BillAddrLine1 from json.
func (o *OptNilTds2BillAddrLine1) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2BillAddrLine1 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2BillAddrLine1
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2BillAddrLine1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2BillAddrLine1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrLine2 as json.
func (o OptNilTds2BillAddrLine2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2BillAddrLine2 from json.
func (o *OptNilTds2BillAddrLine2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2BillAddrLine2 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2BillAddrLine2
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2BillAddrLine2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2BillAddrLine2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrPostCode as json.
func (o OptNilTds2BillAddrPostCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2BillAddrPostCode from json.
func (o *OptNilTds2BillAddrPostCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2BillAddrPostCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2BillAddrPostCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2BillAddrPostCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2BillAddrPostCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrState as json.
func (o OptNilTds2BillAddrState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2BillAddrState from json.
func (o *OptNilTds2BillAddrState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2BillAddrState to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2BillAddrState
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2BillAddrState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2BillAddrState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ChAccChange as json.
func (o OptNilTds2ChAccChange) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ChAccChange from json.
func (o *OptNilTds2ChAccChange) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ChAccChange to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ChAccChange
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ChAccChange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ChAccChange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ChAccDate as json.
func (o OptNilTds2ChAccDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ChAccDate from json.
func (o *OptNilTds2ChAccDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ChAccDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ChAccDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ChAccDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ChAccDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ChAccPwChange as json.
func (o OptNilTds2ChAccPwChange) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ChAccPwChange from json.
func (o *OptNilTds2ChAccPwChange) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ChAccPwChange to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ChAccPwChange
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ChAccPwChange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ChAccPwChange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2DeliveryEmailAddress as json.
func (o OptNilTds2DeliveryEmailAddress) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2DeliveryEmailAddress from json.
func (o *OptNilTds2DeliveryEmailAddress) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2DeliveryEmailAddress to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2DeliveryEmailAddress
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2DeliveryEmailAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2DeliveryEmailAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2DeliveryTimeframe as json.
func (o OptNilTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2DeliveryTimeframe from json.
func (o *OptNilTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2DeliveryTimeframe to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2DeliveryTimeframe
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2GiftCardAmount as json.
func (o OptNilTds2GiftCardAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2GiftCardAmount from json.
func (o *OptNilTds2GiftCardAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2GiftCardAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2GiftCardAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2GiftCardAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2GiftCardAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2GiftCardCount as json.
func (o OptNilTds2GiftCardCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2GiftCardCount from json.
func (o *OptNilTds2GiftCardCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2GiftCardCount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2GiftCardCount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2GiftCardCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2GiftCardCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2GiftCardCurr as json.
func (o OptNilTds2GiftCardCurr) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2GiftCardCurr from json.
func (o *OptNilTds2GiftCardCurr) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2GiftCardCurr to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2GiftCardCurr
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2GiftCardCurr) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2GiftCardCurr) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2HomePhoneCc as json.
func (o OptNilTds2HomePhoneCc) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2HomePhoneCc from json.
func (o *OptNilTds2HomePhoneCc) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2HomePhoneCc to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2HomePhoneCc
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2HomePhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2HomePhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2HomePhoneNo as json.
func (o OptNilTds2HomePhoneNo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2HomePhoneNo from json.
func (o *OptNilTds2HomePhoneNo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2HomePhoneNo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2HomePhoneNo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2HomePhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2HomePhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2MobilePhoneCc as json.
func (o OptNilTds2MobilePhoneCc) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2MobilePhoneCc from json.
func (o *OptNilTds2MobilePhoneCc) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2MobilePhoneCc to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2MobilePhoneCc
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2MobilePhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2MobilePhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2MobilePhoneNo as json.
func (o OptNilTds2MobilePhoneNo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2MobilePhoneNo from json.
func (o *OptNilTds2MobilePhoneNo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2MobilePhoneNo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2MobilePhoneNo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2MobilePhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2MobilePhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2NbPurchaseAccount as json.
func (o OptNilTds2NbPurchaseAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2NbPurchaseAccount from json.
func (o *OptNilTds2NbPurchaseAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2NbPurchaseAccount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2NbPurchaseAccount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2NbPurchaseAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2NbPurchaseAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2PaymentAccAge as json.
func (o OptNilTds2PaymentAccAge) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2PaymentAccAge from json.
func (o *OptNilTds2PaymentAccAge) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2PaymentAccAge to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2PaymentAccAge
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2PaymentAccAge) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2PaymentAccAge) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2PreOrderDate as json.
func (o OptNilTds2PreOrderDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2PreOrderDate from json.
func (o *OptNilTds2PreOrderDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2PreOrderDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2PreOrderDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2PreOrderDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2PreOrderDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2PreOrderPurchaseInd as json.
func (o OptNilTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2PreOrderPurchaseInd from json.
func (o *OptNilTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2PreOrderPurchaseInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2PreOrderPurchaseInd
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ProvisionAttemptsDay as json.
func (o OptNilTds2ProvisionAttemptsDay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ProvisionAttemptsDay from json.
func (o *OptNilTds2ProvisionAttemptsDay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ProvisionAttemptsDay to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ProvisionAttemptsDay
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ProvisionAttemptsDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ProvisionAttemptsDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2RecurringExpiry as json.
func (o OptNilTds2RecurringExpiry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2RecurringExpiry from json.
func (o *OptNilTds2RecurringExpiry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2RecurringExpiry to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2RecurringExpiry
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2RecurringExpiry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2RecurringExpiry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2RecurringFrequency as json.
func (o OptNilTds2RecurringFrequency) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2RecurringFrequency from json.
func (o *OptNilTds2RecurringFrequency) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2RecurringFrequency to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2RecurringFrequency
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2RecurringFrequency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2RecurringFrequency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ReorderItemsInd as json.
func (o OptNilTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2ReorderItemsInd from json.
func (o *OptNilTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ReorderItemsInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ReorderItemsInd
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2RetURL as json.
func (o OptNilTds2RetURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2RetURL from json.
func (o *OptNilTds2RetURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2RetURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2RetURL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2RetURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2RetURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrCity as json.
func (o OptNilTds2ShipAddrCity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddrCity from json.
func (o *OptNilTds2ShipAddrCity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddrCity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddrCity
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddrCity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddrCity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrCountry as json.
func (o OptNilTds2ShipAddrCountry) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddrCountry from json.
func (o *OptNilTds2ShipAddrCountry) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddrCountry to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddrCountry
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddrCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddrCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrLine1 as json.
func (o OptNilTds2ShipAddrLine1) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddrLine1 from json.
func (o *OptNilTds2ShipAddrLine1) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddrLine1 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddrLine1
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddrLine1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddrLine1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrLine2 as json.
func (o OptNilTds2ShipAddrLine2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddrLine2 from json.
func (o *OptNilTds2ShipAddrLine2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddrLine2 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddrLine2
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddrLine2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddrLine2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrLine3 as json.
func (o OptNilTds2ShipAddrLine3) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddrLine3 from json.
func (o *OptNilTds2ShipAddrLine3) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddrLine3 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddrLine3
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddrLine3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddrLine3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrPostCode as json.
func (o OptNilTds2ShipAddrPostCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddrPostCode from json.
func (o *OptNilTds2ShipAddrPostCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddrPostCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddrPostCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddrPostCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddrPostCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrState as json.
func (o OptNilTds2ShipAddrState) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddrState from json.
func (o *OptNilTds2ShipAddrState) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddrState to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddrState
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddrState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddrState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddressUsage as json.
func (o OptNilTds2ShipAddressUsage) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ShipAddressUsage from json.
func (o *OptNilTds2ShipAddressUsage) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipAddressUsage to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipAddressUsage
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipAddressUsage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipAddressUsage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipInd as json.
func (o OptNilTds2ShipInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2ShipInd from json.
func (o *OptNilTds2ShipInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipInd
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipNameInd as json.
func (o OptNilTds2ShipNameInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2ShipNameInd from json.
func (o *OptNilTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ShipNameInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ShipNameInd
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2SuspiciousAccActivity as json.
func (o OptNilTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2SuspiciousAccActivity from json.
func (o *OptNilTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2SuspiciousAccActivity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2SuspiciousAccActivity
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ThreeDsReqAuthData as json.
func (o OptNilTds2ThreeDsReqAuthData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2ThreeDsReqAuthData from json.
func (o *OptNilTds2ThreeDsReqAuthData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ThreeDsReqAuthData to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ThreeDsReqAuthData
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ThreeDsReqAuthData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ThreeDsReqAuthData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ThreeDsReqAuthMethod as json.
func (o OptNilTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2ThreeDsReqAuthMethod from json.
func (o *OptNilTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2ThreeDsReqAuthMethod to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2ThreeDsReqAuthMethod
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2TxnActivityDay as json.
func (o OptNilTds2TxnActivityDay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2TxnActivityDay from json.
func (o *OptNilTds2TxnActivityDay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2TxnActivityDay to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2TxnActivityDay
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2TxnActivityDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2TxnActivityDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2TxnActivityYear as json.
func (o OptNilTds2TxnActivityYear) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2TxnActivityYear from json.
func (o *OptNilTds2TxnActivityYear) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2TxnActivityYear to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2TxnActivityYear
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2TxnActivityYear) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2TxnActivityYear) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Type as json.
func (o OptNilTds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2Type from json.
func (o *OptNilTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2Type
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2WorkPhoneCc as json.
func (o OptNilTds2WorkPhoneCc) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2WorkPhoneCc from json.
func (o *OptNilTds2WorkPhoneCc) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2WorkPhoneCc to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2WorkPhoneCc
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2WorkPhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2WorkPhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2WorkPhoneNo as json.
func (o OptNilTds2WorkPhoneNo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2WorkPhoneNo from json.
func (o *OptNilTds2WorkPhoneNo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2WorkPhoneNo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2WorkPhoneNo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2WorkPhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2WorkPhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdsType as json.
func (o OptNilTdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TdsType from json.
func (o *OptNilTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TdsType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TransactionID as json.
func (o OptNilTransactionID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TransactionID from json.
func (o *OptNilTransactionID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTransactionID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TransactionID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTransactionID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTransactionID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TransferReturnDate as json.
func (o OptNilTransferReturnDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TransferReturnDate from json.
func (o *OptNilTransferReturnDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTransferReturnDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TransferReturnDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTransferReturnDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTransferReturnDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes URL as json.
func (o OptNilURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes URL from json.
func (o *OptNilURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilURL to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v URL
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UnitPrice as json.
func (o OptNilUnitPrice) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UnitPrice from json.
func (o *OptNilUnitPrice) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUnitPrice to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UnitPrice
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUnitPrice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUnitPrice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateBankAccount as json.
func (o OptNilUpdateBankAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateBankAccount from json.
func (o *OptNilUpdateBankAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUpdateBankAccount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UpdateBankAccount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUpdateBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUpdateBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateContractDetail as json.
func (o OptNilUpdateContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateContractDetail from json.
func (o *OptNilUpdateContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUpdateContractDetail to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UpdateContractDetail
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUpdateContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUpdateContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateDepositCycle as json.
func (o OptNilUpdateDepositCycle) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateDepositCycle from json.
func (o *OptNilUpdateDepositCycle) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUpdateDepositCycle to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UpdateDepositCycle
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUpdateDepositCycle) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUpdateDepositCycle) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateDescription as json.
func (o OptNilUpdateDescription) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateDescription from json.
func (o *OptNilUpdateDescription) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUpdateDescription to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UpdateDescription
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUpdateDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUpdateDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateShop as json.
func (o OptNilUpdateShop) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UpdateShop from json.
func (o *OptNilUpdateShop) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUpdateShop to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UpdateShop
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUpdateShop) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUpdateShop) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Updated as json.
func (o OptNilUpdated) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Updated from json.
func (o *OptNilUpdated) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUpdated to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Updated
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUpdated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUpdated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UsedOnApp as json.
func (o OptNilUsedOnApp) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UsedOnApp from json.
func (o *OptNilUsedOnApp) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUsedOnApp to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UsedOnApp
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUsedOnApp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUsedOnApp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UsedOnWeb as json.
func (o OptNilUsedOnWeb) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UsedOnWeb from json.
func (o *OptNilUsedOnWeb) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUsedOnWeb to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v UsedOnWeb
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUsedOnWeb) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUsedOnWeb) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebRegistrationFee as json.
func (o OptNilWebRegistrationFee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WebRegistrationFee from json.
func (o *OptNilWebRegistrationFee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebRegistrationFee to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebRegistrationFee
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebRegistrationFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebRegistrationFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebRegistrationFeeAmount as json.
func (o OptNilWebRegistrationFeeAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WebRegistrationFeeAmount from json.
func (o *OptNilWebRegistrationFeeAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebRegistrationFeeAmount to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebRegistrationFeeAmount
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebRegistrationFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebRegistrationFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WithdrawalDate as json.
func (o OptNilWithdrawalDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WithdrawalDate from json.
func (o *OptNilWithdrawalDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWithdrawalDate to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WithdrawalDate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWithdrawalDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWithdrawalDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesToken as json.
func (o OptNilXReqPropertiesToken) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes XReqPropertiesToken from json.
func (o *OptNilXReqPropertiesToken) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilXReqPropertiesToken to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v XReqPropertiesToken
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilXReqPropertiesToken) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilXReqPropertiesToken) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes YearlySales as json.
func (o OptNilYearlySales) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes YearlySales from json.
func (o *OptNilYearlySales) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilYearlySales to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v YearlySales
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilYearlySales) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilYearlySales) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OverpaymentFlag as json.
func (o OptOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes OverpaymentFlag from json.
func (o *OptOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTContractsExaminationsEnableImmediateUse as json.
func (o OptPOSTContractsExaminationsEnableImmediateUse) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes POSTContractsExaminationsEnableImmediateUse from json.
func (o *OptPOSTContractsExaminationsEnableImmediateUse) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTContractsExaminationsEnableImmediateUse to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTContractsExaminationsEnableImmediateUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTContractsExaminationsEnableImmediateUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaperApplication as json.
func (o OptPaperApplication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaperApplication from json.
func (o *OptPaperApplication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaperApplication to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Param as json.
func (o OptParam) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Param from json.
func (o *OptParam) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptParam to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptParam) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptParam) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PayPayPaymentJobCode as json.
func (o OptPayPayPaymentJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PayPayPaymentJobCode from json.
func (o *OptPayPayPaymentJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPayPayPaymentJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPayPayPaymentJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPayPayPaymentJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PayType as json.
func (o OptPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PayType from json.
func (o *OptPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailStatus as json.
func (o OptPaymentBulkDetailStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkDetailStatus from json.
func (o *OptPaymentBulkDetailStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkDetailStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkDetailStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkDetailStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkPayType as json.
func (o OptPaymentBulkPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkPayType from json.
func (o *OptPaymentBulkPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkPropertiesID as json.
func (o OptPaymentBulkPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentBulkPropertiesID from json.
func (o *OptPaymentBulkPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkStatus as json.
func (o OptPaymentBulkStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkStatus from json.
func (o *OptPaymentBulkStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCancelingResponseCancelOverpaymentFlag as json.
func (o OptPaymentKonbiniCancelingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniCancelingResponseCancelOverpaymentFlag from json.
func (o *OptPaymentKonbiniCancelingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniCancelingResponseCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniCancelingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniCancelingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCancelingResponseOverpaymentFlag as json.
func (o OptPaymentKonbiniCancelingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniCancelingResponseOverpaymentFlag from json.
func (o *OptPaymentKonbiniCancelingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniCancelingResponseOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniCancelingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniCancelingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCreatingResponseCancelOverpaymentFlag as json.
func (o OptPaymentKonbiniCreatingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniCreatingResponseCancelOverpaymentFlag from json.
func (o *OptPaymentKonbiniCreatingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniCreatingResponseCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniCreatingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniCreatingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCreatingResponseOverpaymentFlag as json.
func (o OptPaymentKonbiniCreatingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniCreatingResponseOverpaymentFlag from json.
func (o *OptPaymentKonbiniCreatingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniCreatingResponseOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniCreatingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniCreatingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniExecutingResponseCancelOverpaymentFlag as json.
func (o OptPaymentKonbiniExecutingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniExecutingResponseCancelOverpaymentFlag from json.
func (o *OptPaymentKonbiniExecutingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniExecutingResponseCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniExecutingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniExecutingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniExecutingResponseOverpaymentFlag as json.
func (o OptPaymentKonbiniExecutingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniExecutingResponseOverpaymentFlag from json.
func (o *OptPaymentKonbiniExecutingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniExecutingResponseOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniExecutingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniExecutingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag as json.
func (o OptPaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag from json.
func (o *OptPaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag as json.
func (o OptPaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag from json.
func (o *OptPaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag as json.
func (o OptPaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag from json.
func (o *OptPaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag as json.
func (o OptPaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag from json.
func (o *OptPaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniListRetrievingResponseListItemOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniRetrievingResponseCancelOverpaymentFlag as json.
func (o OptPaymentKonbiniRetrievingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniRetrievingResponseCancelOverpaymentFlag from json.
func (o *OptPaymentKonbiniRetrievingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniRetrievingResponseCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniRetrievingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniRetrievingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniRetrievingResponseOverpaymentFlag as json.
func (o OptPaymentKonbiniRetrievingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentKonbiniRetrievingResponseOverpaymentFlag from json.
func (o *OptPaymentKonbiniRetrievingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentKonbiniRetrievingResponseOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentKonbiniRetrievingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentKonbiniRetrievingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDefaultFlag as json.
func (o OptPaymentMethodDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodDefaultFlag from json.
func (o *OptPaymentMethodDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodPayType as json.
func (o OptPaymentMethodPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodPayType from json.
func (o *OptPaymentMethodPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodPropertiesID as json.
func (o OptPaymentMethodPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentMethodPropertiesID from json.
func (o *OptPaymentMethodPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodStatus as json.
func (o OptPaymentMethodStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodStatus from json.
func (o *OptPaymentMethodStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPropertiesID as json.
func (o OptPaymentPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentPropertiesID from json.
func (o *OptPaymentPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentProvider as json.
func (o OptPaymentProvider) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentProvider from json.
func (o *OptPaymentProvider) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentProvider to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentProvider) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentProvider) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCard as json.
func (o OptPaymentSessionCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCard from json.
func (o *OptPaymentSessionCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCard to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionGuideMailSendFlag as json.
func (o OptPaymentSessionGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionGuideMailSendFlag from json.
func (o *OptPaymentSessionGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionGuideMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionKonbini as json.
func (o OptPaymentSessionKonbini) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionKonbini from json.
func (o *OptPaymentSessionKonbini) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionKonbini to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionKonbiniKonbiniReceptionMailSendFlag as json.
func (o OptPaymentSessionKonbiniKonbiniReceptionMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionKonbiniKonbiniReceptionMailSendFlag from json.
func (o *OptPaymentSessionKonbiniKonbiniReceptionMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionKonbiniKonbiniReceptionMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionKonbiniKonbiniReceptionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionKonbiniKonbiniReceptionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionPayPay as json.
func (o OptPaymentSessionPayPay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionPayPay from json.
func (o *OptPaymentSessionPayPay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionPayPay to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionPayPay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionPayPay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionStatus as json.
func (o OptPaymentSessionStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionStatus from json.
func (o *OptPaymentSessionStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionThanksMailSendFlag as json.
func (o OptPaymentSessionThanksMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionThanksMailSendFlag from json.
func (o *OptPaymentSessionThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionThanksMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionTransaction as json.
func (o OptPaymentSessionTransaction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionTransaction from json.
func (o *OptPaymentSessionTransaction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionTransaction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionTransaction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionTransaction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentStatus as json.
func (o OptPaymentStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentStatus from json.
func (o *OptPaymentStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalCount as json.
func (o OptPlanIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes PlanIntervalCount from json.
func (o *OptPlanIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalPattern as json.
func (o OptPlanIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanIntervalPattern from json.
func (o *OptPlanIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanName as json.
func (o OptPlanName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlanName from json.
func (o *OptPlanName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanPropertiesAmount as json.
func (o OptPlanPropertiesAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlanPropertiesAmount from json.
func (o *OptPlanPropertiesAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanPropertiesAmount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanPropertiesAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanPropertiesAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanPropertiesID as json.
func (o OptPlanPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlanPropertiesID from json.
func (o *OptPlanPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanPropertiesTax as json.
func (o OptPlanPropertiesTax) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlanPropertiesTax from json.
func (o *OptPlanPropertiesTax) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanPropertiesTax to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanPropertiesTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanPropertiesTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUsedFlag as json.
func (o OptPlanUsedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanUsedFlag from json.
func (o *OptPlanUsedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUsedFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformAccountPropertiesID as json.
func (o OptPlatformAccountPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformAccountPropertiesID from json.
func (o *OptPlatformAccountPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlatformAccountPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlatformAccountPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlatformAccountPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformID as json.
func (o OptPlatformID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformID from json.
func (o *OptPlatformID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlatformID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlatformID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlatformID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAccountID as json.
func (o OptPropertiesAccountID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesAccountID from json.
func (o *OptPropertiesAccountID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesAccountID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesAccountID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesAccountID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAmount as json.
func (o OptPropertiesAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesAmount from json.
func (o *OptPropertiesAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesAmount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesDefaultFlag as json.
func (o OptPropertiesDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PropertiesDefaultFlag from json.
func (o *OptPropertiesDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesExpire as json.
func (o OptPropertiesExpire) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesExpire from json.
func (o *OptPropertiesExpire) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesExpire to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesExpire) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesExpire) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesGuideMailSendFlag as json.
func (o OptPropertiesGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PropertiesGuideMailSendFlag from json.
func (o *OptPropertiesGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesGuideMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesID as json.
func (o OptPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesID from json.
func (o *OptPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesIntervalCount as json.
func (o OptPropertiesIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes PropertiesIntervalCount from json.
func (o *OptPropertiesIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesIntervalPattern as json.
func (o OptPropertiesIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PropertiesIntervalPattern from json.
func (o *OptPropertiesIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesProcessDate as json.
func (o OptPropertiesProcessDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesProcessDate from json.
func (o *OptPropertiesProcessDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesProcessDate to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesProcessDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesProcessDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopName as json.
func (o OptPropertiesShopName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesShopName from json.
func (o *OptPropertiesShopName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesShopName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesShopName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesShopName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopNameKana as json.
func (o OptPropertiesShopNameKana) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesShopNameKana from json.
func (o *OptPropertiesShopNameKana) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesShopNameKana to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesShopNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesShopNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesTax as json.
func (o OptPropertiesTax) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesTax from json.
func (o *OptPropertiesTax) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesTax to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesTotalAmount as json.
func (o OptPropertiesTotalAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesTotalAmount from json.
func (o *OptPropertiesTotalAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesTotalAmount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesTotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesTotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesURL as json.
func (o OptPropertiesURL) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PropertiesURL from json.
func (o *OptPropertiesURL) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPropertiesURL to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPropertiesURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPropertiesURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DS2Status as json.
func (o OptR3DS2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes R3DS2Status from json.
func (o *OptR3DS2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptR3DS2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptR3DS2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptR3DS2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DS2TransactionResult as json.
func (o OptR3DS2TransactionResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes R3DS2TransactionResult from json.
func (o *OptR3DS2TransactionResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptR3DS2TransactionResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptR3DS2TransactionResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptR3DS2TransactionResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DS2TransactionResultReason as json.
func (o OptR3DS2TransactionResultReason) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes R3DS2TransactionResultReason from json.
func (o *OptR3DS2TransactionResultReason) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptR3DS2TransactionResultReason to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptR3DS2TransactionResultReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptR3DS2TransactionResultReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RegistryCorporateInfo as json.
func (o OptRegistryCorporateInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RegistryCorporateInfo from json.
func (o *OptRegistryCorporateInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRegistryCorporateInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRegistryCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRegistryCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RolePropertiesID as json.
func (o OptRolePropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RolePropertiesID from json.
func (o *OptRolePropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRolePropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRolePropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRolePropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopID as json.
func (o OptShopID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopID from json.
func (o *OptShopID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptShopID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptShopID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptShopID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopInfoV2 as json.
func (o OptShopInfoV2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopInfoV2 from json.
func (o *OptShopInfoV2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptShopInfoV2 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptShopInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptShopInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopInfoV2PrepaidPointInfo as json.
func (o OptShopInfoV2PrepaidPointInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopInfoV2PrepaidPointInfo from json.
func (o *OptShopInfoV2PrepaidPointInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptShopInfoV2PrepaidPointInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptShopInfoV2PrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptShopInfoV2PrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopInfoV2SiteInfo as json.
func (o OptShopInfoV2SiteInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopInfoV2SiteInfo from json.
func (o *OptShopInfoV2SiteInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptShopInfoV2SiteInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptShopInfoV2SiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptShopInfoV2SiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopNameEn as json.
func (o OptShopNameEn) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopNameEn from json.
func (o *OptShopNameEn) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptShopNameEn to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptShopNameEn) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptShopNameEn) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopPaymentMethod as json.
func (o OptShopPaymentMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ShopPaymentMethod from json.
func (o *OptShopPaymentMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptShopPaymentMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptShopPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptShopPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopPropertiesID as json.
func (o OptShopPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ShopPropertiesID from json.
func (o *OptShopPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptShopPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptShopPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptShopPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Signature as json.
func (o OptSignature) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Signature from json.
func (o *OptSignature) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSignature to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSignature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSignature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StartDate as json.
func (o OptStartDate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes StartDate from json.
func (o *OptStartDate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptStartDate to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptStartDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptStartDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionEndMonthFlag as json.
func (o OptSubscriptionEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionEndMonthFlag from json.
func (o *OptSubscriptionEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionPayType as json.
func (o OptSubscriptionPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionPayType from json.
func (o *OptSubscriptionPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionPropertiesID as json.
func (o OptSubscriptionPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SubscriptionPropertiesID from json.
func (o *OptSubscriptionPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultStatus as json.
func (o OptSubscriptionResultStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionResultStatus from json.
func (o *OptSubscriptionResultStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionResultStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionResultStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionResultStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionStatus as json.
func (o OptSubscriptionStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionStatus from json.
func (o *OptSubscriptionStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tax as json.
func (o OptTax) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tax from json.
func (o *OptTax) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTax to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdTenantName as json.
func (o OptTdTenantName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TdTenantName from json.
func (o *OptTdTenantName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTdTenantName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTdTenantName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTdTenantName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrLine3 as json.
func (o OptTds2BillAddrLine3) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Tds2BillAddrLine3 from json.
func (o *OptTds2BillAddrLine3) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTds2BillAddrLine3 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTds2BillAddrLine3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTds2BillAddrLine3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Status as json.
func (o OptTds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2Status from json.
func (o *OptTds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTds2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ThanksMailSendFlag as json.
func (o OptThanksMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ThanksMailSendFlag from json.
func (o *OptThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptThanksMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Token as json.
func (o OptToken) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Token from json.
func (o *OptToken) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptToken to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptToken) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptToken) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TotalAmount as json.
func (o OptTotalAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TotalAmount from json.
func (o *OptTotalAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTotalAmount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes url.URL as json.
func (o OptURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptURI to nil")
	}
	o.Set = true
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes User as json.
func (o OptUser) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes User from json.
func (o *OptUser) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUser to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUser) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUser) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserAccountStatus as json.
func (o OptUserAccountStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes UserAccountStatus from json.
func (o *OptUserAccountStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserAccountStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserAccountStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserAccountStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserAgent as json.
func (o OptUserAgent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes UserAgent from json.
func (o *OptUserAgent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserAgent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserAgent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserAgent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserInviteStatus as json.
func (o OptUserInviteStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes UserInviteStatus from json.
func (o *OptUserInviteStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserInviteStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserInviteStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserInviteStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserMailAuthStatus as json.
func (o OptUserMailAuthStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes UserMailAuthStatus from json.
func (o *OptUserMailAuthStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserMailAuthStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserMailAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserMailAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserPasswordLockStatus as json.
func (o OptUserPasswordLockStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes UserPasswordLockStatus from json.
func (o *OptUserPasswordLockStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserPasswordLockStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserPasswordLockStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserPasswordLockStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserTwoFactorAuthStatus as json.
func (o OptUserTwoFactorAuthStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes UserTwoFactorAuthStatus from json.
func (o *OptUserTwoFactorAuthStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserTwoFactorAuthStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserTwoFactorAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserTwoFactorAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserType as json.
func (o OptUserType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes UserType from json.
func (o *OptUserType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptUserType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptUserType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptUserType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Verified as json.
func (o OptVerified) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes Verified from json.
func (o *OptVerified) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVerified to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVerified) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVerified) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardPayType as json.
func (o OptWebhookEventCardPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCardPayType from json.
func (o *OptWebhookEventCardPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCardPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardProcessType as json.
func (o OptWebhookEventCardProcessType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCardProcessType from json.
func (o *OptWebhookEventCardProcessType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCardProcessType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCardProcessType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCardProcessType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookResponseReceive as json.
func (o OptWebhookResponseReceive) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookResponseReceive from json.
func (o *OptWebhookResponseReceive) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookResponseReceive to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookResponseReceive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookResponseReceive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingPropertiesID as json.
func (o OptWebhookSettingPropertiesID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WebhookSettingPropertiesID from json.
func (o *OptWebhookSettingPropertiesID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookSettingPropertiesID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookSettingPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookSettingPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WinHeight as json.
func (o OptWinHeight) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WinHeight from json.
func (o *OptWinHeight) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWinHeight to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWinHeight) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWinHeight) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WinWidth as json.
func (o OptWinWidth) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes WinWidth from json.
func (o *OptWinWidth) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWinWidth to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWinWidth) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWinWidth) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesAmount as json.
func (o OptXReqPropertiesAmount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes XReqPropertiesAmount from json.
func (o *OptXReqPropertiesAmount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptXReqPropertiesAmount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptXReqPropertiesAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptXReqPropertiesAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesTax as json.
func (o OptXReqPropertiesTax) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes XReqPropertiesTax from json.
func (o *OptXReqPropertiesTax) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptXReqPropertiesTax to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptXReqPropertiesTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptXReqPropertiesTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OrderDescription as json.
func (s OrderDescription) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes OrderDescription from json.
func (s *OrderDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OrderDescription to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = OrderDescription(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OrderDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OrderDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OrderSerial as json.
func (s OrderSerial) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes OrderSerial from json.
func (s *OrderSerial) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OrderSerial to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = OrderSerial(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OrderSerial) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OrderSerial) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OverpaymentFlag as json.
func (s OverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes OverpaymentFlag from json.
func (s *OverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch OverpaymentFlag(v) {
	case OverpaymentFlag0:
		*s = OverpaymentFlag0
	case OverpaymentFlag1:
		*s = OverpaymentFlag1
	default:
		*s = OverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTContractsExaminations) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTContractsExaminations) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.EnableImmediateUse.Set {
			e.FieldStart("enable_immediate_use")
			s.EnableImmediateUse.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTContractsExaminations = [2]string{
	0: "shop_id",
	1: "enable_immediate_use",
}

// Decode decodes POSTContractsExaminations from json.
func (s *POSTContractsExaminations) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTContractsExaminations to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "enable_immediate_use":
			if err := func() error {
				s.EnableImmediateUse.Reset()
				if err := s.EnableImmediateUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_immediate_use\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTContractsExaminations")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTContractsExaminations) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTContractsExaminations) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTContractsExaminationsEnableImmediateUse as json.
func (s POSTContractsExaminationsEnableImmediateUse) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes POSTContractsExaminationsEnableImmediateUse from json.
func (s *POSTContractsExaminationsEnableImmediateUse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTContractsExaminationsEnableImmediateUse to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = POSTContractsExaminationsEnableImmediateUse(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTContractsExaminationsEnableImmediateUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTContractsExaminationsEnableImmediateUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTJoinTenants) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTJoinTenants) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType.Set {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.SendMailAddress.Set {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress.Set {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays.Set {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTJoinTenants = [15]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "send_mail_address",
	9:  "shop_mail_address",
	10: "log_keep_days",
	11: "api_version",
	12: "api_key_display_flag",
	13: "created",
	14: "updated",
}

// Decode decodes POSTJoinTenants from json.
func (s *POSTJoinTenants) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenants to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType.Reset()
				if err := s.ShopType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress.Reset()
				if err := s.SendMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress.Reset()
				if err := s.ShopMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays.Reset()
				if err := s.LogKeepDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTJoinTenants")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTJoinTenants) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenants) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTJoinTenantsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTJoinTenantsRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		s.Email.Encode(e)
	}
	{
		e.FieldStart("password")
		s.Password.Encode(e)
	}
	{
		e.FieldStart("tenant_url_id")
		s.TenantURLID.Encode(e)
	}
}

var jsonFieldsNameOfPOSTJoinTenantsRequest = [3]string{
	0: "email",
	1: "password",
	2: "tenant_url_id",
}

// Decode decodes POSTJoinTenantsRequest from json.
func (s *POSTJoinTenantsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenantsRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "password":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.Password.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "tenant_url_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.TenantURLID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_url_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTJoinTenantsRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPOSTJoinTenantsRequest) {
					name = jsonFieldsNameOfPOSTJoinTenantsRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTJoinTenantsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenantsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTJoinTenantsXReqPropertiesEmail as json.
func (s POSTJoinTenantsXReqPropertiesEmail) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes POSTJoinTenantsXReqPropertiesEmail from json.
func (s *POSTJoinTenantsXReqPropertiesEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenantsXReqPropertiesEmail to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = POSTJoinTenantsXReqPropertiesEmail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTJoinTenantsXReqPropertiesEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenantsXReqPropertiesEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTProviderReserve) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTProviderReserve) encodeFields(e *jx.Encoder) {
	{
		if s.ReservationList != nil {
			e.FieldStart("reservation_list")
			e.ArrStart()
			for _, elem := range s.ReservationList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPOSTProviderReserve = [1]string{
	0: "reservation_list",
}

// Decode decodes POSTProviderReserve from json.
func (s *POSTProviderReserve) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTProviderReserve to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "reservation_list":
			if err := func() error {
				s.ReservationList = make([]POSTProviderReserveReservationListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem POSTProviderReserveReservationListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReservationList = append(s.ReservationList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservation_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTProviderReserve")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTProviderReserve) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTProviderReserve) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTProviderReserveReservationListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTProviderReserveReservationListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ReservationID.Set {
			e.FieldStart("reservation_id")
			s.ReservationID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Provider.Set {
			e.FieldStart("provider")
			s.Provider.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTProviderReserveReservationListItem = [3]string{
	0: "reservation_id",
	1: "shop_id",
	2: "provider",
}

// Decode decodes POSTProviderReserveReservationListItem from json.
func (s *POSTProviderReserveReservationListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTProviderReserveReservationListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "reservation_id":
			if err := func() error {
				s.ReservationID.Reset()
				if err := s.ReservationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservation_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "provider":
			if err := func() error {
				s.Provider.Reset()
				if err := s.Provider.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTProviderReserveReservationListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTProviderReserveReservationListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTProviderReserveReservationListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTTenantEntries) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTTenantEntries) encodeFields(e *jx.Encoder) {
	{
		if s.UserData.Set {
			e.FieldStart("user_data")
			s.UserData.Encode(e)
		}
	}
	{
		if s.AccessToken.Set {
			e.FieldStart("access_token")
			s.AccessToken.Encode(e)
		}
	}
	{
		if s.Authorities != nil {
			e.FieldStart("authorities")
			e.ArrStart()
			for _, elem := range s.Authorities {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPOSTTenantEntries = [3]string{
	0: "user_data",
	1: "access_token",
	2: "authorities",
}

// Decode decodes POSTTenantEntries from json.
func (s *POSTTenantEntries) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntries to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_data":
			if err := func() error {
				s.UserData.Reset()
				if err := s.UserData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_data\"")
			}
		case "access_token":
			if err := func() error {
				s.AccessToken.Reset()
				if err := s.AccessToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_token\"")
			}
		case "authorities":
			if err := func() error {
				s.Authorities = make([]POSTTenantEntriesAuthoritiesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem POSTTenantEntriesAuthoritiesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Authorities = append(s.Authorities, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authorities\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTTenantEntries")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTTenantEntries) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntries) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTTenantEntriesAuthoritiesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTTenantEntriesAuthoritiesItem) encodeFields(e *jx.Encoder) {
	{
		if s.AuthID.Set {
			e.FieldStart("auth_id")
			s.AuthID.Encode(e)
		}
	}
	{
		if s.Endpoint.Set {
			e.FieldStart("endpoint")
			s.Endpoint.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTTenantEntriesAuthoritiesItem = [3]string{
	0: "auth_id",
	1: "endpoint",
	2: "method",
}

// Decode decodes POSTTenantEntriesAuthoritiesItem from json.
func (s *POSTTenantEntriesAuthoritiesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesAuthoritiesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auth_id":
			if err := func() error {
				s.AuthID.Reset()
				if err := s.AuthID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_id\"")
			}
		case "endpoint":
			if err := func() error {
				s.Endpoint.Reset()
				if err := s.Endpoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endpoint\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTTenantEntriesAuthoritiesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTTenantEntriesAuthoritiesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesAuthoritiesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTTenantEntriesRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTTenantEntriesRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		s.Email.Encode(e)
	}
	{
		e.FieldStart("password")
		s.Password.Encode(e)
	}
	{
		e.FieldStart("name")
		s.Name.Encode(e)
	}
	{
		e.FieldStart("tenant_url_id")
		s.TenantURLID.Encode(e)
	}
}

var jsonFieldsNameOfPOSTTenantEntriesRequest = [4]string{
	0: "email",
	1: "password",
	2: "name",
	3: "tenant_url_id",
}

// Decode decodes POSTTenantEntriesRequest from json.
func (s *POSTTenantEntriesRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "password":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.Password.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "tenant_url_id":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.TenantURLID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_url_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTTenantEntriesRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPOSTTenantEntriesRequest) {
					name = jsonFieldsNameOfPOSTTenantEntriesRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTTenantEntriesRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaperApplication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaperApplication) encodeFields(e *jx.Encoder) {
	{
		if s.PostalAccountNumber1.Set {
			e.FieldStart("postal_account_number_1")
			s.PostalAccountNumber1.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber2.Set {
			e.FieldStart("postal_account_number_2")
			s.PostalAccountNumber2.Encode(e)
		}
	}
	{
		if s.RequestFormID.Set {
			e.FieldStart("request_form_id")
			s.RequestFormID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaperApplication = [3]string{
	0: "postal_account_number_1",
	1: "postal_account_number_2",
	2: "request_form_id",
}

// Decode decodes PaperApplication from json.
func (s *PaperApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaperApplication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "postal_account_number_1":
			if err := func() error {
				s.PostalAccountNumber1.Reset()
				if err := s.PostalAccountNumber1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_1\"")
			}
		case "postal_account_number_2":
			if err := func() error {
				s.PostalAccountNumber2.Reset()
				if err := s.PostalAccountNumber2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_2\"")
			}
		case "request_form_id":
			if err := func() error {
				s.RequestFormID.Reset()
				if err := s.RequestFormID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_form_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaperApplication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Param as json.
func (s Param) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Param from json.
func (s *Param) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Param to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Param(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Param) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Param) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Password as json.
func (s Password) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Password from json.
func (s *Password) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Password to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Password(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Password) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Password) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PayPayPaymentJobCode as json.
func (s PayPayPaymentJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PayPayPaymentJobCode from json.
func (s *PayPayPaymentJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PayPayPaymentJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PayPayPaymentJobCode(v) {
	case PayPayPaymentJobCodeAUTH:
		*s = PayPayPaymentJobCodeAUTH
	case PayPayPaymentJobCodeCAPTURE:
		*s = PayPayPaymentJobCodeCAPTURE
	default:
		*s = PayPayPaymentJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PayPayPaymentJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PayPayPaymentJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PayType as json.
func (s PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PayType from json.
func (s *PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PayType(v) {
	case PayTypeCard:
		*s = PayTypeCard
	case PayTypeKonbini:
		*s = PayTypeKonbini
	case PayTypePaypay:
		*s = PayTypePaypay
	case PayTypeApplepay:
		*s = PayTypeApplepay
	case PayTypeDirectdebit:
		*s = PayTypeDirectdebit
	case PayTypeVirtualaccount:
		*s = PayTypeVirtualaccount
	default:
		*s = PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayCancelingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayCancelingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
}

var jsonFieldsNameOfPaymentApplePayCancelingRequest = [2]string{
	0: "pay_type",
	1: "access_id",
}

// Decode decodes PaymentApplePayCancelingRequest from json.
func (s *PaymentApplePayCancelingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayCancelingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayCancelingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentApplePayCancelingRequest) {
					name = jsonFieldsNameOfPaymentApplePayCancelingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayCancelingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayCancelingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayCancelingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayCancelingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayCancelingResponse = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes PaymentApplePayCancelingResponse from json.
func (s *PaymentApplePayCancelingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayCancelingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayCancelingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayCancelingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayCancelingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayCapturingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayCapturingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
}

var jsonFieldsNameOfPaymentApplePayCapturingRequest = [2]string{
	0: "pay_type",
	1: "access_id",
}

// Decode decodes PaymentApplePayCapturingRequest from json.
func (s *PaymentApplePayCapturingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayCapturingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayCapturingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentApplePayCapturingRequest) {
					name = jsonFieldsNameOfPaymentApplePayCapturingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayCapturingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayCapturingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayCapturingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayCapturingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayCapturingResponse = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes PaymentApplePayCapturingResponse from json.
func (s *PaymentApplePayCapturingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayCapturingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayCapturingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayCapturingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayCapturingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayCreatingRequest = [9]string{
	0: "id",
	1: "pay_type",
	2: "job_code",
	3: "amount",
	4: "tax",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
	8: "item_code",
}

// Decode decodes PaymentApplePayCreatingRequest from json.
func (s *PaymentApplePayCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00001110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentApplePayCreatingRequest) {
					name = jsonFieldsNameOfPaymentApplePayCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayCreatingResponse = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes PaymentApplePayCreatingResponse from json.
func (s *PaymentApplePayCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayExecutingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayExecutingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		e.FieldStart("token")
		s.Token.Encode(e)
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayExecutingRequest = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "token",
	3: "customer_id",
}

// Decode decodes PaymentApplePayExecutingRequest from json.
func (s *PaymentApplePayExecutingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayExecutingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "token":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayExecutingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentApplePayExecutingRequest) {
					name = jsonFieldsNameOfPaymentApplePayExecutingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayExecutingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayExecutingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayExecutingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayExecutingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayExecutingResponse = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes PaymentApplePayExecutingResponse from json.
func (s *PaymentApplePayExecutingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayExecutingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayExecutingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayExecutingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayExecutingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentApplePayListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PaymentApplePayListRetrievingResponse from json.
func (s *PaymentApplePayListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentApplePayListRetrievingResponseListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentApplePayListRetrievingResponseListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayListRetrievingResponseListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayListRetrievingResponseListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayListRetrievingResponseListItem = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes PaymentApplePayListRetrievingResponseListItem from json.
func (s *PaymentApplePayListRetrievingResponseListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayListRetrievingResponseListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayListRetrievingResponseListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayListRetrievingResponseListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayListRetrievingResponseListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentApplePayRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentApplePayRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentApplePayRetrievingResponse = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes PaymentApplePayRetrievingResponse from json.
func (s *PaymentApplePayRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentApplePayRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentApplePayRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentApplePayXReqPropertiesToken as json.
func (s PaymentApplePayXReqPropertiesToken) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentApplePayXReqPropertiesToken from json.
func (s *PaymentApplePayXReqPropertiesToken) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentApplePayXReqPropertiesToken to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentApplePayXReqPropertiesToken(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentApplePayXReqPropertiesToken) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentApplePayXReqPropertiesToken) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulk) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulk) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ProcessPlanDate.Set {
			e.FieldStart("process_plan_date")
			s.ProcessPlanDate.Encode(e)
		}
	}
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.ProcessStartDate.Set {
			e.FieldStart("process_start_date")
			s.ProcessStartDate.Encode(e)
		}
	}
	{
		if s.ProcessEndDate.Set {
			e.FieldStart("process_end_date")
			s.ProcessEndDate.Encode(e)
		}
	}
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.ProcessSuccessCount.Set {
			e.FieldStart("process_success_count")
			s.ProcessSuccessCount.Encode(e)
		}
	}
	{
		if s.ProcessFailureCount.Set {
			e.FieldStart("process_failure_count")
			s.ProcessFailureCount.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentBulk = [15]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "status",
	4:  "process_plan_date",
	5:  "file_name",
	6:  "process_start_date",
	7:  "process_end_date",
	8:  "total_count",
	9:  "process_success_count",
	10: "process_failure_count",
	11: "error_code",
	12: "delete_flag",
	13: "created",
	14: "updated",
}

// Decode decodes PaymentBulk from json.
func (s *PaymentBulk) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulk to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "process_plan_date":
			if err := func() error {
				s.ProcessPlanDate.Reset()
				if err := s.ProcessPlanDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_plan_date\"")
			}
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "process_start_date":
			if err := func() error {
				s.ProcessStartDate.Reset()
				if err := s.ProcessStartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_start_date\"")
			}
		case "process_end_date":
			if err := func() error {
				s.ProcessEndDate.Reset()
				if err := s.ProcessEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_end_date\"")
			}
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "process_success_count":
			if err := func() error {
				s.ProcessSuccessCount.Reset()
				if err := s.ProcessSuccessCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_success_count\"")
			}
		case "process_failure_count":
			if err := func() error {
				s.ProcessFailureCount.Reset()
				if err := s.ProcessFailureCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_failure_count\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulk")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulk) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulk) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentBulkDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes PaymentBulkDeletingResponse from json.
func (s *PaymentBulkDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkDetail) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentBulkDetail = [22]string{
	0:  "id",
	1:  "shop_id",
	2:  "order_id",
	3:  "access_id",
	4:  "job_code",
	5:  "amount",
	6:  "tax",
	7:  "total_amount",
	8:  "method",
	9:  "pay_times",
	10: "customer_id",
	11: "card_id",
	12: "client_field_1",
	13: "client_field_2",
	14: "client_field_3",
	15: "error_code",
	16: "created",
	17: "updated",
	18: "item_code",
	19: "transaction_id",
	20: "approve",
	21: "forward",
}

// Decode decodes PaymentBulkDetail from json.
func (s *PaymentBulkDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkDetailListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkDetailListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ErrorDetail != nil {
			e.FieldStart("error_detail")
			e.ArrStart()
			for _, elem := range s.ErrorDetail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentBulkDetailListRetrievingResponse = [9]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "error_code",
	7: "list",
	8: "error_detail",
}

// Decode decodes PaymentBulkDetailListRetrievingResponse from json.
func (s *PaymentBulkDetailListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetailListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentBulkDetail, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentBulkDetail
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		case "error_detail":
			if err := func() error {
				s.ErrorDetail = make([]PaymentBulkErrorDetail, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentBulkErrorDetail
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ErrorDetail = append(s.ErrorDetail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_detail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkDetailListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkDetailListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetailListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailStatus as json.
func (s PaymentBulkDetailStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkDetailStatus from json.
func (s *PaymentBulkDetailStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetailStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkDetailStatus(v) {
	case PaymentBulkDetailStatusCHECKED:
		*s = PaymentBulkDetailStatusCHECKED
	case PaymentBulkDetailStatusSUCCEEDED:
		*s = PaymentBulkDetailStatusSUCCEEDED
	case PaymentBulkDetailStatusFAILED:
		*s = PaymentBulkDetailStatusFAILED
	default:
		*s = PaymentBulkDetailStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkDetailStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetailStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkErrorDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkErrorDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.Errors != nil {
			e.FieldStart("errors")
			e.ArrStart()
			for _, elem := range s.Errors {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentBulkErrorDetail = [3]string{
	0: "number",
	1: "order_id",
	2: "errors",
}

// Decode decodes PaymentBulkErrorDetail from json.
func (s *PaymentBulkErrorDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkErrorDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "errors":
			if err := func() error {
				s.Errors = make([]FincodeAPIError, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem FincodeAPIError
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Errors = append(s.Errors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errors\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkErrorDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkErrorDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkErrorDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentBulkListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PaymentBulkListRetrievingResponse from json.
func (s *PaymentBulkListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentBulk, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentBulk
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkPayType as json.
func (s PaymentBulkPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkPayType from json.
func (s *PaymentBulkPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkPayType(v) {
	case PaymentBulkPayTypeCard:
		*s = PaymentBulkPayTypeCard
	default:
		*s = PaymentBulkPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkPropertiesID as json.
func (s PaymentBulkPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentBulkPropertiesID from json.
func (s *PaymentBulkPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentBulkPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkStatus as json.
func (s PaymentBulkStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkStatus from json.
func (s *PaymentBulkStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkStatus(v) {
	case PaymentBulkStatusCHECKING:
		*s = PaymentBulkStatusCHECKING
	case PaymentBulkStatusCHECKED:
		*s = PaymentBulkStatusCHECKED
	case PaymentBulkStatusRUNNING:
		*s = PaymentBulkStatusRUNNING
	case PaymentBulkStatusCOMPLETED:
		*s = PaymentBulkStatusCOMPLETED
	case PaymentBulkStatusERROR:
		*s = PaymentBulkStatusERROR
	default:
		*s = PaymentBulkStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardCancelingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardCancelingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
}

var jsonFieldsNameOfPaymentCardCancelingRequest = [2]string{
	0: "pay_type",
	1: "access_id",
}

// Decode decodes PaymentCardCancelingRequest from json.
func (s *PaymentCardCancelingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardCancelingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardCancelingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentCardCancelingRequest) {
					name = jsonFieldsNameOfPaymentCardCancelingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardCancelingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardCancelingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardCancelingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardCancelingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardCancelingResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardCancelingResponse from json.
func (s *PaymentCardCancelingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardCancelingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardCancelingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardCancelingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardCancelingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardCapturingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardCapturingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardCapturingRequest = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "method",
	3: "pay_times",
}

// Decode decodes PaymentCardCapturingRequest from json.
func (s *PaymentCardCapturingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardCapturingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardCapturingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentCardCapturingRequest) {
					name = jsonFieldsNameOfPaymentCardCapturingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardCapturingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardCapturingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardCapturingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardCapturingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardCapturingResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardCapturingResponse from json.
func (s *PaymentCardCapturingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardCapturingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardCapturingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardCapturingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardCapturingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardChangingAmountRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardChangingAmountRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
}

var jsonFieldsNameOfPaymentCardChangingAmountRequest = [5]string{
	0: "pay_type",
	1: "access_id",
	2: "amount",
	3: "tax",
	4: "job_code",
}

// Decode decodes PaymentCardChangingAmountRequest from json.
func (s *PaymentCardChangingAmountRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardChangingAmountRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardChangingAmountRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentCardChangingAmountRequest) {
					name = jsonFieldsNameOfPaymentCardChangingAmountRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardChangingAmountRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardChangingAmountRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardChangingAmountResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardChangingAmountResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardChangingAmountResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardChangingAmountResponse from json.
func (s *PaymentCardChangingAmountResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardChangingAmountResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardChangingAmountResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardChangingAmountResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardChangingAmountResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardCreatingRequest = [11]string{
	0:  "id",
	1:  "pay_type",
	2:  "job_code",
	3:  "amount",
	4:  "tax",
	5:  "tds_type",
	6:  "tds2_type",
	7:  "td_tenant_name",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
}

// Decode decodes PaymentCardCreatingRequest from json.
func (s *PaymentCardCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentCardCreatingRequest) {
					name = jsonFieldsNameOfPaymentCardCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardCreatingResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardCreatingResponse from json.
func (s *PaymentCardCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardExecutingAfter3DSRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardExecutingAfter3DSRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		if s.PaRes.Set {
			e.FieldStart("pa_res")
			s.PaRes.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardExecutingAfter3DSRequest = [3]string{
	0: "pay_type",
	1: "access_id",
	2: "pa_res",
}

// Decode decodes PaymentCardExecutingAfter3DSRequest from json.
func (s *PaymentCardExecutingAfter3DSRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardExecutingAfter3DSRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pa_res":
			if err := func() error {
				s.PaRes.Reset()
				if err := s.PaRes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pa_res\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardExecutingAfter3DSRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentCardExecutingAfter3DSRequest) {
					name = jsonFieldsNameOfPaymentCardExecutingAfter3DSRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardExecutingAfter3DSRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardExecutingAfter3DSRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardExecutingAfter3DSResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardExecutingAfter3DSResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardExecutingAfter3DSResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardExecutingAfter3DSResponse from json.
func (s *PaymentCardExecutingAfter3DSResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardExecutingAfter3DSResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardExecutingAfter3DSResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardExecutingAfter3DSResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardExecutingAfter3DSResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardExecutingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardExecutingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange.Set {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate.Set {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange.Set {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount.Set {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge.Set {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay.Set {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage.Set {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd.Set {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity.Set {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay.Set {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear.Set {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData.Set {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod.Set {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch.Set {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry.Set {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState.Set {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity.Set {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1.Set {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2.Set {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode.Set {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry.Set {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState.Set {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity.Set {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1.Set {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2.Set {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3.Set {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode.Set {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd.Set {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress.Set {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc.Set {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo.Set {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc.Set {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo.Set {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc.Set {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo.Set {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe.Set {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate.Set {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd.Set {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd.Set {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry.Set {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency.Set {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount.Set {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount.Set {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr.Set {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardExecutingRequest = [53]string{
	0:  "pay_type",
	1:  "access_id",
	2:  "token",
	3:  "customer_id",
	4:  "card_id",
	5:  "method",
	6:  "pay_times",
	7:  "tds2_ret_url",
	8:  "tds2_ch_acc_change",
	9:  "tds2_ch_acc_date",
	10: "tds2_ch_acc_pw_change",
	11: "tds2_nb_purchase_account",
	12: "tds2_payment_acc_age",
	13: "tds2_provision_attempts_day",
	14: "tds2_ship_address_usage",
	15: "tds2_ship_name_ind",
	16: "tds2_suspicious_acc_activity",
	17: "tds2_txn_activity_day",
	18: "tds2_txn_activity_year",
	19: "tds2_three_ds_req_auth_data",
	20: "tds2_three_ds_req_auth_method",
	21: "tds2_addr_match",
	22: "tds2_bill_addr_country",
	23: "tds2_bill_addr_state",
	24: "tds2_bill_addr_city",
	25: "tds2_bill_addr_line_1",
	26: "tds2_bill_addr_line_2",
	27: "tds2_bill_addr_line_3",
	28: "tds2_bill_addr_post_code",
	29: "tds2_ship_addr_country",
	30: "tds2_ship_addr_state",
	31: "tds2_ship_addr_city",
	32: "tds2_ship_addr_line_1",
	33: "tds2_ship_addr_line_2",
	34: "tds2_ship_addr_line_3",
	35: "tds2_ship_addr_post_code",
	36: "tds2_ship_ind",
	37: "tds2_delivery_email_address",
	38: "tds2_home_phone_cc",
	39: "tds2_home_phone_no",
	40: "tds2_mobile_phone_cc",
	41: "tds2_mobile_phone_no",
	42: "tds2_work_phone_cc",
	43: "tds2_work_phone_no",
	44: "tds2_delivery_timeframe",
	45: "tds2_pre_order_date",
	46: "tds2_pre_order_purchase_ind",
	47: "tds2_reorder_items_ind",
	48: "tds2_recurring_expiry",
	49: "tds2_recurring_frequency",
	50: "tds2_gift_card_amount",
	51: "tds2_gift_card_count",
	52: "tds2_gift_card_curr",
}

// Decode decodes PaymentCardExecutingRequest from json.
func (s *PaymentCardExecutingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardExecutingRequest to nil")
	}
	var requiredBitSet [7]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange.Reset()
				if err := s.Tds2ChAccChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate.Reset()
				if err := s.Tds2ChAccDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange.Reset()
				if err := s.Tds2ChAccPwChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount.Reset()
				if err := s.Tds2NbPurchaseAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge.Reset()
				if err := s.Tds2PaymentAccAge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay.Reset()
				if err := s.Tds2ProvisionAttemptsDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage.Reset()
				if err := s.Tds2ShipAddressUsage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd.Reset()
				if err := s.Tds2ShipNameInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity.Reset()
				if err := s.Tds2SuspiciousAccActivity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay.Reset()
				if err := s.Tds2TxnActivityDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear.Reset()
				if err := s.Tds2TxnActivityYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData.Reset()
				if err := s.Tds2ThreeDsReqAuthData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod.Reset()
				if err := s.Tds2ThreeDsReqAuthMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch.Reset()
				if err := s.Tds2AddrMatch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry.Reset()
				if err := s.Tds2BillAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState.Reset()
				if err := s.Tds2BillAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity.Reset()
				if err := s.Tds2BillAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1.Reset()
				if err := s.Tds2BillAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2.Reset()
				if err := s.Tds2BillAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode.Reset()
				if err := s.Tds2BillAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry.Reset()
				if err := s.Tds2ShipAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState.Reset()
				if err := s.Tds2ShipAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity.Reset()
				if err := s.Tds2ShipAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1.Reset()
				if err := s.Tds2ShipAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2.Reset()
				if err := s.Tds2ShipAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3.Reset()
				if err := s.Tds2ShipAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode.Reset()
				if err := s.Tds2ShipAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd.Reset()
				if err := s.Tds2ShipInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress.Reset()
				if err := s.Tds2DeliveryEmailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc.Reset()
				if err := s.Tds2HomePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo.Reset()
				if err := s.Tds2HomePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc.Reset()
				if err := s.Tds2MobilePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo.Reset()
				if err := s.Tds2MobilePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc.Reset()
				if err := s.Tds2WorkPhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo.Reset()
				if err := s.Tds2WorkPhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe.Reset()
				if err := s.Tds2DeliveryTimeframe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate.Reset()
				if err := s.Tds2PreOrderDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd.Reset()
				if err := s.Tds2PreOrderPurchaseInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd.Reset()
				if err := s.Tds2ReorderItemsInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry.Reset()
				if err := s.Tds2RecurringExpiry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency.Reset()
				if err := s.Tds2RecurringFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount.Reset()
				if err := s.Tds2GiftCardAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount.Reset()
				if err := s.Tds2GiftCardCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr.Reset()
				if err := s.Tds2GiftCardCurr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardExecutingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [7]uint8{
		0b00000011,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentCardExecutingRequest) {
					name = jsonFieldsNameOfPaymentCardExecutingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardExecutingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardExecutingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardExecutingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardExecutingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardExecutingResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardExecutingResponse from json.
func (s *PaymentCardExecutingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardExecutingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardExecutingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardExecutingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardExecutingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentCardListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PaymentCardListRetrievingResponse from json.
func (s *PaymentCardListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentCardListRetrievingResponseListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentCardListRetrievingResponseListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardListRetrievingResponseListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardListRetrievingResponseListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardListRetrievingResponseListItem = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardListRetrievingResponseListItem from json.
func (s *PaymentCardListRetrievingResponseListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardListRetrievingResponseListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardListRetrievingResponseListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardListRetrievingResponseListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardListRetrievingResponseListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardReauthorizingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardReauthorizingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		e.FieldStart("method")
		s.Method.Encode(e)
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardReauthorizingRequest = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "method",
	3: "pay_times",
}

// Decode decodes PaymentCardReauthorizingRequest from json.
func (s *PaymentCardReauthorizingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardReauthorizingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "method":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardReauthorizingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentCardReauthorizingRequest) {
					name = jsonFieldsNameOfPaymentCardReauthorizingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardReauthorizingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardReauthorizingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardReauthorizingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardReauthorizingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardReauthorizingResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardReauthorizingResponse from json.
func (s *PaymentCardReauthorizingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardReauthorizingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardReauthorizingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardReauthorizingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardReauthorizingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentCardRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentCardRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentCardRetrievingResponse = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes PaymentCardRetrievingResponse from json.
func (s *PaymentCardRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCardRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentCardRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentCardRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCardRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentCompletionDate as json.
func (s PaymentCompletionDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentCompletionDate from json.
func (s *PaymentCompletionDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentCompletionDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentCompletionDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentCompletionDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentCompletionDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentDate as json.
func (s PaymentDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentDate from json.
func (s *PaymentDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentDeadline as json.
func (s PaymentDeadline) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentDeadline from json.
func (s *PaymentDeadline) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDeadline to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentDeadline(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentDeadline) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDeadline) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitCancelingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitCancelingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
}

var jsonFieldsNameOfPaymentDirectDebitCancelingRequest = [2]string{
	0: "pay_type",
	1: "access_id",
}

// Decode decodes PaymentDirectDebitCancelingRequest from json.
func (s *PaymentDirectDebitCancelingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitCancelingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitCancelingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentDirectDebitCancelingRequest) {
					name = jsonFieldsNameOfPaymentDirectDebitCancelingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitCancelingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitCancelingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitCancelingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitCancelingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitCancelingResponse = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes PaymentDirectDebitCancelingResponse from json.
func (s *PaymentDirectDebitCancelingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitCancelingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitCancelingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitCancelingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitCancelingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitChangingAmountRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitChangingAmountRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitChangingAmountRequest = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "amount",
	3: "tax",
}

// Decode decodes PaymentDirectDebitChangingAmountRequest from json.
func (s *PaymentDirectDebitChangingAmountRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitChangingAmountRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitChangingAmountRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentDirectDebitChangingAmountRequest) {
					name = jsonFieldsNameOfPaymentDirectDebitChangingAmountRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitChangingAmountRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitChangingAmountRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitChangingAmountResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitChangingAmountResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitChangingAmountResponse = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes PaymentDirectDebitChangingAmountResponse from json.
func (s *PaymentDirectDebitChangingAmountResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitChangingAmountResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitChangingAmountResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitChangingAmountResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitChangingAmountResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitCreatingRequest = [8]string{
	0: "id",
	1: "pay_type",
	2: "amount",
	3: "tax",
	4: "remarks",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
}

// Decode decodes PaymentDirectDebitCreatingRequest from json.
func (s *PaymentDirectDebitCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentDirectDebitCreatingRequest) {
					name = jsonFieldsNameOfPaymentDirectDebitCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitCreatingResponse = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes PaymentDirectDebitCreatingResponse from json.
func (s *PaymentDirectDebitCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitExecutingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitExecutingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		e.FieldStart("customer_id")
		s.CustomerID.Encode(e)
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		e.FieldStart("target_date")
		s.TargetDate.Encode(e)
	}
}

var jsonFieldsNameOfPaymentDirectDebitExecutingRequest = [5]string{
	0: "pay_type",
	1: "access_id",
	2: "customer_id",
	3: "payment_method_id",
	4: "target_date",
}

// Decode decodes PaymentDirectDebitExecutingRequest from json.
func (s *PaymentDirectDebitExecutingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitExecutingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "customer_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "target_date":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitExecutingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentDirectDebitExecutingRequest) {
					name = jsonFieldsNameOfPaymentDirectDebitExecutingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitExecutingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitExecutingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitExecutingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitExecutingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitExecutingResponse = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes PaymentDirectDebitExecutingResponse from json.
func (s *PaymentDirectDebitExecutingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitExecutingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitExecutingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitExecutingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitExecutingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PaymentDirectDebitListRetrievingResponse from json.
func (s *PaymentDirectDebitListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentDirectDebitListRetrievingResponseListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentDirectDebitListRetrievingResponseListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitListRetrievingResponseListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitListRetrievingResponseListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitListRetrievingResponseListItem = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes PaymentDirectDebitListRetrievingResponseListItem from json.
func (s *PaymentDirectDebitListRetrievingResponseListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitListRetrievingResponseListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitListRetrievingResponseListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitListRetrievingResponseListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitListRetrievingResponseListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentDirectDebitRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentDirectDebitRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentDirectDebitRetrievingResponse = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes PaymentDirectDebitRetrievingResponse from json.
func (s *PaymentDirectDebitRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentDirectDebitRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentDirectDebitRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentDirectDebitRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentDirectDebitRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentID as json.
func (s PaymentID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentID from json.
func (s *PaymentID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniCancelingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniCancelingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
}

var jsonFieldsNameOfPaymentKonbiniCancelingRequest = [2]string{
	0: "pay_type",
	1: "access_id",
}

// Decode decodes PaymentKonbiniCancelingRequest from json.
func (s *PaymentKonbiniCancelingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCancelingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniCancelingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentKonbiniCancelingRequest) {
					name = jsonFieldsNameOfPaymentKonbiniCancelingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniCancelingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCancelingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniCancelingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniCancelingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniCancelingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes PaymentKonbiniCancelingResponse from json.
func (s *PaymentKonbiniCancelingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCancelingResponse to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniCancelingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniCancelingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCancelingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCancelingResponseBarcodeFormat as json.
func (s PaymentKonbiniCancelingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniCancelingResponseBarcodeFormat from json.
func (s *PaymentKonbiniCancelingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCancelingResponseBarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniCancelingResponseBarcodeFormat(v) {
	case PaymentKonbiniCancelingResponseBarcodeFormatJPG:
		*s = PaymentKonbiniCancelingResponseBarcodeFormatJPG
	case PaymentKonbiniCancelingResponseBarcodeFormatPNG:
		*s = PaymentKonbiniCancelingResponseBarcodeFormatPNG
	case PaymentKonbiniCancelingResponseBarcodeFormatBmp:
		*s = PaymentKonbiniCancelingResponseBarcodeFormatBmp
	default:
		*s = PaymentKonbiniCancelingResponseBarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniCancelingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCancelingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCancelingResponseCancelOverpaymentFlag as json.
func (s PaymentKonbiniCancelingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniCancelingResponseCancelOverpaymentFlag from json.
func (s *PaymentKonbiniCancelingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCancelingResponseCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniCancelingResponseCancelOverpaymentFlag(v) {
	case PaymentKonbiniCancelingResponseCancelOverpaymentFlag0:
		*s = PaymentKonbiniCancelingResponseCancelOverpaymentFlag0
	case PaymentKonbiniCancelingResponseCancelOverpaymentFlag1:
		*s = PaymentKonbiniCancelingResponseCancelOverpaymentFlag1
	default:
		*s = PaymentKonbiniCancelingResponseCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniCancelingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCancelingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCancelingResponseOverpaymentFlag as json.
func (s PaymentKonbiniCancelingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniCancelingResponseOverpaymentFlag from json.
func (s *PaymentKonbiniCancelingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCancelingResponseOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniCancelingResponseOverpaymentFlag(v) {
	case PaymentKonbiniCancelingResponseOverpaymentFlag0:
		*s = PaymentKonbiniCancelingResponseOverpaymentFlag0
	case PaymentKonbiniCancelingResponseOverpaymentFlag1:
		*s = PaymentKonbiniCancelingResponseOverpaymentFlag1
	default:
		*s = PaymentKonbiniCancelingResponseOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniCancelingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCancelingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniCreatingRequest = [7]string{
	0: "id",
	1: "pay_type",
	2: "amount",
	3: "tax",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
}

// Decode decodes PaymentKonbiniCreatingRequest from json.
func (s *PaymentKonbiniCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentKonbiniCreatingRequest) {
					name = jsonFieldsNameOfPaymentKonbiniCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniCreatingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes PaymentKonbiniCreatingResponse from json.
func (s *PaymentKonbiniCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCreatingResponse to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCreatingResponseBarcodeFormat as json.
func (s PaymentKonbiniCreatingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniCreatingResponseBarcodeFormat from json.
func (s *PaymentKonbiniCreatingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCreatingResponseBarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniCreatingResponseBarcodeFormat(v) {
	case PaymentKonbiniCreatingResponseBarcodeFormatJPG:
		*s = PaymentKonbiniCreatingResponseBarcodeFormatJPG
	case PaymentKonbiniCreatingResponseBarcodeFormatPNG:
		*s = PaymentKonbiniCreatingResponseBarcodeFormatPNG
	case PaymentKonbiniCreatingResponseBarcodeFormatBmp:
		*s = PaymentKonbiniCreatingResponseBarcodeFormatBmp
	default:
		*s = PaymentKonbiniCreatingResponseBarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniCreatingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCreatingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCreatingResponseCancelOverpaymentFlag as json.
func (s PaymentKonbiniCreatingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniCreatingResponseCancelOverpaymentFlag from json.
func (s *PaymentKonbiniCreatingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCreatingResponseCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniCreatingResponseCancelOverpaymentFlag(v) {
	case PaymentKonbiniCreatingResponseCancelOverpaymentFlag0:
		*s = PaymentKonbiniCreatingResponseCancelOverpaymentFlag0
	case PaymentKonbiniCreatingResponseCancelOverpaymentFlag1:
		*s = PaymentKonbiniCreatingResponseCancelOverpaymentFlag1
	default:
		*s = PaymentKonbiniCreatingResponseCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniCreatingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCreatingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniCreatingResponseOverpaymentFlag as json.
func (s PaymentKonbiniCreatingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniCreatingResponseOverpaymentFlag from json.
func (s *PaymentKonbiniCreatingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniCreatingResponseOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniCreatingResponseOverpaymentFlag(v) {
	case PaymentKonbiniCreatingResponseOverpaymentFlag0:
		*s = PaymentKonbiniCreatingResponseOverpaymentFlag0
	case PaymentKonbiniCreatingResponseOverpaymentFlag1:
		*s = PaymentKonbiniCreatingResponseOverpaymentFlag1
	default:
		*s = PaymentKonbiniCreatingResponseOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniCreatingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniCreatingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniExecutingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniExecutingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		e.FieldStart("device_name")
		s.DeviceName.Encode(e)
	}
	{
		e.FieldStart("win_width")
		s.WinWidth.Encode(e)
	}
	{
		e.FieldStart("win_height")
		s.WinHeight.Encode(e)
	}
	{
		e.FieldStart("pixel_ratio")
		s.PixelRatio.Encode(e)
	}
	{
		e.FieldStart("win_size_type")
		s.WinSizeType.Encode(e)
	}
}

var jsonFieldsNameOfPaymentKonbiniExecutingRequest = [9]string{
	0: "pay_type",
	1: "access_id",
	2: "customer_id",
	3: "payment_term_day",
	4: "device_name",
	5: "win_width",
	6: "win_height",
	7: "pixel_ratio",
	8: "win_size_type",
}

// Decode decodes PaymentKonbiniExecutingRequest from json.
func (s *PaymentKonbiniExecutingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniExecutingRequest to nil")
	}
	var requiredBitSet [2]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "device_name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "win_width":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "pixel_ratio":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.PixelRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pixel_ratio\"")
			}
		case "win_size_type":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.WinSizeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_size_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniExecutingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b11110011,
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentKonbiniExecutingRequest) {
					name = jsonFieldsNameOfPaymentKonbiniExecutingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniExecutingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniExecutingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniExecutingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniExecutingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniExecutingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes PaymentKonbiniExecutingResponse from json.
func (s *PaymentKonbiniExecutingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniExecutingResponse to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniExecutingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniExecutingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniExecutingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniExecutingResponseBarcodeFormat as json.
func (s PaymentKonbiniExecutingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniExecutingResponseBarcodeFormat from json.
func (s *PaymentKonbiniExecutingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniExecutingResponseBarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniExecutingResponseBarcodeFormat(v) {
	case PaymentKonbiniExecutingResponseBarcodeFormatJPG:
		*s = PaymentKonbiniExecutingResponseBarcodeFormatJPG
	case PaymentKonbiniExecutingResponseBarcodeFormatPNG:
		*s = PaymentKonbiniExecutingResponseBarcodeFormatPNG
	case PaymentKonbiniExecutingResponseBarcodeFormatBmp:
		*s = PaymentKonbiniExecutingResponseBarcodeFormatBmp
	default:
		*s = PaymentKonbiniExecutingResponseBarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniExecutingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniExecutingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniExecutingResponseCancelOverpaymentFlag as json.
func (s PaymentKonbiniExecutingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniExecutingResponseCancelOverpaymentFlag from json.
func (s *PaymentKonbiniExecutingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniExecutingResponseCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniExecutingResponseCancelOverpaymentFlag(v) {
	case PaymentKonbiniExecutingResponseCancelOverpaymentFlag0:
		*s = PaymentKonbiniExecutingResponseCancelOverpaymentFlag0
	case PaymentKonbiniExecutingResponseCancelOverpaymentFlag1:
		*s = PaymentKonbiniExecutingResponseCancelOverpaymentFlag1
	default:
		*s = PaymentKonbiniExecutingResponseCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniExecutingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniExecutingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniExecutingResponseOverpaymentFlag as json.
func (s PaymentKonbiniExecutingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniExecutingResponseOverpaymentFlag from json.
func (s *PaymentKonbiniExecutingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniExecutingResponseOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniExecutingResponseOverpaymentFlag(v) {
	case PaymentKonbiniExecutingResponseOverpaymentFlag0:
		*s = PaymentKonbiniExecutingResponseOverpaymentFlag0
	case PaymentKonbiniExecutingResponseOverpaymentFlag1:
		*s = PaymentKonbiniExecutingResponseOverpaymentFlag1
	default:
		*s = PaymentKonbiniExecutingResponseOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniExecutingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniExecutingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniGeneratingBarcodeRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniGeneratingBarcodeRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		e.FieldStart("device_name")
		s.DeviceName.Encode(e)
	}
	{
		e.FieldStart("win_width")
		s.WinWidth.Encode(e)
	}
	{
		e.FieldStart("win_height")
		s.WinHeight.Encode(e)
	}
	{
		e.FieldStart("pixel_ratio")
		s.PixelRatio.Encode(e)
	}
	{
		e.FieldStart("win_size_type")
		s.WinSizeType.Encode(e)
	}
}

var jsonFieldsNameOfPaymentKonbiniGeneratingBarcodeRequest = [7]string{
	0: "pay_type",
	1: "access_id",
	2: "device_name",
	3: "win_width",
	4: "win_height",
	5: "pixel_ratio",
	6: "win_size_type",
}

// Decode decodes PaymentKonbiniGeneratingBarcodeRequest from json.
func (s *PaymentKonbiniGeneratingBarcodeRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniGeneratingBarcodeRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "device_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "win_width":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "pixel_ratio":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.PixelRatio.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pixel_ratio\"")
			}
		case "win_size_type":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.WinSizeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_size_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniGeneratingBarcodeRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01111111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentKonbiniGeneratingBarcodeRequest) {
					name = jsonFieldsNameOfPaymentKonbiniGeneratingBarcodeRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniGeneratingBarcodeRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniGeneratingBarcodeRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniGeneratingBarcodeResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniGeneratingBarcodeResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniGeneratingBarcodeResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes PaymentKonbiniGeneratingBarcodeResponse from json.
func (s *PaymentKonbiniGeneratingBarcodeResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniGeneratingBarcodeResponse to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniGeneratingBarcodeResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniGeneratingBarcodeResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniGeneratingBarcodeResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat as json.
func (s PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat from json.
func (s *PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat(v) {
	case PaymentKonbiniGeneratingBarcodeResponseBarcodeFormatJPG:
		*s = PaymentKonbiniGeneratingBarcodeResponseBarcodeFormatJPG
	case PaymentKonbiniGeneratingBarcodeResponseBarcodeFormatPNG:
		*s = PaymentKonbiniGeneratingBarcodeResponseBarcodeFormatPNG
	case PaymentKonbiniGeneratingBarcodeResponseBarcodeFormatBmp:
		*s = PaymentKonbiniGeneratingBarcodeResponseBarcodeFormatBmp
	default:
		*s = PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniGeneratingBarcodeResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag as json.
func (s PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag from json.
func (s *PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag(v) {
	case PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag0:
		*s = PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag0
	case PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag1:
		*s = PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag1
	default:
		*s = PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniGeneratingBarcodeResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag as json.
func (s PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag from json.
func (s *PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag(v) {
	case PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag0:
		*s = PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag0
	case PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag1:
		*s = PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag1
	default:
		*s = PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniGeneratingBarcodeResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PaymentKonbiniListRetrievingResponse from json.
func (s *PaymentKonbiniListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentKonbiniListRetrievingResponseListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentKonbiniListRetrievingResponseListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniListRetrievingResponseListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniListRetrievingResponseListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniListRetrievingResponseListItem = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes PaymentKonbiniListRetrievingResponseListItem from json.
func (s *PaymentKonbiniListRetrievingResponseListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniListRetrievingResponseListItem to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniListRetrievingResponseListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniListRetrievingResponseListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniListRetrievingResponseListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniListRetrievingResponseListItemBarcodeFormat as json.
func (s PaymentKonbiniListRetrievingResponseListItemBarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniListRetrievingResponseListItemBarcodeFormat from json.
func (s *PaymentKonbiniListRetrievingResponseListItemBarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniListRetrievingResponseListItemBarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniListRetrievingResponseListItemBarcodeFormat(v) {
	case PaymentKonbiniListRetrievingResponseListItemBarcodeFormatJPG:
		*s = PaymentKonbiniListRetrievingResponseListItemBarcodeFormatJPG
	case PaymentKonbiniListRetrievingResponseListItemBarcodeFormatPNG:
		*s = PaymentKonbiniListRetrievingResponseListItemBarcodeFormatPNG
	case PaymentKonbiniListRetrievingResponseListItemBarcodeFormatBmp:
		*s = PaymentKonbiniListRetrievingResponseListItemBarcodeFormatBmp
	default:
		*s = PaymentKonbiniListRetrievingResponseListItemBarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniListRetrievingResponseListItemBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniListRetrievingResponseListItemBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag as json.
func (s PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag from json.
func (s *PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag(v) {
	case PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag0:
		*s = PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag0
	case PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag1:
		*s = PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag1
	default:
		*s = PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniListRetrievingResponseListItemCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag as json.
func (s PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag from json.
func (s *PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag(v) {
	case PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag0:
		*s = PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag0
	case PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag1:
		*s = PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag1
	default:
		*s = PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniListRetrievingResponseListItemOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentKonbiniRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentKonbiniRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentKonbiniRetrievingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes PaymentKonbiniRetrievingResponse from json.
func (s *PaymentKonbiniRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniRetrievingResponse to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentKonbiniRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentKonbiniRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniRetrievingResponseBarcodeFormat as json.
func (s PaymentKonbiniRetrievingResponseBarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniRetrievingResponseBarcodeFormat from json.
func (s *PaymentKonbiniRetrievingResponseBarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniRetrievingResponseBarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniRetrievingResponseBarcodeFormat(v) {
	case PaymentKonbiniRetrievingResponseBarcodeFormatJPG:
		*s = PaymentKonbiniRetrievingResponseBarcodeFormatJPG
	case PaymentKonbiniRetrievingResponseBarcodeFormatPNG:
		*s = PaymentKonbiniRetrievingResponseBarcodeFormatPNG
	case PaymentKonbiniRetrievingResponseBarcodeFormatBmp:
		*s = PaymentKonbiniRetrievingResponseBarcodeFormatBmp
	default:
		*s = PaymentKonbiniRetrievingResponseBarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniRetrievingResponseBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniRetrievingResponseBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniRetrievingResponseCancelOverpaymentFlag as json.
func (s PaymentKonbiniRetrievingResponseCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniRetrievingResponseCancelOverpaymentFlag from json.
func (s *PaymentKonbiniRetrievingResponseCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniRetrievingResponseCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniRetrievingResponseCancelOverpaymentFlag(v) {
	case PaymentKonbiniRetrievingResponseCancelOverpaymentFlag0:
		*s = PaymentKonbiniRetrievingResponseCancelOverpaymentFlag0
	case PaymentKonbiniRetrievingResponseCancelOverpaymentFlag1:
		*s = PaymentKonbiniRetrievingResponseCancelOverpaymentFlag1
	default:
		*s = PaymentKonbiniRetrievingResponseCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniRetrievingResponseCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniRetrievingResponseCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentKonbiniRetrievingResponseOverpaymentFlag as json.
func (s PaymentKonbiniRetrievingResponseOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentKonbiniRetrievingResponseOverpaymentFlag from json.
func (s *PaymentKonbiniRetrievingResponseOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentKonbiniRetrievingResponseOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentKonbiniRetrievingResponseOverpaymentFlag(v) {
	case PaymentKonbiniRetrievingResponseOverpaymentFlag0:
		*s = PaymentKonbiniRetrievingResponseOverpaymentFlag0
	case PaymentKonbiniRetrievingResponseOverpaymentFlag1:
		*s = PaymentKonbiniRetrievingResponseOverpaymentFlag1
	default:
		*s = PaymentKonbiniRetrievingResponseOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentKonbiniRetrievingResponseOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentKonbiniRetrievingResponseOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethod) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethod) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectURLAccessedFlag.Set {
			e.FieldStart("redirect_url_accessed_flag")
			s.RedirectURLAccessedFlag.Encode(e)
		}
	}
	{
		if s.ReturnURL.Set {
			e.FieldStart("return_url")
			s.ReturnURL.Encode(e)
		}
	}
	{
		if s.ReturnURLOnFailure.Set {
			e.FieldStart("return_url_on_failure")
			s.ReturnURLOnFailure.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Directdebit.Set {
			e.FieldStart("directdebit")
			s.Directdebit.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethod = [18]string{
	0:  "id",
	1:  "pay_type",
	2:  "customer_id",
	3:  "status",
	4:  "redirect_url",
	5:  "redirect_url_accessed_flag",
	6:  "return_url",
	7:  "return_url_on_failure",
	8:  "default_flag",
	9:  "client_field_1",
	10: "client_field_2",
	11: "client_field_3",
	12: "delete_flag",
	13: "process_date",
	14: "created",
	15: "updated",
	16: "card",
	17: "directdebit",
}

// Decode decodes PaymentMethod from json.
func (s *PaymentMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethod to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_url_accessed_flag":
			if err := func() error {
				s.RedirectURLAccessedFlag.Reset()
				if err := s.RedirectURLAccessedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url_accessed_flag\"")
			}
		case "return_url":
			if err := func() error {
				s.ReturnURL.Reset()
				if err := s.ReturnURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url\"")
			}
		case "return_url_on_failure":
			if err := func() error {
				s.ReturnURLOnFailure.Reset()
				if err := s.ReturnURLOnFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url_on_failure\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "directdebit":
			if err := func() error {
				s.Directdebit.Reset()
				if err := s.Directdebit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethod")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethodCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethodCard) encodeFields(e *jx.Encoder) {
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Acs.Set {
			e.FieldStart("acs")
			s.Acs.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethodCard = [12]string{
	0:  "card_no",
	1:  "expire",
	2:  "holder_name",
	3:  "type",
	4:  "brand",
	5:  "card_no_hash",
	6:  "tds_type",
	7:  "tds2_type",
	8:  "tds2_status",
	9:  "merchant_name",
	10: "access_id",
	11: "acs",
}

// Decode decodes PaymentMethodCard from json.
func (s *PaymentMethodCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "acs":
			if err := func() error {
				s.Acs.Reset()
				if err := s.Acs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethodCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethodCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDefaultFlag as json.
func (s PaymentMethodDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodDefaultFlag from json.
func (s *PaymentMethodDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodDefaultFlag(v) {
	case PaymentMethodDefaultFlag0:
		*s = PaymentMethodDefaultFlag0
	case PaymentMethodDefaultFlag1:
		*s = PaymentMethodDefaultFlag1
	default:
		*s = PaymentMethodDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethodDirectdebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethodDirectdebit) encodeFields(e *jx.Encoder) {
	{
		if s.ApplicationType.Set {
			e.FieldStart("application_type")
			s.ApplicationType.Encode(e)
		}
	}
	{
		if s.ExpectedBillableDate.Set {
			e.FieldStart("expected_billable_date")
			s.ExpectedBillableDate.Encode(e)
		}
	}
	{
		if s.LastWithdrawalDate.Set {
			e.FieldStart("last_withdrawal_date")
			s.LastWithdrawalDate.Encode(e)
		}
	}
	{
		if s.LastResultCode.Set {
			e.FieldStart("last_result_code")
			s.LastResultCode.Encode(e)
		}
	}
	{
		if s.BankType.Set {
			e.FieldStart("bank_type")
			s.BankType.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.AccountType.Set {
			e.FieldStart("account_type")
			s.AccountType.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber1.Set {
			e.FieldStart("postal_account_number_1")
			s.PostalAccountNumber1.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber2.Set {
			e.FieldStart("postal_account_number_2")
			s.PostalAccountNumber2.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
	{
		if s.AccountNameKana.Set {
			e.FieldStart("account_name_kana")
			s.AccountNameKana.Encode(e)
		}
	}
	{
		if s.PaperApplication.Set {
			e.FieldStart("paper_application")
			s.PaperApplication.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethodDirectdebit = [16]string{
	0:  "application_type",
	1:  "expected_billable_date",
	2:  "last_withdrawal_date",
	3:  "last_result_code",
	4:  "bank_type",
	5:  "bank_code",
	6:  "bank_name",
	7:  "branch_code",
	8:  "branch_name",
	9:  "account_type",
	10: "account_number",
	11: "postal_account_number_1",
	12: "postal_account_number_2",
	13: "account_name",
	14: "account_name_kana",
	15: "paper_application",
}

// Decode decodes PaymentMethodDirectdebit from json.
func (s *PaymentMethodDirectdebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application_type":
			if err := func() error {
				s.ApplicationType.Reset()
				if err := s.ApplicationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "expected_billable_date":
			if err := func() error {
				s.ExpectedBillableDate.Reset()
				if err := s.ExpectedBillableDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expected_billable_date\"")
			}
		case "last_withdrawal_date":
			if err := func() error {
				s.LastWithdrawalDate.Reset()
				if err := s.LastWithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_withdrawal_date\"")
			}
		case "last_result_code":
			if err := func() error {
				s.LastResultCode.Reset()
				if err := s.LastResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_result_code\"")
			}
		case "bank_type":
			if err := func() error {
				s.BankType.Reset()
				if err := s.BankType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_type\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "account_type":
			if err := func() error {
				s.AccountType.Reset()
				if err := s.AccountType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_type\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "postal_account_number_1":
			if err := func() error {
				s.PostalAccountNumber1.Reset()
				if err := s.PostalAccountNumber1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_1\"")
			}
		case "postal_account_number_2":
			if err := func() error {
				s.PostalAccountNumber2.Reset()
				if err := s.PostalAccountNumber2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_2\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		case "account_name_kana":
			if err := func() error {
				s.AccountNameKana.Reset()
				if err := s.AccountNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name_kana\"")
			}
		case "paper_application":
			if err := func() error {
				s.PaperApplication.Reset()
				if err := s.PaperApplication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_application\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethodDirectdebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethodDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitAccountType as json.
func (s PaymentMethodDirectdebitAccountType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodDirectdebitAccountType from json.
func (s *PaymentMethodDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebitAccountType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodDirectdebitAccountType(v) {
	case PaymentMethodDirectdebitAccountType0:
		*s = PaymentMethodDirectdebitAccountType0
	case PaymentMethodDirectdebitAccountType1:
		*s = PaymentMethodDirectdebitAccountType1
	default:
		*s = PaymentMethodDirectdebitAccountType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitBankType as json.
func (s PaymentMethodDirectdebitBankType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodDirectdebitBankType from json.
func (s *PaymentMethodDirectdebitBankType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebitBankType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodDirectdebitBankType(v) {
	case PaymentMethodDirectdebitBankType0:
		*s = PaymentMethodDirectdebitBankType0
	case PaymentMethodDirectdebitBankType1:
		*s = PaymentMethodDirectdebitBankType1
	default:
		*s = PaymentMethodDirectdebitBankType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethodDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethodDirectdebitPaperApplication) encodeFields(e *jx.Encoder) {
	{
		if s.PreregisteredDate.Set {
			e.FieldStart("preregistered_date")
			s.PreregisteredDate.Encode(e)
		}
	}
	{
		if s.RequestFormID.Set {
			e.FieldStart("request_form_id")
			s.RequestFormID.Encode(e)
		}
	}
	{
		if s.PaperFailureDescription.Set {
			e.FieldStart("paper_failure_description")
			s.PaperFailureDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethodDirectdebitPaperApplication = [3]string{
	0: "preregistered_date",
	1: "request_form_id",
	2: "paper_failure_description",
}

// Decode decodes PaymentMethodDirectdebitPaperApplication from json.
func (s *PaymentMethodDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebitPaperApplication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "preregistered_date":
			if err := func() error {
				s.PreregisteredDate.Reset()
				if err := s.PreregisteredDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"preregistered_date\"")
			}
		case "request_form_id":
			if err := func() error {
				s.RequestFormID.Reset()
				if err := s.RequestFormID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_form_id\"")
			}
		case "paper_failure_description":
			if err := func() error {
				s.PaperFailureDescription.Reset()
				if err := s.PaperFailureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_failure_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethodDirectdebitPaperApplication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethodDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethodList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethodList) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentMethodList = [1]string{
	0: "list",
}

// Decode decodes PaymentMethodList from json.
func (s *PaymentMethodList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]PaymentMethod, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentMethod
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethodList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethodList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodPayType as json.
func (s PaymentMethodPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodPayType from json.
func (s *PaymentMethodPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodPayType(v) {
	case PaymentMethodPayTypeCard:
		*s = PaymentMethodPayTypeCard
	case PaymentMethodPayTypeDirectdebit:
		*s = PaymentMethodPayTypeDirectdebit
	default:
		*s = PaymentMethodPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodPropertiesID as json.
func (s PaymentMethodPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentMethodPropertiesID from json.
func (s *PaymentMethodPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentMethodPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodRedirectURLAccessedFlag as json.
func (s PaymentMethodRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodRedirectURLAccessedFlag from json.
func (s *PaymentMethodRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodRedirectURLAccessedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodRedirectURLAccessedFlag(v) {
	case PaymentMethodRedirectURLAccessedFlag0:
		*s = PaymentMethodRedirectURLAccessedFlag0
	case PaymentMethodRedirectURLAccessedFlag1:
		*s = PaymentMethodRedirectURLAccessedFlag1
	default:
		*s = PaymentMethodRedirectURLAccessedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodStatus as json.
func (s PaymentMethodStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodStatus from json.
func (s *PaymentMethodStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodStatus(v) {
	case PaymentMethodStatusINACTIVATED:
		*s = PaymentMethodStatusINACTIVATED
	case PaymentMethodStatusAWAITINGCUSTOMERACTION:
		*s = PaymentMethodStatusAWAITINGCUSTOMERACTION
	case PaymentMethodStatusACTIVATED:
		*s = PaymentMethodStatusACTIVATED
	case PaymentMethodStatusFAILED:
		*s = PaymentMethodStatusFAILED
	default:
		*s = PaymentMethodStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayCancelingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayCancelingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayCancelingRequest = [3]string{
	0: "pay_type",
	1: "access_id",
	2: "cancel_description",
}

// Decode decodes PaymentPayPayCancelingRequest from json.
func (s *PaymentPayPayCancelingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCancelingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayCancelingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentPayPayCancelingRequest) {
					name = jsonFieldsNameOfPaymentPayPayCancelingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayCancelingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCancelingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayCancelingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayCancelingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayCancelingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes PaymentPayPayCancelingResponse from json.
func (s *PaymentPayPayCancelingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCancelingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayCancelingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayCancelingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCancelingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayCancelingResponseRedirectType as json.
func (s PaymentPayPayCancelingResponseRedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentPayPayCancelingResponseRedirectType from json.
func (s *PaymentPayPayCancelingResponseRedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCancelingResponseRedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentPayPayCancelingResponseRedirectType(v) {
	case PaymentPayPayCancelingResponseRedirectType1:
		*s = PaymentPayPayCancelingResponseRedirectType1
	case PaymentPayPayCancelingResponseRedirectType2:
		*s = PaymentPayPayCancelingResponseRedirectType2
	default:
		*s = PaymentPayPayCancelingResponseRedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPayPayCancelingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCancelingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayCapturingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayCapturingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayCapturingRequest = [3]string{
	0: "pay_type",
	1: "access_id",
	2: "capture_description",
}

// Decode decodes PaymentPayPayCapturingRequest from json.
func (s *PaymentPayPayCapturingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCapturingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayCapturingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentPayPayCapturingRequest) {
					name = jsonFieldsNameOfPaymentPayPayCapturingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayCapturingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCapturingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayCapturingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayCapturingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayCapturingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes PaymentPayPayCapturingResponse from json.
func (s *PaymentPayPayCapturingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCapturingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayCapturingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayCapturingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCapturingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayCapturingResponseRedirectType as json.
func (s PaymentPayPayCapturingResponseRedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentPayPayCapturingResponseRedirectType from json.
func (s *PaymentPayPayCapturingResponseRedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCapturingResponseRedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentPayPayCapturingResponseRedirectType(v) {
	case PaymentPayPayCapturingResponseRedirectType1:
		*s = PaymentPayPayCapturingResponseRedirectType1
	case PaymentPayPayCapturingResponseRedirectType2:
		*s = PaymentPayPayCapturingResponseRedirectType2
	default:
		*s = PaymentPayPayCapturingResponseRedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPayPayCapturingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCapturingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayChangingAmountRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayChangingAmountRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		s.AccessID.Encode(e)
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayChangingAmountRequest = [5]string{
	0: "pay_type",
	1: "access_id",
	2: "amount",
	3: "tax",
	4: "update_description",
}

// Decode decodes PaymentPayPayChangingAmountRequest from json.
func (s *PaymentPayPayChangingAmountRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayChangingAmountRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayChangingAmountRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentPayPayChangingAmountRequest) {
					name = jsonFieldsNameOfPaymentPayPayChangingAmountRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayChangingAmountRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayChangingAmountRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayChangingAmountResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayChangingAmountResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayChangingAmountResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes PaymentPayPayChangingAmountResponse from json.
func (s *PaymentPayPayChangingAmountResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayChangingAmountResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayChangingAmountResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayChangingAmountResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayChangingAmountResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayChangingAmountResponseRedirectType as json.
func (s PaymentPayPayChangingAmountResponseRedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentPayPayChangingAmountResponseRedirectType from json.
func (s *PaymentPayPayChangingAmountResponseRedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayChangingAmountResponseRedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentPayPayChangingAmountResponseRedirectType(v) {
	case PaymentPayPayChangingAmountResponseRedirectType1:
		*s = PaymentPayPayChangingAmountResponseRedirectType1
	case PaymentPayPayChangingAmountResponseRedirectType2:
		*s = PaymentPayPayChangingAmountResponseRedirectType2
	default:
		*s = PaymentPayPayChangingAmountResponseRedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPayPayChangingAmountResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayChangingAmountResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayCreatingRequest = [9]string{
	0: "id",
	1: "pay_type",
	2: "job_code",
	3: "amount",
	4: "tax",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
	8: "order_description",
}

// Decode decodes PaymentPayPayCreatingRequest from json.
func (s *PaymentPayPayCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00001110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentPayPayCreatingRequest) {
					name = jsonFieldsNameOfPaymentPayPayCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayCreatingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes PaymentPayPayCreatingResponse from json.
func (s *PaymentPayPayCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayCreatingResponseRedirectType as json.
func (s PaymentPayPayCreatingResponseRedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentPayPayCreatingResponseRedirectType from json.
func (s *PaymentPayPayCreatingResponseRedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayCreatingResponseRedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentPayPayCreatingResponseRedirectType(v) {
	case PaymentPayPayCreatingResponseRedirectType1:
		*s = PaymentPayPayCreatingResponseRedirectType1
	case PaymentPayPayCreatingResponseRedirectType2:
		*s = PaymentPayPayCreatingResponseRedirectType2
	default:
		*s = PaymentPayPayCreatingResponseRedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPayPayCreatingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayCreatingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayExecutingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayExecutingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.UserAgent.Set {
			e.FieldStart("user_agent")
			s.UserAgent.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayExecutingRequest = [6]string{
	0: "pay_type",
	1: "access_id",
	2: "customer_id",
	3: "redirect_url",
	4: "redirect_type",
	5: "user_agent",
}

// Decode decodes PaymentPayPayExecutingRequest from json.
func (s *PaymentPayPayExecutingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayExecutingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "user_agent":
			if err := func() error {
				s.UserAgent.Reset()
				if err := s.UserAgent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_agent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayExecutingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayExecutingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayExecutingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayExecutingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayExecutingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayExecutingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes PaymentPayPayExecutingResponse from json.
func (s *PaymentPayPayExecutingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayExecutingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayExecutingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayExecutingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayExecutingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayExecutingResponseRedirectType as json.
func (s PaymentPayPayExecutingResponseRedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentPayPayExecutingResponseRedirectType from json.
func (s *PaymentPayPayExecutingResponseRedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayExecutingResponseRedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentPayPayExecutingResponseRedirectType(v) {
	case PaymentPayPayExecutingResponseRedirectType1:
		*s = PaymentPayPayExecutingResponseRedirectType1
	case PaymentPayPayExecutingResponseRedirectType2:
		*s = PaymentPayPayExecutingResponseRedirectType2
	default:
		*s = PaymentPayPayExecutingResponseRedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPayPayExecutingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayExecutingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentPayPayListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PaymentPayPayListRetrievingResponse from json.
func (s *PaymentPayPayListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentPayPayListRetrievingResponseListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentPayPayListRetrievingResponseListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayListRetrievingResponseListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayListRetrievingResponseListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayListRetrievingResponseListItem = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes PaymentPayPayListRetrievingResponseListItem from json.
func (s *PaymentPayPayListRetrievingResponseListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayListRetrievingResponseListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayListRetrievingResponseListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayListRetrievingResponseListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayListRetrievingResponseListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayListRetrievingResponseListItemRedirectType as json.
func (s PaymentPayPayListRetrievingResponseListItemRedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentPayPayListRetrievingResponseListItemRedirectType from json.
func (s *PaymentPayPayListRetrievingResponseListItemRedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayListRetrievingResponseListItemRedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentPayPayListRetrievingResponseListItemRedirectType(v) {
	case PaymentPayPayListRetrievingResponseListItemRedirectType1:
		*s = PaymentPayPayListRetrievingResponseListItemRedirectType1
	case PaymentPayPayListRetrievingResponseListItemRedirectType2:
		*s = PaymentPayPayListRetrievingResponseListItemRedirectType2
	default:
		*s = PaymentPayPayListRetrievingResponseListItemRedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPayPayListRetrievingResponseListItemRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayListRetrievingResponseListItemRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentPayPayRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentPayPayRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentPayPayRetrievingResponse = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes PaymentPayPayRetrievingResponse from json.
func (s *PaymentPayPayRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentPayPayRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentPayPayRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPayPayRetrievingResponseRedirectType as json.
func (s PaymentPayPayRetrievingResponseRedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentPayPayRetrievingResponseRedirectType from json.
func (s *PaymentPayPayRetrievingResponseRedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPayPayRetrievingResponseRedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentPayPayRetrievingResponseRedirectType(v) {
	case PaymentPayPayRetrievingResponseRedirectType1:
		*s = PaymentPayPayRetrievingResponseRedirectType1
	case PaymentPayPayRetrievingResponseRedirectType2:
		*s = PaymentPayPayRetrievingResponseRedirectType2
	default:
		*s = PaymentPayPayRetrievingResponseRedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPayPayRetrievingResponseRedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPayPayRetrievingResponseRedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentPropertiesID as json.
func (s PaymentPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentPropertiesID from json.
func (s *PaymentPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentProvider as json.
func (s PaymentProvider) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentProvider from json.
func (s *PaymentProvider) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentProvider to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentProvider(v) {
	case PaymentProviderPAYSLE:
		*s = PaymentProviderPAYSLE
	case PaymentProviderPAYPAY:
		*s = PaymentProviderPAYPAY
	case PaymentProviderAPPLEPAYUC:
		*s = PaymentProviderAPPLEPAYUC
	case PaymentProviderAPPLEPAYJCB:
		*s = PaymentProviderAPPLEPAYJCB
	case PaymentProviderDIRECTDEBIT:
		*s = PaymentProviderDIRECTDEBIT
	case PaymentProviderVIRTUALACCOUNT:
		*s = PaymentProviderVIRTUALACCOUNT
	default:
		*s = PaymentProvider(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentProvider) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentProvider) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSession) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSession) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LinkURL.Set {
			e.FieldStart("link_url")
			s.LinkURL.Encode(e)
		}
	}
	{
		if s.SuccessURL.Set {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL.Set {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName.Set {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.ReceiverMail.Set {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName.Set {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.ThanksMailSendFlag.Set {
			e.FieldStart("thanks_mail_send_flag")
			s.ThanksMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID.Set {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
	{
		if s.Transaction.Set {
			e.FieldStart("transaction")
			s.Transaction.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Konbini.Set {
			e.FieldStart("konbini")
			s.Konbini.Encode(e)
		}
	}
	{
		if s.Paypay.Set {
			e.FieldStart("paypay")
			s.Paypay.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSession = [18]string{
	0:  "id",
	1:  "link_url",
	2:  "success_url",
	3:  "cancel_url",
	4:  "status",
	5:  "expire",
	6:  "shop_service_name",
	7:  "guide_mail_send_flag",
	8:  "receiver_mail",
	9:  "mail_customer_name",
	10: "thanks_mail_send_flag",
	11: "shop_mail_template_id",
	12: "transaction",
	13: "card",
	14: "konbini",
	15: "paypay",
	16: "created",
	17: "updated",
}

// Decode decodes PaymentSession from json.
func (s *PaymentSession) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSession to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "link_url":
			if err := func() error {
				s.LinkURL.Reset()
				if err := s.LinkURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_url\"")
			}
		case "success_url":
			if err := func() error {
				s.SuccessURL.Reset()
				if err := s.SuccessURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL.Reset()
				if err := s.CancelURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName.Reset()
				if err := s.ShopServiceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail.Reset()
				if err := s.ReceiverMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName.Reset()
				if err := s.MailCustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "thanks_mail_send_flag":
			if err := func() error {
				s.ThanksMailSendFlag.Reset()
				if err := s.ThanksMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"thanks_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID.Reset()
				if err := s.ShopMailTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		case "transaction":
			if err := func() error {
				s.Transaction.Reset()
				if err := s.Transaction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "konbini":
			if err := func() error {
				s.Konbini.Reset()
				if err := s.Konbini.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini\"")
			}
		case "paypay":
			if err := func() error {
				s.Paypay.Reset()
				if err := s.Paypay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSession")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSession) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSession) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCard) encodeFields(e *jx.Encoder) {
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCard = [5]string{
	0: "job_code",
	1: "tds_type",
	2: "td_tenant_name",
	3: "tds2_type",
	4: "item_code",
}

// Decode decodes PaymentSessionCard from json.
func (s *PaymentSessionCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCard to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("transaction")
		s.Transaction.Encode(e)
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Konbini.Set {
			e.FieldStart("konbini")
			s.Konbini.Encode(e)
		}
	}
	{
		if s.Paypay.Set {
			e.FieldStart("paypay")
			s.Paypay.Encode(e)
		}
	}
	{
		if s.SuccessURL.Set {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL.Set {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName.Set {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.ReceiverMail.Set {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName.Set {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.ThanksMailSendFlag.Set {
			e.FieldStart("thanks_mail_send_flag")
			s.ThanksMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID.Set {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequest = [13]string{
	0:  "transaction",
	1:  "card",
	2:  "konbini",
	3:  "paypay",
	4:  "success_url",
	5:  "cancel_url",
	6:  "expire",
	7:  "shop_service_name",
	8:  "guide_mail_send_flag",
	9:  "receiver_mail",
	10: "mail_customer_name",
	11: "thanks_mail_send_flag",
	12: "shop_mail_template_id",
}

// Decode decodes PaymentSessionCreatingRequest from json.
func (s *PaymentSessionCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "transaction":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Transaction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "konbini":
			if err := func() error {
				s.Konbini.Reset()
				if err := s.Konbini.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini\"")
			}
		case "paypay":
			if err := func() error {
				s.Paypay.Reset()
				if err := s.Paypay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay\"")
			}
		case "success_url":
			if err := func() error {
				s.SuccessURL.Reset()
				if err := s.SuccessURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL.Reset()
				if err := s.CancelURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName.Reset()
				if err := s.ShopServiceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail.Reset()
				if err := s.ReceiverMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName.Reset()
				if err := s.MailCustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "thanks_mail_send_flag":
			if err := func() error {
				s.ThanksMailSendFlag.Reset()
				if err := s.ThanksMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"thanks_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID.Reset()
				if err := s.ShopMailTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequest) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestCard) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange.Set {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate.Set {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange.Set {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount.Set {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge.Set {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay.Set {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage.Set {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd.Set {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity.Set {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay.Set {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear.Set {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData.Set {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod.Set {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch.Set {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry.Set {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState.Set {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity.Set {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1.Set {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2.Set {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode.Set {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry.Set {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState.Set {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity.Set {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1.Set {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2.Set {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3.Set {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode.Set {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd.Set {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress.Set {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc.Set {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo.Set {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc.Set {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo.Set {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc.Set {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo.Set {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe.Set {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate.Set {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd.Set {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd.Set {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry.Set {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency.Set {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount.Set {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount.Set {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr.Set {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestCard = [49]string{
	0:  "job_code",
	1:  "tds_type",
	2:  "tds2_type",
	3:  "td_tenant_name",
	4:  "tds2_ch_acc_change",
	5:  "tds2_ch_acc_date",
	6:  "tds2_ch_acc_pw_change",
	7:  "tds2_nb_purchase_account",
	8:  "tds2_payment_acc_age",
	9:  "tds2_provision_attempts_day",
	10: "tds2_ship_address_usage",
	11: "tds2_ship_name_ind",
	12: "tds2_suspicious_acc_activity",
	13: "tds2_txn_activity_day",
	14: "tds2_txn_activity_year",
	15: "tds2_three_ds_req_auth_data",
	16: "tds2_three_ds_req_auth_method",
	17: "tds2_addr_match",
	18: "tds2_bill_addr_country",
	19: "tds2_bill_addr_state",
	20: "tds2_bill_addr_city",
	21: "tds2_bill_addr_line_1",
	22: "tds2_bill_addr_line_2",
	23: "tds2_bill_addr_line_3",
	24: "tds2_bill_addr_post_code",
	25: "tds2_ship_addr_country",
	26: "tds2_ship_addr_state",
	27: "tds2_ship_addr_city",
	28: "tds2_ship_addr_line_1",
	29: "tds2_ship_addr_line_2",
	30: "tds2_ship_addr_line_3",
	31: "tds2_ship_addr_post_code",
	32: "tds2_ship_ind",
	33: "tds2_delivery_email_address",
	34: "tds2_home_phone_cc",
	35: "tds2_home_phone_no",
	36: "tds2_mobile_phone_cc",
	37: "tds2_mobile_phone_no",
	38: "tds2_work_phone_cc",
	39: "tds2_work_phone_no",
	40: "tds2_delivery_timeframe",
	41: "tds2_pre_order_date",
	42: "tds2_pre_order_purchase_ind",
	43: "tds2_reorder_items_ind",
	44: "tds2_recurring_expiry",
	45: "tds2_recurring_frequency",
	46: "tds2_gift_card_amount",
	47: "tds2_gift_card_count",
	48: "tds2_gift_card_curr",
}

// Decode decodes PaymentSessionCreatingRequestCard from json.
func (s *PaymentSessionCreatingRequestCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCard to nil")
	}
	var requiredBitSet [7]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange.Reset()
				if err := s.Tds2ChAccChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate.Reset()
				if err := s.Tds2ChAccDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange.Reset()
				if err := s.Tds2ChAccPwChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount.Reset()
				if err := s.Tds2NbPurchaseAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge.Reset()
				if err := s.Tds2PaymentAccAge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay.Reset()
				if err := s.Tds2ProvisionAttemptsDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage.Reset()
				if err := s.Tds2ShipAddressUsage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd.Reset()
				if err := s.Tds2ShipNameInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity.Reset()
				if err := s.Tds2SuspiciousAccActivity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay.Reset()
				if err := s.Tds2TxnActivityDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear.Reset()
				if err := s.Tds2TxnActivityYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData.Reset()
				if err := s.Tds2ThreeDsReqAuthData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod.Reset()
				if err := s.Tds2ThreeDsReqAuthMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch.Reset()
				if err := s.Tds2AddrMatch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry.Reset()
				if err := s.Tds2BillAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState.Reset()
				if err := s.Tds2BillAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity.Reset()
				if err := s.Tds2BillAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1.Reset()
				if err := s.Tds2BillAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2.Reset()
				if err := s.Tds2BillAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode.Reset()
				if err := s.Tds2BillAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry.Reset()
				if err := s.Tds2ShipAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState.Reset()
				if err := s.Tds2ShipAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity.Reset()
				if err := s.Tds2ShipAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1.Reset()
				if err := s.Tds2ShipAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2.Reset()
				if err := s.Tds2ShipAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3.Reset()
				if err := s.Tds2ShipAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode.Reset()
				if err := s.Tds2ShipAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd.Reset()
				if err := s.Tds2ShipInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress.Reset()
				if err := s.Tds2DeliveryEmailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc.Reset()
				if err := s.Tds2HomePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo.Reset()
				if err := s.Tds2HomePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc.Reset()
				if err := s.Tds2MobilePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo.Reset()
				if err := s.Tds2MobilePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc.Reset()
				if err := s.Tds2WorkPhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo.Reset()
				if err := s.Tds2WorkPhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe.Reset()
				if err := s.Tds2DeliveryTimeframe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate.Reset()
				if err := s.Tds2PreOrderDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd.Reset()
				if err := s.Tds2PreOrderPurchaseInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd.Reset()
				if err := s.Tds2ReorderItemsInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry.Reset()
				if err := s.Tds2RecurringExpiry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency.Reset()
				if err := s.Tds2RecurringFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount.Reset()
				if err := s.Tds2GiftCardAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount.Reset()
				if err := s.Tds2GiftCardCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr.Reset()
				if err := s.Tds2GiftCardCurr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestCard")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [7]uint8{
		0b00000001,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestCard) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestCard[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestKonbini) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestKonbini) encodeFields(e *jx.Encoder) {
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		e.FieldStart("konbini_reception_mail_send_flag")
		s.KonbiniReceptionMailSendFlag.Encode(e)
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestKonbini = [2]string{
	0: "payment_term_day",
	1: "konbini_reception_mail_send_flag",
}

// Decode decodes PaymentSessionCreatingRequestKonbini from json.
func (s *PaymentSessionCreatingRequestKonbini) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestKonbini to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "konbini_reception_mail_send_flag":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.KonbiniReceptionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_reception_mail_send_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestKonbini")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestKonbini) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestKonbini[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestPaypay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestPaypay) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestPaypay = [2]string{
	0: "job_code",
	1: "order_description",
}

// Decode decodes PaymentSessionCreatingRequestPaypay from json.
func (s *PaymentSessionCreatingRequestPaypay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestPaypay to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestPaypay")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestPaypay) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestPaypay[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestPaypay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestPaypay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestTransaction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestTransaction) encodeFields(e *jx.Encoder) {
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestTransaction = [7]string{
	0: "pay_type",
	1: "amount",
	2: "order_id",
	3: "tax",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
}

// Decode decodes PaymentSessionCreatingRequestTransaction from json.
func (s *PaymentSessionCreatingRequestTransaction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestTransaction to nil")
	}
	var requiredBitSet [1]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestTransaction")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestTransaction) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestTransaction[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestTransaction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestTransaction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionGuideMailSendFlag as json.
func (s PaymentSessionGuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionGuideMailSendFlag from json.
func (s *PaymentSessionGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionGuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionGuideMailSendFlag(v) {
	case PaymentSessionGuideMailSendFlag0:
		*s = PaymentSessionGuideMailSendFlag0
	case PaymentSessionGuideMailSendFlag1:
		*s = PaymentSessionGuideMailSendFlag1
	default:
		*s = PaymentSessionGuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionKonbini) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionKonbini) encodeFields(e *jx.Encoder) {
	{
		if s.KonbiniReceptionURL.Set {
			e.FieldStart("konbini_reception_url")
			s.KonbiniReceptionURL.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.KonbiniReceptionMailSendFlag.Set {
			e.FieldStart("konbini_reception_mail_send_flag")
			s.KonbiniReceptionMailSendFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionKonbini = [3]string{
	0: "konbini_reception_url",
	1: "payment_term_day",
	2: "konbini_reception_mail_send_flag",
}

// Decode decodes PaymentSessionKonbini from json.
func (s *PaymentSessionKonbini) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionKonbini to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "konbini_reception_url":
			if err := func() error {
				s.KonbiniReceptionURL.Reset()
				if err := s.KonbiniReceptionURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_reception_url\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "konbini_reception_mail_send_flag":
			if err := func() error {
				s.KonbiniReceptionMailSendFlag.Reset()
				if err := s.KonbiniReceptionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_reception_mail_send_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionKonbini")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionKonbiniKonbiniReceptionMailSendFlag as json.
func (s PaymentSessionKonbiniKonbiniReceptionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionKonbiniKonbiniReceptionMailSendFlag from json.
func (s *PaymentSessionKonbiniKonbiniReceptionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionKonbiniKonbiniReceptionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionKonbiniKonbiniReceptionMailSendFlag(v) {
	case PaymentSessionKonbiniKonbiniReceptionMailSendFlag0:
		*s = PaymentSessionKonbiniKonbiniReceptionMailSendFlag0
	case PaymentSessionKonbiniKonbiniReceptionMailSendFlag1:
		*s = PaymentSessionKonbiniKonbiniReceptionMailSendFlag1
	default:
		*s = PaymentSessionKonbiniKonbiniReceptionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionKonbiniKonbiniReceptionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionKonbiniKonbiniReceptionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionPayPay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionPayPay) encodeFields(e *jx.Encoder) {
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionPayPay = [2]string{
	0: "job_code",
	1: "order_description",
}

// Decode decodes PaymentSessionPayPay from json.
func (s *PaymentSessionPayPay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionPayPay to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionPayPay")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionPayPay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionPayPay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionPayType as json.
func (s PaymentSessionPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionPayType from json.
func (s *PaymentSessionPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionPayType(v) {
	case PaymentSessionPayTypeCard:
		*s = PaymentSessionPayTypeCard
	case PaymentSessionPayTypeKonbini:
		*s = PaymentSessionPayTypeKonbini
	case PaymentSessionPayTypePaypay:
		*s = PaymentSessionPayTypePaypay
	default:
		*s = PaymentSessionPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionStatus as json.
func (s PaymentSessionStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionStatus from json.
func (s *PaymentSessionStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionStatus(v) {
	case PaymentSessionStatusCREATE:
		*s = PaymentSessionStatusCREATE
	default:
		*s = PaymentSessionStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionThanksMailSendFlag as json.
func (s PaymentSessionThanksMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionThanksMailSendFlag from json.
func (s *PaymentSessionThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionThanksMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionThanksMailSendFlag(v) {
	case PaymentSessionThanksMailSendFlag0:
		*s = PaymentSessionThanksMailSendFlag0
	case PaymentSessionThanksMailSendFlag1:
		*s = PaymentSessionThanksMailSendFlag1
	default:
		*s = PaymentSessionThanksMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionTransaction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionTransaction) encodeFields(e *jx.Encoder) {
	{
		if s.PayType != nil {
			e.FieldStart("pay_type")
			e.ArrStart()
			for _, elem := range s.PayType {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionTransaction = [7]string{
	0: "pay_type",
	1: "order_id",
	2: "amount",
	3: "tax",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
}

// Decode decodes PaymentSessionTransaction from json.
func (s *PaymentSessionTransaction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionTransaction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			if err := func() error {
				s.PayType = make([]PaymentSessionPayType, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentSessionPayType
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PayType = append(s.PayType, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionTransaction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionTransaction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionTransaction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentStatus as json.
func (s PaymentStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentStatus from json.
func (s *PaymentStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentStatus(v) {
	case PaymentStatusUNPROCESSED:
		*s = PaymentStatusUNPROCESSED
	case PaymentStatusCHECKED:
		*s = PaymentStatusCHECKED
	case PaymentStatusAUTHORIZED:
		*s = PaymentStatusAUTHORIZED
	case PaymentStatusAWAITINGCUSTOMERPAYMENT:
		*s = PaymentStatusAWAITINGCUSTOMERPAYMENT
	case PaymentStatusAWAITINGPAYMENTAPPROVAL:
		*s = PaymentStatusAWAITINGPAYMENTAPPROVAL
	case PaymentStatusCAPTURED:
		*s = PaymentStatusCAPTURED
	case PaymentStatusCANCELED:
		*s = PaymentStatusCANCELED
	case PaymentStatusEXPIRED:
		*s = PaymentStatusEXPIRED
	case PaymentStatusAUTHENTICATED:
		*s = PaymentStatusAUTHENTICATED
	case PaymentStatusFAILED:
		*s = PaymentStatusFAILED
	default:
		*s = PaymentStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentTerm as json.
func (s PaymentTerm) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentTerm from json.
func (s *PaymentTerm) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentTerm to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentTerm(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentTerm) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentTerm) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentTermDay as json.
func (s PaymentTermDay) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PaymentTermDay from json.
func (s *PaymentTermDay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentTermDay to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PaymentTermDay(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentTermDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentTermDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaypayContentCategoryType as json.
func (s PaypayContentCategoryType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaypayContentCategoryType from json.
func (s *PaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaypayContentCategoryType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaypayContentCategoryType(v) {
	case PaypayContentCategoryType1:
		*s = PaypayContentCategoryType1
	case PaypayContentCategoryType2:
		*s = PaypayContentCategoryType2
	default:
		*s = PaypayContentCategoryType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneCc as json.
func (s PhoneCc) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PhoneCc from json.
func (s *PhoneCc) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneCc to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PhoneCc(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PhoneNo as json.
func (s PhoneNo) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PhoneNo from json.
func (s *PhoneNo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PhoneNo to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PhoneNo(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PixelRatio as json.
func (s PixelRatio) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PixelRatio from json.
func (s *PixelRatio) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PixelRatio to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PixelRatio(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PixelRatio) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PixelRatio) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Plan) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Plan) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.UsedFlag.Set {
			e.FieldStart("used_flag")
			s.UsedFlag.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlan = [13]string{
	0:  "id",
	1:  "plan_name",
	2:  "description",
	3:  "shop_id",
	4:  "amount",
	5:  "tax",
	6:  "total_amount",
	7:  "interval_pattern",
	8:  "interval_count",
	9:  "used_flag",
	10: "delete_flag",
	11: "created",
	12: "updated",
}

// Decode decodes Plan from json.
func (s *Plan) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Plan to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "used_flag":
			if err := func() error {
				s.UsedFlag.Reset()
				if err := s.UsedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_flag\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Plan")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Plan) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Plan) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("plan_name")
		s.PlanName.Encode(e)
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		e.FieldStart("amount")
		s.Amount.Encode(e)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanCreatingRequest = [7]string{
	0: "id",
	1: "plan_name",
	2: "description",
	3: "amount",
	4: "tax",
	5: "interval_pattern",
	6: "interval_count",
}

// Decode decodes PlanCreatingRequest from json.
func (s *PlanCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPlanCreatingRequest) {
					name = jsonFieldsNameOfPlanCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalCount as json.
func (s PlanIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes PlanIntervalCount from json.
func (s *PlanIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = PlanIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalPattern as json.
func (s PlanIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanIntervalPattern from json.
func (s *PlanIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanIntervalPattern(v) {
	case PlanIntervalPatternMonth:
		*s = PlanIntervalPatternMonth
	case PlanIntervalPatternYear:
		*s = PlanIntervalPatternYear
	default:
		*s = PlanIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlanListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PlanListRetrievingResponse from json.
func (s *PlanListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]Plan, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Plan
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanName as json.
func (s PlanName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PlanName from json.
func (s *PlanName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlanName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanPropertiesAmount as json.
func (s PlanPropertiesAmount) Encode(e *jx.Encoder) {
	unwrapped := int64(s)

	e.Int64(unwrapped)
}

// Decode decodes PlanPropertiesAmount from json.
func (s *PlanPropertiesAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanPropertiesAmount to nil")
	}
	var unwrapped int64
	if err := func() error {
		v, err := d.Int64()
		unwrapped = int64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlanPropertiesAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanPropertiesAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanPropertiesAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanPropertiesID as json.
func (s PlanPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PlanPropertiesID from json.
func (s *PlanPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlanPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanPropertiesTax as json.
func (s PlanPropertiesTax) Encode(e *jx.Encoder) {
	unwrapped := int64(s)

	e.Int64(unwrapped)
}

// Decode decodes PlanPropertiesTax from json.
func (s *PlanPropertiesTax) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanPropertiesTax to nil")
	}
	var unwrapped int64
	if err := func() error {
		v, err := d.Int64()
		unwrapped = int64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlanPropertiesTax(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanPropertiesTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanPropertiesTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanUpdatingRequest = [6]string{
	0: "plan_name",
	1: "description",
	2: "amount",
	3: "tax",
	4: "interval_pattern",
	5: "interval_count",
}

// Decode decodes PlanUpdatingRequest from json.
func (s *PlanUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingRequest to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUsedFlag as json.
func (s PlanUsedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanUsedFlag from json.
func (s *PlanUsedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUsedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanUsedFlag(v) {
	case PlanUsedFlag0:
		*s = PlanUsedFlag0
	case PlanUsedFlag1:
		*s = PlanUsedFlag1
	default:
		*s = PlanUsedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccount) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.DepositDate.Set {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate.Set {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.PaymentDeadline.Set {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate.Set {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.SettlementAmount.Set {
			e.FieldStart("settlement_amount")
			s.SettlementAmount.Encode(e)
		}
	}
	{
		if s.BankTransferFee.Set {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount.Set {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.TaxableFeeAmount.Set {
			e.FieldStart("taxable_fee_amount")
			s.TaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.NontaxableFeeAmount.Set {
			e.FieldStart("nontaxable_fee_amount")
			s.NontaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount.Set {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount.Set {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount.Set {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount.Set {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeAmount.Set {
			e.FieldStart("platform_web_registration_fee_amount")
			s.PlatformWebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.DepositDestination.Set {
			e.FieldStart("deposit_destination")
			s.DepositDestination.Encode(e)
		}
	}
	{
		if s.Verified.Set {
			e.FieldStart("verified")
			s.Verified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformAccount = [27]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "deposit_amount",
	4:  "deposit_date",
	5:  "scheduled_deposit_date",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "payment_deadline",
	9:  "payment_completion_date",
	10: "status_code",
	11: "count",
	12: "settlement_amount",
	13: "bank_transfer_fee",
	14: "total_amount",
	15: "fee_amount",
	16: "taxable_fee_amount",
	17: "nontaxable_fee_amount",
	18: "tax_amount",
	19: "web_registration_fee_amount",
	20: "platform_fee_amount",
	21: "platform_fee_tax_amount",
	22: "platform_web_registration_fee_amount",
	23: "created",
	24: "updated",
	25: "deposit_destination",
	26: "verified",
}

// Decode decodes PlatformAccount from json.
func (s *PlatformAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate.Reset()
				if err := s.DepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate.Reset()
				if err := s.ScheduledDepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline.Reset()
				if err := s.PaymentDeadline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate.Reset()
				if err := s.PaymentCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "settlement_amount":
			if err := func() error {
				s.SettlementAmount.Reset()
				if err := s.SettlementAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settlement_amount\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee.Reset()
				if err := s.BankTransferFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount.Reset()
				if err := s.FeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "taxable_fee_amount":
			if err := func() error {
				s.TaxableFeeAmount.Reset()
				if err := s.TaxableFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"taxable_fee_amount\"")
			}
		case "nontaxable_fee_amount":
			if err := func() error {
				s.NontaxableFeeAmount.Reset()
				if err := s.NontaxableFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nontaxable_fee_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount.Reset()
				if err := s.TaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount.Reset()
				if err := s.WebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount.Reset()
				if err := s.PlatformFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount.Reset()
				if err := s.PlatformFeeTaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "platform_web_registration_fee_amount":
			if err := func() error {
				s.PlatformWebRegistrationFeeAmount.Reset()
				if err := s.PlatformWebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "deposit_destination":
			if err := func() error {
				s.DepositDestination.Reset()
				if err := s.DepositDestination.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_destination\"")
			}
		case "verified":
			if err := func() error {
				s.Verified.Reset()
				if err := s.Verified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.DepositDate.Set {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate.Set {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.PaymentDeadline.Set {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate.Set {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.SettlementAmount.Set {
			e.FieldStart("settlement_amount")
			s.SettlementAmount.Encode(e)
		}
	}
	{
		if s.BankTransferFee.Set {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount.Set {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount.Set {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount.Set {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount.Set {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Verified.Set {
			e.FieldStart("verified")
			s.Verified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformAccountListItem = [22]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "deposit_amount",
	4:  "deposit_date",
	5:  "scheduled_deposit_date",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "payment_deadline",
	9:  "payment_completion_date",
	10: "status_code",
	11: "count",
	12: "settlement_amount",
	13: "bank_transfer_fee",
	14: "total_amount",
	15: "fee_amount",
	16: "platform_fee_amount",
	17: "platform_fee_tax_amount",
	18: "tax_amount",
	19: "created",
	20: "updated",
	21: "verified",
}

// Decode decodes PlatformAccountListItem from json.
func (s *PlatformAccountListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate.Reset()
				if err := s.DepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate.Reset()
				if err := s.ScheduledDepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline.Reset()
				if err := s.PaymentDeadline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate.Reset()
				if err := s.PaymentCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "settlement_amount":
			if err := func() error {
				s.SettlementAmount.Reset()
				if err := s.SettlementAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settlement_amount\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee.Reset()
				if err := s.BankTransferFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount.Reset()
				if err := s.FeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount.Reset()
				if err := s.PlatformFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount.Reset()
				if err := s.PlatformFeeTaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount.Reset()
				if err := s.TaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "verified":
			if err := func() error {
				s.Verified.Reset()
				if err := s.Verified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlatformAccountListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PlatformAccountListRetrievingResponse from json.
func (s *PlatformAccountListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PlatformAccountListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformAccountListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformAccountPropertiesID as json.
func (s PlatformAccountPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PlatformAccountPropertiesID from json.
func (s *PlatformAccountPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformAccountPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformAccountPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformAccountPropertiesTotalAmount as json.
func (s PlatformAccountPropertiesTotalAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PlatformAccountPropertiesTotalAmount from json.
func (s *PlatformAccountPropertiesTotalAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountPropertiesTotalAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformAccountPropertiesTotalAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformAccountPropertiesTotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountPropertiesTotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountSummary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountSummary) encodeFields(e *jx.Encoder) {
	{
		if s.SummaryID.Set {
			e.FieldStart("summary_id")
			s.SummaryID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.TenantShopID.Set {
			e.FieldStart("tenant_shop_id")
			s.TenantShopID.Encode(e)
		}
	}
	{
		if s.TenantShopName.Set {
			e.FieldStart("tenant_shop_name")
			s.TenantShopName.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount.Set {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.TaxableFeeAmount.Set {
			e.FieldStart("taxable_fee_amount")
			s.TaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.NontaxableFeeAmount.Set {
			e.FieldStart("nontaxable_fee_amount")
			s.NontaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount.Set {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount.Set {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeAmount.Set {
			e.FieldStart("platform_web_registration_fee_amount")
			s.PlatformWebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount.Set {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount.Set {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.TenantAccountProcessIDList != nil {
			e.FieldStart("tenant_account_process_id_list")
			e.ArrStart()
			for _, elem := range s.TenantAccountProcessIDList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlatformAccountSummary = [21]string{
	0:  "summary_id",
	1:  "account_id",
	2:  "shop_id",
	3:  "tenant_shop_id",
	4:  "tenant_shop_name",
	5:  "deposit_amount",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "count",
	9:  "total_amount",
	10: "fee_amount",
	11: "taxable_fee_amount",
	12: "nontaxable_fee_amount",
	13: "tax_amount",
	14: "web_registration_fee_amount",
	15: "platform_web_registration_fee_amount",
	16: "platform_fee_amount",
	17: "platform_fee_tax_amount",
	18: "created",
	19: "updated",
	20: "tenant_account_process_id_list",
}

// Decode decodes PlatformAccountSummary from json.
func (s *PlatformAccountSummary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountSummary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "summary_id":
			if err := func() error {
				s.SummaryID.Reset()
				if err := s.SummaryID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"summary_id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "tenant_shop_id":
			if err := func() error {
				s.TenantShopID.Reset()
				if err := s.TenantShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_shop_id\"")
			}
		case "tenant_shop_name":
			if err := func() error {
				s.TenantShopName.Reset()
				if err := s.TenantShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_shop_name\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount.Reset()
				if err := s.FeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "taxable_fee_amount":
			if err := func() error {
				s.TaxableFeeAmount.Reset()
				if err := s.TaxableFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"taxable_fee_amount\"")
			}
		case "nontaxable_fee_amount":
			if err := func() error {
				s.NontaxableFeeAmount.Reset()
				if err := s.NontaxableFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nontaxable_fee_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount.Reset()
				if err := s.TaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount.Reset()
				if err := s.WebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "platform_web_registration_fee_amount":
			if err := func() error {
				s.PlatformWebRegistrationFeeAmount.Reset()
				if err := s.PlatformWebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount.Reset()
				if err := s.PlatformFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount.Reset()
				if err := s.PlatformFeeTaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "tenant_account_process_id_list":
			if err := func() error {
				s.TenantAccountProcessIDList = make([]AccountPropertiesID, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountPropertiesID
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.TenantAccountProcessIDList = append(s.TenantAccountProcessIDList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_account_process_id_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountSummary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountSummary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountSummary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountSummaryListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountSummaryListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlatformAccountSummaryListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PlatformAccountSummaryListRetrievingResponse from json.
func (s *PlatformAccountSummaryListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountSummaryListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PlatformAccountSummary, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformAccountSummary
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountSummaryListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountSummaryListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountSummaryListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformFeeAmount as json.
func (s PlatformFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PlatformFeeAmount from json.
func (s *PlatformFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformFeeTaxAmount as json.
func (s PlatformFeeTaxAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PlatformFeeTaxAmount from json.
func (s *PlatformFeeTaxAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformFeeTaxAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformFeeTaxAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformFeeTaxAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformFeeTaxAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformID as json.
func (s PlatformID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PlatformID from json.
func (s *PlatformID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformName as json.
func (s PlatformName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PlatformName from json.
func (s *PlatformName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRate as json.
func (s PlatformRate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PlatformRate from json.
func (s *PlatformRate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformRate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformRate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformRate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformRate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformRateConfig) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformRateConfig) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlatformRate.Set {
			e.FieldStart("platform_rate")
			s.PlatformRate.Encode(e)
		}
	}
	{
		if s.FixedFee.Set {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee.Set {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
	{
		if s.PaypayContentCategoryType.Set {
			e.FieldStart("paypay_content_category_type")
			s.PaypayContentCategoryType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformRateConfig = [5]string{
	0: "id",
	1: "platform_rate",
	2: "fixed_fee",
	3: "web_registration_fee",
	4: "paypay_content_category_type",
}

// Decode decodes PlatformRateConfig from json.
func (s *PlatformRateConfig) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformRateConfig to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "platform_rate":
			if err := func() error {
				s.PlatformRate.Reset()
				if err := s.PlatformRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee.Reset()
				if err := s.FixedFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee.Reset()
				if err := s.WebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		case "paypay_content_category_type":
			if err := func() error {
				s.PaypayContentCategoryType.Reset()
				if err := s.PaypayContentCategoryType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_content_category_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformRateConfig")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformRateConfig) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformRateConfig) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRateConfigPaypayContentCategoryType as json.
func (s PlatformRateConfigPaypayContentCategoryType) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes PlatformRateConfigPaypayContentCategoryType from json.
func (s *PlatformRateConfigPaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformRateConfigPaypayContentCategoryType to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = PlatformRateConfigPaypayContentCategoryType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformRateConfigPaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformRateConfigPaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformShopUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformShopUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("examination_master_id")
		s.ExaminationMasterID.Encode(e)
	}
	{
		if s.PlatformRate.Set {
			e.FieldStart("platform_rate")
			s.PlatformRate.Encode(e)
		}
	}
	{
		if s.FixedFee.Set {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee.Set {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformShopUpdatingRequest = [4]string{
	0: "examination_master_id",
	1: "platform_rate",
	2: "fixed_fee",
	3: "web_registration_fee",
}

// Decode decodes PlatformShopUpdatingRequest from json.
func (s *PlatformShopUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopUpdatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_master_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "platform_rate":
			if err := func() error {
				s.PlatformRate.Reset()
				if err := s.PlatformRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee.Reset()
				if err := s.FixedFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee.Reset()
				if err := s.WebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformShopUpdatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPlatformShopUpdatingRequest) {
					name = jsonFieldsNameOfPlatformShopUpdatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformShopUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformWebRegistrationFeeAmount as json.
func (s PlatformWebRegistrationFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PlatformWebRegistrationFeeAmount from json.
func (s *PlatformWebRegistrationFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformWebRegistrationFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PlatformWebRegistrationFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformWebRegistrationFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformWebRegistrationFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PrepaidPoint as json.
func (s PrepaidPoint) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes PrepaidPoint from json.
func (s *PrepaidPoint) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PrepaidPoint to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PrepaidPoint(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PrepaidPoint) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PrepaidPoint) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProcessDate as json.
func (s ProcessDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ProcessDate from json.
func (s *ProcessDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProcessDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ProcessDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ProcessDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProcessDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Product as json.
func (s Product) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes Product from json.
func (s *Product) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Product to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Product(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Product) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Product) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAccountID as json.
func (s PropertiesAccountID) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesAccountID from json.
func (s *PropertiesAccountID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesAccountID to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesAccountID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesAccountID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesAccountID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAggregateTermEnd as json.
func (s PropertiesAggregateTermEnd) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesAggregateTermEnd from json.
func (s *PropertiesAggregateTermEnd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesAggregateTermEnd to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesAggregateTermEnd(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesAggregateTermEnd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesAggregateTermEnd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAggregateTermStart as json.
func (s PropertiesAggregateTermStart) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesAggregateTermStart from json.
func (s *PropertiesAggregateTermStart) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesAggregateTermStart to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesAggregateTermStart(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesAggregateTermStart) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesAggregateTermStart) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesAmount as json.
func (s PropertiesAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesAmount from json.
func (s *PropertiesAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesCancelURL as json.
func (s PropertiesCancelURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesCancelURL from json.
func (s *PropertiesCancelURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesCancelURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesCancelURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesCancelURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesCancelURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesCount as json.
func (s PropertiesCount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesCount from json.
func (s *PropertiesCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesCount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesCount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesCustomerGroupID as json.
func (s PropertiesCustomerGroupID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesCustomerGroupID from json.
func (s *PropertiesCustomerGroupID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesCustomerGroupID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesCustomerGroupID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesCustomerGroupID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesCustomerGroupID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesDefaultFlag as json.
func (s PropertiesDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PropertiesDefaultFlag from json.
func (s *PropertiesDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PropertiesDefaultFlag(v) {
	case PropertiesDefaultFlag0:
		*s = PropertiesDefaultFlag0
	case PropertiesDefaultFlag1:
		*s = PropertiesDefaultFlag1
	default:
		*s = PropertiesDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesDepositAmount as json.
func (s PropertiesDepositAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesDepositAmount from json.
func (s *PropertiesDepositAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesDepositAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesDepositAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesDepositAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesDepositAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesDepositDate as json.
func (s PropertiesDepositDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesDepositDate from json.
func (s *PropertiesDepositDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesDepositDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesDepositDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesDepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesDepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesExpire as json.
func (s PropertiesExpire) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesExpire from json.
func (s *PropertiesExpire) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesExpire to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesExpire(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesExpire) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesExpire) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesFeeAmount as json.
func (s PropertiesFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesFeeAmount from json.
func (s *PropertiesFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesGuideMailSendFlag as json.
func (s PropertiesGuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PropertiesGuideMailSendFlag from json.
func (s *PropertiesGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesGuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PropertiesGuideMailSendFlag(v) {
	case PropertiesGuideMailSendFlag0:
		*s = PropertiesGuideMailSendFlag0
	case PropertiesGuideMailSendFlag1:
		*s = PropertiesGuideMailSendFlag1
	default:
		*s = PropertiesGuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesID as json.
func (s PropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesID from json.
func (s *PropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesIntervalCount as json.
func (s PropertiesIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes PropertiesIntervalCount from json.
func (s *PropertiesIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = PropertiesIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesIntervalPattern as json.
func (s PropertiesIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PropertiesIntervalPattern from json.
func (s *PropertiesIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PropertiesIntervalPattern(v) {
	case PropertiesIntervalPatternMonth:
		*s = PropertiesIntervalPatternMonth
	case PropertiesIntervalPatternYear:
		*s = PropertiesIntervalPatternYear
	default:
		*s = PropertiesIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesMailCustomerName as json.
func (s PropertiesMailCustomerName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesMailCustomerName from json.
func (s *PropertiesMailCustomerName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesMailCustomerName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesMailCustomerName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesMailCustomerName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesMailCustomerName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesOrderDescription as json.
func (s PropertiesOrderDescription) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesOrderDescription from json.
func (s *PropertiesOrderDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesOrderDescription to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesOrderDescription(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesOrderDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesOrderDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPaymentDate as json.
func (s PropertiesPaymentDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesPaymentDate from json.
func (s *PropertiesPaymentDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesPaymentDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesPaymentDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesPaymentDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesPaymentDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPaymentTermDay as json.
func (s PropertiesPaymentTermDay) Encode(e *jx.Encoder) {
	unwrapped := int32(s)

	e.Int32(unwrapped)
}

// Decode decodes PropertiesPaymentTermDay from json.
func (s *PropertiesPaymentTermDay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesPaymentTermDay to nil")
	}
	var unwrapped int32
	if err := func() error {
		v, err := d.Int32()
		unwrapped = int32(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesPaymentTermDay(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesPaymentTermDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesPaymentTermDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPlatformFeeAmount as json.
func (s PropertiesPlatformFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesPlatformFeeAmount from json.
func (s *PropertiesPlatformFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesPlatformFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesPlatformFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesPlatformFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesPlatformFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesPlatformFeeTaxAmount as json.
func (s PropertiesPlatformFeeTaxAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesPlatformFeeTaxAmount from json.
func (s *PropertiesPlatformFeeTaxAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesPlatformFeeTaxAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesPlatformFeeTaxAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesPlatformFeeTaxAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesPlatformFeeTaxAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesProcessDate as json.
func (s PropertiesProcessDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesProcessDate from json.
func (s *PropertiesProcessDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesProcessDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesProcessDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesProcessDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesProcessDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesReceiverMail as json.
func (s PropertiesReceiverMail) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesReceiverMail from json.
func (s *PropertiesReceiverMail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesReceiverMail to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesReceiverMail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesReceiverMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesReceiverMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesScheduledDepositDate as json.
func (s PropertiesScheduledDepositDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesScheduledDepositDate from json.
func (s *PropertiesScheduledDepositDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesScheduledDepositDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesScheduledDepositDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesScheduledDepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesScheduledDepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopMailTemplateID as json.
func (s PropertiesShopMailTemplateID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesShopMailTemplateID from json.
func (s *PropertiesShopMailTemplateID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesShopMailTemplateID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesShopMailTemplateID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesShopMailTemplateID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesShopMailTemplateID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopName as json.
func (s PropertiesShopName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesShopName from json.
func (s *PropertiesShopName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesShopName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesShopName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesShopName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesShopName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopNameKana as json.
func (s PropertiesShopNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesShopNameKana from json.
func (s *PropertiesShopNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesShopNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesShopNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesShopNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesShopNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesShopServiceName as json.
func (s PropertiesShopServiceName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesShopServiceName from json.
func (s *PropertiesShopServiceName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesShopServiceName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesShopServiceName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesShopServiceName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesShopServiceName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesSuccessURL as json.
func (s PropertiesSuccessURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes PropertiesSuccessURL from json.
func (s *PropertiesSuccessURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesSuccessURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesSuccessURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesSuccessURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesSuccessURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesTax as json.
func (s PropertiesTax) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesTax from json.
func (s *PropertiesTax) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesTax to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesTax(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesTotalAmount as json.
func (s PropertiesTotalAmount) Encode(e *jx.Encoder) {
	unwrapped := int64(s)

	e.Int64(unwrapped)
}

// Decode decodes PropertiesTotalAmount from json.
func (s *PropertiesTotalAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesTotalAmount to nil")
	}
	var unwrapped int64
	if err := func() error {
		v, err := d.Int64()
		unwrapped = int64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesTotalAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesTotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesTotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesURL as json.
func (s PropertiesURL) Encode(e *jx.Encoder) {
	unwrapped := url.URL(s)

	json.EncodeURI(e, unwrapped)
}

// Decode decodes PropertiesURL from json.
func (s *PropertiesURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesURL to nil")
	}
	var unwrapped url.URL
	if err := func() error {
		v, err := json.DecodeURI(d)
		unwrapped = v
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PropertiesWebRegistrationFeeAmount as json.
func (s PropertiesWebRegistrationFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes PropertiesWebRegistrationFeeAmount from json.
func (s *PropertiesWebRegistrationFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertiesWebRegistrationFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = PropertiesWebRegistrationFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PropertiesWebRegistrationFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertiesWebRegistrationFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *R3DS) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *R3DS) encodeFields(e *jx.Encoder) {
	{
		if s.Tds2TransResult.Set {
			e.FieldStart("tds2_trans_result")
			s.Tds2TransResult.Encode(e)
		}
	}
	{
		if s.Tds2TransResultReason.Set {
			e.FieldStart("tds2_trans_result_reason")
			s.Tds2TransResultReason.Encode(e)
		}
	}
}

var jsonFieldsNameOfR3DS = [2]string{
	0: "tds2_trans_result",
	1: "tds2_trans_result_reason",
}

// Decode decodes R3DS from json.
func (s *R3DS) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DS to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "tds2_trans_result":
			if err := func() error {
				s.Tds2TransResult.Reset()
				if err := s.Tds2TransResult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result\"")
			}
		case "tds2_trans_result_reason":
			if err := func() error {
				s.Tds2TransResultReason.Reset()
				if err := s.Tds2TransResultReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result_reason\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode R3DS")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *R3DS) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DS) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DS2Status as json.
func (s R3DS2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes R3DS2Status from json.
func (s *R3DS2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DS2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch R3DS2Status(v) {
	case R3DS2StatusAUTHENTICATING:
		*s = R3DS2StatusAUTHENTICATING
	case R3DS2StatusCHALLENGE:
		*s = R3DS2StatusCHALLENGE
	case R3DS2StatusAUTHENTICATED:
		*s = R3DS2StatusAUTHENTICATED
	default:
		*s = R3DS2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s R3DS2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DS2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DS2TransactionResult as json.
func (s R3DS2TransactionResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes R3DS2TransactionResult from json.
func (s *R3DS2TransactionResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DS2TransactionResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch R3DS2TransactionResult(v) {
	case R3DS2TransactionResultY:
		*s = R3DS2TransactionResultY
	case R3DS2TransactionResultA:
		*s = R3DS2TransactionResultA
	case R3DS2TransactionResultC:
		*s = R3DS2TransactionResultC
	case R3DS2TransactionResultN:
		*s = R3DS2TransactionResultN
	case R3DS2TransactionResultU:
		*s = R3DS2TransactionResultU
	case R3DS2TransactionResultR:
		*s = R3DS2TransactionResultR
	default:
		*s = R3DS2TransactionResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s R3DS2TransactionResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DS2TransactionResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DS2TransactionResultReason as json.
func (s R3DS2TransactionResultReason) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes R3DS2TransactionResultReason from json.
func (s *R3DS2TransactionResultReason) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DS2TransactionResultReason to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch R3DS2TransactionResultReason(v) {
	case R3DS2TransactionResultReason01:
		*s = R3DS2TransactionResultReason01
	case R3DS2TransactionResultReason02:
		*s = R3DS2TransactionResultReason02
	case R3DS2TransactionResultReason03:
		*s = R3DS2TransactionResultReason03
	case R3DS2TransactionResultReason04:
		*s = R3DS2TransactionResultReason04
	case R3DS2TransactionResultReason05:
		*s = R3DS2TransactionResultReason05
	case R3DS2TransactionResultReason06:
		*s = R3DS2TransactionResultReason06
	case R3DS2TransactionResultReason07:
		*s = R3DS2TransactionResultReason07
	case R3DS2TransactionResultReason08:
		*s = R3DS2TransactionResultReason08
	case R3DS2TransactionResultReason09:
		*s = R3DS2TransactionResultReason09
	case R3DS2TransactionResultReason11:
		*s = R3DS2TransactionResultReason11
	case R3DS2TransactionResultReason12:
		*s = R3DS2TransactionResultReason12
	case R3DS2TransactionResultReason13:
		*s = R3DS2TransactionResultReason13
	case R3DS2TransactionResultReason14:
		*s = R3DS2TransactionResultReason14
	case R3DS2TransactionResultReason15:
		*s = R3DS2TransactionResultReason15
	case R3DS2TransactionResultReason16:
		*s = R3DS2TransactionResultReason16
	case R3DS2TransactionResultReason17:
		*s = R3DS2TransactionResultReason17
	case R3DS2TransactionResultReason18:
		*s = R3DS2TransactionResultReason18
	case R3DS2TransactionResultReason19:
		*s = R3DS2TransactionResultReason19
	case R3DS2TransactionResultReason20:
		*s = R3DS2TransactionResultReason20
	case R3DS2TransactionResultReason21:
		*s = R3DS2TransactionResultReason21
	case R3DS2TransactionResultReason22:
		*s = R3DS2TransactionResultReason22
	case R3DS2TransactionResultReason23:
		*s = R3DS2TransactionResultReason23
	case R3DS2TransactionResultReason24:
		*s = R3DS2TransactionResultReason24
	case R3DS2TransactionResultReason25:
		*s = R3DS2TransactionResultReason25
	case R3DS2TransactionResultReason26:
		*s = R3DS2TransactionResultReason26
	case R3DS2TransactionResultReason8099:
		*s = R3DS2TransactionResultReason8099
	default:
		*s = R3DS2TransactionResultReason(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s R3DS2TransactionResultReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DS2TransactionResultReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *R3DSAuthorizingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *R3DSAuthorizingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Param.Set {
			e.FieldStart("param")
			s.Param.Encode(e)
		}
	}
}

var jsonFieldsNameOfR3DSAuthorizingRequest = [1]string{
	0: "param",
}

// Decode decodes R3DSAuthorizingRequest from json.
func (s *R3DSAuthorizingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSAuthorizingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "param":
			if err := func() error {
				s.Param.Reset()
				if err := s.Param.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"param\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode R3DSAuthorizingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *R3DSAuthorizingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSAuthorizingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *R3DSAuthorizingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *R3DSAuthorizingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ChallengeURL.Set {
			e.FieldStart("challenge_url")
			s.ChallengeURL.Encode(e)
		}
	}
	{
		if s.Tds2TransResult.Set {
			e.FieldStart("tds2_trans_result")
			s.Tds2TransResult.Encode(e)
		}
	}
	{
		if s.Tds2TransResultReason.Set {
			e.FieldStart("tds2_trans_result_reason")
			s.Tds2TransResultReason.Encode(e)
		}
	}
}

var jsonFieldsNameOfR3DSAuthorizingResponse = [3]string{
	0: "challenge_url",
	1: "tds2_trans_result",
	2: "tds2_trans_result_reason",
}

// Decode decodes R3DSAuthorizingResponse from json.
func (s *R3DSAuthorizingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSAuthorizingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "challenge_url":
			if err := func() error {
				s.ChallengeURL.Reset()
				if err := s.ChallengeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"challenge_url\"")
			}
		case "tds2_trans_result":
			if err := func() error {
				s.Tds2TransResult.Reset()
				if err := s.Tds2TransResult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result\"")
			}
		case "tds2_trans_result_reason":
			if err := func() error {
				s.Tds2TransResultReason.Reset()
				if err := s.Tds2TransResultReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result_reason\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode R3DSAuthorizingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *R3DSAuthorizingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSAuthorizingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReceiverMail as json.
func (s ReceiverMail) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ReceiverMail from json.
func (s *ReceiverMail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReceiverMail to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ReceiverMail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ReceiverMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReceiverMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedirectType as json.
func (s RedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RedirectType from json.
func (s *RedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RedirectType(v) {
	case RedirectType1:
		*s = RedirectType1
	case RedirectType2:
		*s = RedirectType2
	default:
		*s = RedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RedirectURL as json.
func (s RedirectURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RedirectURL from json.
func (s *RedirectURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RedirectURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RedirectURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RedirectURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RedirectURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RegistryCorporateInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RegistryCorporateInfo) encodeFields(e *jx.Encoder) {
	{
		if s.CompanyName.Set {
			e.FieldStart("company_name")
			s.CompanyName.Encode(e)
		}
	}
	{
		if s.CompanyNameKana.Set {
			e.FieldStart("company_name_kana")
			s.CompanyNameKana.Encode(e)
		}
	}
	{
		if s.CompanyKind.Set {
			e.FieldStart("company_kind")
			s.CompanyKind.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode.Set {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureCode.Set {
			e.FieldStart("company_prefecture_code")
			s.CompanyPrefectureCode.Encode(e)
		}
	}
	{
		if s.CompanyCityCode.Set {
			e.FieldStart("company_city_code")
			s.CompanyCityCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture.Set {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana.Set {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyCity.Set {
			e.FieldStart("company_city")
			s.CompanyCity.Encode(e)
		}
	}
	{
		if s.CompanyCityKana.Set {
			e.FieldStart("company_city_kana")
			s.CompanyCityKana.Encode(e)
		}
	}
	{
		if s.CompanyStreet.Set {
			e.FieldStart("company_street")
			s.CompanyStreet.Encode(e)
		}
	}
	{
		if s.CompanyStreetKana.Set {
			e.FieldStart("company_street_kana")
			s.CompanyStreetKana.Encode(e)
		}
	}
}

var jsonFieldsNameOfRegistryCorporateInfo = [12]string{
	0:  "company_name",
	1:  "company_name_kana",
	2:  "company_kind",
	3:  "company_postal_code",
	4:  "company_prefecture_code",
	5:  "company_city_code",
	6:  "company_prefecture",
	7:  "company_prefecture_kana",
	8:  "company_city",
	9:  "company_city_kana",
	10: "company_street",
	11: "company_street_kana",
}

// Decode decodes RegistryCorporateInfo from json.
func (s *RegistryCorporateInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RegistryCorporateInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "company_name":
			if err := func() error {
				s.CompanyName.Reset()
				if err := s.CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_name\"")
			}
		case "company_name_kana":
			if err := func() error {
				s.CompanyNameKana.Reset()
				if err := s.CompanyNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_name_kana\"")
			}
		case "company_kind":
			if err := func() error {
				s.CompanyKind.Reset()
				if err := s.CompanyKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_kind\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode.Reset()
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture_code":
			if err := func() error {
				s.CompanyPrefectureCode.Reset()
				if err := s.CompanyPrefectureCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_code\"")
			}
		case "company_city_code":
			if err := func() error {
				s.CompanyCityCode.Reset()
				if err := s.CompanyCityCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_city_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture.Reset()
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana.Reset()
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_city":
			if err := func() error {
				s.CompanyCity.Reset()
				if err := s.CompanyCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_city\"")
			}
		case "company_city_kana":
			if err := func() error {
				s.CompanyCityKana.Reset()
				if err := s.CompanyCityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_city_kana\"")
			}
		case "company_street":
			if err := func() error {
				s.CompanyStreet.Reset()
				if err := s.CompanyStreet.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_street\"")
			}
		case "company_street_kana":
			if err := func() error {
				s.CompanyStreetKana.Reset()
				if err := s.CompanyStreetKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_street_kana\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RegistryCorporateInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RegistryCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RegistryCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Remarks as json.
func (s Remarks) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Remarks from json.
func (s *Remarks) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Remarks to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Remarks(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Remarks) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Remarks) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressChrome as json.
func (s RepresentativeAddressChrome) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeAddressChrome from json.
func (s *RepresentativeAddressChrome) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeAddressChrome to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeAddressChrome(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeAddressChrome) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeAddressChrome) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressChromeKana as json.
func (s RepresentativeAddressChromeKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeAddressChromeKana from json.
func (s *RepresentativeAddressChromeKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeAddressChromeKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeAddressChromeKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeAddressChromeKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeAddressChromeKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressMunicipality as json.
func (s RepresentativeAddressMunicipality) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeAddressMunicipality from json.
func (s *RepresentativeAddressMunicipality) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeAddressMunicipality to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeAddressMunicipality(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeAddressMunicipality) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeAddressMunicipality) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressMunicipalityKana as json.
func (s RepresentativeAddressMunicipalityKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeAddressMunicipalityKana from json.
func (s *RepresentativeAddressMunicipalityKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeAddressMunicipalityKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeAddressMunicipalityKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeAddressMunicipalityKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeAddressMunicipalityKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressSection as json.
func (s RepresentativeAddressSection) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeAddressSection from json.
func (s *RepresentativeAddressSection) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeAddressSection to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeAddressSection(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeAddressSection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeAddressSection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeAddressSectionKana as json.
func (s RepresentativeAddressSectionKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeAddressSectionKana from json.
func (s *RepresentativeAddressSectionKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeAddressSectionKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeAddressSectionKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeAddressSectionKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeAddressSectionKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeBirthday as json.
func (s RepresentativeBirthday) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeBirthday from json.
func (s *RepresentativeBirthday) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeBirthday to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeBirthday(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeBirthday) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeBirthday) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeFirstName as json.
func (s RepresentativeFirstName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeFirstName from json.
func (s *RepresentativeFirstName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeFirstName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeFirstName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeFirstName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeFirstName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeFirstNameKana as json.
func (s RepresentativeFirstNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeFirstNameKana from json.
func (s *RepresentativeFirstNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeFirstNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeFirstNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeFirstNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeFirstNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeGender as json.
func (s RepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes RepresentativeGender from json.
func (s *RepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = RepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeLastName as json.
func (s RepresentativeLastName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeLastName from json.
func (s *RepresentativeLastName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeLastName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeLastName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeLastName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeLastName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeLastNameKana as json.
func (s RepresentativeLastNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeLastNameKana from json.
func (s *RepresentativeLastNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeLastNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeLastNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeLastNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeLastNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativePostalCode as json.
func (s RepresentativePostalCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativePostalCode from json.
func (s *RepresentativePostalCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativePostalCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativePostalCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativePostalCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativePostalCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativePrefecture as json.
func (s RepresentativePrefecture) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativePrefecture from json.
func (s *RepresentativePrefecture) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativePrefecture to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativePrefecture(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativePrefecture) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativePrefecture) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativePrefectureKana as json.
func (s RepresentativePrefectureKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativePrefectureKana from json.
func (s *RepresentativePrefectureKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativePrefectureKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativePrefectureKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativePrefectureKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativePrefectureKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RepresentativeTel as json.
func (s RepresentativeTel) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RepresentativeTel from json.
func (s *RepresentativeTel) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RepresentativeTel to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RepresentativeTel(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RepresentativeTel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RepresentativeTel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RequestAcceptEndDate as json.
func (s RequestAcceptEndDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes RequestAcceptEndDate from json.
func (s *RequestAcceptEndDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RequestAcceptEndDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RequestAcceptEndDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RequestAcceptEndDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RequestAcceptEndDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentListOK as json.
func (s RetrievePaymentListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

func (s RetrievePaymentListOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentApplePayListRetrievingResponseRetrievePaymentListOK:
		e.FieldStart("payType")
		e.Str("ApplePay")
		{
			s := s.PaymentApplePayListRetrievingResponse
			{
				if s.TotalCount.Set {
					e.FieldStart("total_count")
					s.TotalCount.Encode(e)
				}
			}
			{
				if s.LastPage.Set {
					e.FieldStart("last_page")
					s.LastPage.Encode(e)
				}
			}
			{
				if s.CurrentPage.Set {
					e.FieldStart("current_page")
					s.CurrentPage.Encode(e)
				}
			}
			{
				if s.Limit.Set {
					e.FieldStart("limit")
					s.Limit.Encode(e)
				}
			}
			{
				if s.LinkNext.Set {
					e.FieldStart("link_next")
					s.LinkNext.Encode(e)
				}
			}
			{
				if s.LinkPrevious.Set {
					e.FieldStart("link_previous")
					s.LinkPrevious.Encode(e)
				}
			}
			{
				if s.List != nil {
					e.FieldStart("list")
					e.ArrStart()
					for _, elem := range s.List {
						elem.Encode(e)
					}
					e.ArrEnd()
				}
			}
		}
	case PaymentCardListRetrievingResponseRetrievePaymentListOK:
		e.FieldStart("payType")
		e.Str("Card")
		{
			s := s.PaymentCardListRetrievingResponse
			{
				if s.TotalCount.Set {
					e.FieldStart("total_count")
					s.TotalCount.Encode(e)
				}
			}
			{
				if s.LastPage.Set {
					e.FieldStart("last_page")
					s.LastPage.Encode(e)
				}
			}
			{
				if s.CurrentPage.Set {
					e.FieldStart("current_page")
					s.CurrentPage.Encode(e)
				}
			}
			{
				if s.Limit.Set {
					e.FieldStart("limit")
					s.Limit.Encode(e)
				}
			}
			{
				if s.LinkNext.Set {
					e.FieldStart("link_next")
					s.LinkNext.Encode(e)
				}
			}
			{
				if s.LinkPrevious.Set {
					e.FieldStart("link_previous")
					s.LinkPrevious.Encode(e)
				}
			}
			{
				if s.List != nil {
					e.FieldStart("list")
					e.ArrStart()
					for _, elem := range s.List {
						elem.Encode(e)
					}
					e.ArrEnd()
				}
			}
		}
	case PaymentDirectDebitListRetrievingResponseRetrievePaymentListOK:
		e.FieldStart("payType")
		e.Str("DirectDebit")
		{
			s := s.PaymentDirectDebitListRetrievingResponse
			{
				if s.TotalCount.Set {
					e.FieldStart("total_count")
					s.TotalCount.Encode(e)
				}
			}
			{
				if s.LastPage.Set {
					e.FieldStart("last_page")
					s.LastPage.Encode(e)
				}
			}
			{
				if s.CurrentPage.Set {
					e.FieldStart("current_page")
					s.CurrentPage.Encode(e)
				}
			}
			{
				if s.Limit.Set {
					e.FieldStart("limit")
					s.Limit.Encode(e)
				}
			}
			{
				if s.LinkNext.Set {
					e.FieldStart("link_next")
					s.LinkNext.Encode(e)
				}
			}
			{
				if s.LinkPrevious.Set {
					e.FieldStart("link_previous")
					s.LinkPrevious.Encode(e)
				}
			}
			{
				if s.List != nil {
					e.FieldStart("list")
					e.ArrStart()
					for _, elem := range s.List {
						elem.Encode(e)
					}
					e.ArrEnd()
				}
			}
		}
	case PaymentKonbiniListRetrievingResponseRetrievePaymentListOK:
		e.FieldStart("payType")
		e.Str("Konbini")
		{
			s := s.PaymentKonbiniListRetrievingResponse
			{
				if s.TotalCount.Set {
					e.FieldStart("total_count")
					s.TotalCount.Encode(e)
				}
			}
			{
				if s.LastPage.Set {
					e.FieldStart("last_page")
					s.LastPage.Encode(e)
				}
			}
			{
				if s.CurrentPage.Set {
					e.FieldStart("current_page")
					s.CurrentPage.Encode(e)
				}
			}
			{
				if s.Limit.Set {
					e.FieldStart("limit")
					s.Limit.Encode(e)
				}
			}
			{
				if s.LinkNext.Set {
					e.FieldStart("link_next")
					s.LinkNext.Encode(e)
				}
			}
			{
				if s.LinkPrevious.Set {
					e.FieldStart("link_previous")
					s.LinkPrevious.Encode(e)
				}
			}
			{
				if s.List != nil {
					e.FieldStart("list")
					e.ArrStart()
					for _, elem := range s.List {
						elem.Encode(e)
					}
					e.ArrEnd()
				}
			}
		}
	case PaymentPayPayListRetrievingResponseRetrievePaymentListOK:
		e.FieldStart("payType")
		e.Str("PayPay")
		{
			s := s.PaymentPayPayListRetrievingResponse
			{
				if s.TotalCount.Set {
					e.FieldStart("total_count")
					s.TotalCount.Encode(e)
				}
			}
			{
				if s.LastPage.Set {
					e.FieldStart("last_page")
					s.LastPage.Encode(e)
				}
			}
			{
				if s.CurrentPage.Set {
					e.FieldStart("current_page")
					s.CurrentPage.Encode(e)
				}
			}
			{
				if s.Limit.Set {
					e.FieldStart("limit")
					s.Limit.Encode(e)
				}
			}
			{
				if s.LinkNext.Set {
					e.FieldStart("link_next")
					s.LinkNext.Encode(e)
				}
			}
			{
				if s.LinkPrevious.Set {
					e.FieldStart("link_previous")
					s.LinkPrevious.Encode(e)
				}
			}
			{
				if s.List != nil {
					e.FieldStart("list")
					e.ArrStart()
					for _, elem := range s.List {
						elem.Encode(e)
					}
					e.ArrEnd()
				}
			}
		}
	}
}

// Decode decodes RetrievePaymentListOK from json.
func (s *RetrievePaymentListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentListOK to nil")
	}
	// Sum type discriminator.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			if found {
				return d.Skip()
			}
			switch string(key) {
			case "payType":
				typ, err := d.Str()
				if err != nil {
					return err
				}
				switch typ {
				case "ApplePay":
					s.Type = PaymentApplePayListRetrievingResponseRetrievePaymentListOK
					found = true
				case "Card":
					s.Type = PaymentCardListRetrievingResponseRetrievePaymentListOK
					found = true
				case "DirectDebit":
					s.Type = PaymentDirectDebitListRetrievingResponseRetrievePaymentListOK
					found = true
				case "Konbini":
					s.Type = PaymentKonbiniListRetrievingResponseRetrievePaymentListOK
					found = true
				case "PayPay":
					s.Type = PaymentPayPayListRetrievingResponseRetrievePaymentListOK
					found = true
				default:
					return errors.Errorf("unknown type %s", typ)
				}
				return nil
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardListRetrievingResponseRetrievePaymentListOK:
		if err := s.PaymentCardListRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayListRetrievingResponseRetrievePaymentListOK:
		if err := s.PaymentApplePayListRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniListRetrievingResponseRetrievePaymentListOK:
		if err := s.PaymentKonbiniListRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayListRetrievingResponseRetrievePaymentListOK:
		if err := s.PaymentPayPayListRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitListRetrievingResponseRetrievePaymentListOK:
		if err := s.PaymentDirectDebitListRetrievingResponse.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK as json.
func (s RetrievePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardRetrievingResponseRetrievePaymentOK:
		s.PaymentCardRetrievingResponse.Encode(e)
	case PaymentApplePayRetrievingResponseRetrievePaymentOK:
		s.PaymentApplePayRetrievingResponse.Encode(e)
	case PaymentKonbiniRetrievingResponseRetrievePaymentOK:
		s.PaymentKonbiniRetrievingResponse.Encode(e)
	case PaymentPayPayRetrievingResponseRetrievePaymentOK:
		s.PaymentPayPayRetrievingResponse.Encode(e)
	case PaymentDirectDebitRetrievingResponseRetrievePaymentOK:
		s.PaymentDirectDebitRetrievingResponse.Encode(e)
	}
}

func (s RetrievePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case PaymentCardRetrievingResponseRetrievePaymentOK:
		s.PaymentCardRetrievingResponse.encodeFields(e)
	case PaymentApplePayRetrievingResponseRetrievePaymentOK:
		s.PaymentApplePayRetrievingResponse.encodeFields(e)
	case PaymentKonbiniRetrievingResponseRetrievePaymentOK:
		s.PaymentKonbiniRetrievingResponse.encodeFields(e)
	case PaymentPayPayRetrievingResponseRetrievePaymentOK:
		s.PaymentPayPayRetrievingResponse.encodeFields(e)
	case PaymentDirectDebitRetrievingResponseRetrievePaymentOK:
		s.PaymentDirectDebitRetrievingResponse.encodeFields(e)
	}
}

// Decode decodes RetrievePaymentOK from json.
func (s *RetrievePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := PaymentCardRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := PaymentCardRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := PaymentCardRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := PaymentCardRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := PaymentCardRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := PaymentCardRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := PaymentApplePayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_format":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_width":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_height":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "overpayment_flag":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_overpayment_flag":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_code":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_store_code":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "os_version":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "xdpi":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "ydpi":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_serial":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "invoice_id":
				match := PaymentKonbiniRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := PaymentPayPayRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := PaymentDirectDebitRetrievingResponseRetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case PaymentCardRetrievingResponseRetrievePaymentOK:
		if err := s.PaymentCardRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentApplePayRetrievingResponseRetrievePaymentOK:
		if err := s.PaymentApplePayRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentKonbiniRetrievingResponseRetrievePaymentOK:
		if err := s.PaymentKonbiniRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentPayPayRetrievingResponseRetrievePaymentOK:
		if err := s.PaymentPayPayRetrievingResponse.Decode(d); err != nil {
			return err
		}
	case PaymentDirectDebitRetrievingResponseRetrievePaymentOK:
		if err := s.PaymentDirectDebitRetrievingResponse.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReturnURL as json.
func (s ReturnURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ReturnURL from json.
func (s *ReturnURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReturnURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ReturnURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ReturnURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReturnURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ReturnURLOnFailure as json.
func (s ReturnURLOnFailure) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ReturnURLOnFailure from json.
func (s *ReturnURLOnFailure) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReturnURLOnFailure to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ReturnURLOnFailure(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ReturnURLOnFailure) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReturnURLOnFailure) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RolePropertiesID as json.
func (s RolePropertiesID) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes RolePropertiesID from json.
func (s *RolePropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RolePropertiesID to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = RolePropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RolePropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RolePropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ScheduledDepositDate as json.
func (s ScheduledDepositDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ScheduledDepositDate from json.
func (s *ScheduledDepositDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ScheduledDepositDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ScheduledDepositDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ScheduledDepositDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ScheduledDepositDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SendMailAddress as json.
func (s SendMailAddress) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes SendMailAddress from json.
func (s *SendMailAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SendMailAddress to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SendMailAddress(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SendMailAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SendMailAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SendURL as json.
func (s SendURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes SendURL from json.
func (s *SendURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SendURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SendURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SendURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SendURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Service as json.
func (s Service) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes Service from json.
func (s *Service) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Service to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Service(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Service) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Service) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SettlementAmount as json.
func (s SettlementAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes SettlementAmount from json.
func (s *SettlementAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SettlementAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SettlementAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SettlementAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SettlementAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SharedCustomerFlag as json.
func (s SharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SharedCustomerFlag from json.
func (s *SharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SharedCustomerFlag(v) {
	case SharedCustomerFlag0:
		*s = SharedCustomerFlag0
	case SharedCustomerFlag1:
		*s = SharedCustomerFlag1
	default:
		*s = SharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Shop) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Shop) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType.Set {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.PlatformRateList != nil {
			e.FieldStart("platform_rate_list")
			e.ArrStart()
			for _, elem := range s.PlatformRateList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SendMailAddress.Set {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress.Set {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays.Set {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfShop = [16]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "platform_rate_list",
	9:  "send_mail_address",
	10: "shop_mail_address",
	11: "log_keep_days",
	12: "api_version",
	13: "api_key_display_flag",
	14: "created",
	15: "updated",
}

// Decode decodes Shop from json.
func (s *Shop) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Shop to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType.Reset()
				if err := s.ShopType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "platform_rate_list":
			if err := func() error {
				s.PlatformRateList = make([]PlatformRateConfig, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformRateConfig
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PlatformRateList = append(s.PlatformRateList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate_list\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress.Reset()
				if err := s.SendMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress.Reset()
				if err := s.ShopMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays.Reset()
				if err := s.LogKeepDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Shop")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Shop) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Shop) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopAPIKeyDisplayFlag as json.
func (s ShopAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ShopAPIKeyDisplayFlag from json.
func (s *ShopAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ShopAPIKeyDisplayFlag(v) {
	case ShopAPIKeyDisplayFlag0:
		*s = ShopAPIKeyDisplayFlag0
	case ShopAPIKeyDisplayFlag1:
		*s = ShopAPIKeyDisplayFlag1
	default:
		*s = ShopAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopID as json.
func (s ShopID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopID from json.
func (s *ShopID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ShopInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ShopInfoV2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("shop_name")
		e.Str(s.ShopName)
	}
	{
		e.FieldStart("shop_name_kana")
		e.Str(s.ShopNameKana)
	}
	{
		e.FieldStart("shop_name_en")
		e.Str(s.ShopNameEn)
	}
	{
		e.FieldStart("support_mail")
		s.SupportMail.Encode(e)
	}
	{
		e.FieldStart("support_tel")
		s.SupportTel.Encode(e)
	}
	{
		if s.UnitPrice.Set {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		e.FieldStart("deals_long_apply_content")
		s.DealsLongApplyContent.Encode(e)
	}
	{
		e.FieldStart("deals_insecure_content")
		s.DealsInsecureContent.Encode(e)
	}
	{
		e.FieldStart("lost_trial")
		s.LostTrial.Encode(e)
	}
	{
		e.FieldStart("use_of_fincode")
		s.UseOfFincode.Encode(e)
	}
	{
		if s.SitePublished.Set {
			e.FieldStart("site_published")
			s.SitePublished.Encode(e)
		}
	}
	{
		if s.SiteInfo.Set {
			e.FieldStart("site_info")
			s.SiteInfo.Encode(e)
		}
	}
	{
		if s.PrepaidPoint.Set {
			e.FieldStart("prepaid_point")
			s.PrepaidPoint.Encode(e)
		}
	}
	{
		if s.PrepaidPointInfo.Set {
			e.FieldStart("prepaid_point_info")
			s.PrepaidPointInfo.Encode(e)
		}
	}
	{
		e.FieldStart("provides")
		s.Provides.Encode(e)
	}
	{
		e.FieldStart("content_description")
		s.ContentDescription.Encode(e)
	}
	{
		if s.ProductContentInfo.Set {
			e.FieldStart("product_content_info")
			s.ProductContentInfo.Encode(e)
		}
	}
	{
		if s.ServiceContentInfo.Set {
			e.FieldStart("service_content_info")
			s.ServiceContentInfo.Encode(e)
		}
	}
	{
		if s.DigitalContentInfo.Set {
			e.FieldStart("digital_content_info")
			s.DigitalContentInfo.Encode(e)
		}
	}
	{
		if s.AdditionalInfo.Set {
			e.FieldStart("additional_info")
			s.AdditionalInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfShopInfoV2 = [20]string{
	0:  "shop_name",
	1:  "shop_name_kana",
	2:  "shop_name_en",
	3:  "support_mail",
	4:  "support_tel",
	5:  "unit_price",
	6:  "deals_long_apply_content",
	7:  "deals_insecure_content",
	8:  "lost_trial",
	9:  "use_of_fincode",
	10: "site_published",
	11: "site_info",
	12: "prepaid_point",
	13: "prepaid_point_info",
	14: "provides",
	15: "content_description",
	16: "product_content_info",
	17: "service_content_info",
	18: "digital_content_info",
	19: "additional_info",
}

// Decode decodes ShopInfoV2 from json.
func (s *ShopInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopInfoV2 to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ShopName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ShopNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ShopNameEn = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "support_mail":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.SupportMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "support_tel":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.SupportTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice.Reset()
				if err := s.UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "deals_long_apply_content":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.DealsLongApplyContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "deals_insecure_content":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.DealsInsecureContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "lost_trial":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.LostTrial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "use_of_fincode":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.UseOfFincode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_of_fincode\"")
			}
		case "site_published":
			if err := func() error {
				s.SitePublished.Reset()
				if err := s.SitePublished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_published\"")
			}
		case "site_info":
			if err := func() error {
				s.SiteInfo.Reset()
				if err := s.SiteInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_info\"")
			}
		case "prepaid_point":
			if err := func() error {
				s.PrepaidPoint.Reset()
				if err := s.PrepaidPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point\"")
			}
		case "prepaid_point_info":
			if err := func() error {
				s.PrepaidPointInfo.Reset()
				if err := s.PrepaidPointInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point_info\"")
			}
		case "provides":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.Provides.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides\"")
			}
		case "content_description":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.ContentDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "product_content_info":
			if err := func() error {
				s.ProductContentInfo.Reset()
				if err := s.ProductContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product_content_info\"")
			}
		case "service_content_info":
			if err := func() error {
				s.ServiceContentInfo.Reset()
				if err := s.ServiceContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_content_info\"")
			}
		case "digital_content_info":
			if err := func() error {
				s.DigitalContentInfo.Reset()
				if err := s.DigitalContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content_info\"")
			}
		case "additional_info":
			if err := func() error {
				s.AdditionalInfo.Reset()
				if err := s.AdditionalInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"additional_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ShopInfoV2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11011111,
		0b11000011,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfShopInfoV2) {
					name = jsonFieldsNameOfShopInfoV2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ShopInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ShopInfoV2AdditionalInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ShopInfoV2AdditionalInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ShopSalesManagerName.Set {
			e.FieldStart("shop_sales_manager_name")
			s.ShopSalesManagerName.Encode(e)
		}
	}
	{
		e.FieldStart("shop_servoce_name")
		s.ShopServoceName.Encode(e)
	}
	{
		e.FieldStart("shop_how_to_pay")
		s.ShopHowToPay.Encode(e)
	}
	{
		if s.ShopChargeDescription.Set {
			e.FieldStart("shop_charge_description")
			s.ShopChargeDescription.Encode(e)
		}
	}
	{
		e.FieldStart("shop_product_delivery_time")
		s.ShopProductDeliveryTime.Encode(e)
	}
	{
		e.FieldStart("shop_return_goods_handing_conditions")
		s.ShopReturnGoodsHandingConditions.Encode(e)
	}
}

var jsonFieldsNameOfShopInfoV2AdditionalInfo = [6]string{
	0: "shop_sales_manager_name",
	1: "shop_servoce_name",
	2: "shop_how_to_pay",
	3: "shop_charge_description",
	4: "shop_product_delivery_time",
	5: "shop_return_goods_handing_conditions",
}

// Decode decodes ShopInfoV2AdditionalInfo from json.
func (s *ShopInfoV2AdditionalInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopInfoV2AdditionalInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_sales_manager_name":
			if err := func() error {
				s.ShopSalesManagerName.Reset()
				if err := s.ShopSalesManagerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_sales_manager_name\"")
			}
		case "shop_servoce_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.ShopServoceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_servoce_name\"")
			}
		case "shop_how_to_pay":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.ShopHowToPay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_how_to_pay\"")
			}
		case "shop_charge_description":
			if err := func() error {
				s.ShopChargeDescription.Reset()
				if err := s.ShopChargeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_charge_description\"")
			}
		case "shop_product_delivery_time":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.ShopProductDeliveryTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_product_delivery_time\"")
			}
		case "shop_return_goods_handing_conditions":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.ShopReturnGoodsHandingConditions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_return_goods_handing_conditions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ShopInfoV2AdditionalInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00110110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfShopInfoV2AdditionalInfo) {
					name = jsonFieldsNameOfShopInfoV2AdditionalInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ShopInfoV2AdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopInfoV2AdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ShopInfoV2PrepaidPointInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ShopInfoV2PrepaidPointInfo) encodeFields(e *jx.Encoder) {
	{
		if s.HowToUse.Set {
			e.FieldStart("how_to_use")
			s.HowToUse.Encode(e)
		}
	}
	{
		if s.AboutExpiration.Set {
			e.FieldStart("about_expiration")
			s.AboutExpiration.Encode(e)
		}
	}
}

var jsonFieldsNameOfShopInfoV2PrepaidPointInfo = [2]string{
	0: "how_to_use",
	1: "about_expiration",
}

// Decode decodes ShopInfoV2PrepaidPointInfo from json.
func (s *ShopInfoV2PrepaidPointInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopInfoV2PrepaidPointInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "how_to_use":
			if err := func() error {
				s.HowToUse.Reset()
				if err := s.HowToUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"how_to_use\"")
			}
		case "about_expiration":
			if err := func() error {
				s.AboutExpiration.Reset()
				if err := s.AboutExpiration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"about_expiration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ShopInfoV2PrepaidPointInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ShopInfoV2PrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopInfoV2PrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ShopInfoV2Provides) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ShopInfoV2Provides) encodeFields(e *jx.Encoder) {
	{
		if s.Product.Set {
			e.FieldStart("product")
			s.Product.Encode(e)
		}
	}
	{
		if s.Service.Set {
			e.FieldStart("service")
			s.Service.Encode(e)
		}
	}
	{
		if s.DigitalContent.Set {
			e.FieldStart("digital_content")
			s.DigitalContent.Encode(e)
		}
	}
}

var jsonFieldsNameOfShopInfoV2Provides = [3]string{
	0: "product",
	1: "service",
	2: "digital_content",
}

// Decode decodes ShopInfoV2Provides from json.
func (s *ShopInfoV2Provides) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopInfoV2Provides to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "product":
			if err := func() error {
				s.Product.Reset()
				if err := s.Product.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product\"")
			}
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service\"")
			}
		case "digital_content":
			if err := func() error {
				s.DigitalContent.Reset()
				if err := s.DigitalContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ShopInfoV2Provides")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ShopInfoV2Provides) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopInfoV2Provides) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ShopInfoV2SiteInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ShopInfoV2SiteInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("url")
		s.URL.Encode(e)
	}
	{
		if s.Credential.Set {
			e.FieldStart("credential")
			s.Credential.Encode(e)
		}
	}
}

var jsonFieldsNameOfShopInfoV2SiteInfo = [2]string{
	0: "url",
	1: "credential",
}

// Decode decodes ShopInfoV2SiteInfo from json.
func (s *ShopInfoV2SiteInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopInfoV2SiteInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "credential":
			if err := func() error {
				s.Credential.Reset()
				if err := s.Credential.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credential\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ShopInfoV2SiteInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfShopInfoV2SiteInfo) {
					name = jsonFieldsNameOfShopInfoV2SiteInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ShopInfoV2SiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopInfoV2SiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ShopInfoV2UseOfFincode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ShopInfoV2UseOfFincode) encodeFields(e *jx.Encoder) {
	{
		if s.UsedOnWeb.Set {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnApp.Set {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
}

var jsonFieldsNameOfShopInfoV2UseOfFincode = [2]string{
	0: "used_on_web",
	1: "used_on_app",
}

// Decode decodes ShopInfoV2UseOfFincode from json.
func (s *ShopInfoV2UseOfFincode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopInfoV2UseOfFincode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb.Reset()
				if err := s.UsedOnWeb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp.Reset()
				if err := s.UsedOnApp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ShopInfoV2UseOfFincode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ShopInfoV2UseOfFincode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopInfoV2UseOfFincode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ShopList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ShopList) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfShopList = [1]string{
	0: "list",
}

// Decode decodes ShopList from json.
func (s *ShopList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]Shop, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Shop
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ShopList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ShopList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopMailAddress as json.
func (s ShopMailAddress) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopMailAddress from json.
func (s *ShopMailAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopMailAddress to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopMailAddress(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopMailAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopMailAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopMailTemplateID as json.
func (s ShopMailTemplateID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopMailTemplateID from json.
func (s *ShopMailTemplateID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopMailTemplateID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopMailTemplateID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopMailTemplateID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopMailTemplateID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopName as json.
func (s ShopName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopName from json.
func (s *ShopName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopNameEn as json.
func (s ShopNameEn) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopNameEn from json.
func (s *ShopNameEn) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopNameEn to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopNameEn(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopNameEn) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopNameEn) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopNameKana as json.
func (s ShopNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopNameKana from json.
func (s *ShopNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopPaymentMethod as json.
func (s ShopPaymentMethod) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ShopPaymentMethod from json.
func (s *ShopPaymentMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopPaymentMethod to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ShopPaymentMethod(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopPropertiesID as json.
func (s ShopPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopPropertiesID from json.
func (s *ShopPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopServiceName as json.
func (s ShopServiceName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes ShopServiceName from json.
func (s *ShopServiceName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopServiceName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = ShopServiceName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopServiceName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopServiceName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopSharedCustomerFlag as json.
func (s ShopSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ShopSharedCustomerFlag from json.
func (s *ShopSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ShopSharedCustomerFlag(v) {
	case ShopSharedCustomerFlag0:
		*s = ShopSharedCustomerFlag0
	case ShopSharedCustomerFlag1:
		*s = ShopSharedCustomerFlag1
	default:
		*s = ShopSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopType as json.
func (s ShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ShopType from json.
func (s *ShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ShopType(v) {
	case ShopTypePlatform:
		*s = ShopTypePlatform
	case ShopTypeTenant:
		*s = ShopTypeTenant
	default:
		*s = ShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Signature as json.
func (s Signature) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Signature from json.
func (s *Signature) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Signature to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Signature(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Signature) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Signature) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1FirstName as json.
func (s Staff1FirstName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff1FirstName from json.
func (s *Staff1FirstName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff1FirstName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff1FirstName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff1FirstName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff1FirstName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1FirstNameKana as json.
func (s Staff1FirstNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff1FirstNameKana from json.
func (s *Staff1FirstNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff1FirstNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff1FirstNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff1FirstNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff1FirstNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1LastName as json.
func (s Staff1LastName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff1LastName from json.
func (s *Staff1LastName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff1LastName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff1LastName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff1LastName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff1LastName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1LastNameKana as json.
func (s Staff1LastNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff1LastNameKana from json.
func (s *Staff1LastNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff1LastNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff1LastNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff1LastNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff1LastNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1Mail as json.
func (s Staff1Mail) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff1Mail from json.
func (s *Staff1Mail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff1Mail to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff1Mail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff1Mail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff1Mail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff1Tel as json.
func (s Staff1Tel) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff1Tel from json.
func (s *Staff1Tel) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff1Tel to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff1Tel(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff1Tel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff1Tel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2FirstName as json.
func (s Staff2FirstName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff2FirstName from json.
func (s *Staff2FirstName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff2FirstName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff2FirstName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff2FirstName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff2FirstName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2FirstNameKana as json.
func (s Staff2FirstNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff2FirstNameKana from json.
func (s *Staff2FirstNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff2FirstNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff2FirstNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff2FirstNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff2FirstNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2LastName as json.
func (s Staff2LastName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff2LastName from json.
func (s *Staff2LastName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff2LastName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff2LastName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff2LastName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff2LastName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2LastNameKana as json.
func (s Staff2LastNameKana) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff2LastNameKana from json.
func (s *Staff2LastNameKana) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff2LastNameKana to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff2LastNameKana(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff2LastNameKana) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff2LastNameKana) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2Mail as json.
func (s Staff2Mail) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff2Mail from json.
func (s *Staff2Mail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff2Mail to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff2Mail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff2Mail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff2Mail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Staff2Tel as json.
func (s Staff2Tel) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Staff2Tel from json.
func (s *Staff2Tel) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Staff2Tel to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Staff2Tel(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Staff2Tel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Staff2Tel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StartDate as json.
func (s StartDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes StartDate from json.
func (s *StartDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StartDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = StartDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s StartDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StartDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes StopDate as json.
func (s StopDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes StopDate from json.
func (s *StopDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StopDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = StopDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s StopDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StopDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Subscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Subscription) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.InitialTotalAmount.Set {
			e.FieldStart("initial_total_amount")
			s.InitialTotalAmount.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscription = [27]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "plan_id",
	4:  "plan_name",
	5:  "customer_id",
	6:  "card_id",
	7:  "payment_method_id",
	8:  "amount",
	9:  "tax",
	10: "total_amount",
	11: "initial_amount",
	12: "initial_tax",
	13: "initial_total_amount",
	14: "status",
	15: "start_date",
	16: "next_charge_date",
	17: "stop_date",
	18: "end_month_flag",
	19: "send_url",
	20: "error_code",
	21: "client_field_1",
	22: "client_field_2",
	23: "client_field_3",
	24: "remarks",
	25: "created",
	26: "updated",
}

// Decode decodes Subscription from json.
func (s *Subscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Subscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "initial_total_amount":
			if err := func() error {
				s.InitialTotalAmount.Reset()
				if err := s.InitialTotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_total_amount\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Subscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Subscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Subscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("plan_id")
		s.PlanID.Encode(e)
	}
	{
		e.FieldStart("customer_id")
		s.CustomerID.Encode(e)
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		e.FieldStart("start_date")
		s.StartDate.Encode(e)
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionCreatingRequest = [16]string{
	0:  "id",
	1:  "pay_type",
	2:  "plan_id",
	3:  "customer_id",
	4:  "card_id",
	5:  "payment_method_id",
	6:  "start_date",
	7:  "stop_date",
	8:  "end_month_flag",
	9:  "initial_amount",
	10: "initial_tax",
	11: "remarks",
	12: "client_field_1",
	13: "client_field_2",
	14: "client_field_3",
	15: "send_url",
}

// Decode decodes SubscriptionCreatingRequest from json.
func (s *SubscriptionCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "customer_id":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "start_date":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b01001110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSubscriptionCreatingRequest) {
					name = jsonFieldsNameOfSubscriptionCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionEndMonthFlag as json.
func (s SubscriptionEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionEndMonthFlag from json.
func (s *SubscriptionEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionEndMonthFlag(v) {
	case SubscriptionEndMonthFlag0:
		*s = SubscriptionEndMonthFlag0
	case SubscriptionEndMonthFlag1:
		*s = SubscriptionEndMonthFlag1
	default:
		*s = SubscriptionEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionList) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSubscriptionList = [1]string{
	0: "list",
}

// Decode decodes SubscriptionList from json.
func (s *SubscriptionList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]Subscription, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Subscription
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionPayType as json.
func (s SubscriptionPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionPayType from json.
func (s *SubscriptionPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionPayType(v) {
	case SubscriptionPayTypeCard:
		*s = SubscriptionPayTypeCard
	case SubscriptionPayTypeDirectdebit:
		*s = SubscriptionPayTypeDirectdebit
	default:
		*s = SubscriptionPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionPropertiesID as json.
func (s SubscriptionPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes SubscriptionPropertiesID from json.
func (s *SubscriptionPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SubscriptionPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionResult) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionResult = [23]string{
	0:  "id",
	1:  "pay_type",
	2:  "status",
	3:  "process_date",
	4:  "plan_id",
	5:  "amount",
	6:  "tax",
	7:  "total_amount",
	8:  "customer_id",
	9:  "payment_method_id",
	10: "card_id",
	11: "card_no",
	12: "shop_id",
	13: "access_id",
	14: "send_url",
	15: "client_field_1",
	16: "client_field_2",
	17: "client_field_3",
	18: "interval_pattern",
	19: "interval_count",
	20: "remarks",
	21: "error_code",
	22: "created",
}

// Decode decodes SubscriptionResult from json.
func (s *SubscriptionResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResult to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionResult")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionResultListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionResultListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSubscriptionResultListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes SubscriptionResultListRetrievingResponse from json.
func (s *SubscriptionResultListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResultListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]SubscriptionResult, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SubscriptionResult
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionResultListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionResultListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResultListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultStatus as json.
func (s SubscriptionResultStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionResultStatus from json.
func (s *SubscriptionResultStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResultStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionResultStatus(v) {
	case SubscriptionResultStatusCHECKED:
		*s = SubscriptionResultStatusCHECKED
	case SubscriptionResultStatusSUCCEEDED:
		*s = SubscriptionResultStatusSUCCEEDED
	case SubscriptionResultStatusFAILED:
		*s = SubscriptionResultStatusFAILED
	default:
		*s = SubscriptionResultStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionResultStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResultStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionStatus as json.
func (s SubscriptionStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionStatus from json.
func (s *SubscriptionStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionStatus(v) {
	case SubscriptionStatusACTIVE:
		*s = SubscriptionStatusACTIVE
	case SubscriptionStatusRUNNING:
		*s = SubscriptionStatusRUNNING
	case SubscriptionStatusCANCELED:
		*s = SubscriptionStatusCANCELED
	case SubscriptionStatusINCOMPLETE:
		*s = SubscriptionStatusINCOMPLETE
	default:
		*s = SubscriptionStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionUpdatingRequest = [11]string{
	0:  "pay_type",
	1:  "plan_id",
	2:  "start_date",
	3:  "stop_date",
	4:  "end_month_flag",
	5:  "initial_amount",
	6:  "initial_tax",
	7:  "remarks",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
}

// Decode decodes SubscriptionUpdatingRequest from json.
func (s *SubscriptionUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionUpdatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSubscriptionUpdatingRequest) {
					name = jsonFieldsNameOfSubscriptionUpdatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SuccessURL as json.
func (s SuccessURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes SuccessURL from json.
func (s *SuccessURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SuccessURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SuccessURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SuccessURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SuccessURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SupportMail as json.
func (s SupportMail) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes SupportMail from json.
func (s *SupportMail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SupportMail to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SupportMail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SupportMail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SupportMail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SupportTel as json.
func (s SupportTel) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes SupportTel from json.
func (s *SupportTel) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SupportTel to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = SupportTel(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SupportTel) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SupportTel) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TargetDate as json.
func (s TargetDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes TargetDate from json.
func (s *TargetDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TargetDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TargetDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TargetDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TargetDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tax as json.
func (s Tax) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tax from json.
func (s *Tax) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tax to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tax(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TaxAmount as json.
func (s TaxAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes TaxAmount from json.
func (s *TaxAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TaxAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TaxAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TaxAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TaxAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TaxableFeeAmount as json.
func (s TaxableFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes TaxableFeeAmount from json.
func (s *TaxableFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TaxableFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TaxableFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TaxableFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TaxableFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdTenantName as json.
func (s TdTenantName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes TdTenantName from json.
func (s *TdTenantName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TdTenantName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TdTenantName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TdTenantName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TdTenantName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2AddrMatch as json.
func (s Tds2AddrMatch) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2AddrMatch from json.
func (s *Tds2AddrMatch) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2AddrMatch to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2AddrMatch(v) {
	case Tds2AddrMatchY:
		*s = Tds2AddrMatchY
	case Tds2AddrMatchN:
		*s = Tds2AddrMatchN
	default:
		*s = Tds2AddrMatch(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrCity as json.
func (s Tds2BillAddrCity) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2BillAddrCity from json.
func (s *Tds2BillAddrCity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2BillAddrCity to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2BillAddrCity(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2BillAddrCity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2BillAddrCity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrCountry as json.
func (s Tds2BillAddrCountry) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2BillAddrCountry from json.
func (s *Tds2BillAddrCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2BillAddrCountry to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2BillAddrCountry(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2BillAddrCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2BillAddrCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrLine1 as json.
func (s Tds2BillAddrLine1) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2BillAddrLine1 from json.
func (s *Tds2BillAddrLine1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2BillAddrLine1 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2BillAddrLine1(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2BillAddrLine1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2BillAddrLine1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrLine2 as json.
func (s Tds2BillAddrLine2) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2BillAddrLine2 from json.
func (s *Tds2BillAddrLine2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2BillAddrLine2 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2BillAddrLine2(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2BillAddrLine2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2BillAddrLine2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrLine3 as json.
func (s Tds2BillAddrLine3) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2BillAddrLine3 from json.
func (s *Tds2BillAddrLine3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2BillAddrLine3 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2BillAddrLine3(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2BillAddrLine3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2BillAddrLine3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrPostCode as json.
func (s Tds2BillAddrPostCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2BillAddrPostCode from json.
func (s *Tds2BillAddrPostCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2BillAddrPostCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2BillAddrPostCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2BillAddrPostCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2BillAddrPostCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2BillAddrState as json.
func (s Tds2BillAddrState) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2BillAddrState from json.
func (s *Tds2BillAddrState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2BillAddrState to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2BillAddrState(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2BillAddrState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2BillAddrState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ChAccChange as json.
func (s Tds2ChAccChange) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ChAccChange from json.
func (s *Tds2ChAccChange) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ChAccChange to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ChAccChange(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ChAccChange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ChAccChange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ChAccDate as json.
func (s Tds2ChAccDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ChAccDate from json.
func (s *Tds2ChAccDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ChAccDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ChAccDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ChAccDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ChAccDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ChAccPwChange as json.
func (s Tds2ChAccPwChange) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ChAccPwChange from json.
func (s *Tds2ChAccPwChange) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ChAccPwChange to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ChAccPwChange(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ChAccPwChange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ChAccPwChange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2DeliveryEmailAddress as json.
func (s Tds2DeliveryEmailAddress) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2DeliveryEmailAddress from json.
func (s *Tds2DeliveryEmailAddress) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2DeliveryEmailAddress to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2DeliveryEmailAddress(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2DeliveryEmailAddress) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2DeliveryEmailAddress) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2DeliveryTimeframe as json.
func (s Tds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2DeliveryTimeframe from json.
func (s *Tds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2DeliveryTimeframe to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2DeliveryTimeframe(v) {
	case Tds2DeliveryTimeframe01:
		*s = Tds2DeliveryTimeframe01
	case Tds2DeliveryTimeframe02:
		*s = Tds2DeliveryTimeframe02
	case Tds2DeliveryTimeframe03:
		*s = Tds2DeliveryTimeframe03
	case Tds2DeliveryTimeframe04:
		*s = Tds2DeliveryTimeframe04
	default:
		*s = Tds2DeliveryTimeframe(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2GiftCardAmount as json.
func (s Tds2GiftCardAmount) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2GiftCardAmount from json.
func (s *Tds2GiftCardAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2GiftCardAmount to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2GiftCardAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2GiftCardAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2GiftCardAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2GiftCardCount as json.
func (s Tds2GiftCardCount) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2GiftCardCount from json.
func (s *Tds2GiftCardCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2GiftCardCount to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2GiftCardCount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2GiftCardCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2GiftCardCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2GiftCardCurr as json.
func (s Tds2GiftCardCurr) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2GiftCardCurr from json.
func (s *Tds2GiftCardCurr) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2GiftCardCurr to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2GiftCardCurr(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2GiftCardCurr) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2GiftCardCurr) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2HomePhoneCc as json.
func (s Tds2HomePhoneCc) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2HomePhoneCc from json.
func (s *Tds2HomePhoneCc) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2HomePhoneCc to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2HomePhoneCc(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2HomePhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2HomePhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2HomePhoneNo as json.
func (s Tds2HomePhoneNo) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2HomePhoneNo from json.
func (s *Tds2HomePhoneNo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2HomePhoneNo to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2HomePhoneNo(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2HomePhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2HomePhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2MobilePhoneCc as json.
func (s Tds2MobilePhoneCc) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2MobilePhoneCc from json.
func (s *Tds2MobilePhoneCc) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2MobilePhoneCc to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2MobilePhoneCc(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2MobilePhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2MobilePhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2MobilePhoneNo as json.
func (s Tds2MobilePhoneNo) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2MobilePhoneNo from json.
func (s *Tds2MobilePhoneNo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2MobilePhoneNo to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2MobilePhoneNo(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2MobilePhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2MobilePhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2NbPurchaseAccount as json.
func (s Tds2NbPurchaseAccount) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2NbPurchaseAccount from json.
func (s *Tds2NbPurchaseAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2NbPurchaseAccount to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2NbPurchaseAccount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2NbPurchaseAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2NbPurchaseAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2PaymentAccAge as json.
func (s Tds2PaymentAccAge) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2PaymentAccAge from json.
func (s *Tds2PaymentAccAge) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2PaymentAccAge to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2PaymentAccAge(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2PaymentAccAge) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2PaymentAccAge) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2PreOrderDate as json.
func (s Tds2PreOrderDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2PreOrderDate from json.
func (s *Tds2PreOrderDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2PreOrderDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2PreOrderDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2PreOrderDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2PreOrderDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2PreOrderPurchaseInd as json.
func (s Tds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2PreOrderPurchaseInd from json.
func (s *Tds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2PreOrderPurchaseInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2PreOrderPurchaseInd(v) {
	case Tds2PreOrderPurchaseInd01:
		*s = Tds2PreOrderPurchaseInd01
	case Tds2PreOrderPurchaseInd02:
		*s = Tds2PreOrderPurchaseInd02
	default:
		*s = Tds2PreOrderPurchaseInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ProvisionAttemptsDay as json.
func (s Tds2ProvisionAttemptsDay) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ProvisionAttemptsDay from json.
func (s *Tds2ProvisionAttemptsDay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ProvisionAttemptsDay to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ProvisionAttemptsDay(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ProvisionAttemptsDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ProvisionAttemptsDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2RecurringExpiry as json.
func (s Tds2RecurringExpiry) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2RecurringExpiry from json.
func (s *Tds2RecurringExpiry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2RecurringExpiry to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2RecurringExpiry(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2RecurringExpiry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2RecurringExpiry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2RecurringFrequency as json.
func (s Tds2RecurringFrequency) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2RecurringFrequency from json.
func (s *Tds2RecurringFrequency) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2RecurringFrequency to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2RecurringFrequency(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2RecurringFrequency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2RecurringFrequency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ReorderItemsInd as json.
func (s Tds2ReorderItemsInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2ReorderItemsInd from json.
func (s *Tds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ReorderItemsInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2ReorderItemsInd(v) {
	case Tds2ReorderItemsInd01:
		*s = Tds2ReorderItemsInd01
	case Tds2ReorderItemsInd02:
		*s = Tds2ReorderItemsInd02
	default:
		*s = Tds2ReorderItemsInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2RetURL as json.
func (s Tds2RetURL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2RetURL from json.
func (s *Tds2RetURL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2RetURL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2RetURL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2RetURL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2RetURL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrCity as json.
func (s Tds2ShipAddrCity) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddrCity from json.
func (s *Tds2ShipAddrCity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddrCity to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddrCity(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddrCity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddrCity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrCountry as json.
func (s Tds2ShipAddrCountry) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddrCountry from json.
func (s *Tds2ShipAddrCountry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddrCountry to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddrCountry(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddrCountry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddrCountry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrLine1 as json.
func (s Tds2ShipAddrLine1) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddrLine1 from json.
func (s *Tds2ShipAddrLine1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddrLine1 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddrLine1(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddrLine1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddrLine1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrLine2 as json.
func (s Tds2ShipAddrLine2) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddrLine2 from json.
func (s *Tds2ShipAddrLine2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddrLine2 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddrLine2(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddrLine2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddrLine2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrLine3 as json.
func (s Tds2ShipAddrLine3) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddrLine3 from json.
func (s *Tds2ShipAddrLine3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddrLine3 to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddrLine3(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddrLine3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddrLine3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrPostCode as json.
func (s Tds2ShipAddrPostCode) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddrPostCode from json.
func (s *Tds2ShipAddrPostCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddrPostCode to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddrPostCode(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddrPostCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddrPostCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddrState as json.
func (s Tds2ShipAddrState) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddrState from json.
func (s *Tds2ShipAddrState) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddrState to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddrState(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddrState) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddrState) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipAddressUsage as json.
func (s Tds2ShipAddressUsage) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ShipAddressUsage from json.
func (s *Tds2ShipAddressUsage) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipAddressUsage to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ShipAddressUsage(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipAddressUsage) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipAddressUsage) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipInd as json.
func (s Tds2ShipInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2ShipInd from json.
func (s *Tds2ShipInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2ShipInd(v) {
	case Tds2ShipInd01:
		*s = Tds2ShipInd01
	case Tds2ShipInd02:
		*s = Tds2ShipInd02
	case Tds2ShipInd03:
		*s = Tds2ShipInd03
	case Tds2ShipInd04:
		*s = Tds2ShipInd04
	case Tds2ShipInd05:
		*s = Tds2ShipInd05
	case Tds2ShipInd06:
		*s = Tds2ShipInd06
	case Tds2ShipInd07:
		*s = Tds2ShipInd07
	default:
		*s = Tds2ShipInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ShipNameInd as json.
func (s Tds2ShipNameInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2ShipNameInd from json.
func (s *Tds2ShipNameInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ShipNameInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2ShipNameInd(v) {
	case Tds2ShipNameInd01:
		*s = Tds2ShipNameInd01
	case Tds2ShipNameInd02:
		*s = Tds2ShipNameInd02
	default:
		*s = Tds2ShipNameInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Status as json.
func (s Tds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2Status from json.
func (s *Tds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2Status(v) {
	case Tds2StatusAUTHENTICATING:
		*s = Tds2StatusAUTHENTICATING
	case Tds2StatusCHALLENGE:
		*s = Tds2StatusCHALLENGE
	case Tds2StatusACTIVATED:
		*s = Tds2StatusACTIVATED
	case Tds2StatusAUTHENTICATED:
		*s = Tds2StatusAUTHENTICATED
	default:
		*s = Tds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2SuspiciousAccActivity as json.
func (s Tds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2SuspiciousAccActivity from json.
func (s *Tds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2SuspiciousAccActivity to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2SuspiciousAccActivity(v) {
	case Tds2SuspiciousAccActivity01:
		*s = Tds2SuspiciousAccActivity01
	case Tds2SuspiciousAccActivity02:
		*s = Tds2SuspiciousAccActivity02
	default:
		*s = Tds2SuspiciousAccActivity(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ThreeDsReqAuthData as json.
func (s Tds2ThreeDsReqAuthData) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2ThreeDsReqAuthData from json.
func (s *Tds2ThreeDsReqAuthData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ThreeDsReqAuthData to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2ThreeDsReqAuthData(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ThreeDsReqAuthData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ThreeDsReqAuthData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2ThreeDsReqAuthMethod as json.
func (s Tds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2ThreeDsReqAuthMethod from json.
func (s *Tds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2ThreeDsReqAuthMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2ThreeDsReqAuthMethod(v) {
	case Tds2ThreeDsReqAuthMethod01:
		*s = Tds2ThreeDsReqAuthMethod01
	case Tds2ThreeDsReqAuthMethod02:
		*s = Tds2ThreeDsReqAuthMethod02
	case Tds2ThreeDsReqAuthMethod03:
		*s = Tds2ThreeDsReqAuthMethod03
	case Tds2ThreeDsReqAuthMethod04:
		*s = Tds2ThreeDsReqAuthMethod04
	case Tds2ThreeDsReqAuthMethod05:
		*s = Tds2ThreeDsReqAuthMethod05
	case Tds2ThreeDsReqAuthMethod06:
		*s = Tds2ThreeDsReqAuthMethod06
	default:
		*s = Tds2ThreeDsReqAuthMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2TxnActivityDay as json.
func (s Tds2TxnActivityDay) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2TxnActivityDay from json.
func (s *Tds2TxnActivityDay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2TxnActivityDay to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2TxnActivityDay(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2TxnActivityDay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2TxnActivityDay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2TxnActivityYear as json.
func (s Tds2TxnActivityYear) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2TxnActivityYear from json.
func (s *Tds2TxnActivityYear) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2TxnActivityYear to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2TxnActivityYear(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2TxnActivityYear) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2TxnActivityYear) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Type as json.
func (s Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2Type from json.
func (s *Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2Type(v) {
	case Tds2Type2:
		*s = Tds2Type2
	case Tds2Type3:
		*s = Tds2Type3
	default:
		*s = Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2WorkPhoneCc as json.
func (s Tds2WorkPhoneCc) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2WorkPhoneCc from json.
func (s *Tds2WorkPhoneCc) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2WorkPhoneCc to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2WorkPhoneCc(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2WorkPhoneCc) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2WorkPhoneCc) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2WorkPhoneNo as json.
func (s Tds2WorkPhoneNo) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Tds2WorkPhoneNo from json.
func (s *Tds2WorkPhoneNo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2WorkPhoneNo to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Tds2WorkPhoneNo(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2WorkPhoneNo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2WorkPhoneNo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdsType as json.
func (s TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TdsType from json.
func (s *TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TdsType(v) {
	case TdsType0:
		*s = TdsType0
	case TdsType2:
		*s = TdsType2
	default:
		*s = TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TenantShopUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TenantShopUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ExaminationMasterID.Set {
			e.FieldStart("examination_master_id")
			s.ExaminationMasterID.Encode(e)
		}
	}
	{
		if s.PlatformRate.Set {
			e.FieldStart("platform_rate")
			s.PlatformRate.Encode(e)
		}
	}
	{
		if s.FixedFee.Set {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee.Set {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
	{
		if s.PaypayContentCategoryType.Set {
			e.FieldStart("paypay_content_category_type")
			s.PaypayContentCategoryType.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfTenantShopUpdatingRequest = [6]string{
	0: "examination_master_id",
	1: "platform_rate",
	2: "fixed_fee",
	3: "web_registration_fee",
	4: "paypay_content_category_type",
	5: "api_key_display_flag",
}

// Decode decodes TenantShopUpdatingRequest from json.
func (s *TenantShopUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_master_id":
			if err := func() error {
				s.ExaminationMasterID.Reset()
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "platform_rate":
			if err := func() error {
				s.PlatformRate.Reset()
				if err := s.PlatformRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee.Reset()
				if err := s.FixedFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee.Reset()
				if err := s.WebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		case "paypay_content_category_type":
			if err := func() error {
				s.PaypayContentCategoryType.Reset()
				if err := s.PaypayContentCategoryType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_content_category_type\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TenantShopUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TenantShopUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantURLID as json.
func (s TenantURLID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes TenantURLID from json.
func (s *TenantURLID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantURLID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TenantURLID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantURLID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantURLID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ThanksMailSendFlag as json.
func (s ThanksMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ThanksMailSendFlag from json.
func (s *ThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ThanksMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ThanksMailSendFlag(v) {
	case ThanksMailSendFlag0:
		*s = ThanksMailSendFlag0
	case ThanksMailSendFlag1:
		*s = ThanksMailSendFlag1
	default:
		*s = ThanksMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Token as json.
func (s Token) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Token from json.
func (s *Token) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Token to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Token(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Token) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Token) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TotalAmount as json.
func (s TotalAmount) Encode(e *jx.Encoder) {
	unwrapped := int64(s)

	e.Int64(unwrapped)
}

// Decode decodes TotalAmount from json.
func (s *TotalAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TotalAmount to nil")
	}
	var unwrapped int64
	if err := func() error {
		v, err := d.Int64()
		unwrapped = int64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TotalAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TotalAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TotalAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TransactionID as json.
func (s TransactionID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes TransactionID from json.
func (s *TransactionID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TransactionID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TransactionID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TransactionID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TransactionID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TransferReturnDate as json.
func (s TransferReturnDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes TransferReturnDate from json.
func (s *TransferReturnDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TransferReturnDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TransferReturnDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TransferReturnDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TransferReturnDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes URL as json.
func (s URL) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes URL from json.
func (s *URL) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode URL to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = URL(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s URL) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *URL) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UnitPrice as json.
func (s UnitPrice) Encode(e *jx.Encoder) {
	unwrapped := float64(s)

	e.Float64(unwrapped)
}

// Decode decodes UnitPrice from json.
func (s *UnitPrice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UnitPrice to nil")
	}
	var unwrapped float64
	if err := func() error {
		v, err := d.Float64()
		unwrapped = float64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UnitPrice(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UnitPrice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UnitPrice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateBankAccount as json.
func (s UpdateBankAccount) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes UpdateBankAccount from json.
func (s *UpdateBankAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateBankAccount to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UpdateBankAccount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdateBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateContractDetail as json.
func (s UpdateContractDetail) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes UpdateContractDetail from json.
func (s *UpdateContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateContractDetail to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UpdateContractDetail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdateContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateDepositCycle as json.
func (s UpdateDepositCycle) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes UpdateDepositCycle from json.
func (s *UpdateDepositCycle) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateDepositCycle to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UpdateDepositCycle(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdateDepositCycle) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateDepositCycle) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateDescription as json.
func (s UpdateDescription) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes UpdateDescription from json.
func (s *UpdateDescription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateDescription to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UpdateDescription(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdateDescription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateDescription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UpdateShop as json.
func (s UpdateShop) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes UpdateShop from json.
func (s *UpdateShop) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UpdateShop to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UpdateShop(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UpdateShop) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UpdateShop) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Updated as json.
func (s Updated) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes Updated from json.
func (s *Updated) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Updated to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Updated(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Updated) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Updated) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UsedOnApp as json.
func (s UsedOnApp) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes UsedOnApp from json.
func (s *UsedOnApp) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UsedOnApp to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UsedOnApp(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UsedOnApp) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UsedOnApp) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UsedOnWeb as json.
func (s UsedOnWeb) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes UsedOnWeb from json.
func (s *UsedOnWeb) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UsedOnWeb to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UsedOnWeb(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UsedOnWeb) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UsedOnWeb) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *User) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *User) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DefaultShopID.Set {
			e.FieldStart("default_shop_id")
			s.DefaultShopID.Encode(e)
		}
	}
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.TwoFactorAuthStatus.Set {
			e.FieldStart("two_factor_auth_status")
			s.TwoFactorAuthStatus.Encode(e)
		}
	}
	{
		if s.MailAuthStatus.Set {
			e.FieldStart("mail_auth_status")
			s.MailAuthStatus.Encode(e)
		}
	}
	{
		if s.PasswordLockStatus.Set {
			e.FieldStart("password_lock_status")
			s.PasswordLockStatus.Encode(e)
		}
	}
	{
		if s.LastLoginDate.Set {
			e.FieldStart("last_login_date")
			s.LastLoginDate.Encode(e)
		}
	}
	{
		if s.LoginFailureDate.Set {
			e.FieldStart("login_failure_date")
			s.LoginFailureDate.Encode(e)
		}
	}
	{
		if s.LoginFailureTimes.Set {
			e.FieldStart("login_failure_times")
			s.LoginFailureTimes.Encode(e)
		}
	}
	{
		if s.PasswordExpire.Set {
			e.FieldStart("password_expire")
			s.PasswordExpire.Encode(e)
		}
	}
	{
		if s.AccountStatus.Set {
			e.FieldStart("account_status")
			s.AccountStatus.Encode(e)
		}
	}
	{
		if s.InviteStatus.Set {
			e.FieldStart("invite_status")
			s.InviteStatus.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfUser = [17]string{
	0:  "id",
	1:  "default_shop_id",
	2:  "role_id",
	3:  "name",
	4:  "email",
	5:  "type",
	6:  "two_factor_auth_status",
	7:  "mail_auth_status",
	8:  "password_lock_status",
	9:  "last_login_date",
	10: "login_failure_date",
	11: "login_failure_times",
	12: "password_expire",
	13: "account_status",
	14: "invite_status",
	15: "created",
	16: "updated",
}

// Decode decodes User from json.
func (s *User) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode User to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "default_shop_id":
			if err := func() error {
				s.DefaultShopID.Reset()
				if err := s.DefaultShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_shop_id\"")
			}
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "two_factor_auth_status":
			if err := func() error {
				s.TwoFactorAuthStatus.Reset()
				if err := s.TwoFactorAuthStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"two_factor_auth_status\"")
			}
		case "mail_auth_status":
			if err := func() error {
				s.MailAuthStatus.Reset()
				if err := s.MailAuthStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_auth_status\"")
			}
		case "password_lock_status":
			if err := func() error {
				s.PasswordLockStatus.Reset()
				if err := s.PasswordLockStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password_lock_status\"")
			}
		case "last_login_date":
			if err := func() error {
				s.LastLoginDate.Reset()
				if err := s.LastLoginDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_login_date\"")
			}
		case "login_failure_date":
			if err := func() error {
				s.LoginFailureDate.Reset()
				if err := s.LoginFailureDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"login_failure_date\"")
			}
		case "login_failure_times":
			if err := func() error {
				s.LoginFailureTimes.Reset()
				if err := s.LoginFailureTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"login_failure_times\"")
			}
		case "password_expire":
			if err := func() error {
				s.PasswordExpire.Reset()
				if err := s.PasswordExpire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password_expire\"")
			}
		case "account_status":
			if err := func() error {
				s.AccountStatus.Reset()
				if err := s.AccountStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_status\"")
			}
		case "invite_status":
			if err := func() error {
				s.InviteStatus.Reset()
				if err := s.InviteStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invite_status\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode User")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *User) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *User) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserAccountStatus as json.
func (s UserAccountStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes UserAccountStatus from json.
func (s *UserAccountStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserAccountStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch UserAccountStatus(v) {
	case UserAccountStatus00:
		*s = UserAccountStatus00
	case UserAccountStatus01:
		*s = UserAccountStatus01
	default:
		*s = UserAccountStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserAccountStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserAccountStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserAgent as json.
func (s UserAgent) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes UserAgent from json.
func (s *UserAgent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserAgent to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = UserAgent(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserAgent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserAgent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserInviteStatus as json.
func (s UserInviteStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes UserInviteStatus from json.
func (s *UserInviteStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserInviteStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch UserInviteStatus(v) {
	case UserInviteStatus01:
		*s = UserInviteStatus01
	case UserInviteStatus02:
		*s = UserInviteStatus02
	default:
		*s = UserInviteStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserInviteStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserInviteStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserMailAuthStatus as json.
func (s UserMailAuthStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes UserMailAuthStatus from json.
func (s *UserMailAuthStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserMailAuthStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch UserMailAuthStatus(v) {
	case UserMailAuthStatus00:
		*s = UserMailAuthStatus00
	case UserMailAuthStatus01:
		*s = UserMailAuthStatus01
	default:
		*s = UserMailAuthStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserMailAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserMailAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserPasswordLockStatus as json.
func (s UserPasswordLockStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes UserPasswordLockStatus from json.
func (s *UserPasswordLockStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserPasswordLockStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch UserPasswordLockStatus(v) {
	case UserPasswordLockStatus00:
		*s = UserPasswordLockStatus00
	case UserPasswordLockStatus01:
		*s = UserPasswordLockStatus01
	default:
		*s = UserPasswordLockStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserPasswordLockStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserPasswordLockStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserTwoFactorAuthStatus as json.
func (s UserTwoFactorAuthStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes UserTwoFactorAuthStatus from json.
func (s *UserTwoFactorAuthStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserTwoFactorAuthStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch UserTwoFactorAuthStatus(v) {
	case UserTwoFactorAuthStatus00:
		*s = UserTwoFactorAuthStatus00
	case UserTwoFactorAuthStatus01:
		*s = UserTwoFactorAuthStatus01
	default:
		*s = UserTwoFactorAuthStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserTwoFactorAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserTwoFactorAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes UserType as json.
func (s UserType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes UserType from json.
func (s *UserType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UserType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch UserType(v) {
	case UserType01:
		*s = UserType01
	default:
		*s = UserType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s UserType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UserType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Verified as json.
func (s Verified) Encode(e *jx.Encoder) {
	unwrapped := bool(s)

	e.Bool(unwrapped)
}

// Decode decodes Verified from json.
func (s *Verified) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Verified to nil")
	}
	var unwrapped bool
	if err := func() error {
		v, err := d.Bool()
		unwrapped = bool(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = Verified(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Verified) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Verified) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebRegistrationFee as json.
func (s WebRegistrationFee) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes WebRegistrationFee from json.
func (s *WebRegistrationFee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebRegistrationFee to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebRegistrationFee(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebRegistrationFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebRegistrationFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebRegistrationFeeAmount as json.
func (s WebRegistrationFeeAmount) Encode(e *jx.Encoder) {
	unwrapped := int(s)

	e.Int(unwrapped)
}

// Decode decodes WebRegistrationFeeAmount from json.
func (s *WebRegistrationFeeAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebRegistrationFeeAmount to nil")
	}
	var unwrapped int
	if err := func() error {
		v, err := d.Int()
		unwrapped = int(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebRegistrationFeeAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebRegistrationFeeAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebRegistrationFeeAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.CardNoDisplay.Set {
			e.FieldStart("card_no_display")
			s.CardNoDisplay.Encode(e)
		}
	}
	{
		if s.ExpireDisplay.Set {
			e.FieldStart("expire_display")
			s.ExpireDisplay.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ProcessType.Set {
			e.FieldStart("process_type")
			s.ProcessType.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventCard = [12]string{
	0:  "shop_id",
	1:  "customer_id",
	2:  "customer_group_id",
	3:  "card_id",
	4:  "default_flag",
	5:  "card_no_display",
	6:  "expire_display",
	7:  "process_date",
	8:  "process_type",
	9:  "pay_type",
	10: "forward",
	11: "event",
}

// Decode decodes WebhookEventCard from json.
func (s *WebhookEventCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "card_no_display":
			if err := func() error {
				s.CardNoDisplay.Reset()
				if err := s.CardNoDisplay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_display\"")
			}
		case "expire_display":
			if err := func() error {
				s.ExpireDisplay.Reset()
				if err := s.ExpireDisplay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire_display\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "process_type":
			if err := func() error {
				s.ProcessType.Reset()
				if err := s.ProcessType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_type\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardPayType as json.
func (s WebhookEventCardPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCardPayType from json.
func (s *WebhookEventCardPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCardPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCardPayType(v) {
	case WebhookEventCardPayTypeCard:
		*s = WebhookEventCardPayTypeCard
	default:
		*s = WebhookEventCardPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardProcessType as json.
func (s WebhookEventCardProcessType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCardProcessType from json.
func (s *WebhookEventCardProcessType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCardProcessType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCardProcessType(v) {
	case WebhookEventCardProcessTypeI:
		*s = WebhookEventCardProcessTypeI
	case WebhookEventCardProcessTypeU:
		*s = WebhookEventCardProcessTypeU
	default:
		*s = WebhookEventCardProcessType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCardProcessType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCardProcessType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventContract) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventContract) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Body != nil {
			e.FieldStart("body")
			e.ArrStart()
			for _, elem := range s.Body {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWebhookEventContract = [3]string{
	0: "shop_id",
	1: "event",
	2: "body",
}

// Decode decodes WebhookEventContract from json.
func (s *WebhookEventContract) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventContract to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "body":
			if err := func() error {
				s.Body = make([]WebhookEventContractBodyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WebhookEventContractBodyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Body = append(s.Body, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"body\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventContract")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventContract) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventContract) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventContractBodyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventContractBodyItem) encodeFields(e *jx.Encoder) {
	{
		if s.Acquirer.Set {
			e.FieldStart("acquirer")
			s.Acquirer.Encode(e)
		}
	}
	{
		if s.ExaminationTask.Set {
			e.FieldStart("examination_task")
			s.ExaminationTask.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.IsUpdated.Set {
			e.FieldStart("is_updated")
			s.IsUpdated.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventContractBodyItem = [5]string{
	0: "acquirer",
	1: "examination_task",
	2: "status_code",
	3: "status",
	4: "is_updated",
}

// Decode decodes WebhookEventContractBodyItem from json.
func (s *WebhookEventContractBodyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventContractBodyItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "acquirer":
			if err := func() error {
				s.Acquirer.Reset()
				if err := s.Acquirer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acquirer\"")
			}
		case "examination_task":
			if err := func() error {
				s.ExaminationTask.Reset()
				if err := s.ExaminationTask.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_task\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "is_updated":
			if err := func() error {
				s.IsUpdated.Reset()
				if err := s.IsUpdated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventContractBodyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventContractBodyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventContractBodyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventCustomerPaymentMethod) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventCustomerPaymentMethod) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ApplicationType.Set {
			e.FieldStart("application_type")
			s.ApplicationType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventCustomerPaymentMethod = [10]string{
	0: "shop_id",
	1: "customer_id",
	2: "payment_method_id",
	3: "pay_type",
	4: "status",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
	8: "application_type",
	9: "event",
}

// Decode decodes WebhookEventCustomerPaymentMethod from json.
func (s *WebhookEventCustomerPaymentMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCustomerPaymentMethod to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "application_type":
			if err := func() error {
				s.ApplicationType.Reset()
				if err := s.ApplicationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventCustomerPaymentMethod")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventCustomerPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCustomerPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentApplePay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentApplePay) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.Currency.Set {
			e.FieldStart("currency")
			s.Currency.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.TransactionDate.Set {
			e.FieldStart("transaction_date")
			s.TransactionDate.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentApplePay = [20]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "method",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "amount",
	11: "tax",
	12: "currency",
	13: "job_code",
	14: "forward",
	15: "transaction_id",
	16: "transaction_date",
	17: "approve",
	18: "error_code",
	19: "event",
}

// Decode decodes WebhookEventPaymentApplePay from json.
func (s *WebhookEventPaymentApplePay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePay to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "currency":
			if err := func() error {
				s.Currency.Reset()
				if err := s.Currency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currency\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "transaction_date":
			if err := func() error {
				s.TransactionDate.Reset()
				if err := s.TransactionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_date\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentApplePay")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentApplePay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentBulkBatchCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentBulkBatchCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.BulkPaymentID.Set {
			e.FieldStart("bulk_payment_id")
			s.BulkPaymentID.Encode(e)
		}
	}
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.SucceededCount.Set {
			e.FieldStart("succeeded_count")
			s.SucceededCount.Encode(e)
		}
	}
	{
		if s.FailedCount.Set {
			e.FieldStart("failed_count")
			s.FailedCount.Encode(e)
		}
	}
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentBulkBatchCard = [9]string{
	0: "shop_id",
	1: "bulk_payment_id",
	2: "file_name",
	3: "status",
	4: "succeeded_count",
	5: "failed_count",
	6: "total_count",
	7: "pay_type",
	8: "event",
}

// Decode decodes WebhookEventPaymentBulkBatchCard from json.
func (s *WebhookEventPaymentBulkBatchCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkBatchCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "bulk_payment_id":
			if err := func() error {
				s.BulkPaymentID.Reset()
				if err := s.BulkPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_payment_id\"")
			}
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "succeeded_count":
			if err := func() error {
				s.SucceededCount.Reset()
				if err := s.SucceededCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"succeeded_count\"")
			}
		case "failed_count":
			if err := func() error {
				s.FailedCount.Reset()
				if err := s.FailedCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failed_count\"")
			}
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentBulkBatchCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentBulkBatchCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkBatchCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentBulkRegistCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentBulkRegistCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.BulkPaymentID.Set {
			e.FieldStart("bulk_payment_id")
			s.BulkPaymentID.Encode(e)
		}
	}
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.RegistTotalCount.Set {
			e.FieldStart("regist_total_count")
			s.RegistTotalCount.Encode(e)
		}
	}
	{
		if s.ErrorTotalCount.Set {
			e.FieldStart("error_total_count")
			s.ErrorTotalCount.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.BulkSearchURL.Set {
			e.FieldStart("bulk_search_url")
			s.BulkSearchURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentBulkRegistCard = [10]string{
	0: "shop_id",
	1: "bulk_payment_id",
	2: "file_name",
	3: "status",
	4: "regist_total_count",
	5: "error_total_count",
	6: "pay_type",
	7: "bulk_search_url",
	8: "error_code",
	9: "event",
}

// Decode decodes WebhookEventPaymentBulkRegistCard from json.
func (s *WebhookEventPaymentBulkRegistCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkRegistCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "bulk_payment_id":
			if err := func() error {
				s.BulkPaymentID.Reset()
				if err := s.BulkPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_payment_id\"")
			}
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "regist_total_count":
			if err := func() error {
				s.RegistTotalCount.Reset()
				if err := s.RegistTotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"regist_total_count\"")
			}
		case "error_total_count":
			if err := func() error {
				s.ErrorTotalCount.Reset()
				if err := s.ErrorTotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_total_count\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "bulk_search_url":
			if err := func() error {
				s.BulkSearchURL.Reset()
				if err := s.BulkSearchURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_search_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentBulkRegistCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentBulkRegistCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkRegistCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.Currency.Set {
			e.FieldStart("currency")
			s.Currency.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.BulkPaymentID.Set {
			e.FieldStart("bulk_payment_id")
			s.BulkPaymentID.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.TransactionDate.Set {
			e.FieldStart("transaction_date")
			s.TransactionDate.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentCard = [22]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "method",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "amount",
	11: "tax",
	12: "currency",
	13: "job_code",
	14: "subscription_id",
	15: "bulk_payment_id",
	16: "forward",
	17: "transaction_id",
	18: "transaction_date",
	19: "approve",
	20: "error_code",
	21: "event",
}

// Decode decodes WebhookEventPaymentCard from json.
func (s *WebhookEventPaymentCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "currency":
			if err := func() error {
				s.Currency.Reset()
				if err := s.Currency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currency\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "bulk_payment_id":
			if err := func() error {
				s.BulkPaymentID.Reset()
				if err := s.BulkPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_payment_id\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "transaction_date":
			if err := func() error {
				s.TransactionDate.Reset()
				if err := s.TransactionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_date\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentDirectDebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentDirectDebit) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentDirectDebit = [22]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "payment_method_id",
	7:  "result_code",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
	11: "amount",
	12: "tax",
	13: "process_date",
	14: "target_date",
	15: "withdrawal_date",
	16: "request_accept_end_date",
	17: "transfer_return_date",
	18: "remarks",
	19: "subscription_id",
	20: "error_code",
	21: "event",
}

// Decode decodes WebhookEventPaymentDirectDebit from json.
func (s *WebhookEventPaymentDirectDebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentDirectDebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentDirectDebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentDirectDebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentDirectDebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentKonbini) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentKonbini) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		e.FieldStart("konbini_store_code")
		s.KonbiniStoreCode.Encode(e)
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentKonbini = [22]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "overpayment_flag",
	7:  "cancel_overpayment_flag",
	8:  "payment_date",
	9:  "payment_term",
	10: "process_date",
	11: "client_field_1",
	12: "client_field_2",
	13: "client_field_3",
	14: "amount",
	15: "tax",
	16: "konbini_code",
	17: "konbini_store_code",
	18: "order_serial",
	19: "invoice_id",
	20: "error_code",
	21: "event",
}

// Decode decodes WebhookEventPaymentKonbini from json.
func (s *WebhookEventPaymentKonbini) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbini to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				if err := s.KonbiniStoreCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentKonbini")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentPayPay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentPayPay) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentPayPay = [25]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "process_date",
	7:  "job_code",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
	11: "amount",
	12: "tax",
	13: "code_expiry_date",
	14: "auth_max_date",
	15: "order_description",
	16: "code_id",
	17: "payment_id",
	18: "payment_date",
	19: "merchant_payment_id",
	20: "merchant_update_id",
	21: "merchant_revert_id",
	22: "merchant_refund_id",
	23: "error_code",
	24: "event",
}

// Decode decodes WebhookEventPaymentPayPay from json.
func (s *WebhookEventPaymentPayPay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentPayPay to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentPayPay")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentPayPay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentPayPay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventRecurringBatchCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventRecurringBatchCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Succeeded.Set {
			e.FieldStart("succeeded")
			s.Succeeded.Encode(e)
		}
	}
	{
		if s.Failed.Set {
			e.FieldStart("failed")
			s.Failed.Encode(e)
		}
	}
	{
		if s.Total.Set {
			e.FieldStart("total")
			s.Total.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ChargeDate.Set {
			e.FieldStart("charge_date")
			s.ChargeDate.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventRecurringBatchCard = [8]string{
	0: "shop_id",
	1: "succeeded",
	2: "failed",
	3: "total",
	4: "process_date",
	5: "charge_date",
	6: "pay_type",
	7: "event",
}

// Decode decodes WebhookEventRecurringBatchCard from json.
func (s *WebhookEventRecurringBatchCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "succeeded":
			if err := func() error {
				s.Succeeded.Reset()
				if err := s.Succeeded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"succeeded\"")
			}
		case "failed":
			if err := func() error {
				s.Failed.Reset()
				if err := s.Failed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failed\"")
			}
		case "total":
			if err := func() error {
				s.Total.Reset()
				if err := s.Total.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "charge_date":
			if err := func() error {
				s.ChargeDate.Reset()
				if err := s.ChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge_date\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventRecurringBatchCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventRecurringBatchCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventRecurringBatchDirectDebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventRecurringBatchDirectDebit) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Succeeded.Set {
			e.FieldStart("succeeded")
			s.Succeeded.Encode(e)
		}
	}
	{
		if s.Failed.Set {
			e.FieldStart("failed")
			s.Failed.Encode(e)
		}
	}
	{
		if s.Total.Set {
			e.FieldStart("total")
			s.Total.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ChargeDate.Set {
			e.FieldStart("charge_date")
			s.ChargeDate.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventRecurringBatchDirectDebit = [8]string{
	0: "shop_id",
	1: "succeeded",
	2: "failed",
	3: "total",
	4: "process_date",
	5: "charge_date",
	6: "pay_type",
	7: "event",
}

// Decode decodes WebhookEventRecurringBatchDirectDebit from json.
func (s *WebhookEventRecurringBatchDirectDebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchDirectDebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "succeeded":
			if err := func() error {
				s.Succeeded.Reset()
				if err := s.Succeeded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"succeeded\"")
			}
		case "failed":
			if err := func() error {
				s.Failed.Reset()
				if err := s.Failed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failed\"")
			}
		case "total":
			if err := func() error {
				s.Total.Reset()
				if err := s.Total.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "charge_date":
			if err := func() error {
				s.ChargeDate.Reset()
				if err := s.ChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge_date\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventRecurringBatchDirectDebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventRecurringBatchDirectDebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchDirectDebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventSubscriptionCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventSubscriptionCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.DefaultCardFlag.Set {
			e.FieldStart("default_card_flag")
			s.DefaultCardFlag.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventSubscriptionCard = [17]string{
	0:  "shop_id",
	1:  "subscription_id",
	2:  "plan_id",
	3:  "customer_id",
	4:  "card_id",
	5:  "default_card_flag",
	6:  "status",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "process_date",
	11: "start_date",
	12: "stop_date",
	13: "next_charge_date",
	14: "end_month_flag",
	15: "pay_type",
	16: "event",
}

// Decode decodes WebhookEventSubscriptionCard from json.
func (s *WebhookEventSubscriptionCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "default_card_flag":
			if err := func() error {
				s.DefaultCardFlag.Reset()
				if err := s.DefaultCardFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_card_flag\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventSubscriptionCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventSubscriptionCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventSubscriptionDirectDebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventSubscriptionDirectDebit) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventSubscriptionDirectDebit = [17]string{
	0:  "shop_id",
	1:  "subscription_id",
	2:  "plan_id",
	3:  "customer_id",
	4:  "payment_method_id",
	5:  "default_flag",
	6:  "status",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "remarks",
	11: "start_date",
	12: "stop_date",
	13: "next_charge_date",
	14: "end_month_flag",
	15: "pay_type",
	16: "event",
}

// Decode decodes WebhookEventSubscriptionDirectDebit from json.
func (s *WebhookEventSubscriptionDirectDebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionDirectDebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventSubscriptionDirectDebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventSubscriptionDirectDebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionDirectDebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Receive.Set {
			e.FieldStart("receive")
			s.Receive.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookResponse = [1]string{
	0: "receive",
}

// Decode decodes WebhookResponse from json.
func (s *WebhookResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "receive":
			if err := func() error {
				s.Receive.Reset()
				if err := s.Receive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receive\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookResponseReceive as json.
func (s WebhookResponseReceive) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookResponseReceive from json.
func (s *WebhookResponseReceive) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookResponseReceive to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookResponseReceive(v) {
	case WebhookResponseReceive0:
		*s = WebhookResponseReceive0
	case WebhookResponseReceive1:
		*s = WebhookResponseReceive1
	default:
		*s = WebhookResponseReceive(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookResponseReceive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookResponseReceive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSetting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSetting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated.Set {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSetting = [6]string{
	0: "id",
	1: "url",
	2: "event",
	3: "signature",
	4: "created",
	5: "updated",
}

// Decode decodes WebhookSetting from json.
func (s *WebhookSetting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSetting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated.Reset()
				if err := s.Updated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSetting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		e.FieldStart("event")
		s.Event.Encode(e)
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingCreatingRequest = [4]string{
	0: "id",
	1: "url",
	2: "event",
	3: "signature",
}

// Decode decodes WebhookSettingCreatingRequest from json.
func (s *WebhookSettingCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfWebhookSettingCreatingRequest) {
					name = jsonFieldsNameOfWebhookSettingCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes WebhookSettingDeletingResponse from json.
func (s *WebhookSettingDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingList) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingList) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWebhookSettingList = [1]string{
	0: "list",
}

// Decode decodes WebhookSettingList from json.
func (s *WebhookSettingList) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingList to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]WebhookSetting, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WebhookSetting
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingList")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingList) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingList) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingPropertiesID as json.
func (s WebhookSettingPropertiesID) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes WebhookSettingPropertiesID from json.
func (s *WebhookSettingPropertiesID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingPropertiesID to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WebhookSettingPropertiesID(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingPropertiesID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingPropertiesID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingUpdatingRequest = [3]string{
	0: "url",
	1: "event",
	2: "signature",
}

// Decode decodes WebhookSettingUpdatingRequest from json.
func (s *WebhookSettingUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WinHeight as json.
func (s WinHeight) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes WinHeight from json.
func (s *WinHeight) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WinHeight to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WinHeight(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WinHeight) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WinHeight) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WinSizeType as json.
func (s WinSizeType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WinSizeType from json.
func (s *WinSizeType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WinSizeType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WinSizeType(v) {
	case WinSizeType1:
		*s = WinSizeType1
	case WinSizeType2:
		*s = WinSizeType2
	default:
		*s = WinSizeType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WinSizeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WinSizeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WinWidth as json.
func (s WinWidth) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes WinWidth from json.
func (s *WinWidth) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WinWidth to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WinWidth(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WinWidth) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WinWidth) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WithdrawalDate as json.
func (s WithdrawalDate) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes WithdrawalDate from json.
func (s *WithdrawalDate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WithdrawalDate to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = WithdrawalDate(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WithdrawalDate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WithdrawalDate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesAmount as json.
func (s XReqPropertiesAmount) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes XReqPropertiesAmount from json.
func (s *XReqPropertiesAmount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode XReqPropertiesAmount to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = XReqPropertiesAmount(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s XReqPropertiesAmount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *XReqPropertiesAmount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesEmail as json.
func (s XReqPropertiesEmail) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes XReqPropertiesEmail from json.
func (s *XReqPropertiesEmail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode XReqPropertiesEmail to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = XReqPropertiesEmail(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s XReqPropertiesEmail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *XReqPropertiesEmail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesName as json.
func (s XReqPropertiesName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes XReqPropertiesName from json.
func (s *XReqPropertiesName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode XReqPropertiesName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = XReqPropertiesName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s XReqPropertiesName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *XReqPropertiesName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesPassword as json.
func (s XReqPropertiesPassword) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes XReqPropertiesPassword from json.
func (s *XReqPropertiesPassword) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode XReqPropertiesPassword to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = XReqPropertiesPassword(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s XReqPropertiesPassword) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *XReqPropertiesPassword) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesTax as json.
func (s XReqPropertiesTax) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes XReqPropertiesTax from json.
func (s *XReqPropertiesTax) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode XReqPropertiesTax to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = XReqPropertiesTax(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s XReqPropertiesTax) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *XReqPropertiesTax) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes XReqPropertiesToken as json.
func (s XReqPropertiesToken) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes XReqPropertiesToken from json.
func (s *XReqPropertiesToken) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode XReqPropertiesToken to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = XReqPropertiesToken(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s XReqPropertiesToken) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *XReqPropertiesToken) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes YearlySales as json.
func (s YearlySales) Encode(e *jx.Encoder) {
	unwrapped := float64(s)

	e.Float64(unwrapped)
}

// Decode decodes YearlySales from json.
func (s *YearlySales) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode YearlySales to nil")
	}
	var unwrapped float64
	if err := func() error {
		v, err := d.Float64()
		unwrapped = float64(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = YearlySales(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s YearlySales) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *YearlySales) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
